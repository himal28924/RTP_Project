
RTP_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000134  00800200  000041d6  0000426a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000041d6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000ed5  00800334  00800334  0000439e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000439e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000043fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000768  00000000  00000000  0000443c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000092c7  00000000  00000000  00004ba4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002631  00000000  00000000  0000de6b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004c66  00000000  00000000  0001049c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001a80  00000000  00000000  00015104  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002d96  00000000  00000000  00016b84  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00008867  00000000  00000000  0001991a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000720  00000000  00000000  00022181  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	94 c0       	rjmp	.+296    	; 0x12a <__ctors_end>
       2:	00 00       	nop
       4:	b3 c0       	rjmp	.+358    	; 0x16c <__bad_interrupt>
       6:	00 00       	nop
       8:	b1 c0       	rjmp	.+354    	; 0x16c <__bad_interrupt>
       a:	00 00       	nop
       c:	af c0       	rjmp	.+350    	; 0x16c <__bad_interrupt>
       e:	00 00       	nop
      10:	ad c0       	rjmp	.+346    	; 0x16c <__bad_interrupt>
      12:	00 00       	nop
      14:	ab c0       	rjmp	.+342    	; 0x16c <__bad_interrupt>
      16:	00 00       	nop
      18:	a9 c0       	rjmp	.+338    	; 0x16c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	a7 c0       	rjmp	.+334    	; 0x16c <__bad_interrupt>
      1e:	00 00       	nop
      20:	a5 c0       	rjmp	.+330    	; 0x16c <__bad_interrupt>
      22:	00 00       	nop
      24:	a3 c0       	rjmp	.+326    	; 0x16c <__bad_interrupt>
      26:	00 00       	nop
      28:	a1 c0       	rjmp	.+322    	; 0x16c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	9f c0       	rjmp	.+318    	; 0x16c <__bad_interrupt>
      2e:	00 00       	nop
      30:	87 c5       	rjmp	.+2830   	; 0xb40 <__vector_12>
      32:	00 00       	nop
      34:	9b c0       	rjmp	.+310    	; 0x16c <__bad_interrupt>
      36:	00 00       	nop
      38:	99 c0       	rjmp	.+306    	; 0x16c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	97 c0       	rjmp	.+302    	; 0x16c <__bad_interrupt>
      3e:	00 00       	nop
      40:	95 c0       	rjmp	.+298    	; 0x16c <__bad_interrupt>
      42:	00 00       	nop
      44:	93 c0       	rjmp	.+294    	; 0x16c <__bad_interrupt>
      46:	00 00       	nop
      48:	91 c0       	rjmp	.+290    	; 0x16c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	8f c0       	rjmp	.+286    	; 0x16c <__bad_interrupt>
      4e:	00 00       	nop
      50:	8d c0       	rjmp	.+282    	; 0x16c <__bad_interrupt>
      52:	00 00       	nop
      54:	8b c0       	rjmp	.+278    	; 0x16c <__bad_interrupt>
      56:	00 00       	nop
      58:	89 c0       	rjmp	.+274    	; 0x16c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	87 c0       	rjmp	.+270    	; 0x16c <__bad_interrupt>
      5e:	00 00       	nop
      60:	85 c0       	rjmp	.+266    	; 0x16c <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 c2 17 	jmp	0x2f84	; 0x2f84 <__vector_25>
      68:	0c 94 14 18 	jmp	0x3028	; 0x3028 <__vector_26>
      6c:	7f c0       	rjmp	.+254    	; 0x16c <__bad_interrupt>
      6e:	00 00       	nop
      70:	7d c0       	rjmp	.+250    	; 0x16c <__bad_interrupt>
      72:	00 00       	nop
      74:	7b c0       	rjmp	.+246    	; 0x16c <__bad_interrupt>
      76:	00 00       	nop
      78:	79 c0       	rjmp	.+242    	; 0x16c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	77 c0       	rjmp	.+238    	; 0x16c <__bad_interrupt>
      7e:	00 00       	nop
      80:	75 c0       	rjmp	.+234    	; 0x16c <__bad_interrupt>
      82:	00 00       	nop
      84:	73 c0       	rjmp	.+230    	; 0x16c <__bad_interrupt>
      86:	00 00       	nop
      88:	71 c0       	rjmp	.+226    	; 0x16c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	6f c0       	rjmp	.+222    	; 0x16c <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 58 18 	jmp	0x30b0	; 0x30b0 <__vector_36>
      94:	0c 94 aa 18 	jmp	0x3154	; 0x3154 <__vector_37>
      98:	69 c0       	rjmp	.+210    	; 0x16c <__bad_interrupt>
      9a:	00 00       	nop
      9c:	67 c0       	rjmp	.+206    	; 0x16c <__bad_interrupt>
      9e:	00 00       	nop
      a0:	65 c0       	rjmp	.+202    	; 0x16c <__bad_interrupt>
      a2:	00 00       	nop
      a4:	63 c0       	rjmp	.+198    	; 0x16c <__bad_interrupt>
      a6:	00 00       	nop
      a8:	61 c0       	rjmp	.+194    	; 0x16c <__bad_interrupt>
      aa:	00 00       	nop
      ac:	5f c0       	rjmp	.+190    	; 0x16c <__bad_interrupt>
      ae:	00 00       	nop
      b0:	5d c0       	rjmp	.+186    	; 0x16c <__bad_interrupt>
      b2:	00 00       	nop
      b4:	5b c0       	rjmp	.+182    	; 0x16c <__bad_interrupt>
      b6:	00 00       	nop
      b8:	59 c0       	rjmp	.+178    	; 0x16c <__bad_interrupt>
      ba:	00 00       	nop
      bc:	57 c0       	rjmp	.+174    	; 0x16c <__bad_interrupt>
      be:	00 00       	nop
      c0:	55 c0       	rjmp	.+170    	; 0x16c <__bad_interrupt>
      c2:	00 00       	nop
      c4:	53 c0       	rjmp	.+166    	; 0x16c <__bad_interrupt>
      c6:	00 00       	nop
      c8:	51 c0       	rjmp	.+162    	; 0x16c <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 ee 18 	jmp	0x31dc	; 0x31dc <__vector_51>
      d0:	0c 94 40 19 	jmp	0x3280	; 0x3280 <__vector_52>
      d4:	4b c0       	rjmp	.+150    	; 0x16c <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 84 19 	jmp	0x3308	; 0x3308 <__vector_54>
      dc:	0c 94 d6 19 	jmp	0x33ac	; 0x33ac <__vector_55>
      e0:	45 c0       	rjmp	.+138    	; 0x16c <__bad_interrupt>
      e2:	00 00       	nop
      e4:	42 14       	cp	r4, r2
      e6:	42 14       	cp	r4, r2
      e8:	42 14       	cp	r4, r2
      ea:	79 14       	cp	r7, r9
      ec:	81 14       	cp	r8, r1
      ee:	96 14       	cp	r9, r6
      f0:	42 14       	cp	r4, r2
      f2:	42 14       	cp	r4, r2
      f4:	79 14       	cp	r7, r9
      f6:	81 14       	cp	r8, r1

000000f8 <prvIdleTask>:
    /* Reset the event list item to its normal value - so it can be used with
     * queues and semaphores. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */

    return uxReturn;
}
      f8:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <prvCheckTasksWaitingTermination>
      fc:	80 91 45 11 	lds	r24, 0x1145	; 0x801145 <pxReadyTasksLists>
     100:	82 30       	cpi	r24, 0x02	; 2
     102:	08 f0       	brcs	.+2      	; 0x106 <prvIdleTask+0xe>
     104:	58 d4       	rcall	.+2224   	; 0x9b6 <vPortYield>
     106:	0e 94 bf 14 	call	0x297e	; 0x297e <vApplicationIdleHook>
     10a:	f6 cf       	rjmp	.-20     	; 0xf8 <prvIdleTask>

0000010c <prvTimerTask>:
                pxNewTimer->ucStatus = 0x00;
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
     10c:	cf 93       	push	r28
     10e:	df 93       	push	r29
     110:	1f 92       	push	r1
     112:	cd b7       	in	r28, 0x3d	; 61
     114:	de b7       	in	r29, 0x3e	; 62
     116:	ce 01       	movw	r24, r28
     118:	01 96       	adiw	r24, 0x01	; 1
     11a:	0e 94 c5 11 	call	0x238a	; 0x238a <prvGetNextExpireTime>
     11e:	49 81       	ldd	r20, Y+1	; 0x01
     120:	0e 94 b8 13 	call	0x2770	; 0x2770 <prvProcessTimerOrBlockTask>
     124:	0e 94 0c 14 	call	0x2818	; 0x2818 <prvProcessReceivedCommands>
     128:	f6 cf       	rjmp	.-20     	; 0x116 <prvTimerTask+0xa>

0000012a <__ctors_end>:
     12a:	11 24       	eor	r1, r1
     12c:	1f be       	out	0x3f, r1	; 63
     12e:	cf ef       	ldi	r28, 0xFF	; 255
     130:	d1 e2       	ldi	r29, 0x21	; 33
     132:	de bf       	out	0x3e, r29	; 62
     134:	cd bf       	out	0x3d, r28	; 61
     136:	00 e0       	ldi	r16, 0x00	; 0
     138:	0c bf       	out	0x3c, r16	; 60

0000013a <__do_copy_data>:
     13a:	13 e0       	ldi	r17, 0x03	; 3
     13c:	a0 e0       	ldi	r26, 0x00	; 0
     13e:	b2 e0       	ldi	r27, 0x02	; 2
     140:	e6 ed       	ldi	r30, 0xD6	; 214
     142:	f1 e4       	ldi	r31, 0x41	; 65
     144:	00 e0       	ldi	r16, 0x00	; 0
     146:	0b bf       	out	0x3b, r16	; 59
     148:	02 c0       	rjmp	.+4      	; 0x14e <__do_copy_data+0x14>
     14a:	07 90       	elpm	r0, Z+
     14c:	0d 92       	st	X+, r0
     14e:	a4 33       	cpi	r26, 0x34	; 52
     150:	b1 07       	cpc	r27, r17
     152:	d9 f7       	brne	.-10     	; 0x14a <__do_copy_data+0x10>

00000154 <__do_clear_bss>:
     154:	22 e1       	ldi	r18, 0x12	; 18
     156:	a4 e3       	ldi	r26, 0x34	; 52
     158:	b3 e0       	ldi	r27, 0x03	; 3
     15a:	01 c0       	rjmp	.+2      	; 0x15e <.do_clear_bss_start>

0000015c <.do_clear_bss_loop>:
     15c:	1d 92       	st	X+, r1

0000015e <.do_clear_bss_start>:
     15e:	a9 30       	cpi	r26, 0x09	; 9
     160:	b2 07       	cpc	r27, r18
     162:	e1 f7       	brne	.-8      	; 0x15c <.do_clear_bss_loop>
     164:	0e 94 fd 14 	call	0x29fa	; 0x29fa <main>
     168:	0c 94 e9 20 	jmp	0x41d2	; 0x41d2 <_exit>

0000016c <__bad_interrupt>:
     16c:	49 cf       	rjmp	.-366    	; 0x0 <__vectors>

0000016e <create_all_application_tasks>:

// Event group for obstacle detection
EventGroupHandle_t xObstacleEventGroup;


void create_all_application_tasks(void) {
     16e:	ef 92       	push	r14
     170:	ff 92       	push	r15
     172:	0f 93       	push	r16
	// Initialize semaphores
	xFrontDistanceSemaphore = xSemaphoreCreateMutex();
     174:	81 e0       	ldi	r24, 0x01	; 1
     176:	d6 d6       	rcall	.+3500   	; 0xf24 <xQueueCreateMutex>
     178:	90 93 fe 11 	sts	0x11FE, r25	; 0x8011fe <xFrontDistanceSemaphore+0x1>
     17c:	80 93 fd 11 	sts	0x11FD, r24	; 0x8011fd <xFrontDistanceSemaphore>
	xBackDistanceSemaphore = xSemaphoreCreateMutex();
     180:	81 e0       	ldi	r24, 0x01	; 1
     182:	d0 d6       	rcall	.+3488   	; 0xf24 <xQueueCreateMutex>
     184:	90 93 fa 11 	sts	0x11FA, r25	; 0x8011fa <xBackDistanceSemaphore+0x1>
     188:	80 93 f9 11 	sts	0x11F9, r24	; 0x8011f9 <xBackDistanceSemaphore>

	// Initialize event group
	xObstacleEventGroup = xEventGroupCreate();
     18c:	db d1       	rcall	.+950    	; 0x544 <xEventGroupCreate>
     18e:	90 93 fc 11 	sts	0x11FC, r25	; 0x8011fc <xObstacleEventGroup+0x1>
     192:	80 93 fb 11 	sts	0x11FB, r24	; 0x8011fb <xObstacleEventGroup>

	// Create distance measurement tasks
	xTaskCreate(distanceMeasurementFrontTask, "FrontDistanceMeas", configMINIMAL_STACK_SIZE, NULL, 3, NULL);
     196:	e1 2c       	mov	r14, r1
     198:	f1 2c       	mov	r15, r1
     19a:	03 e0       	ldi	r16, 0x03	; 3
     19c:	20 e0       	ldi	r18, 0x00	; 0
     19e:	30 e0       	ldi	r19, 0x00	; 0
     1a0:	40 ec       	ldi	r20, 0xC0	; 192
     1a2:	50 e0       	ldi	r21, 0x00	; 0
     1a4:	61 e2       	ldi	r22, 0x21	; 33
     1a6:	72 e0       	ldi	r23, 0x02	; 2
     1a8:	83 e5       	ldi	r24, 0x53	; 83
     1aa:	91 e0       	ldi	r25, 0x01	; 1
     1ac:	0e 94 34 0b 	call	0x1668	; 0x1668 <xTaskCreate>
	xTaskCreate(distanceMeasurementBackTask, "BackDistanceMeas", configMINIMAL_STACK_SIZE, NULL, 3, NULL);
     1b0:	20 e0       	ldi	r18, 0x00	; 0
     1b2:	30 e0       	ldi	r19, 0x00	; 0
     1b4:	40 ec       	ldi	r20, 0xC0	; 192
     1b6:	50 e0       	ldi	r21, 0x00	; 0
     1b8:	63 e3       	ldi	r22, 0x33	; 51
     1ba:	72 e0       	ldi	r23, 0x02	; 2
     1bc:	80 ea       	ldi	r24, 0xA0	; 160
     1be:	91 e0       	ldi	r25, 0x01	; 1
     1c0:	0e 94 34 0b 	call	0x1668	; 0x1668 <xTaskCreate>
}
     1c4:	0f 91       	pop	r16
     1c6:	ff 90       	pop	r15
     1c8:	ef 90       	pop	r14
     1ca:	08 95       	ret

000001cc <getCarSpeed>:


// Here i am getting random car speed 
int getCarSpeed() {
	// Assume cars' speed ranges from 30 to 100 units
	return (rand() % 71) + 30;
     1cc:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <rand>
     1d0:	67 e4       	ldi	r22, 0x47	; 71
     1d2:	70 e0       	ldi	r23, 0x00	; 0
     1d4:	0e 94 e3 1b 	call	0x37c6	; 0x37c6 <__divmodhi4>
}
     1d8:	4e 96       	adiw	r24, 0x1e	; 30
     1da:	08 95       	ret

000001dc <calculateCollisionRisk>:

// This function calculates the risk of collision
bool calculateCollisionRisk(uint16_t measuredDistance) {
     1dc:	ef 92       	push	r14
     1de:	ff 92       	push	r15
     1e0:	0f 93       	push	r16
     1e2:	1f 93       	push	r17
     1e4:	cf 93       	push	r28
     1e6:	df 93       	push	r29
     1e8:	8c 01       	movw	r16, r24
	int otherCarSpeed = getCarSpeed(); // Simulate other car's speed
     1ea:	f0 df       	rcall	.-32     	; 0x1cc <getCarSpeed>
     1ec:	7c 01       	movw	r14, r24
	printf("\n Others speed : %d", otherCarSpeed);
     1ee:	ff 92       	push	r15
     1f0:	8f 93       	push	r24
     1f2:	84 e4       	ldi	r24, 0x44	; 68
     1f4:	92 e0       	ldi	r25, 0x02	; 2
     1f6:	9f 93       	push	r25
     1f8:	8f 93       	push	r24
     1fa:	0e 94 cd 1d 	call	0x3b9a	; 0x3b9a <printf>
	int ourCarSpeed = getCarSpeed(); // Get your car's current speed
     1fe:	e6 df       	rcall	.-52     	; 0x1cc <getCarSpeed>
     200:	ec 01       	movw	r28, r24
	printf("our speed : %d", ourCarSpeed);
     202:	df 93       	push	r29
     204:	8f 93       	push	r24
     206:	88 e5       	ldi	r24, 0x58	; 88
     208:	92 e0       	ldi	r25, 0x02	; 2
     20a:	9f 93       	push	r25
     20c:	8f 93       	push	r24
     20e:	0e 94 cd 1d 	call	0x3b9a	; 0x3b9a <printf>

	// Calculate safe stopping distance (you would define the logic for this)
	int safeStoppingDistance = (ourCarSpeed + otherCarSpeed) * SAFE_DISTANCE_MULTIPLIER;
     212:	ce 0d       	add	r28, r14
     214:	df 1d       	adc	r29, r15
     216:	cc 0f       	add	r28, r28
     218:	dd 1f       	adc	r29, r29
	printf("safe Stopping Distance : %d", safeStoppingDistance);
     21a:	df 93       	push	r29
     21c:	cf 93       	push	r28
     21e:	87 e6       	ldi	r24, 0x67	; 103
     220:	92 e0       	ldi	r25, 0x02	; 2
     222:	9f 93       	push	r25
     224:	8f 93       	push	r24
     226:	0e 94 cd 1d 	call	0x3b9a	; 0x3b9a <printf>
	printf(" measuredDistance  : %d", measuredDistance);
     22a:	1f 93       	push	r17
     22c:	0f 93       	push	r16
     22e:	83 e8       	ldi	r24, 0x83	; 131
     230:	92 e0       	ldi	r25, 0x02	; 2
     232:	9f 93       	push	r25
     234:	8f 93       	push	r24
     236:	0e 94 cd 1d 	call	0x3b9a	; 0x3b9a <printf>

	// Determine if there is a high risk of collision
	bool isHighRisk = measuredDistance < safeStoppingDistance;
     23a:	81 e0       	ldi	r24, 0x01	; 1
     23c:	2d b7       	in	r18, 0x3d	; 61
     23e:	3e b7       	in	r19, 0x3e	; 62
     240:	20 5f       	subi	r18, 0xF0	; 240
     242:	3f 4f       	sbci	r19, 0xFF	; 255
     244:	0f b6       	in	r0, 0x3f	; 63
     246:	f8 94       	cli
     248:	3e bf       	out	0x3e, r19	; 62
     24a:	0f be       	out	0x3f, r0	; 63
     24c:	2d bf       	out	0x3d, r18	; 61
     24e:	0c 17       	cp	r16, r28
     250:	1d 07       	cpc	r17, r29
     252:	08 f0       	brcs	.+2      	; 0x256 <calculateCollisionRisk+0x7a>
     254:	80 e0       	ldi	r24, 0x00	; 0

	return isHighRisk;
}
     256:	df 91       	pop	r29
     258:	cf 91       	pop	r28
     25a:	1f 91       	pop	r17
     25c:	0f 91       	pop	r16
     25e:	ff 90       	pop	r15
     260:	ef 90       	pop	r14
     262:	08 95       	ret

00000264 <turnOnLight>:

// Function to turn on the light
void turnOnLight(bool frontLight)
{
	
	uint8_t LIGHT_PIN = frontLight ? P_LIGHT_PIN_Front : P_LIGHT_PIN_Back; // Choose the correct pin based on the sensor
     264:	88 23       	and	r24, r24
     266:	11 f0       	breq	.+4      	; 0x26c <turnOnLight+0x8>
     268:	30 e0       	ldi	r19, 0x00	; 0
     26a:	01 c0       	rjmp	.+2      	; 0x26e <turnOnLight+0xa>
     26c:	36 e0       	ldi	r19, 0x06	; 6
	// Set LIGHT_PIN high
	PORTC |= (1 << LIGHT_PIN);
     26e:	28 b1       	in	r18, 0x08	; 8
     270:	81 e0       	ldi	r24, 0x01	; 1
     272:	90 e0       	ldi	r25, 0x00	; 0
     274:	02 c0       	rjmp	.+4      	; 0x27a <turnOnLight+0x16>
     276:	88 0f       	add	r24, r24
     278:	99 1f       	adc	r25, r25
     27a:	3a 95       	dec	r19
     27c:	e2 f7       	brpl	.-8      	; 0x276 <turnOnLight+0x12>
     27e:	82 2b       	or	r24, r18
     280:	88 b9       	out	0x08, r24	; 8
     282:	08 95       	ret

00000284 <turnOffLight>:
}

// Function to turn off the light
void turnOffLight(bool frontLight)
{
	uint8_t LIGHT_PIN = frontLight ? P_LIGHT_PIN_Front : P_LIGHT_PIN_Back; // Choose the correct pin based on the sensor
     284:	88 23       	and	r24, r24
     286:	11 f0       	breq	.+4      	; 0x28c <turnOffLight+0x8>
     288:	30 e0       	ldi	r19, 0x00	; 0
     28a:	01 c0       	rjmp	.+2      	; 0x28e <turnOffLight+0xa>
     28c:	36 e0       	ldi	r19, 0x06	; 6

	// Set LIGHT_PIN low
	PORTC &= ~(1 << LIGHT_PIN);
     28e:	28 b1       	in	r18, 0x08	; 8
     290:	81 e0       	ldi	r24, 0x01	; 1
     292:	90 e0       	ldi	r25, 0x00	; 0
     294:	02 c0       	rjmp	.+4      	; 0x29a <turnOffLight+0x16>
     296:	88 0f       	add	r24, r24
     298:	99 1f       	adc	r25, r25
     29a:	3a 95       	dec	r19
     29c:	e2 f7       	brpl	.-8      	; 0x296 <turnOffLight+0x12>
     29e:	80 95       	com	r24
     2a0:	82 23       	and	r24, r18
     2a2:	88 b9       	out	0x08, r24	; 8
     2a4:	08 95       	ret

000002a6 <distanceMeasurementFrontTask>:
	xTaskCreate(distanceMeasurementBackTask, "BackDistanceMeas", configMINIMAL_STACK_SIZE, NULL, 3, NULL);
}

// Definitions for distanceMeasurementFrontTask, distanceMeasurementBackTask, obstacleEventHandlerTask...

void distanceMeasurementFrontTask(void *pvParameters) {
     2a6:	cf 93       	push	r28
     2a8:	df 93       	push	r29
     2aa:	00 d0       	rcall	.+0      	; 0x2ac <distanceMeasurementFrontTask+0x6>
     2ac:	1f 92       	push	r1
     2ae:	cd b7       	in	r28, 0x3d	; 61
     2b0:	de b7       	in	r29, 0x3e	; 62
	
	printf("Distance measurement Front task\n");
     2b2:	8b e9       	ldi	r24, 0x9B	; 155
     2b4:	92 e0       	ldi	r25, 0x02	; 2
     2b6:	0e 94 e0 1d 	call	0x3bc0	; 0x3bc0 <puts>
	// In every task before loop:
	#if (configUSE_APPLICATION_TASK_TAG == 1)
	// Set taskTag
	vTaskSetApplicationTaskTag(NULL, (void *)3 /*task id*/);
     2ba:	63 e0       	ldi	r22, 0x03	; 3
     2bc:	70 e0       	ldi	r23, 0x00	; 0
     2be:	80 e0       	ldi	r24, 0x00	; 0
     2c0:	90 e0       	ldi	r25, 0x00	; 0
     2c2:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <vTaskSetApplicationTaskTag>
	#endif
	
	// Define the period of the task.
	const TickType_t xFrequency = pdMS_TO_TICKS(1000); // Period of 1 second in ticks
	TickType_t xLastWakeTime = xTaskGetTickCount(); // Initialise the xLastWakeTime variable with the current time.
     2c6:	0e 94 c2 0b 	call	0x1784	; 0x1784 <xTaskGetTickCount>
     2ca:	69 83       	std	Y+1, r22	; 0x01
     2cc:	7a 83       	std	Y+2, r23	; 0x02
     2ce:	8b 83       	std	Y+3, r24	; 0x03
     2d0:	9c 83       	std	Y+4, r25	; 0x04

	while (1) {
		uint16_t distance = 0;

		// Acquire the semaphore before reading the shared variable.
		if (xSemaphoreTake(xFrontDistanceSemaphore, portMAX_DELAY) == pdTRUE) {
     2d2:	4f ef       	ldi	r20, 0xFF	; 255
     2d4:	5f ef       	ldi	r21, 0xFF	; 255
     2d6:	ba 01       	movw	r22, r20
     2d8:	80 91 fd 11 	lds	r24, 0x11FD	; 0x8011fd <xFrontDistanceSemaphore>
     2dc:	90 91 fe 11 	lds	r25, 0x11FE	; 0x8011fe <xFrontDistanceSemaphore+0x1>
     2e0:	f2 d6       	rcall	.+3556   	; 0x10c6 <xQueueSemaphoreTake>
     2e2:	81 30       	cpi	r24, 0x01	; 1
     2e4:	a9 f4       	brne	.+42     	; 0x310 <distanceMeasurementFrontTask+0x6a>
			frontMeasuredDistance = hc_sr04_takeMeasurement(true);
     2e6:	96 d0       	rcall	.+300    	; 0x414 <hc_sr04_takeMeasurement>
     2e8:	90 93 37 03 	sts	0x0337, r25	; 0x800337 <frontMeasuredDistance+0x1>
     2ec:	80 93 36 03 	sts	0x0336, r24	; 0x800336 <frontMeasuredDistance>
     2f0:	e0 90 36 03 	lds	r14, 0x0336	; 0x800336 <frontMeasuredDistance>
			distance = frontMeasuredDistance;
     2f4:	f0 90 37 03 	lds	r15, 0x0337	; 0x800337 <frontMeasuredDistance+0x1>
     2f8:	00 e0       	ldi	r16, 0x00	; 0
			// Release the semaphore as soon as the shared variable is read.
			xSemaphoreGive(xFrontDistanceSemaphore);
     2fa:	20 e0       	ldi	r18, 0x00	; 0
     2fc:	30 e0       	ldi	r19, 0x00	; 0
     2fe:	a9 01       	movw	r20, r18
     300:	60 e0       	ldi	r22, 0x00	; 0
     302:	70 e0       	ldi	r23, 0x00	; 0
     304:	80 91 fd 11 	lds	r24, 0x11FD	; 0x8011fd <xFrontDistanceSemaphore>
     308:	90 91 fe 11 	lds	r25, 0x11FE	; 0x8011fe <xFrontDistanceSemaphore+0x1>
     30c:	6b d5       	rcall	.+2774   	; 0xde4 <xQueueGenericSend>
     30e:	02 c0       	rjmp	.+4      	; 0x314 <distanceMeasurementFrontTask+0x6e>
     310:	e1 2c       	mov	r14, r1
	// Define the period of the task.
	const TickType_t xFrequency = pdMS_TO_TICKS(1000); // Period of 1 second in ticks
	TickType_t xLastWakeTime = xTaskGetTickCount(); // Initialise the xLastWakeTime variable with the current time.

	while (1) {
		uint16_t distance = 0;
     312:	f1 2c       	mov	r15, r1
			// Release the semaphore as soon as the shared variable is read.
			xSemaphoreGive(xFrontDistanceSemaphore);
		}

		// Calculate the collision risk.
		bool isHighRisk = calculateCollisionRisk(distance);
     314:	c7 01       	movw	r24, r14
     316:	62 df       	rcall	.-316    	; 0x1dc <calculateCollisionRisk>
     318:	88 23       	and	r24, r24
		if (isHighRisk) {
     31a:	39 f0       	breq	.+14     	; 0x32a <distanceMeasurementFrontTask+0x84>
     31c:	8b eb       	ldi	r24, 0xBB	; 187
			printf("RISK!! RISK!!\n");
     31e:	92 e0       	ldi	r25, 0x02	; 2
     320:	0e 94 e0 1d 	call	0x3bc0	; 0x3bc0 <puts>
			// Take immediate action, such as notifying for risk.
			turnOnLight(true); // Indicate risk with the front light.
     324:	81 e0       	ldi	r24, 0x01	; 1
     326:	9e df       	rcall	.-196    	; 0x264 <turnOnLight>
     328:	02 c0       	rjmp	.+4      	; 0x32e <distanceMeasurementFrontTask+0x88>
			} else {
			turnOffLight(true); // Turn off the front light if no risk.
     32a:	81 e0       	ldi	r24, 0x01	; 1
     32c:	ab df       	rcall	.-170    	; 0x284 <turnOffLight>
     32e:	4e e3       	ldi	r20, 0x3E	; 62
		}

		// Wait for the next cycle.
		xTaskDelayUntil(&xLastWakeTime, xFrequency);
     330:	50 e0       	ldi	r21, 0x00	; 0
     332:	60 e0       	ldi	r22, 0x00	; 0
     334:	70 e0       	ldi	r23, 0x00	; 0
     336:	ce 01       	movw	r24, r28
     338:	01 96       	adiw	r24, 0x01	; 1
     33a:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <xTaskDelayUntil>
     33e:	c9 cf       	rjmp	.-110    	; 0x2d2 <distanceMeasurementFrontTask+0x2c>

00000340 <distanceMeasurementBackTask>:
	}
     340:	cf 93       	push	r28
}

void distanceMeasurementBackTask(void *pvParameters) {
     342:	df 93       	push	r29
     344:	00 d0       	rcall	.+0      	; 0x346 <distanceMeasurementBackTask+0x6>
     346:	1f 92       	push	r1
     348:	cd b7       	in	r28, 0x3d	; 61
     34a:	de b7       	in	r29, 0x3e	; 62
	
	printf("Distance measurement back task\n");
     34c:	89 ec       	ldi	r24, 0xC9	; 201
     34e:	92 e0       	ldi	r25, 0x02	; 2
     350:	0e 94 e0 1d 	call	0x3bc0	; 0x3bc0 <puts>
	// In every task before loop:
	#if (configUSE_APPLICATION_TASK_TAG == 1)
	// Set taskTag
	vTaskSetApplicationTaskTag(NULL, (void *)1 /*task id*/);
     354:	61 e0       	ldi	r22, 0x01	; 1
     356:	70 e0       	ldi	r23, 0x00	; 0
     358:	80 e0       	ldi	r24, 0x00	; 0
     35a:	90 e0       	ldi	r25, 0x00	; 0
     35c:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <vTaskSetApplicationTaskTag>
	#endif
	
	// Define the period of the task.
	const TickType_t xFrequency = pdMS_TO_TICKS(1000); // Period of 1 second in ticks
	TickType_t xLastWakeTime = xTaskGetTickCount(); // Initialise the xLastWakeTime variable with the current time.
     360:	0e 94 c2 0b 	call	0x1784	; 0x1784 <xTaskGetTickCount>
     364:	69 83       	std	Y+1, r22	; 0x01
     366:	7a 83       	std	Y+2, r23	; 0x02
     368:	8b 83       	std	Y+3, r24	; 0x03
     36a:	9c 83       	std	Y+4, r25	; 0x04

	while (1) {
		uint16_t distance = 0;

		// Acquire the semaphore before updating the shared variable.
		if (xSemaphoreTake(xBackDistanceSemaphore, portMAX_DELAY) == pdTRUE) {
     36c:	4f ef       	ldi	r20, 0xFF	; 255
     36e:	5f ef       	ldi	r21, 0xFF	; 255
     370:	ba 01       	movw	r22, r20
     372:	80 91 f9 11 	lds	r24, 0x11F9	; 0x8011f9 <xBackDistanceSemaphore>
     376:	90 91 fa 11 	lds	r25, 0x11FA	; 0x8011fa <xBackDistanceSemaphore+0x1>
     37a:	a5 d6       	rcall	.+3402   	; 0x10c6 <xQueueSemaphoreTake>
     37c:	81 30       	cpi	r24, 0x01	; 1
     37e:	11 f5       	brne	.+68     	; 0x3c4 <distanceMeasurementBackTask+0x84>
			// Perform the distance measurement.
			backMeasuredDistance = hc_sr04_takeMeasurement(false);
     380:	80 e0       	ldi	r24, 0x00	; 0
     382:	48 d0       	rcall	.+144    	; 0x414 <hc_sr04_takeMeasurement>
     384:	90 93 35 03 	sts	0x0335, r25	; 0x800335 <__data_end+0x1>
     388:	80 93 34 03 	sts	0x0334, r24	; 0x800334 <__data_end>
			distance = backMeasuredDistance;
     38c:	e0 90 34 03 	lds	r14, 0x0334	; 0x800334 <__data_end>
     390:	f0 90 35 03 	lds	r15, 0x0335	; 0x800335 <__data_end+0x1>
			printf("Back Measurement : %d\n", distance);
     394:	ff 92       	push	r15
     396:	ef 92       	push	r14
     398:	88 ee       	ldi	r24, 0xE8	; 232
     39a:	92 e0       	ldi	r25, 0x02	; 2
     39c:	9f 93       	push	r25
     39e:	8f 93       	push	r24
     3a0:	0e 94 cd 1d 	call	0x3b9a	; 0x3b9a <printf>
			// Release the semaphore.
			xSemaphoreGive(xBackDistanceSemaphore);
     3a4:	00 e0       	ldi	r16, 0x00	; 0
     3a6:	20 e0       	ldi	r18, 0x00	; 0
     3a8:	30 e0       	ldi	r19, 0x00	; 0
     3aa:	a9 01       	movw	r20, r18
     3ac:	60 e0       	ldi	r22, 0x00	; 0
     3ae:	70 e0       	ldi	r23, 0x00	; 0
     3b0:	80 91 f9 11 	lds	r24, 0x11F9	; 0x8011f9 <xBackDistanceSemaphore>
     3b4:	90 91 fa 11 	lds	r25, 0x11FA	; 0x8011fa <xBackDistanceSemaphore+0x1>
     3b8:	15 d5       	rcall	.+2602   	; 0xde4 <xQueueGenericSend>
     3ba:	0f 90       	pop	r0
     3bc:	0f 90       	pop	r0
     3be:	0f 90       	pop	r0
     3c0:	0f 90       	pop	r0
     3c2:	02 c0       	rjmp	.+4      	; 0x3c8 <distanceMeasurementBackTask+0x88>
	// Define the period of the task.
	const TickType_t xFrequency = pdMS_TO_TICKS(1000); // Period of 1 second in ticks
	TickType_t xLastWakeTime = xTaskGetTickCount(); // Initialise the xLastWakeTime variable with the current time.

	while (1) {
		uint16_t distance = 0;
     3c4:	e1 2c       	mov	r14, r1
			// Release the semaphore.
			xSemaphoreGive(xBackDistanceSemaphore);
		}
		
		// Assess the collision risk.
		bool isHighRisk = calculateCollisionRisk(distance);
     3c6:	f1 2c       	mov	r15, r1
     3c8:	c7 01       	movw	r24, r14
     3ca:	08 df       	rcall	.-496    	; 0x1dc <calculateCollisionRisk>
		if (isHighRisk) {
     3cc:	88 23       	and	r24, r24
     3ce:	39 f0       	breq	.+14     	; 0x3de <distanceMeasurementBackTask+0x9e>
			printf("RISK!! RISK!!\n");
     3d0:	8b eb       	ldi	r24, 0xBB	; 187
     3d2:	92 e0       	ldi	r25, 0x02	; 2
     3d4:	0e 94 e0 1d 	call	0x3bc0	; 0x3bc0 <puts>
			// Take immediate action.
			turnOnLight(false); // Indicate risk with the back light.
     3d8:	80 e0       	ldi	r24, 0x00	; 0
     3da:	44 df       	rcall	.-376    	; 0x264 <turnOnLight>
			} else {
			// No risk detected.
			turnOffLight(false); // Turn off the back light.
     3dc:	02 c0       	rjmp	.+4      	; 0x3e2 <distanceMeasurementBackTask+0xa2>
     3de:	80 e0       	ldi	r24, 0x00	; 0
     3e0:	51 df       	rcall	.-350    	; 0x284 <turnOffLight>
		}
		
		// Wait for the next cycle.
		xTaskDelayUntil(&xLastWakeTime, xFrequency);
     3e2:	4e e3       	ldi	r20, 0x3E	; 62
     3e4:	50 e0       	ldi	r21, 0x00	; 0
     3e6:	60 e0       	ldi	r22, 0x00	; 0
     3e8:	70 e0       	ldi	r23, 0x00	; 0
     3ea:	ce 01       	movw	r24, r28
     3ec:	01 96       	adiw	r24, 0x01	; 1
     3ee:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <xTaskDelayUntil>
	}
     3f2:	bc cf       	rjmp	.-136    	; 0x36c <distanceMeasurementBackTask+0x2c>

000003f4 <hc_sr04_init>:
#define P_EchoFront PC4
#define P_EchoBack PC3
void hc_sr04_init()
{
    //Vcc
    DDR_Vcc|=(1 << P_Vcc);
     3f4:	87 b1       	in	r24, 0x07	; 7
     3f6:	81 60       	ori	r24, 0x01	; 1
     3f8:	87 b9       	out	0x07, r24	; 7
    PORT_Vcc|=(1 << P_Vcc);
     3fa:	88 b1       	in	r24, 0x08	; 8
     3fc:	81 60       	ori	r24, 0x01	; 1
     3fe:	88 b9       	out	0x08, r24	; 8

    //GND
    DDR_Gnd|=(1 << P_Gnd);
     400:	87 b1       	in	r24, 0x07	; 7
     402:	80 64       	ori	r24, 0x40	; 64
     404:	87 b9       	out	0x07, r24	; 7

    //Trigger
    DDR_Trig|=(1 << P_TrigFront);
     406:	87 b1       	in	r24, 0x07	; 7
     408:	84 60       	ori	r24, 0x04	; 4
     40a:	87 b9       	out	0x07, r24	; 7
	DDR_Trig|=(1<< P_TrigBack);
     40c:	87 b1       	in	r24, 0x07	; 7
     40e:	82 60       	ori	r24, 0x02	; 2
     410:	87 b9       	out	0x07, r24	; 7
     412:	08 95       	ret

00000414 <hc_sr04_takeMeasurement>:
//     */
//     cnt = cnt * 343UL / 125UL;
// 
//     return cnt;
// }
uint16_t hc_sr04_takeMeasurement(bool isFrontSensor) {
     414:	0f 93       	push	r16
     416:	1f 93       	push	r17
     418:	cf 93       	push	r28
     41a:	df 93       	push	r29
	uint16_t cnt = 0;
	uint8_t trigPin = isFrontSensor ? P_TrigFront : P_TrigBack; // Choose the correct pin based on the sensor
     41c:	88 23       	and	r24, r24
     41e:	11 f0       	breq	.+4      	; 0x424 <hc_sr04_takeMeasurement+0x10>
     420:	32 e0       	ldi	r19, 0x02	; 2
     422:	01 c0       	rjmp	.+2      	; 0x426 <hc_sr04_takeMeasurement+0x12>
     424:	31 e0       	ldi	r19, 0x01	; 1
	uint8_t echoPin = isFrontSensor ? P_EchoFront : P_EchoBack; // Choose the correct pin based on the sensor
     426:	88 23       	and	r24, r24
     428:	11 f0       	breq	.+4      	; 0x42e <hc_sr04_takeMeasurement+0x1a>
     42a:	04 e0       	ldi	r16, 0x04	; 4
     42c:	01 c0       	rjmp	.+2      	; 0x430 <hc_sr04_takeMeasurement+0x1c>
     42e:	03 e0       	ldi	r16, 0x03	; 3
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     430:	25 e3       	ldi	r18, 0x35	; 53
     432:	2a 95       	dec	r18
     434:	f1 f7       	brne	.-4      	; 0x432 <hc_sr04_takeMeasurement+0x1e>
     436:	00 00       	nop

	_delay_us(10);
	PORT_trig |= (1 << trigPin); // Trigger the measurement
     438:	28 b1       	in	r18, 0x08	; 8
     43a:	81 e0       	ldi	r24, 0x01	; 1
     43c:	90 e0       	ldi	r25, 0x00	; 0
     43e:	02 c0       	rjmp	.+4      	; 0x444 <hc_sr04_takeMeasurement+0x30>
     440:	88 0f       	add	r24, r24
     442:	99 1f       	adc	r25, r25
     444:	3a 95       	dec	r19
     446:	e2 f7       	brpl	.-8      	; 0x440 <hc_sr04_takeMeasurement+0x2c>
     448:	92 2f       	mov	r25, r18
     44a:	98 2b       	or	r25, r24
     44c:	98 b9       	out	0x08, r25	; 8
     44e:	25 e3       	ldi	r18, 0x35	; 53
     450:	2a 95       	dec	r18
     452:	f1 f7       	brne	.-4      	; 0x450 <hc_sr04_takeMeasurement+0x3c>
     454:	00 00       	nop
	_delay_us(10);
	PORT_trig &= ~(1 << trigPin);
     456:	98 b1       	in	r25, 0x08	; 8
     458:	80 95       	com	r24
     45a:	89 23       	and	r24, r25
     45c:	88 b9       	out	0x08, r24	; 8

	uint8_t TCCR1B_state = TCCR1B; // Save the current state of TCCR1B
     45e:	e1 e8       	ldi	r30, 0x81	; 129
     460:	f0 e0       	ldi	r31, 0x00	; 0
     462:	10 81       	ld	r17, Z

	// Set the Timer/Counter1 prescaler to 256
	TCCR1B = (1 << CS12);
     464:	84 e0       	ldi	r24, 0x04	; 4
     466:	80 83       	st	Z, r24
	
	TCNT1 = 0; // Reset the timer
     468:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
     46c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
	while (!(PIN_Echo & (1 << echoPin))) {
     470:	10 c0       	rjmp	.+32     	; 0x492 <hc_sr04_takeMeasurement+0x7e>
		// Check for timeout (100ms)
		if (TCNT1 >= (F_CPU / 256) * 0.1) {
     472:	60 91 84 00 	lds	r22, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
     476:	70 91 85 00 	lds	r23, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
     47a:	80 e0       	ldi	r24, 0x00	; 0
     47c:	90 e0       	ldi	r25, 0x00	; 0
     47e:	0e 94 03 15 	call	0x2a06	; 0x2a06 <__floatunsisf>
     482:	20 e0       	ldi	r18, 0x00	; 0
     484:	30 e5       	ldi	r19, 0x50	; 80
     486:	43 ec       	ldi	r20, 0xC3	; 195
     488:	55 e4       	ldi	r21, 0x45	; 69
     48a:	0e 94 40 15 	call	0x2a80	; 0x2a80 <__gesf2>
     48e:	88 23       	and	r24, r24
     490:	e4 f5       	brge	.+120    	; 0x50a <hc_sr04_takeMeasurement+0xf6>

	// Set the Timer/Counter1 prescaler to 256
	TCCR1B = (1 << CS12);
	
	TCNT1 = 0; // Reset the timer
	while (!(PIN_Echo & (1 << echoPin))) {
     492:	86 b1       	in	r24, 0x06	; 6
     494:	c0 2f       	mov	r28, r16
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	00 2e       	mov	r0, r16
     49a:	02 c0       	rjmp	.+4      	; 0x4a0 <hc_sr04_takeMeasurement+0x8c>
     49c:	95 95       	asr	r25
     49e:	87 95       	ror	r24
     4a0:	0a 94       	dec	r0
     4a2:	e2 f7       	brpl	.-8      	; 0x49c <hc_sr04_takeMeasurement+0x88>
     4a4:	80 ff       	sbrs	r24, 0
     4a6:	e5 cf       	rjmp	.-54     	; 0x472 <hc_sr04_takeMeasurement+0x5e>
			return 0; // Sensor is not working
		}
	}

	// Wait for the echo pin to go high
	TCNT1 = 0; // Reset the timer for the high signal duration
     4a8:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
     4ac:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
	while (PIN_Echo & (1 << echoPin)) {
     4b0:	10 c0       	rjmp	.+32     	; 0x4d2 <hc_sr04_takeMeasurement+0xbe>
		// Check for timer overflow (24ms)
		if (TCNT1 >= (F_CPU / 256) * 0.024) {
     4b2:	60 91 84 00 	lds	r22, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
     4b6:	70 91 85 00 	lds	r23, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
     4ba:	80 e0       	ldi	r24, 0x00	; 0
     4bc:	90 e0       	ldi	r25, 0x00	; 0
     4be:	0e 94 03 15 	call	0x2a06	; 0x2a06 <__floatunsisf>
     4c2:	20 e0       	ldi	r18, 0x00	; 0
     4c4:	30 e8       	ldi	r19, 0x80	; 128
     4c6:	4b eb       	ldi	r20, 0xBB	; 187
     4c8:	54 e4       	ldi	r21, 0x44	; 68
     4ca:	0e 94 40 15 	call	0x2a80	; 0x2a80 <__gesf2>
     4ce:	88 23       	and	r24, r24
     4d0:	54 f4       	brge	.+20     	; 0x4e6 <hc_sr04_takeMeasurement+0xd2>
		}
	}

	// Wait for the echo pin to go high
	TCNT1 = 0; // Reset the timer for the high signal duration
	while (PIN_Echo & (1 << echoPin)) {
     4d2:	86 b1       	in	r24, 0x06	; 6
     4d4:	90 e0       	ldi	r25, 0x00	; 0
     4d6:	0c 2e       	mov	r0, r28
     4d8:	02 c0       	rjmp	.+4      	; 0x4de <hc_sr04_takeMeasurement+0xca>
     4da:	95 95       	asr	r25
     4dc:	87 95       	ror	r24
     4de:	0a 94       	dec	r0
     4e0:	e2 f7       	brpl	.-8      	; 0x4da <hc_sr04_takeMeasurement+0xc6>
     4e2:	80 fd       	sbrc	r24, 0
     4e4:	e6 cf       	rjmp	.-52     	; 0x4b2 <hc_sr04_takeMeasurement+0x9e>
		// Check for timer overflow (24ms)
		if (TCNT1 >= (F_CPU / 256) * 0.024) {
			break; // Timer overflowed
		}
	}
	cnt = TCNT1; // Save the duration of the high signal
     4e6:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
     4ea:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>

	TCCR1B = TCCR1B_state; // Restore TCCR1B state
     4ee:	10 93 81 00 	sts	0x0081, r17	; 0x800081 <__TEXT_REGION_LENGTH__+0x7c0081>

	// Distance calculation based on the duration of the high signal
	cnt = cnt * 343UL / 125UL;
     4f2:	a7 e5       	ldi	r26, 0x57	; 87
     4f4:	b1 e0       	ldi	r27, 0x01	; 1
     4f6:	0e 94 20 1c 	call	0x3840	; 0x3840 <__umulhisi3>
     4fa:	2d e7       	ldi	r18, 0x7D	; 125
     4fc:	30 e0       	ldi	r19, 0x00	; 0
     4fe:	40 e0       	ldi	r20, 0x00	; 0
     500:	50 e0       	ldi	r21, 0x00	; 0
     502:	0e 94 f6 1b 	call	0x37ec	; 0x37ec <__udivmodsi4>

	return cnt;
     506:	c9 01       	movw	r24, r18
     508:	02 c0       	rjmp	.+4      	; 0x50e <hc_sr04_takeMeasurement+0xfa>
	
	TCNT1 = 0; // Reset the timer
	while (!(PIN_Echo & (1 << echoPin))) {
		// Check for timeout (100ms)
		if (TCNT1 >= (F_CPU / 256) * 0.1) {
			return 0; // Sensor is not working
     50a:	80 e0       	ldi	r24, 0x00	; 0
     50c:	90 e0       	ldi	r25, 0x00	; 0

	// Distance calculation based on the duration of the high signal
	cnt = cnt * 343UL / 125UL;

	return cnt;
}
     50e:	df 91       	pop	r29
     510:	cf 91       	pop	r28
     512:	1f 91       	pop	r17
     514:	0f 91       	pop	r16
     516:	08 95       	ret

00000518 <trace_init>:
	 #if (configUseR2RTrace == 1)
	 #ifdef HAL_DEFS_H_

	 #else
		// Used on VIA MEGA Shield rev. 2.0.0
		DDRK |= _BV(DDK0) | _BV(DDK1) | _BV(DDK2) | _BV(DDK3);
     518:	e7 e0       	ldi	r30, 0x07	; 7
     51a:	f1 e0       	ldi	r31, 0x01	; 1
     51c:	80 81       	ld	r24, Z
     51e:	8f 60       	ori	r24, 0x0F	; 15
     520:	80 83       	st	Z, r24
     522:	08 95       	ret

00000524 <task_switch_in>:
	void task_switch_in(uint8_t task_no) {
		 #ifdef HAL_DEFS_H_

		 #else
		 // Used on VIA MEGA Shield rev. 2.0.0
		 PORTK &= 0b11110000;
     524:	e8 e0       	ldi	r30, 0x08	; 8
     526:	f1 e0       	ldi	r31, 0x01	; 1
     528:	90 81       	ld	r25, Z
     52a:	90 7f       	andi	r25, 0xF0	; 240
     52c:	90 83       	st	Z, r25
		 PORTK |= (task_no & 0b00001111);
     52e:	90 81       	ld	r25, Z
     530:	8f 70       	andi	r24, 0x0F	; 15
     532:	98 2b       	or	r25, r24
     534:	90 83       	st	Z, r25
     536:	08 95       	ret

00000538 <task_switch_out>:
	void task_switch_out(uint8_t task_no) {
		#ifdef HAL_DEFS_H_

		#else
		// Used on VIA MEGA Shield rev. 2.0.0
		PORTK &= 0b11110000;
     538:	e8 e0       	ldi	r30, 0x08	; 8
     53a:	f1 e0       	ldi	r31, 0x01	; 1
     53c:	80 81       	ld	r24, Z
     53e:	80 7f       	andi	r24, 0xF0	; 240
     540:	80 83       	st	Z, r24
     542:	08 95       	ret

00000544 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    EventGroupHandle_t xEventGroupCreate( void )
    {
     544:	cf 93       	push	r28
     546:	df 93       	push	r29
         * TickType_t alignment requirements the cast is safe.  In other cases,
         * where the natural word size of the architecture is less than
         * sizeof( TickType_t ), the TickType_t variables will be accessed in two
         * or more reads operations, and the alignment requirements is only that
         * of each individual read. */
        pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
     548:	8f e0       	ldi	r24, 0x0F	; 15
     54a:	90 e0       	ldi	r25, 0x00	; 0
     54c:	81 d0       	rcall	.+258    	; 0x650 <pvPortMalloc>
     54e:	ec 01       	movw	r28, r24

        if( pxEventBits != NULL )
     550:	00 97       	sbiw	r24, 0x00	; 0
     552:	39 f0       	breq	.+14     	; 0x562 <xEventGroupCreate+0x1e>
        {
            pxEventBits->uxEventBits = 0;
     554:	fc 01       	movw	r30, r24
     556:	11 92       	st	Z+, r1
     558:	11 92       	st	Z+, r1
     55a:	11 92       	st	Z+, r1
     55c:	11 92       	st	Z+, r1
            vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
     55e:	cf 01       	movw	r24, r30
     560:	5c d1       	rcall	.+696    	; 0x81a <vListInitialise>
        {
            traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
        }

        return pxEventBits;
    }
     562:	ce 01       	movw	r24, r28
     564:	df 91       	pop	r29
     566:	cf 91       	pop	r28
     568:	08 95       	ret

0000056a <prvHeapInit>:

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     56a:	e4 e4       	ldi	r30, 0x44	; 68
     56c:	f3 e0       	ldi	r31, 0x03	; 3
     56e:	a8 e4       	ldi	r26, 0x48	; 72
     570:	b3 e0       	ldi	r27, 0x03	; 3
     572:	b1 83       	std	Z+1, r27	; 0x01
     574:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
     576:	13 82       	std	Z+3, r1	; 0x03
     578:	12 82       	std	Z+2, r1	; 0x02

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
     57a:	e0 ef       	ldi	r30, 0xF0	; 240
     57c:	f0 e1       	ldi	r31, 0x10	; 16
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
     57e:	f0 93 43 03 	sts	0x0343, r31	; 0x800343 <pxEnd+0x1>
     582:	e0 93 42 03 	sts	0x0342, r30	; 0x800342 <pxEnd>
    pxEnd->xBlockSize = 0;
     586:	13 82       	std	Z+3, r1	; 0x03
     588:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
     58a:	11 82       	std	Z+1, r1	; 0x01
     58c:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     58e:	88 ea       	ldi	r24, 0xA8	; 168
     590:	9d e0       	ldi	r25, 0x0D	; 13
     592:	13 96       	adiw	r26, 0x03	; 3
     594:	9c 93       	st	X, r25
     596:	8e 93       	st	-X, r24
     598:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     59a:	ed 93       	st	X+, r30
     59c:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     59e:	90 93 3f 03 	sts	0x033F, r25	; 0x80033f <xMinimumEverFreeBytesRemaining+0x1>
     5a2:	80 93 3e 03 	sts	0x033E, r24	; 0x80033e <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     5a6:	90 93 41 03 	sts	0x0341, r25	; 0x800341 <xFreeBytesRemaining+0x1>
     5aa:	80 93 40 03 	sts	0x0340, r24	; 0x800340 <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     5ae:	80 e0       	ldi	r24, 0x00	; 0
     5b0:	90 e8       	ldi	r25, 0x80	; 128
     5b2:	90 93 39 03 	sts	0x0339, r25	; 0x800339 <xBlockAllocatedBit+0x1>
     5b6:	80 93 38 03 	sts	0x0338, r24	; 0x800338 <xBlockAllocatedBit>
     5ba:	08 95       	ret

000005bc <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
     5bc:	cf 93       	push	r28
     5be:	df 93       	push	r29
     5c0:	ec 01       	movw	r28, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     5c2:	a4 e4       	ldi	r26, 0x44	; 68
     5c4:	b3 e0       	ldi	r27, 0x03	; 3
     5c6:	01 c0       	rjmp	.+2      	; 0x5ca <prvInsertBlockIntoFreeList+0xe>
     5c8:	df 01       	movw	r26, r30
     5ca:	ed 91       	ld	r30, X+
     5cc:	fc 91       	ld	r31, X
     5ce:	11 97       	sbiw	r26, 0x01	; 1
     5d0:	ec 17       	cp	r30, r28
     5d2:	fd 07       	cpc	r31, r29
     5d4:	c8 f3       	brcs	.-14     	; 0x5c8 <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     5d6:	12 96       	adiw	r26, 0x02	; 2
     5d8:	8d 91       	ld	r24, X+
     5da:	9c 91       	ld	r25, X
     5dc:	13 97       	sbiw	r26, 0x03	; 3
     5de:	9d 01       	movw	r18, r26
     5e0:	28 0f       	add	r18, r24
     5e2:	39 1f       	adc	r19, r25
     5e4:	c2 17       	cp	r28, r18
     5e6:	d3 07       	cpc	r29, r19
     5e8:	49 f4       	brne	.+18     	; 0x5fc <prvInsertBlockIntoFreeList+0x40>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     5ea:	2a 81       	ldd	r18, Y+2	; 0x02
     5ec:	3b 81       	ldd	r19, Y+3	; 0x03
     5ee:	82 0f       	add	r24, r18
     5f0:	93 1f       	adc	r25, r19
     5f2:	13 96       	adiw	r26, 0x03	; 3
     5f4:	9c 93       	st	X, r25
     5f6:	8e 93       	st	-X, r24
     5f8:	12 97       	sbiw	r26, 0x02	; 2
        pxBlockToInsert = pxIterator;
     5fa:	ed 01       	movw	r28, r26

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     5fc:	8a 81       	ldd	r24, Y+2	; 0x02
     5fe:	9b 81       	ldd	r25, Y+3	; 0x03
     600:	9e 01       	movw	r18, r28
     602:	28 0f       	add	r18, r24
     604:	39 1f       	adc	r19, r25
     606:	e2 17       	cp	r30, r18
     608:	f3 07       	cpc	r31, r19
     60a:	c1 f4       	brne	.+48     	; 0x63c <prvInsertBlockIntoFreeList+0x80>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
     60c:	20 91 42 03 	lds	r18, 0x0342	; 0x800342 <pxEnd>
     610:	30 91 43 03 	lds	r19, 0x0343	; 0x800343 <pxEnd+0x1>
     614:	e2 17       	cp	r30, r18
     616:	f3 07       	cpc	r31, r19
     618:	71 f0       	breq	.+28     	; 0x636 <prvInsertBlockIntoFreeList+0x7a>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     61a:	22 81       	ldd	r18, Z+2	; 0x02
     61c:	33 81       	ldd	r19, Z+3	; 0x03
     61e:	82 0f       	add	r24, r18
     620:	93 1f       	adc	r25, r19
     622:	9b 83       	std	Y+3, r25	; 0x03
     624:	8a 83       	std	Y+2, r24	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     626:	ed 91       	ld	r30, X+
     628:	fc 91       	ld	r31, X
     62a:	11 97       	sbiw	r26, 0x01	; 1
     62c:	80 81       	ld	r24, Z
     62e:	91 81       	ldd	r25, Z+1	; 0x01
     630:	99 83       	std	Y+1, r25	; 0x01
     632:	88 83       	st	Y, r24
     634:	05 c0       	rjmp	.+10     	; 0x640 <prvInsertBlockIntoFreeList+0x84>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
     636:	39 83       	std	Y+1, r19	; 0x01
     638:	28 83       	st	Y, r18
     63a:	02 c0       	rjmp	.+4      	; 0x640 <prvInsertBlockIntoFreeList+0x84>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     63c:	f9 83       	std	Y+1, r31	; 0x01
     63e:	e8 83       	st	Y, r30

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
     640:	ca 17       	cp	r28, r26
     642:	db 07       	cpc	r29, r27
     644:	11 f0       	breq	.+4      	; 0x64a <prvInsertBlockIntoFreeList+0x8e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
     646:	cd 93       	st	X+, r28
     648:	dc 93       	st	X, r29
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
     64a:	df 91       	pop	r29
     64c:	cf 91       	pop	r28
     64e:	08 95       	ret

00000650 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     650:	ef 92       	push	r14
     652:	ff 92       	push	r15
     654:	0f 93       	push	r16
     656:	1f 93       	push	r17
     658:	cf 93       	push	r28
     65a:	df 93       	push	r29
     65c:	8c 01       	movw	r16, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     65e:	0e 94 bc 0b 	call	0x1778	; 0x1778 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
     662:	80 91 42 03 	lds	r24, 0x0342	; 0x800342 <pxEnd>
     666:	90 91 43 03 	lds	r25, 0x0343	; 0x800343 <pxEnd+0x1>
     66a:	89 2b       	or	r24, r25
     66c:	09 f4       	brne	.+2      	; 0x670 <pvPortMalloc+0x20>
        {
            prvHeapInit();
     66e:	7d df       	rcall	.-262    	; 0x56a <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     670:	80 91 38 03 	lds	r24, 0x0338	; 0x800338 <xBlockAllocatedBit>
     674:	90 91 39 03 	lds	r25, 0x0339	; 0x800339 <xBlockAllocatedBit+0x1>
     678:	80 23       	and	r24, r16
     67a:	91 23       	and	r25, r17
     67c:	89 2b       	or	r24, r25
     67e:	09 f0       	breq	.+2      	; 0x682 <pvPortMalloc+0x32>
     680:	76 c0       	rjmp	.+236    	; 0x76e <pvPortMalloc+0x11e>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     682:	01 15       	cp	r16, r1
     684:	11 05       	cpc	r17, r1
     686:	49 f0       	breq	.+18     	; 0x69a <pvPortMalloc+0x4a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
     688:	c8 01       	movw	r24, r16
     68a:	04 96       	adiw	r24, 0x04	; 4
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     68c:	08 17       	cp	r16, r24
     68e:	19 07       	cpc	r17, r25
     690:	18 f0       	brcs	.+6      	; 0x698 <pvPortMalloc+0x48>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
     692:	00 e0       	ldi	r16, 0x00	; 0
     694:	10 e0       	ldi	r17, 0x00	; 0
     696:	01 c0       	rjmp	.+2      	; 0x69a <pvPortMalloc+0x4a>
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
            {
                xWantedSize += xHeapStructSize;
     698:	8c 01       	movw	r16, r24
            else 
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     69a:	01 15       	cp	r16, r1
     69c:	11 05       	cpc	r17, r1
     69e:	09 f4       	brne	.+2      	; 0x6a2 <pvPortMalloc+0x52>
     6a0:	69 c0       	rjmp	.+210    	; 0x774 <pvPortMalloc+0x124>
     6a2:	80 91 40 03 	lds	r24, 0x0340	; 0x800340 <xFreeBytesRemaining>
     6a6:	90 91 41 03 	lds	r25, 0x0341	; 0x800341 <xFreeBytesRemaining+0x1>
     6aa:	80 17       	cp	r24, r16
     6ac:	91 07       	cpc	r25, r17
     6ae:	08 f4       	brcc	.+2      	; 0x6b2 <pvPortMalloc+0x62>
     6b0:	64 c0       	rjmp	.+200    	; 0x77a <pvPortMalloc+0x12a>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
     6b2:	c0 91 44 03 	lds	r28, 0x0344	; 0x800344 <xStart>
     6b6:	d0 91 45 03 	lds	r29, 0x0345	; 0x800345 <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
     6ba:	e4 e4       	ldi	r30, 0x44	; 68
     6bc:	f3 e0       	ldi	r31, 0x03	; 3
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     6be:	02 c0       	rjmp	.+4      	; 0x6c4 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
     6c0:	fe 01       	movw	r30, r28
                    pxBlock = pxBlock->pxNextFreeBlock;
     6c2:	ec 01       	movw	r28, r24
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     6c4:	8a 81       	ldd	r24, Y+2	; 0x02
     6c6:	9b 81       	ldd	r25, Y+3	; 0x03
     6c8:	80 17       	cp	r24, r16
     6ca:	91 07       	cpc	r25, r17
     6cc:	20 f4       	brcc	.+8      	; 0x6d6 <pvPortMalloc+0x86>
     6ce:	88 81       	ld	r24, Y
     6d0:	99 81       	ldd	r25, Y+1	; 0x01
     6d2:	00 97       	sbiw	r24, 0x00	; 0
     6d4:	a9 f7       	brne	.-22     	; 0x6c0 <pvPortMalloc+0x70>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
     6d6:	80 91 42 03 	lds	r24, 0x0342	; 0x800342 <pxEnd>
     6da:	90 91 43 03 	lds	r25, 0x0343	; 0x800343 <pxEnd+0x1>
     6de:	c8 17       	cp	r28, r24
     6e0:	d9 07       	cpc	r29, r25
     6e2:	09 f4       	brne	.+2      	; 0x6e6 <pvPortMalloc+0x96>
     6e4:	4d c0       	rjmp	.+154    	; 0x780 <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     6e6:	e0 80       	ld	r14, Z
     6e8:	f1 80       	ldd	r15, Z+1	; 0x01
     6ea:	84 e0       	ldi	r24, 0x04	; 4
     6ec:	e8 0e       	add	r14, r24
     6ee:	f1 1c       	adc	r15, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     6f0:	88 81       	ld	r24, Y
     6f2:	99 81       	ldd	r25, Y+1	; 0x01
     6f4:	91 83       	std	Z+1, r25	; 0x01
     6f6:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     6f8:	2a 81       	ldd	r18, Y+2	; 0x02
     6fa:	3b 81       	ldd	r19, Y+3	; 0x03
     6fc:	20 1b       	sub	r18, r16
     6fe:	31 0b       	sbc	r19, r17
     700:	29 30       	cpi	r18, 0x09	; 9
     702:	31 05       	cpc	r19, r1
     704:	48 f0       	brcs	.+18     	; 0x718 <pvPortMalloc+0xc8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     706:	ce 01       	movw	r24, r28
     708:	80 0f       	add	r24, r16
     70a:	91 1f       	adc	r25, r17
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     70c:	fc 01       	movw	r30, r24
     70e:	33 83       	std	Z+3, r19	; 0x03
     710:	22 83       	std	Z+2, r18	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
     712:	1b 83       	std	Y+3, r17	; 0x03

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
     714:	0a 83       	std	Y+2, r16	; 0x02
     716:	52 df       	rcall	.-348    	; 0x5bc <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
     718:	2a 81       	ldd	r18, Y+2	; 0x02
     71a:	3b 81       	ldd	r19, Y+3	; 0x03
     71c:	80 91 40 03 	lds	r24, 0x0340	; 0x800340 <xFreeBytesRemaining>
     720:	90 91 41 03 	lds	r25, 0x0341	; 0x800341 <xFreeBytesRemaining+0x1>
     724:	82 1b       	sub	r24, r18
     726:	93 0b       	sbc	r25, r19
     728:	90 93 41 03 	sts	0x0341, r25	; 0x800341 <xFreeBytesRemaining+0x1>
     72c:	80 93 40 03 	sts	0x0340, r24	; 0x800340 <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     730:	40 91 3e 03 	lds	r20, 0x033E	; 0x80033e <xMinimumEverFreeBytesRemaining>
     734:	50 91 3f 03 	lds	r21, 0x033F	; 0x80033f <xMinimumEverFreeBytesRemaining+0x1>
     738:	84 17       	cp	r24, r20
     73a:	95 07       	cpc	r25, r21
     73c:	20 f4       	brcc	.+8      	; 0x746 <pvPortMalloc+0xf6>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     73e:	90 93 3f 03 	sts	0x033F, r25	; 0x80033f <xMinimumEverFreeBytesRemaining+0x1>
     742:	80 93 3e 03 	sts	0x033E, r24	; 0x80033e <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
     746:	80 91 38 03 	lds	r24, 0x0338	; 0x800338 <xBlockAllocatedBit>
     74a:	90 91 39 03 	lds	r25, 0x0339	; 0x800339 <xBlockAllocatedBit+0x1>
     74e:	28 2b       	or	r18, r24
     750:	39 2b       	or	r19, r25
     752:	3b 83       	std	Y+3, r19	; 0x03
     754:	2a 83       	std	Y+2, r18	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
     756:	19 82       	std	Y+1, r1	; 0x01
     758:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
     75a:	80 91 3c 03 	lds	r24, 0x033C	; 0x80033c <xNumberOfSuccessfulAllocations>
     75e:	90 91 3d 03 	lds	r25, 0x033D	; 0x80033d <xNumberOfSuccessfulAllocations+0x1>
     762:	01 96       	adiw	r24, 0x01	; 1
     764:	90 93 3d 03 	sts	0x033D, r25	; 0x80033d <xNumberOfSuccessfulAllocations+0x1>
     768:	80 93 3c 03 	sts	0x033C, r24	; 0x80033c <xNumberOfSuccessfulAllocations>
     76c:	0b c0       	rjmp	.+22     	; 0x784 <pvPortMalloc+0x134>
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
     76e:	e1 2c       	mov	r14, r1
     770:	f1 2c       	mov	r15, r1
     772:	08 c0       	rjmp	.+16     	; 0x784 <pvPortMalloc+0x134>
     774:	e1 2c       	mov	r14, r1
     776:	f1 2c       	mov	r15, r1
     778:	05 c0       	rjmp	.+10     	; 0x784 <pvPortMalloc+0x134>
     77a:	e1 2c       	mov	r14, r1
     77c:	f1 2c       	mov	r15, r1
     77e:	02 c0       	rjmp	.+4      	; 0x784 <pvPortMalloc+0x134>
     780:	e1 2c       	mov	r14, r1
     782:	f1 2c       	mov	r15, r1
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     784:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
     788:	e1 14       	cp	r14, r1
     78a:	f1 04       	cpc	r15, r1
     78c:	11 f4       	brne	.+4      	; 0x792 <pvPortMalloc+0x142>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
     78e:	0e 94 cb 14 	call	0x2996	; 0x2996 <vApplicationMallocFailedHook>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
     792:	c7 01       	movw	r24, r14
     794:	df 91       	pop	r29
     796:	cf 91       	pop	r28
     798:	1f 91       	pop	r17
     79a:	0f 91       	pop	r16
     79c:	ff 90       	pop	r15
     79e:	ef 90       	pop	r14
     7a0:	08 95       	ret

000007a2 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     7a2:	0f 93       	push	r16
     7a4:	1f 93       	push	r17
     7a6:	cf 93       	push	r28
     7a8:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     7aa:	00 97       	sbiw	r24, 0x00	; 0
     7ac:	89 f1       	breq	.+98     	; 0x810 <vPortFree+0x6e>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
     7ae:	ec 01       	movw	r28, r24
     7b0:	24 97       	sbiw	r28, 0x04	; 4

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     7b2:	4a 81       	ldd	r20, Y+2	; 0x02
     7b4:	5b 81       	ldd	r21, Y+3	; 0x03
     7b6:	20 91 38 03 	lds	r18, 0x0338	; 0x800338 <xBlockAllocatedBit>
     7ba:	30 91 39 03 	lds	r19, 0x0339	; 0x800339 <xBlockAllocatedBit+0x1>
     7be:	ba 01       	movw	r22, r20
     7c0:	62 23       	and	r22, r18
     7c2:	73 23       	and	r23, r19
     7c4:	67 2b       	or	r22, r23
     7c6:	21 f1       	breq	.+72     	; 0x810 <vPortFree+0x6e>
        {
            if( pxLink->pxNextFreeBlock == NULL )
     7c8:	68 81       	ld	r22, Y
     7ca:	79 81       	ldd	r23, Y+1	; 0x01
     7cc:	67 2b       	or	r22, r23
     7ce:	01 f5       	brne	.+64     	; 0x810 <vPortFree+0x6e>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
     7d0:	20 95       	com	r18
     7d2:	30 95       	com	r19
     7d4:	24 23       	and	r18, r20
     7d6:	35 23       	and	r19, r21
     7d8:	3b 83       	std	Y+3, r19	; 0x03
     7da:	2a 83       	std	Y+2, r18	; 0x02

                vTaskSuspendAll();
     7dc:	cd d7       	rcall	.+3994   	; 0x1778 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
     7de:	8a 81       	ldd	r24, Y+2	; 0x02
     7e0:	9b 81       	ldd	r25, Y+3	; 0x03
     7e2:	20 91 40 03 	lds	r18, 0x0340	; 0x800340 <xFreeBytesRemaining>
     7e6:	30 91 41 03 	lds	r19, 0x0341	; 0x800341 <xFreeBytesRemaining+0x1>
     7ea:	82 0f       	add	r24, r18
     7ec:	93 1f       	adc	r25, r19
     7ee:	90 93 41 03 	sts	0x0341, r25	; 0x800341 <xFreeBytesRemaining+0x1>
     7f2:	80 93 40 03 	sts	0x0340, r24	; 0x800340 <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     7f6:	ce 01       	movw	r24, r28
     7f8:	e1 de       	rcall	.-574    	; 0x5bc <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
     7fa:	80 91 3a 03 	lds	r24, 0x033A	; 0x80033a <xNumberOfSuccessfulFrees>
     7fe:	90 91 3b 03 	lds	r25, 0x033B	; 0x80033b <xNumberOfSuccessfulFrees+0x1>
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	90 93 3b 03 	sts	0x033B, r25	; 0x80033b <xNumberOfSuccessfulFrees+0x1>
     808:	80 93 3a 03 	sts	0x033A, r24	; 0x80033a <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
     80c:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
     810:	df 91       	pop	r29
     812:	cf 91       	pop	r28
     814:	1f 91       	pop	r17
     816:	0f 91       	pop	r16
     818:	08 95       	ret

0000081a <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     81a:	fc 01       	movw	r30, r24
     81c:	03 96       	adiw	r24, 0x03	; 3
     81e:	92 83       	std	Z+2, r25	; 0x02
     820:	81 83       	std	Z+1, r24	; 0x01
     822:	4f ef       	ldi	r20, 0xFF	; 255
     824:	5f ef       	ldi	r21, 0xFF	; 255
     826:	ba 01       	movw	r22, r20
     828:	43 83       	std	Z+3, r20	; 0x03
     82a:	54 83       	std	Z+4, r21	; 0x04
     82c:	65 83       	std	Z+5, r22	; 0x05
     82e:	76 83       	std	Z+6, r23	; 0x06
     830:	90 87       	std	Z+8, r25	; 0x08
     832:	87 83       	std	Z+7, r24	; 0x07
     834:	92 87       	std	Z+10, r25	; 0x0a
     836:	81 87       	std	Z+9, r24	; 0x09
     838:	10 82       	st	Z, r1
     83a:	08 95       	ret

0000083c <vListInitialiseItem>:
     83c:	fc 01       	movw	r30, r24
     83e:	13 86       	std	Z+11, r1	; 0x0b
     840:	12 86       	std	Z+10, r1	; 0x0a
     842:	08 95       	ret

00000844 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     844:	0f 93       	push	r16
     846:	1f 93       	push	r17
     848:	cf 93       	push	r28
     84a:	df 93       	push	r29
     84c:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     84e:	08 81       	ld	r16, Y
     850:	19 81       	ldd	r17, Y+1	; 0x01
     852:	2a 81       	ldd	r18, Y+2	; 0x02
     854:	3b 81       	ldd	r19, Y+3	; 0x03
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     856:	0f 3f       	cpi	r16, 0xFF	; 255
     858:	4f ef       	ldi	r20, 0xFF	; 255
     85a:	14 07       	cpc	r17, r20
     85c:	24 07       	cpc	r18, r20
     85e:	34 07       	cpc	r19, r20
     860:	21 f4       	brne	.+8      	; 0x86a <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     862:	fc 01       	movw	r30, r24
     864:	a1 85       	ldd	r26, Z+9	; 0x09
     866:	b2 85       	ldd	r27, Z+10	; 0x0a
     868:	11 c0       	rjmp	.+34     	; 0x88c <vListInsert+0x48>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     86a:	dc 01       	movw	r26, r24
     86c:	13 96       	adiw	r26, 0x03	; 3
     86e:	01 c0       	rjmp	.+2      	; 0x872 <vListInsert+0x2e>
     870:	df 01       	movw	r26, r30
     872:	14 96       	adiw	r26, 0x04	; 4
     874:	ed 91       	ld	r30, X+
     876:	fc 91       	ld	r31, X
     878:	15 97       	sbiw	r26, 0x05	; 5
     87a:	40 81       	ld	r20, Z
     87c:	51 81       	ldd	r21, Z+1	; 0x01
     87e:	62 81       	ldd	r22, Z+2	; 0x02
     880:	73 81       	ldd	r23, Z+3	; 0x03
     882:	04 17       	cp	r16, r20
     884:	15 07       	cpc	r17, r21
     886:	26 07       	cpc	r18, r22
     888:	37 07       	cpc	r19, r23
     88a:	90 f7       	brcc	.-28     	; 0x870 <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     88c:	14 96       	adiw	r26, 0x04	; 4
     88e:	ed 91       	ld	r30, X+
     890:	fc 91       	ld	r31, X
     892:	15 97       	sbiw	r26, 0x05	; 5
     894:	fd 83       	std	Y+5, r31	; 0x05
     896:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     898:	d7 83       	std	Z+7, r29	; 0x07
     89a:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
     89c:	bf 83       	std	Y+7, r27	; 0x07
     89e:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
     8a0:	15 96       	adiw	r26, 0x05	; 5
     8a2:	dc 93       	st	X, r29
     8a4:	ce 93       	st	-X, r28
     8a6:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     8a8:	9b 87       	std	Y+11, r25	; 0x0b
     8aa:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
     8ac:	fc 01       	movw	r30, r24
     8ae:	20 81       	ld	r18, Z
     8b0:	2f 5f       	subi	r18, 0xFF	; 255
     8b2:	20 83       	st	Z, r18
}
     8b4:	df 91       	pop	r29
     8b6:	cf 91       	pop	r28
     8b8:	1f 91       	pop	r17
     8ba:	0f 91       	pop	r16
     8bc:	08 95       	ret

000008be <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     8be:	cf 93       	push	r28
     8c0:	df 93       	push	r29
     8c2:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     8c4:	a2 85       	ldd	r26, Z+10	; 0x0a
     8c6:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     8c8:	c4 81       	ldd	r28, Z+4	; 0x04
     8ca:	d5 81       	ldd	r29, Z+5	; 0x05
     8cc:	86 81       	ldd	r24, Z+6	; 0x06
     8ce:	97 81       	ldd	r25, Z+7	; 0x07
     8d0:	9f 83       	std	Y+7, r25	; 0x07
     8d2:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     8d4:	c6 81       	ldd	r28, Z+6	; 0x06
     8d6:	d7 81       	ldd	r29, Z+7	; 0x07
     8d8:	84 81       	ldd	r24, Z+4	; 0x04
     8da:	95 81       	ldd	r25, Z+5	; 0x05
     8dc:	9d 83       	std	Y+5, r25	; 0x05
     8de:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     8e0:	11 96       	adiw	r26, 0x01	; 1
     8e2:	8d 91       	ld	r24, X+
     8e4:	9c 91       	ld	r25, X
     8e6:	12 97       	sbiw	r26, 0x02	; 2
     8e8:	e8 17       	cp	r30, r24
     8ea:	f9 07       	cpc	r31, r25
     8ec:	31 f4       	brne	.+12     	; 0x8fa <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     8ee:	86 81       	ldd	r24, Z+6	; 0x06
     8f0:	97 81       	ldd	r25, Z+7	; 0x07
     8f2:	12 96       	adiw	r26, 0x02	; 2
     8f4:	9c 93       	st	X, r25
     8f6:	8e 93       	st	-X, r24
     8f8:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     8fa:	13 86       	std	Z+11, r1	; 0x0b
     8fc:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
     8fe:	8c 91       	ld	r24, X
     900:	81 50       	subi	r24, 0x01	; 1
     902:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     904:	8c 91       	ld	r24, X
}
     906:	df 91       	pop	r29
     908:	cf 91       	pop	r28
     90a:	08 95       	ret

0000090c <prvSetupTimerInterrupt>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
     90c:	a8 95       	wdr
     90e:	90 ec       	ldi	r25, 0xC0	; 192
     910:	88 e1       	ldi	r24, 0x18	; 24
     912:	0f b6       	in	r0, 0x3f	; 63
     914:	f8 94       	cli
     916:	a8 95       	wdr
     918:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     91c:	0f be       	out	0x3f, r0	; 63
     91e:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     922:	08 95       	ret

00000924 <pxPortInitialiseStack>:
     924:	fc 01       	movw	r30, r24
     926:	60 83       	st	Z, r22
     928:	31 97       	sbiw	r30, 0x01	; 1
     92a:	70 83       	st	Z, r23
     92c:	31 97       	sbiw	r30, 0x01	; 1
     92e:	10 82       	st	Z, r1
     930:	31 97       	sbiw	r30, 0x01	; 1
     932:	10 82       	st	Z, r1
     934:	31 97       	sbiw	r30, 0x01	; 1
     936:	20 e8       	ldi	r18, 0x80	; 128
     938:	20 83       	st	Z, r18
     93a:	31 97       	sbiw	r30, 0x01	; 1
     93c:	10 82       	st	Z, r1
     93e:	31 97       	sbiw	r30, 0x01	; 1
     940:	10 82       	st	Z, r1
     942:	31 97       	sbiw	r30, 0x01	; 1
     944:	10 82       	st	Z, r1
     946:	77 97       	sbiw	r30, 0x17	; 23
     948:	40 83       	st	Z, r20
     94a:	31 97       	sbiw	r30, 0x01	; 1
     94c:	50 83       	st	Z, r21
     94e:	86 97       	sbiw	r24, 0x26	; 38
     950:	08 95       	ret

00000952 <xPortStartScheduler>:
     952:	dc df       	rcall	.-72     	; 0x90c <prvSetupTimerInterrupt>
     954:	a0 91 b3 11 	lds	r26, 0x11B3	; 0x8011b3 <pxCurrentTCB>
     958:	b0 91 b4 11 	lds	r27, 0x11B4	; 0x8011b4 <pxCurrentTCB+0x1>
     95c:	cd 91       	ld	r28, X+
     95e:	cd bf       	out	0x3d, r28	; 61
     960:	dd 91       	ld	r29, X+
     962:	de bf       	out	0x3e, r29	; 62
     964:	ff 91       	pop	r31
     966:	ef 91       	pop	r30
     968:	df 91       	pop	r29
     96a:	cf 91       	pop	r28
     96c:	bf 91       	pop	r27
     96e:	af 91       	pop	r26
     970:	9f 91       	pop	r25
     972:	8f 91       	pop	r24
     974:	7f 91       	pop	r23
     976:	6f 91       	pop	r22
     978:	5f 91       	pop	r21
     97a:	4f 91       	pop	r20
     97c:	3f 91       	pop	r19
     97e:	2f 91       	pop	r18
     980:	1f 91       	pop	r17
     982:	0f 91       	pop	r16
     984:	ff 90       	pop	r15
     986:	ef 90       	pop	r14
     988:	df 90       	pop	r13
     98a:	cf 90       	pop	r12
     98c:	bf 90       	pop	r11
     98e:	af 90       	pop	r10
     990:	9f 90       	pop	r9
     992:	8f 90       	pop	r8
     994:	7f 90       	pop	r7
     996:	6f 90       	pop	r6
     998:	5f 90       	pop	r5
     99a:	4f 90       	pop	r4
     99c:	3f 90       	pop	r3
     99e:	2f 90       	pop	r2
     9a0:	1f 90       	pop	r1
     9a2:	0f 90       	pop	r0
     9a4:	0c be       	out	0x3c, r0	; 60
     9a6:	0f 90       	pop	r0
     9a8:	0b be       	out	0x3b, r0	; 59
     9aa:	0f 90       	pop	r0
     9ac:	0f be       	out	0x3f, r0	; 63
     9ae:	0f 90       	pop	r0
     9b0:	08 95       	ret
     9b2:	81 e0       	ldi	r24, 0x01	; 1
     9b4:	08 95       	ret

000009b6 <vPortYield>:
     9b6:	0f 92       	push	r0
     9b8:	0f b6       	in	r0, 0x3f	; 63
     9ba:	f8 94       	cli
     9bc:	0f 92       	push	r0
     9be:	0b b6       	in	r0, 0x3b	; 59
     9c0:	0f 92       	push	r0
     9c2:	0c b6       	in	r0, 0x3c	; 60
     9c4:	0f 92       	push	r0
     9c6:	1f 92       	push	r1
     9c8:	11 24       	eor	r1, r1
     9ca:	2f 92       	push	r2
     9cc:	3f 92       	push	r3
     9ce:	4f 92       	push	r4
     9d0:	5f 92       	push	r5
     9d2:	6f 92       	push	r6
     9d4:	7f 92       	push	r7
     9d6:	8f 92       	push	r8
     9d8:	9f 92       	push	r9
     9da:	af 92       	push	r10
     9dc:	bf 92       	push	r11
     9de:	cf 92       	push	r12
     9e0:	df 92       	push	r13
     9e2:	ef 92       	push	r14
     9e4:	ff 92       	push	r15
     9e6:	0f 93       	push	r16
     9e8:	1f 93       	push	r17
     9ea:	2f 93       	push	r18
     9ec:	3f 93       	push	r19
     9ee:	4f 93       	push	r20
     9f0:	5f 93       	push	r21
     9f2:	6f 93       	push	r22
     9f4:	7f 93       	push	r23
     9f6:	8f 93       	push	r24
     9f8:	9f 93       	push	r25
     9fa:	af 93       	push	r26
     9fc:	bf 93       	push	r27
     9fe:	cf 93       	push	r28
     a00:	df 93       	push	r29
     a02:	ef 93       	push	r30
     a04:	ff 93       	push	r31
     a06:	a0 91 b3 11 	lds	r26, 0x11B3	; 0x8011b3 <pxCurrentTCB>
     a0a:	b0 91 b4 11 	lds	r27, 0x11B4	; 0x8011b4 <pxCurrentTCB+0x1>
     a0e:	0d b6       	in	r0, 0x3d	; 61
     a10:	0d 92       	st	X+, r0
     a12:	0e b6       	in	r0, 0x3e	; 62
     a14:	0d 92       	st	X+, r0
     a16:	0e 94 67 0e 	call	0x1cce	; 0x1cce <vTaskSwitchContext>
     a1a:	a0 91 b3 11 	lds	r26, 0x11B3	; 0x8011b3 <pxCurrentTCB>
     a1e:	b0 91 b4 11 	lds	r27, 0x11B4	; 0x8011b4 <pxCurrentTCB+0x1>
     a22:	cd 91       	ld	r28, X+
     a24:	cd bf       	out	0x3d, r28	; 61
     a26:	dd 91       	ld	r29, X+
     a28:	de bf       	out	0x3e, r29	; 62
     a2a:	ff 91       	pop	r31
     a2c:	ef 91       	pop	r30
     a2e:	df 91       	pop	r29
     a30:	cf 91       	pop	r28
     a32:	bf 91       	pop	r27
     a34:	af 91       	pop	r26
     a36:	9f 91       	pop	r25
     a38:	8f 91       	pop	r24
     a3a:	7f 91       	pop	r23
     a3c:	6f 91       	pop	r22
     a3e:	5f 91       	pop	r21
     a40:	4f 91       	pop	r20
     a42:	3f 91       	pop	r19
     a44:	2f 91       	pop	r18
     a46:	1f 91       	pop	r17
     a48:	0f 91       	pop	r16
     a4a:	ff 90       	pop	r15
     a4c:	ef 90       	pop	r14
     a4e:	df 90       	pop	r13
     a50:	cf 90       	pop	r12
     a52:	bf 90       	pop	r11
     a54:	af 90       	pop	r10
     a56:	9f 90       	pop	r9
     a58:	8f 90       	pop	r8
     a5a:	7f 90       	pop	r7
     a5c:	6f 90       	pop	r6
     a5e:	5f 90       	pop	r5
     a60:	4f 90       	pop	r4
     a62:	3f 90       	pop	r3
     a64:	2f 90       	pop	r2
     a66:	1f 90       	pop	r1
     a68:	0f 90       	pop	r0
     a6a:	0c be       	out	0x3c, r0	; 60
     a6c:	0f 90       	pop	r0
     a6e:	0b be       	out	0x3b, r0	; 59
     a70:	0f 90       	pop	r0
     a72:	0f be       	out	0x3f, r0	; 63
     a74:	0f 90       	pop	r0
     a76:	08 95       	ret

00000a78 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     a78:	0f 92       	push	r0
     a7a:	0f b6       	in	r0, 0x3f	; 63
     a7c:	f8 94       	cli
     a7e:	0f 92       	push	r0
     a80:	0b b6       	in	r0, 0x3b	; 59
     a82:	0f 92       	push	r0
     a84:	0c b6       	in	r0, 0x3c	; 60
     a86:	0f 92       	push	r0
     a88:	1f 92       	push	r1
     a8a:	11 24       	eor	r1, r1
     a8c:	2f 92       	push	r2
     a8e:	3f 92       	push	r3
     a90:	4f 92       	push	r4
     a92:	5f 92       	push	r5
     a94:	6f 92       	push	r6
     a96:	7f 92       	push	r7
     a98:	8f 92       	push	r8
     a9a:	9f 92       	push	r9
     a9c:	af 92       	push	r10
     a9e:	bf 92       	push	r11
     aa0:	cf 92       	push	r12
     aa2:	df 92       	push	r13
     aa4:	ef 92       	push	r14
     aa6:	ff 92       	push	r15
     aa8:	0f 93       	push	r16
     aaa:	1f 93       	push	r17
     aac:	2f 93       	push	r18
     aae:	3f 93       	push	r19
     ab0:	4f 93       	push	r20
     ab2:	5f 93       	push	r21
     ab4:	6f 93       	push	r22
     ab6:	7f 93       	push	r23
     ab8:	8f 93       	push	r24
     aba:	9f 93       	push	r25
     abc:	af 93       	push	r26
     abe:	bf 93       	push	r27
     ac0:	cf 93       	push	r28
     ac2:	df 93       	push	r29
     ac4:	ef 93       	push	r30
     ac6:	ff 93       	push	r31
     ac8:	a0 91 b3 11 	lds	r26, 0x11B3	; 0x8011b3 <pxCurrentTCB>
     acc:	b0 91 b4 11 	lds	r27, 0x11B4	; 0x8011b4 <pxCurrentTCB+0x1>
     ad0:	0d b6       	in	r0, 0x3d	; 61
     ad2:	0d 92       	st	X+, r0
     ad4:	0e b6       	in	r0, 0x3e	; 62
     ad6:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
     ad8:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
     ada:	62 d6       	rcall	.+3268   	; 0x17a0 <xTaskIncrementTick>
     adc:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     ade:	0e 94 67 0e 	call	0x1cce	; 0x1cce <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
     ae2:	a0 91 b3 11 	lds	r26, 0x11B3	; 0x8011b3 <pxCurrentTCB>
     ae6:	b0 91 b4 11 	lds	r27, 0x11B4	; 0x8011b4 <pxCurrentTCB+0x1>
     aea:	cd 91       	ld	r28, X+
     aec:	cd bf       	out	0x3d, r28	; 61
     aee:	dd 91       	ld	r29, X+
     af0:	de bf       	out	0x3e, r29	; 62
     af2:	ff 91       	pop	r31
     af4:	ef 91       	pop	r30
     af6:	df 91       	pop	r29
     af8:	cf 91       	pop	r28
     afa:	bf 91       	pop	r27
     afc:	af 91       	pop	r26
     afe:	9f 91       	pop	r25
     b00:	8f 91       	pop	r24
     b02:	7f 91       	pop	r23
     b04:	6f 91       	pop	r22
     b06:	5f 91       	pop	r21
     b08:	4f 91       	pop	r20
     b0a:	3f 91       	pop	r19
     b0c:	2f 91       	pop	r18
     b0e:	1f 91       	pop	r17
     b10:	0f 91       	pop	r16
     b12:	ff 90       	pop	r15
     b14:	ef 90       	pop	r14
     b16:	df 90       	pop	r13
     b18:	cf 90       	pop	r12
     b1a:	bf 90       	pop	r11
     b1c:	af 90       	pop	r10
     b1e:	9f 90       	pop	r9
     b20:	8f 90       	pop	r8
     b22:	7f 90       	pop	r7
     b24:	6f 90       	pop	r6
     b26:	5f 90       	pop	r5
     b28:	4f 90       	pop	r4
     b2a:	3f 90       	pop	r3
     b2c:	2f 90       	pop	r2
     b2e:	1f 90       	pop	r1
     b30:	0f 90       	pop	r0
     b32:	0c be       	out	0x3c, r0	; 60
     b34:	0f 90       	pop	r0
     b36:	0b be       	out	0x3b, r0	; 59
     b38:	0f 90       	pop	r0
     b3a:	0f be       	out	0x3f, r0	; 63
     b3c:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     b3e:	08 95       	ret

00000b40 <__vector_12>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
     b40:	9b df       	rcall	.-202    	; 0xa78 <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
     b42:	18 95       	reti

00000b44 <prvGetDisinheritPriorityAfterTimeout>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     b44:	dc 01       	movw	r26, r24
     b46:	53 96       	adiw	r26, 0x13	; 19
     b48:	2c 91       	ld	r18, X
     b4a:	53 97       	sbiw	r26, 0x13	; 19
     b4c:	22 23       	and	r18, r18
     b4e:	41 f0       	breq	.+16     	; 0xb60 <prvGetDisinheritPriorityAfterTimeout+0x1c>
     b50:	5a 96       	adiw	r26, 0x1a	; 26
     b52:	ed 91       	ld	r30, X+
     b54:	fc 91       	ld	r31, X
     b56:	5b 97       	sbiw	r26, 0x1b	; 27
     b58:	90 81       	ld	r25, Z
     b5a:	8a e0       	ldi	r24, 0x0A	; 10
     b5c:	89 1b       	sub	r24, r25
     b5e:	08 95       	ret
     b60:	80 e0       	ldi	r24, 0x00	; 0
     b62:	08 95       	ret

00000b64 <prvIsQueueEmpty>:
     b64:	0f b6       	in	r0, 0x3f	; 63
     b66:	f8 94       	cli
     b68:	0f 92       	push	r0
     b6a:	fc 01       	movw	r30, r24
     b6c:	86 8d       	ldd	r24, Z+30	; 0x1e
     b6e:	81 11       	cpse	r24, r1
     b70:	02 c0       	rjmp	.+4      	; 0xb76 <prvIsQueueEmpty+0x12>
     b72:	81 e0       	ldi	r24, 0x01	; 1
     b74:	01 c0       	rjmp	.+2      	; 0xb78 <prvIsQueueEmpty+0x14>
     b76:	80 e0       	ldi	r24, 0x00	; 0
     b78:	0f 90       	pop	r0
     b7a:	0f be       	out	0x3f, r0	; 63
     b7c:	08 95       	ret

00000b7e <prvIsQueueFull>:
     b7e:	0f b6       	in	r0, 0x3f	; 63
     b80:	f8 94       	cli
     b82:	0f 92       	push	r0
     b84:	fc 01       	movw	r30, r24
     b86:	26 8d       	ldd	r18, Z+30	; 0x1e
     b88:	87 8d       	ldd	r24, Z+31	; 0x1f
     b8a:	28 13       	cpse	r18, r24
     b8c:	02 c0       	rjmp	.+4      	; 0xb92 <prvIsQueueFull+0x14>
     b8e:	81 e0       	ldi	r24, 0x01	; 1
     b90:	01 c0       	rjmp	.+2      	; 0xb94 <prvIsQueueFull+0x16>
     b92:	80 e0       	ldi	r24, 0x00	; 0
     b94:	0f 90       	pop	r0
     b96:	0f be       	out	0x3f, r0	; 63
     b98:	08 95       	ret

00000b9a <prvCopyDataToQueue>:
     b9a:	0f 93       	push	r16
     b9c:	1f 93       	push	r17
     b9e:	cf 93       	push	r28
     ba0:	df 93       	push	r29
     ba2:	ec 01       	movw	r28, r24
     ba4:	04 2f       	mov	r16, r20
     ba6:	1e 8d       	ldd	r17, Y+30	; 0x1e
     ba8:	48 a1       	ldd	r20, Y+32	; 0x20
     baa:	41 11       	cpse	r20, r1
     bac:	0c c0       	rjmp	.+24     	; 0xbc6 <prvCopyDataToQueue+0x2c>
     bae:	88 81       	ld	r24, Y
     bb0:	99 81       	ldd	r25, Y+1	; 0x01
     bb2:	89 2b       	or	r24, r25
     bb4:	09 f0       	breq	.+2      	; 0xbb8 <prvCopyDataToQueue+0x1e>
     bb6:	42 c0       	rjmp	.+132    	; 0xc3c <prvCopyDataToQueue+0xa2>
     bb8:	8c 81       	ldd	r24, Y+4	; 0x04
     bba:	9d 81       	ldd	r25, Y+5	; 0x05
     bbc:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <xTaskPriorityDisinherit>
     bc0:	1d 82       	std	Y+5, r1	; 0x05
     bc2:	1c 82       	std	Y+4, r1	; 0x04
     bc4:	42 c0       	rjmp	.+132    	; 0xc4a <prvCopyDataToQueue+0xb0>
     bc6:	01 11       	cpse	r16, r1
     bc8:	17 c0       	rjmp	.+46     	; 0xbf8 <prvCopyDataToQueue+0x5e>
     bca:	50 e0       	ldi	r21, 0x00	; 0
     bcc:	8a 81       	ldd	r24, Y+2	; 0x02
     bce:	9b 81       	ldd	r25, Y+3	; 0x03
     bd0:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <memcpy>
     bd4:	28 a1       	ldd	r18, Y+32	; 0x20
     bd6:	8a 81       	ldd	r24, Y+2	; 0x02
     bd8:	9b 81       	ldd	r25, Y+3	; 0x03
     bda:	82 0f       	add	r24, r18
     bdc:	91 1d       	adc	r25, r1
     bde:	9b 83       	std	Y+3, r25	; 0x03
     be0:	8a 83       	std	Y+2, r24	; 0x02
     be2:	2c 81       	ldd	r18, Y+4	; 0x04
     be4:	3d 81       	ldd	r19, Y+5	; 0x05
     be6:	82 17       	cp	r24, r18
     be8:	93 07       	cpc	r25, r19
     bea:	50 f1       	brcs	.+84     	; 0xc40 <prvCopyDataToQueue+0xa6>
     bec:	88 81       	ld	r24, Y
     bee:	99 81       	ldd	r25, Y+1	; 0x01
     bf0:	9b 83       	std	Y+3, r25	; 0x03
     bf2:	8a 83       	std	Y+2, r24	; 0x02
     bf4:	80 e0       	ldi	r24, 0x00	; 0
     bf6:	29 c0       	rjmp	.+82     	; 0xc4a <prvCopyDataToQueue+0xb0>
     bf8:	50 e0       	ldi	r21, 0x00	; 0
     bfa:	8e 81       	ldd	r24, Y+6	; 0x06
     bfc:	9f 81       	ldd	r25, Y+7	; 0x07
     bfe:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <memcpy>
     c02:	88 a1       	ldd	r24, Y+32	; 0x20
     c04:	90 e0       	ldi	r25, 0x00	; 0
     c06:	91 95       	neg	r25
     c08:	81 95       	neg	r24
     c0a:	91 09       	sbc	r25, r1
     c0c:	2e 81       	ldd	r18, Y+6	; 0x06
     c0e:	3f 81       	ldd	r19, Y+7	; 0x07
     c10:	28 0f       	add	r18, r24
     c12:	39 1f       	adc	r19, r25
     c14:	3f 83       	std	Y+7, r19	; 0x07
     c16:	2e 83       	std	Y+6, r18	; 0x06
     c18:	48 81       	ld	r20, Y
     c1a:	59 81       	ldd	r21, Y+1	; 0x01
     c1c:	24 17       	cp	r18, r20
     c1e:	35 07       	cpc	r19, r21
     c20:	30 f4       	brcc	.+12     	; 0xc2e <prvCopyDataToQueue+0x94>
     c22:	2c 81       	ldd	r18, Y+4	; 0x04
     c24:	3d 81       	ldd	r19, Y+5	; 0x05
     c26:	82 0f       	add	r24, r18
     c28:	93 1f       	adc	r25, r19
     c2a:	9f 83       	std	Y+7, r25	; 0x07
     c2c:	8e 83       	std	Y+6, r24	; 0x06
     c2e:	02 30       	cpi	r16, 0x02	; 2
     c30:	49 f4       	brne	.+18     	; 0xc44 <prvCopyDataToQueue+0xaa>
     c32:	11 23       	and	r17, r17
     c34:	49 f0       	breq	.+18     	; 0xc48 <prvCopyDataToQueue+0xae>
     c36:	11 50       	subi	r17, 0x01	; 1
     c38:	80 e0       	ldi	r24, 0x00	; 0
     c3a:	07 c0       	rjmp	.+14     	; 0xc4a <prvCopyDataToQueue+0xb0>
     c3c:	80 e0       	ldi	r24, 0x00	; 0
     c3e:	05 c0       	rjmp	.+10     	; 0xc4a <prvCopyDataToQueue+0xb0>
     c40:	80 e0       	ldi	r24, 0x00	; 0
     c42:	03 c0       	rjmp	.+6      	; 0xc4a <prvCopyDataToQueue+0xb0>
     c44:	80 e0       	ldi	r24, 0x00	; 0
     c46:	01 c0       	rjmp	.+2      	; 0xc4a <prvCopyDataToQueue+0xb0>
     c48:	80 e0       	ldi	r24, 0x00	; 0
     c4a:	1f 5f       	subi	r17, 0xFF	; 255
     c4c:	1e 8f       	std	Y+30, r17	; 0x1e
     c4e:	df 91       	pop	r29
     c50:	cf 91       	pop	r28
     c52:	1f 91       	pop	r17
     c54:	0f 91       	pop	r16
     c56:	08 95       	ret

00000c58 <prvCopyDataFromQueue>:
     c58:	fc 01       	movw	r30, r24
     c5a:	40 a1       	ldd	r20, Z+32	; 0x20
     c5c:	44 23       	and	r20, r20
     c5e:	a9 f0       	breq	.+42     	; 0xc8a <prvCopyDataFromQueue+0x32>
     c60:	50 e0       	ldi	r21, 0x00	; 0
     c62:	26 81       	ldd	r18, Z+6	; 0x06
     c64:	37 81       	ldd	r19, Z+7	; 0x07
     c66:	24 0f       	add	r18, r20
     c68:	35 1f       	adc	r19, r21
     c6a:	37 83       	std	Z+7, r19	; 0x07
     c6c:	26 83       	std	Z+6, r18	; 0x06
     c6e:	84 81       	ldd	r24, Z+4	; 0x04
     c70:	95 81       	ldd	r25, Z+5	; 0x05
     c72:	28 17       	cp	r18, r24
     c74:	39 07       	cpc	r19, r25
     c76:	20 f0       	brcs	.+8      	; 0xc80 <prvCopyDataFromQueue+0x28>
     c78:	80 81       	ld	r24, Z
     c7a:	91 81       	ldd	r25, Z+1	; 0x01
     c7c:	97 83       	std	Z+7, r25	; 0x07
     c7e:	86 83       	std	Z+6, r24	; 0x06
     c80:	cb 01       	movw	r24, r22
     c82:	66 81       	ldd	r22, Z+6	; 0x06
     c84:	77 81       	ldd	r23, Z+7	; 0x07
     c86:	0c 94 bd 1d 	jmp	0x3b7a	; 0x3b7a <memcpy>
     c8a:	08 95       	ret

00000c8c <prvUnlockQueue>:
     c8c:	1f 93       	push	r17
     c8e:	cf 93       	push	r28
     c90:	df 93       	push	r29
     c92:	ec 01       	movw	r28, r24
     c94:	0f b6       	in	r0, 0x3f	; 63
     c96:	f8 94       	cli
     c98:	0f 92       	push	r0
     c9a:	1a a1       	ldd	r17, Y+34	; 0x22
     c9c:	0b c0       	rjmp	.+22     	; 0xcb4 <prvUnlockQueue+0x28>
     c9e:	8b 89       	ldd	r24, Y+19	; 0x13
     ca0:	88 23       	and	r24, r24
     ca2:	51 f0       	breq	.+20     	; 0xcb8 <prvUnlockQueue+0x2c>
     ca4:	ce 01       	movw	r24, r28
     ca6:	43 96       	adiw	r24, 0x13	; 19
     ca8:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <xTaskRemoveFromEventList>
     cac:	81 11       	cpse	r24, r1
     cae:	0e 94 58 10 	call	0x20b0	; 0x20b0 <vTaskMissedYield>
     cb2:	11 50       	subi	r17, 0x01	; 1
     cb4:	11 16       	cp	r1, r17
     cb6:	9c f3       	brlt	.-26     	; 0xc9e <prvUnlockQueue+0x12>
     cb8:	8f ef       	ldi	r24, 0xFF	; 255
     cba:	8a a3       	std	Y+34, r24	; 0x22
     cbc:	0f 90       	pop	r0
     cbe:	0f be       	out	0x3f, r0	; 63
     cc0:	0f b6       	in	r0, 0x3f	; 63
     cc2:	f8 94       	cli
     cc4:	0f 92       	push	r0
     cc6:	19 a1       	ldd	r17, Y+33	; 0x21
     cc8:	0b c0       	rjmp	.+22     	; 0xce0 <prvUnlockQueue+0x54>
     cca:	88 85       	ldd	r24, Y+8	; 0x08
     ccc:	88 23       	and	r24, r24
     cce:	51 f0       	breq	.+20     	; 0xce4 <prvUnlockQueue+0x58>
     cd0:	ce 01       	movw	r24, r28
     cd2:	08 96       	adiw	r24, 0x08	; 8
     cd4:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <xTaskRemoveFromEventList>
     cd8:	81 11       	cpse	r24, r1
     cda:	0e 94 58 10 	call	0x20b0	; 0x20b0 <vTaskMissedYield>
     cde:	11 50       	subi	r17, 0x01	; 1
     ce0:	11 16       	cp	r1, r17
     ce2:	9c f3       	brlt	.-26     	; 0xcca <prvUnlockQueue+0x3e>
     ce4:	8f ef       	ldi	r24, 0xFF	; 255
     ce6:	89 a3       	std	Y+33, r24	; 0x21
     ce8:	0f 90       	pop	r0
     cea:	0f be       	out	0x3f, r0	; 63
     cec:	df 91       	pop	r29
     cee:	cf 91       	pop	r28
     cf0:	1f 91       	pop	r17
     cf2:	08 95       	ret

00000cf4 <xQueueGenericReset>:
     cf4:	cf 93       	push	r28
     cf6:	df 93       	push	r29
     cf8:	ec 01       	movw	r28, r24
     cfa:	0f b6       	in	r0, 0x3f	; 63
     cfc:	f8 94       	cli
     cfe:	0f 92       	push	r0
     d00:	e8 81       	ld	r30, Y
     d02:	f9 81       	ldd	r31, Y+1	; 0x01
     d04:	8f 8d       	ldd	r24, Y+31	; 0x1f
     d06:	28 a1       	ldd	r18, Y+32	; 0x20
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	30 e0       	ldi	r19, 0x00	; 0
     d0c:	82 9f       	mul	r24, r18
     d0e:	a0 01       	movw	r20, r0
     d10:	83 9f       	mul	r24, r19
     d12:	50 0d       	add	r21, r0
     d14:	92 9f       	mul	r25, r18
     d16:	50 0d       	add	r21, r0
     d18:	11 24       	eor	r1, r1
     d1a:	4e 0f       	add	r20, r30
     d1c:	5f 1f       	adc	r21, r31
     d1e:	5d 83       	std	Y+5, r21	; 0x05
     d20:	4c 83       	std	Y+4, r20	; 0x04
     d22:	1e 8e       	std	Y+30, r1	; 0x1e
     d24:	fb 83       	std	Y+3, r31	; 0x03
     d26:	ea 83       	std	Y+2, r30	; 0x02
     d28:	01 97       	sbiw	r24, 0x01	; 1
     d2a:	28 9f       	mul	r18, r24
     d2c:	a0 01       	movw	r20, r0
     d2e:	29 9f       	mul	r18, r25
     d30:	50 0d       	add	r21, r0
     d32:	38 9f       	mul	r19, r24
     d34:	50 0d       	add	r21, r0
     d36:	11 24       	eor	r1, r1
     d38:	cf 01       	movw	r24, r30
     d3a:	84 0f       	add	r24, r20
     d3c:	95 1f       	adc	r25, r21
     d3e:	9f 83       	std	Y+7, r25	; 0x07
     d40:	8e 83       	std	Y+6, r24	; 0x06
     d42:	8f ef       	ldi	r24, 0xFF	; 255
     d44:	89 a3       	std	Y+33, r24	; 0x21
     d46:	8a a3       	std	Y+34, r24	; 0x22
     d48:	61 11       	cpse	r22, r1
     d4a:	0b c0       	rjmp	.+22     	; 0xd62 <xQueueGenericReset+0x6e>
     d4c:	88 85       	ldd	r24, Y+8	; 0x08
     d4e:	88 23       	and	r24, r24
     d50:	71 f0       	breq	.+28     	; 0xd6e <xQueueGenericReset+0x7a>
     d52:	ce 01       	movw	r24, r28
     d54:	08 96       	adiw	r24, 0x08	; 8
     d56:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <xTaskRemoveFromEventList>
     d5a:	88 23       	and	r24, r24
     d5c:	41 f0       	breq	.+16     	; 0xd6e <xQueueGenericReset+0x7a>
     d5e:	2b de       	rcall	.-938    	; 0x9b6 <vPortYield>
     d60:	06 c0       	rjmp	.+12     	; 0xd6e <xQueueGenericReset+0x7a>
     d62:	ce 01       	movw	r24, r28
     d64:	08 96       	adiw	r24, 0x08	; 8
     d66:	59 dd       	rcall	.-1358   	; 0x81a <vListInitialise>
     d68:	ce 01       	movw	r24, r28
     d6a:	43 96       	adiw	r24, 0x13	; 19
     d6c:	56 dd       	rcall	.-1364   	; 0x81a <vListInitialise>
     d6e:	0f 90       	pop	r0
     d70:	0f be       	out	0x3f, r0	; 63
     d72:	81 e0       	ldi	r24, 0x01	; 1
     d74:	df 91       	pop	r29
     d76:	cf 91       	pop	r28
     d78:	08 95       	ret

00000d7a <prvInitialiseNewQueue>:
     d7a:	0f 93       	push	r16
     d7c:	1f 93       	push	r17
     d7e:	f8 01       	movw	r30, r16
     d80:	61 11       	cpse	r22, r1
     d82:	03 c0       	rjmp	.+6      	; 0xd8a <prvInitialiseNewQueue+0x10>
     d84:	11 83       	std	Z+1, r17	; 0x01
     d86:	00 83       	st	Z, r16
     d88:	02 c0       	rjmp	.+4      	; 0xd8e <prvInitialiseNewQueue+0x14>
     d8a:	51 83       	std	Z+1, r21	; 0x01
     d8c:	40 83       	st	Z, r20
     d8e:	87 8f       	std	Z+31, r24	; 0x1f
     d90:	60 a3       	std	Z+32, r22	; 0x20
     d92:	61 e0       	ldi	r22, 0x01	; 1
     d94:	cf 01       	movw	r24, r30
     d96:	ae df       	rcall	.-164    	; 0xcf4 <xQueueGenericReset>
     d98:	1f 91       	pop	r17
     d9a:	0f 91       	pop	r16
     d9c:	08 95       	ret

00000d9e <xQueueGenericCreate>:
     d9e:	df 92       	push	r13
     da0:	ef 92       	push	r14
     da2:	ff 92       	push	r15
     da4:	0f 93       	push	r16
     da6:	1f 93       	push	r17
     da8:	cf 93       	push	r28
     daa:	df 93       	push	r29
     dac:	f8 2e       	mov	r15, r24
     dae:	e6 2e       	mov	r14, r22
     db0:	d4 2e       	mov	r13, r20
     db2:	86 9f       	mul	r24, r22
     db4:	c0 01       	movw	r24, r0
     db6:	11 24       	eor	r1, r1
     db8:	83 96       	adiw	r24, 0x23	; 35
     dba:	4a dc       	rcall	.-1900   	; 0x650 <pvPortMalloc>
     dbc:	ec 01       	movw	r28, r24
     dbe:	00 97       	sbiw	r24, 0x00	; 0
     dc0:	41 f0       	breq	.+16     	; 0xdd2 <xQueueGenericCreate+0x34>
     dc2:	8c 01       	movw	r16, r24
     dc4:	2d 2d       	mov	r18, r13
     dc6:	ac 01       	movw	r20, r24
     dc8:	4d 5d       	subi	r20, 0xDD	; 221
     dca:	5f 4f       	sbci	r21, 0xFF	; 255
     dcc:	6e 2d       	mov	r22, r14
     dce:	8f 2d       	mov	r24, r15
     dd0:	d4 df       	rcall	.-88     	; 0xd7a <prvInitialiseNewQueue>
     dd2:	ce 01       	movw	r24, r28
     dd4:	df 91       	pop	r29
     dd6:	cf 91       	pop	r28
     dd8:	1f 91       	pop	r17
     dda:	0f 91       	pop	r16
     ddc:	ff 90       	pop	r15
     dde:	ef 90       	pop	r14
     de0:	df 90       	pop	r13
     de2:	08 95       	ret

00000de4 <xQueueGenericSend>:
     de4:	cf 92       	push	r12
     de6:	df 92       	push	r13
     de8:	ef 92       	push	r14
     dea:	ff 92       	push	r15
     dec:	0f 93       	push	r16
     dee:	1f 93       	push	r17
     df0:	cf 93       	push	r28
     df2:	df 93       	push	r29
     df4:	cd b7       	in	r28, 0x3d	; 61
     df6:	de b7       	in	r29, 0x3e	; 62
     df8:	29 97       	sbiw	r28, 0x09	; 9
     dfa:	0f b6       	in	r0, 0x3f	; 63
     dfc:	f8 94       	cli
     dfe:	de bf       	out	0x3e, r29	; 62
     e00:	0f be       	out	0x3f, r0	; 63
     e02:	cd bf       	out	0x3d, r28	; 61
     e04:	7c 01       	movw	r14, r24
     e06:	6b 01       	movw	r12, r22
     e08:	2e 83       	std	Y+6, r18	; 0x06
     e0a:	3f 83       	std	Y+7, r19	; 0x07
     e0c:	48 87       	std	Y+8, r20	; 0x08
     e0e:	59 87       	std	Y+9, r21	; 0x09
     e10:	10 e0       	ldi	r17, 0x00	; 0
     e12:	0f b6       	in	r0, 0x3f	; 63
     e14:	f8 94       	cli
     e16:	0f 92       	push	r0
     e18:	f7 01       	movw	r30, r14
     e1a:	96 8d       	ldd	r25, Z+30	; 0x1e
     e1c:	87 8d       	ldd	r24, Z+31	; 0x1f
     e1e:	98 17       	cp	r25, r24
     e20:	10 f0       	brcs	.+4      	; 0xe26 <xQueueGenericSend+0x42>
     e22:	02 30       	cpi	r16, 0x02	; 2
     e24:	b1 f4       	brne	.+44     	; 0xe52 <xQueueGenericSend+0x6e>
     e26:	40 2f       	mov	r20, r16
     e28:	b6 01       	movw	r22, r12
     e2a:	c7 01       	movw	r24, r14
     e2c:	b6 de       	rcall	.-660    	; 0xb9a <prvCopyDataToQueue>
     e2e:	f7 01       	movw	r30, r14
     e30:	93 89       	ldd	r25, Z+19	; 0x13
     e32:	99 23       	and	r25, r25
     e34:	41 f0       	breq	.+16     	; 0xe46 <xQueueGenericSend+0x62>
     e36:	c7 01       	movw	r24, r14
     e38:	43 96       	adiw	r24, 0x13	; 19
     e3a:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <xTaskRemoveFromEventList>
     e3e:	88 23       	and	r24, r24
     e40:	21 f0       	breq	.+8      	; 0xe4a <xQueueGenericSend+0x66>
     e42:	b9 dd       	rcall	.-1166   	; 0x9b6 <vPortYield>
     e44:	02 c0       	rjmp	.+4      	; 0xe4a <xQueueGenericSend+0x66>
     e46:	81 11       	cpse	r24, r1
     e48:	b6 dd       	rcall	.-1172   	; 0x9b6 <vPortYield>
     e4a:	0f 90       	pop	r0
     e4c:	0f be       	out	0x3f, r0	; 63
     e4e:	81 e0       	ldi	r24, 0x01	; 1
     e50:	48 c0       	rjmp	.+144    	; 0xee2 <xQueueGenericSend+0xfe>
     e52:	8e 81       	ldd	r24, Y+6	; 0x06
     e54:	9f 81       	ldd	r25, Y+7	; 0x07
     e56:	a8 85       	ldd	r26, Y+8	; 0x08
     e58:	b9 85       	ldd	r27, Y+9	; 0x09
     e5a:	89 2b       	or	r24, r25
     e5c:	8a 2b       	or	r24, r26
     e5e:	8b 2b       	or	r24, r27
     e60:	21 f4       	brne	.+8      	; 0xe6a <xQueueGenericSend+0x86>
     e62:	0f 90       	pop	r0
     e64:	0f be       	out	0x3f, r0	; 63
     e66:	80 e0       	ldi	r24, 0x00	; 0
     e68:	3c c0       	rjmp	.+120    	; 0xee2 <xQueueGenericSend+0xfe>
     e6a:	11 11       	cpse	r17, r1
     e6c:	05 c0       	rjmp	.+10     	; 0xe78 <xQueueGenericSend+0x94>
     e6e:	ce 01       	movw	r24, r28
     e70:	01 96       	adiw	r24, 0x01	; 1
     e72:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <vTaskInternalSetTimeOutState>
     e76:	11 e0       	ldi	r17, 0x01	; 1
     e78:	0f 90       	pop	r0
     e7a:	0f be       	out	0x3f, r0	; 63
     e7c:	7d d4       	rcall	.+2298   	; 0x1778 <vTaskSuspendAll>
     e7e:	0f b6       	in	r0, 0x3f	; 63
     e80:	f8 94       	cli
     e82:	0f 92       	push	r0
     e84:	f7 01       	movw	r30, r14
     e86:	81 a1       	ldd	r24, Z+33	; 0x21
     e88:	8f 3f       	cpi	r24, 0xFF	; 255
     e8a:	09 f4       	brne	.+2      	; 0xe8e <xQueueGenericSend+0xaa>
     e8c:	11 a2       	std	Z+33, r1	; 0x21
     e8e:	f7 01       	movw	r30, r14
     e90:	82 a1       	ldd	r24, Z+34	; 0x22
     e92:	8f 3f       	cpi	r24, 0xFF	; 255
     e94:	09 f4       	brne	.+2      	; 0xe98 <xQueueGenericSend+0xb4>
     e96:	12 a2       	std	Z+34, r1	; 0x22
     e98:	0f 90       	pop	r0
     e9a:	0f be       	out	0x3f, r0	; 63
     e9c:	be 01       	movw	r22, r28
     e9e:	6a 5f       	subi	r22, 0xFA	; 250
     ea0:	7f 4f       	sbci	r23, 0xFF	; 255
     ea2:	ce 01       	movw	r24, r28
     ea4:	01 96       	adiw	r24, 0x01	; 1
     ea6:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <xTaskCheckForTimeOut>
     eaa:	81 11       	cpse	r24, r1
     eac:	16 c0       	rjmp	.+44     	; 0xeda <xQueueGenericSend+0xf6>
     eae:	c7 01       	movw	r24, r14
     eb0:	66 de       	rcall	.-820    	; 0xb7e <prvIsQueueFull>
     eb2:	88 23       	and	r24, r24
     eb4:	71 f0       	breq	.+28     	; 0xed2 <xQueueGenericSend+0xee>
     eb6:	4e 81       	ldd	r20, Y+6	; 0x06
     eb8:	5f 81       	ldd	r21, Y+7	; 0x07
     eba:	68 85       	ldd	r22, Y+8	; 0x08
     ebc:	79 85       	ldd	r23, Y+9	; 0x09
     ebe:	c7 01       	movw	r24, r14
     ec0:	08 96       	adiw	r24, 0x08	; 8
     ec2:	77 d7       	rcall	.+3822   	; 0x1db2 <vTaskPlaceOnEventList>
     ec4:	c7 01       	movw	r24, r14
     ec6:	e2 de       	rcall	.-572    	; 0xc8c <prvUnlockQueue>
     ec8:	97 d5       	rcall	.+2862   	; 0x19f8 <xTaskResumeAll>
     eca:	81 11       	cpse	r24, r1
     ecc:	a2 cf       	rjmp	.-188    	; 0xe12 <xQueueGenericSend+0x2e>
     ece:	73 dd       	rcall	.-1306   	; 0x9b6 <vPortYield>
     ed0:	a0 cf       	rjmp	.-192    	; 0xe12 <xQueueGenericSend+0x2e>
     ed2:	c7 01       	movw	r24, r14
     ed4:	db de       	rcall	.-586    	; 0xc8c <prvUnlockQueue>
     ed6:	90 d5       	rcall	.+2848   	; 0x19f8 <xTaskResumeAll>
     ed8:	9c cf       	rjmp	.-200    	; 0xe12 <xQueueGenericSend+0x2e>
     eda:	c7 01       	movw	r24, r14
     edc:	d7 de       	rcall	.-594    	; 0xc8c <prvUnlockQueue>
     ede:	8c d5       	rcall	.+2840   	; 0x19f8 <xTaskResumeAll>
     ee0:	80 e0       	ldi	r24, 0x00	; 0
     ee2:	29 96       	adiw	r28, 0x09	; 9
     ee4:	0f b6       	in	r0, 0x3f	; 63
     ee6:	f8 94       	cli
     ee8:	de bf       	out	0x3e, r29	; 62
     eea:	0f be       	out	0x3f, r0	; 63
     eec:	cd bf       	out	0x3d, r28	; 61
     eee:	df 91       	pop	r29
     ef0:	cf 91       	pop	r28
     ef2:	1f 91       	pop	r17
     ef4:	0f 91       	pop	r16
     ef6:	ff 90       	pop	r15
     ef8:	ef 90       	pop	r14
     efa:	df 90       	pop	r13
     efc:	cf 90       	pop	r12
     efe:	08 95       	ret

00000f00 <prvInitialiseMutex>:
     f00:	0f 93       	push	r16
     f02:	00 97       	sbiw	r24, 0x00	; 0
     f04:	69 f0       	breq	.+26     	; 0xf20 <prvInitialiseMutex+0x20>
     f06:	fc 01       	movw	r30, r24
     f08:	15 82       	std	Z+5, r1	; 0x05
     f0a:	14 82       	std	Z+4, r1	; 0x04
     f0c:	11 82       	std	Z+1, r1	; 0x01
     f0e:	10 82       	st	Z, r1
     f10:	16 82       	std	Z+6, r1	; 0x06
     f12:	00 e0       	ldi	r16, 0x00	; 0
     f14:	20 e0       	ldi	r18, 0x00	; 0
     f16:	30 e0       	ldi	r19, 0x00	; 0
     f18:	a9 01       	movw	r20, r18
     f1a:	60 e0       	ldi	r22, 0x00	; 0
     f1c:	70 e0       	ldi	r23, 0x00	; 0
     f1e:	62 df       	rcall	.-316    	; 0xde4 <xQueueGenericSend>
     f20:	0f 91       	pop	r16
     f22:	08 95       	ret

00000f24 <xQueueCreateMutex>:
     f24:	cf 93       	push	r28
     f26:	df 93       	push	r29
     f28:	48 2f       	mov	r20, r24
     f2a:	60 e0       	ldi	r22, 0x00	; 0
     f2c:	81 e0       	ldi	r24, 0x01	; 1
     f2e:	37 df       	rcall	.-402    	; 0xd9e <xQueueGenericCreate>
     f30:	ec 01       	movw	r28, r24
     f32:	e6 df       	rcall	.-52     	; 0xf00 <prvInitialiseMutex>
     f34:	ce 01       	movw	r24, r28
     f36:	df 91       	pop	r29
     f38:	cf 91       	pop	r28
     f3a:	08 95       	ret

00000f3c <xQueueGenericSendFromISR>:
     f3c:	ef 92       	push	r14
     f3e:	ff 92       	push	r15
     f40:	0f 93       	push	r16
     f42:	1f 93       	push	r17
     f44:	cf 93       	push	r28
     f46:	df 93       	push	r29
     f48:	8a 01       	movw	r16, r20
     f4a:	fc 01       	movw	r30, r24
     f4c:	56 8d       	ldd	r21, Z+30	; 0x1e
     f4e:	37 8d       	ldd	r19, Z+31	; 0x1f
     f50:	53 17       	cp	r21, r19
     f52:	10 f0       	brcs	.+4      	; 0xf58 <xQueueGenericSendFromISR+0x1c>
     f54:	22 30       	cpi	r18, 0x02	; 2
     f56:	f1 f4       	brne	.+60     	; 0xf94 <xQueueGenericSendFromISR+0x58>
     f58:	42 2f       	mov	r20, r18
     f5a:	78 01       	movw	r14, r16
     f5c:	ec 01       	movw	r28, r24
     f5e:	1a a1       	ldd	r17, Y+34	; 0x22
     f60:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f62:	ce 01       	movw	r24, r28
     f64:	1a de       	rcall	.-972    	; 0xb9a <prvCopyDataToQueue>
     f66:	1f 3f       	cpi	r17, 0xFF	; 255
     f68:	79 f4       	brne	.+30     	; 0xf88 <xQueueGenericSendFromISR+0x4c>
     f6a:	8b 89       	ldd	r24, Y+19	; 0x13
     f6c:	88 23       	and	r24, r24
     f6e:	a1 f0       	breq	.+40     	; 0xf98 <xQueueGenericSendFromISR+0x5c>
     f70:	ce 01       	movw	r24, r28
     f72:	43 96       	adiw	r24, 0x13	; 19
     f74:	77 d7       	rcall	.+3822   	; 0x1e64 <xTaskRemoveFromEventList>
     f76:	88 23       	and	r24, r24
     f78:	89 f0       	breq	.+34     	; 0xf9c <xQueueGenericSendFromISR+0x60>
     f7a:	e1 14       	cp	r14, r1
     f7c:	f1 04       	cpc	r15, r1
     f7e:	81 f0       	breq	.+32     	; 0xfa0 <xQueueGenericSendFromISR+0x64>
     f80:	81 e0       	ldi	r24, 0x01	; 1
     f82:	f7 01       	movw	r30, r14
     f84:	80 83       	st	Z, r24
     f86:	0d c0       	rjmp	.+26     	; 0xfa2 <xQueueGenericSendFromISR+0x66>
     f88:	ff 24       	eor	r15, r15
     f8a:	f3 94       	inc	r15
     f8c:	f1 0e       	add	r15, r17
     f8e:	fa a2       	std	Y+34, r15	; 0x22
     f90:	81 e0       	ldi	r24, 0x01	; 1
     f92:	07 c0       	rjmp	.+14     	; 0xfa2 <xQueueGenericSendFromISR+0x66>
     f94:	80 e0       	ldi	r24, 0x00	; 0
     f96:	05 c0       	rjmp	.+10     	; 0xfa2 <xQueueGenericSendFromISR+0x66>
     f98:	81 e0       	ldi	r24, 0x01	; 1
     f9a:	03 c0       	rjmp	.+6      	; 0xfa2 <xQueueGenericSendFromISR+0x66>
     f9c:	81 e0       	ldi	r24, 0x01	; 1
     f9e:	01 c0       	rjmp	.+2      	; 0xfa2 <xQueueGenericSendFromISR+0x66>
     fa0:	81 e0       	ldi	r24, 0x01	; 1
     fa2:	df 91       	pop	r29
     fa4:	cf 91       	pop	r28
     fa6:	1f 91       	pop	r17
     fa8:	0f 91       	pop	r16
     faa:	ff 90       	pop	r15
     fac:	ef 90       	pop	r14
     fae:	08 95       	ret

00000fb0 <xQueueReceive>:
     fb0:	cf 92       	push	r12
     fb2:	df 92       	push	r13
     fb4:	ef 92       	push	r14
     fb6:	ff 92       	push	r15
     fb8:	0f 93       	push	r16
     fba:	1f 93       	push	r17
     fbc:	cf 93       	push	r28
     fbe:	df 93       	push	r29
     fc0:	cd b7       	in	r28, 0x3d	; 61
     fc2:	de b7       	in	r29, 0x3e	; 62
     fc4:	29 97       	sbiw	r28, 0x09	; 9
     fc6:	0f b6       	in	r0, 0x3f	; 63
     fc8:	f8 94       	cli
     fca:	de bf       	out	0x3e, r29	; 62
     fcc:	0f be       	out	0x3f, r0	; 63
     fce:	cd bf       	out	0x3d, r28	; 61
     fd0:	8c 01       	movw	r16, r24
     fd2:	6b 01       	movw	r12, r22
     fd4:	2e 83       	std	Y+6, r18	; 0x06
     fd6:	3f 83       	std	Y+7, r19	; 0x07
     fd8:	48 87       	std	Y+8, r20	; 0x08
     fda:	59 87       	std	Y+9, r21	; 0x09
     fdc:	e1 2c       	mov	r14, r1
     fde:	0f b6       	in	r0, 0x3f	; 63
     fe0:	f8 94       	cli
     fe2:	0f 92       	push	r0
     fe4:	f8 01       	movw	r30, r16
     fe6:	f6 8c       	ldd	r15, Z+30	; 0x1e
     fe8:	ff 20       	and	r15, r15
     fea:	91 f0       	breq	.+36     	; 0x1010 <__EEPROM_REGION_LENGTH__+0x10>
     fec:	b6 01       	movw	r22, r12
     fee:	c8 01       	movw	r24, r16
     ff0:	33 de       	rcall	.-922    	; 0xc58 <prvCopyDataFromQueue>
     ff2:	fa 94       	dec	r15
     ff4:	f8 01       	movw	r30, r16
     ff6:	f6 8e       	std	Z+30, r15	; 0x1e
     ff8:	80 85       	ldd	r24, Z+8	; 0x08
     ffa:	88 23       	and	r24, r24
     ffc:	29 f0       	breq	.+10     	; 0x1008 <__EEPROM_REGION_LENGTH__+0x8>
     ffe:	c8 01       	movw	r24, r16
    1000:	08 96       	adiw	r24, 0x08	; 8
    1002:	30 d7       	rcall	.+3680   	; 0x1e64 <xTaskRemoveFromEventList>
    1004:	81 11       	cpse	r24, r1
    1006:	d7 dc       	rcall	.-1618   	; 0x9b6 <vPortYield>
    1008:	0f 90       	pop	r0
    100a:	0f be       	out	0x3f, r0	; 63
    100c:	81 e0       	ldi	r24, 0x01	; 1
    100e:	4c c0       	rjmp	.+152    	; 0x10a8 <__EEPROM_REGION_LENGTH__+0xa8>
    1010:	8e 81       	ldd	r24, Y+6	; 0x06
    1012:	9f 81       	ldd	r25, Y+7	; 0x07
    1014:	a8 85       	ldd	r26, Y+8	; 0x08
    1016:	b9 85       	ldd	r27, Y+9	; 0x09
    1018:	89 2b       	or	r24, r25
    101a:	8a 2b       	or	r24, r26
    101c:	8b 2b       	or	r24, r27
    101e:	21 f4       	brne	.+8      	; 0x1028 <__EEPROM_REGION_LENGTH__+0x28>
    1020:	0f 90       	pop	r0
    1022:	0f be       	out	0x3f, r0	; 63
    1024:	80 e0       	ldi	r24, 0x00	; 0
    1026:	40 c0       	rjmp	.+128    	; 0x10a8 <__EEPROM_REGION_LENGTH__+0xa8>
    1028:	e1 10       	cpse	r14, r1
    102a:	05 c0       	rjmp	.+10     	; 0x1036 <__EEPROM_REGION_LENGTH__+0x36>
    102c:	ce 01       	movw	r24, r28
    102e:	01 96       	adiw	r24, 0x01	; 1
    1030:	c8 d7       	rcall	.+3984   	; 0x1fc2 <vTaskInternalSetTimeOutState>
    1032:	ee 24       	eor	r14, r14
    1034:	e3 94       	inc	r14
    1036:	0f 90       	pop	r0
    1038:	0f be       	out	0x3f, r0	; 63
    103a:	9e d3       	rcall	.+1852   	; 0x1778 <vTaskSuspendAll>
    103c:	0f b6       	in	r0, 0x3f	; 63
    103e:	f8 94       	cli
    1040:	0f 92       	push	r0
    1042:	f8 01       	movw	r30, r16
    1044:	81 a1       	ldd	r24, Z+33	; 0x21
    1046:	8f 3f       	cpi	r24, 0xFF	; 255
    1048:	09 f4       	brne	.+2      	; 0x104c <__EEPROM_REGION_LENGTH__+0x4c>
    104a:	11 a2       	std	Z+33, r1	; 0x21
    104c:	f8 01       	movw	r30, r16
    104e:	82 a1       	ldd	r24, Z+34	; 0x22
    1050:	8f 3f       	cpi	r24, 0xFF	; 255
    1052:	09 f4       	brne	.+2      	; 0x1056 <__EEPROM_REGION_LENGTH__+0x56>
    1054:	12 a2       	std	Z+34, r1	; 0x22
    1056:	0f 90       	pop	r0
    1058:	0f be       	out	0x3f, r0	; 63
    105a:	be 01       	movw	r22, r28
    105c:	6a 5f       	subi	r22, 0xFA	; 250
    105e:	7f 4f       	sbci	r23, 0xFF	; 255
    1060:	ce 01       	movw	r24, r28
    1062:	01 96       	adiw	r24, 0x01	; 1
    1064:	bf d7       	rcall	.+3966   	; 0x1fe4 <xTaskCheckForTimeOut>
    1066:	81 11       	cpse	r24, r1
    1068:	16 c0       	rjmp	.+44     	; 0x1096 <__EEPROM_REGION_LENGTH__+0x96>
    106a:	c8 01       	movw	r24, r16
    106c:	7b dd       	rcall	.-1290   	; 0xb64 <prvIsQueueEmpty>
    106e:	88 23       	and	r24, r24
    1070:	71 f0       	breq	.+28     	; 0x108e <__EEPROM_REGION_LENGTH__+0x8e>
    1072:	4e 81       	ldd	r20, Y+6	; 0x06
    1074:	5f 81       	ldd	r21, Y+7	; 0x07
    1076:	68 85       	ldd	r22, Y+8	; 0x08
    1078:	79 85       	ldd	r23, Y+9	; 0x09
    107a:	c8 01       	movw	r24, r16
    107c:	43 96       	adiw	r24, 0x13	; 19
    107e:	99 d6       	rcall	.+3378   	; 0x1db2 <vTaskPlaceOnEventList>
    1080:	c8 01       	movw	r24, r16
    1082:	04 de       	rcall	.-1016   	; 0xc8c <prvUnlockQueue>
    1084:	b9 d4       	rcall	.+2418   	; 0x19f8 <xTaskResumeAll>
    1086:	81 11       	cpse	r24, r1
    1088:	aa cf       	rjmp	.-172    	; 0xfde <xQueueReceive+0x2e>
    108a:	95 dc       	rcall	.-1750   	; 0x9b6 <vPortYield>
    108c:	a8 cf       	rjmp	.-176    	; 0xfde <xQueueReceive+0x2e>
    108e:	c8 01       	movw	r24, r16
    1090:	fd dd       	rcall	.-1030   	; 0xc8c <prvUnlockQueue>
    1092:	b2 d4       	rcall	.+2404   	; 0x19f8 <xTaskResumeAll>
    1094:	a4 cf       	rjmp	.-184    	; 0xfde <xQueueReceive+0x2e>
    1096:	c8 01       	movw	r24, r16
    1098:	f9 dd       	rcall	.-1038   	; 0xc8c <prvUnlockQueue>
    109a:	ae d4       	rcall	.+2396   	; 0x19f8 <xTaskResumeAll>
    109c:	c8 01       	movw	r24, r16
    109e:	62 dd       	rcall	.-1340   	; 0xb64 <prvIsQueueEmpty>
    10a0:	88 23       	and	r24, r24
    10a2:	09 f4       	brne	.+2      	; 0x10a6 <__EEPROM_REGION_LENGTH__+0xa6>
    10a4:	9c cf       	rjmp	.-200    	; 0xfde <xQueueReceive+0x2e>
    10a6:	80 e0       	ldi	r24, 0x00	; 0
    10a8:	29 96       	adiw	r28, 0x09	; 9
    10aa:	0f b6       	in	r0, 0x3f	; 63
    10ac:	f8 94       	cli
    10ae:	de bf       	out	0x3e, r29	; 62
    10b0:	0f be       	out	0x3f, r0	; 63
    10b2:	cd bf       	out	0x3d, r28	; 61
    10b4:	df 91       	pop	r29
    10b6:	cf 91       	pop	r28
    10b8:	1f 91       	pop	r17
    10ba:	0f 91       	pop	r16
    10bc:	ff 90       	pop	r15
    10be:	ef 90       	pop	r14
    10c0:	df 90       	pop	r13
    10c2:	cf 90       	pop	r12
    10c4:	08 95       	ret

000010c6 <xQueueSemaphoreTake>:
    10c6:	ef 92       	push	r14
    10c8:	ff 92       	push	r15
    10ca:	0f 93       	push	r16
    10cc:	1f 93       	push	r17
    10ce:	cf 93       	push	r28
    10d0:	df 93       	push	r29
    10d2:	cd b7       	in	r28, 0x3d	; 61
    10d4:	de b7       	in	r29, 0x3e	; 62
    10d6:	29 97       	sbiw	r28, 0x09	; 9
    10d8:	0f b6       	in	r0, 0x3f	; 63
    10da:	f8 94       	cli
    10dc:	de bf       	out	0x3e, r29	; 62
    10de:	0f be       	out	0x3f, r0	; 63
    10e0:	cd bf       	out	0x3d, r28	; 61
    10e2:	8c 01       	movw	r16, r24
    10e4:	4e 83       	std	Y+6, r20	; 0x06
    10e6:	5f 83       	std	Y+7, r21	; 0x07
    10e8:	68 87       	std	Y+8, r22	; 0x08
    10ea:	79 87       	std	Y+9, r23	; 0x09
    10ec:	e1 2c       	mov	r14, r1
    10ee:	f1 2c       	mov	r15, r1
    10f0:	0f b6       	in	r0, 0x3f	; 63
    10f2:	f8 94       	cli
    10f4:	0f 92       	push	r0
    10f6:	f8 01       	movw	r30, r16
    10f8:	86 8d       	ldd	r24, Z+30	; 0x1e
    10fa:	88 23       	and	r24, r24
    10fc:	c1 f0       	breq	.+48     	; 0x112e <xQueueSemaphoreTake+0x68>
    10fe:	81 50       	subi	r24, 0x01	; 1
    1100:	86 8f       	std	Z+30, r24	; 0x1e
    1102:	80 81       	ld	r24, Z
    1104:	91 81       	ldd	r25, Z+1	; 0x01
    1106:	89 2b       	or	r24, r25
    1108:	29 f4       	brne	.+10     	; 0x1114 <xQueueSemaphoreTake+0x4e>
    110a:	0e 94 b3 11 	call	0x2366	; 0x2366 <pvTaskIncrementMutexHeldCount>
    110e:	f8 01       	movw	r30, r16
    1110:	95 83       	std	Z+5, r25	; 0x05
    1112:	84 83       	std	Z+4, r24	; 0x04
    1114:	f8 01       	movw	r30, r16
    1116:	80 85       	ldd	r24, Z+8	; 0x08
    1118:	88 23       	and	r24, r24
    111a:	29 f0       	breq	.+10     	; 0x1126 <xQueueSemaphoreTake+0x60>
    111c:	c8 01       	movw	r24, r16
    111e:	08 96       	adiw	r24, 0x08	; 8
    1120:	a1 d6       	rcall	.+3394   	; 0x1e64 <xTaskRemoveFromEventList>
    1122:	81 11       	cpse	r24, r1
    1124:	48 dc       	rcall	.-1904   	; 0x9b6 <vPortYield>
    1126:	0f 90       	pop	r0
    1128:	0f be       	out	0x3f, r0	; 63
    112a:	81 e0       	ldi	r24, 0x01	; 1
    112c:	6b c0       	rjmp	.+214    	; 0x1204 <xQueueSemaphoreTake+0x13e>
    112e:	8e 81       	ldd	r24, Y+6	; 0x06
    1130:	9f 81       	ldd	r25, Y+7	; 0x07
    1132:	a8 85       	ldd	r26, Y+8	; 0x08
    1134:	b9 85       	ldd	r27, Y+9	; 0x09
    1136:	89 2b       	or	r24, r25
    1138:	8a 2b       	or	r24, r26
    113a:	8b 2b       	or	r24, r27
    113c:	21 f4       	brne	.+8      	; 0x1146 <xQueueSemaphoreTake+0x80>
    113e:	0f 90       	pop	r0
    1140:	0f be       	out	0x3f, r0	; 63
    1142:	80 e0       	ldi	r24, 0x00	; 0
    1144:	5f c0       	rjmp	.+190    	; 0x1204 <xQueueSemaphoreTake+0x13e>
    1146:	f1 10       	cpse	r15, r1
    1148:	05 c0       	rjmp	.+10     	; 0x1154 <xQueueSemaphoreTake+0x8e>
    114a:	ce 01       	movw	r24, r28
    114c:	01 96       	adiw	r24, 0x01	; 1
    114e:	39 d7       	rcall	.+3698   	; 0x1fc2 <vTaskInternalSetTimeOutState>
    1150:	ff 24       	eor	r15, r15
    1152:	f3 94       	inc	r15
    1154:	0f 90       	pop	r0
    1156:	0f be       	out	0x3f, r0	; 63
    1158:	0f d3       	rcall	.+1566   	; 0x1778 <vTaskSuspendAll>
    115a:	0f b6       	in	r0, 0x3f	; 63
    115c:	f8 94       	cli
    115e:	0f 92       	push	r0
    1160:	f8 01       	movw	r30, r16
    1162:	81 a1       	ldd	r24, Z+33	; 0x21
    1164:	8f 3f       	cpi	r24, 0xFF	; 255
    1166:	09 f4       	brne	.+2      	; 0x116a <xQueueSemaphoreTake+0xa4>
    1168:	11 a2       	std	Z+33, r1	; 0x21
    116a:	f8 01       	movw	r30, r16
    116c:	82 a1       	ldd	r24, Z+34	; 0x22
    116e:	8f 3f       	cpi	r24, 0xFF	; 255
    1170:	09 f4       	brne	.+2      	; 0x1174 <xQueueSemaphoreTake+0xae>
    1172:	12 a2       	std	Z+34, r1	; 0x22
    1174:	0f 90       	pop	r0
    1176:	0f be       	out	0x3f, r0	; 63
    1178:	be 01       	movw	r22, r28
    117a:	6a 5f       	subi	r22, 0xFA	; 250
    117c:	7f 4f       	sbci	r23, 0xFF	; 255
    117e:	ce 01       	movw	r24, r28
    1180:	01 96       	adiw	r24, 0x01	; 1
    1182:	30 d7       	rcall	.+3680   	; 0x1fe4 <xTaskCheckForTimeOut>
    1184:	81 11       	cpse	r24, r1
    1186:	24 c0       	rjmp	.+72     	; 0x11d0 <xQueueSemaphoreTake+0x10a>
    1188:	c8 01       	movw	r24, r16
    118a:	ec dc       	rcall	.-1576   	; 0xb64 <prvIsQueueEmpty>
    118c:	88 23       	and	r24, r24
    118e:	e1 f0       	breq	.+56     	; 0x11c8 <xQueueSemaphoreTake+0x102>
    1190:	f8 01       	movw	r30, r16
    1192:	80 81       	ld	r24, Z
    1194:	91 81       	ldd	r25, Z+1	; 0x01
    1196:	89 2b       	or	r24, r25
    1198:	49 f4       	brne	.+18     	; 0x11ac <xQueueSemaphoreTake+0xe6>
    119a:	0f b6       	in	r0, 0x3f	; 63
    119c:	f8 94       	cli
    119e:	0f 92       	push	r0
    11a0:	84 81       	ldd	r24, Z+4	; 0x04
    11a2:	95 81       	ldd	r25, Z+5	; 0x05
    11a4:	97 d7       	rcall	.+3886   	; 0x20d4 <xTaskPriorityInherit>
    11a6:	e8 2e       	mov	r14, r24
    11a8:	0f 90       	pop	r0
    11aa:	0f be       	out	0x3f, r0	; 63
    11ac:	4e 81       	ldd	r20, Y+6	; 0x06
    11ae:	5f 81       	ldd	r21, Y+7	; 0x07
    11b0:	68 85       	ldd	r22, Y+8	; 0x08
    11b2:	79 85       	ldd	r23, Y+9	; 0x09
    11b4:	c8 01       	movw	r24, r16
    11b6:	43 96       	adiw	r24, 0x13	; 19
    11b8:	fc d5       	rcall	.+3064   	; 0x1db2 <vTaskPlaceOnEventList>
    11ba:	c8 01       	movw	r24, r16
    11bc:	67 dd       	rcall	.-1330   	; 0xc8c <prvUnlockQueue>
    11be:	1c d4       	rcall	.+2104   	; 0x19f8 <xTaskResumeAll>
    11c0:	81 11       	cpse	r24, r1
    11c2:	96 cf       	rjmp	.-212    	; 0x10f0 <xQueueSemaphoreTake+0x2a>
    11c4:	f8 db       	rcall	.-2064   	; 0x9b6 <vPortYield>
    11c6:	94 cf       	rjmp	.-216    	; 0x10f0 <xQueueSemaphoreTake+0x2a>
    11c8:	c8 01       	movw	r24, r16
    11ca:	60 dd       	rcall	.-1344   	; 0xc8c <prvUnlockQueue>
    11cc:	15 d4       	rcall	.+2090   	; 0x19f8 <xTaskResumeAll>
    11ce:	90 cf       	rjmp	.-224    	; 0x10f0 <xQueueSemaphoreTake+0x2a>
    11d0:	c8 01       	movw	r24, r16
    11d2:	5c dd       	rcall	.-1352   	; 0xc8c <prvUnlockQueue>
    11d4:	11 d4       	rcall	.+2082   	; 0x19f8 <xTaskResumeAll>
    11d6:	c8 01       	movw	r24, r16
    11d8:	c5 dc       	rcall	.-1654   	; 0xb64 <prvIsQueueEmpty>
    11da:	88 23       	and	r24, r24
    11dc:	09 f4       	brne	.+2      	; 0x11e0 <xQueueSemaphoreTake+0x11a>
    11de:	88 cf       	rjmp	.-240    	; 0x10f0 <xQueueSemaphoreTake+0x2a>
    11e0:	ee 20       	and	r14, r14
    11e2:	79 f0       	breq	.+30     	; 0x1202 <xQueueSemaphoreTake+0x13c>
    11e4:	0f b6       	in	r0, 0x3f	; 63
    11e6:	f8 94       	cli
    11e8:	0f 92       	push	r0
    11ea:	c8 01       	movw	r24, r16
    11ec:	ab dc       	rcall	.-1706   	; 0xb44 <prvGetDisinheritPriorityAfterTimeout>
    11ee:	68 2f       	mov	r22, r24
    11f0:	f8 01       	movw	r30, r16
    11f2:	84 81       	ldd	r24, Z+4	; 0x04
    11f4:	95 81       	ldd	r25, Z+5	; 0x05
    11f6:	0e 94 4c 11 	call	0x2298	; 0x2298 <vTaskPriorityDisinheritAfterTimeout>
    11fa:	0f 90       	pop	r0
    11fc:	0f be       	out	0x3f, r0	; 63
    11fe:	80 e0       	ldi	r24, 0x00	; 0
    1200:	01 c0       	rjmp	.+2      	; 0x1204 <xQueueSemaphoreTake+0x13e>
    1202:	80 e0       	ldi	r24, 0x00	; 0
    1204:	29 96       	adiw	r28, 0x09	; 9
    1206:	0f b6       	in	r0, 0x3f	; 63
    1208:	f8 94       	cli
    120a:	de bf       	out	0x3e, r29	; 62
    120c:	0f be       	out	0x3f, r0	; 63
    120e:	cd bf       	out	0x3d, r28	; 61
    1210:	df 91       	pop	r29
    1212:	cf 91       	pop	r28
    1214:	1f 91       	pop	r17
    1216:	0f 91       	pop	r16
    1218:	ff 90       	pop	r15
    121a:	ef 90       	pop	r14
    121c:	08 95       	ret

0000121e <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
    121e:	cf 93       	push	r28
    1220:	df 93       	push	r29
    1222:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    1224:	0f b6       	in	r0, 0x3f	; 63
    1226:	f8 94       	cli
    1228:	0f 92       	push	r0
    122a:	89 a1       	ldd	r24, Y+33	; 0x21
    122c:	8f 3f       	cpi	r24, 0xFF	; 255
    122e:	09 f4       	brne	.+2      	; 0x1232 <vQueueWaitForMessageRestricted+0x14>
    1230:	19 a2       	std	Y+33, r1	; 0x21
    1232:	8a a1       	ldd	r24, Y+34	; 0x22
    1234:	8f 3f       	cpi	r24, 0xFF	; 255
    1236:	09 f4       	brne	.+2      	; 0x123a <vQueueWaitForMessageRestricted+0x1c>
    1238:	1a a2       	std	Y+34, r1	; 0x22
    123a:	0f 90       	pop	r0
    123c:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    123e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1240:	81 11       	cpse	r24, r1
    1242:	03 c0       	rjmp	.+6      	; 0x124a <vQueueWaitForMessageRestricted+0x2c>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    1244:	ce 01       	movw	r24, r28
    1246:	43 96       	adiw	r24, 0x13	; 19
    1248:	cb d5       	rcall	.+2966   	; 0x1de0 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
    124a:	ce 01       	movw	r24, r28
    124c:	1f dd       	rcall	.-1474   	; 0xc8c <prvUnlockQueue>
    }
    124e:	df 91       	pop	r29
    1250:	cf 91       	pop	r28
    1252:	08 95       	ret

00001254 <prvResetNextTaskUnblockTime>:
    1254:	e0 91 2d 11 	lds	r30, 0x112D	; 0x80112d <pxDelayedTaskList>
    1258:	f0 91 2e 11 	lds	r31, 0x112E	; 0x80112e <pxDelayedTaskList+0x1>
    125c:	80 81       	ld	r24, Z
    125e:	81 11       	cpse	r24, r1
    1260:	0c c0       	rjmp	.+24     	; 0x127a <prvResetNextTaskUnblockTime+0x26>
    1262:	8f ef       	ldi	r24, 0xFF	; 255
    1264:	9f ef       	ldi	r25, 0xFF	; 255
    1266:	dc 01       	movw	r26, r24
    1268:	80 93 f7 10 	sts	0x10F7, r24	; 0x8010f7 <xNextTaskUnblockTime>
    126c:	90 93 f8 10 	sts	0x10F8, r25	; 0x8010f8 <xNextTaskUnblockTime+0x1>
    1270:	a0 93 f9 10 	sts	0x10F9, r26	; 0x8010f9 <xNextTaskUnblockTime+0x2>
    1274:	b0 93 fa 10 	sts	0x10FA, r27	; 0x8010fa <xNextTaskUnblockTime+0x3>
    1278:	08 95       	ret
    127a:	e0 91 2d 11 	lds	r30, 0x112D	; 0x80112d <pxDelayedTaskList>
    127e:	f0 91 2e 11 	lds	r31, 0x112E	; 0x80112e <pxDelayedTaskList+0x1>
    1282:	07 80       	ldd	r0, Z+7	; 0x07
    1284:	f0 85       	ldd	r31, Z+8	; 0x08
    1286:	e0 2d       	mov	r30, r0
    1288:	80 81       	ld	r24, Z
    128a:	91 81       	ldd	r25, Z+1	; 0x01
    128c:	a2 81       	ldd	r26, Z+2	; 0x02
    128e:	b3 81       	ldd	r27, Z+3	; 0x03
    1290:	80 93 f7 10 	sts	0x10F7, r24	; 0x8010f7 <xNextTaskUnblockTime>
    1294:	90 93 f8 10 	sts	0x10F8, r25	; 0x8010f8 <xNextTaskUnblockTime+0x1>
    1298:	a0 93 f9 10 	sts	0x10F9, r26	; 0x8010f9 <xNextTaskUnblockTime+0x2>
    129c:	b0 93 fa 10 	sts	0x10FA, r27	; 0x8010fa <xNextTaskUnblockTime+0x3>
    12a0:	08 95       	ret

000012a2 <prvDeleteTCB>:
    12a2:	cf 93       	push	r28
    12a4:	df 93       	push	r29
    12a6:	ec 01       	movw	r28, r24
    12a8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    12aa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    12ac:	7a da       	rcall	.-2828   	; 0x7a2 <vPortFree>
    12ae:	ce 01       	movw	r24, r28
    12b0:	78 da       	rcall	.-2832   	; 0x7a2 <vPortFree>
    12b2:	df 91       	pop	r29
    12b4:	cf 91       	pop	r28
    12b6:	08 95       	ret

000012b8 <prvInitialiseNewTask>:
    12b8:	4f 92       	push	r4
    12ba:	5f 92       	push	r5
    12bc:	6f 92       	push	r6
    12be:	7f 92       	push	r7
    12c0:	8f 92       	push	r8
    12c2:	9f 92       	push	r9
    12c4:	af 92       	push	r10
    12c6:	bf 92       	push	r11
    12c8:	cf 92       	push	r12
    12ca:	df 92       	push	r13
    12cc:	ef 92       	push	r14
    12ce:	ff 92       	push	r15
    12d0:	0f 93       	push	r16
    12d2:	cf 93       	push	r28
    12d4:	df 93       	push	r29
    12d6:	2c 01       	movw	r4, r24
    12d8:	5b 01       	movw	r10, r22
    12da:	4a 01       	movw	r8, r20
    12dc:	39 01       	movw	r6, r18
    12de:	e6 01       	movw	r28, r12
    12e0:	65 ea       	ldi	r22, 0xA5	; 165
    12e2:	70 e0       	ldi	r23, 0x00	; 0
    12e4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    12e6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    12e8:	0e 94 c6 1d 	call	0x3b8c	; 0x3b8c <memset>
    12ec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    12ee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    12f0:	21 e0       	ldi	r18, 0x01	; 1
    12f2:	82 1a       	sub	r8, r18
    12f4:	91 08       	sbc	r9, r1
    12f6:	88 0e       	add	r8, r24
    12f8:	99 1e       	adc	r9, r25
    12fa:	a1 14       	cp	r10, r1
    12fc:	b1 04       	cpc	r11, r1
    12fe:	89 f4       	brne	.+34     	; 0x1322 <prvInitialiseNewTask+0x6a>
    1300:	15 c0       	rjmp	.+42     	; 0x132c <prvInitialiseNewTask+0x74>
    1302:	82 2f       	mov	r24, r18
    1304:	90 e0       	ldi	r25, 0x00	; 0
    1306:	f5 01       	movw	r30, r10
    1308:	e8 0f       	add	r30, r24
    130a:	f9 1f       	adc	r31, r25
    130c:	30 81       	ld	r19, Z
    130e:	de 01       	movw	r26, r28
    1310:	a8 0f       	add	r26, r24
    1312:	b9 1f       	adc	r27, r25
    1314:	5d 96       	adiw	r26, 0x1d	; 29
    1316:	3c 93       	st	X, r19
    1318:	80 81       	ld	r24, Z
    131a:	88 23       	and	r24, r24
    131c:	29 f0       	breq	.+10     	; 0x1328 <prvInitialiseNewTask+0x70>
    131e:	2f 5f       	subi	r18, 0xFF	; 255
    1320:	01 c0       	rjmp	.+2      	; 0x1324 <prvInitialiseNewTask+0x6c>
    1322:	20 e0       	ldi	r18, 0x00	; 0
    1324:	20 31       	cpi	r18, 0x10	; 16
    1326:	68 f3       	brcs	.-38     	; 0x1302 <prvInitialiseNewTask+0x4a>
    1328:	1c a6       	std	Y+44, r1	; 0x2c
    132a:	01 c0       	rjmp	.+2      	; 0x132e <prvInitialiseNewTask+0x76>
    132c:	1d 8e       	std	Y+29, r1	; 0x1d
    132e:	0a 30       	cpi	r16, 0x0A	; 10
    1330:	08 f0       	brcs	.+2      	; 0x1334 <prvInitialiseNewTask+0x7c>
    1332:	09 e0       	ldi	r16, 0x09	; 9
    1334:	0a 8f       	std	Y+26, r16	; 0x1a
    1336:	0d a7       	std	Y+45, r16	; 0x2d
    1338:	1e a6       	std	Y+46, r1	; 0x2e
    133a:	ce 01       	movw	r24, r28
    133c:	02 96       	adiw	r24, 0x02	; 2
    133e:	7e da       	rcall	.-2820   	; 0x83c <vListInitialiseItem>
    1340:	ce 01       	movw	r24, r28
    1342:	0e 96       	adiw	r24, 0x0e	; 14
    1344:	7b da       	rcall	.-2826   	; 0x83c <vListInitialiseItem>
    1346:	db 87       	std	Y+11, r29	; 0x0b
    1348:	ca 87       	std	Y+10, r28	; 0x0a
    134a:	8a e0       	ldi	r24, 0x0A	; 10
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	a0 e0       	ldi	r26, 0x00	; 0
    1350:	b0 e0       	ldi	r27, 0x00	; 0
    1352:	80 1b       	sub	r24, r16
    1354:	91 09       	sbc	r25, r1
    1356:	a1 09       	sbc	r26, r1
    1358:	b1 09       	sbc	r27, r1
    135a:	8e 87       	std	Y+14, r24	; 0x0e
    135c:	9f 87       	std	Y+15, r25	; 0x0f
    135e:	a8 8b       	std	Y+16, r26	; 0x10
    1360:	b9 8b       	std	Y+17, r27	; 0x11
    1362:	df 8b       	std	Y+23, r29	; 0x17
    1364:	ce 8b       	std	Y+22, r28	; 0x16
    1366:	18 aa       	std	Y+48, r1	; 0x30
    1368:	1f a6       	std	Y+47, r1	; 0x2f
    136a:	84 e0       	ldi	r24, 0x04	; 4
    136c:	fe 01       	movw	r30, r28
    136e:	f1 96       	adiw	r30, 0x31	; 49
    1370:	df 01       	movw	r26, r30
    1372:	1d 92       	st	X+, r1
    1374:	8a 95       	dec	r24
    1376:	e9 f7       	brne	.-6      	; 0x1372 <prvInitialiseNewTask+0xba>
    1378:	1d aa       	std	Y+53, r1	; 0x35
    137a:	a3 01       	movw	r20, r6
    137c:	b2 01       	movw	r22, r4
    137e:	c4 01       	movw	r24, r8
    1380:	d1 da       	rcall	.-2654   	; 0x924 <pxPortInitialiseStack>
    1382:	99 83       	std	Y+1, r25	; 0x01
    1384:	88 83       	st	Y, r24
    1386:	e1 14       	cp	r14, r1
    1388:	f1 04       	cpc	r15, r1
    138a:	19 f0       	breq	.+6      	; 0x1392 <prvInitialiseNewTask+0xda>
    138c:	f7 01       	movw	r30, r14
    138e:	d1 83       	std	Z+1, r29	; 0x01
    1390:	c0 83       	st	Z, r28
    1392:	df 91       	pop	r29
    1394:	cf 91       	pop	r28
    1396:	0f 91       	pop	r16
    1398:	ff 90       	pop	r15
    139a:	ef 90       	pop	r14
    139c:	df 90       	pop	r13
    139e:	cf 90       	pop	r12
    13a0:	bf 90       	pop	r11
    13a2:	af 90       	pop	r10
    13a4:	9f 90       	pop	r9
    13a6:	8f 90       	pop	r8
    13a8:	7f 90       	pop	r7
    13aa:	6f 90       	pop	r6
    13ac:	5f 90       	pop	r5
    13ae:	4f 90       	pop	r4
    13b0:	08 95       	ret

000013b2 <prvInitialiseTaskLists>:
    13b2:	cf 93       	push	r28
    13b4:	c0 e0       	ldi	r28, 0x00	; 0
    13b6:	08 c0       	rjmp	.+16     	; 0x13c8 <prvInitialiseTaskLists+0x16>
    13b8:	2b e0       	ldi	r18, 0x0B	; 11
    13ba:	c2 9f       	mul	r28, r18
    13bc:	c0 01       	movw	r24, r0
    13be:	11 24       	eor	r1, r1
    13c0:	8b 5b       	subi	r24, 0xBB	; 187
    13c2:	9e 4e       	sbci	r25, 0xEE	; 238
    13c4:	2a da       	rcall	.-2988   	; 0x81a <vListInitialise>
    13c6:	cf 5f       	subi	r28, 0xFF	; 255
    13c8:	ca 30       	cpi	r28, 0x0A	; 10
    13ca:	b0 f3       	brcs	.-20     	; 0x13b8 <prvInitialiseTaskLists+0x6>
    13cc:	8a e3       	ldi	r24, 0x3A	; 58
    13ce:	91 e1       	ldi	r25, 0x11	; 17
    13d0:	24 da       	rcall	.-3000   	; 0x81a <vListInitialise>
    13d2:	8f e2       	ldi	r24, 0x2F	; 47
    13d4:	91 e1       	ldi	r25, 0x11	; 17
    13d6:	21 da       	rcall	.-3006   	; 0x81a <vListInitialise>
    13d8:	80 e2       	ldi	r24, 0x20	; 32
    13da:	91 e1       	ldi	r25, 0x11	; 17
    13dc:	1e da       	rcall	.-3012   	; 0x81a <vListInitialise>
    13de:	85 e1       	ldi	r24, 0x15	; 21
    13e0:	91 e1       	ldi	r25, 0x11	; 17
    13e2:	1b da       	rcall	.-3018   	; 0x81a <vListInitialise>
    13e4:	89 e0       	ldi	r24, 0x09	; 9
    13e6:	91 e1       	ldi	r25, 0x11	; 17
    13e8:	18 da       	rcall	.-3024   	; 0x81a <vListInitialise>
    13ea:	8a e3       	ldi	r24, 0x3A	; 58
    13ec:	91 e1       	ldi	r25, 0x11	; 17
    13ee:	90 93 2e 11 	sts	0x112E, r25	; 0x80112e <pxDelayedTaskList+0x1>
    13f2:	80 93 2d 11 	sts	0x112D, r24	; 0x80112d <pxDelayedTaskList>
    13f6:	8f e2       	ldi	r24, 0x2F	; 47
    13f8:	91 e1       	ldi	r25, 0x11	; 17
    13fa:	90 93 2c 11 	sts	0x112C, r25	; 0x80112c <pxOverflowDelayedTaskList+0x1>
    13fe:	80 93 2b 11 	sts	0x112B, r24	; 0x80112b <pxOverflowDelayedTaskList>
    1402:	cf 91       	pop	r28
    1404:	08 95       	ret

00001406 <prvAddNewTaskToReadyList>:
    1406:	cf 93       	push	r28
    1408:	df 93       	push	r29
    140a:	ec 01       	movw	r28, r24
    140c:	0f b6       	in	r0, 0x3f	; 63
    140e:	f8 94       	cli
    1410:	0f 92       	push	r0
    1412:	80 91 08 11 	lds	r24, 0x1108	; 0x801108 <uxCurrentNumberOfTasks>
    1416:	8f 5f       	subi	r24, 0xFF	; 255
    1418:	80 93 08 11 	sts	0x1108, r24	; 0x801108 <uxCurrentNumberOfTasks>
    141c:	80 91 b3 11 	lds	r24, 0x11B3	; 0x8011b3 <pxCurrentTCB>
    1420:	90 91 b4 11 	lds	r25, 0x11B4	; 0x8011b4 <pxCurrentTCB+0x1>
    1424:	89 2b       	or	r24, r25
    1426:	51 f4       	brne	.+20     	; 0x143c <prvAddNewTaskToReadyList+0x36>
    1428:	d0 93 b4 11 	sts	0x11B4, r29	; 0x8011b4 <pxCurrentTCB+0x1>
    142c:	c0 93 b3 11 	sts	0x11B3, r28	; 0x8011b3 <pxCurrentTCB>
    1430:	80 91 08 11 	lds	r24, 0x1108	; 0x801108 <uxCurrentNumberOfTasks>
    1434:	81 30       	cpi	r24, 0x01	; 1
    1436:	91 f4       	brne	.+36     	; 0x145c <prvAddNewTaskToReadyList+0x56>
    1438:	bc df       	rcall	.-136    	; 0x13b2 <prvInitialiseTaskLists>
    143a:	10 c0       	rjmp	.+32     	; 0x145c <prvAddNewTaskToReadyList+0x56>
    143c:	80 91 02 11 	lds	r24, 0x1102	; 0x801102 <xSchedulerRunning>
    1440:	81 11       	cpse	r24, r1
    1442:	0c c0       	rjmp	.+24     	; 0x145c <prvAddNewTaskToReadyList+0x56>
    1444:	e0 91 b3 11 	lds	r30, 0x11B3	; 0x8011b3 <pxCurrentTCB>
    1448:	f0 91 b4 11 	lds	r31, 0x11B4	; 0x8011b4 <pxCurrentTCB+0x1>
    144c:	92 8d       	ldd	r25, Z+26	; 0x1a
    144e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1450:	89 17       	cp	r24, r25
    1452:	20 f0       	brcs	.+8      	; 0x145c <prvAddNewTaskToReadyList+0x56>
    1454:	d0 93 b4 11 	sts	0x11B4, r29	; 0x8011b4 <pxCurrentTCB+0x1>
    1458:	c0 93 b3 11 	sts	0x11B3, r28	; 0x8011b3 <pxCurrentTCB>
    145c:	80 91 fb 10 	lds	r24, 0x10FB	; 0x8010fb <uxTaskNumber>
    1460:	8f 5f       	subi	r24, 0xFF	; 255
    1462:	80 93 fb 10 	sts	0x10FB, r24	; 0x8010fb <uxTaskNumber>
    1466:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1468:	80 91 03 11 	lds	r24, 0x1103	; 0x801103 <uxTopReadyPriority>
    146c:	8e 17       	cp	r24, r30
    146e:	10 f4       	brcc	.+4      	; 0x1474 <prvAddNewTaskToReadyList+0x6e>
    1470:	e0 93 03 11 	sts	0x1103, r30	; 0x801103 <uxTopReadyPriority>
    1474:	8b e0       	ldi	r24, 0x0B	; 11
    1476:	8e 9f       	mul	r24, r30
    1478:	f0 01       	movw	r30, r0
    147a:	11 24       	eor	r1, r1
    147c:	eb 5b       	subi	r30, 0xBB	; 187
    147e:	fe 4e       	sbci	r31, 0xEE	; 238
    1480:	01 80       	ldd	r0, Z+1	; 0x01
    1482:	f2 81       	ldd	r31, Z+2	; 0x02
    1484:	e0 2d       	mov	r30, r0
    1486:	ff 83       	std	Y+7, r31	; 0x07
    1488:	ee 83       	std	Y+6, r30	; 0x06
    148a:	26 81       	ldd	r18, Z+6	; 0x06
    148c:	37 81       	ldd	r19, Z+7	; 0x07
    148e:	39 87       	std	Y+9, r19	; 0x09
    1490:	28 87       	std	Y+8, r18	; 0x08
    1492:	a6 81       	ldd	r26, Z+6	; 0x06
    1494:	b7 81       	ldd	r27, Z+7	; 0x07
    1496:	9e 01       	movw	r18, r28
    1498:	2e 5f       	subi	r18, 0xFE	; 254
    149a:	3f 4f       	sbci	r19, 0xFF	; 255
    149c:	15 96       	adiw	r26, 0x05	; 5
    149e:	3c 93       	st	X, r19
    14a0:	2e 93       	st	-X, r18
    14a2:	14 97       	sbiw	r26, 0x04	; 4
    14a4:	37 83       	std	Z+7, r19	; 0x07
    14a6:	26 83       	std	Z+6, r18	; 0x06
    14a8:	ea 8d       	ldd	r30, Y+26	; 0x1a
    14aa:	8e 9f       	mul	r24, r30
    14ac:	f0 01       	movw	r30, r0
    14ae:	11 24       	eor	r1, r1
    14b0:	eb 5b       	subi	r30, 0xBB	; 187
    14b2:	fe 4e       	sbci	r31, 0xEE	; 238
    14b4:	fd 87       	std	Y+13, r31	; 0x0d
    14b6:	ec 87       	std	Y+12, r30	; 0x0c
    14b8:	80 81       	ld	r24, Z
    14ba:	8f 5f       	subi	r24, 0xFF	; 255
    14bc:	80 83       	st	Z, r24
    14be:	0f 90       	pop	r0
    14c0:	0f be       	out	0x3f, r0	; 63
    14c2:	80 91 02 11 	lds	r24, 0x1102	; 0x801102 <xSchedulerRunning>
    14c6:	88 23       	and	r24, r24
    14c8:	49 f0       	breq	.+18     	; 0x14dc <prvAddNewTaskToReadyList+0xd6>
    14ca:	e0 91 b3 11 	lds	r30, 0x11B3	; 0x8011b3 <pxCurrentTCB>
    14ce:	f0 91 b4 11 	lds	r31, 0x11B4	; 0x8011b4 <pxCurrentTCB+0x1>
    14d2:	92 8d       	ldd	r25, Z+26	; 0x1a
    14d4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    14d6:	98 17       	cp	r25, r24
    14d8:	08 f4       	brcc	.+2      	; 0x14dc <prvAddNewTaskToReadyList+0xd6>
    14da:	6d da       	rcall	.-2854   	; 0x9b6 <vPortYield>
    14dc:	df 91       	pop	r29
    14de:	cf 91       	pop	r28
    14e0:	08 95       	ret

000014e2 <prvCheckTasksWaitingTermination>:
    14e2:	cf 93       	push	r28
    14e4:	df 93       	push	r29
    14e6:	1a c0       	rjmp	.+52     	; 0x151c <prvCheckTasksWaitingTermination+0x3a>
    14e8:	0f b6       	in	r0, 0x3f	; 63
    14ea:	f8 94       	cli
    14ec:	0f 92       	push	r0
    14ee:	e0 91 1c 11 	lds	r30, 0x111C	; 0x80111c <xTasksWaitingTermination+0x7>
    14f2:	f0 91 1d 11 	lds	r31, 0x111D	; 0x80111d <xTasksWaitingTermination+0x8>
    14f6:	c0 85       	ldd	r28, Z+8	; 0x08
    14f8:	d1 85       	ldd	r29, Z+9	; 0x09
    14fa:	ce 01       	movw	r24, r28
    14fc:	02 96       	adiw	r24, 0x02	; 2
    14fe:	df d9       	rcall	.-3138   	; 0x8be <uxListRemove>
    1500:	80 91 08 11 	lds	r24, 0x1108	; 0x801108 <uxCurrentNumberOfTasks>
    1504:	81 50       	subi	r24, 0x01	; 1
    1506:	80 93 08 11 	sts	0x1108, r24	; 0x801108 <uxCurrentNumberOfTasks>
    150a:	80 91 14 11 	lds	r24, 0x1114	; 0x801114 <uxDeletedTasksWaitingCleanUp>
    150e:	81 50       	subi	r24, 0x01	; 1
    1510:	80 93 14 11 	sts	0x1114, r24	; 0x801114 <uxDeletedTasksWaitingCleanUp>
    1514:	0f 90       	pop	r0
    1516:	0f be       	out	0x3f, r0	; 63
    1518:	ce 01       	movw	r24, r28
    151a:	c3 de       	rcall	.-634    	; 0x12a2 <prvDeleteTCB>
    151c:	80 91 14 11 	lds	r24, 0x1114	; 0x801114 <uxDeletedTasksWaitingCleanUp>
    1520:	81 11       	cpse	r24, r1
    1522:	e2 cf       	rjmp	.-60     	; 0x14e8 <prvCheckTasksWaitingTermination+0x6>
    1524:	df 91       	pop	r29
    1526:	cf 91       	pop	r28
    1528:	08 95       	ret

0000152a <prvAddCurrentTaskToDelayedList>:
    152a:	8f 92       	push	r8
    152c:	9f 92       	push	r9
    152e:	af 92       	push	r10
    1530:	bf 92       	push	r11
    1532:	cf 92       	push	r12
    1534:	df 92       	push	r13
    1536:	ef 92       	push	r14
    1538:	ff 92       	push	r15
    153a:	cf 93       	push	r28
    153c:	df 93       	push	r29
    153e:	6b 01       	movw	r12, r22
    1540:	7c 01       	movw	r14, r24
    1542:	c4 2f       	mov	r28, r20
    1544:	80 90 04 11 	lds	r8, 0x1104	; 0x801104 <xTickCount>
    1548:	90 90 05 11 	lds	r9, 0x1105	; 0x801105 <xTickCount+0x1>
    154c:	a0 90 06 11 	lds	r10, 0x1106	; 0x801106 <xTickCount+0x2>
    1550:	b0 90 07 11 	lds	r11, 0x1107	; 0x801107 <xTickCount+0x3>
    1554:	80 91 b3 11 	lds	r24, 0x11B3	; 0x8011b3 <pxCurrentTCB>
    1558:	90 91 b4 11 	lds	r25, 0x11B4	; 0x8011b4 <pxCurrentTCB+0x1>
    155c:	02 96       	adiw	r24, 0x02	; 2
    155e:	af d9       	rcall	.-3234   	; 0x8be <uxListRemove>
    1560:	8f ef       	ldi	r24, 0xFF	; 255
    1562:	c8 16       	cp	r12, r24
    1564:	d8 06       	cpc	r13, r24
    1566:	e8 06       	cpc	r14, r24
    1568:	f8 06       	cpc	r15, r24
    156a:	b1 f5       	brne	.+108    	; 0x15d8 <prvAddCurrentTaskToDelayedList+0xae>
    156c:	cc 23       	and	r28, r28
    156e:	a1 f1       	breq	.+104    	; 0x15d8 <prvAddCurrentTaskToDelayedList+0xae>
    1570:	e9 e0       	ldi	r30, 0x09	; 9
    1572:	f1 e1       	ldi	r31, 0x11	; 17
    1574:	a1 81       	ldd	r26, Z+1	; 0x01
    1576:	b2 81       	ldd	r27, Z+2	; 0x02
    1578:	c0 91 b3 11 	lds	r28, 0x11B3	; 0x8011b3 <pxCurrentTCB>
    157c:	d0 91 b4 11 	lds	r29, 0x11B4	; 0x8011b4 <pxCurrentTCB+0x1>
    1580:	bf 83       	std	Y+7, r27	; 0x07
    1582:	ae 83       	std	Y+6, r26	; 0x06
    1584:	c0 91 b3 11 	lds	r28, 0x11B3	; 0x8011b3 <pxCurrentTCB>
    1588:	d0 91 b4 11 	lds	r29, 0x11B4	; 0x8011b4 <pxCurrentTCB+0x1>
    158c:	16 96       	adiw	r26, 0x06	; 6
    158e:	8d 91       	ld	r24, X+
    1590:	9c 91       	ld	r25, X
    1592:	17 97       	sbiw	r26, 0x07	; 7
    1594:	99 87       	std	Y+9, r25	; 0x09
    1596:	88 87       	std	Y+8, r24	; 0x08
    1598:	16 96       	adiw	r26, 0x06	; 6
    159a:	cd 91       	ld	r28, X+
    159c:	dc 91       	ld	r29, X
    159e:	17 97       	sbiw	r26, 0x07	; 7
    15a0:	80 91 b3 11 	lds	r24, 0x11B3	; 0x8011b3 <pxCurrentTCB>
    15a4:	90 91 b4 11 	lds	r25, 0x11B4	; 0x8011b4 <pxCurrentTCB+0x1>
    15a8:	02 96       	adiw	r24, 0x02	; 2
    15aa:	9d 83       	std	Y+5, r25	; 0x05
    15ac:	8c 83       	std	Y+4, r24	; 0x04
    15ae:	80 91 b3 11 	lds	r24, 0x11B3	; 0x8011b3 <pxCurrentTCB>
    15b2:	90 91 b4 11 	lds	r25, 0x11B4	; 0x8011b4 <pxCurrentTCB+0x1>
    15b6:	02 96       	adiw	r24, 0x02	; 2
    15b8:	17 96       	adiw	r26, 0x07	; 7
    15ba:	9c 93       	st	X, r25
    15bc:	8e 93       	st	-X, r24
    15be:	16 97       	sbiw	r26, 0x06	; 6
    15c0:	a0 91 b3 11 	lds	r26, 0x11B3	; 0x8011b3 <pxCurrentTCB>
    15c4:	b0 91 b4 11 	lds	r27, 0x11B4	; 0x8011b4 <pxCurrentTCB+0x1>
    15c8:	1d 96       	adiw	r26, 0x0d	; 13
    15ca:	fc 93       	st	X, r31
    15cc:	ee 93       	st	-X, r30
    15ce:	1c 97       	sbiw	r26, 0x0c	; 12
    15d0:	80 81       	ld	r24, Z
    15d2:	8f 5f       	subi	r24, 0xFF	; 255
    15d4:	80 83       	st	Z, r24
    15d6:	3d c0       	rjmp	.+122    	; 0x1652 <prvAddCurrentTaskToDelayedList+0x128>
    15d8:	c8 0c       	add	r12, r8
    15da:	d9 1c       	adc	r13, r9
    15dc:	ea 1c       	adc	r14, r10
    15de:	fb 1c       	adc	r15, r11
    15e0:	e0 91 b3 11 	lds	r30, 0x11B3	; 0x8011b3 <pxCurrentTCB>
    15e4:	f0 91 b4 11 	lds	r31, 0x11B4	; 0x8011b4 <pxCurrentTCB+0x1>
    15e8:	c2 82       	std	Z+2, r12	; 0x02
    15ea:	d3 82       	std	Z+3, r13	; 0x03
    15ec:	e4 82       	std	Z+4, r14	; 0x04
    15ee:	f5 82       	std	Z+5, r15	; 0x05
    15f0:	c8 14       	cp	r12, r8
    15f2:	d9 04       	cpc	r13, r9
    15f4:	ea 04       	cpc	r14, r10
    15f6:	fb 04       	cpc	r15, r11
    15f8:	60 f4       	brcc	.+24     	; 0x1612 <prvAddCurrentTaskToDelayedList+0xe8>
    15fa:	60 91 b3 11 	lds	r22, 0x11B3	; 0x8011b3 <pxCurrentTCB>
    15fe:	70 91 b4 11 	lds	r23, 0x11B4	; 0x8011b4 <pxCurrentTCB+0x1>
    1602:	80 91 2b 11 	lds	r24, 0x112B	; 0x80112b <pxOverflowDelayedTaskList>
    1606:	90 91 2c 11 	lds	r25, 0x112C	; 0x80112c <pxOverflowDelayedTaskList+0x1>
    160a:	6e 5f       	subi	r22, 0xFE	; 254
    160c:	7f 4f       	sbci	r23, 0xFF	; 255
    160e:	1a d9       	rcall	.-3532   	; 0x844 <vListInsert>
    1610:	20 c0       	rjmp	.+64     	; 0x1652 <prvAddCurrentTaskToDelayedList+0x128>
    1612:	60 91 b3 11 	lds	r22, 0x11B3	; 0x8011b3 <pxCurrentTCB>
    1616:	70 91 b4 11 	lds	r23, 0x11B4	; 0x8011b4 <pxCurrentTCB+0x1>
    161a:	80 91 2d 11 	lds	r24, 0x112D	; 0x80112d <pxDelayedTaskList>
    161e:	90 91 2e 11 	lds	r25, 0x112E	; 0x80112e <pxDelayedTaskList+0x1>
    1622:	6e 5f       	subi	r22, 0xFE	; 254
    1624:	7f 4f       	sbci	r23, 0xFF	; 255
    1626:	0e d9       	rcall	.-3556   	; 0x844 <vListInsert>
    1628:	80 91 f7 10 	lds	r24, 0x10F7	; 0x8010f7 <xNextTaskUnblockTime>
    162c:	90 91 f8 10 	lds	r25, 0x10F8	; 0x8010f8 <xNextTaskUnblockTime+0x1>
    1630:	a0 91 f9 10 	lds	r26, 0x10F9	; 0x8010f9 <xNextTaskUnblockTime+0x2>
    1634:	b0 91 fa 10 	lds	r27, 0x10FA	; 0x8010fa <xNextTaskUnblockTime+0x3>
    1638:	c8 16       	cp	r12, r24
    163a:	d9 06       	cpc	r13, r25
    163c:	ea 06       	cpc	r14, r26
    163e:	fb 06       	cpc	r15, r27
    1640:	40 f4       	brcc	.+16     	; 0x1652 <prvAddCurrentTaskToDelayedList+0x128>
    1642:	c0 92 f7 10 	sts	0x10F7, r12	; 0x8010f7 <xNextTaskUnblockTime>
    1646:	d0 92 f8 10 	sts	0x10F8, r13	; 0x8010f8 <xNextTaskUnblockTime+0x1>
    164a:	e0 92 f9 10 	sts	0x10F9, r14	; 0x8010f9 <xNextTaskUnblockTime+0x2>
    164e:	f0 92 fa 10 	sts	0x10FA, r15	; 0x8010fa <xNextTaskUnblockTime+0x3>
    1652:	df 91       	pop	r29
    1654:	cf 91       	pop	r28
    1656:	ff 90       	pop	r15
    1658:	ef 90       	pop	r14
    165a:	df 90       	pop	r13
    165c:	cf 90       	pop	r12
    165e:	bf 90       	pop	r11
    1660:	af 90       	pop	r10
    1662:	9f 90       	pop	r9
    1664:	8f 90       	pop	r8
    1666:	08 95       	ret

00001668 <xTaskCreate>:
    1668:	2f 92       	push	r2
    166a:	3f 92       	push	r3
    166c:	4f 92       	push	r4
    166e:	5f 92       	push	r5
    1670:	6f 92       	push	r6
    1672:	7f 92       	push	r7
    1674:	8f 92       	push	r8
    1676:	9f 92       	push	r9
    1678:	af 92       	push	r10
    167a:	bf 92       	push	r11
    167c:	cf 92       	push	r12
    167e:	df 92       	push	r13
    1680:	ef 92       	push	r14
    1682:	ff 92       	push	r15
    1684:	0f 93       	push	r16
    1686:	cf 93       	push	r28
    1688:	df 93       	push	r29
    168a:	3c 01       	movw	r6, r24
    168c:	1b 01       	movw	r2, r22
    168e:	4a 01       	movw	r8, r20
    1690:	29 01       	movw	r4, r18
    1692:	ca 01       	movw	r24, r20
    1694:	0e 94 28 03 	call	0x650	; 0x650 <pvPortMalloc>
    1698:	6c 01       	movw	r12, r24
    169a:	89 2b       	or	r24, r25
    169c:	69 f0       	breq	.+26     	; 0x16b8 <xTaskCreate+0x50>
    169e:	86 e3       	ldi	r24, 0x36	; 54
    16a0:	90 e0       	ldi	r25, 0x00	; 0
    16a2:	0e 94 28 03 	call	0x650	; 0x650 <pvPortMalloc>
    16a6:	ec 01       	movw	r28, r24
    16a8:	89 2b       	or	r24, r25
    16aa:	19 f0       	breq	.+6      	; 0x16b2 <xTaskCreate+0x4a>
    16ac:	dc 8e       	std	Y+28, r13	; 0x1c
    16ae:	cb 8e       	std	Y+27, r12	; 0x1b
    16b0:	05 c0       	rjmp	.+10     	; 0x16bc <xTaskCreate+0x54>
    16b2:	c6 01       	movw	r24, r12
    16b4:	76 d8       	rcall	.-3860   	; 0x7a2 <vPortFree>
    16b6:	02 c0       	rjmp	.+4      	; 0x16bc <xTaskCreate+0x54>
    16b8:	c0 e0       	ldi	r28, 0x00	; 0
    16ba:	d0 e0       	ldi	r29, 0x00	; 0
    16bc:	20 97       	sbiw	r28, 0x00	; 0
    16be:	61 f0       	breq	.+24     	; 0x16d8 <xTaskCreate+0x70>
    16c0:	a1 2c       	mov	r10, r1
    16c2:	b1 2c       	mov	r11, r1
    16c4:	6e 01       	movw	r12, r28
    16c6:	92 01       	movw	r18, r4
    16c8:	a4 01       	movw	r20, r8
    16ca:	b1 01       	movw	r22, r2
    16cc:	c3 01       	movw	r24, r6
    16ce:	f4 dd       	rcall	.-1048   	; 0x12b8 <prvInitialiseNewTask>
    16d0:	ce 01       	movw	r24, r28
    16d2:	99 de       	rcall	.-718    	; 0x1406 <prvAddNewTaskToReadyList>
    16d4:	81 e0       	ldi	r24, 0x01	; 1
    16d6:	01 c0       	rjmp	.+2      	; 0x16da <xTaskCreate+0x72>
    16d8:	8f ef       	ldi	r24, 0xFF	; 255
    16da:	df 91       	pop	r29
    16dc:	cf 91       	pop	r28
    16de:	0f 91       	pop	r16
    16e0:	ff 90       	pop	r15
    16e2:	ef 90       	pop	r14
    16e4:	df 90       	pop	r13
    16e6:	cf 90       	pop	r12
    16e8:	bf 90       	pop	r11
    16ea:	af 90       	pop	r10
    16ec:	9f 90       	pop	r9
    16ee:	8f 90       	pop	r8
    16f0:	7f 90       	pop	r7
    16f2:	6f 90       	pop	r6
    16f4:	5f 90       	pop	r5
    16f6:	4f 90       	pop	r4
    16f8:	3f 90       	pop	r3
    16fa:	2f 90       	pop	r2
    16fc:	08 95       	ret

000016fe <vTaskStartScheduler>:
    16fe:	ef 92       	push	r14
    1700:	ff 92       	push	r15
    1702:	0f 93       	push	r16
    1704:	0f 2e       	mov	r0, r31
    1706:	f5 ef       	ldi	r31, 0xF5	; 245
    1708:	ef 2e       	mov	r14, r31
    170a:	f0 e1       	ldi	r31, 0x10	; 16
    170c:	ff 2e       	mov	r15, r31
    170e:	f0 2d       	mov	r31, r0
    1710:	00 e0       	ldi	r16, 0x00	; 0
    1712:	20 e0       	ldi	r18, 0x00	; 0
    1714:	30 e0       	ldi	r19, 0x00	; 0
    1716:	40 ec       	ldi	r20, 0xC0	; 192
    1718:	50 e0       	ldi	r21, 0x00	; 0
    171a:	6f ef       	ldi	r22, 0xFF	; 255
    171c:	72 e0       	ldi	r23, 0x02	; 2
    171e:	8c e7       	ldi	r24, 0x7C	; 124
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	a2 df       	rcall	.-188    	; 0x1668 <xTaskCreate>
    1724:	81 30       	cpi	r24, 0x01	; 1
    1726:	09 f4       	brne	.+2      	; 0x172a <vTaskStartScheduler+0x2c>
    1728:	ba d6       	rcall	.+3444   	; 0x249e <xTimerCreateTimerTask>
    172a:	81 30       	cpi	r24, 0x01	; 1
    172c:	f9 f4       	brne	.+62     	; 0x176c <vTaskStartScheduler+0x6e>
    172e:	f8 94       	cli
    1730:	8f ef       	ldi	r24, 0xFF	; 255
    1732:	9f ef       	ldi	r25, 0xFF	; 255
    1734:	dc 01       	movw	r26, r24
    1736:	80 93 f7 10 	sts	0x10F7, r24	; 0x8010f7 <xNextTaskUnblockTime>
    173a:	90 93 f8 10 	sts	0x10F8, r25	; 0x8010f8 <xNextTaskUnblockTime+0x1>
    173e:	a0 93 f9 10 	sts	0x10F9, r26	; 0x8010f9 <xNextTaskUnblockTime+0x2>
    1742:	b0 93 fa 10 	sts	0x10FA, r27	; 0x8010fa <xNextTaskUnblockTime+0x3>
    1746:	81 e0       	ldi	r24, 0x01	; 1
    1748:	80 93 02 11 	sts	0x1102, r24	; 0x801102 <xSchedulerRunning>
    174c:	10 92 04 11 	sts	0x1104, r1	; 0x801104 <xTickCount>
    1750:	10 92 05 11 	sts	0x1105, r1	; 0x801105 <xTickCount+0x1>
    1754:	10 92 06 11 	sts	0x1106, r1	; 0x801106 <xTickCount+0x2>
    1758:	10 92 07 11 	sts	0x1107, r1	; 0x801107 <xTickCount+0x3>
    175c:	e0 91 b3 11 	lds	r30, 0x11B3	; 0x8011b3 <pxCurrentTCB>
    1760:	f0 91 b4 11 	lds	r31, 0x11B4	; 0x8011b4 <pxCurrentTCB+0x1>
    1764:	87 a5       	ldd	r24, Z+47	; 0x2f
    1766:	0e 94 92 02 	call	0x524	; 0x524 <task_switch_in>
    176a:	f3 d8       	rcall	.-3610   	; 0x952 <xPortStartScheduler>
    176c:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <uxTopUsedPriority>
    1770:	0f 91       	pop	r16
    1772:	ff 90       	pop	r15
    1774:	ef 90       	pop	r14
    1776:	08 95       	ret

00001778 <vTaskSuspendAll>:
    1778:	80 91 f4 10 	lds	r24, 0x10F4	; 0x8010f4 <uxSchedulerSuspended>
    177c:	8f 5f       	subi	r24, 0xFF	; 255
    177e:	80 93 f4 10 	sts	0x10F4, r24	; 0x8010f4 <uxSchedulerSuspended>
    1782:	08 95       	ret

00001784 <xTaskGetTickCount>:
    1784:	0f b6       	in	r0, 0x3f	; 63
    1786:	f8 94       	cli
    1788:	0f 92       	push	r0
    178a:	60 91 04 11 	lds	r22, 0x1104	; 0x801104 <xTickCount>
    178e:	70 91 05 11 	lds	r23, 0x1105	; 0x801105 <xTickCount+0x1>
    1792:	80 91 06 11 	lds	r24, 0x1106	; 0x801106 <xTickCount+0x2>
    1796:	90 91 07 11 	lds	r25, 0x1107	; 0x801107 <xTickCount+0x3>
    179a:	0f 90       	pop	r0
    179c:	0f be       	out	0x3f, r0	; 63
    179e:	08 95       	ret

000017a0 <xTaskIncrementTick>:
    17a0:	cf 92       	push	r12
    17a2:	df 92       	push	r13
    17a4:	ef 92       	push	r14
    17a6:	ff 92       	push	r15
    17a8:	cf 93       	push	r28
    17aa:	df 93       	push	r29
    17ac:	80 91 f4 10 	lds	r24, 0x10F4	; 0x8010f4 <uxSchedulerSuspended>
    17b0:	81 11       	cpse	r24, r1
    17b2:	05 c1       	rjmp	.+522    	; 0x19be <xTaskIncrementTick+0x21e>
    17b4:	c0 90 04 11 	lds	r12, 0x1104	; 0x801104 <xTickCount>
    17b8:	d0 90 05 11 	lds	r13, 0x1105	; 0x801105 <xTickCount+0x1>
    17bc:	e0 90 06 11 	lds	r14, 0x1106	; 0x801106 <xTickCount+0x2>
    17c0:	f0 90 07 11 	lds	r15, 0x1107	; 0x801107 <xTickCount+0x3>
    17c4:	8f ef       	ldi	r24, 0xFF	; 255
    17c6:	c8 1a       	sub	r12, r24
    17c8:	d8 0a       	sbc	r13, r24
    17ca:	e8 0a       	sbc	r14, r24
    17cc:	f8 0a       	sbc	r15, r24
    17ce:	c0 92 04 11 	sts	0x1104, r12	; 0x801104 <xTickCount>
    17d2:	d0 92 05 11 	sts	0x1105, r13	; 0x801105 <xTickCount+0x1>
    17d6:	e0 92 06 11 	sts	0x1106, r14	; 0x801106 <xTickCount+0x2>
    17da:	f0 92 07 11 	sts	0x1107, r15	; 0x801107 <xTickCount+0x3>
    17de:	c1 14       	cp	r12, r1
    17e0:	d1 04       	cpc	r13, r1
    17e2:	e1 04       	cpc	r14, r1
    17e4:	f1 04       	cpc	r15, r1
    17e6:	b1 f4       	brne	.+44     	; 0x1814 <xTaskIncrementTick+0x74>
    17e8:	80 91 2d 11 	lds	r24, 0x112D	; 0x80112d <pxDelayedTaskList>
    17ec:	90 91 2e 11 	lds	r25, 0x112E	; 0x80112e <pxDelayedTaskList+0x1>
    17f0:	20 91 2b 11 	lds	r18, 0x112B	; 0x80112b <pxOverflowDelayedTaskList>
    17f4:	30 91 2c 11 	lds	r19, 0x112C	; 0x80112c <pxOverflowDelayedTaskList+0x1>
    17f8:	30 93 2e 11 	sts	0x112E, r19	; 0x80112e <pxDelayedTaskList+0x1>
    17fc:	20 93 2d 11 	sts	0x112D, r18	; 0x80112d <pxDelayedTaskList>
    1800:	90 93 2c 11 	sts	0x112C, r25	; 0x80112c <pxOverflowDelayedTaskList+0x1>
    1804:	80 93 2b 11 	sts	0x112B, r24	; 0x80112b <pxOverflowDelayedTaskList>
    1808:	80 91 fc 10 	lds	r24, 0x10FC	; 0x8010fc <xNumOfOverflows>
    180c:	8f 5f       	subi	r24, 0xFF	; 255
    180e:	80 93 fc 10 	sts	0x10FC, r24	; 0x8010fc <xNumOfOverflows>
    1812:	20 dd       	rcall	.-1472   	; 0x1254 <prvResetNextTaskUnblockTime>
    1814:	80 91 f7 10 	lds	r24, 0x10F7	; 0x8010f7 <xNextTaskUnblockTime>
    1818:	90 91 f8 10 	lds	r25, 0x10F8	; 0x8010f8 <xNextTaskUnblockTime+0x1>
    181c:	a0 91 f9 10 	lds	r26, 0x10F9	; 0x8010f9 <xNextTaskUnblockTime+0x2>
    1820:	b0 91 fa 10 	lds	r27, 0x10FA	; 0x8010fa <xNextTaskUnblockTime+0x3>
    1824:	c8 16       	cp	r12, r24
    1826:	d9 06       	cpc	r13, r25
    1828:	ea 06       	cpc	r14, r26
    182a:	fb 06       	cpc	r15, r27
    182c:	20 f4       	brcc	.+8      	; 0x1836 <xTaskIncrementTick+0x96>
    182e:	80 e0       	ldi	r24, 0x00	; 0
    1830:	b2 c0       	rjmp	.+356    	; 0x1996 <xTaskIncrementTick+0x1f6>
    1832:	81 e0       	ldi	r24, 0x01	; 1
    1834:	01 c0       	rjmp	.+2      	; 0x1838 <xTaskIncrementTick+0x98>
    1836:	80 e0       	ldi	r24, 0x00	; 0
    1838:	e0 91 2d 11 	lds	r30, 0x112D	; 0x80112d <pxDelayedTaskList>
    183c:	f0 91 2e 11 	lds	r31, 0x112E	; 0x80112e <pxDelayedTaskList+0x1>
    1840:	90 81       	ld	r25, Z
    1842:	91 11       	cpse	r25, r1
    1844:	0c c0       	rjmp	.+24     	; 0x185e <xTaskIncrementTick+0xbe>
    1846:	4f ef       	ldi	r20, 0xFF	; 255
    1848:	5f ef       	ldi	r21, 0xFF	; 255
    184a:	ba 01       	movw	r22, r20
    184c:	40 93 f7 10 	sts	0x10F7, r20	; 0x8010f7 <xNextTaskUnblockTime>
    1850:	50 93 f8 10 	sts	0x10F8, r21	; 0x8010f8 <xNextTaskUnblockTime+0x1>
    1854:	60 93 f9 10 	sts	0x10F9, r22	; 0x8010f9 <xNextTaskUnblockTime+0x2>
    1858:	70 93 fa 10 	sts	0x10FA, r23	; 0x8010fa <xNextTaskUnblockTime+0x3>
    185c:	9c c0       	rjmp	.+312    	; 0x1996 <xTaskIncrementTick+0x1f6>
    185e:	e0 91 2d 11 	lds	r30, 0x112D	; 0x80112d <pxDelayedTaskList>
    1862:	f0 91 2e 11 	lds	r31, 0x112E	; 0x80112e <pxDelayedTaskList+0x1>
    1866:	07 80       	ldd	r0, Z+7	; 0x07
    1868:	f0 85       	ldd	r31, Z+8	; 0x08
    186a:	e0 2d       	mov	r30, r0
    186c:	00 84       	ldd	r0, Z+8	; 0x08
    186e:	f1 85       	ldd	r31, Z+9	; 0x09
    1870:	e0 2d       	mov	r30, r0
    1872:	42 81       	ldd	r20, Z+2	; 0x02
    1874:	53 81       	ldd	r21, Z+3	; 0x03
    1876:	64 81       	ldd	r22, Z+4	; 0x04
    1878:	75 81       	ldd	r23, Z+5	; 0x05
    187a:	c4 16       	cp	r12, r20
    187c:	d5 06       	cpc	r13, r21
    187e:	e6 06       	cpc	r14, r22
    1880:	f7 06       	cpc	r15, r23
    1882:	48 f4       	brcc	.+18     	; 0x1896 <xTaskIncrementTick+0xf6>
    1884:	40 93 f7 10 	sts	0x10F7, r20	; 0x8010f7 <xNextTaskUnblockTime>
    1888:	50 93 f8 10 	sts	0x10F8, r21	; 0x8010f8 <xNextTaskUnblockTime+0x1>
    188c:	60 93 f9 10 	sts	0x10F9, r22	; 0x8010f9 <xNextTaskUnblockTime+0x2>
    1890:	70 93 fa 10 	sts	0x10FA, r23	; 0x8010fa <xNextTaskUnblockTime+0x3>
    1894:	80 c0       	rjmp	.+256    	; 0x1996 <xTaskIncrementTick+0x1f6>
    1896:	a4 85       	ldd	r26, Z+12	; 0x0c
    1898:	b5 85       	ldd	r27, Z+13	; 0x0d
    189a:	c6 81       	ldd	r28, Z+6	; 0x06
    189c:	d7 81       	ldd	r29, Z+7	; 0x07
    189e:	20 85       	ldd	r18, Z+8	; 0x08
    18a0:	31 85       	ldd	r19, Z+9	; 0x09
    18a2:	3f 83       	std	Y+7, r19	; 0x07
    18a4:	2e 83       	std	Y+6, r18	; 0x06
    18a6:	c0 85       	ldd	r28, Z+8	; 0x08
    18a8:	d1 85       	ldd	r29, Z+9	; 0x09
    18aa:	26 81       	ldd	r18, Z+6	; 0x06
    18ac:	37 81       	ldd	r19, Z+7	; 0x07
    18ae:	3d 83       	std	Y+5, r19	; 0x05
    18b0:	2c 83       	std	Y+4, r18	; 0x04
    18b2:	11 96       	adiw	r26, 0x01	; 1
    18b4:	4d 91       	ld	r20, X+
    18b6:	5c 91       	ld	r21, X
    18b8:	12 97       	sbiw	r26, 0x02	; 2
    18ba:	9f 01       	movw	r18, r30
    18bc:	2e 5f       	subi	r18, 0xFE	; 254
    18be:	3f 4f       	sbci	r19, 0xFF	; 255
    18c0:	42 17       	cp	r20, r18
    18c2:	53 07       	cpc	r21, r19
    18c4:	31 f4       	brne	.+12     	; 0x18d2 <xTaskIncrementTick+0x132>
    18c6:	40 85       	ldd	r20, Z+8	; 0x08
    18c8:	51 85       	ldd	r21, Z+9	; 0x09
    18ca:	12 96       	adiw	r26, 0x02	; 2
    18cc:	5c 93       	st	X, r21
    18ce:	4e 93       	st	-X, r20
    18d0:	11 97       	sbiw	r26, 0x01	; 1
    18d2:	15 86       	std	Z+13, r1	; 0x0d
    18d4:	14 86       	std	Z+12, r1	; 0x0c
    18d6:	9c 91       	ld	r25, X
    18d8:	91 50       	subi	r25, 0x01	; 1
    18da:	9c 93       	st	X, r25
    18dc:	a0 8d       	ldd	r26, Z+24	; 0x18
    18de:	b1 8d       	ldd	r27, Z+25	; 0x19
    18e0:	10 97       	sbiw	r26, 0x00	; 0
    18e2:	09 f1       	breq	.+66     	; 0x1926 <xTaskIncrementTick+0x186>
    18e4:	c2 89       	ldd	r28, Z+18	; 0x12
    18e6:	d3 89       	ldd	r29, Z+19	; 0x13
    18e8:	44 89       	ldd	r20, Z+20	; 0x14
    18ea:	55 89       	ldd	r21, Z+21	; 0x15
    18ec:	5f 83       	std	Y+7, r21	; 0x07
    18ee:	4e 83       	std	Y+6, r20	; 0x06
    18f0:	c4 89       	ldd	r28, Z+20	; 0x14
    18f2:	d5 89       	ldd	r29, Z+21	; 0x15
    18f4:	42 89       	ldd	r20, Z+18	; 0x12
    18f6:	53 89       	ldd	r21, Z+19	; 0x13
    18f8:	5d 83       	std	Y+5, r21	; 0x05
    18fa:	4c 83       	std	Y+4, r20	; 0x04
    18fc:	11 96       	adiw	r26, 0x01	; 1
    18fe:	6d 91       	ld	r22, X+
    1900:	7c 91       	ld	r23, X
    1902:	12 97       	sbiw	r26, 0x02	; 2
    1904:	af 01       	movw	r20, r30
    1906:	42 5f       	subi	r20, 0xF2	; 242
    1908:	5f 4f       	sbci	r21, 0xFF	; 255
    190a:	64 17       	cp	r22, r20
    190c:	75 07       	cpc	r23, r21
    190e:	31 f4       	brne	.+12     	; 0x191c <xTaskIncrementTick+0x17c>
    1910:	44 89       	ldd	r20, Z+20	; 0x14
    1912:	55 89       	ldd	r21, Z+21	; 0x15
    1914:	12 96       	adiw	r26, 0x02	; 2
    1916:	5c 93       	st	X, r21
    1918:	4e 93       	st	-X, r20
    191a:	11 97       	sbiw	r26, 0x01	; 1
    191c:	11 8e       	std	Z+25, r1	; 0x19
    191e:	10 8e       	std	Z+24, r1	; 0x18
    1920:	9c 91       	ld	r25, X
    1922:	91 50       	subi	r25, 0x01	; 1
    1924:	9c 93       	st	X, r25
    1926:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1928:	90 91 03 11 	lds	r25, 0x1103	; 0x801103 <uxTopReadyPriority>
    192c:	9a 17       	cp	r25, r26
    192e:	10 f4       	brcc	.+4      	; 0x1934 <xTaskIncrementTick+0x194>
    1930:	a0 93 03 11 	sts	0x1103, r26	; 0x801103 <uxTopReadyPriority>
    1934:	9b e0       	ldi	r25, 0x0B	; 11
    1936:	9a 9f       	mul	r25, r26
    1938:	d0 01       	movw	r26, r0
    193a:	11 24       	eor	r1, r1
    193c:	ab 5b       	subi	r26, 0xBB	; 187
    193e:	be 4e       	sbci	r27, 0xEE	; 238
    1940:	11 96       	adiw	r26, 0x01	; 1
    1942:	0d 90       	ld	r0, X+
    1944:	bc 91       	ld	r27, X
    1946:	a0 2d       	mov	r26, r0
    1948:	b7 83       	std	Z+7, r27	; 0x07
    194a:	a6 83       	std	Z+6, r26	; 0x06
    194c:	16 96       	adiw	r26, 0x06	; 6
    194e:	4d 91       	ld	r20, X+
    1950:	5c 91       	ld	r21, X
    1952:	17 97       	sbiw	r26, 0x07	; 7
    1954:	51 87       	std	Z+9, r21	; 0x09
    1956:	40 87       	std	Z+8, r20	; 0x08
    1958:	16 96       	adiw	r26, 0x06	; 6
    195a:	cd 91       	ld	r28, X+
    195c:	dc 91       	ld	r29, X
    195e:	17 97       	sbiw	r26, 0x07	; 7
    1960:	3d 83       	std	Y+5, r19	; 0x05
    1962:	2c 83       	std	Y+4, r18	; 0x04
    1964:	17 96       	adiw	r26, 0x07	; 7
    1966:	3c 93       	st	X, r19
    1968:	2e 93       	st	-X, r18
    196a:	16 97       	sbiw	r26, 0x06	; 6
    196c:	a2 8d       	ldd	r26, Z+26	; 0x1a
    196e:	9a 9f       	mul	r25, r26
    1970:	d0 01       	movw	r26, r0
    1972:	11 24       	eor	r1, r1
    1974:	ab 5b       	subi	r26, 0xBB	; 187
    1976:	be 4e       	sbci	r27, 0xEE	; 238
    1978:	b5 87       	std	Z+13, r27	; 0x0d
    197a:	a4 87       	std	Z+12, r26	; 0x0c
    197c:	9c 91       	ld	r25, X
    197e:	9f 5f       	subi	r25, 0xFF	; 255
    1980:	9c 93       	st	X, r25
    1982:	22 8d       	ldd	r18, Z+26	; 0x1a
    1984:	e0 91 b3 11 	lds	r30, 0x11B3	; 0x8011b3 <pxCurrentTCB>
    1988:	f0 91 b4 11 	lds	r31, 0x11B4	; 0x8011b4 <pxCurrentTCB+0x1>
    198c:	92 8d       	ldd	r25, Z+26	; 0x1a
    198e:	29 17       	cp	r18, r25
    1990:	08 f0       	brcs	.+2      	; 0x1994 <xTaskIncrementTick+0x1f4>
    1992:	4f cf       	rjmp	.-354    	; 0x1832 <xTaskIncrementTick+0x92>
    1994:	51 cf       	rjmp	.-350    	; 0x1838 <xTaskIncrementTick+0x98>
    1996:	e0 91 b3 11 	lds	r30, 0x11B3	; 0x8011b3 <pxCurrentTCB>
    199a:	f0 91 b4 11 	lds	r31, 0x11B4	; 0x8011b4 <pxCurrentTCB+0x1>
    199e:	e2 8d       	ldd	r30, Z+26	; 0x1a
    19a0:	9b e0       	ldi	r25, 0x0B	; 11
    19a2:	e9 9f       	mul	r30, r25
    19a4:	f0 01       	movw	r30, r0
    19a6:	11 24       	eor	r1, r1
    19a8:	eb 5b       	subi	r30, 0xBB	; 187
    19aa:	fe 4e       	sbci	r31, 0xEE	; 238
    19ac:	90 81       	ld	r25, Z
    19ae:	92 30       	cpi	r25, 0x02	; 2
    19b0:	08 f0       	brcs	.+2      	; 0x19b4 <xTaskIncrementTick+0x214>
    19b2:	81 e0       	ldi	r24, 0x01	; 1
    19b4:	90 91 fd 10 	lds	r25, 0x10FD	; 0x8010fd <xYieldPending>
    19b8:	91 11       	cpse	r25, r1
    19ba:	16 c0       	rjmp	.+44     	; 0x19e8 <xTaskIncrementTick+0x248>
    19bc:	16 c0       	rjmp	.+44     	; 0x19ea <xTaskIncrementTick+0x24a>
    19be:	80 91 fe 10 	lds	r24, 0x10FE	; 0x8010fe <xPendedTicks>
    19c2:	90 91 ff 10 	lds	r25, 0x10FF	; 0x8010ff <xPendedTicks+0x1>
    19c6:	a0 91 00 11 	lds	r26, 0x1100	; 0x801100 <xPendedTicks+0x2>
    19ca:	b0 91 01 11 	lds	r27, 0x1101	; 0x801101 <xPendedTicks+0x3>
    19ce:	01 96       	adiw	r24, 0x01	; 1
    19d0:	a1 1d       	adc	r26, r1
    19d2:	b1 1d       	adc	r27, r1
    19d4:	80 93 fe 10 	sts	0x10FE, r24	; 0x8010fe <xPendedTicks>
    19d8:	90 93 ff 10 	sts	0x10FF, r25	; 0x8010ff <xPendedTicks+0x1>
    19dc:	a0 93 00 11 	sts	0x1100, r26	; 0x801100 <xPendedTicks+0x2>
    19e0:	b0 93 01 11 	sts	0x1101, r27	; 0x801101 <xPendedTicks+0x3>
    19e4:	80 e0       	ldi	r24, 0x00	; 0
    19e6:	01 c0       	rjmp	.+2      	; 0x19ea <xTaskIncrementTick+0x24a>
    19e8:	81 e0       	ldi	r24, 0x01	; 1
    19ea:	df 91       	pop	r29
    19ec:	cf 91       	pop	r28
    19ee:	ff 90       	pop	r15
    19f0:	ef 90       	pop	r14
    19f2:	df 90       	pop	r13
    19f4:	cf 90       	pop	r12
    19f6:	08 95       	ret

000019f8 <xTaskResumeAll>:
    19f8:	cf 92       	push	r12
    19fa:	df 92       	push	r13
    19fc:	ef 92       	push	r14
    19fe:	ff 92       	push	r15
    1a00:	cf 93       	push	r28
    1a02:	df 93       	push	r29
    1a04:	0f b6       	in	r0, 0x3f	; 63
    1a06:	f8 94       	cli
    1a08:	0f 92       	push	r0
    1a0a:	80 91 f4 10 	lds	r24, 0x10F4	; 0x8010f4 <uxSchedulerSuspended>
    1a0e:	81 50       	subi	r24, 0x01	; 1
    1a10:	80 93 f4 10 	sts	0x10F4, r24	; 0x8010f4 <uxSchedulerSuspended>
    1a14:	80 91 f4 10 	lds	r24, 0x10F4	; 0x8010f4 <uxSchedulerSuspended>
    1a18:	81 11       	cpse	r24, r1
    1a1a:	be c0       	rjmp	.+380    	; 0x1b98 <xTaskResumeAll+0x1a0>
    1a1c:	80 91 08 11 	lds	r24, 0x1108	; 0x801108 <uxCurrentNumberOfTasks>
    1a20:	81 11       	cpse	r24, r1
    1a22:	88 c0       	rjmp	.+272    	; 0x1b34 <xTaskResumeAll+0x13c>
    1a24:	bc c0       	rjmp	.+376    	; 0x1b9e <xTaskResumeAll+0x1a6>
    1a26:	e0 91 27 11 	lds	r30, 0x1127	; 0x801127 <xPendingReadyList+0x7>
    1a2a:	f0 91 28 11 	lds	r31, 0x1128	; 0x801128 <xPendingReadyList+0x8>
    1a2e:	00 84       	ldd	r0, Z+8	; 0x08
    1a30:	f1 85       	ldd	r31, Z+9	; 0x09
    1a32:	e0 2d       	mov	r30, r0
    1a34:	a0 8d       	ldd	r26, Z+24	; 0x18
    1a36:	b1 8d       	ldd	r27, Z+25	; 0x19
    1a38:	c2 89       	ldd	r28, Z+18	; 0x12
    1a3a:	d3 89       	ldd	r29, Z+19	; 0x13
    1a3c:	84 89       	ldd	r24, Z+20	; 0x14
    1a3e:	95 89       	ldd	r25, Z+21	; 0x15
    1a40:	9f 83       	std	Y+7, r25	; 0x07
    1a42:	8e 83       	std	Y+6, r24	; 0x06
    1a44:	c4 89       	ldd	r28, Z+20	; 0x14
    1a46:	d5 89       	ldd	r29, Z+21	; 0x15
    1a48:	82 89       	ldd	r24, Z+18	; 0x12
    1a4a:	93 89       	ldd	r25, Z+19	; 0x13
    1a4c:	9d 83       	std	Y+5, r25	; 0x05
    1a4e:	8c 83       	std	Y+4, r24	; 0x04
    1a50:	11 96       	adiw	r26, 0x01	; 1
    1a52:	2d 91       	ld	r18, X+
    1a54:	3c 91       	ld	r19, X
    1a56:	12 97       	sbiw	r26, 0x02	; 2
    1a58:	cf 01       	movw	r24, r30
    1a5a:	0e 96       	adiw	r24, 0x0e	; 14
    1a5c:	28 17       	cp	r18, r24
    1a5e:	39 07       	cpc	r19, r25
    1a60:	31 f4       	brne	.+12     	; 0x1a6e <xTaskResumeAll+0x76>
    1a62:	84 89       	ldd	r24, Z+20	; 0x14
    1a64:	95 89       	ldd	r25, Z+21	; 0x15
    1a66:	12 96       	adiw	r26, 0x02	; 2
    1a68:	9c 93       	st	X, r25
    1a6a:	8e 93       	st	-X, r24
    1a6c:	11 97       	sbiw	r26, 0x01	; 1
    1a6e:	11 8e       	std	Z+25, r1	; 0x19
    1a70:	10 8e       	std	Z+24, r1	; 0x18
    1a72:	8c 91       	ld	r24, X
    1a74:	81 50       	subi	r24, 0x01	; 1
    1a76:	8c 93       	st	X, r24
    1a78:	a4 85       	ldd	r26, Z+12	; 0x0c
    1a7a:	b5 85       	ldd	r27, Z+13	; 0x0d
    1a7c:	c6 81       	ldd	r28, Z+6	; 0x06
    1a7e:	d7 81       	ldd	r29, Z+7	; 0x07
    1a80:	80 85       	ldd	r24, Z+8	; 0x08
    1a82:	91 85       	ldd	r25, Z+9	; 0x09
    1a84:	9f 83       	std	Y+7, r25	; 0x07
    1a86:	8e 83       	std	Y+6, r24	; 0x06
    1a88:	c0 85       	ldd	r28, Z+8	; 0x08
    1a8a:	d1 85       	ldd	r29, Z+9	; 0x09
    1a8c:	86 81       	ldd	r24, Z+6	; 0x06
    1a8e:	97 81       	ldd	r25, Z+7	; 0x07
    1a90:	9d 83       	std	Y+5, r25	; 0x05
    1a92:	8c 83       	std	Y+4, r24	; 0x04
    1a94:	11 96       	adiw	r26, 0x01	; 1
    1a96:	8d 91       	ld	r24, X+
    1a98:	9c 91       	ld	r25, X
    1a9a:	12 97       	sbiw	r26, 0x02	; 2
    1a9c:	9f 01       	movw	r18, r30
    1a9e:	2e 5f       	subi	r18, 0xFE	; 254
    1aa0:	3f 4f       	sbci	r19, 0xFF	; 255
    1aa2:	82 17       	cp	r24, r18
    1aa4:	93 07       	cpc	r25, r19
    1aa6:	31 f4       	brne	.+12     	; 0x1ab4 <xTaskResumeAll+0xbc>
    1aa8:	80 85       	ldd	r24, Z+8	; 0x08
    1aaa:	91 85       	ldd	r25, Z+9	; 0x09
    1aac:	12 96       	adiw	r26, 0x02	; 2
    1aae:	9c 93       	st	X, r25
    1ab0:	8e 93       	st	-X, r24
    1ab2:	11 97       	sbiw	r26, 0x01	; 1
    1ab4:	15 86       	std	Z+13, r1	; 0x0d
    1ab6:	14 86       	std	Z+12, r1	; 0x0c
    1ab8:	8c 91       	ld	r24, X
    1aba:	81 50       	subi	r24, 0x01	; 1
    1abc:	8c 93       	st	X, r24
    1abe:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1ac0:	80 91 03 11 	lds	r24, 0x1103	; 0x801103 <uxTopReadyPriority>
    1ac4:	8a 17       	cp	r24, r26
    1ac6:	10 f4       	brcc	.+4      	; 0x1acc <xTaskResumeAll+0xd4>
    1ac8:	a0 93 03 11 	sts	0x1103, r26	; 0x801103 <uxTopReadyPriority>
    1acc:	8b e0       	ldi	r24, 0x0B	; 11
    1ace:	8a 9f       	mul	r24, r26
    1ad0:	d0 01       	movw	r26, r0
    1ad2:	11 24       	eor	r1, r1
    1ad4:	ab 5b       	subi	r26, 0xBB	; 187
    1ad6:	be 4e       	sbci	r27, 0xEE	; 238
    1ad8:	11 96       	adiw	r26, 0x01	; 1
    1ada:	0d 90       	ld	r0, X+
    1adc:	bc 91       	ld	r27, X
    1ade:	a0 2d       	mov	r26, r0
    1ae0:	b7 83       	std	Z+7, r27	; 0x07
    1ae2:	a6 83       	std	Z+6, r26	; 0x06
    1ae4:	16 96       	adiw	r26, 0x06	; 6
    1ae6:	4d 91       	ld	r20, X+
    1ae8:	5c 91       	ld	r21, X
    1aea:	17 97       	sbiw	r26, 0x07	; 7
    1aec:	51 87       	std	Z+9, r21	; 0x09
    1aee:	40 87       	std	Z+8, r20	; 0x08
    1af0:	16 96       	adiw	r26, 0x06	; 6
    1af2:	cd 91       	ld	r28, X+
    1af4:	dc 91       	ld	r29, X
    1af6:	17 97       	sbiw	r26, 0x07	; 7
    1af8:	3d 83       	std	Y+5, r19	; 0x05
    1afa:	2c 83       	std	Y+4, r18	; 0x04
    1afc:	17 96       	adiw	r26, 0x07	; 7
    1afe:	3c 93       	st	X, r19
    1b00:	2e 93       	st	-X, r18
    1b02:	16 97       	sbiw	r26, 0x06	; 6
    1b04:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1b06:	8a 9f       	mul	r24, r26
    1b08:	d0 01       	movw	r26, r0
    1b0a:	11 24       	eor	r1, r1
    1b0c:	ab 5b       	subi	r26, 0xBB	; 187
    1b0e:	be 4e       	sbci	r27, 0xEE	; 238
    1b10:	b5 87       	std	Z+13, r27	; 0x0d
    1b12:	a4 87       	std	Z+12, r26	; 0x0c
    1b14:	8c 91       	ld	r24, X
    1b16:	8f 5f       	subi	r24, 0xFF	; 255
    1b18:	8c 93       	st	X, r24
    1b1a:	92 8d       	ldd	r25, Z+26	; 0x1a
    1b1c:	a0 91 b3 11 	lds	r26, 0x11B3	; 0x8011b3 <pxCurrentTCB>
    1b20:	b0 91 b4 11 	lds	r27, 0x11B4	; 0x8011b4 <pxCurrentTCB+0x1>
    1b24:	5a 96       	adiw	r26, 0x1a	; 26
    1b26:	8c 91       	ld	r24, X
    1b28:	98 17       	cp	r25, r24
    1b2a:	30 f0       	brcs	.+12     	; 0x1b38 <xTaskResumeAll+0x140>
    1b2c:	81 e0       	ldi	r24, 0x01	; 1
    1b2e:	80 93 fd 10 	sts	0x10FD, r24	; 0x8010fd <xYieldPending>
    1b32:	02 c0       	rjmp	.+4      	; 0x1b38 <xTaskResumeAll+0x140>
    1b34:	e0 e0       	ldi	r30, 0x00	; 0
    1b36:	f0 e0       	ldi	r31, 0x00	; 0
    1b38:	80 91 20 11 	lds	r24, 0x1120	; 0x801120 <xPendingReadyList>
    1b3c:	81 11       	cpse	r24, r1
    1b3e:	73 cf       	rjmp	.-282    	; 0x1a26 <xTaskResumeAll+0x2e>
    1b40:	ef 2b       	or	r30, r31
    1b42:	09 f0       	breq	.+2      	; 0x1b46 <xTaskResumeAll+0x14e>
    1b44:	87 db       	rcall	.-2290   	; 0x1254 <prvResetNextTaskUnblockTime>
    1b46:	c0 90 fe 10 	lds	r12, 0x10FE	; 0x8010fe <xPendedTicks>
    1b4a:	d0 90 ff 10 	lds	r13, 0x10FF	; 0x8010ff <xPendedTicks+0x1>
    1b4e:	e0 90 00 11 	lds	r14, 0x1100	; 0x801100 <xPendedTicks+0x2>
    1b52:	f0 90 01 11 	lds	r15, 0x1101	; 0x801101 <xPendedTicks+0x3>
    1b56:	c1 14       	cp	r12, r1
    1b58:	d1 04       	cpc	r13, r1
    1b5a:	e1 04       	cpc	r14, r1
    1b5c:	f1 04       	cpc	r15, r1
    1b5e:	a1 f0       	breq	.+40     	; 0x1b88 <xTaskResumeAll+0x190>
    1b60:	1f de       	rcall	.-962    	; 0x17a0 <xTaskIncrementTick>
    1b62:	88 23       	and	r24, r24
    1b64:	19 f0       	breq	.+6      	; 0x1b6c <xTaskResumeAll+0x174>
    1b66:	81 e0       	ldi	r24, 0x01	; 1
    1b68:	80 93 fd 10 	sts	0x10FD, r24	; 0x8010fd <xYieldPending>
    1b6c:	81 e0       	ldi	r24, 0x01	; 1
    1b6e:	c8 1a       	sub	r12, r24
    1b70:	d1 08       	sbc	r13, r1
    1b72:	e1 08       	sbc	r14, r1
    1b74:	f1 08       	sbc	r15, r1
    1b76:	a1 f7       	brne	.-24     	; 0x1b60 <xTaskResumeAll+0x168>
    1b78:	10 92 fe 10 	sts	0x10FE, r1	; 0x8010fe <xPendedTicks>
    1b7c:	10 92 ff 10 	sts	0x10FF, r1	; 0x8010ff <xPendedTicks+0x1>
    1b80:	10 92 00 11 	sts	0x1100, r1	; 0x801100 <xPendedTicks+0x2>
    1b84:	10 92 01 11 	sts	0x1101, r1	; 0x801101 <xPendedTicks+0x3>
    1b88:	80 91 fd 10 	lds	r24, 0x10FD	; 0x8010fd <xYieldPending>
    1b8c:	88 23       	and	r24, r24
    1b8e:	31 f0       	breq	.+12     	; 0x1b9c <xTaskResumeAll+0x1a4>
    1b90:	0e 94 db 04 	call	0x9b6	; 0x9b6 <vPortYield>
    1b94:	81 e0       	ldi	r24, 0x01	; 1
    1b96:	03 c0       	rjmp	.+6      	; 0x1b9e <xTaskResumeAll+0x1a6>
    1b98:	80 e0       	ldi	r24, 0x00	; 0
    1b9a:	01 c0       	rjmp	.+2      	; 0x1b9e <xTaskResumeAll+0x1a6>
    1b9c:	80 e0       	ldi	r24, 0x00	; 0
    1b9e:	0f 90       	pop	r0
    1ba0:	0f be       	out	0x3f, r0	; 63
    1ba2:	df 91       	pop	r29
    1ba4:	cf 91       	pop	r28
    1ba6:	ff 90       	pop	r15
    1ba8:	ef 90       	pop	r14
    1baa:	df 90       	pop	r13
    1bac:	cf 90       	pop	r12
    1bae:	08 95       	ret

00001bb0 <xTaskDelayUntil>:
    1bb0:	8f 92       	push	r8
    1bb2:	9f 92       	push	r9
    1bb4:	af 92       	push	r10
    1bb6:	bf 92       	push	r11
    1bb8:	cf 92       	push	r12
    1bba:	df 92       	push	r13
    1bbc:	ef 92       	push	r14
    1bbe:	ff 92       	push	r15
    1bc0:	1f 93       	push	r17
    1bc2:	cf 93       	push	r28
    1bc4:	df 93       	push	r29
    1bc6:	ec 01       	movw	r28, r24
    1bc8:	6a 01       	movw	r12, r20
    1bca:	7b 01       	movw	r14, r22
    1bcc:	d5 dd       	rcall	.-1110   	; 0x1778 <vTaskSuspendAll>
    1bce:	80 90 04 11 	lds	r8, 0x1104	; 0x801104 <xTickCount>
    1bd2:	90 90 05 11 	lds	r9, 0x1105	; 0x801105 <xTickCount+0x1>
    1bd6:	a0 90 06 11 	lds	r10, 0x1106	; 0x801106 <xTickCount+0x2>
    1bda:	b0 90 07 11 	lds	r11, 0x1107	; 0x801107 <xTickCount+0x3>
    1bde:	88 81       	ld	r24, Y
    1be0:	99 81       	ldd	r25, Y+1	; 0x01
    1be2:	aa 81       	ldd	r26, Y+2	; 0x02
    1be4:	bb 81       	ldd	r27, Y+3	; 0x03
    1be6:	ac 01       	movw	r20, r24
    1be8:	bd 01       	movw	r22, r26
    1bea:	4c 0d       	add	r20, r12
    1bec:	5d 1d       	adc	r21, r13
    1bee:	6e 1d       	adc	r22, r14
    1bf0:	7f 1d       	adc	r23, r15
    1bf2:	88 16       	cp	r8, r24
    1bf4:	99 06       	cpc	r9, r25
    1bf6:	aa 06       	cpc	r10, r26
    1bf8:	bb 06       	cpc	r11, r27
    1bfa:	60 f4       	brcc	.+24     	; 0x1c14 <xTaskDelayUntil+0x64>
    1bfc:	48 17       	cp	r20, r24
    1bfe:	59 07       	cpc	r21, r25
    1c00:	6a 07       	cpc	r22, r26
    1c02:	7b 07       	cpc	r23, r27
    1c04:	98 f4       	brcc	.+38     	; 0x1c2c <xTaskDelayUntil+0x7c>
    1c06:	84 16       	cp	r8, r20
    1c08:	95 06       	cpc	r9, r21
    1c0a:	a6 06       	cpc	r10, r22
    1c0c:	b7 06       	cpc	r11, r23
    1c0e:	80 f0       	brcs	.+32     	; 0x1c30 <xTaskDelayUntil+0x80>
    1c10:	10 e0       	ldi	r17, 0x00	; 0
    1c12:	13 c0       	rjmp	.+38     	; 0x1c3a <xTaskDelayUntil+0x8a>
    1c14:	48 17       	cp	r20, r24
    1c16:	59 07       	cpc	r21, r25
    1c18:	6a 07       	cpc	r22, r26
    1c1a:	7b 07       	cpc	r23, r27
    1c1c:	58 f0       	brcs	.+22     	; 0x1c34 <xTaskDelayUntil+0x84>
    1c1e:	84 16       	cp	r8, r20
    1c20:	95 06       	cpc	r9, r21
    1c22:	a6 06       	cpc	r10, r22
    1c24:	b7 06       	cpc	r11, r23
    1c26:	40 f0       	brcs	.+16     	; 0x1c38 <xTaskDelayUntil+0x88>
    1c28:	10 e0       	ldi	r17, 0x00	; 0
    1c2a:	07 c0       	rjmp	.+14     	; 0x1c3a <xTaskDelayUntil+0x8a>
    1c2c:	10 e0       	ldi	r17, 0x00	; 0
    1c2e:	05 c0       	rjmp	.+10     	; 0x1c3a <xTaskDelayUntil+0x8a>
    1c30:	11 e0       	ldi	r17, 0x01	; 1
    1c32:	03 c0       	rjmp	.+6      	; 0x1c3a <xTaskDelayUntil+0x8a>
    1c34:	11 e0       	ldi	r17, 0x01	; 1
    1c36:	01 c0       	rjmp	.+2      	; 0x1c3a <xTaskDelayUntil+0x8a>
    1c38:	11 e0       	ldi	r17, 0x01	; 1
    1c3a:	48 83       	st	Y, r20
    1c3c:	59 83       	std	Y+1, r21	; 0x01
    1c3e:	6a 83       	std	Y+2, r22	; 0x02
    1c40:	7b 83       	std	Y+3, r23	; 0x03
    1c42:	11 23       	and	r17, r17
    1c44:	41 f0       	breq	.+16     	; 0x1c56 <xTaskDelayUntil+0xa6>
    1c46:	cb 01       	movw	r24, r22
    1c48:	ba 01       	movw	r22, r20
    1c4a:	68 19       	sub	r22, r8
    1c4c:	79 09       	sbc	r23, r9
    1c4e:	8a 09       	sbc	r24, r10
    1c50:	9b 09       	sbc	r25, r11
    1c52:	40 e0       	ldi	r20, 0x00	; 0
    1c54:	6a dc       	rcall	.-1836   	; 0x152a <prvAddCurrentTaskToDelayedList>
    1c56:	d0 de       	rcall	.-608    	; 0x19f8 <xTaskResumeAll>
    1c58:	81 11       	cpse	r24, r1
    1c5a:	02 c0       	rjmp	.+4      	; 0x1c60 <xTaskDelayUntil+0xb0>
    1c5c:	0e 94 db 04 	call	0x9b6	; 0x9b6 <vPortYield>
    1c60:	81 2f       	mov	r24, r17
    1c62:	df 91       	pop	r29
    1c64:	cf 91       	pop	r28
    1c66:	1f 91       	pop	r17
    1c68:	ff 90       	pop	r15
    1c6a:	ef 90       	pop	r14
    1c6c:	df 90       	pop	r13
    1c6e:	cf 90       	pop	r12
    1c70:	bf 90       	pop	r11
    1c72:	af 90       	pop	r10
    1c74:	9f 90       	pop	r9
    1c76:	8f 90       	pop	r8
    1c78:	08 95       	ret

00001c7a <vTaskDelay>:
    1c7a:	cf 92       	push	r12
    1c7c:	df 92       	push	r13
    1c7e:	ef 92       	push	r14
    1c80:	ff 92       	push	r15
    1c82:	6b 01       	movw	r12, r22
    1c84:	7c 01       	movw	r14, r24
    1c86:	67 2b       	or	r22, r23
    1c88:	68 2b       	or	r22, r24
    1c8a:	69 2b       	or	r22, r25
    1c8c:	39 f0       	breq	.+14     	; 0x1c9c <vTaskDelay+0x22>
    1c8e:	74 dd       	rcall	.-1304   	; 0x1778 <vTaskSuspendAll>
    1c90:	40 e0       	ldi	r20, 0x00	; 0
    1c92:	c7 01       	movw	r24, r14
    1c94:	b6 01       	movw	r22, r12
    1c96:	49 dc       	rcall	.-1902   	; 0x152a <prvAddCurrentTaskToDelayedList>
    1c98:	af de       	rcall	.-674    	; 0x19f8 <xTaskResumeAll>
    1c9a:	01 c0       	rjmp	.+2      	; 0x1c9e <vTaskDelay+0x24>
    1c9c:	80 e0       	ldi	r24, 0x00	; 0
    1c9e:	81 11       	cpse	r24, r1
    1ca0:	02 c0       	rjmp	.+4      	; 0x1ca6 <vTaskDelay+0x2c>
    1ca2:	0e 94 db 04 	call	0x9b6	; 0x9b6 <vPortYield>
    1ca6:	ff 90       	pop	r15
    1ca8:	ef 90       	pop	r14
    1caa:	df 90       	pop	r13
    1cac:	cf 90       	pop	r12
    1cae:	08 95       	ret

00001cb0 <vTaskSetApplicationTaskTag>:
    1cb0:	00 97       	sbiw	r24, 0x00	; 0
    1cb2:	21 f4       	brne	.+8      	; 0x1cbc <vTaskSetApplicationTaskTag+0xc>
    1cb4:	80 91 b3 11 	lds	r24, 0x11B3	; 0x8011b3 <pxCurrentTCB>
    1cb8:	90 91 b4 11 	lds	r25, 0x11B4	; 0x8011b4 <pxCurrentTCB+0x1>
    1cbc:	0f b6       	in	r0, 0x3f	; 63
    1cbe:	f8 94       	cli
    1cc0:	0f 92       	push	r0
    1cc2:	fc 01       	movw	r30, r24
    1cc4:	70 ab       	std	Z+48, r23	; 0x30
    1cc6:	67 a7       	std	Z+47, r22	; 0x2f
    1cc8:	0f 90       	pop	r0
    1cca:	0f be       	out	0x3f, r0	; 63
    1ccc:	08 95       	ret

00001cce <vTaskSwitchContext>:
    1cce:	80 91 f4 10 	lds	r24, 0x10F4	; 0x8010f4 <uxSchedulerSuspended>
    1cd2:	88 23       	and	r24, r24
    1cd4:	21 f0       	breq	.+8      	; 0x1cde <vTaskSwitchContext+0x10>
    1cd6:	81 e0       	ldi	r24, 0x01	; 1
    1cd8:	80 93 fd 10 	sts	0x10FD, r24	; 0x8010fd <xYieldPending>
    1cdc:	08 95       	ret
    1cde:	10 92 fd 10 	sts	0x10FD, r1	; 0x8010fd <xYieldPending>
    1ce2:	e0 91 b3 11 	lds	r30, 0x11B3	; 0x8011b3 <pxCurrentTCB>
    1ce6:	f0 91 b4 11 	lds	r31, 0x11B4	; 0x8011b4 <pxCurrentTCB+0x1>
    1cea:	87 a5       	ldd	r24, Z+47	; 0x2f
    1cec:	0e 94 9c 02 	call	0x538	; 0x538 <task_switch_out>
    1cf0:	e0 91 b3 11 	lds	r30, 0x11B3	; 0x8011b3 <pxCurrentTCB>
    1cf4:	f0 91 b4 11 	lds	r31, 0x11B4	; 0x8011b4 <pxCurrentTCB+0x1>
    1cf8:	20 81       	ld	r18, Z
    1cfa:	31 81       	ldd	r19, Z+1	; 0x01
    1cfc:	e0 91 b3 11 	lds	r30, 0x11B3	; 0x8011b3 <pxCurrentTCB>
    1d00:	f0 91 b4 11 	lds	r31, 0x11B4	; 0x8011b4 <pxCurrentTCB+0x1>
    1d04:	83 8d       	ldd	r24, Z+27	; 0x1b
    1d06:	94 8d       	ldd	r25, Z+28	; 0x1c
    1d08:	82 17       	cp	r24, r18
    1d0a:	93 07       	cpc	r25, r19
    1d0c:	58 f0       	brcs	.+22     	; 0x1d24 <vTaskSwitchContext+0x56>
    1d0e:	60 91 b3 11 	lds	r22, 0x11B3	; 0x8011b3 <pxCurrentTCB>
    1d12:	70 91 b4 11 	lds	r23, 0x11B4	; 0x8011b4 <pxCurrentTCB+0x1>
    1d16:	63 5e       	subi	r22, 0xE3	; 227
    1d18:	7f 4f       	sbci	r23, 0xFF	; 255
    1d1a:	80 91 b3 11 	lds	r24, 0x11B3	; 0x8011b3 <pxCurrentTCB>
    1d1e:	90 91 b4 11 	lds	r25, 0x11B4	; 0x8011b4 <pxCurrentTCB+0x1>
    1d22:	45 d6       	rcall	.+3210   	; 0x29ae <vApplicationStackOverflowHook>
    1d24:	80 91 03 11 	lds	r24, 0x1103	; 0x801103 <uxTopReadyPriority>
    1d28:	01 c0       	rjmp	.+2      	; 0x1d2c <vTaskSwitchContext+0x5e>
    1d2a:	81 50       	subi	r24, 0x01	; 1
    1d2c:	28 2f       	mov	r18, r24
    1d2e:	30 e0       	ldi	r19, 0x00	; 0
    1d30:	9b e0       	ldi	r25, 0x0B	; 11
    1d32:	92 9f       	mul	r25, r18
    1d34:	f0 01       	movw	r30, r0
    1d36:	93 9f       	mul	r25, r19
    1d38:	f0 0d       	add	r31, r0
    1d3a:	11 24       	eor	r1, r1
    1d3c:	eb 5b       	subi	r30, 0xBB	; 187
    1d3e:	fe 4e       	sbci	r31, 0xEE	; 238
    1d40:	90 81       	ld	r25, Z
    1d42:	99 23       	and	r25, r25
    1d44:	91 f3       	breq	.-28     	; 0x1d2a <vTaskSwitchContext+0x5c>
    1d46:	9b e0       	ldi	r25, 0x0B	; 11
    1d48:	92 9f       	mul	r25, r18
    1d4a:	a0 01       	movw	r20, r0
    1d4c:	93 9f       	mul	r25, r19
    1d4e:	50 0d       	add	r21, r0
    1d50:	11 24       	eor	r1, r1
    1d52:	df 01       	movw	r26, r30
    1d54:	01 80       	ldd	r0, Z+1	; 0x01
    1d56:	f2 81       	ldd	r31, Z+2	; 0x02
    1d58:	e0 2d       	mov	r30, r0
    1d5a:	04 80       	ldd	r0, Z+4	; 0x04
    1d5c:	f5 81       	ldd	r31, Z+5	; 0x05
    1d5e:	e0 2d       	mov	r30, r0
    1d60:	12 96       	adiw	r26, 0x02	; 2
    1d62:	fc 93       	st	X, r31
    1d64:	ee 93       	st	-X, r30
    1d66:	11 97       	sbiw	r26, 0x01	; 1
    1d68:	48 5b       	subi	r20, 0xB8	; 184
    1d6a:	5e 4e       	sbci	r21, 0xEE	; 238
    1d6c:	e4 17       	cp	r30, r20
    1d6e:	f5 07       	cpc	r31, r21
    1d70:	29 f4       	brne	.+10     	; 0x1d7c <vTaskSwitchContext+0xae>
    1d72:	44 81       	ldd	r20, Z+4	; 0x04
    1d74:	55 81       	ldd	r21, Z+5	; 0x05
    1d76:	fd 01       	movw	r30, r26
    1d78:	52 83       	std	Z+2, r21	; 0x02
    1d7a:	41 83       	std	Z+1, r20	; 0x01
    1d7c:	9b e0       	ldi	r25, 0x0B	; 11
    1d7e:	92 9f       	mul	r25, r18
    1d80:	f0 01       	movw	r30, r0
    1d82:	93 9f       	mul	r25, r19
    1d84:	f0 0d       	add	r31, r0
    1d86:	11 24       	eor	r1, r1
    1d88:	eb 5b       	subi	r30, 0xBB	; 187
    1d8a:	fe 4e       	sbci	r31, 0xEE	; 238
    1d8c:	01 80       	ldd	r0, Z+1	; 0x01
    1d8e:	f2 81       	ldd	r31, Z+2	; 0x02
    1d90:	e0 2d       	mov	r30, r0
    1d92:	20 85       	ldd	r18, Z+8	; 0x08
    1d94:	31 85       	ldd	r19, Z+9	; 0x09
    1d96:	30 93 b4 11 	sts	0x11B4, r19	; 0x8011b4 <pxCurrentTCB+0x1>
    1d9a:	20 93 b3 11 	sts	0x11B3, r18	; 0x8011b3 <pxCurrentTCB>
    1d9e:	80 93 03 11 	sts	0x1103, r24	; 0x801103 <uxTopReadyPriority>
    1da2:	e0 91 b3 11 	lds	r30, 0x11B3	; 0x8011b3 <pxCurrentTCB>
    1da6:	f0 91 b4 11 	lds	r31, 0x11B4	; 0x8011b4 <pxCurrentTCB+0x1>
    1daa:	87 a5       	ldd	r24, Z+47	; 0x2f
    1dac:	0c 94 92 02 	jmp	0x524	; 0x524 <task_switch_in>
    1db0:	08 95       	ret

00001db2 <vTaskPlaceOnEventList>:
    1db2:	cf 92       	push	r12
    1db4:	df 92       	push	r13
    1db6:	ef 92       	push	r14
    1db8:	ff 92       	push	r15
    1dba:	6a 01       	movw	r12, r20
    1dbc:	7b 01       	movw	r14, r22
    1dbe:	60 91 b3 11 	lds	r22, 0x11B3	; 0x8011b3 <pxCurrentTCB>
    1dc2:	70 91 b4 11 	lds	r23, 0x11B4	; 0x8011b4 <pxCurrentTCB+0x1>
    1dc6:	62 5f       	subi	r22, 0xF2	; 242
    1dc8:	7f 4f       	sbci	r23, 0xFF	; 255
    1dca:	0e 94 22 04 	call	0x844	; 0x844 <vListInsert>
    1dce:	41 e0       	ldi	r20, 0x01	; 1
    1dd0:	c7 01       	movw	r24, r14
    1dd2:	b6 01       	movw	r22, r12
    1dd4:	aa db       	rcall	.-2220   	; 0x152a <prvAddCurrentTaskToDelayedList>
    1dd6:	ff 90       	pop	r15
    1dd8:	ef 90       	pop	r14
    1dda:	df 90       	pop	r13
    1ddc:	cf 90       	pop	r12
    1dde:	08 95       	ret

00001de0 <vTaskPlaceOnEventListRestricted>:
    1de0:	cf 93       	push	r28
    1de2:	df 93       	push	r29
    1de4:	fc 01       	movw	r30, r24
    1de6:	cb 01       	movw	r24, r22
    1de8:	ba 01       	movw	r22, r20
    1dea:	a1 81       	ldd	r26, Z+1	; 0x01
    1dec:	b2 81       	ldd	r27, Z+2	; 0x02
    1dee:	c0 91 b3 11 	lds	r28, 0x11B3	; 0x8011b3 <pxCurrentTCB>
    1df2:	d0 91 b4 11 	lds	r29, 0x11B4	; 0x8011b4 <pxCurrentTCB+0x1>
    1df6:	bb 8b       	std	Y+19, r27	; 0x13
    1df8:	aa 8b       	std	Y+18, r26	; 0x12
    1dfa:	c0 91 b3 11 	lds	r28, 0x11B3	; 0x8011b3 <pxCurrentTCB>
    1dfe:	d0 91 b4 11 	lds	r29, 0x11B4	; 0x8011b4 <pxCurrentTCB+0x1>
    1e02:	16 96       	adiw	r26, 0x06	; 6
    1e04:	4d 91       	ld	r20, X+
    1e06:	5c 91       	ld	r21, X
    1e08:	17 97       	sbiw	r26, 0x07	; 7
    1e0a:	5d 8b       	std	Y+21, r21	; 0x15
    1e0c:	4c 8b       	std	Y+20, r20	; 0x14
    1e0e:	16 96       	adiw	r26, 0x06	; 6
    1e10:	cd 91       	ld	r28, X+
    1e12:	dc 91       	ld	r29, X
    1e14:	17 97       	sbiw	r26, 0x07	; 7
    1e16:	40 91 b3 11 	lds	r20, 0x11B3	; 0x8011b3 <pxCurrentTCB>
    1e1a:	50 91 b4 11 	lds	r21, 0x11B4	; 0x8011b4 <pxCurrentTCB+0x1>
    1e1e:	42 5f       	subi	r20, 0xF2	; 242
    1e20:	5f 4f       	sbci	r21, 0xFF	; 255
    1e22:	5d 83       	std	Y+5, r21	; 0x05
    1e24:	4c 83       	std	Y+4, r20	; 0x04
    1e26:	40 91 b3 11 	lds	r20, 0x11B3	; 0x8011b3 <pxCurrentTCB>
    1e2a:	50 91 b4 11 	lds	r21, 0x11B4	; 0x8011b4 <pxCurrentTCB+0x1>
    1e2e:	42 5f       	subi	r20, 0xF2	; 242
    1e30:	5f 4f       	sbci	r21, 0xFF	; 255
    1e32:	17 96       	adiw	r26, 0x07	; 7
    1e34:	5c 93       	st	X, r21
    1e36:	4e 93       	st	-X, r20
    1e38:	16 97       	sbiw	r26, 0x06	; 6
    1e3a:	a0 91 b3 11 	lds	r26, 0x11B3	; 0x8011b3 <pxCurrentTCB>
    1e3e:	b0 91 b4 11 	lds	r27, 0x11B4	; 0x8011b4 <pxCurrentTCB+0x1>
    1e42:	59 96       	adiw	r26, 0x19	; 25
    1e44:	fc 93       	st	X, r31
    1e46:	ee 93       	st	-X, r30
    1e48:	58 97       	sbiw	r26, 0x18	; 24
    1e4a:	30 81       	ld	r19, Z
    1e4c:	3f 5f       	subi	r19, 0xFF	; 255
    1e4e:	30 83       	st	Z, r19
    1e50:	22 23       	and	r18, r18
    1e52:	19 f0       	breq	.+6      	; 0x1e5a <vTaskPlaceOnEventListRestricted+0x7a>
    1e54:	6f ef       	ldi	r22, 0xFF	; 255
    1e56:	7f ef       	ldi	r23, 0xFF	; 255
    1e58:	cb 01       	movw	r24, r22
    1e5a:	42 2f       	mov	r20, r18
    1e5c:	66 db       	rcall	.-2356   	; 0x152a <prvAddCurrentTaskToDelayedList>
    1e5e:	df 91       	pop	r29
    1e60:	cf 91       	pop	r28
    1e62:	08 95       	ret

00001e64 <xTaskRemoveFromEventList>:
    1e64:	cf 93       	push	r28
    1e66:	df 93       	push	r29
    1e68:	dc 01       	movw	r26, r24
    1e6a:	17 96       	adiw	r26, 0x07	; 7
    1e6c:	ed 91       	ld	r30, X+
    1e6e:	fc 91       	ld	r31, X
    1e70:	18 97       	sbiw	r26, 0x08	; 8
    1e72:	00 84       	ldd	r0, Z+8	; 0x08
    1e74:	f1 85       	ldd	r31, Z+9	; 0x09
    1e76:	e0 2d       	mov	r30, r0
    1e78:	a0 8d       	ldd	r26, Z+24	; 0x18
    1e7a:	b1 8d       	ldd	r27, Z+25	; 0x19
    1e7c:	c2 89       	ldd	r28, Z+18	; 0x12
    1e7e:	d3 89       	ldd	r29, Z+19	; 0x13
    1e80:	84 89       	ldd	r24, Z+20	; 0x14
    1e82:	95 89       	ldd	r25, Z+21	; 0x15
    1e84:	9f 83       	std	Y+7, r25	; 0x07
    1e86:	8e 83       	std	Y+6, r24	; 0x06
    1e88:	c4 89       	ldd	r28, Z+20	; 0x14
    1e8a:	d5 89       	ldd	r29, Z+21	; 0x15
    1e8c:	82 89       	ldd	r24, Z+18	; 0x12
    1e8e:	93 89       	ldd	r25, Z+19	; 0x13
    1e90:	9d 83       	std	Y+5, r25	; 0x05
    1e92:	8c 83       	std	Y+4, r24	; 0x04
    1e94:	11 96       	adiw	r26, 0x01	; 1
    1e96:	8d 91       	ld	r24, X+
    1e98:	9c 91       	ld	r25, X
    1e9a:	12 97       	sbiw	r26, 0x02	; 2
    1e9c:	9f 01       	movw	r18, r30
    1e9e:	22 5f       	subi	r18, 0xF2	; 242
    1ea0:	3f 4f       	sbci	r19, 0xFF	; 255
    1ea2:	82 17       	cp	r24, r18
    1ea4:	93 07       	cpc	r25, r19
    1ea6:	31 f4       	brne	.+12     	; 0x1eb4 <xTaskRemoveFromEventList+0x50>
    1ea8:	84 89       	ldd	r24, Z+20	; 0x14
    1eaa:	95 89       	ldd	r25, Z+21	; 0x15
    1eac:	12 96       	adiw	r26, 0x02	; 2
    1eae:	9c 93       	st	X, r25
    1eb0:	8e 93       	st	-X, r24
    1eb2:	11 97       	sbiw	r26, 0x01	; 1
    1eb4:	11 8e       	std	Z+25, r1	; 0x19
    1eb6:	10 8e       	std	Z+24, r1	; 0x18
    1eb8:	8c 91       	ld	r24, X
    1eba:	81 50       	subi	r24, 0x01	; 1
    1ebc:	8c 93       	st	X, r24
    1ebe:	80 91 f4 10 	lds	r24, 0x10F4	; 0x8010f4 <uxSchedulerSuspended>
    1ec2:	81 11       	cpse	r24, r1
    1ec4:	52 c0       	rjmp	.+164    	; 0x1f6a <xTaskRemoveFromEventList+0x106>
    1ec6:	a4 85       	ldd	r26, Z+12	; 0x0c
    1ec8:	b5 85       	ldd	r27, Z+13	; 0x0d
    1eca:	c6 81       	ldd	r28, Z+6	; 0x06
    1ecc:	d7 81       	ldd	r29, Z+7	; 0x07
    1ece:	80 85       	ldd	r24, Z+8	; 0x08
    1ed0:	91 85       	ldd	r25, Z+9	; 0x09
    1ed2:	9f 83       	std	Y+7, r25	; 0x07
    1ed4:	8e 83       	std	Y+6, r24	; 0x06
    1ed6:	c0 85       	ldd	r28, Z+8	; 0x08
    1ed8:	d1 85       	ldd	r29, Z+9	; 0x09
    1eda:	86 81       	ldd	r24, Z+6	; 0x06
    1edc:	97 81       	ldd	r25, Z+7	; 0x07
    1ede:	9d 83       	std	Y+5, r25	; 0x05
    1ee0:	8c 83       	std	Y+4, r24	; 0x04
    1ee2:	11 96       	adiw	r26, 0x01	; 1
    1ee4:	8d 91       	ld	r24, X+
    1ee6:	9c 91       	ld	r25, X
    1ee8:	12 97       	sbiw	r26, 0x02	; 2
    1eea:	9f 01       	movw	r18, r30
    1eec:	2e 5f       	subi	r18, 0xFE	; 254
    1eee:	3f 4f       	sbci	r19, 0xFF	; 255
    1ef0:	82 17       	cp	r24, r18
    1ef2:	93 07       	cpc	r25, r19
    1ef4:	31 f4       	brne	.+12     	; 0x1f02 <xTaskRemoveFromEventList+0x9e>
    1ef6:	80 85       	ldd	r24, Z+8	; 0x08
    1ef8:	91 85       	ldd	r25, Z+9	; 0x09
    1efa:	12 96       	adiw	r26, 0x02	; 2
    1efc:	9c 93       	st	X, r25
    1efe:	8e 93       	st	-X, r24
    1f00:	11 97       	sbiw	r26, 0x01	; 1
    1f02:	15 86       	std	Z+13, r1	; 0x0d
    1f04:	14 86       	std	Z+12, r1	; 0x0c
    1f06:	8c 91       	ld	r24, X
    1f08:	81 50       	subi	r24, 0x01	; 1
    1f0a:	8c 93       	st	X, r24
    1f0c:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1f0e:	80 91 03 11 	lds	r24, 0x1103	; 0x801103 <uxTopReadyPriority>
    1f12:	8a 17       	cp	r24, r26
    1f14:	10 f4       	brcc	.+4      	; 0x1f1a <xTaskRemoveFromEventList+0xb6>
    1f16:	a0 93 03 11 	sts	0x1103, r26	; 0x801103 <uxTopReadyPriority>
    1f1a:	8b e0       	ldi	r24, 0x0B	; 11
    1f1c:	8a 9f       	mul	r24, r26
    1f1e:	d0 01       	movw	r26, r0
    1f20:	11 24       	eor	r1, r1
    1f22:	ab 5b       	subi	r26, 0xBB	; 187
    1f24:	be 4e       	sbci	r27, 0xEE	; 238
    1f26:	11 96       	adiw	r26, 0x01	; 1
    1f28:	0d 90       	ld	r0, X+
    1f2a:	bc 91       	ld	r27, X
    1f2c:	a0 2d       	mov	r26, r0
    1f2e:	b7 83       	std	Z+7, r27	; 0x07
    1f30:	a6 83       	std	Z+6, r26	; 0x06
    1f32:	16 96       	adiw	r26, 0x06	; 6
    1f34:	4d 91       	ld	r20, X+
    1f36:	5c 91       	ld	r21, X
    1f38:	17 97       	sbiw	r26, 0x07	; 7
    1f3a:	51 87       	std	Z+9, r21	; 0x09
    1f3c:	40 87       	std	Z+8, r20	; 0x08
    1f3e:	16 96       	adiw	r26, 0x06	; 6
    1f40:	cd 91       	ld	r28, X+
    1f42:	dc 91       	ld	r29, X
    1f44:	17 97       	sbiw	r26, 0x07	; 7
    1f46:	3d 83       	std	Y+5, r19	; 0x05
    1f48:	2c 83       	std	Y+4, r18	; 0x04
    1f4a:	17 96       	adiw	r26, 0x07	; 7
    1f4c:	3c 93       	st	X, r19
    1f4e:	2e 93       	st	-X, r18
    1f50:	16 97       	sbiw	r26, 0x06	; 6
    1f52:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1f54:	8a 9f       	mul	r24, r26
    1f56:	d0 01       	movw	r26, r0
    1f58:	11 24       	eor	r1, r1
    1f5a:	ab 5b       	subi	r26, 0xBB	; 187
    1f5c:	be 4e       	sbci	r27, 0xEE	; 238
    1f5e:	b5 87       	std	Z+13, r27	; 0x0d
    1f60:	a4 87       	std	Z+12, r26	; 0x0c
    1f62:	8c 91       	ld	r24, X
    1f64:	8f 5f       	subi	r24, 0xFF	; 255
    1f66:	8c 93       	st	X, r24
    1f68:	1c c0       	rjmp	.+56     	; 0x1fa2 <xTaskRemoveFromEventList+0x13e>
    1f6a:	40 e2       	ldi	r20, 0x20	; 32
    1f6c:	51 e1       	ldi	r21, 0x11	; 17
    1f6e:	da 01       	movw	r26, r20
    1f70:	11 96       	adiw	r26, 0x01	; 1
    1f72:	cd 91       	ld	r28, X+
    1f74:	dc 91       	ld	r29, X
    1f76:	12 97       	sbiw	r26, 0x02	; 2
    1f78:	d3 8b       	std	Z+19, r29	; 0x13
    1f7a:	c2 8b       	std	Z+18, r28	; 0x12
    1f7c:	8e 81       	ldd	r24, Y+6	; 0x06
    1f7e:	9f 81       	ldd	r25, Y+7	; 0x07
    1f80:	95 8b       	std	Z+21, r25	; 0x15
    1f82:	84 8b       	std	Z+20, r24	; 0x14
    1f84:	8e 81       	ldd	r24, Y+6	; 0x06
    1f86:	9f 81       	ldd	r25, Y+7	; 0x07
    1f88:	dc 01       	movw	r26, r24
    1f8a:	15 96       	adiw	r26, 0x05	; 5
    1f8c:	3c 93       	st	X, r19
    1f8e:	2e 93       	st	-X, r18
    1f90:	14 97       	sbiw	r26, 0x04	; 4
    1f92:	3f 83       	std	Y+7, r19	; 0x07
    1f94:	2e 83       	std	Y+6, r18	; 0x06
    1f96:	51 8f       	std	Z+25, r21	; 0x19
    1f98:	40 8f       	std	Z+24, r20	; 0x18
    1f9a:	da 01       	movw	r26, r20
    1f9c:	8c 91       	ld	r24, X
    1f9e:	8f 5f       	subi	r24, 0xFF	; 255
    1fa0:	8c 93       	st	X, r24
    1fa2:	92 8d       	ldd	r25, Z+26	; 0x1a
    1fa4:	e0 91 b3 11 	lds	r30, 0x11B3	; 0x8011b3 <pxCurrentTCB>
    1fa8:	f0 91 b4 11 	lds	r31, 0x11B4	; 0x8011b4 <pxCurrentTCB+0x1>
    1fac:	82 8d       	ldd	r24, Z+26	; 0x1a
    1fae:	89 17       	cp	r24, r25
    1fb0:	20 f4       	brcc	.+8      	; 0x1fba <xTaskRemoveFromEventList+0x156>
    1fb2:	81 e0       	ldi	r24, 0x01	; 1
    1fb4:	80 93 fd 10 	sts	0x10FD, r24	; 0x8010fd <xYieldPending>
    1fb8:	01 c0       	rjmp	.+2      	; 0x1fbc <xTaskRemoveFromEventList+0x158>
    1fba:	80 e0       	ldi	r24, 0x00	; 0
    1fbc:	df 91       	pop	r29
    1fbe:	cf 91       	pop	r28
    1fc0:	08 95       	ret

00001fc2 <vTaskInternalSetTimeOutState>:
    1fc2:	20 91 fc 10 	lds	r18, 0x10FC	; 0x8010fc <xNumOfOverflows>
    1fc6:	fc 01       	movw	r30, r24
    1fc8:	20 83       	st	Z, r18
    1fca:	40 91 04 11 	lds	r20, 0x1104	; 0x801104 <xTickCount>
    1fce:	50 91 05 11 	lds	r21, 0x1105	; 0x801105 <xTickCount+0x1>
    1fd2:	60 91 06 11 	lds	r22, 0x1106	; 0x801106 <xTickCount+0x2>
    1fd6:	70 91 07 11 	lds	r23, 0x1107	; 0x801107 <xTickCount+0x3>
    1fda:	41 83       	std	Z+1, r20	; 0x01
    1fdc:	52 83       	std	Z+2, r21	; 0x02
    1fde:	63 83       	std	Z+3, r22	; 0x03
    1fe0:	74 83       	std	Z+4, r23	; 0x04
    1fe2:	08 95       	ret

00001fe4 <xTaskCheckForTimeOut>:
    1fe4:	8f 92       	push	r8
    1fe6:	9f 92       	push	r9
    1fe8:	af 92       	push	r10
    1fea:	bf 92       	push	r11
    1fec:	cf 92       	push	r12
    1fee:	df 92       	push	r13
    1ff0:	ef 92       	push	r14
    1ff2:	ff 92       	push	r15
    1ff4:	0f 93       	push	r16
    1ff6:	1f 93       	push	r17
    1ff8:	cf 93       	push	r28
    1ffa:	df 93       	push	r29
    1ffc:	fb 01       	movw	r30, r22
    1ffe:	0f b6       	in	r0, 0x3f	; 63
    2000:	f8 94       	cli
    2002:	0f 92       	push	r0
    2004:	c0 90 04 11 	lds	r12, 0x1104	; 0x801104 <xTickCount>
    2008:	d0 90 05 11 	lds	r13, 0x1105	; 0x801105 <xTickCount+0x1>
    200c:	e0 90 06 11 	lds	r14, 0x1106	; 0x801106 <xTickCount+0x2>
    2010:	f0 90 07 11 	lds	r15, 0x1107	; 0x801107 <xTickCount+0x3>
    2014:	dc 01       	movw	r26, r24
    2016:	11 96       	adiw	r26, 0x01	; 1
    2018:	0d 91       	ld	r16, X+
    201a:	1d 91       	ld	r17, X+
    201c:	2d 91       	ld	r18, X+
    201e:	3c 91       	ld	r19, X
    2020:	14 97       	sbiw	r26, 0x04	; 4
    2022:	46 01       	movw	r8, r12
    2024:	57 01       	movw	r10, r14
    2026:	80 1a       	sub	r8, r16
    2028:	91 0a       	sbc	r9, r17
    202a:	a2 0a       	sbc	r10, r18
    202c:	b3 0a       	sbc	r11, r19
    202e:	40 81       	ld	r20, Z
    2030:	51 81       	ldd	r21, Z+1	; 0x01
    2032:	62 81       	ldd	r22, Z+2	; 0x02
    2034:	73 81       	ldd	r23, Z+3	; 0x03
    2036:	4f 3f       	cpi	r20, 0xFF	; 255
    2038:	bf ef       	ldi	r27, 0xFF	; 255
    203a:	5b 07       	cpc	r21, r27
    203c:	6b 07       	cpc	r22, r27
    203e:	7b 07       	cpc	r23, r27
    2040:	39 f1       	breq	.+78     	; 0x2090 <__DATA_REGION_LENGTH__+0x90>
    2042:	ec 01       	movw	r28, r24
    2044:	b8 81       	ld	r27, Y
    2046:	a0 91 fc 10 	lds	r26, 0x10FC	; 0x8010fc <xNumOfOverflows>
    204a:	ba 17       	cp	r27, r26
    204c:	59 f0       	breq	.+22     	; 0x2064 <__DATA_REGION_LENGTH__+0x64>
    204e:	c0 16       	cp	r12, r16
    2050:	d1 06       	cpc	r13, r17
    2052:	e2 06       	cpc	r14, r18
    2054:	f3 06       	cpc	r15, r19
    2056:	30 f0       	brcs	.+12     	; 0x2064 <__DATA_REGION_LENGTH__+0x64>
    2058:	10 82       	st	Z, r1
    205a:	11 82       	std	Z+1, r1	; 0x01
    205c:	12 82       	std	Z+2, r1	; 0x02
    205e:	13 82       	std	Z+3, r1	; 0x03
    2060:	81 e0       	ldi	r24, 0x01	; 1
    2062:	17 c0       	rjmp	.+46     	; 0x2092 <__DATA_REGION_LENGTH__+0x92>
    2064:	84 16       	cp	r8, r20
    2066:	95 06       	cpc	r9, r21
    2068:	a6 06       	cpc	r10, r22
    206a:	b7 06       	cpc	r11, r23
    206c:	58 f4       	brcc	.+22     	; 0x2084 <__DATA_REGION_LENGTH__+0x84>
    206e:	48 19       	sub	r20, r8
    2070:	59 09       	sbc	r21, r9
    2072:	6a 09       	sbc	r22, r10
    2074:	7b 09       	sbc	r23, r11
    2076:	40 83       	st	Z, r20
    2078:	51 83       	std	Z+1, r21	; 0x01
    207a:	62 83       	std	Z+2, r22	; 0x02
    207c:	73 83       	std	Z+3, r23	; 0x03
    207e:	a1 df       	rcall	.-190    	; 0x1fc2 <vTaskInternalSetTimeOutState>
    2080:	80 e0       	ldi	r24, 0x00	; 0
    2082:	07 c0       	rjmp	.+14     	; 0x2092 <__DATA_REGION_LENGTH__+0x92>
    2084:	10 82       	st	Z, r1
    2086:	11 82       	std	Z+1, r1	; 0x01
    2088:	12 82       	std	Z+2, r1	; 0x02
    208a:	13 82       	std	Z+3, r1	; 0x03
    208c:	81 e0       	ldi	r24, 0x01	; 1
    208e:	01 c0       	rjmp	.+2      	; 0x2092 <__DATA_REGION_LENGTH__+0x92>
    2090:	80 e0       	ldi	r24, 0x00	; 0
    2092:	0f 90       	pop	r0
    2094:	0f be       	out	0x3f, r0	; 63
    2096:	df 91       	pop	r29
    2098:	cf 91       	pop	r28
    209a:	1f 91       	pop	r17
    209c:	0f 91       	pop	r16
    209e:	ff 90       	pop	r15
    20a0:	ef 90       	pop	r14
    20a2:	df 90       	pop	r13
    20a4:	cf 90       	pop	r12
    20a6:	bf 90       	pop	r11
    20a8:	af 90       	pop	r10
    20aa:	9f 90       	pop	r9
    20ac:	8f 90       	pop	r8
    20ae:	08 95       	ret

000020b0 <vTaskMissedYield>:
    20b0:	81 e0       	ldi	r24, 0x01	; 1
    20b2:	80 93 fd 10 	sts	0x10FD, r24	; 0x8010fd <xYieldPending>
    20b6:	08 95       	ret

000020b8 <xTaskGetSchedulerState>:
    20b8:	80 91 02 11 	lds	r24, 0x1102	; 0x801102 <xSchedulerRunning>
    20bc:	88 23       	and	r24, r24
    20be:	31 f0       	breq	.+12     	; 0x20cc <xTaskGetSchedulerState+0x14>
    20c0:	80 91 f4 10 	lds	r24, 0x10F4	; 0x8010f4 <uxSchedulerSuspended>
    20c4:	81 11       	cpse	r24, r1
    20c6:	04 c0       	rjmp	.+8      	; 0x20d0 <xTaskGetSchedulerState+0x18>
    20c8:	82 e0       	ldi	r24, 0x02	; 2
    20ca:	08 95       	ret
    20cc:	81 e0       	ldi	r24, 0x01	; 1
    20ce:	08 95       	ret
    20d0:	80 e0       	ldi	r24, 0x00	; 0
    20d2:	08 95       	ret

000020d4 <xTaskPriorityInherit>:
    20d4:	0f 93       	push	r16
    20d6:	1f 93       	push	r17
    20d8:	cf 93       	push	r28
    20da:	df 93       	push	r29
    20dc:	fc 01       	movw	r30, r24
    20de:	89 2b       	or	r24, r25
    20e0:	09 f4       	brne	.+2      	; 0x20e4 <xTaskPriorityInherit+0x10>
    20e2:	77 c0       	rjmp	.+238    	; 0x21d2 <xTaskPriorityInherit+0xfe>
    20e4:	82 8d       	ldd	r24, Z+26	; 0x1a
    20e6:	a0 91 b3 11 	lds	r26, 0x11B3	; 0x8011b3 <pxCurrentTCB>
    20ea:	b0 91 b4 11 	lds	r27, 0x11B4	; 0x8011b4 <pxCurrentTCB+0x1>
    20ee:	5a 96       	adiw	r26, 0x1a	; 26
    20f0:	9c 91       	ld	r25, X
    20f2:	89 17       	cp	r24, r25
    20f4:	08 f0       	brcs	.+2      	; 0x20f8 <xTaskPriorityInherit+0x24>
    20f6:	63 c0       	rjmp	.+198    	; 0x21be <xTaskPriorityInherit+0xea>
    20f8:	46 85       	ldd	r20, Z+14	; 0x0e
    20fa:	57 85       	ldd	r21, Z+15	; 0x0f
    20fc:	60 89       	ldd	r22, Z+16	; 0x10
    20fe:	71 89       	ldd	r23, Z+17	; 0x11
    2100:	77 23       	and	r23, r23
    2102:	94 f0       	brlt	.+36     	; 0x2128 <xTaskPriorityInherit+0x54>
    2104:	a0 91 b3 11 	lds	r26, 0x11B3	; 0x8011b3 <pxCurrentTCB>
    2108:	b0 91 b4 11 	lds	r27, 0x11B4	; 0x8011b4 <pxCurrentTCB+0x1>
    210c:	5a 96       	adiw	r26, 0x1a	; 26
    210e:	9c 91       	ld	r25, X
    2110:	4a e0       	ldi	r20, 0x0A	; 10
    2112:	50 e0       	ldi	r21, 0x00	; 0
    2114:	60 e0       	ldi	r22, 0x00	; 0
    2116:	70 e0       	ldi	r23, 0x00	; 0
    2118:	49 1b       	sub	r20, r25
    211a:	51 09       	sbc	r21, r1
    211c:	61 09       	sbc	r22, r1
    211e:	71 09       	sbc	r23, r1
    2120:	46 87       	std	Z+14, r20	; 0x0e
    2122:	57 87       	std	Z+15, r21	; 0x0f
    2124:	60 8b       	std	Z+16, r22	; 0x10
    2126:	71 8b       	std	Z+17, r23	; 0x11
    2128:	24 85       	ldd	r18, Z+12	; 0x0c
    212a:	35 85       	ldd	r19, Z+13	; 0x0d
    212c:	4b e0       	ldi	r20, 0x0B	; 11
    212e:	84 9f       	mul	r24, r20
    2130:	c0 01       	movw	r24, r0
    2132:	11 24       	eor	r1, r1
    2134:	8b 5b       	subi	r24, 0xBB	; 187
    2136:	9e 4e       	sbci	r25, 0xEE	; 238
    2138:	28 17       	cp	r18, r24
    213a:	39 07       	cpc	r19, r25
    213c:	b9 f5       	brne	.+110    	; 0x21ac <xTaskPriorityInherit+0xd8>
    213e:	ef 01       	movw	r28, r30
    2140:	8f 01       	movw	r16, r30
    2142:	0e 5f       	subi	r16, 0xFE	; 254
    2144:	1f 4f       	sbci	r17, 0xFF	; 255
    2146:	c8 01       	movw	r24, r16
    2148:	0e 94 5f 04 	call	0x8be	; 0x8be <uxListRemove>
    214c:	e0 91 b3 11 	lds	r30, 0x11B3	; 0x8011b3 <pxCurrentTCB>
    2150:	f0 91 b4 11 	lds	r31, 0x11B4	; 0x8011b4 <pxCurrentTCB+0x1>
    2154:	e2 8d       	ldd	r30, Z+26	; 0x1a
    2156:	ea 8f       	std	Y+26, r30	; 0x1a
    2158:	80 91 03 11 	lds	r24, 0x1103	; 0x801103 <uxTopReadyPriority>
    215c:	8e 17       	cp	r24, r30
    215e:	10 f4       	brcc	.+4      	; 0x2164 <xTaskPriorityInherit+0x90>
    2160:	e0 93 03 11 	sts	0x1103, r30	; 0x801103 <uxTopReadyPriority>
    2164:	8b e0       	ldi	r24, 0x0B	; 11
    2166:	8e 9f       	mul	r24, r30
    2168:	f0 01       	movw	r30, r0
    216a:	11 24       	eor	r1, r1
    216c:	eb 5b       	subi	r30, 0xBB	; 187
    216e:	fe 4e       	sbci	r31, 0xEE	; 238
    2170:	01 80       	ldd	r0, Z+1	; 0x01
    2172:	f2 81       	ldd	r31, Z+2	; 0x02
    2174:	e0 2d       	mov	r30, r0
    2176:	ff 83       	std	Y+7, r31	; 0x07
    2178:	ee 83       	std	Y+6, r30	; 0x06
    217a:	26 81       	ldd	r18, Z+6	; 0x06
    217c:	37 81       	ldd	r19, Z+7	; 0x07
    217e:	39 87       	std	Y+9, r19	; 0x09
    2180:	28 87       	std	Y+8, r18	; 0x08
    2182:	a6 81       	ldd	r26, Z+6	; 0x06
    2184:	b7 81       	ldd	r27, Z+7	; 0x07
    2186:	15 96       	adiw	r26, 0x05	; 5
    2188:	1c 93       	st	X, r17
    218a:	0e 93       	st	-X, r16
    218c:	14 97       	sbiw	r26, 0x04	; 4
    218e:	17 83       	std	Z+7, r17	; 0x07
    2190:	06 83       	std	Z+6, r16	; 0x06
    2192:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2194:	8e 9f       	mul	r24, r30
    2196:	f0 01       	movw	r30, r0
    2198:	11 24       	eor	r1, r1
    219a:	eb 5b       	subi	r30, 0xBB	; 187
    219c:	fe 4e       	sbci	r31, 0xEE	; 238
    219e:	fd 87       	std	Y+13, r31	; 0x0d
    21a0:	ec 87       	std	Y+12, r30	; 0x0c
    21a2:	80 81       	ld	r24, Z
    21a4:	8f 5f       	subi	r24, 0xFF	; 255
    21a6:	80 83       	st	Z, r24
    21a8:	81 e0       	ldi	r24, 0x01	; 1
    21aa:	16 c0       	rjmp	.+44     	; 0x21d8 <xTaskPriorityInherit+0x104>
    21ac:	a0 91 b3 11 	lds	r26, 0x11B3	; 0x8011b3 <pxCurrentTCB>
    21b0:	b0 91 b4 11 	lds	r27, 0x11B4	; 0x8011b4 <pxCurrentTCB+0x1>
    21b4:	5a 96       	adiw	r26, 0x1a	; 26
    21b6:	8c 91       	ld	r24, X
    21b8:	82 8f       	std	Z+26, r24	; 0x1a
    21ba:	81 e0       	ldi	r24, 0x01	; 1
    21bc:	0d c0       	rjmp	.+26     	; 0x21d8 <xTaskPriorityInherit+0x104>
    21be:	95 a5       	ldd	r25, Z+45	; 0x2d
    21c0:	e0 91 b3 11 	lds	r30, 0x11B3	; 0x8011b3 <pxCurrentTCB>
    21c4:	f0 91 b4 11 	lds	r31, 0x11B4	; 0x8011b4 <pxCurrentTCB+0x1>
    21c8:	82 8d       	ldd	r24, Z+26	; 0x1a
    21ca:	98 17       	cp	r25, r24
    21cc:	20 f0       	brcs	.+8      	; 0x21d6 <xTaskPriorityInherit+0x102>
    21ce:	80 e0       	ldi	r24, 0x00	; 0
    21d0:	03 c0       	rjmp	.+6      	; 0x21d8 <xTaskPriorityInherit+0x104>
    21d2:	80 e0       	ldi	r24, 0x00	; 0
    21d4:	01 c0       	rjmp	.+2      	; 0x21d8 <xTaskPriorityInherit+0x104>
    21d6:	81 e0       	ldi	r24, 0x01	; 1
    21d8:	df 91       	pop	r29
    21da:	cf 91       	pop	r28
    21dc:	1f 91       	pop	r17
    21de:	0f 91       	pop	r16
    21e0:	08 95       	ret

000021e2 <xTaskPriorityDisinherit>:
    21e2:	0f 93       	push	r16
    21e4:	1f 93       	push	r17
    21e6:	cf 93       	push	r28
    21e8:	df 93       	push	r29
    21ea:	fc 01       	movw	r30, r24
    21ec:	89 2b       	or	r24, r25
    21ee:	09 f4       	brne	.+2      	; 0x21f2 <xTaskPriorityDisinherit+0x10>
    21f0:	49 c0       	rjmp	.+146    	; 0x2284 <__stack+0x85>
    21f2:	86 a5       	ldd	r24, Z+46	; 0x2e
    21f4:	81 50       	subi	r24, 0x01	; 1
    21f6:	86 a7       	std	Z+46, r24	; 0x2e
    21f8:	22 8d       	ldd	r18, Z+26	; 0x1a
    21fa:	95 a5       	ldd	r25, Z+45	; 0x2d
    21fc:	29 17       	cp	r18, r25
    21fe:	09 f4       	brne	.+2      	; 0x2202 <__stack+0x3>
    2200:	43 c0       	rjmp	.+134    	; 0x2288 <__stack+0x89>
    2202:	81 11       	cpse	r24, r1
    2204:	43 c0       	rjmp	.+134    	; 0x228c <__stack+0x8d>
    2206:	ef 01       	movw	r28, r30
    2208:	8f 01       	movw	r16, r30
    220a:	0e 5f       	subi	r16, 0xFE	; 254
    220c:	1f 4f       	sbci	r17, 0xFF	; 255
    220e:	c8 01       	movw	r24, r16
    2210:	0e 94 5f 04 	call	0x8be	; 0x8be <uxListRemove>
    2214:	ed a5       	ldd	r30, Y+45	; 0x2d
    2216:	ea 8f       	std	Y+26, r30	; 0x1a
    2218:	8a e0       	ldi	r24, 0x0A	; 10
    221a:	90 e0       	ldi	r25, 0x00	; 0
    221c:	a0 e0       	ldi	r26, 0x00	; 0
    221e:	b0 e0       	ldi	r27, 0x00	; 0
    2220:	8e 1b       	sub	r24, r30
    2222:	91 09       	sbc	r25, r1
    2224:	a1 09       	sbc	r26, r1
    2226:	b1 09       	sbc	r27, r1
    2228:	8e 87       	std	Y+14, r24	; 0x0e
    222a:	9f 87       	std	Y+15, r25	; 0x0f
    222c:	a8 8b       	std	Y+16, r26	; 0x10
    222e:	b9 8b       	std	Y+17, r27	; 0x11
    2230:	80 91 03 11 	lds	r24, 0x1103	; 0x801103 <uxTopReadyPriority>
    2234:	8e 17       	cp	r24, r30
    2236:	10 f4       	brcc	.+4      	; 0x223c <__stack+0x3d>
    2238:	e0 93 03 11 	sts	0x1103, r30	; 0x801103 <uxTopReadyPriority>
    223c:	8b e0       	ldi	r24, 0x0B	; 11
    223e:	8e 9f       	mul	r24, r30
    2240:	f0 01       	movw	r30, r0
    2242:	11 24       	eor	r1, r1
    2244:	eb 5b       	subi	r30, 0xBB	; 187
    2246:	fe 4e       	sbci	r31, 0xEE	; 238
    2248:	01 80       	ldd	r0, Z+1	; 0x01
    224a:	f2 81       	ldd	r31, Z+2	; 0x02
    224c:	e0 2d       	mov	r30, r0
    224e:	ff 83       	std	Y+7, r31	; 0x07
    2250:	ee 83       	std	Y+6, r30	; 0x06
    2252:	26 81       	ldd	r18, Z+6	; 0x06
    2254:	37 81       	ldd	r19, Z+7	; 0x07
    2256:	39 87       	std	Y+9, r19	; 0x09
    2258:	28 87       	std	Y+8, r18	; 0x08
    225a:	a6 81       	ldd	r26, Z+6	; 0x06
    225c:	b7 81       	ldd	r27, Z+7	; 0x07
    225e:	15 96       	adiw	r26, 0x05	; 5
    2260:	1c 93       	st	X, r17
    2262:	0e 93       	st	-X, r16
    2264:	14 97       	sbiw	r26, 0x04	; 4
    2266:	17 83       	std	Z+7, r17	; 0x07
    2268:	06 83       	std	Z+6, r16	; 0x06
    226a:	ea 8d       	ldd	r30, Y+26	; 0x1a
    226c:	8e 9f       	mul	r24, r30
    226e:	f0 01       	movw	r30, r0
    2270:	11 24       	eor	r1, r1
    2272:	eb 5b       	subi	r30, 0xBB	; 187
    2274:	fe 4e       	sbci	r31, 0xEE	; 238
    2276:	fd 87       	std	Y+13, r31	; 0x0d
    2278:	ec 87       	std	Y+12, r30	; 0x0c
    227a:	80 81       	ld	r24, Z
    227c:	8f 5f       	subi	r24, 0xFF	; 255
    227e:	80 83       	st	Z, r24
    2280:	81 e0       	ldi	r24, 0x01	; 1
    2282:	05 c0       	rjmp	.+10     	; 0x228e <__stack+0x8f>
    2284:	80 e0       	ldi	r24, 0x00	; 0
    2286:	03 c0       	rjmp	.+6      	; 0x228e <__stack+0x8f>
    2288:	80 e0       	ldi	r24, 0x00	; 0
    228a:	01 c0       	rjmp	.+2      	; 0x228e <__stack+0x8f>
    228c:	80 e0       	ldi	r24, 0x00	; 0
    228e:	df 91       	pop	r29
    2290:	cf 91       	pop	r28
    2292:	1f 91       	pop	r17
    2294:	0f 91       	pop	r16
    2296:	08 95       	ret

00002298 <vTaskPriorityDisinheritAfterTimeout>:
    2298:	0f 93       	push	r16
    229a:	1f 93       	push	r17
    229c:	cf 93       	push	r28
    229e:	df 93       	push	r29
    22a0:	fc 01       	movw	r30, r24
    22a2:	89 2b       	or	r24, r25
    22a4:	09 f4       	brne	.+2      	; 0x22a8 <vTaskPriorityDisinheritAfterTimeout+0x10>
    22a6:	5a c0       	rjmp	.+180    	; 0x235c <vTaskPriorityDisinheritAfterTimeout+0xc4>
    22a8:	85 a5       	ldd	r24, Z+45	; 0x2d
    22aa:	86 17       	cp	r24, r22
    22ac:	08 f4       	brcc	.+2      	; 0x22b0 <vTaskPriorityDisinheritAfterTimeout+0x18>
    22ae:	86 2f       	mov	r24, r22
    22b0:	92 8d       	ldd	r25, Z+26	; 0x1a
    22b2:	89 17       	cp	r24, r25
    22b4:	09 f4       	brne	.+2      	; 0x22b8 <vTaskPriorityDisinheritAfterTimeout+0x20>
    22b6:	52 c0       	rjmp	.+164    	; 0x235c <vTaskPriorityDisinheritAfterTimeout+0xc4>
    22b8:	26 a5       	ldd	r18, Z+46	; 0x2e
    22ba:	21 30       	cpi	r18, 0x01	; 1
    22bc:	09 f0       	breq	.+2      	; 0x22c0 <vTaskPriorityDisinheritAfterTimeout+0x28>
    22be:	4e c0       	rjmp	.+156    	; 0x235c <vTaskPriorityDisinheritAfterTimeout+0xc4>
    22c0:	82 8f       	std	Z+26, r24	; 0x1a
    22c2:	46 85       	ldd	r20, Z+14	; 0x0e
    22c4:	57 85       	ldd	r21, Z+15	; 0x0f
    22c6:	60 89       	ldd	r22, Z+16	; 0x10
    22c8:	71 89       	ldd	r23, Z+17	; 0x11
    22ca:	77 23       	and	r23, r23
    22cc:	64 f0       	brlt	.+24     	; 0x22e6 <vTaskPriorityDisinheritAfterTimeout+0x4e>
    22ce:	4a e0       	ldi	r20, 0x0A	; 10
    22d0:	50 e0       	ldi	r21, 0x00	; 0
    22d2:	60 e0       	ldi	r22, 0x00	; 0
    22d4:	70 e0       	ldi	r23, 0x00	; 0
    22d6:	48 1b       	sub	r20, r24
    22d8:	51 09       	sbc	r21, r1
    22da:	61 09       	sbc	r22, r1
    22dc:	71 09       	sbc	r23, r1
    22de:	46 87       	std	Z+14, r20	; 0x0e
    22e0:	57 87       	std	Z+15, r21	; 0x0f
    22e2:	60 8b       	std	Z+16, r22	; 0x10
    22e4:	71 8b       	std	Z+17, r23	; 0x11
    22e6:	24 85       	ldd	r18, Z+12	; 0x0c
    22e8:	35 85       	ldd	r19, Z+13	; 0x0d
    22ea:	4b e0       	ldi	r20, 0x0B	; 11
    22ec:	94 9f       	mul	r25, r20
    22ee:	c0 01       	movw	r24, r0
    22f0:	11 24       	eor	r1, r1
    22f2:	8b 5b       	subi	r24, 0xBB	; 187
    22f4:	9e 4e       	sbci	r25, 0xEE	; 238
    22f6:	28 17       	cp	r18, r24
    22f8:	39 07       	cpc	r19, r25
    22fa:	81 f5       	brne	.+96     	; 0x235c <vTaskPriorityDisinheritAfterTimeout+0xc4>
    22fc:	ef 01       	movw	r28, r30
    22fe:	8f 01       	movw	r16, r30
    2300:	0e 5f       	subi	r16, 0xFE	; 254
    2302:	1f 4f       	sbci	r17, 0xFF	; 255
    2304:	c8 01       	movw	r24, r16
    2306:	0e 94 5f 04 	call	0x8be	; 0x8be <uxListRemove>
    230a:	ea 8d       	ldd	r30, Y+26	; 0x1a
    230c:	80 91 03 11 	lds	r24, 0x1103	; 0x801103 <uxTopReadyPriority>
    2310:	8e 17       	cp	r24, r30
    2312:	10 f4       	brcc	.+4      	; 0x2318 <vTaskPriorityDisinheritAfterTimeout+0x80>
    2314:	e0 93 03 11 	sts	0x1103, r30	; 0x801103 <uxTopReadyPriority>
    2318:	8b e0       	ldi	r24, 0x0B	; 11
    231a:	8e 9f       	mul	r24, r30
    231c:	f0 01       	movw	r30, r0
    231e:	11 24       	eor	r1, r1
    2320:	eb 5b       	subi	r30, 0xBB	; 187
    2322:	fe 4e       	sbci	r31, 0xEE	; 238
    2324:	01 80       	ldd	r0, Z+1	; 0x01
    2326:	f2 81       	ldd	r31, Z+2	; 0x02
    2328:	e0 2d       	mov	r30, r0
    232a:	ff 83       	std	Y+7, r31	; 0x07
    232c:	ee 83       	std	Y+6, r30	; 0x06
    232e:	26 81       	ldd	r18, Z+6	; 0x06
    2330:	37 81       	ldd	r19, Z+7	; 0x07
    2332:	39 87       	std	Y+9, r19	; 0x09
    2334:	28 87       	std	Y+8, r18	; 0x08
    2336:	a6 81       	ldd	r26, Z+6	; 0x06
    2338:	b7 81       	ldd	r27, Z+7	; 0x07
    233a:	15 96       	adiw	r26, 0x05	; 5
    233c:	1c 93       	st	X, r17
    233e:	0e 93       	st	-X, r16
    2340:	14 97       	sbiw	r26, 0x04	; 4
    2342:	17 83       	std	Z+7, r17	; 0x07
    2344:	06 83       	std	Z+6, r16	; 0x06
    2346:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2348:	8e 9f       	mul	r24, r30
    234a:	f0 01       	movw	r30, r0
    234c:	11 24       	eor	r1, r1
    234e:	eb 5b       	subi	r30, 0xBB	; 187
    2350:	fe 4e       	sbci	r31, 0xEE	; 238
    2352:	fd 87       	std	Y+13, r31	; 0x0d
    2354:	ec 87       	std	Y+12, r30	; 0x0c
    2356:	80 81       	ld	r24, Z
    2358:	8f 5f       	subi	r24, 0xFF	; 255
    235a:	80 83       	st	Z, r24
    235c:	df 91       	pop	r29
    235e:	cf 91       	pop	r28
    2360:	1f 91       	pop	r17
    2362:	0f 91       	pop	r16
    2364:	08 95       	ret

00002366 <pvTaskIncrementMutexHeldCount>:

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
    2366:	80 91 b3 11 	lds	r24, 0x11B3	; 0x8011b3 <pxCurrentTCB>
    236a:	90 91 b4 11 	lds	r25, 0x11B4	; 0x8011b4 <pxCurrentTCB+0x1>
    236e:	89 2b       	or	r24, r25
    2370:	39 f0       	breq	.+14     	; 0x2380 <pvTaskIncrementMutexHeldCount+0x1a>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
    2372:	e0 91 b3 11 	lds	r30, 0x11B3	; 0x8011b3 <pxCurrentTCB>
    2376:	f0 91 b4 11 	lds	r31, 0x11B4	; 0x8011b4 <pxCurrentTCB+0x1>
    237a:	86 a5       	ldd	r24, Z+46	; 0x2e
    237c:	8f 5f       	subi	r24, 0xFF	; 255
    237e:	86 a7       	std	Z+46, r24	; 0x2e
        }

        return ( TaskHandle_t ) pxCurrentTCB;
    2380:	80 91 b3 11 	lds	r24, 0x11B3	; 0x8011b3 <pxCurrentTCB>
    2384:	90 91 b4 11 	lds	r25, 0x11B4	; 0x8011b4 <pxCurrentTCB+0x1>
    }
    2388:	08 95       	ret

0000238a <prvGetNextExpireTime>:
    238a:	dc 01       	movw	r26, r24
    238c:	e0 91 bf 11 	lds	r30, 0x11BF	; 0x8011bf <pxCurrentTimerList>
    2390:	f0 91 c0 11 	lds	r31, 0x11C0	; 0x8011c0 <pxCurrentTimerList+0x1>
    2394:	80 81       	ld	r24, Z
    2396:	91 e0       	ldi	r25, 0x01	; 1
    2398:	81 11       	cpse	r24, r1
    239a:	90 e0       	ldi	r25, 0x00	; 0
    239c:	9c 93       	st	X, r25
    239e:	91 11       	cpse	r25, r1
    23a0:	08 c0       	rjmp	.+16     	; 0x23b2 <prvGetNextExpireTime+0x28>
    23a2:	07 80       	ldd	r0, Z+7	; 0x07
    23a4:	f0 85       	ldd	r31, Z+8	; 0x08
    23a6:	e0 2d       	mov	r30, r0
    23a8:	60 81       	ld	r22, Z
    23aa:	71 81       	ldd	r23, Z+1	; 0x01
    23ac:	82 81       	ldd	r24, Z+2	; 0x02
    23ae:	93 81       	ldd	r25, Z+3	; 0x03
    23b0:	08 95       	ret
    23b2:	60 e0       	ldi	r22, 0x00	; 0
    23b4:	70 e0       	ldi	r23, 0x00	; 0
    23b6:	cb 01       	movw	r24, r22
    23b8:	08 95       	ret

000023ba <prvInsertTimerInActiveList>:
    23ba:	cf 92       	push	r12
    23bc:	df 92       	push	r13
    23be:	ef 92       	push	r14
    23c0:	ff 92       	push	r15
    23c2:	0f 93       	push	r16
    23c4:	1f 93       	push	r17
    23c6:	fc 01       	movw	r30, r24
    23c8:	42 83       	std	Z+2, r20	; 0x02
    23ca:	53 83       	std	Z+3, r21	; 0x03
    23cc:	64 83       	std	Z+4, r22	; 0x04
    23ce:	75 83       	std	Z+5, r23	; 0x05
    23d0:	93 87       	std	Z+11, r25	; 0x0b
    23d2:	82 87       	std	Z+10, r24	; 0x0a
    23d4:	04 17       	cp	r16, r20
    23d6:	15 07       	cpc	r17, r21
    23d8:	26 07       	cpc	r18, r22
    23da:	37 07       	cpc	r19, r23
    23dc:	c0 f0       	brcs	.+48     	; 0x240e <prvInsertTimerInActiveList+0x54>
    23de:	0c 19       	sub	r16, r12
    23e0:	1d 09       	sbc	r17, r13
    23e2:	2e 09       	sbc	r18, r14
    23e4:	3f 09       	sbc	r19, r15
    23e6:	86 85       	ldd	r24, Z+14	; 0x0e
    23e8:	97 85       	ldd	r25, Z+15	; 0x0f
    23ea:	a0 89       	ldd	r26, Z+16	; 0x10
    23ec:	b1 89       	ldd	r27, Z+17	; 0x11
    23ee:	08 17       	cp	r16, r24
    23f0:	19 07       	cpc	r17, r25
    23f2:	2a 07       	cpc	r18, r26
    23f4:	3b 07       	cpc	r19, r27
    23f6:	00 f5       	brcc	.+64     	; 0x2438 <prvInsertTimerInActiveList+0x7e>
    23f8:	bf 01       	movw	r22, r30
    23fa:	6e 5f       	subi	r22, 0xFE	; 254
    23fc:	7f 4f       	sbci	r23, 0xFF	; 255
    23fe:	80 91 bd 11 	lds	r24, 0x11BD	; 0x8011bd <pxOverflowTimerList>
    2402:	90 91 be 11 	lds	r25, 0x11BE	; 0x8011be <pxOverflowTimerList+0x1>
    2406:	0e 94 22 04 	call	0x844	; 0x844 <vListInsert>
    240a:	80 e0       	ldi	r24, 0x00	; 0
    240c:	18 c0       	rjmp	.+48     	; 0x243e <prvInsertTimerInActiveList+0x84>
    240e:	0c 15       	cp	r16, r12
    2410:	1d 05       	cpc	r17, r13
    2412:	2e 05       	cpc	r18, r14
    2414:	3f 05       	cpc	r19, r15
    2416:	28 f4       	brcc	.+10     	; 0x2422 <prvInsertTimerInActiveList+0x68>
    2418:	4c 15       	cp	r20, r12
    241a:	5d 05       	cpc	r21, r13
    241c:	6e 05       	cpc	r22, r14
    241e:	7f 05       	cpc	r23, r15
    2420:	68 f4       	brcc	.+26     	; 0x243c <prvInsertTimerInActiveList+0x82>
    2422:	bf 01       	movw	r22, r30
    2424:	6e 5f       	subi	r22, 0xFE	; 254
    2426:	7f 4f       	sbci	r23, 0xFF	; 255
    2428:	80 91 bf 11 	lds	r24, 0x11BF	; 0x8011bf <pxCurrentTimerList>
    242c:	90 91 c0 11 	lds	r25, 0x11C0	; 0x8011c0 <pxCurrentTimerList+0x1>
    2430:	0e 94 22 04 	call	0x844	; 0x844 <vListInsert>
    2434:	80 e0       	ldi	r24, 0x00	; 0
    2436:	03 c0       	rjmp	.+6      	; 0x243e <prvInsertTimerInActiveList+0x84>
    2438:	81 e0       	ldi	r24, 0x01	; 1
    243a:	01 c0       	rjmp	.+2      	; 0x243e <prvInsertTimerInActiveList+0x84>
    243c:	81 e0       	ldi	r24, 0x01	; 1
    243e:	1f 91       	pop	r17
    2440:	0f 91       	pop	r16
    2442:	ff 90       	pop	r15
    2444:	ef 90       	pop	r14
    2446:	df 90       	pop	r13
    2448:	cf 90       	pop	r12
    244a:	08 95       	ret

0000244c <prvCheckForValidListAndQueue>:
    244c:	0f b6       	in	r0, 0x3f	; 63
    244e:	f8 94       	cli
    2450:	0f 92       	push	r0
    2452:	80 91 bb 11 	lds	r24, 0x11BB	; 0x8011bb <xTimerQueue>
    2456:	90 91 bc 11 	lds	r25, 0x11BC	; 0x8011bc <xTimerQueue+0x1>
    245a:	89 2b       	or	r24, r25
    245c:	e9 f4       	brne	.+58     	; 0x2498 <prvCheckForValidListAndQueue+0x4c>
    245e:	8c ec       	ldi	r24, 0xCC	; 204
    2460:	91 e1       	ldi	r25, 0x11	; 17
    2462:	0e 94 0d 04 	call	0x81a	; 0x81a <vListInitialise>
    2466:	81 ec       	ldi	r24, 0xC1	; 193
    2468:	91 e1       	ldi	r25, 0x11	; 17
    246a:	0e 94 0d 04 	call	0x81a	; 0x81a <vListInitialise>
    246e:	8c ec       	ldi	r24, 0xCC	; 204
    2470:	91 e1       	ldi	r25, 0x11	; 17
    2472:	90 93 c0 11 	sts	0x11C0, r25	; 0x8011c0 <pxCurrentTimerList+0x1>
    2476:	80 93 bf 11 	sts	0x11BF, r24	; 0x8011bf <pxCurrentTimerList>
    247a:	81 ec       	ldi	r24, 0xC1	; 193
    247c:	91 e1       	ldi	r25, 0x11	; 17
    247e:	90 93 be 11 	sts	0x11BE, r25	; 0x8011be <pxOverflowTimerList+0x1>
    2482:	80 93 bd 11 	sts	0x11BD, r24	; 0x8011bd <pxOverflowTimerList>
    2486:	40 e0       	ldi	r20, 0x00	; 0
    2488:	67 e0       	ldi	r22, 0x07	; 7
    248a:	8a e0       	ldi	r24, 0x0A	; 10
    248c:	0e 94 cf 06 	call	0xd9e	; 0xd9e <xQueueGenericCreate>
    2490:	90 93 bc 11 	sts	0x11BC, r25	; 0x8011bc <xTimerQueue+0x1>
    2494:	80 93 bb 11 	sts	0x11BB, r24	; 0x8011bb <xTimerQueue>
    2498:	0f 90       	pop	r0
    249a:	0f be       	out	0x3f, r0	; 63
    249c:	08 95       	ret

0000249e <xTimerCreateTimerTask>:
    249e:	ef 92       	push	r14
    24a0:	ff 92       	push	r15
    24a2:	0f 93       	push	r16
    24a4:	d3 df       	rcall	.-90     	; 0x244c <prvCheckForValidListAndQueue>
    24a6:	80 91 bb 11 	lds	r24, 0x11BB	; 0x8011bb <xTimerQueue>
    24aa:	90 91 bc 11 	lds	r25, 0x11BC	; 0x8011bc <xTimerQueue+0x1>
    24ae:	89 2b       	or	r24, r25
    24b0:	89 f0       	breq	.+34     	; 0x24d4 <xTimerCreateTimerTask+0x36>
    24b2:	0f 2e       	mov	r0, r31
    24b4:	f9 eb       	ldi	r31, 0xB9	; 185
    24b6:	ef 2e       	mov	r14, r31
    24b8:	f1 e1       	ldi	r31, 0x11	; 17
    24ba:	ff 2e       	mov	r15, r31
    24bc:	f0 2d       	mov	r31, r0
    24be:	03 e0       	ldi	r16, 0x03	; 3
    24c0:	20 e0       	ldi	r18, 0x00	; 0
    24c2:	30 e0       	ldi	r19, 0x00	; 0
    24c4:	40 ec       	ldi	r20, 0xC0	; 192
    24c6:	50 e0       	ldi	r21, 0x00	; 0
    24c8:	64 e0       	ldi	r22, 0x04	; 4
    24ca:	73 e0       	ldi	r23, 0x03	; 3
    24cc:	86 e8       	ldi	r24, 0x86	; 134
    24ce:	90 e0       	ldi	r25, 0x00	; 0
    24d0:	cb d8       	rcall	.-3690   	; 0x1668 <xTaskCreate>
    24d2:	01 c0       	rjmp	.+2      	; 0x24d6 <xTimerCreateTimerTask+0x38>
    24d4:	80 e0       	ldi	r24, 0x00	; 0
    24d6:	0f 91       	pop	r16
    24d8:	ff 90       	pop	r15
    24da:	ef 90       	pop	r14
    24dc:	08 95       	ret

000024de <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    24de:	8f 92       	push	r8
    24e0:	9f 92       	push	r9
    24e2:	af 92       	push	r10
    24e4:	bf 92       	push	r11
    24e6:	cf 92       	push	r12
    24e8:	df 92       	push	r13
    24ea:	ef 92       	push	r14
    24ec:	ff 92       	push	r15
    24ee:	0f 93       	push	r16
    24f0:	1f 93       	push	r17
    24f2:	cf 93       	push	r28
    24f4:	df 93       	push	r29
    24f6:	cd b7       	in	r28, 0x3d	; 61
    24f8:	de b7       	in	r29, 0x3e	; 62
    24fa:	27 97       	sbiw	r28, 0x07	; 7
    24fc:	0f b6       	in	r0, 0x3f	; 63
    24fe:	f8 94       	cli
    2500:	de bf       	out	0x3e, r29	; 62
    2502:	0f be       	out	0x3f, r0	; 63
    2504:	cd bf       	out	0x3d, r28	; 61

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    2506:	e0 91 bb 11 	lds	r30, 0x11BB	; 0x8011bb <xTimerQueue>
    250a:	f0 91 bc 11 	lds	r31, 0x11BC	; 0x8011bc <xTimerQueue+0x1>
    250e:	30 97       	sbiw	r30, 0x00	; 0
    2510:	81 f1       	breq	.+96     	; 0x2572 <xTimerGenericCommand+0x94>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    2512:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    2514:	2a 83       	std	Y+2, r18	; 0x02
    2516:	3b 83       	std	Y+3, r19	; 0x03
    2518:	4c 83       	std	Y+4, r20	; 0x04
    251a:	5d 83       	std	Y+5, r21	; 0x05
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    251c:	9f 83       	std	Y+7, r25	; 0x07
    251e:	8e 83       	std	Y+6, r24	; 0x06

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    2520:	66 30       	cpi	r22, 0x06	; 6
    2522:	f4 f4       	brge	.+60     	; 0x2560 <xTimerGenericCommand+0x82>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    2524:	c9 dd       	rcall	.-1134   	; 0x20b8 <xTaskGetSchedulerState>
    2526:	82 30       	cpi	r24, 0x02	; 2
    2528:	69 f4       	brne	.+26     	; 0x2544 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    252a:	00 e0       	ldi	r16, 0x00	; 0
    252c:	a7 01       	movw	r20, r14
    252e:	96 01       	movw	r18, r12
    2530:	be 01       	movw	r22, r28
    2532:	6f 5f       	subi	r22, 0xFF	; 255
    2534:	7f 4f       	sbci	r23, 0xFF	; 255
    2536:	80 91 bb 11 	lds	r24, 0x11BB	; 0x8011bb <xTimerQueue>
    253a:	90 91 bc 11 	lds	r25, 0x11BC	; 0x8011bc <xTimerQueue+0x1>
    253e:	0e 94 f2 06 	call	0xde4	; 0xde4 <xQueueGenericSend>
    2542:	18 c0       	rjmp	.+48     	; 0x2574 <xTimerGenericCommand+0x96>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    2544:	00 e0       	ldi	r16, 0x00	; 0
    2546:	20 e0       	ldi	r18, 0x00	; 0
    2548:	30 e0       	ldi	r19, 0x00	; 0
    254a:	a9 01       	movw	r20, r18
    254c:	be 01       	movw	r22, r28
    254e:	6f 5f       	subi	r22, 0xFF	; 255
    2550:	7f 4f       	sbci	r23, 0xFF	; 255
    2552:	80 91 bb 11 	lds	r24, 0x11BB	; 0x8011bb <xTimerQueue>
    2556:	90 91 bc 11 	lds	r25, 0x11BC	; 0x8011bc <xTimerQueue+0x1>
    255a:	0e 94 f2 06 	call	0xde4	; 0xde4 <xQueueGenericSend>
    255e:	0a c0       	rjmp	.+20     	; 0x2574 <xTimerGenericCommand+0x96>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    2560:	20 e0       	ldi	r18, 0x00	; 0
    2562:	a8 01       	movw	r20, r16
    2564:	be 01       	movw	r22, r28
    2566:	6f 5f       	subi	r22, 0xFF	; 255
    2568:	7f 4f       	sbci	r23, 0xFF	; 255
    256a:	cf 01       	movw	r24, r30
    256c:	0e 94 9e 07 	call	0xf3c	; 0xf3c <xQueueGenericSendFromISR>
    2570:	01 c0       	rjmp	.+2      	; 0x2574 <xTimerGenericCommand+0x96>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    2572:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    2574:	27 96       	adiw	r28, 0x07	; 7
    2576:	0f b6       	in	r0, 0x3f	; 63
    2578:	f8 94       	cli
    257a:	de bf       	out	0x3e, r29	; 62
    257c:	0f be       	out	0x3f, r0	; 63
    257e:	cd bf       	out	0x3d, r28	; 61
    2580:	df 91       	pop	r29
    2582:	cf 91       	pop	r28
    2584:	1f 91       	pop	r17
    2586:	0f 91       	pop	r16
    2588:	ff 90       	pop	r15
    258a:	ef 90       	pop	r14
    258c:	df 90       	pop	r13
    258e:	cf 90       	pop	r12
    2590:	bf 90       	pop	r11
    2592:	af 90       	pop	r10
    2594:	9f 90       	pop	r9
    2596:	8f 90       	pop	r8
    2598:	08 95       	ret

0000259a <prvSwitchTimerLists>:
        }
    }
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
    259a:	8f 92       	push	r8
    259c:	9f 92       	push	r9
    259e:	af 92       	push	r10
    25a0:	bf 92       	push	r11
    25a2:	cf 92       	push	r12
    25a4:	df 92       	push	r13
    25a6:	ef 92       	push	r14
    25a8:	ff 92       	push	r15
    25aa:	0f 93       	push	r16
    25ac:	1f 93       	push	r17
    25ae:	cf 93       	push	r28
    25b0:	df 93       	push	r29

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    25b2:	3b c0       	rjmp	.+118    	; 0x262a <prvSwitchTimerLists+0x90>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    25b4:	07 80       	ldd	r0, Z+7	; 0x07
    25b6:	f0 85       	ldd	r31, Z+8	; 0x08
    25b8:	e0 2d       	mov	r30, r0
    25ba:	80 80       	ld	r8, Z
    25bc:	91 80       	ldd	r9, Z+1	; 0x01
    25be:	a2 80       	ldd	r10, Z+2	; 0x02
    25c0:	b3 80       	ldd	r11, Z+3	; 0x03

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    25c2:	c0 85       	ldd	r28, Z+8	; 0x08
    25c4:	d1 85       	ldd	r29, Z+9	; 0x09
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    25c6:	8e 01       	movw	r16, r28
    25c8:	0e 5f       	subi	r16, 0xFE	; 254
    25ca:	1f 4f       	sbci	r17, 0xFF	; 255
    25cc:	c8 01       	movw	r24, r16
    25ce:	0e 94 5f 04 	call	0x8be	; 0x8be <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    25d2:	ec 89       	ldd	r30, Y+20	; 0x14
    25d4:	fd 89       	ldd	r31, Y+21	; 0x15
    25d6:	ce 01       	movw	r24, r28
    25d8:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    25da:	8e 89       	ldd	r24, Y+22	; 0x16
    25dc:	82 ff       	sbrs	r24, 2
    25de:	25 c0       	rjmp	.+74     	; 0x262a <prvSwitchTimerLists+0x90>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    25e0:	8e 85       	ldd	r24, Y+14	; 0x0e
    25e2:	9f 85       	ldd	r25, Y+15	; 0x0f
    25e4:	a8 89       	ldd	r26, Y+16	; 0x10
    25e6:	b9 89       	ldd	r27, Y+17	; 0x11
    25e8:	88 0d       	add	r24, r8
    25ea:	99 1d       	adc	r25, r9
    25ec:	aa 1d       	adc	r26, r10
    25ee:	bb 1d       	adc	r27, r11

                if( xReloadTime > xNextExpireTime )
    25f0:	88 16       	cp	r8, r24
    25f2:	99 06       	cpc	r9, r25
    25f4:	aa 06       	cpc	r10, r26
    25f6:	bb 06       	cpc	r11, r27
    25f8:	70 f4       	brcc	.+28     	; 0x2616 <prvSwitchTimerLists+0x7c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    25fa:	8a 83       	std	Y+2, r24	; 0x02
    25fc:	9b 83       	std	Y+3, r25	; 0x03
    25fe:	ac 83       	std	Y+4, r26	; 0x04
    2600:	bd 83       	std	Y+5, r27	; 0x05
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    2602:	db 87       	std	Y+11, r29	; 0x0b
    2604:	ca 87       	std	Y+10, r28	; 0x0a
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    2606:	b8 01       	movw	r22, r16
    2608:	80 91 bf 11 	lds	r24, 0x11BF	; 0x8011bf <pxCurrentTimerList>
    260c:	90 91 c0 11 	lds	r25, 0x11C0	; 0x8011c0 <pxCurrentTimerList+0x1>
    2610:	0e 94 22 04 	call	0x844	; 0x844 <vListInsert>
    2614:	0a c0       	rjmp	.+20     	; 0x262a <prvSwitchTimerLists+0x90>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2616:	c1 2c       	mov	r12, r1
    2618:	d1 2c       	mov	r13, r1
    261a:	76 01       	movw	r14, r12
    261c:	00 e0       	ldi	r16, 0x00	; 0
    261e:	10 e0       	ldi	r17, 0x00	; 0
    2620:	a5 01       	movw	r20, r10
    2622:	94 01       	movw	r18, r8
    2624:	60 e0       	ldi	r22, 0x00	; 0
    2626:	ce 01       	movw	r24, r28
    2628:	5a df       	rcall	.-332    	; 0x24de <xTimerGenericCommand>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    262a:	e0 91 bf 11 	lds	r30, 0x11BF	; 0x8011bf <pxCurrentTimerList>
    262e:	f0 91 c0 11 	lds	r31, 0x11C0	; 0x8011c0 <pxCurrentTimerList+0x1>
    2632:	80 81       	ld	r24, Z
    2634:	81 11       	cpse	r24, r1
    2636:	be cf       	rjmp	.-132    	; 0x25b4 <prvSwitchTimerLists+0x1a>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    2638:	80 91 bd 11 	lds	r24, 0x11BD	; 0x8011bd <pxOverflowTimerList>
    263c:	90 91 be 11 	lds	r25, 0x11BE	; 0x8011be <pxOverflowTimerList+0x1>
    2640:	90 93 c0 11 	sts	0x11C0, r25	; 0x8011c0 <pxCurrentTimerList+0x1>
    2644:	80 93 bf 11 	sts	0x11BF, r24	; 0x8011bf <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    2648:	f0 93 be 11 	sts	0x11BE, r31	; 0x8011be <pxOverflowTimerList+0x1>
    264c:	e0 93 bd 11 	sts	0x11BD, r30	; 0x8011bd <pxOverflowTimerList>
    }
    2650:	df 91       	pop	r29
    2652:	cf 91       	pop	r28
    2654:	1f 91       	pop	r17
    2656:	0f 91       	pop	r16
    2658:	ff 90       	pop	r15
    265a:	ef 90       	pop	r14
    265c:	df 90       	pop	r13
    265e:	cf 90       	pop	r12
    2660:	bf 90       	pop	r11
    2662:	af 90       	pop	r10
    2664:	9f 90       	pop	r9
    2666:	8f 90       	pop	r8
    2668:	08 95       	ret

0000266a <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    266a:	cf 92       	push	r12
    266c:	df 92       	push	r13
    266e:	ef 92       	push	r14
    2670:	ff 92       	push	r15
    2672:	cf 93       	push	r28
    2674:	df 93       	push	r29
    2676:	ec 01       	movw	r28, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    2678:	85 d8       	rcall	.-3830   	; 0x1784 <xTaskGetTickCount>
    267a:	6b 01       	movw	r12, r22
    267c:	7c 01       	movw	r14, r24

        if( xTimeNow < xLastTime )
    267e:	80 91 b5 11 	lds	r24, 0x11B5	; 0x8011b5 <xLastTime.2448>
    2682:	90 91 b6 11 	lds	r25, 0x11B6	; 0x8011b6 <xLastTime.2448+0x1>
    2686:	a0 91 b7 11 	lds	r26, 0x11B7	; 0x8011b7 <xLastTime.2448+0x2>
    268a:	b0 91 b8 11 	lds	r27, 0x11B8	; 0x8011b8 <xLastTime.2448+0x3>
    268e:	c8 16       	cp	r12, r24
    2690:	d9 06       	cpc	r13, r25
    2692:	ea 06       	cpc	r14, r26
    2694:	fb 06       	cpc	r15, r27
    2696:	20 f4       	brcc	.+8      	; 0x26a0 <prvSampleTimeNow+0x36>
        {
            prvSwitchTimerLists();
    2698:	80 df       	rcall	.-256    	; 0x259a <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
    269a:	81 e0       	ldi	r24, 0x01	; 1
    269c:	88 83       	st	Y, r24
    269e:	01 c0       	rjmp	.+2      	; 0x26a2 <prvSampleTimeNow+0x38>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    26a0:	18 82       	st	Y, r1
        }

        xLastTime = xTimeNow;
    26a2:	c0 92 b5 11 	sts	0x11B5, r12	; 0x8011b5 <xLastTime.2448>
    26a6:	d0 92 b6 11 	sts	0x11B6, r13	; 0x8011b6 <xLastTime.2448+0x1>
    26aa:	e0 92 b7 11 	sts	0x11B7, r14	; 0x8011b7 <xLastTime.2448+0x2>
    26ae:	f0 92 b8 11 	sts	0x11B8, r15	; 0x8011b8 <xLastTime.2448+0x3>

        return xTimeNow;
    }
    26b2:	c7 01       	movw	r24, r14
    26b4:	b6 01       	movw	r22, r12
    26b6:	df 91       	pop	r29
    26b8:	cf 91       	pop	r28
    26ba:	ff 90       	pop	r15
    26bc:	ef 90       	pop	r14
    26be:	df 90       	pop	r13
    26c0:	cf 90       	pop	r12
    26c2:	08 95       	ret

000026c4 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    26c4:	4f 92       	push	r4
    26c6:	5f 92       	push	r5
    26c8:	6f 92       	push	r6
    26ca:	7f 92       	push	r7
    26cc:	8f 92       	push	r8
    26ce:	9f 92       	push	r9
    26d0:	af 92       	push	r10
    26d2:	bf 92       	push	r11
    26d4:	cf 92       	push	r12
    26d6:	df 92       	push	r13
    26d8:	ef 92       	push	r14
    26da:	ff 92       	push	r15
    26dc:	0f 93       	push	r16
    26de:	1f 93       	push	r17
    26e0:	cf 93       	push	r28
    26e2:	df 93       	push	r29
    26e4:	4b 01       	movw	r8, r22
    26e6:	5c 01       	movw	r10, r24
    26e8:	29 01       	movw	r4, r18
    26ea:	3a 01       	movw	r6, r20
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    26ec:	e0 91 bf 11 	lds	r30, 0x11BF	; 0x8011bf <pxCurrentTimerList>
    26f0:	f0 91 c0 11 	lds	r31, 0x11C0	; 0x8011c0 <pxCurrentTimerList+0x1>
    26f4:	07 80       	ldd	r0, Z+7	; 0x07
    26f6:	f0 85       	ldd	r31, Z+8	; 0x08
    26f8:	e0 2d       	mov	r30, r0
    26fa:	c0 85       	ldd	r28, Z+8	; 0x08
    26fc:	d1 85       	ldd	r29, Z+9	; 0x09

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    26fe:	ce 01       	movw	r24, r28
    2700:	02 96       	adiw	r24, 0x02	; 2
    2702:	0e 94 5f 04 	call	0x8be	; 0x8be <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2706:	8e 89       	ldd	r24, Y+22	; 0x16
    2708:	82 ff       	sbrs	r24, 2
    270a:	1b c0       	rjmp	.+54     	; 0x2742 <prvProcessExpiredTimer+0x7e>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    270c:	4e 85       	ldd	r20, Y+14	; 0x0e
    270e:	5f 85       	ldd	r21, Y+15	; 0x0f
    2710:	68 89       	ldd	r22, Y+16	; 0x10
    2712:	79 89       	ldd	r23, Y+17	; 0x11
    2714:	48 0d       	add	r20, r8
    2716:	59 1d       	adc	r21, r9
    2718:	6a 1d       	adc	r22, r10
    271a:	7b 1d       	adc	r23, r11
    271c:	75 01       	movw	r14, r10
    271e:	64 01       	movw	r12, r8
    2720:	93 01       	movw	r18, r6
    2722:	82 01       	movw	r16, r4
    2724:	ce 01       	movw	r24, r28
    2726:	49 de       	rcall	.-878    	; 0x23ba <prvInsertTimerInActiveList>
    2728:	88 23       	and	r24, r24
    272a:	69 f0       	breq	.+26     	; 0x2746 <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    272c:	c1 2c       	mov	r12, r1
    272e:	d1 2c       	mov	r13, r1
    2730:	76 01       	movw	r14, r12
    2732:	00 e0       	ldi	r16, 0x00	; 0
    2734:	10 e0       	ldi	r17, 0x00	; 0
    2736:	a5 01       	movw	r20, r10
    2738:	94 01       	movw	r18, r8
    273a:	60 e0       	ldi	r22, 0x00	; 0
    273c:	ce 01       	movw	r24, r28
    273e:	cf de       	rcall	.-610    	; 0x24de <xTimerGenericCommand>
    2740:	02 c0       	rjmp	.+4      	; 0x2746 <prvProcessExpiredTimer+0x82>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    2742:	8e 7f       	andi	r24, 0xFE	; 254
    2744:	8e 8b       	std	Y+22, r24	; 0x16
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2746:	ec 89       	ldd	r30, Y+20	; 0x14
    2748:	fd 89       	ldd	r31, Y+21	; 0x15
    274a:	ce 01       	movw	r24, r28
    274c:	19 95       	eicall
    }
    274e:	df 91       	pop	r29
    2750:	cf 91       	pop	r28
    2752:	1f 91       	pop	r17
    2754:	0f 91       	pop	r16
    2756:	ff 90       	pop	r15
    2758:	ef 90       	pop	r14
    275a:	df 90       	pop	r13
    275c:	cf 90       	pop	r12
    275e:	bf 90       	pop	r11
    2760:	af 90       	pop	r10
    2762:	9f 90       	pop	r9
    2764:	8f 90       	pop	r8
    2766:	7f 90       	pop	r7
    2768:	6f 90       	pop	r6
    276a:	5f 90       	pop	r5
    276c:	4f 90       	pop	r4
    276e:	08 95       	ret

00002770 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
    2770:	8f 92       	push	r8
    2772:	9f 92       	push	r9
    2774:	af 92       	push	r10
    2776:	bf 92       	push	r11
    2778:	cf 92       	push	r12
    277a:	df 92       	push	r13
    277c:	ef 92       	push	r14
    277e:	ff 92       	push	r15
    2780:	1f 93       	push	r17
    2782:	cf 93       	push	r28
    2784:	df 93       	push	r29
    2786:	1f 92       	push	r1
    2788:	cd b7       	in	r28, 0x3d	; 61
    278a:	de b7       	in	r29, 0x3e	; 62
    278c:	6b 01       	movw	r12, r22
    278e:	7c 01       	movw	r14, r24
    2790:	14 2f       	mov	r17, r20
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    2792:	0e 94 bc 0b 	call	0x1778	; 0x1778 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    2796:	ce 01       	movw	r24, r28
    2798:	01 96       	adiw	r24, 0x01	; 1
    279a:	67 df       	rcall	.-306    	; 0x266a <prvSampleTimeNow>
    279c:	4b 01       	movw	r8, r22
    279e:	5c 01       	movw	r10, r24

            if( xTimerListsWereSwitched == pdFALSE )
    27a0:	89 81       	ldd	r24, Y+1	; 0x01
    27a2:	81 11       	cpse	r24, r1
    27a4:	2b c0       	rjmp	.+86     	; 0x27fc <prvProcessTimerOrBlockTask+0x8c>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    27a6:	11 11       	cpse	r17, r1
    27a8:	0c c0       	rjmp	.+24     	; 0x27c2 <prvProcessTimerOrBlockTask+0x52>
    27aa:	8c 14       	cp	r8, r12
    27ac:	9d 04       	cpc	r9, r13
    27ae:	ae 04       	cpc	r10, r14
    27b0:	bf 04       	cpc	r11, r15
                {
                    ( void ) xTaskResumeAll();
    27b2:	38 f0       	brcs	.+14     	; 0x27c2 <prvProcessTimerOrBlockTask+0x52>
    27b4:	21 d9       	rcall	.-3518   	; 0x19f8 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    27b6:	a5 01       	movw	r20, r10
    27b8:	94 01       	movw	r18, r8
    27ba:	c7 01       	movw	r24, r14
    27bc:	b6 01       	movw	r22, r12
    27be:	82 df       	rcall	.-252    	; 0x26c4 <prvProcessExpiredTimer>
    27c0:	1e c0       	rjmp	.+60     	; 0x27fe <prvProcessTimerOrBlockTask+0x8e>
                     * time has not been reached yet.  This task should therefore
                     * block to wait for the next expire time or a command to be
                     * received - whichever comes first.  The following line cannot
                     * be reached unless xNextExpireTime > xTimeNow, except in the
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
    27c2:	11 23       	and	r17, r17
    27c4:	41 f0       	breq	.+16     	; 0x27d6 <prvProcessTimerOrBlockTask+0x66>
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    27c6:	e0 91 bd 11 	lds	r30, 0x11BD	; 0x8011bd <pxOverflowTimerList>
    27ca:	f0 91 be 11 	lds	r31, 0x11BE	; 0x8011be <pxOverflowTimerList+0x1>
    27ce:	80 81       	ld	r24, Z
    27d0:	11 e0       	ldi	r17, 0x01	; 1
    27d2:	81 11       	cpse	r24, r1
    27d4:	10 e0       	ldi	r17, 0x00	; 0
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    27d6:	b7 01       	movw	r22, r14
    27d8:	a6 01       	movw	r20, r12
    27da:	48 19       	sub	r20, r8
    27dc:	59 09       	sbc	r21, r9
    27de:	6a 09       	sbc	r22, r10
    27e0:	7b 09       	sbc	r23, r11
    27e2:	21 2f       	mov	r18, r17
    27e4:	80 91 bb 11 	lds	r24, 0x11BB	; 0x8011bb <xTimerQueue>
    27e8:	90 91 bc 11 	lds	r25, 0x11BC	; 0x8011bc <xTimerQueue+0x1>
    27ec:	0e 94 0f 09 	call	0x121e	; 0x121e <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
    27f0:	03 d9       	rcall	.-3578   	; 0x19f8 <xTaskResumeAll>
    27f2:	81 11       	cpse	r24, r1
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
    27f4:	04 c0       	rjmp	.+8      	; 0x27fe <prvProcessTimerOrBlockTask+0x8e>
    27f6:	0e 94 db 04 	call	0x9b6	; 0x9b6 <vPortYield>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    27fa:	01 c0       	rjmp	.+2      	; 0x27fe <prvProcessTimerOrBlockTask+0x8e>
    27fc:	fd d8       	rcall	.-3590   	; 0x19f8 <xTaskResumeAll>
            }
        }
    }
    27fe:	0f 90       	pop	r0
    2800:	df 91       	pop	r29
    2802:	cf 91       	pop	r28
    2804:	1f 91       	pop	r17
    2806:	ff 90       	pop	r15
    2808:	ef 90       	pop	r14
    280a:	df 90       	pop	r13
    280c:	cf 90       	pop	r12
    280e:	bf 90       	pop	r11
    2810:	af 90       	pop	r10
    2812:	9f 90       	pop	r9
    2814:	8f 90       	pop	r8
    2816:	08 95       	ret

00002818 <prvProcessReceivedCommands>:
        return xProcessTimerNow;
    }
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
    2818:	af 92       	push	r10
    281a:	bf 92       	push	r11
    281c:	cf 92       	push	r12
    281e:	df 92       	push	r13
    2820:	ef 92       	push	r14
    2822:	ff 92       	push	r15
    2824:	0f 93       	push	r16
    2826:	1f 93       	push	r17
    2828:	cf 93       	push	r28
    282a:	df 93       	push	r29
    282c:	cd b7       	in	r28, 0x3d	; 61
    282e:	de b7       	in	r29, 0x3e	; 62
    2830:	28 97       	sbiw	r28, 0x08	; 8
    2832:	0f b6       	in	r0, 0x3f	; 63
    2834:	f8 94       	cli
    2836:	de bf       	out	0x3e, r29	; 62
    2838:	0f be       	out	0x3f, r0	; 63
    283a:	cd bf       	out	0x3d, r28	; 61
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    283c:	81 c0       	rjmp	.+258    	; 0x2940 <prvProcessReceivedCommands+0x128>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    283e:	89 81       	ldd	r24, Y+1	; 0x01
    2840:	88 23       	and	r24, r24
    2842:	0c f4       	brge	.+2      	; 0x2846 <prvProcessReceivedCommands+0x2e>
    2844:	7d c0       	rjmp	.+250    	; 0x2940 <prvProcessReceivedCommands+0x128>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    2846:	ae 80       	ldd	r10, Y+6	; 0x06
    2848:	bf 80       	ldd	r11, Y+7	; 0x07

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    284a:	d5 01       	movw	r26, r10
    284c:	1c 96       	adiw	r26, 0x0c	; 12
    284e:	8d 91       	ld	r24, X+
    2850:	9c 91       	ld	r25, X
    2852:	1d 97       	sbiw	r26, 0x0d	; 13
    2854:	89 2b       	or	r24, r25
    2856:	21 f0       	breq	.+8      	; 0x2860 <prvProcessReceivedCommands+0x48>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2858:	c5 01       	movw	r24, r10
    285a:	02 96       	adiw	r24, 0x02	; 2
    285c:	0e 94 5f 04 	call	0x8be	; 0x8be <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    2860:	ce 01       	movw	r24, r28
    2862:	08 96       	adiw	r24, 0x08	; 8
    2864:	02 df       	rcall	.-508    	; 0x266a <prvSampleTimeNow>
    2866:	8b 01       	movw	r16, r22
    2868:	9c 01       	movw	r18, r24

                switch( xMessage.xMessageID )
    286a:	e9 81       	ldd	r30, Y+1	; 0x01
    286c:	0e 2e       	mov	r0, r30
    286e:	00 0c       	add	r0, r0
    2870:	ff 0b       	sbc	r31, r31
    2872:	ea 30       	cpi	r30, 0x0A	; 10
    2874:	f1 05       	cpc	r31, r1
    2876:	08 f0       	brcs	.+2      	; 0x287a <prvProcessReceivedCommands+0x62>
    2878:	63 c0       	rjmp	.+198    	; 0x2940 <prvProcessReceivedCommands+0x128>
    287a:	88 27       	eor	r24, r24
    287c:	ee 58       	subi	r30, 0x8E	; 142
    287e:	ff 4f       	sbci	r31, 0xFF	; 255
    2880:	8f 4f       	sbci	r24, 0xFF	; 255
    2882:	d6 c7       	rjmp	.+4012   	; 0x3830 <__tablejump2__>
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    2884:	f5 01       	movw	r30, r10
    2886:	86 89       	ldd	r24, Z+22	; 0x16
    2888:	81 60       	ori	r24, 0x01	; 1
    288a:	86 8b       	std	Z+22, r24	; 0x16

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    288c:	ca 80       	ldd	r12, Y+2	; 0x02
    288e:	db 80       	ldd	r13, Y+3	; 0x03
    2890:	ec 80       	ldd	r14, Y+4	; 0x04
    2892:	fd 80       	ldd	r15, Y+5	; 0x05
    2894:	46 85       	ldd	r20, Z+14	; 0x0e
    2896:	57 85       	ldd	r21, Z+15	; 0x0f
    2898:	60 89       	ldd	r22, Z+16	; 0x10
    289a:	71 89       	ldd	r23, Z+17	; 0x11
    289c:	4c 0d       	add	r20, r12
    289e:	5d 1d       	adc	r21, r13
    28a0:	6e 1d       	adc	r22, r14
    28a2:	7f 1d       	adc	r23, r15
    28a4:	c5 01       	movw	r24, r10
    28a6:	89 dd       	rcall	.-1262   	; 0x23ba <prvInsertTimerInActiveList>
    28a8:	88 23       	and	r24, r24
    28aa:	09 f4       	brne	.+2      	; 0x28ae <prvProcessReceivedCommands+0x96>
    28ac:	49 c0       	rjmp	.+146    	; 0x2940 <prvProcessReceivedCommands+0x128>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    28ae:	d5 01       	movw	r26, r10
    28b0:	54 96       	adiw	r26, 0x14	; 20
    28b2:	ed 91       	ld	r30, X+
    28b4:	fc 91       	ld	r31, X
    28b6:	55 97       	sbiw	r26, 0x15	; 21
    28b8:	c5 01       	movw	r24, r10
    28ba:	19 95       	eicall
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    28bc:	f5 01       	movw	r30, r10
    28be:	86 89       	ldd	r24, Z+22	; 0x16
    28c0:	82 ff       	sbrs	r24, 2
    28c2:	3e c0       	rjmp	.+124    	; 0x2940 <prvProcessReceivedCommands+0x128>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    28c4:	4a 81       	ldd	r20, Y+2	; 0x02
    28c6:	5b 81       	ldd	r21, Y+3	; 0x03
    28c8:	6c 81       	ldd	r22, Y+4	; 0x04
    28ca:	7d 81       	ldd	r23, Y+5	; 0x05
    28cc:	86 85       	ldd	r24, Z+14	; 0x0e
    28ce:	97 85       	ldd	r25, Z+15	; 0x0f
    28d0:	a0 89       	ldd	r26, Z+16	; 0x10
    28d2:	b1 89       	ldd	r27, Z+17	; 0x11
    28d4:	9a 01       	movw	r18, r20
    28d6:	ab 01       	movw	r20, r22
    28d8:	28 0f       	add	r18, r24
    28da:	39 1f       	adc	r19, r25
    28dc:	4a 1f       	adc	r20, r26
    28de:	5b 1f       	adc	r21, r27
    28e0:	c1 2c       	mov	r12, r1
    28e2:	d1 2c       	mov	r13, r1
    28e4:	76 01       	movw	r14, r12
    28e6:	00 e0       	ldi	r16, 0x00	; 0
    28e8:	10 e0       	ldi	r17, 0x00	; 0
    28ea:	60 e0       	ldi	r22, 0x00	; 0
    28ec:	c5 01       	movw	r24, r10
    28ee:	f7 dd       	rcall	.-1042   	; 0x24de <xTimerGenericCommand>
    28f0:	27 c0       	rjmp	.+78     	; 0x2940 <prvProcessReceivedCommands+0x128>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    28f2:	d5 01       	movw	r26, r10
    28f4:	56 96       	adiw	r26, 0x16	; 22
    28f6:	8c 91       	ld	r24, X
    28f8:	56 97       	sbiw	r26, 0x16	; 22
    28fa:	8e 7f       	andi	r24, 0xFE	; 254
    28fc:	56 96       	adiw	r26, 0x16	; 22
    28fe:	8c 93       	st	X, r24
                        break;
    2900:	1f c0       	rjmp	.+62     	; 0x2940 <prvProcessReceivedCommands+0x128>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    2902:	f5 01       	movw	r30, r10
    2904:	86 89       	ldd	r24, Z+22	; 0x16
    2906:	81 60       	ori	r24, 0x01	; 1
    2908:	86 8b       	std	Z+22, r24	; 0x16
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    290a:	4a 81       	ldd	r20, Y+2	; 0x02
    290c:	5b 81       	ldd	r21, Y+3	; 0x03
    290e:	6c 81       	ldd	r22, Y+4	; 0x04
    2910:	7d 81       	ldd	r23, Y+5	; 0x05
    2912:	46 87       	std	Z+14, r20	; 0x0e
    2914:	57 87       	std	Z+15, r21	; 0x0f
    2916:	60 8b       	std	Z+16, r22	; 0x10
    2918:	71 8b       	std	Z+17, r23	; 0x11
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    291a:	40 0f       	add	r20, r16
    291c:	51 1f       	adc	r21, r17
    291e:	62 1f       	adc	r22, r18
    2920:	73 1f       	adc	r23, r19
    2922:	68 01       	movw	r12, r16
    2924:	79 01       	movw	r14, r18
    2926:	c5 01       	movw	r24, r10
    2928:	48 dd       	rcall	.-1392   	; 0x23ba <prvInsertTimerInActiveList>
                        break;
    292a:	0a c0       	rjmp	.+20     	; 0x2940 <prvProcessReceivedCommands+0x128>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    292c:	f5 01       	movw	r30, r10
    292e:	86 89       	ldd	r24, Z+22	; 0x16
    2930:	81 fd       	sbrc	r24, 1
    2932:	04 c0       	rjmp	.+8      	; 0x293c <prvProcessReceivedCommands+0x124>
                                {
                                    vPortFree( pxTimer );
    2934:	c5 01       	movw	r24, r10
    2936:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <vPortFree>
    293a:	02 c0       	rjmp	.+4      	; 0x2940 <prvProcessReceivedCommands+0x128>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    293c:	8e 7f       	andi	r24, 0xFE	; 254
    293e:	86 8b       	std	Z+22, r24	; 0x16
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    2940:	20 e0       	ldi	r18, 0x00	; 0
    2942:	30 e0       	ldi	r19, 0x00	; 0
    2944:	a9 01       	movw	r20, r18
    2946:	be 01       	movw	r22, r28
    2948:	6f 5f       	subi	r22, 0xFF	; 255
    294a:	7f 4f       	sbci	r23, 0xFF	; 255
    294c:	80 91 bb 11 	lds	r24, 0x11BB	; 0x8011bb <xTimerQueue>
    2950:	90 91 bc 11 	lds	r25, 0x11BC	; 0x8011bc <xTimerQueue+0x1>
    2954:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <xQueueReceive>
    2958:	81 11       	cpse	r24, r1
    295a:	71 cf       	rjmp	.-286    	; 0x283e <prvProcessReceivedCommands+0x26>
                        /* Don't expect to get here. */
                        break;
                }
            }
        }
    }
    295c:	28 96       	adiw	r28, 0x08	; 8
    295e:	0f b6       	in	r0, 0x3f	; 63
    2960:	f8 94       	cli
    2962:	de bf       	out	0x3e, r29	; 62
    2964:	0f be       	out	0x3f, r0	; 63
    2966:	cd bf       	out	0x3d, r28	; 61
    2968:	df 91       	pop	r29
    296a:	cf 91       	pop	r28
    296c:	1f 91       	pop	r17
    296e:	0f 91       	pop	r16
    2970:	ff 90       	pop	r15
    2972:	ef 90       	pop	r14
    2974:	df 90       	pop	r13
    2976:	cf 90       	pop	r12
    2978:	bf 90       	pop	r11
    297a:	af 90       	pop	r10
    297c:	08 95       	ret

0000297e <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    297e:	08 95       	ret

00002980 <prvSetMainLedOn>:
 * Private function to enable board led to use it in application hooks
 */
void prvSetMainLedOn( void ) 
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    2980:	84 b1       	in	r24, 0x04	; 4
    2982:	80 68       	ori	r24, 0x80	; 128
    2984:	84 b9       	out	0x04, r24	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    2986:	85 b1       	in	r24, 0x05	; 5
    2988:	80 68       	ori	r24, 0x80	; 128
    298a:	85 b9       	out	0x05, r24	; 5
    298c:	08 95       	ret

0000298e <prvBlinkMainLed>:
 */
void prvBlinkMainLed( void ) 
{

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    298e:	83 b1       	in	r24, 0x03	; 3
    2990:	80 68       	ori	r24, 0x80	; 128
    2992:	83 b9       	out	0x03, r24	; 3
    2994:	08 95       	ret

00002996 <vApplicationMallocFailedHook>:
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    prvSetMainLedOn(); // Main LED on.
    2996:	f4 df       	rcall	.-24     	; 0x2980 <prvSetMainLedOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2998:	2f ef       	ldi	r18, 0xFF	; 255
    299a:	80 e7       	ldi	r24, 0x70	; 112
    299c:	92 e0       	ldi	r25, 0x02	; 2
    299e:	21 50       	subi	r18, 0x01	; 1
    29a0:	80 40       	sbci	r24, 0x00	; 0
    29a2:	90 40       	sbci	r25, 0x00	; 0
    29a4:	e1 f7       	brne	.-8      	; 0x299e <vApplicationMallocFailedHook+0x8>
    29a6:	00 c0       	rjmp	.+0      	; 0x29a8 <vApplicationMallocFailedHook+0x12>
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    29a8:	00 00       	nop
    29aa:	f1 df       	rcall	.-30     	; 0x298e <prvBlinkMainLed>
    29ac:	f5 cf       	rjmp	.-22     	; 0x2998 <vApplicationMallocFailedHook+0x2>

000029ae <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)),
                                    char * pcTaskName __attribute__((unused)) )
{

    prvSetMainLedOn(); // Main LED on.
    29ae:	e8 df       	rcall	.-48     	; 0x2980 <prvSetMainLedOn>
    29b0:	2f ef       	ldi	r18, 0xFF	; 255
    29b2:	87 ea       	ldi	r24, 0xA7	; 167
    29b4:	91 e6       	ldi	r25, 0x61	; 97
    29b6:	21 50       	subi	r18, 0x01	; 1
    29b8:	80 40       	sbci	r24, 0x00	; 0
    29ba:	90 40       	sbci	r25, 0x00	; 0
    29bc:	e1 f7       	brne	.-8      	; 0x29b6 <vApplicationStackOverflowHook+0x8>
    29be:	00 c0       	rjmp	.+0      	; 0x29c0 <vApplicationStackOverflowHook+0x12>

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    29c0:	00 00       	nop
    29c2:	e5 df       	rcall	.-54     	; 0x298e <prvBlinkMainLed>
    29c4:	f5 cf       	rjmp	.-22     	; 0x29b0 <vApplicationStackOverflowHook+0x2>

000029c6 <initializeSystem>:
	return 0;
}

void initializeSystem(void)
{
	trace_init();
    29c6:	0e 94 8c 02 	call	0x518	; 0x518 <trace_init>
	stdio_initialise(ser_USART0);
    29ca:	80 e0       	ldi	r24, 0x00	; 0
    29cc:	9f d0       	rcall	.+318    	; 0x2b0c <stdio_initialise>
	status_leds_initialise(5);
    29ce:	85 e0       	ldi	r24, 0x05	; 5
    29d0:	90 e0       	ldi	r25, 0x00	; 0
    29d2:	a3 d1       	rcall	.+838    	; 0x2d1a <status_leds_initialise>
	DDRC |= (1 << P_LIGHT_PIN_Front);
    29d4:	87 b1       	in	r24, 0x07	; 7
    29d6:	81 60       	ori	r24, 0x01	; 1
    29d8:	87 b9       	out	0x07, r24	; 7
	PORTC &= ~(1 << P_LIGHT_PIN_Front);
    29da:	88 b1       	in	r24, 0x08	; 8
    29dc:	8e 7f       	andi	r24, 0xFE	; 254
    29de:	88 b9       	out	0x08, r24	; 8
	DDRC |= (1 << P_LIGHT_PIN_Back);
    29e0:	87 b1       	in	r24, 0x07	; 7
    29e2:	80 64       	ori	r24, 0x40	; 64
    29e4:	87 b9       	out	0x07, r24	; 7
	PORTC &= ~(1 << P_LIGHT_PIN_Back);
    29e6:	88 b1       	in	r24, 0x08	; 8
    29e8:	8f 7b       	andi	r24, 0xBF	; 191
    29ea:	88 b9       	out	0x08, r24	; 8
	hc_sr04_init();
    29ec:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <hc_sr04_init>

	printf("System Initialization Complete\n");
    29f0:	8c e0       	ldi	r24, 0x0C	; 12
    29f2:	93 e0       	ldi	r25, 0x03	; 3
    29f4:	0c 94 e0 1d 	jmp	0x3bc0	; 0x3bc0 <puts>
    29f8:	08 95       	ret

000029fa <main>:
void initializeSystem(void);
#include "application.h"

int main(void)
{
	initializeSystem();  // Initialize system configurations
    29fa:	e5 df       	rcall	.-54     	; 0x29c6 <initializeSystem>

	create_all_application_tasks();  // Create all tasks from application.c
    29fc:	0e 94 b7 00 	call	0x16e	; 0x16e <create_all_application_tasks>
	vTaskStartScheduler();  // Start the scheduler
    2a00:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <vTaskStartScheduler>
    2a04:	ff cf       	rjmp	.-2      	; 0x2a04 <main+0xa>

00002a06 <__floatunsisf>:
    2a06:	e8 94       	clt
    2a08:	09 c0       	rjmp	.+18     	; 0x2a1c <__floatsisf+0x12>

00002a0a <__floatsisf>:
    2a0a:	97 fb       	bst	r25, 7
    2a0c:	3e f4       	brtc	.+14     	; 0x2a1c <__floatsisf+0x12>
    2a0e:	90 95       	com	r25
    2a10:	80 95       	com	r24
    2a12:	70 95       	com	r23
    2a14:	61 95       	neg	r22
    2a16:	7f 4f       	sbci	r23, 0xFF	; 255
    2a18:	8f 4f       	sbci	r24, 0xFF	; 255
    2a1a:	9f 4f       	sbci	r25, 0xFF	; 255
    2a1c:	99 23       	and	r25, r25
    2a1e:	a9 f0       	breq	.+42     	; 0x2a4a <__floatsisf+0x40>
    2a20:	f9 2f       	mov	r31, r25
    2a22:	96 e9       	ldi	r25, 0x96	; 150
    2a24:	bb 27       	eor	r27, r27
    2a26:	93 95       	inc	r25
    2a28:	f6 95       	lsr	r31
    2a2a:	87 95       	ror	r24
    2a2c:	77 95       	ror	r23
    2a2e:	67 95       	ror	r22
    2a30:	b7 95       	ror	r27
    2a32:	f1 11       	cpse	r31, r1
    2a34:	f8 cf       	rjmp	.-16     	; 0x2a26 <__floatsisf+0x1c>
    2a36:	fa f4       	brpl	.+62     	; 0x2a76 <__floatsisf+0x6c>
    2a38:	bb 0f       	add	r27, r27
    2a3a:	11 f4       	brne	.+4      	; 0x2a40 <__floatsisf+0x36>
    2a3c:	60 ff       	sbrs	r22, 0
    2a3e:	1b c0       	rjmp	.+54     	; 0x2a76 <__floatsisf+0x6c>
    2a40:	6f 5f       	subi	r22, 0xFF	; 255
    2a42:	7f 4f       	sbci	r23, 0xFF	; 255
    2a44:	8f 4f       	sbci	r24, 0xFF	; 255
    2a46:	9f 4f       	sbci	r25, 0xFF	; 255
    2a48:	16 c0       	rjmp	.+44     	; 0x2a76 <__floatsisf+0x6c>
    2a4a:	88 23       	and	r24, r24
    2a4c:	11 f0       	breq	.+4      	; 0x2a52 <__floatsisf+0x48>
    2a4e:	96 e9       	ldi	r25, 0x96	; 150
    2a50:	11 c0       	rjmp	.+34     	; 0x2a74 <__floatsisf+0x6a>
    2a52:	77 23       	and	r23, r23
    2a54:	21 f0       	breq	.+8      	; 0x2a5e <__floatsisf+0x54>
    2a56:	9e e8       	ldi	r25, 0x8E	; 142
    2a58:	87 2f       	mov	r24, r23
    2a5a:	76 2f       	mov	r23, r22
    2a5c:	05 c0       	rjmp	.+10     	; 0x2a68 <__floatsisf+0x5e>
    2a5e:	66 23       	and	r22, r22
    2a60:	71 f0       	breq	.+28     	; 0x2a7e <__floatsisf+0x74>
    2a62:	96 e8       	ldi	r25, 0x86	; 134
    2a64:	86 2f       	mov	r24, r22
    2a66:	70 e0       	ldi	r23, 0x00	; 0
    2a68:	60 e0       	ldi	r22, 0x00	; 0
    2a6a:	2a f0       	brmi	.+10     	; 0x2a76 <__floatsisf+0x6c>
    2a6c:	9a 95       	dec	r25
    2a6e:	66 0f       	add	r22, r22
    2a70:	77 1f       	adc	r23, r23
    2a72:	88 1f       	adc	r24, r24
    2a74:	da f7       	brpl	.-10     	; 0x2a6c <__floatsisf+0x62>
    2a76:	88 0f       	add	r24, r24
    2a78:	96 95       	lsr	r25
    2a7a:	87 95       	ror	r24
    2a7c:	97 f9       	bld	r25, 7
    2a7e:	08 95       	ret

00002a80 <__gesf2>:
    2a80:	03 d0       	rcall	.+6      	; 0x2a88 <__fp_cmp>
    2a82:	08 f4       	brcc	.+2      	; 0x2a86 <__gesf2+0x6>
    2a84:	8f ef       	ldi	r24, 0xFF	; 255
    2a86:	08 95       	ret

00002a88 <__fp_cmp>:
    2a88:	99 0f       	add	r25, r25
    2a8a:	00 08       	sbc	r0, r0
    2a8c:	55 0f       	add	r21, r21
    2a8e:	aa 0b       	sbc	r26, r26
    2a90:	e0 e8       	ldi	r30, 0x80	; 128
    2a92:	fe ef       	ldi	r31, 0xFE	; 254
    2a94:	16 16       	cp	r1, r22
    2a96:	17 06       	cpc	r1, r23
    2a98:	e8 07       	cpc	r30, r24
    2a9a:	f9 07       	cpc	r31, r25
    2a9c:	c0 f0       	brcs	.+48     	; 0x2ace <__fp_cmp+0x46>
    2a9e:	12 16       	cp	r1, r18
    2aa0:	13 06       	cpc	r1, r19
    2aa2:	e4 07       	cpc	r30, r20
    2aa4:	f5 07       	cpc	r31, r21
    2aa6:	98 f0       	brcs	.+38     	; 0x2ace <__fp_cmp+0x46>
    2aa8:	62 1b       	sub	r22, r18
    2aaa:	73 0b       	sbc	r23, r19
    2aac:	84 0b       	sbc	r24, r20
    2aae:	95 0b       	sbc	r25, r21
    2ab0:	39 f4       	brne	.+14     	; 0x2ac0 <__fp_cmp+0x38>
    2ab2:	0a 26       	eor	r0, r26
    2ab4:	61 f0       	breq	.+24     	; 0x2ace <__fp_cmp+0x46>
    2ab6:	23 2b       	or	r18, r19
    2ab8:	24 2b       	or	r18, r20
    2aba:	25 2b       	or	r18, r21
    2abc:	21 f4       	brne	.+8      	; 0x2ac6 <__fp_cmp+0x3e>
    2abe:	08 95       	ret
    2ac0:	0a 26       	eor	r0, r26
    2ac2:	09 f4       	brne	.+2      	; 0x2ac6 <__fp_cmp+0x3e>
    2ac4:	a1 40       	sbci	r26, 0x01	; 1
    2ac6:	a6 95       	lsr	r26
    2ac8:	8f ef       	ldi	r24, 0xFF	; 255
    2aca:	81 1d       	adc	r24, r1
    2acc:	81 1d       	adc	r24, r1
    2ace:	08 95       	ret

00002ad0 <usart_getchar>:
    2ad0:	cf 93       	push	r28
    2ad2:	df 93       	push	r29
    2ad4:	1f 92       	push	r1
    2ad6:	cd b7       	in	r28, 0x3d	; 61
    2ad8:	de b7       	in	r29, 0x3e	; 62
    2ada:	be 01       	movw	r22, r28
    2adc:	6f 5f       	subi	r22, 0xFF	; 255
    2ade:	7f 4f       	sbci	r23, 0xFF	; 255
    2ae0:	80 91 d7 11 	lds	r24, 0x11D7	; 0x8011d7 <_com_serial_instance>
    2ae4:	90 91 d8 11 	lds	r25, 0x11D8	; 0x8011d8 <_com_serial_instance+0x1>
    2ae8:	2d d2       	rcall	.+1114   	; 0x2f44 <serial_getByte>
    2aea:	81 11       	cpse	r24, r1
    2aec:	f6 cf       	rjmp	.-20     	; 0x2ada <usart_getchar+0xa>
    2aee:	89 81       	ldd	r24, Y+1	; 0x01
    2af0:	90 e0       	ldi	r25, 0x00	; 0
    2af2:	0f 90       	pop	r0
    2af4:	df 91       	pop	r29
    2af6:	cf 91       	pop	r28
    2af8:	08 95       	ret

00002afa <usart_putchar>:
    2afa:	68 2f       	mov	r22, r24
    2afc:	80 91 d7 11 	lds	r24, 0x11D7	; 0x8011d7 <_com_serial_instance>
    2b00:	90 91 d8 11 	lds	r25, 0x11D8	; 0x8011d8 <_com_serial_instance+0x1>
    2b04:	f4 d1       	rcall	.+1000   	; 0x2eee <serial_sendByte>
    2b06:	80 e0       	ldi	r24, 0x00	; 0
    2b08:	90 e0       	ldi	r25, 0x00	; 0
    2b0a:	08 95       	ret

00002b0c <stdio_initialise>:
    2b0c:	8f 92       	push	r8
    2b0e:	9f 92       	push	r9
    2b10:	af 92       	push	r10
    2b12:	cf 92       	push	r12
    2b14:	ef 92       	push	r14
    2b16:	0f 93       	push	r16
    2b18:	81 2c       	mov	r8, r1
    2b1a:	91 2c       	mov	r9, r1
    2b1c:	68 94       	set
    2b1e:	aa 24       	eor	r10, r10
    2b20:	a7 f8       	bld	r10, 7
    2b22:	68 94       	set
    2b24:	cc 24       	eor	r12, r12
    2b26:	c7 f8       	bld	r12, 7
    2b28:	e1 2c       	mov	r14, r1
    2b2a:	00 e0       	ldi	r16, 0x00	; 0
    2b2c:	23 e0       	ldi	r18, 0x03	; 3
    2b2e:	40 e0       	ldi	r20, 0x00	; 0
    2b30:	51 ee       	ldi	r21, 0xE1	; 225
    2b32:	60 e0       	ldi	r22, 0x00	; 0
    2b34:	70 e0       	ldi	r23, 0x00	; 0
    2b36:	3f d1       	rcall	.+638    	; 0x2db6 <serial_create>
    2b38:	90 93 d8 11 	sts	0x11D8, r25	; 0x8011d8 <_com_serial_instance+0x1>
    2b3c:	80 93 d7 11 	sts	0x11D7, r24	; 0x8011d7 <_com_serial_instance>
    2b40:	e3 e0       	ldi	r30, 0x03	; 3
    2b42:	f2 e1       	ldi	r31, 0x12	; 18
    2b44:	8b e0       	ldi	r24, 0x0B	; 11
    2b46:	92 e0       	ldi	r25, 0x02	; 2
    2b48:	91 83       	std	Z+1, r25	; 0x01
    2b4a:	80 83       	st	Z, r24
    2b4c:	93 83       	std	Z+3, r25	; 0x03
    2b4e:	82 83       	std	Z+2, r24	; 0x02
    2b50:	0f 91       	pop	r16
    2b52:	ef 90       	pop	r14
    2b54:	cf 90       	pop	r12
    2b56:	af 90       	pop	r10
    2b58:	9f 90       	pop	r9
    2b5a:	8f 90       	pop	r8
    2b5c:	08 95       	ret

00002b5e <_turn_off>:
    2b5e:	90 e0       	ldi	r25, 0x00	; 0
    2b60:	fc 01       	movw	r30, r24
    2b62:	ee 0f       	add	r30, r30
    2b64:	ff 1f       	adc	r31, r31
    2b66:	e8 0f       	add	r30, r24
    2b68:	f9 1f       	adc	r31, r25
    2b6a:	ee 0f       	add	r30, r30
    2b6c:	ff 1f       	adc	r31, r31
    2b6e:	e7 52       	subi	r30, 0x27	; 39
    2b70:	fe 4e       	sbci	r31, 0xEE	; 238
    2b72:	23 81       	ldd	r18, Z+3	; 0x03
    2b74:	21 11       	cpse	r18, r1
    2b76:	1f c0       	rjmp	.+62     	; 0x2bb6 <_turn_off+0x58>
    2b78:	9c 01       	movw	r18, r24
    2b7a:	22 0f       	add	r18, r18
    2b7c:	33 1f       	adc	r19, r19
    2b7e:	f9 01       	movw	r30, r18
    2b80:	e8 0f       	add	r30, r24
    2b82:	f9 1f       	adc	r31, r25
    2b84:	ee 0f       	add	r30, r30
    2b86:	ff 1f       	adc	r31, r31
    2b88:	e7 52       	subi	r30, 0x27	; 39
    2b8a:	fe 4e       	sbci	r31, 0xEE	; 238
    2b8c:	a0 81       	ld	r26, Z
    2b8e:	b1 81       	ldd	r27, Z+1	; 0x01
    2b90:	4c 91       	ld	r20, X
    2b92:	f9 01       	movw	r30, r18
    2b94:	e8 0f       	add	r30, r24
    2b96:	f9 1f       	adc	r31, r25
    2b98:	ee 0f       	add	r30, r30
    2b9a:	ff 1f       	adc	r31, r31
    2b9c:	e7 52       	subi	r30, 0x27	; 39
    2b9e:	fe 4e       	sbci	r31, 0xEE	; 238
    2ba0:	81 e0       	ldi	r24, 0x01	; 1
    2ba2:	90 e0       	ldi	r25, 0x00	; 0
    2ba4:	02 80       	ldd	r0, Z+2	; 0x02
    2ba6:	02 c0       	rjmp	.+4      	; 0x2bac <_turn_off+0x4e>
    2ba8:	88 0f       	add	r24, r24
    2baa:	99 1f       	adc	r25, r25
    2bac:	0a 94       	dec	r0
    2bae:	e2 f7       	brpl	.-8      	; 0x2ba8 <_turn_off+0x4a>
    2bb0:	84 2b       	or	r24, r20
    2bb2:	8c 93       	st	X, r24
    2bb4:	08 95       	ret
    2bb6:	fc 01       	movw	r30, r24
    2bb8:	ee 0f       	add	r30, r30
    2bba:	ff 1f       	adc	r31, r31
    2bbc:	df 01       	movw	r26, r30
    2bbe:	a8 0f       	add	r26, r24
    2bc0:	b9 1f       	adc	r27, r25
    2bc2:	aa 0f       	add	r26, r26
    2bc4:	bb 1f       	adc	r27, r27
    2bc6:	a7 52       	subi	r26, 0x27	; 39
    2bc8:	be 4e       	sbci	r27, 0xEE	; 238
    2bca:	0d 90       	ld	r0, X+
    2bcc:	bc 91       	ld	r27, X
    2bce:	a0 2d       	mov	r26, r0
    2bd0:	2c 91       	ld	r18, X
    2bd2:	e8 0f       	add	r30, r24
    2bd4:	f9 1f       	adc	r31, r25
    2bd6:	ee 0f       	add	r30, r30
    2bd8:	ff 1f       	adc	r31, r31
    2bda:	e7 52       	subi	r30, 0x27	; 39
    2bdc:	fe 4e       	sbci	r31, 0xEE	; 238
    2bde:	81 e0       	ldi	r24, 0x01	; 1
    2be0:	90 e0       	ldi	r25, 0x00	; 0
    2be2:	02 80       	ldd	r0, Z+2	; 0x02
    2be4:	02 c0       	rjmp	.+4      	; 0x2bea <_turn_off+0x8c>
    2be6:	88 0f       	add	r24, r24
    2be8:	99 1f       	adc	r25, r25
    2bea:	0a 94       	dec	r0
    2bec:	e2 f7       	brpl	.-8      	; 0x2be6 <_turn_off+0x88>
    2bee:	80 95       	com	r24
    2bf0:	82 23       	and	r24, r18
    2bf2:	8c 93       	st	X, r24
    2bf4:	08 95       	ret

00002bf6 <_turn_on>:
    2bf6:	90 e0       	ldi	r25, 0x00	; 0
    2bf8:	fc 01       	movw	r30, r24
    2bfa:	ee 0f       	add	r30, r30
    2bfc:	ff 1f       	adc	r31, r31
    2bfe:	e8 0f       	add	r30, r24
    2c00:	f9 1f       	adc	r31, r25
    2c02:	ee 0f       	add	r30, r30
    2c04:	ff 1f       	adc	r31, r31
    2c06:	e7 52       	subi	r30, 0x27	; 39
    2c08:	fe 4e       	sbci	r31, 0xEE	; 238
    2c0a:	23 81       	ldd	r18, Z+3	; 0x03
    2c0c:	21 11       	cpse	r18, r1
    2c0e:	20 c0       	rjmp	.+64     	; 0x2c50 <_turn_on+0x5a>
    2c10:	9c 01       	movw	r18, r24
    2c12:	22 0f       	add	r18, r18
    2c14:	33 1f       	adc	r19, r19
    2c16:	f9 01       	movw	r30, r18
    2c18:	e8 0f       	add	r30, r24
    2c1a:	f9 1f       	adc	r31, r25
    2c1c:	ee 0f       	add	r30, r30
    2c1e:	ff 1f       	adc	r31, r31
    2c20:	e7 52       	subi	r30, 0x27	; 39
    2c22:	fe 4e       	sbci	r31, 0xEE	; 238
    2c24:	a0 81       	ld	r26, Z
    2c26:	b1 81       	ldd	r27, Z+1	; 0x01
    2c28:	4c 91       	ld	r20, X
    2c2a:	f9 01       	movw	r30, r18
    2c2c:	e8 0f       	add	r30, r24
    2c2e:	f9 1f       	adc	r31, r25
    2c30:	ee 0f       	add	r30, r30
    2c32:	ff 1f       	adc	r31, r31
    2c34:	e7 52       	subi	r30, 0x27	; 39
    2c36:	fe 4e       	sbci	r31, 0xEE	; 238
    2c38:	81 e0       	ldi	r24, 0x01	; 1
    2c3a:	90 e0       	ldi	r25, 0x00	; 0
    2c3c:	02 80       	ldd	r0, Z+2	; 0x02
    2c3e:	02 c0       	rjmp	.+4      	; 0x2c44 <_turn_on+0x4e>
    2c40:	88 0f       	add	r24, r24
    2c42:	99 1f       	adc	r25, r25
    2c44:	0a 94       	dec	r0
    2c46:	e2 f7       	brpl	.-8      	; 0x2c40 <_turn_on+0x4a>
    2c48:	80 95       	com	r24
    2c4a:	84 23       	and	r24, r20
    2c4c:	8c 93       	st	X, r24
    2c4e:	08 95       	ret
    2c50:	fc 01       	movw	r30, r24
    2c52:	ee 0f       	add	r30, r30
    2c54:	ff 1f       	adc	r31, r31
    2c56:	df 01       	movw	r26, r30
    2c58:	a8 0f       	add	r26, r24
    2c5a:	b9 1f       	adc	r27, r25
    2c5c:	aa 0f       	add	r26, r26
    2c5e:	bb 1f       	adc	r27, r27
    2c60:	a7 52       	subi	r26, 0x27	; 39
    2c62:	be 4e       	sbci	r27, 0xEE	; 238
    2c64:	0d 90       	ld	r0, X+
    2c66:	bc 91       	ld	r27, X
    2c68:	a0 2d       	mov	r26, r0
    2c6a:	2c 91       	ld	r18, X
    2c6c:	e8 0f       	add	r30, r24
    2c6e:	f9 1f       	adc	r31, r25
    2c70:	ee 0f       	add	r30, r30
    2c72:	ff 1f       	adc	r31, r31
    2c74:	e7 52       	subi	r30, 0x27	; 39
    2c76:	fe 4e       	sbci	r31, 0xEE	; 238
    2c78:	81 e0       	ldi	r24, 0x01	; 1
    2c7a:	90 e0       	ldi	r25, 0x00	; 0
    2c7c:	02 80       	ldd	r0, Z+2	; 0x02
    2c7e:	02 c0       	rjmp	.+4      	; 0x2c84 <_turn_on+0x8e>
    2c80:	88 0f       	add	r24, r24
    2c82:	99 1f       	adc	r25, r25
    2c84:	0a 94       	dec	r0
    2c86:	e2 f7       	brpl	.-8      	; 0x2c80 <_turn_on+0x8a>
    2c88:	82 2b       	or	r24, r18
    2c8a:	8c 93       	st	X, r24
    2c8c:	08 95       	ret

00002c8e <_hal_led_task>:
    2c8e:	cc 24       	eor	r12, r12
    2c90:	c3 94       	inc	r12
    2c92:	d1 2c       	mov	r13, r1
    2c94:	68 94       	set
    2c96:	bb 24       	eor	r11, r11
    2c98:	b2 f8       	bld	r11, 2
    2c9a:	c9 ed       	ldi	r28, 0xD9	; 217
    2c9c:	d1 e1       	ldi	r29, 0x11	; 17
    2c9e:	10 e0       	ldi	r17, 0x00	; 0
    2ca0:	8c 81       	ldd	r24, Y+4	; 0x04
    2ca2:	81 30       	cpi	r24, 0x01	; 1
    2ca4:	81 f0       	breq	.+32     	; 0x2cc6 <_hal_led_task+0x38>
    2ca6:	18 f1       	brcs	.+70     	; 0x2cee <_hal_led_task+0x60>
    2ca8:	82 30       	cpi	r24, 0x02	; 2
    2caa:	61 f5       	brne	.+88     	; 0x2d04 <_hal_led_task+0x76>
    2cac:	e8 81       	ld	r30, Y
    2cae:	f9 81       	ldd	r31, Y+1	; 0x01
    2cb0:	20 81       	ld	r18, Z
    2cb2:	c6 01       	movw	r24, r12
    2cb4:	0a 80       	ldd	r0, Y+2	; 0x02
    2cb6:	02 c0       	rjmp	.+4      	; 0x2cbc <_hal_led_task+0x2e>
    2cb8:	88 0f       	add	r24, r24
    2cba:	99 1f       	adc	r25, r25
    2cbc:	0a 94       	dec	r0
    2cbe:	e2 f7       	brpl	.-8      	; 0x2cb8 <_hal_led_task+0x2a>
    2cc0:	82 27       	eor	r24, r18
    2cc2:	80 83       	st	Z, r24
    2cc4:	1f c0       	rjmp	.+62     	; 0x2d04 <_hal_led_task+0x76>
    2cc6:	8d 81       	ldd	r24, Y+5	; 0x05
    2cc8:	8f 5f       	subi	r24, 0xFF	; 255
    2cca:	86 30       	cpi	r24, 0x06	; 6
    2ccc:	10 f4       	brcc	.+4      	; 0x2cd2 <_hal_led_task+0x44>
    2cce:	8d 83       	std	Y+5, r24	; 0x05
    2cd0:	19 c0       	rjmp	.+50     	; 0x2d04 <_hal_led_task+0x76>
    2cd2:	1d 82       	std	Y+5, r1	; 0x05
    2cd4:	e8 81       	ld	r30, Y
    2cd6:	f9 81       	ldd	r31, Y+1	; 0x01
    2cd8:	20 81       	ld	r18, Z
    2cda:	c6 01       	movw	r24, r12
    2cdc:	0a 80       	ldd	r0, Y+2	; 0x02
    2cde:	02 c0       	rjmp	.+4      	; 0x2ce4 <_hal_led_task+0x56>
    2ce0:	88 0f       	add	r24, r24
    2ce2:	99 1f       	adc	r25, r25
    2ce4:	0a 94       	dec	r0
    2ce6:	e2 f7       	brpl	.-8      	; 0x2ce0 <_hal_led_task+0x52>
    2ce8:	82 27       	eor	r24, r18
    2cea:	80 83       	st	Z, r24
    2cec:	0b c0       	rjmp	.+22     	; 0x2d04 <_hal_led_task+0x76>
    2cee:	0d 81       	ldd	r16, Y+5	; 0x05
    2cf0:	00 23       	and	r16, r16
    2cf2:	29 f0       	breq	.+10     	; 0x2cfe <_hal_led_task+0x70>
    2cf4:	81 2f       	mov	r24, r17
    2cf6:	7f df       	rcall	.-258    	; 0x2bf6 <_turn_on>
    2cf8:	01 50       	subi	r16, 0x01	; 1
    2cfa:	0d 83       	std	Y+5, r16	; 0x05
    2cfc:	03 c0       	rjmp	.+6      	; 0x2d04 <_hal_led_task+0x76>
    2cfe:	bc 82       	std	Y+4, r11	; 0x04
    2d00:	81 2f       	mov	r24, r17
    2d02:	2d df       	rcall	.-422    	; 0x2b5e <_turn_off>
    2d04:	1f 5f       	subi	r17, 0xFF	; 255
    2d06:	26 96       	adiw	r28, 0x06	; 6
    2d08:	14 30       	cpi	r17, 0x04	; 4
    2d0a:	51 f6       	brne	.-108    	; 0x2ca0 <_hal_led_task+0x12>
    2d0c:	6c e0       	ldi	r22, 0x0C	; 12
    2d0e:	70 e0       	ldi	r23, 0x00	; 0
    2d10:	80 e0       	ldi	r24, 0x00	; 0
    2d12:	90 e0       	ldi	r25, 0x00	; 0
    2d14:	0e 94 3d 0e 	call	0x1c7a	; 0x1c7a <vTaskDelay>
    2d18:	c0 cf       	rjmp	.-128    	; 0x2c9a <_hal_led_task+0xc>

00002d1a <status_leds_initialise>:
    2d1a:	ef 92       	push	r14
    2d1c:	ff 92       	push	r15
    2d1e:	0f 93       	push	r16
    2d20:	1f 93       	push	r17
    2d22:	cf 93       	push	r28
    2d24:	df 93       	push	r29
    2d26:	08 2f       	mov	r16, r24
    2d28:	80 e4       	ldi	r24, 0x40	; 64
    2d2a:	87 b9       	out	0x07, r24	; 7
    2d2c:	c9 ed       	ldi	r28, 0xD9	; 217
    2d2e:	d1 e1       	ldi	r29, 0x11	; 17
    2d30:	0f 2e       	mov	r0, r31
    2d32:	f8 e2       	ldi	r31, 0x28	; 40
    2d34:	ef 2e       	mov	r14, r31
    2d36:	f1 2c       	mov	r15, r1
    2d38:	f0 2d       	mov	r31, r0
    2d3a:	f9 82       	std	Y+1, r15	; 0x01
    2d3c:	e8 82       	st	Y, r14
    2d3e:	86 e0       	ldi	r24, 0x06	; 6
    2d40:	8a 83       	std	Y+2, r24	; 0x02
    2d42:	1b 82       	std	Y+3, r1	; 0x03
    2d44:	14 e0       	ldi	r17, 0x04	; 4
    2d46:	1c 83       	std	Y+4, r17	; 0x04
    2d48:	80 e0       	ldi	r24, 0x00	; 0
    2d4a:	09 df       	rcall	.-494    	; 0x2b5e <_turn_off>
    2d4c:	80 e8       	ldi	r24, 0x80	; 128
    2d4e:	87 b9       	out	0x07, r24	; 7
    2d50:	ff 82       	std	Y+7, r15	; 0x07
    2d52:	ee 82       	std	Y+6, r14	; 0x06
    2d54:	87 e0       	ldi	r24, 0x07	; 7
    2d56:	88 87       	std	Y+8, r24	; 0x08
    2d58:	19 86       	std	Y+9, r1	; 0x09
    2d5a:	1a 87       	std	Y+10, r17	; 0x0a
    2d5c:	81 e0       	ldi	r24, 0x01	; 1
    2d5e:	ff de       	rcall	.-514    	; 0x2b5e <_turn_off>
    2d60:	80 e2       	ldi	r24, 0x20	; 32
    2d62:	83 bb       	out	0x13, r24	; 19
    2d64:	84 e3       	ldi	r24, 0x34	; 52
    2d66:	90 e0       	ldi	r25, 0x00	; 0
    2d68:	9d 87       	std	Y+13, r25	; 0x0d
    2d6a:	8c 87       	std	Y+12, r24	; 0x0c
    2d6c:	85 e0       	ldi	r24, 0x05	; 5
    2d6e:	8e 87       	std	Y+14, r24	; 0x0e
    2d70:	1f 86       	std	Y+15, r1	; 0x0f
    2d72:	18 8b       	std	Y+16, r17	; 0x10
    2d74:	82 e0       	ldi	r24, 0x02	; 2
    2d76:	f3 de       	rcall	.-538    	; 0x2b5e <_turn_off>
    2d78:	80 e1       	ldi	r24, 0x10	; 16
    2d7a:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x7c0101>
    2d7e:	82 e0       	ldi	r24, 0x02	; 2
    2d80:	91 e0       	ldi	r25, 0x01	; 1
    2d82:	9b 8b       	std	Y+19, r25	; 0x13
    2d84:	8a 8b       	std	Y+18, r24	; 0x12
    2d86:	1c 8b       	std	Y+20, r17	; 0x14
    2d88:	1d 8a       	std	Y+21, r1	; 0x15
    2d8a:	1e 8b       	std	Y+22, r17	; 0x16
    2d8c:	83 e0       	ldi	r24, 0x03	; 3
    2d8e:	e7 de       	rcall	.-562    	; 0x2b5e <_turn_off>
    2d90:	e1 2c       	mov	r14, r1
    2d92:	f1 2c       	mov	r15, r1
    2d94:	20 e0       	ldi	r18, 0x00	; 0
    2d96:	30 e0       	ldi	r19, 0x00	; 0
    2d98:	40 ec       	ldi	r20, 0xC0	; 192
    2d9a:	50 e0       	ldi	r21, 0x00	; 0
    2d9c:	6b e2       	ldi	r22, 0x2B	; 43
    2d9e:	73 e0       	ldi	r23, 0x03	; 3
    2da0:	87 e4       	ldi	r24, 0x47	; 71
    2da2:	96 e1       	ldi	r25, 0x16	; 22
    2da4:	0e 94 34 0b 	call	0x1668	; 0x1668 <xTaskCreate>
    2da8:	df 91       	pop	r29
    2daa:	cf 91       	pop	r28
    2dac:	1f 91       	pop	r17
    2dae:	0f 91       	pop	r16
    2db0:	ff 90       	pop	r15
    2db2:	ef 90       	pop	r14
    2db4:	08 95       	ret

00002db6 <serial_create>:
    2db6:	2f 92       	push	r2
    2db8:	3f 92       	push	r3
    2dba:	4f 92       	push	r4
    2dbc:	5f 92       	push	r5
    2dbe:	6f 92       	push	r6
    2dc0:	7f 92       	push	r7
    2dc2:	8f 92       	push	r8
    2dc4:	9f 92       	push	r9
    2dc6:	af 92       	push	r10
    2dc8:	cf 92       	push	r12
    2dca:	ef 92       	push	r14
    2dcc:	ff 92       	push	r15
    2dce:	0f 93       	push	r16
    2dd0:	1f 93       	push	r17
    2dd2:	cf 93       	push	r28
    2dd4:	df 93       	push	r29
    2dd6:	cd b7       	in	r28, 0x3d	; 61
    2dd8:	de b7       	in	r29, 0x3e	; 62
    2dda:	f8 2e       	mov	r15, r24
    2ddc:	2a 01       	movw	r4, r20
    2dde:	3b 01       	movw	r6, r22
    2de0:	88 e0       	ldi	r24, 0x08	; 8
    2de2:	90 e0       	ldi	r25, 0x00	; 0
    2de4:	50 d5       	rcall	.+2720   	; 0x3886 <malloc>
    2de6:	8c 01       	movw	r16, r24
    2de8:	8f 2d       	mov	r24, r15
    2dea:	90 e0       	ldi	r25, 0x00	; 0
    2dec:	fc 01       	movw	r30, r24
    2dee:	ee 0f       	add	r30, r30
    2df0:	ff 1f       	adc	r31, r31
    2df2:	ef 50       	subi	r30, 0x0F	; 15
    2df4:	fe 4e       	sbci	r31, 0xEE	; 238
    2df6:	11 83       	std	Z+1, r17	; 0x01
    2df8:	00 83       	st	Z, r16
    2dfa:	01 15       	cp	r16, r1
    2dfc:	11 05       	cpc	r17, r1
    2dfe:	09 f4       	brne	.+2      	; 0x2e02 <serial_create+0x4c>
    2e00:	64 c0       	rjmp	.+200    	; 0x2eca <serial_create+0x114>
    2e02:	88 0f       	add	r24, r24
    2e04:	99 1f       	adc	r25, r25
    2e06:	fc 01       	movw	r30, r24
    2e08:	e7 5e       	subi	r30, 0xE7	; 231
    2e0a:	fd 4f       	sbci	r31, 0xFD	; 253
    2e0c:	80 81       	ld	r24, Z
    2e0e:	91 81       	ldd	r25, Z+1	; 0x01
    2e10:	d8 01       	movw	r26, r16
    2e12:	8d 93       	st	X+, r24
    2e14:	9c 93       	st	X, r25
    2e16:	8c 2d       	mov	r24, r12
    2e18:	90 e0       	ldi	r25, 0x00	; 0
    2e1a:	88 0f       	add	r24, r24
    2e1c:	99 1f       	adc	r25, r25
    2e1e:	88 0f       	add	r24, r24
    2e20:	99 1f       	adc	r25, r25
    2e22:	31 d5       	rcall	.+2658   	; 0x3886 <malloc>
    2e24:	1c 01       	movw	r2, r24
    2e26:	86 e0       	ldi	r24, 0x06	; 6
    2e28:	90 e0       	ldi	r25, 0x00	; 0
    2e2a:	2d d5       	rcall	.+2650   	; 0x3886 <malloc>
    2e2c:	7c 01       	movw	r14, r24
    2e2e:	4c 2d       	mov	r20, r12
    2e30:	b1 01       	movw	r22, r2
    2e32:	00 d3       	rcall	.+1536   	; 0x3434 <fifo_init>
    2e34:	f8 01       	movw	r30, r16
    2e36:	f5 82       	std	Z+5, r15	; 0x05
    2e38:	e4 82       	std	Z+4, r14	; 0x04
    2e3a:	8a 2d       	mov	r24, r10
    2e3c:	90 e0       	ldi	r25, 0x00	; 0
    2e3e:	88 0f       	add	r24, r24
    2e40:	99 1f       	adc	r25, r25
    2e42:	88 0f       	add	r24, r24
    2e44:	99 1f       	adc	r25, r25
    2e46:	1f d5       	rcall	.+2622   	; 0x3886 <malloc>
    2e48:	1c 01       	movw	r2, r24
    2e4a:	86 e0       	ldi	r24, 0x06	; 6
    2e4c:	90 e0       	ldi	r25, 0x00	; 0
    2e4e:	1b d5       	rcall	.+2614   	; 0x3886 <malloc>
    2e50:	7c 01       	movw	r14, r24
    2e52:	4a 2d       	mov	r20, r10
    2e54:	b1 01       	movw	r22, r2
    2e56:	ee d2       	rcall	.+1500   	; 0x3434 <fifo_init>
    2e58:	d8 01       	movw	r26, r16
    2e5a:	13 96       	adiw	r26, 0x03	; 3
    2e5c:	fc 92       	st	X, r15
    2e5e:	ee 92       	st	-X, r14
    2e60:	12 97       	sbiw	r26, 0x02	; 2
    2e62:	17 96       	adiw	r26, 0x07	; 7
    2e64:	9c 92       	st	X, r9
    2e66:	8e 92       	st	-X, r8
    2e68:	16 97       	sbiw	r26, 0x06	; 6
    2e6a:	ff b6       	in	r15, 0x3f	; 63
    2e6c:	f8 94       	cli
    2e6e:	ed 91       	ld	r30, X+
    2e70:	fc 91       	ld	r31, X
    2e72:	11 97       	sbiw	r26, 0x01	; 1
    2e74:	36 97       	sbiw	r30, 0x06	; 6
    2e76:	80 81       	ld	r24, Z
    2e78:	82 60       	ori	r24, 0x02	; 2
    2e7a:	80 83       	st	Z, r24
    2e7c:	8d 90       	ld	r8, X+
    2e7e:	9c 90       	ld	r9, X
    2e80:	c3 01       	movw	r24, r6
    2e82:	b2 01       	movw	r22, r4
    2e84:	c0 dd       	rcall	.-1152   	; 0x2a06 <__floatunsisf>
    2e86:	20 e0       	ldi	r18, 0x00	; 0
    2e88:	30 e0       	ldi	r19, 0x00	; 0
    2e8a:	40 e0       	ldi	r20, 0x00	; 0
    2e8c:	51 e4       	ldi	r21, 0x41	; 65
    2e8e:	38 d4       	rcall	.+2160   	; 0x3700 <__mulsf3>
    2e90:	9b 01       	movw	r18, r22
    2e92:	ac 01       	movw	r20, r24
    2e94:	60 e0       	ldi	r22, 0x00	; 0
    2e96:	74 e2       	ldi	r23, 0x24	; 36
    2e98:	84 e7       	ldi	r24, 0x74	; 116
    2e9a:	9b e4       	ldi	r25, 0x4B	; 75
    2e9c:	4c d3       	rcall	.+1688   	; 0x3536 <__divsf3>
    2e9e:	20 e0       	ldi	r18, 0x00	; 0
    2ea0:	30 e0       	ldi	r19, 0x00	; 0
    2ea2:	40 e8       	ldi	r20, 0x80	; 128
    2ea4:	5f e3       	ldi	r21, 0x3F	; 63
    2ea6:	e2 d2       	rcall	.+1476   	; 0x346c <__subsf3>
    2ea8:	ae d3       	rcall	.+1884   	; 0x3606 <__fixunssfsi>
    2eaa:	f4 01       	movw	r30, r8
    2eac:	32 97       	sbiw	r30, 0x02	; 2
    2eae:	60 83       	st	Z, r22
    2eb0:	d8 01       	movw	r26, r16
    2eb2:	ed 91       	ld	r30, X+
    2eb4:	fc 91       	ld	r31, X
    2eb6:	11 97       	sbiw	r26, 0x01	; 1
    2eb8:	35 97       	sbiw	r30, 0x05	; 5
    2eba:	88 e9       	ldi	r24, 0x98	; 152
    2ebc:	80 83       	st	Z, r24
    2ebe:	ed 91       	ld	r30, X+
    2ec0:	fc 91       	ld	r31, X
    2ec2:	34 97       	sbiw	r30, 0x04	; 4
    2ec4:	86 e0       	ldi	r24, 0x06	; 6
    2ec6:	80 83       	st	Z, r24
    2ec8:	ff be       	out	0x3f, r15	; 63
    2eca:	c8 01       	movw	r24, r16
    2ecc:	df 91       	pop	r29
    2ece:	cf 91       	pop	r28
    2ed0:	1f 91       	pop	r17
    2ed2:	0f 91       	pop	r16
    2ed4:	ff 90       	pop	r15
    2ed6:	ef 90       	pop	r14
    2ed8:	cf 90       	pop	r12
    2eda:	af 90       	pop	r10
    2edc:	9f 90       	pop	r9
    2ede:	8f 90       	pop	r8
    2ee0:	7f 90       	pop	r7
    2ee2:	6f 90       	pop	r6
    2ee4:	5f 90       	pop	r5
    2ee6:	4f 90       	pop	r4
    2ee8:	3f 90       	pop	r3
    2eea:	2f 90       	pop	r2
    2eec:	08 95       	ret

00002eee <serial_sendByte>:
    2eee:	cf 93       	push	r28
    2ef0:	df 93       	push	r29
    2ef2:	dc 01       	movw	r26, r24
    2ef4:	89 2b       	or	r24, r25
    2ef6:	01 f1       	breq	.+64     	; 0x2f38 <serial_sendByte+0x4a>
    2ef8:	12 96       	adiw	r26, 0x02	; 2
    2efa:	ed 91       	ld	r30, X+
    2efc:	fc 91       	ld	r31, X
    2efe:	13 97       	sbiw	r26, 0x03	; 3
    2f00:	93 81       	ldd	r25, Z+3	; 0x03
    2f02:	82 81       	ldd	r24, Z+2	; 0x02
    2f04:	25 81       	ldd	r18, Z+5	; 0x05
    2f06:	98 1b       	sub	r25, r24
    2f08:	92 23       	and	r25, r18
    2f0a:	84 81       	ldd	r24, Z+4	; 0x04
    2f0c:	98 17       	cp	r25, r24
    2f0e:	b1 f0       	breq	.+44     	; 0x2f3c <serial_sendByte+0x4e>
    2f10:	83 81       	ldd	r24, Z+3	; 0x03
    2f12:	26 95       	lsr	r18
    2f14:	28 23       	and	r18, r24
    2f16:	c0 81       	ld	r28, Z
    2f18:	d1 81       	ldd	r29, Z+1	; 0x01
    2f1a:	c2 0f       	add	r28, r18
    2f1c:	d1 1d       	adc	r29, r1
    2f1e:	68 83       	st	Y, r22
    2f20:	8f 5f       	subi	r24, 0xFF	; 255
    2f22:	95 81       	ldd	r25, Z+5	; 0x05
    2f24:	89 23       	and	r24, r25
    2f26:	83 83       	std	Z+3, r24	; 0x03
    2f28:	ed 91       	ld	r30, X+
    2f2a:	fc 91       	ld	r31, X
    2f2c:	35 97       	sbiw	r30, 0x05	; 5
    2f2e:	80 81       	ld	r24, Z
    2f30:	80 62       	ori	r24, 0x20	; 32
    2f32:	80 83       	st	Z, r24
    2f34:	80 e0       	ldi	r24, 0x00	; 0
    2f36:	03 c0       	rjmp	.+6      	; 0x2f3e <serial_sendByte+0x50>
    2f38:	81 e0       	ldi	r24, 0x01	; 1
    2f3a:	01 c0       	rjmp	.+2      	; 0x2f3e <serial_sendByte+0x50>
    2f3c:	82 e0       	ldi	r24, 0x02	; 2
    2f3e:	df 91       	pop	r29
    2f40:	cf 91       	pop	r28
    2f42:	08 95       	ret

00002f44 <serial_getByte>:
    2f44:	00 97       	sbiw	r24, 0x00	; 0
    2f46:	d1 f0       	breq	.+52     	; 0x2f7c <serial_getByte+0x38>
    2f48:	dc 01       	movw	r26, r24
    2f4a:	14 96       	adiw	r26, 0x04	; 4
    2f4c:	ed 91       	ld	r30, X+
    2f4e:	fc 91       	ld	r31, X
    2f50:	15 97       	sbiw	r26, 0x05	; 5
    2f52:	93 81       	ldd	r25, Z+3	; 0x03
    2f54:	82 81       	ldd	r24, Z+2	; 0x02
    2f56:	98 17       	cp	r25, r24
    2f58:	99 f0       	breq	.+38     	; 0x2f80 <serial_getByte+0x3c>
    2f5a:	92 81       	ldd	r25, Z+2	; 0x02
    2f5c:	85 81       	ldd	r24, Z+5	; 0x05
    2f5e:	86 95       	lsr	r24
    2f60:	89 23       	and	r24, r25
    2f62:	a0 81       	ld	r26, Z
    2f64:	b1 81       	ldd	r27, Z+1	; 0x01
    2f66:	a8 0f       	add	r26, r24
    2f68:	b1 1d       	adc	r27, r1
    2f6a:	8c 91       	ld	r24, X
    2f6c:	db 01       	movw	r26, r22
    2f6e:	8c 93       	st	X, r24
    2f70:	9f 5f       	subi	r25, 0xFF	; 255
    2f72:	85 81       	ldd	r24, Z+5	; 0x05
    2f74:	98 23       	and	r25, r24
    2f76:	92 83       	std	Z+2, r25	; 0x02
    2f78:	80 e0       	ldi	r24, 0x00	; 0
    2f7a:	08 95       	ret
    2f7c:	81 e0       	ldi	r24, 0x01	; 1
    2f7e:	08 95       	ret
    2f80:	83 e0       	ldi	r24, 0x03	; 3
    2f82:	08 95       	ret

00002f84 <__vector_25>:
    2f84:	1f 92       	push	r1
    2f86:	0f 92       	push	r0
    2f88:	0f b6       	in	r0, 0x3f	; 63
    2f8a:	0f 92       	push	r0
    2f8c:	11 24       	eor	r1, r1
    2f8e:	0b b6       	in	r0, 0x3b	; 59
    2f90:	0f 92       	push	r0
    2f92:	2f 93       	push	r18
    2f94:	3f 93       	push	r19
    2f96:	4f 93       	push	r20
    2f98:	5f 93       	push	r21
    2f9a:	6f 93       	push	r22
    2f9c:	7f 93       	push	r23
    2f9e:	8f 93       	push	r24
    2fa0:	9f 93       	push	r25
    2fa2:	af 93       	push	r26
    2fa4:	bf 93       	push	r27
    2fa6:	cf 93       	push	r28
    2fa8:	df 93       	push	r29
    2faa:	ef 93       	push	r30
    2fac:	ff 93       	push	r31
    2fae:	a0 91 f1 11 	lds	r26, 0x11F1	; 0x8011f1 <_ser_handle>
    2fb2:	b0 91 f2 11 	lds	r27, 0x11F2	; 0x8011f2 <_ser_handle+0x1>
    2fb6:	10 97       	sbiw	r26, 0x00	; 0
    2fb8:	11 f1       	breq	.+68     	; 0x2ffe <__vector_25+0x7a>
    2fba:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    2fbe:	14 96       	adiw	r26, 0x04	; 4
    2fc0:	ed 91       	ld	r30, X+
    2fc2:	fc 91       	ld	r31, X
    2fc4:	15 97       	sbiw	r26, 0x05	; 5
    2fc6:	93 81       	ldd	r25, Z+3	; 0x03
    2fc8:	82 81       	ldd	r24, Z+2	; 0x02
    2fca:	25 81       	ldd	r18, Z+5	; 0x05
    2fcc:	98 1b       	sub	r25, r24
    2fce:	92 23       	and	r25, r18
    2fd0:	84 81       	ldd	r24, Z+4	; 0x04
    2fd2:	98 17       	cp	r25, r24
    2fd4:	61 f0       	breq	.+24     	; 0x2fee <__vector_25+0x6a>
    2fd6:	83 81       	ldd	r24, Z+3	; 0x03
    2fd8:	26 95       	lsr	r18
    2fda:	28 23       	and	r18, r24
    2fdc:	c0 81       	ld	r28, Z
    2fde:	d1 81       	ldd	r29, Z+1	; 0x01
    2fe0:	c2 0f       	add	r28, r18
    2fe2:	d1 1d       	adc	r29, r1
    2fe4:	68 83       	st	Y, r22
    2fe6:	8f 5f       	subi	r24, 0xFF	; 255
    2fe8:	95 81       	ldd	r25, Z+5	; 0x05
    2fea:	89 23       	and	r24, r25
    2fec:	83 83       	std	Z+3, r24	; 0x03
    2fee:	16 96       	adiw	r26, 0x06	; 6
    2ff0:	ed 91       	ld	r30, X+
    2ff2:	fc 91       	ld	r31, X
    2ff4:	17 97       	sbiw	r26, 0x07	; 7
    2ff6:	30 97       	sbiw	r30, 0x00	; 0
    2ff8:	11 f0       	breq	.+4      	; 0x2ffe <__vector_25+0x7a>
    2ffa:	cd 01       	movw	r24, r26
    2ffc:	19 95       	eicall
    2ffe:	ff 91       	pop	r31
    3000:	ef 91       	pop	r30
    3002:	df 91       	pop	r29
    3004:	cf 91       	pop	r28
    3006:	bf 91       	pop	r27
    3008:	af 91       	pop	r26
    300a:	9f 91       	pop	r25
    300c:	8f 91       	pop	r24
    300e:	7f 91       	pop	r23
    3010:	6f 91       	pop	r22
    3012:	5f 91       	pop	r21
    3014:	4f 91       	pop	r20
    3016:	3f 91       	pop	r19
    3018:	2f 91       	pop	r18
    301a:	0f 90       	pop	r0
    301c:	0b be       	out	0x3b, r0	; 59
    301e:	0f 90       	pop	r0
    3020:	0f be       	out	0x3f, r0	; 63
    3022:	0f 90       	pop	r0
    3024:	1f 90       	pop	r1
    3026:	18 95       	reti

00003028 <__vector_26>:
    3028:	1f 92       	push	r1
    302a:	0f 92       	push	r0
    302c:	0f b6       	in	r0, 0x3f	; 63
    302e:	0f 92       	push	r0
    3030:	11 24       	eor	r1, r1
    3032:	0b b6       	in	r0, 0x3b	; 59
    3034:	0f 92       	push	r0
    3036:	2f 93       	push	r18
    3038:	8f 93       	push	r24
    303a:	9f 93       	push	r25
    303c:	af 93       	push	r26
    303e:	bf 93       	push	r27
    3040:	ef 93       	push	r30
    3042:	ff 93       	push	r31
    3044:	e0 91 f1 11 	lds	r30, 0x11F1	; 0x8011f1 <_ser_handle>
    3048:	f0 91 f2 11 	lds	r31, 0x11F2	; 0x8011f2 <_ser_handle+0x1>
    304c:	30 97       	sbiw	r30, 0x00	; 0
    304e:	b9 f0       	breq	.+46     	; 0x307e <__vector_26+0x56>
    3050:	02 80       	ldd	r0, Z+2	; 0x02
    3052:	f3 81       	ldd	r31, Z+3	; 0x03
    3054:	e0 2d       	mov	r30, r0
    3056:	93 81       	ldd	r25, Z+3	; 0x03
    3058:	82 81       	ldd	r24, Z+2	; 0x02
    305a:	98 17       	cp	r25, r24
    305c:	b1 f0       	breq	.+44     	; 0x308a <__vector_26+0x62>
    305e:	92 81       	ldd	r25, Z+2	; 0x02
    3060:	85 81       	ldd	r24, Z+5	; 0x05
    3062:	28 2f       	mov	r18, r24
    3064:	26 95       	lsr	r18
    3066:	29 23       	and	r18, r25
    3068:	a0 81       	ld	r26, Z
    306a:	b1 81       	ldd	r27, Z+1	; 0x01
    306c:	a2 0f       	add	r26, r18
    306e:	b1 1d       	adc	r27, r1
    3070:	2c 91       	ld	r18, X
    3072:	9f 5f       	subi	r25, 0xFF	; 255
    3074:	89 23       	and	r24, r25
    3076:	82 83       	std	Z+2, r24	; 0x02
    3078:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    307c:	0b c0       	rjmp	.+22     	; 0x3094 <__vector_26+0x6c>
    307e:	e1 ec       	ldi	r30, 0xC1	; 193
    3080:	f0 e0       	ldi	r31, 0x00	; 0
    3082:	80 81       	ld	r24, Z
    3084:	8f 7d       	andi	r24, 0xDF	; 223
    3086:	80 83       	st	Z, r24
    3088:	05 c0       	rjmp	.+10     	; 0x3094 <__vector_26+0x6c>
    308a:	e1 ec       	ldi	r30, 0xC1	; 193
    308c:	f0 e0       	ldi	r31, 0x00	; 0
    308e:	80 81       	ld	r24, Z
    3090:	8f 7d       	andi	r24, 0xDF	; 223
    3092:	80 83       	st	Z, r24
    3094:	ff 91       	pop	r31
    3096:	ef 91       	pop	r30
    3098:	bf 91       	pop	r27
    309a:	af 91       	pop	r26
    309c:	9f 91       	pop	r25
    309e:	8f 91       	pop	r24
    30a0:	2f 91       	pop	r18
    30a2:	0f 90       	pop	r0
    30a4:	0b be       	out	0x3b, r0	; 59
    30a6:	0f 90       	pop	r0
    30a8:	0f be       	out	0x3f, r0	; 63
    30aa:	0f 90       	pop	r0
    30ac:	1f 90       	pop	r1
    30ae:	18 95       	reti

000030b0 <__vector_36>:
    30b0:	1f 92       	push	r1
    30b2:	0f 92       	push	r0
    30b4:	0f b6       	in	r0, 0x3f	; 63
    30b6:	0f 92       	push	r0
    30b8:	11 24       	eor	r1, r1
    30ba:	0b b6       	in	r0, 0x3b	; 59
    30bc:	0f 92       	push	r0
    30be:	2f 93       	push	r18
    30c0:	3f 93       	push	r19
    30c2:	4f 93       	push	r20
    30c4:	5f 93       	push	r21
    30c6:	6f 93       	push	r22
    30c8:	7f 93       	push	r23
    30ca:	8f 93       	push	r24
    30cc:	9f 93       	push	r25
    30ce:	af 93       	push	r26
    30d0:	bf 93       	push	r27
    30d2:	cf 93       	push	r28
    30d4:	df 93       	push	r29
    30d6:	ef 93       	push	r30
    30d8:	ff 93       	push	r31
    30da:	a0 91 f3 11 	lds	r26, 0x11F3	; 0x8011f3 <_ser_handle+0x2>
    30de:	b0 91 f4 11 	lds	r27, 0x11F4	; 0x8011f4 <_ser_handle+0x3>
    30e2:	10 97       	sbiw	r26, 0x00	; 0
    30e4:	11 f1       	breq	.+68     	; 0x312a <__vector_36+0x7a>
    30e6:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    30ea:	14 96       	adiw	r26, 0x04	; 4
    30ec:	ed 91       	ld	r30, X+
    30ee:	fc 91       	ld	r31, X
    30f0:	15 97       	sbiw	r26, 0x05	; 5
    30f2:	93 81       	ldd	r25, Z+3	; 0x03
    30f4:	82 81       	ldd	r24, Z+2	; 0x02
    30f6:	25 81       	ldd	r18, Z+5	; 0x05
    30f8:	98 1b       	sub	r25, r24
    30fa:	92 23       	and	r25, r18
    30fc:	84 81       	ldd	r24, Z+4	; 0x04
    30fe:	98 17       	cp	r25, r24
    3100:	61 f0       	breq	.+24     	; 0x311a <__vector_36+0x6a>
    3102:	83 81       	ldd	r24, Z+3	; 0x03
    3104:	26 95       	lsr	r18
    3106:	28 23       	and	r18, r24
    3108:	c0 81       	ld	r28, Z
    310a:	d1 81       	ldd	r29, Z+1	; 0x01
    310c:	c2 0f       	add	r28, r18
    310e:	d1 1d       	adc	r29, r1
    3110:	68 83       	st	Y, r22
    3112:	8f 5f       	subi	r24, 0xFF	; 255
    3114:	95 81       	ldd	r25, Z+5	; 0x05
    3116:	89 23       	and	r24, r25
    3118:	83 83       	std	Z+3, r24	; 0x03
    311a:	16 96       	adiw	r26, 0x06	; 6
    311c:	ed 91       	ld	r30, X+
    311e:	fc 91       	ld	r31, X
    3120:	17 97       	sbiw	r26, 0x07	; 7
    3122:	30 97       	sbiw	r30, 0x00	; 0
    3124:	11 f0       	breq	.+4      	; 0x312a <__vector_36+0x7a>
    3126:	cd 01       	movw	r24, r26
    3128:	19 95       	eicall
    312a:	ff 91       	pop	r31
    312c:	ef 91       	pop	r30
    312e:	df 91       	pop	r29
    3130:	cf 91       	pop	r28
    3132:	bf 91       	pop	r27
    3134:	af 91       	pop	r26
    3136:	9f 91       	pop	r25
    3138:	8f 91       	pop	r24
    313a:	7f 91       	pop	r23
    313c:	6f 91       	pop	r22
    313e:	5f 91       	pop	r21
    3140:	4f 91       	pop	r20
    3142:	3f 91       	pop	r19
    3144:	2f 91       	pop	r18
    3146:	0f 90       	pop	r0
    3148:	0b be       	out	0x3b, r0	; 59
    314a:	0f 90       	pop	r0
    314c:	0f be       	out	0x3f, r0	; 63
    314e:	0f 90       	pop	r0
    3150:	1f 90       	pop	r1
    3152:	18 95       	reti

00003154 <__vector_37>:
    3154:	1f 92       	push	r1
    3156:	0f 92       	push	r0
    3158:	0f b6       	in	r0, 0x3f	; 63
    315a:	0f 92       	push	r0
    315c:	11 24       	eor	r1, r1
    315e:	0b b6       	in	r0, 0x3b	; 59
    3160:	0f 92       	push	r0
    3162:	2f 93       	push	r18
    3164:	8f 93       	push	r24
    3166:	9f 93       	push	r25
    3168:	af 93       	push	r26
    316a:	bf 93       	push	r27
    316c:	ef 93       	push	r30
    316e:	ff 93       	push	r31
    3170:	e0 91 f3 11 	lds	r30, 0x11F3	; 0x8011f3 <_ser_handle+0x2>
    3174:	f0 91 f4 11 	lds	r31, 0x11F4	; 0x8011f4 <_ser_handle+0x3>
    3178:	30 97       	sbiw	r30, 0x00	; 0
    317a:	b9 f0       	breq	.+46     	; 0x31aa <__vector_37+0x56>
    317c:	02 80       	ldd	r0, Z+2	; 0x02
    317e:	f3 81       	ldd	r31, Z+3	; 0x03
    3180:	e0 2d       	mov	r30, r0
    3182:	93 81       	ldd	r25, Z+3	; 0x03
    3184:	82 81       	ldd	r24, Z+2	; 0x02
    3186:	98 17       	cp	r25, r24
    3188:	b1 f0       	breq	.+44     	; 0x31b6 <__vector_37+0x62>
    318a:	92 81       	ldd	r25, Z+2	; 0x02
    318c:	85 81       	ldd	r24, Z+5	; 0x05
    318e:	28 2f       	mov	r18, r24
    3190:	26 95       	lsr	r18
    3192:	29 23       	and	r18, r25
    3194:	a0 81       	ld	r26, Z
    3196:	b1 81       	ldd	r27, Z+1	; 0x01
    3198:	a2 0f       	add	r26, r18
    319a:	b1 1d       	adc	r27, r1
    319c:	2c 91       	ld	r18, X
    319e:	9f 5f       	subi	r25, 0xFF	; 255
    31a0:	89 23       	and	r24, r25
    31a2:	82 83       	std	Z+2, r24	; 0x02
    31a4:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    31a8:	0b c0       	rjmp	.+22     	; 0x31c0 <__vector_37+0x6c>
    31aa:	e9 ec       	ldi	r30, 0xC9	; 201
    31ac:	f0 e0       	ldi	r31, 0x00	; 0
    31ae:	80 81       	ld	r24, Z
    31b0:	8f 7d       	andi	r24, 0xDF	; 223
    31b2:	80 83       	st	Z, r24
    31b4:	05 c0       	rjmp	.+10     	; 0x31c0 <__vector_37+0x6c>
    31b6:	e9 ec       	ldi	r30, 0xC9	; 201
    31b8:	f0 e0       	ldi	r31, 0x00	; 0
    31ba:	80 81       	ld	r24, Z
    31bc:	8f 7d       	andi	r24, 0xDF	; 223
    31be:	80 83       	st	Z, r24
    31c0:	ff 91       	pop	r31
    31c2:	ef 91       	pop	r30
    31c4:	bf 91       	pop	r27
    31c6:	af 91       	pop	r26
    31c8:	9f 91       	pop	r25
    31ca:	8f 91       	pop	r24
    31cc:	2f 91       	pop	r18
    31ce:	0f 90       	pop	r0
    31d0:	0b be       	out	0x3b, r0	; 59
    31d2:	0f 90       	pop	r0
    31d4:	0f be       	out	0x3f, r0	; 63
    31d6:	0f 90       	pop	r0
    31d8:	1f 90       	pop	r1
    31da:	18 95       	reti

000031dc <__vector_51>:
    31dc:	1f 92       	push	r1
    31de:	0f 92       	push	r0
    31e0:	0f b6       	in	r0, 0x3f	; 63
    31e2:	0f 92       	push	r0
    31e4:	11 24       	eor	r1, r1
    31e6:	0b b6       	in	r0, 0x3b	; 59
    31e8:	0f 92       	push	r0
    31ea:	2f 93       	push	r18
    31ec:	3f 93       	push	r19
    31ee:	4f 93       	push	r20
    31f0:	5f 93       	push	r21
    31f2:	6f 93       	push	r22
    31f4:	7f 93       	push	r23
    31f6:	8f 93       	push	r24
    31f8:	9f 93       	push	r25
    31fa:	af 93       	push	r26
    31fc:	bf 93       	push	r27
    31fe:	cf 93       	push	r28
    3200:	df 93       	push	r29
    3202:	ef 93       	push	r30
    3204:	ff 93       	push	r31
    3206:	a0 91 f5 11 	lds	r26, 0x11F5	; 0x8011f5 <_ser_handle+0x4>
    320a:	b0 91 f6 11 	lds	r27, 0x11F6	; 0x8011f6 <_ser_handle+0x5>
    320e:	10 97       	sbiw	r26, 0x00	; 0
    3210:	11 f1       	breq	.+68     	; 0x3256 <__vector_51+0x7a>
    3212:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    3216:	14 96       	adiw	r26, 0x04	; 4
    3218:	ed 91       	ld	r30, X+
    321a:	fc 91       	ld	r31, X
    321c:	15 97       	sbiw	r26, 0x05	; 5
    321e:	93 81       	ldd	r25, Z+3	; 0x03
    3220:	82 81       	ldd	r24, Z+2	; 0x02
    3222:	25 81       	ldd	r18, Z+5	; 0x05
    3224:	98 1b       	sub	r25, r24
    3226:	92 23       	and	r25, r18
    3228:	84 81       	ldd	r24, Z+4	; 0x04
    322a:	98 17       	cp	r25, r24
    322c:	61 f0       	breq	.+24     	; 0x3246 <__vector_51+0x6a>
    322e:	83 81       	ldd	r24, Z+3	; 0x03
    3230:	26 95       	lsr	r18
    3232:	28 23       	and	r18, r24
    3234:	c0 81       	ld	r28, Z
    3236:	d1 81       	ldd	r29, Z+1	; 0x01
    3238:	c2 0f       	add	r28, r18
    323a:	d1 1d       	adc	r29, r1
    323c:	68 83       	st	Y, r22
    323e:	8f 5f       	subi	r24, 0xFF	; 255
    3240:	95 81       	ldd	r25, Z+5	; 0x05
    3242:	89 23       	and	r24, r25
    3244:	83 83       	std	Z+3, r24	; 0x03
    3246:	16 96       	adiw	r26, 0x06	; 6
    3248:	ed 91       	ld	r30, X+
    324a:	fc 91       	ld	r31, X
    324c:	17 97       	sbiw	r26, 0x07	; 7
    324e:	30 97       	sbiw	r30, 0x00	; 0
    3250:	11 f0       	breq	.+4      	; 0x3256 <__vector_51+0x7a>
    3252:	cd 01       	movw	r24, r26
    3254:	19 95       	eicall
    3256:	ff 91       	pop	r31
    3258:	ef 91       	pop	r30
    325a:	df 91       	pop	r29
    325c:	cf 91       	pop	r28
    325e:	bf 91       	pop	r27
    3260:	af 91       	pop	r26
    3262:	9f 91       	pop	r25
    3264:	8f 91       	pop	r24
    3266:	7f 91       	pop	r23
    3268:	6f 91       	pop	r22
    326a:	5f 91       	pop	r21
    326c:	4f 91       	pop	r20
    326e:	3f 91       	pop	r19
    3270:	2f 91       	pop	r18
    3272:	0f 90       	pop	r0
    3274:	0b be       	out	0x3b, r0	; 59
    3276:	0f 90       	pop	r0
    3278:	0f be       	out	0x3f, r0	; 63
    327a:	0f 90       	pop	r0
    327c:	1f 90       	pop	r1
    327e:	18 95       	reti

00003280 <__vector_52>:
    3280:	1f 92       	push	r1
    3282:	0f 92       	push	r0
    3284:	0f b6       	in	r0, 0x3f	; 63
    3286:	0f 92       	push	r0
    3288:	11 24       	eor	r1, r1
    328a:	0b b6       	in	r0, 0x3b	; 59
    328c:	0f 92       	push	r0
    328e:	2f 93       	push	r18
    3290:	8f 93       	push	r24
    3292:	9f 93       	push	r25
    3294:	af 93       	push	r26
    3296:	bf 93       	push	r27
    3298:	ef 93       	push	r30
    329a:	ff 93       	push	r31
    329c:	e0 91 f5 11 	lds	r30, 0x11F5	; 0x8011f5 <_ser_handle+0x4>
    32a0:	f0 91 f6 11 	lds	r31, 0x11F6	; 0x8011f6 <_ser_handle+0x5>
    32a4:	30 97       	sbiw	r30, 0x00	; 0
    32a6:	b9 f0       	breq	.+46     	; 0x32d6 <__vector_52+0x56>
    32a8:	02 80       	ldd	r0, Z+2	; 0x02
    32aa:	f3 81       	ldd	r31, Z+3	; 0x03
    32ac:	e0 2d       	mov	r30, r0
    32ae:	93 81       	ldd	r25, Z+3	; 0x03
    32b0:	82 81       	ldd	r24, Z+2	; 0x02
    32b2:	98 17       	cp	r25, r24
    32b4:	b1 f0       	breq	.+44     	; 0x32e2 <__vector_52+0x62>
    32b6:	92 81       	ldd	r25, Z+2	; 0x02
    32b8:	85 81       	ldd	r24, Z+5	; 0x05
    32ba:	28 2f       	mov	r18, r24
    32bc:	26 95       	lsr	r18
    32be:	29 23       	and	r18, r25
    32c0:	a0 81       	ld	r26, Z
    32c2:	b1 81       	ldd	r27, Z+1	; 0x01
    32c4:	a2 0f       	add	r26, r18
    32c6:	b1 1d       	adc	r27, r1
    32c8:	2c 91       	ld	r18, X
    32ca:	9f 5f       	subi	r25, 0xFF	; 255
    32cc:	89 23       	and	r24, r25
    32ce:	82 83       	std	Z+2, r24	; 0x02
    32d0:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    32d4:	0b c0       	rjmp	.+22     	; 0x32ec <__vector_52+0x6c>
    32d6:	e1 ed       	ldi	r30, 0xD1	; 209
    32d8:	f0 e0       	ldi	r31, 0x00	; 0
    32da:	80 81       	ld	r24, Z
    32dc:	8f 7d       	andi	r24, 0xDF	; 223
    32de:	80 83       	st	Z, r24
    32e0:	05 c0       	rjmp	.+10     	; 0x32ec <__vector_52+0x6c>
    32e2:	e1 ed       	ldi	r30, 0xD1	; 209
    32e4:	f0 e0       	ldi	r31, 0x00	; 0
    32e6:	80 81       	ld	r24, Z
    32e8:	8f 7d       	andi	r24, 0xDF	; 223
    32ea:	80 83       	st	Z, r24
    32ec:	ff 91       	pop	r31
    32ee:	ef 91       	pop	r30
    32f0:	bf 91       	pop	r27
    32f2:	af 91       	pop	r26
    32f4:	9f 91       	pop	r25
    32f6:	8f 91       	pop	r24
    32f8:	2f 91       	pop	r18
    32fa:	0f 90       	pop	r0
    32fc:	0b be       	out	0x3b, r0	; 59
    32fe:	0f 90       	pop	r0
    3300:	0f be       	out	0x3f, r0	; 63
    3302:	0f 90       	pop	r0
    3304:	1f 90       	pop	r1
    3306:	18 95       	reti

00003308 <__vector_54>:
    3308:	1f 92       	push	r1
    330a:	0f 92       	push	r0
    330c:	0f b6       	in	r0, 0x3f	; 63
    330e:	0f 92       	push	r0
    3310:	11 24       	eor	r1, r1
    3312:	0b b6       	in	r0, 0x3b	; 59
    3314:	0f 92       	push	r0
    3316:	2f 93       	push	r18
    3318:	3f 93       	push	r19
    331a:	4f 93       	push	r20
    331c:	5f 93       	push	r21
    331e:	6f 93       	push	r22
    3320:	7f 93       	push	r23
    3322:	8f 93       	push	r24
    3324:	9f 93       	push	r25
    3326:	af 93       	push	r26
    3328:	bf 93       	push	r27
    332a:	cf 93       	push	r28
    332c:	df 93       	push	r29
    332e:	ef 93       	push	r30
    3330:	ff 93       	push	r31
    3332:	a0 91 f7 11 	lds	r26, 0x11F7	; 0x8011f7 <_ser_handle+0x6>
    3336:	b0 91 f8 11 	lds	r27, 0x11F8	; 0x8011f8 <_ser_handle+0x7>
    333a:	10 97       	sbiw	r26, 0x00	; 0
    333c:	11 f1       	breq	.+68     	; 0x3382 <__vector_54+0x7a>
    333e:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    3342:	14 96       	adiw	r26, 0x04	; 4
    3344:	ed 91       	ld	r30, X+
    3346:	fc 91       	ld	r31, X
    3348:	15 97       	sbiw	r26, 0x05	; 5
    334a:	93 81       	ldd	r25, Z+3	; 0x03
    334c:	82 81       	ldd	r24, Z+2	; 0x02
    334e:	25 81       	ldd	r18, Z+5	; 0x05
    3350:	98 1b       	sub	r25, r24
    3352:	92 23       	and	r25, r18
    3354:	84 81       	ldd	r24, Z+4	; 0x04
    3356:	98 17       	cp	r25, r24
    3358:	61 f0       	breq	.+24     	; 0x3372 <__vector_54+0x6a>
    335a:	83 81       	ldd	r24, Z+3	; 0x03
    335c:	26 95       	lsr	r18
    335e:	28 23       	and	r18, r24
    3360:	c0 81       	ld	r28, Z
    3362:	d1 81       	ldd	r29, Z+1	; 0x01
    3364:	c2 0f       	add	r28, r18
    3366:	d1 1d       	adc	r29, r1
    3368:	68 83       	st	Y, r22
    336a:	8f 5f       	subi	r24, 0xFF	; 255
    336c:	95 81       	ldd	r25, Z+5	; 0x05
    336e:	89 23       	and	r24, r25
    3370:	83 83       	std	Z+3, r24	; 0x03
    3372:	16 96       	adiw	r26, 0x06	; 6
    3374:	ed 91       	ld	r30, X+
    3376:	fc 91       	ld	r31, X
    3378:	17 97       	sbiw	r26, 0x07	; 7
    337a:	30 97       	sbiw	r30, 0x00	; 0
    337c:	11 f0       	breq	.+4      	; 0x3382 <__vector_54+0x7a>
    337e:	cd 01       	movw	r24, r26
    3380:	19 95       	eicall
    3382:	ff 91       	pop	r31
    3384:	ef 91       	pop	r30
    3386:	df 91       	pop	r29
    3388:	cf 91       	pop	r28
    338a:	bf 91       	pop	r27
    338c:	af 91       	pop	r26
    338e:	9f 91       	pop	r25
    3390:	8f 91       	pop	r24
    3392:	7f 91       	pop	r23
    3394:	6f 91       	pop	r22
    3396:	5f 91       	pop	r21
    3398:	4f 91       	pop	r20
    339a:	3f 91       	pop	r19
    339c:	2f 91       	pop	r18
    339e:	0f 90       	pop	r0
    33a0:	0b be       	out	0x3b, r0	; 59
    33a2:	0f 90       	pop	r0
    33a4:	0f be       	out	0x3f, r0	; 63
    33a6:	0f 90       	pop	r0
    33a8:	1f 90       	pop	r1
    33aa:	18 95       	reti

000033ac <__vector_55>:
    33ac:	1f 92       	push	r1
    33ae:	0f 92       	push	r0
    33b0:	0f b6       	in	r0, 0x3f	; 63
    33b2:	0f 92       	push	r0
    33b4:	11 24       	eor	r1, r1
    33b6:	0b b6       	in	r0, 0x3b	; 59
    33b8:	0f 92       	push	r0
    33ba:	2f 93       	push	r18
    33bc:	8f 93       	push	r24
    33be:	9f 93       	push	r25
    33c0:	af 93       	push	r26
    33c2:	bf 93       	push	r27
    33c4:	ef 93       	push	r30
    33c6:	ff 93       	push	r31
    33c8:	e0 91 f7 11 	lds	r30, 0x11F7	; 0x8011f7 <_ser_handle+0x6>
    33cc:	f0 91 f8 11 	lds	r31, 0x11F8	; 0x8011f8 <_ser_handle+0x7>
    33d0:	30 97       	sbiw	r30, 0x00	; 0
    33d2:	b9 f0       	breq	.+46     	; 0x3402 <__vector_55+0x56>
    33d4:	02 80       	ldd	r0, Z+2	; 0x02
    33d6:	f3 81       	ldd	r31, Z+3	; 0x03
    33d8:	e0 2d       	mov	r30, r0
    33da:	93 81       	ldd	r25, Z+3	; 0x03
    33dc:	82 81       	ldd	r24, Z+2	; 0x02
    33de:	98 17       	cp	r25, r24
    33e0:	b1 f0       	breq	.+44     	; 0x340e <__vector_55+0x62>
    33e2:	92 81       	ldd	r25, Z+2	; 0x02
    33e4:	85 81       	ldd	r24, Z+5	; 0x05
    33e6:	28 2f       	mov	r18, r24
    33e8:	26 95       	lsr	r18
    33ea:	29 23       	and	r18, r25
    33ec:	a0 81       	ld	r26, Z
    33ee:	b1 81       	ldd	r27, Z+1	; 0x01
    33f0:	a2 0f       	add	r26, r18
    33f2:	b1 1d       	adc	r27, r1
    33f4:	2c 91       	ld	r18, X
    33f6:	9f 5f       	subi	r25, 0xFF	; 255
    33f8:	89 23       	and	r24, r25
    33fa:	82 83       	std	Z+2, r24	; 0x02
    33fc:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    3400:	0b c0       	rjmp	.+22     	; 0x3418 <__vector_55+0x6c>
    3402:	e1 e3       	ldi	r30, 0x31	; 49
    3404:	f1 e0       	ldi	r31, 0x01	; 1
    3406:	80 81       	ld	r24, Z
    3408:	8f 7d       	andi	r24, 0xDF	; 223
    340a:	80 83       	st	Z, r24
    340c:	05 c0       	rjmp	.+10     	; 0x3418 <__vector_55+0x6c>
    340e:	e1 e3       	ldi	r30, 0x31	; 49
    3410:	f1 e0       	ldi	r31, 0x01	; 1
    3412:	80 81       	ld	r24, Z
    3414:	8f 7d       	andi	r24, 0xDF	; 223
    3416:	80 83       	st	Z, r24
    3418:	ff 91       	pop	r31
    341a:	ef 91       	pop	r30
    341c:	bf 91       	pop	r27
    341e:	af 91       	pop	r26
    3420:	9f 91       	pop	r25
    3422:	8f 91       	pop	r24
    3424:	2f 91       	pop	r18
    3426:	0f 90       	pop	r0
    3428:	0b be       	out	0x3b, r0	; 59
    342a:	0f 90       	pop	r0
    342c:	0f be       	out	0x3f, r0	; 63
    342e:	0f 90       	pop	r0
    3430:	1f 90       	pop	r1
    3432:	18 95       	reti

00003434 <fifo_init>:
    3434:	fc 01       	movw	r30, r24
    3436:	41 11       	cpse	r20, r1
    3438:	01 c0       	rjmp	.+2      	; 0x343c <fifo_init+0x8>
    343a:	9b d3       	rcall	.+1846   	; 0x3b72 <abort>
    343c:	84 2f       	mov	r24, r20
    343e:	90 e0       	ldi	r25, 0x00	; 0
    3440:	9c 01       	movw	r18, r24
    3442:	21 50       	subi	r18, 0x01	; 1
    3444:	31 09       	sbc	r19, r1
    3446:	82 23       	and	r24, r18
    3448:	93 23       	and	r25, r19
    344a:	89 2b       	or	r24, r25
    344c:	09 f0       	breq	.+2      	; 0x3450 <fifo_init+0x1c>
    344e:	91 d3       	rcall	.+1826   	; 0x3b72 <abort>
    3450:	41 38       	cpi	r20, 0x81	; 129
    3452:	08 f0       	brcs	.+2      	; 0x3456 <fifo_init+0x22>
    3454:	8e d3       	rcall	.+1820   	; 0x3b72 <abort>
    3456:	12 82       	std	Z+2, r1	; 0x02
    3458:	13 82       	std	Z+3, r1	; 0x03
    345a:	44 83       	std	Z+4, r20	; 0x04
    345c:	44 0f       	add	r20, r20
    345e:	41 50       	subi	r20, 0x01	; 1
    3460:	45 83       	std	Z+5, r20	; 0x05
    3462:	71 83       	std	Z+1, r23	; 0x01
    3464:	60 83       	st	Z, r22
    3466:	80 e0       	ldi	r24, 0x00	; 0
    3468:	90 e0       	ldi	r25, 0x00	; 0
    346a:	08 95       	ret

0000346c <__subsf3>:
    346c:	50 58       	subi	r21, 0x80	; 128

0000346e <__addsf3>:
    346e:	bb 27       	eor	r27, r27
    3470:	aa 27       	eor	r26, r26
    3472:	0e d0       	rcall	.+28     	; 0x3490 <__addsf3x>
    3474:	0b c1       	rjmp	.+534    	; 0x368c <__fp_round>
    3476:	fc d0       	rcall	.+504    	; 0x3670 <__fp_pscA>
    3478:	30 f0       	brcs	.+12     	; 0x3486 <__addsf3+0x18>
    347a:	01 d1       	rcall	.+514    	; 0x367e <__fp_pscB>
    347c:	20 f0       	brcs	.+8      	; 0x3486 <__addsf3+0x18>
    347e:	31 f4       	brne	.+12     	; 0x348c <__addsf3+0x1e>
    3480:	9f 3f       	cpi	r25, 0xFF	; 255
    3482:	11 f4       	brne	.+4      	; 0x3488 <__addsf3+0x1a>
    3484:	1e f4       	brtc	.+6      	; 0x348c <__addsf3+0x1e>
    3486:	f1 c0       	rjmp	.+482    	; 0x366a <__fp_nan>
    3488:	0e f4       	brtc	.+2      	; 0x348c <__addsf3+0x1e>
    348a:	e0 95       	com	r30
    348c:	e7 fb       	bst	r30, 7
    348e:	e7 c0       	rjmp	.+462    	; 0x365e <__fp_inf>

00003490 <__addsf3x>:
    3490:	e9 2f       	mov	r30, r25
    3492:	0d d1       	rcall	.+538    	; 0x36ae <__fp_split3>
    3494:	80 f3       	brcs	.-32     	; 0x3476 <__addsf3+0x8>
    3496:	ba 17       	cp	r27, r26
    3498:	62 07       	cpc	r22, r18
    349a:	73 07       	cpc	r23, r19
    349c:	84 07       	cpc	r24, r20
    349e:	95 07       	cpc	r25, r21
    34a0:	18 f0       	brcs	.+6      	; 0x34a8 <__addsf3x+0x18>
    34a2:	71 f4       	brne	.+28     	; 0x34c0 <__addsf3x+0x30>
    34a4:	9e f5       	brtc	.+102    	; 0x350c <__addsf3x+0x7c>
    34a6:	25 c1       	rjmp	.+586    	; 0x36f2 <__fp_zero>
    34a8:	0e f4       	brtc	.+2      	; 0x34ac <__addsf3x+0x1c>
    34aa:	e0 95       	com	r30
    34ac:	0b 2e       	mov	r0, r27
    34ae:	ba 2f       	mov	r27, r26
    34b0:	a0 2d       	mov	r26, r0
    34b2:	0b 01       	movw	r0, r22
    34b4:	b9 01       	movw	r22, r18
    34b6:	90 01       	movw	r18, r0
    34b8:	0c 01       	movw	r0, r24
    34ba:	ca 01       	movw	r24, r20
    34bc:	a0 01       	movw	r20, r0
    34be:	11 24       	eor	r1, r1
    34c0:	ff 27       	eor	r31, r31
    34c2:	59 1b       	sub	r21, r25
    34c4:	99 f0       	breq	.+38     	; 0x34ec <__addsf3x+0x5c>
    34c6:	59 3f       	cpi	r21, 0xF9	; 249
    34c8:	50 f4       	brcc	.+20     	; 0x34de <__addsf3x+0x4e>
    34ca:	50 3e       	cpi	r21, 0xE0	; 224
    34cc:	68 f1       	brcs	.+90     	; 0x3528 <__addsf3x+0x98>
    34ce:	1a 16       	cp	r1, r26
    34d0:	f0 40       	sbci	r31, 0x00	; 0
    34d2:	a2 2f       	mov	r26, r18
    34d4:	23 2f       	mov	r18, r19
    34d6:	34 2f       	mov	r19, r20
    34d8:	44 27       	eor	r20, r20
    34da:	58 5f       	subi	r21, 0xF8	; 248
    34dc:	f3 cf       	rjmp	.-26     	; 0x34c4 <__addsf3x+0x34>
    34de:	46 95       	lsr	r20
    34e0:	37 95       	ror	r19
    34e2:	27 95       	ror	r18
    34e4:	a7 95       	ror	r26
    34e6:	f0 40       	sbci	r31, 0x00	; 0
    34e8:	53 95       	inc	r21
    34ea:	c9 f7       	brne	.-14     	; 0x34de <__addsf3x+0x4e>
    34ec:	7e f4       	brtc	.+30     	; 0x350c <__addsf3x+0x7c>
    34ee:	1f 16       	cp	r1, r31
    34f0:	ba 0b       	sbc	r27, r26
    34f2:	62 0b       	sbc	r22, r18
    34f4:	73 0b       	sbc	r23, r19
    34f6:	84 0b       	sbc	r24, r20
    34f8:	ba f0       	brmi	.+46     	; 0x3528 <__addsf3x+0x98>
    34fa:	91 50       	subi	r25, 0x01	; 1
    34fc:	a1 f0       	breq	.+40     	; 0x3526 <__addsf3x+0x96>
    34fe:	ff 0f       	add	r31, r31
    3500:	bb 1f       	adc	r27, r27
    3502:	66 1f       	adc	r22, r22
    3504:	77 1f       	adc	r23, r23
    3506:	88 1f       	adc	r24, r24
    3508:	c2 f7       	brpl	.-16     	; 0x34fa <__addsf3x+0x6a>
    350a:	0e c0       	rjmp	.+28     	; 0x3528 <__addsf3x+0x98>
    350c:	ba 0f       	add	r27, r26
    350e:	62 1f       	adc	r22, r18
    3510:	73 1f       	adc	r23, r19
    3512:	84 1f       	adc	r24, r20
    3514:	48 f4       	brcc	.+18     	; 0x3528 <__addsf3x+0x98>
    3516:	87 95       	ror	r24
    3518:	77 95       	ror	r23
    351a:	67 95       	ror	r22
    351c:	b7 95       	ror	r27
    351e:	f7 95       	ror	r31
    3520:	9e 3f       	cpi	r25, 0xFE	; 254
    3522:	08 f0       	brcs	.+2      	; 0x3526 <__addsf3x+0x96>
    3524:	b3 cf       	rjmp	.-154    	; 0x348c <__addsf3+0x1e>
    3526:	93 95       	inc	r25
    3528:	88 0f       	add	r24, r24
    352a:	08 f0       	brcs	.+2      	; 0x352e <__addsf3x+0x9e>
    352c:	99 27       	eor	r25, r25
    352e:	ee 0f       	add	r30, r30
    3530:	97 95       	ror	r25
    3532:	87 95       	ror	r24
    3534:	08 95       	ret

00003536 <__divsf3>:
    3536:	0c d0       	rcall	.+24     	; 0x3550 <__divsf3x>
    3538:	a9 c0       	rjmp	.+338    	; 0x368c <__fp_round>
    353a:	a1 d0       	rcall	.+322    	; 0x367e <__fp_pscB>
    353c:	40 f0       	brcs	.+16     	; 0x354e <__divsf3+0x18>
    353e:	98 d0       	rcall	.+304    	; 0x3670 <__fp_pscA>
    3540:	30 f0       	brcs	.+12     	; 0x354e <__divsf3+0x18>
    3542:	21 f4       	brne	.+8      	; 0x354c <__divsf3+0x16>
    3544:	5f 3f       	cpi	r21, 0xFF	; 255
    3546:	19 f0       	breq	.+6      	; 0x354e <__divsf3+0x18>
    3548:	8a c0       	rjmp	.+276    	; 0x365e <__fp_inf>
    354a:	51 11       	cpse	r21, r1
    354c:	d3 c0       	rjmp	.+422    	; 0x36f4 <__fp_szero>
    354e:	8d c0       	rjmp	.+282    	; 0x366a <__fp_nan>

00003550 <__divsf3x>:
    3550:	ae d0       	rcall	.+348    	; 0x36ae <__fp_split3>
    3552:	98 f3       	brcs	.-26     	; 0x353a <__divsf3+0x4>

00003554 <__divsf3_pse>:
    3554:	99 23       	and	r25, r25
    3556:	c9 f3       	breq	.-14     	; 0x354a <__divsf3+0x14>
    3558:	55 23       	and	r21, r21
    355a:	b1 f3       	breq	.-20     	; 0x3548 <__divsf3+0x12>
    355c:	95 1b       	sub	r25, r21
    355e:	55 0b       	sbc	r21, r21
    3560:	bb 27       	eor	r27, r27
    3562:	aa 27       	eor	r26, r26
    3564:	62 17       	cp	r22, r18
    3566:	73 07       	cpc	r23, r19
    3568:	84 07       	cpc	r24, r20
    356a:	38 f0       	brcs	.+14     	; 0x357a <__divsf3_pse+0x26>
    356c:	9f 5f       	subi	r25, 0xFF	; 255
    356e:	5f 4f       	sbci	r21, 0xFF	; 255
    3570:	22 0f       	add	r18, r18
    3572:	33 1f       	adc	r19, r19
    3574:	44 1f       	adc	r20, r20
    3576:	aa 1f       	adc	r26, r26
    3578:	a9 f3       	breq	.-22     	; 0x3564 <__divsf3_pse+0x10>
    357a:	33 d0       	rcall	.+102    	; 0x35e2 <__divsf3_pse+0x8e>
    357c:	0e 2e       	mov	r0, r30
    357e:	3a f0       	brmi	.+14     	; 0x358e <__divsf3_pse+0x3a>
    3580:	e0 e8       	ldi	r30, 0x80	; 128
    3582:	30 d0       	rcall	.+96     	; 0x35e4 <__divsf3_pse+0x90>
    3584:	91 50       	subi	r25, 0x01	; 1
    3586:	50 40       	sbci	r21, 0x00	; 0
    3588:	e6 95       	lsr	r30
    358a:	00 1c       	adc	r0, r0
    358c:	ca f7       	brpl	.-14     	; 0x3580 <__divsf3_pse+0x2c>
    358e:	29 d0       	rcall	.+82     	; 0x35e2 <__divsf3_pse+0x8e>
    3590:	fe 2f       	mov	r31, r30
    3592:	27 d0       	rcall	.+78     	; 0x35e2 <__divsf3_pse+0x8e>
    3594:	66 0f       	add	r22, r22
    3596:	77 1f       	adc	r23, r23
    3598:	88 1f       	adc	r24, r24
    359a:	bb 1f       	adc	r27, r27
    359c:	26 17       	cp	r18, r22
    359e:	37 07       	cpc	r19, r23
    35a0:	48 07       	cpc	r20, r24
    35a2:	ab 07       	cpc	r26, r27
    35a4:	b0 e8       	ldi	r27, 0x80	; 128
    35a6:	09 f0       	breq	.+2      	; 0x35aa <__divsf3_pse+0x56>
    35a8:	bb 0b       	sbc	r27, r27
    35aa:	80 2d       	mov	r24, r0
    35ac:	bf 01       	movw	r22, r30
    35ae:	ff 27       	eor	r31, r31
    35b0:	93 58       	subi	r25, 0x83	; 131
    35b2:	5f 4f       	sbci	r21, 0xFF	; 255
    35b4:	2a f0       	brmi	.+10     	; 0x35c0 <__divsf3_pse+0x6c>
    35b6:	9e 3f       	cpi	r25, 0xFE	; 254
    35b8:	51 05       	cpc	r21, r1
    35ba:	68 f0       	brcs	.+26     	; 0x35d6 <__divsf3_pse+0x82>
    35bc:	50 c0       	rjmp	.+160    	; 0x365e <__fp_inf>
    35be:	9a c0       	rjmp	.+308    	; 0x36f4 <__fp_szero>
    35c0:	5f 3f       	cpi	r21, 0xFF	; 255
    35c2:	ec f3       	brlt	.-6      	; 0x35be <__divsf3_pse+0x6a>
    35c4:	98 3e       	cpi	r25, 0xE8	; 232
    35c6:	dc f3       	brlt	.-10     	; 0x35be <__divsf3_pse+0x6a>
    35c8:	86 95       	lsr	r24
    35ca:	77 95       	ror	r23
    35cc:	67 95       	ror	r22
    35ce:	b7 95       	ror	r27
    35d0:	f7 95       	ror	r31
    35d2:	9f 5f       	subi	r25, 0xFF	; 255
    35d4:	c9 f7       	brne	.-14     	; 0x35c8 <__divsf3_pse+0x74>
    35d6:	88 0f       	add	r24, r24
    35d8:	91 1d       	adc	r25, r1
    35da:	96 95       	lsr	r25
    35dc:	87 95       	ror	r24
    35de:	97 f9       	bld	r25, 7
    35e0:	08 95       	ret
    35e2:	e1 e0       	ldi	r30, 0x01	; 1
    35e4:	66 0f       	add	r22, r22
    35e6:	77 1f       	adc	r23, r23
    35e8:	88 1f       	adc	r24, r24
    35ea:	bb 1f       	adc	r27, r27
    35ec:	62 17       	cp	r22, r18
    35ee:	73 07       	cpc	r23, r19
    35f0:	84 07       	cpc	r24, r20
    35f2:	ba 07       	cpc	r27, r26
    35f4:	20 f0       	brcs	.+8      	; 0x35fe <__divsf3_pse+0xaa>
    35f6:	62 1b       	sub	r22, r18
    35f8:	73 0b       	sbc	r23, r19
    35fa:	84 0b       	sbc	r24, r20
    35fc:	ba 0b       	sbc	r27, r26
    35fe:	ee 1f       	adc	r30, r30
    3600:	88 f7       	brcc	.-30     	; 0x35e4 <__divsf3_pse+0x90>
    3602:	e0 95       	com	r30
    3604:	08 95       	ret

00003606 <__fixunssfsi>:
    3606:	5b d0       	rcall	.+182    	; 0x36be <__fp_splitA>
    3608:	88 f0       	brcs	.+34     	; 0x362c <__fixunssfsi+0x26>
    360a:	9f 57       	subi	r25, 0x7F	; 127
    360c:	90 f0       	brcs	.+36     	; 0x3632 <__fixunssfsi+0x2c>
    360e:	b9 2f       	mov	r27, r25
    3610:	99 27       	eor	r25, r25
    3612:	b7 51       	subi	r27, 0x17	; 23
    3614:	a0 f0       	brcs	.+40     	; 0x363e <__fixunssfsi+0x38>
    3616:	d1 f0       	breq	.+52     	; 0x364c <__fixunssfsi+0x46>
    3618:	66 0f       	add	r22, r22
    361a:	77 1f       	adc	r23, r23
    361c:	88 1f       	adc	r24, r24
    361e:	99 1f       	adc	r25, r25
    3620:	1a f0       	brmi	.+6      	; 0x3628 <__fixunssfsi+0x22>
    3622:	ba 95       	dec	r27
    3624:	c9 f7       	brne	.-14     	; 0x3618 <__fixunssfsi+0x12>
    3626:	12 c0       	rjmp	.+36     	; 0x364c <__fixunssfsi+0x46>
    3628:	b1 30       	cpi	r27, 0x01	; 1
    362a:	81 f0       	breq	.+32     	; 0x364c <__fixunssfsi+0x46>
    362c:	62 d0       	rcall	.+196    	; 0x36f2 <__fp_zero>
    362e:	b1 e0       	ldi	r27, 0x01	; 1
    3630:	08 95       	ret
    3632:	5f c0       	rjmp	.+190    	; 0x36f2 <__fp_zero>
    3634:	67 2f       	mov	r22, r23
    3636:	78 2f       	mov	r23, r24
    3638:	88 27       	eor	r24, r24
    363a:	b8 5f       	subi	r27, 0xF8	; 248
    363c:	39 f0       	breq	.+14     	; 0x364c <__fixunssfsi+0x46>
    363e:	b9 3f       	cpi	r27, 0xF9	; 249
    3640:	cc f3       	brlt	.-14     	; 0x3634 <__fixunssfsi+0x2e>
    3642:	86 95       	lsr	r24
    3644:	77 95       	ror	r23
    3646:	67 95       	ror	r22
    3648:	b3 95       	inc	r27
    364a:	d9 f7       	brne	.-10     	; 0x3642 <__fixunssfsi+0x3c>
    364c:	3e f4       	brtc	.+14     	; 0x365c <__fixunssfsi+0x56>
    364e:	90 95       	com	r25
    3650:	80 95       	com	r24
    3652:	70 95       	com	r23
    3654:	61 95       	neg	r22
    3656:	7f 4f       	sbci	r23, 0xFF	; 255
    3658:	8f 4f       	sbci	r24, 0xFF	; 255
    365a:	9f 4f       	sbci	r25, 0xFF	; 255
    365c:	08 95       	ret

0000365e <__fp_inf>:
    365e:	97 f9       	bld	r25, 7
    3660:	9f 67       	ori	r25, 0x7F	; 127
    3662:	80 e8       	ldi	r24, 0x80	; 128
    3664:	70 e0       	ldi	r23, 0x00	; 0
    3666:	60 e0       	ldi	r22, 0x00	; 0
    3668:	08 95       	ret

0000366a <__fp_nan>:
    366a:	9f ef       	ldi	r25, 0xFF	; 255
    366c:	80 ec       	ldi	r24, 0xC0	; 192
    366e:	08 95       	ret

00003670 <__fp_pscA>:
    3670:	00 24       	eor	r0, r0
    3672:	0a 94       	dec	r0
    3674:	16 16       	cp	r1, r22
    3676:	17 06       	cpc	r1, r23
    3678:	18 06       	cpc	r1, r24
    367a:	09 06       	cpc	r0, r25
    367c:	08 95       	ret

0000367e <__fp_pscB>:
    367e:	00 24       	eor	r0, r0
    3680:	0a 94       	dec	r0
    3682:	12 16       	cp	r1, r18
    3684:	13 06       	cpc	r1, r19
    3686:	14 06       	cpc	r1, r20
    3688:	05 06       	cpc	r0, r21
    368a:	08 95       	ret

0000368c <__fp_round>:
    368c:	09 2e       	mov	r0, r25
    368e:	03 94       	inc	r0
    3690:	00 0c       	add	r0, r0
    3692:	11 f4       	brne	.+4      	; 0x3698 <__fp_round+0xc>
    3694:	88 23       	and	r24, r24
    3696:	52 f0       	brmi	.+20     	; 0x36ac <__fp_round+0x20>
    3698:	bb 0f       	add	r27, r27
    369a:	40 f4       	brcc	.+16     	; 0x36ac <__fp_round+0x20>
    369c:	bf 2b       	or	r27, r31
    369e:	11 f4       	brne	.+4      	; 0x36a4 <__fp_round+0x18>
    36a0:	60 ff       	sbrs	r22, 0
    36a2:	04 c0       	rjmp	.+8      	; 0x36ac <__fp_round+0x20>
    36a4:	6f 5f       	subi	r22, 0xFF	; 255
    36a6:	7f 4f       	sbci	r23, 0xFF	; 255
    36a8:	8f 4f       	sbci	r24, 0xFF	; 255
    36aa:	9f 4f       	sbci	r25, 0xFF	; 255
    36ac:	08 95       	ret

000036ae <__fp_split3>:
    36ae:	57 fd       	sbrc	r21, 7
    36b0:	90 58       	subi	r25, 0x80	; 128
    36b2:	44 0f       	add	r20, r20
    36b4:	55 1f       	adc	r21, r21
    36b6:	59 f0       	breq	.+22     	; 0x36ce <__fp_splitA+0x10>
    36b8:	5f 3f       	cpi	r21, 0xFF	; 255
    36ba:	71 f0       	breq	.+28     	; 0x36d8 <__fp_splitA+0x1a>
    36bc:	47 95       	ror	r20

000036be <__fp_splitA>:
    36be:	88 0f       	add	r24, r24
    36c0:	97 fb       	bst	r25, 7
    36c2:	99 1f       	adc	r25, r25
    36c4:	61 f0       	breq	.+24     	; 0x36de <__fp_splitA+0x20>
    36c6:	9f 3f       	cpi	r25, 0xFF	; 255
    36c8:	79 f0       	breq	.+30     	; 0x36e8 <__fp_splitA+0x2a>
    36ca:	87 95       	ror	r24
    36cc:	08 95       	ret
    36ce:	12 16       	cp	r1, r18
    36d0:	13 06       	cpc	r1, r19
    36d2:	14 06       	cpc	r1, r20
    36d4:	55 1f       	adc	r21, r21
    36d6:	f2 cf       	rjmp	.-28     	; 0x36bc <__fp_split3+0xe>
    36d8:	46 95       	lsr	r20
    36da:	f1 df       	rcall	.-30     	; 0x36be <__fp_splitA>
    36dc:	08 c0       	rjmp	.+16     	; 0x36ee <__fp_splitA+0x30>
    36de:	16 16       	cp	r1, r22
    36e0:	17 06       	cpc	r1, r23
    36e2:	18 06       	cpc	r1, r24
    36e4:	99 1f       	adc	r25, r25
    36e6:	f1 cf       	rjmp	.-30     	; 0x36ca <__fp_splitA+0xc>
    36e8:	86 95       	lsr	r24
    36ea:	71 05       	cpc	r23, r1
    36ec:	61 05       	cpc	r22, r1
    36ee:	08 94       	sec
    36f0:	08 95       	ret

000036f2 <__fp_zero>:
    36f2:	e8 94       	clt

000036f4 <__fp_szero>:
    36f4:	bb 27       	eor	r27, r27
    36f6:	66 27       	eor	r22, r22
    36f8:	77 27       	eor	r23, r23
    36fa:	cb 01       	movw	r24, r22
    36fc:	97 f9       	bld	r25, 7
    36fe:	08 95       	ret

00003700 <__mulsf3>:
    3700:	0b d0       	rcall	.+22     	; 0x3718 <__mulsf3x>
    3702:	c4 cf       	rjmp	.-120    	; 0x368c <__fp_round>
    3704:	b5 df       	rcall	.-150    	; 0x3670 <__fp_pscA>
    3706:	28 f0       	brcs	.+10     	; 0x3712 <__mulsf3+0x12>
    3708:	ba df       	rcall	.-140    	; 0x367e <__fp_pscB>
    370a:	18 f0       	brcs	.+6      	; 0x3712 <__mulsf3+0x12>
    370c:	95 23       	and	r25, r21
    370e:	09 f0       	breq	.+2      	; 0x3712 <__mulsf3+0x12>
    3710:	a6 cf       	rjmp	.-180    	; 0x365e <__fp_inf>
    3712:	ab cf       	rjmp	.-170    	; 0x366a <__fp_nan>
    3714:	11 24       	eor	r1, r1
    3716:	ee cf       	rjmp	.-36     	; 0x36f4 <__fp_szero>

00003718 <__mulsf3x>:
    3718:	ca df       	rcall	.-108    	; 0x36ae <__fp_split3>
    371a:	a0 f3       	brcs	.-24     	; 0x3704 <__mulsf3+0x4>

0000371c <__mulsf3_pse>:
    371c:	95 9f       	mul	r25, r21
    371e:	d1 f3       	breq	.-12     	; 0x3714 <__mulsf3+0x14>
    3720:	95 0f       	add	r25, r21
    3722:	50 e0       	ldi	r21, 0x00	; 0
    3724:	55 1f       	adc	r21, r21
    3726:	62 9f       	mul	r22, r18
    3728:	f0 01       	movw	r30, r0
    372a:	72 9f       	mul	r23, r18
    372c:	bb 27       	eor	r27, r27
    372e:	f0 0d       	add	r31, r0
    3730:	b1 1d       	adc	r27, r1
    3732:	63 9f       	mul	r22, r19
    3734:	aa 27       	eor	r26, r26
    3736:	f0 0d       	add	r31, r0
    3738:	b1 1d       	adc	r27, r1
    373a:	aa 1f       	adc	r26, r26
    373c:	64 9f       	mul	r22, r20
    373e:	66 27       	eor	r22, r22
    3740:	b0 0d       	add	r27, r0
    3742:	a1 1d       	adc	r26, r1
    3744:	66 1f       	adc	r22, r22
    3746:	82 9f       	mul	r24, r18
    3748:	22 27       	eor	r18, r18
    374a:	b0 0d       	add	r27, r0
    374c:	a1 1d       	adc	r26, r1
    374e:	62 1f       	adc	r22, r18
    3750:	73 9f       	mul	r23, r19
    3752:	b0 0d       	add	r27, r0
    3754:	a1 1d       	adc	r26, r1
    3756:	62 1f       	adc	r22, r18
    3758:	83 9f       	mul	r24, r19
    375a:	a0 0d       	add	r26, r0
    375c:	61 1d       	adc	r22, r1
    375e:	22 1f       	adc	r18, r18
    3760:	74 9f       	mul	r23, r20
    3762:	33 27       	eor	r19, r19
    3764:	a0 0d       	add	r26, r0
    3766:	61 1d       	adc	r22, r1
    3768:	23 1f       	adc	r18, r19
    376a:	84 9f       	mul	r24, r20
    376c:	60 0d       	add	r22, r0
    376e:	21 1d       	adc	r18, r1
    3770:	82 2f       	mov	r24, r18
    3772:	76 2f       	mov	r23, r22
    3774:	6a 2f       	mov	r22, r26
    3776:	11 24       	eor	r1, r1
    3778:	9f 57       	subi	r25, 0x7F	; 127
    377a:	50 40       	sbci	r21, 0x00	; 0
    377c:	8a f0       	brmi	.+34     	; 0x37a0 <__mulsf3_pse+0x84>
    377e:	e1 f0       	breq	.+56     	; 0x37b8 <__mulsf3_pse+0x9c>
    3780:	88 23       	and	r24, r24
    3782:	4a f0       	brmi	.+18     	; 0x3796 <__mulsf3_pse+0x7a>
    3784:	ee 0f       	add	r30, r30
    3786:	ff 1f       	adc	r31, r31
    3788:	bb 1f       	adc	r27, r27
    378a:	66 1f       	adc	r22, r22
    378c:	77 1f       	adc	r23, r23
    378e:	88 1f       	adc	r24, r24
    3790:	91 50       	subi	r25, 0x01	; 1
    3792:	50 40       	sbci	r21, 0x00	; 0
    3794:	a9 f7       	brne	.-22     	; 0x3780 <__mulsf3_pse+0x64>
    3796:	9e 3f       	cpi	r25, 0xFE	; 254
    3798:	51 05       	cpc	r21, r1
    379a:	70 f0       	brcs	.+28     	; 0x37b8 <__mulsf3_pse+0x9c>
    379c:	60 cf       	rjmp	.-320    	; 0x365e <__fp_inf>
    379e:	aa cf       	rjmp	.-172    	; 0x36f4 <__fp_szero>
    37a0:	5f 3f       	cpi	r21, 0xFF	; 255
    37a2:	ec f3       	brlt	.-6      	; 0x379e <__mulsf3_pse+0x82>
    37a4:	98 3e       	cpi	r25, 0xE8	; 232
    37a6:	dc f3       	brlt	.-10     	; 0x379e <__mulsf3_pse+0x82>
    37a8:	86 95       	lsr	r24
    37aa:	77 95       	ror	r23
    37ac:	67 95       	ror	r22
    37ae:	b7 95       	ror	r27
    37b0:	f7 95       	ror	r31
    37b2:	e7 95       	ror	r30
    37b4:	9f 5f       	subi	r25, 0xFF	; 255
    37b6:	c1 f7       	brne	.-16     	; 0x37a8 <__mulsf3_pse+0x8c>
    37b8:	fe 2b       	or	r31, r30
    37ba:	88 0f       	add	r24, r24
    37bc:	91 1d       	adc	r25, r1
    37be:	96 95       	lsr	r25
    37c0:	87 95       	ror	r24
    37c2:	97 f9       	bld	r25, 7
    37c4:	08 95       	ret

000037c6 <__divmodhi4>:
    37c6:	97 fb       	bst	r25, 7
    37c8:	07 2e       	mov	r0, r23
    37ca:	16 f4       	brtc	.+4      	; 0x37d0 <__divmodhi4+0xa>
    37cc:	00 94       	com	r0
    37ce:	06 d0       	rcall	.+12     	; 0x37dc <__divmodhi4_neg1>
    37d0:	77 fd       	sbrc	r23, 7
    37d2:	08 d0       	rcall	.+16     	; 0x37e4 <__divmodhi4_neg2>
    37d4:	44 d0       	rcall	.+136    	; 0x385e <__udivmodhi4>
    37d6:	07 fc       	sbrc	r0, 7
    37d8:	05 d0       	rcall	.+10     	; 0x37e4 <__divmodhi4_neg2>
    37da:	3e f4       	brtc	.+14     	; 0x37ea <__divmodhi4_exit>

000037dc <__divmodhi4_neg1>:
    37dc:	90 95       	com	r25
    37de:	81 95       	neg	r24
    37e0:	9f 4f       	sbci	r25, 0xFF	; 255
    37e2:	08 95       	ret

000037e4 <__divmodhi4_neg2>:
    37e4:	70 95       	com	r23
    37e6:	61 95       	neg	r22
    37e8:	7f 4f       	sbci	r23, 0xFF	; 255

000037ea <__divmodhi4_exit>:
    37ea:	08 95       	ret

000037ec <__udivmodsi4>:
    37ec:	a1 e2       	ldi	r26, 0x21	; 33
    37ee:	1a 2e       	mov	r1, r26
    37f0:	aa 1b       	sub	r26, r26
    37f2:	bb 1b       	sub	r27, r27
    37f4:	fd 01       	movw	r30, r26
    37f6:	0d c0       	rjmp	.+26     	; 0x3812 <__udivmodsi4_ep>

000037f8 <__udivmodsi4_loop>:
    37f8:	aa 1f       	adc	r26, r26
    37fa:	bb 1f       	adc	r27, r27
    37fc:	ee 1f       	adc	r30, r30
    37fe:	ff 1f       	adc	r31, r31
    3800:	a2 17       	cp	r26, r18
    3802:	b3 07       	cpc	r27, r19
    3804:	e4 07       	cpc	r30, r20
    3806:	f5 07       	cpc	r31, r21
    3808:	20 f0       	brcs	.+8      	; 0x3812 <__udivmodsi4_ep>
    380a:	a2 1b       	sub	r26, r18
    380c:	b3 0b       	sbc	r27, r19
    380e:	e4 0b       	sbc	r30, r20
    3810:	f5 0b       	sbc	r31, r21

00003812 <__udivmodsi4_ep>:
    3812:	66 1f       	adc	r22, r22
    3814:	77 1f       	adc	r23, r23
    3816:	88 1f       	adc	r24, r24
    3818:	99 1f       	adc	r25, r25
    381a:	1a 94       	dec	r1
    381c:	69 f7       	brne	.-38     	; 0x37f8 <__udivmodsi4_loop>
    381e:	60 95       	com	r22
    3820:	70 95       	com	r23
    3822:	80 95       	com	r24
    3824:	90 95       	com	r25
    3826:	9b 01       	movw	r18, r22
    3828:	ac 01       	movw	r20, r24
    382a:	bd 01       	movw	r22, r26
    382c:	cf 01       	movw	r24, r30
    382e:	08 95       	ret

00003830 <__tablejump2__>:
    3830:	ee 0f       	add	r30, r30
    3832:	ff 1f       	adc	r31, r31
    3834:	88 1f       	adc	r24, r24
    3836:	8b bf       	out	0x3b, r24	; 59
    3838:	07 90       	elpm	r0, Z+
    383a:	f6 91       	elpm	r31, Z
    383c:	e0 2d       	mov	r30, r0
    383e:	19 94       	eijmp

00003840 <__umulhisi3>:
    3840:	a2 9f       	mul	r26, r18
    3842:	b0 01       	movw	r22, r0
    3844:	b3 9f       	mul	r27, r19
    3846:	c0 01       	movw	r24, r0
    3848:	a3 9f       	mul	r26, r19
    384a:	70 0d       	add	r23, r0
    384c:	81 1d       	adc	r24, r1
    384e:	11 24       	eor	r1, r1
    3850:	91 1d       	adc	r25, r1
    3852:	b2 9f       	mul	r27, r18
    3854:	70 0d       	add	r23, r0
    3856:	81 1d       	adc	r24, r1
    3858:	11 24       	eor	r1, r1
    385a:	91 1d       	adc	r25, r1
    385c:	08 95       	ret

0000385e <__udivmodhi4>:
    385e:	aa 1b       	sub	r26, r26
    3860:	bb 1b       	sub	r27, r27
    3862:	51 e1       	ldi	r21, 0x11	; 17
    3864:	07 c0       	rjmp	.+14     	; 0x3874 <__udivmodhi4_ep>

00003866 <__udivmodhi4_loop>:
    3866:	aa 1f       	adc	r26, r26
    3868:	bb 1f       	adc	r27, r27
    386a:	a6 17       	cp	r26, r22
    386c:	b7 07       	cpc	r27, r23
    386e:	10 f0       	brcs	.+4      	; 0x3874 <__udivmodhi4_ep>
    3870:	a6 1b       	sub	r26, r22
    3872:	b7 0b       	sbc	r27, r23

00003874 <__udivmodhi4_ep>:
    3874:	88 1f       	adc	r24, r24
    3876:	99 1f       	adc	r25, r25
    3878:	5a 95       	dec	r21
    387a:	a9 f7       	brne	.-22     	; 0x3866 <__udivmodhi4_loop>
    387c:	80 95       	com	r24
    387e:	90 95       	com	r25
    3880:	bc 01       	movw	r22, r24
    3882:	cd 01       	movw	r24, r26
    3884:	08 95       	ret

00003886 <malloc>:
    3886:	0f 93       	push	r16
    3888:	1f 93       	push	r17
    388a:	cf 93       	push	r28
    388c:	df 93       	push	r29
    388e:	82 30       	cpi	r24, 0x02	; 2
    3890:	91 05       	cpc	r25, r1
    3892:	10 f4       	brcc	.+4      	; 0x3898 <malloc+0x12>
    3894:	82 e0       	ldi	r24, 0x02	; 2
    3896:	90 e0       	ldi	r25, 0x00	; 0
    3898:	e0 91 01 12 	lds	r30, 0x1201	; 0x801201 <__flp>
    389c:	f0 91 02 12 	lds	r31, 0x1202	; 0x801202 <__flp+0x1>
    38a0:	20 e0       	ldi	r18, 0x00	; 0
    38a2:	30 e0       	ldi	r19, 0x00	; 0
    38a4:	a0 e0       	ldi	r26, 0x00	; 0
    38a6:	b0 e0       	ldi	r27, 0x00	; 0
    38a8:	30 97       	sbiw	r30, 0x00	; 0
    38aa:	19 f1       	breq	.+70     	; 0x38f2 <malloc+0x6c>
    38ac:	40 81       	ld	r20, Z
    38ae:	51 81       	ldd	r21, Z+1	; 0x01
    38b0:	02 81       	ldd	r16, Z+2	; 0x02
    38b2:	13 81       	ldd	r17, Z+3	; 0x03
    38b4:	48 17       	cp	r20, r24
    38b6:	59 07       	cpc	r21, r25
    38b8:	c8 f0       	brcs	.+50     	; 0x38ec <malloc+0x66>
    38ba:	84 17       	cp	r24, r20
    38bc:	95 07       	cpc	r25, r21
    38be:	69 f4       	brne	.+26     	; 0x38da <malloc+0x54>
    38c0:	10 97       	sbiw	r26, 0x00	; 0
    38c2:	31 f0       	breq	.+12     	; 0x38d0 <malloc+0x4a>
    38c4:	12 96       	adiw	r26, 0x02	; 2
    38c6:	0c 93       	st	X, r16
    38c8:	12 97       	sbiw	r26, 0x02	; 2
    38ca:	13 96       	adiw	r26, 0x03	; 3
    38cc:	1c 93       	st	X, r17
    38ce:	27 c0       	rjmp	.+78     	; 0x391e <malloc+0x98>
    38d0:	00 93 01 12 	sts	0x1201, r16	; 0x801201 <__flp>
    38d4:	10 93 02 12 	sts	0x1202, r17	; 0x801202 <__flp+0x1>
    38d8:	22 c0       	rjmp	.+68     	; 0x391e <malloc+0x98>
    38da:	21 15       	cp	r18, r1
    38dc:	31 05       	cpc	r19, r1
    38de:	19 f0       	breq	.+6      	; 0x38e6 <malloc+0x60>
    38e0:	42 17       	cp	r20, r18
    38e2:	53 07       	cpc	r21, r19
    38e4:	18 f4       	brcc	.+6      	; 0x38ec <malloc+0x66>
    38e6:	9a 01       	movw	r18, r20
    38e8:	bd 01       	movw	r22, r26
    38ea:	ef 01       	movw	r28, r30
    38ec:	df 01       	movw	r26, r30
    38ee:	f8 01       	movw	r30, r16
    38f0:	db cf       	rjmp	.-74     	; 0x38a8 <malloc+0x22>
    38f2:	21 15       	cp	r18, r1
    38f4:	31 05       	cpc	r19, r1
    38f6:	f9 f0       	breq	.+62     	; 0x3936 <malloc+0xb0>
    38f8:	28 1b       	sub	r18, r24
    38fa:	39 0b       	sbc	r19, r25
    38fc:	24 30       	cpi	r18, 0x04	; 4
    38fe:	31 05       	cpc	r19, r1
    3900:	80 f4       	brcc	.+32     	; 0x3922 <malloc+0x9c>
    3902:	8a 81       	ldd	r24, Y+2	; 0x02
    3904:	9b 81       	ldd	r25, Y+3	; 0x03
    3906:	61 15       	cp	r22, r1
    3908:	71 05       	cpc	r23, r1
    390a:	21 f0       	breq	.+8      	; 0x3914 <malloc+0x8e>
    390c:	fb 01       	movw	r30, r22
    390e:	93 83       	std	Z+3, r25	; 0x03
    3910:	82 83       	std	Z+2, r24	; 0x02
    3912:	04 c0       	rjmp	.+8      	; 0x391c <malloc+0x96>
    3914:	90 93 02 12 	sts	0x1202, r25	; 0x801202 <__flp+0x1>
    3918:	80 93 01 12 	sts	0x1201, r24	; 0x801201 <__flp>
    391c:	fe 01       	movw	r30, r28
    391e:	32 96       	adiw	r30, 0x02	; 2
    3920:	44 c0       	rjmp	.+136    	; 0x39aa <malloc+0x124>
    3922:	fe 01       	movw	r30, r28
    3924:	e2 0f       	add	r30, r18
    3926:	f3 1f       	adc	r31, r19
    3928:	81 93       	st	Z+, r24
    392a:	91 93       	st	Z+, r25
    392c:	22 50       	subi	r18, 0x02	; 2
    392e:	31 09       	sbc	r19, r1
    3930:	39 83       	std	Y+1, r19	; 0x01
    3932:	28 83       	st	Y, r18
    3934:	3a c0       	rjmp	.+116    	; 0x39aa <malloc+0x124>
    3936:	20 91 ff 11 	lds	r18, 0x11FF	; 0x8011ff <__brkval>
    393a:	30 91 00 12 	lds	r19, 0x1200	; 0x801200 <__brkval+0x1>
    393e:	23 2b       	or	r18, r19
    3940:	41 f4       	brne	.+16     	; 0x3952 <malloc+0xcc>
    3942:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    3946:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    394a:	30 93 00 12 	sts	0x1200, r19	; 0x801200 <__brkval+0x1>
    394e:	20 93 ff 11 	sts	0x11FF, r18	; 0x8011ff <__brkval>
    3952:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    3956:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    395a:	21 15       	cp	r18, r1
    395c:	31 05       	cpc	r19, r1
    395e:	41 f4       	brne	.+16     	; 0x3970 <malloc+0xea>
    3960:	2d b7       	in	r18, 0x3d	; 61
    3962:	3e b7       	in	r19, 0x3e	; 62
    3964:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    3968:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    396c:	24 1b       	sub	r18, r20
    396e:	35 0b       	sbc	r19, r21
    3970:	e0 91 ff 11 	lds	r30, 0x11FF	; 0x8011ff <__brkval>
    3974:	f0 91 00 12 	lds	r31, 0x1200	; 0x801200 <__brkval+0x1>
    3978:	e2 17       	cp	r30, r18
    397a:	f3 07       	cpc	r31, r19
    397c:	a0 f4       	brcc	.+40     	; 0x39a6 <malloc+0x120>
    397e:	2e 1b       	sub	r18, r30
    3980:	3f 0b       	sbc	r19, r31
    3982:	28 17       	cp	r18, r24
    3984:	39 07       	cpc	r19, r25
    3986:	78 f0       	brcs	.+30     	; 0x39a6 <malloc+0x120>
    3988:	ac 01       	movw	r20, r24
    398a:	4e 5f       	subi	r20, 0xFE	; 254
    398c:	5f 4f       	sbci	r21, 0xFF	; 255
    398e:	24 17       	cp	r18, r20
    3990:	35 07       	cpc	r19, r21
    3992:	48 f0       	brcs	.+18     	; 0x39a6 <malloc+0x120>
    3994:	4e 0f       	add	r20, r30
    3996:	5f 1f       	adc	r21, r31
    3998:	50 93 00 12 	sts	0x1200, r21	; 0x801200 <__brkval+0x1>
    399c:	40 93 ff 11 	sts	0x11FF, r20	; 0x8011ff <__brkval>
    39a0:	81 93       	st	Z+, r24
    39a2:	91 93       	st	Z+, r25
    39a4:	02 c0       	rjmp	.+4      	; 0x39aa <malloc+0x124>
    39a6:	e0 e0       	ldi	r30, 0x00	; 0
    39a8:	f0 e0       	ldi	r31, 0x00	; 0
    39aa:	cf 01       	movw	r24, r30
    39ac:	df 91       	pop	r29
    39ae:	cf 91       	pop	r28
    39b0:	1f 91       	pop	r17
    39b2:	0f 91       	pop	r16
    39b4:	08 95       	ret

000039b6 <free>:
    39b6:	cf 93       	push	r28
    39b8:	df 93       	push	r29
    39ba:	00 97       	sbiw	r24, 0x00	; 0
    39bc:	09 f4       	brne	.+2      	; 0x39c0 <free+0xa>
    39be:	81 c0       	rjmp	.+258    	; 0x3ac2 <free+0x10c>
    39c0:	fc 01       	movw	r30, r24
    39c2:	32 97       	sbiw	r30, 0x02	; 2
    39c4:	13 82       	std	Z+3, r1	; 0x03
    39c6:	12 82       	std	Z+2, r1	; 0x02
    39c8:	a0 91 01 12 	lds	r26, 0x1201	; 0x801201 <__flp>
    39cc:	b0 91 02 12 	lds	r27, 0x1202	; 0x801202 <__flp+0x1>
    39d0:	10 97       	sbiw	r26, 0x00	; 0
    39d2:	81 f4       	brne	.+32     	; 0x39f4 <free+0x3e>
    39d4:	20 81       	ld	r18, Z
    39d6:	31 81       	ldd	r19, Z+1	; 0x01
    39d8:	82 0f       	add	r24, r18
    39da:	93 1f       	adc	r25, r19
    39dc:	20 91 ff 11 	lds	r18, 0x11FF	; 0x8011ff <__brkval>
    39e0:	30 91 00 12 	lds	r19, 0x1200	; 0x801200 <__brkval+0x1>
    39e4:	28 17       	cp	r18, r24
    39e6:	39 07       	cpc	r19, r25
    39e8:	51 f5       	brne	.+84     	; 0x3a3e <free+0x88>
    39ea:	f0 93 00 12 	sts	0x1200, r31	; 0x801200 <__brkval+0x1>
    39ee:	e0 93 ff 11 	sts	0x11FF, r30	; 0x8011ff <__brkval>
    39f2:	67 c0       	rjmp	.+206    	; 0x3ac2 <free+0x10c>
    39f4:	ed 01       	movw	r28, r26
    39f6:	20 e0       	ldi	r18, 0x00	; 0
    39f8:	30 e0       	ldi	r19, 0x00	; 0
    39fa:	ce 17       	cp	r28, r30
    39fc:	df 07       	cpc	r29, r31
    39fe:	40 f4       	brcc	.+16     	; 0x3a10 <free+0x5a>
    3a00:	4a 81       	ldd	r20, Y+2	; 0x02
    3a02:	5b 81       	ldd	r21, Y+3	; 0x03
    3a04:	9e 01       	movw	r18, r28
    3a06:	41 15       	cp	r20, r1
    3a08:	51 05       	cpc	r21, r1
    3a0a:	f1 f0       	breq	.+60     	; 0x3a48 <free+0x92>
    3a0c:	ea 01       	movw	r28, r20
    3a0e:	f5 cf       	rjmp	.-22     	; 0x39fa <free+0x44>
    3a10:	d3 83       	std	Z+3, r29	; 0x03
    3a12:	c2 83       	std	Z+2, r28	; 0x02
    3a14:	40 81       	ld	r20, Z
    3a16:	51 81       	ldd	r21, Z+1	; 0x01
    3a18:	84 0f       	add	r24, r20
    3a1a:	95 1f       	adc	r25, r21
    3a1c:	c8 17       	cp	r28, r24
    3a1e:	d9 07       	cpc	r29, r25
    3a20:	59 f4       	brne	.+22     	; 0x3a38 <free+0x82>
    3a22:	88 81       	ld	r24, Y
    3a24:	99 81       	ldd	r25, Y+1	; 0x01
    3a26:	84 0f       	add	r24, r20
    3a28:	95 1f       	adc	r25, r21
    3a2a:	02 96       	adiw	r24, 0x02	; 2
    3a2c:	91 83       	std	Z+1, r25	; 0x01
    3a2e:	80 83       	st	Z, r24
    3a30:	8a 81       	ldd	r24, Y+2	; 0x02
    3a32:	9b 81       	ldd	r25, Y+3	; 0x03
    3a34:	93 83       	std	Z+3, r25	; 0x03
    3a36:	82 83       	std	Z+2, r24	; 0x02
    3a38:	21 15       	cp	r18, r1
    3a3a:	31 05       	cpc	r19, r1
    3a3c:	29 f4       	brne	.+10     	; 0x3a48 <free+0x92>
    3a3e:	f0 93 02 12 	sts	0x1202, r31	; 0x801202 <__flp+0x1>
    3a42:	e0 93 01 12 	sts	0x1201, r30	; 0x801201 <__flp>
    3a46:	3d c0       	rjmp	.+122    	; 0x3ac2 <free+0x10c>
    3a48:	e9 01       	movw	r28, r18
    3a4a:	fb 83       	std	Y+3, r31	; 0x03
    3a4c:	ea 83       	std	Y+2, r30	; 0x02
    3a4e:	49 91       	ld	r20, Y+
    3a50:	59 91       	ld	r21, Y+
    3a52:	c4 0f       	add	r28, r20
    3a54:	d5 1f       	adc	r29, r21
    3a56:	ec 17       	cp	r30, r28
    3a58:	fd 07       	cpc	r31, r29
    3a5a:	61 f4       	brne	.+24     	; 0x3a74 <free+0xbe>
    3a5c:	80 81       	ld	r24, Z
    3a5e:	91 81       	ldd	r25, Z+1	; 0x01
    3a60:	84 0f       	add	r24, r20
    3a62:	95 1f       	adc	r25, r21
    3a64:	02 96       	adiw	r24, 0x02	; 2
    3a66:	e9 01       	movw	r28, r18
    3a68:	99 83       	std	Y+1, r25	; 0x01
    3a6a:	88 83       	st	Y, r24
    3a6c:	82 81       	ldd	r24, Z+2	; 0x02
    3a6e:	93 81       	ldd	r25, Z+3	; 0x03
    3a70:	9b 83       	std	Y+3, r25	; 0x03
    3a72:	8a 83       	std	Y+2, r24	; 0x02
    3a74:	e0 e0       	ldi	r30, 0x00	; 0
    3a76:	f0 e0       	ldi	r31, 0x00	; 0
    3a78:	12 96       	adiw	r26, 0x02	; 2
    3a7a:	8d 91       	ld	r24, X+
    3a7c:	9c 91       	ld	r25, X
    3a7e:	13 97       	sbiw	r26, 0x03	; 3
    3a80:	00 97       	sbiw	r24, 0x00	; 0
    3a82:	19 f0       	breq	.+6      	; 0x3a8a <free+0xd4>
    3a84:	fd 01       	movw	r30, r26
    3a86:	dc 01       	movw	r26, r24
    3a88:	f7 cf       	rjmp	.-18     	; 0x3a78 <free+0xc2>
    3a8a:	8d 91       	ld	r24, X+
    3a8c:	9c 91       	ld	r25, X
    3a8e:	11 97       	sbiw	r26, 0x01	; 1
    3a90:	9d 01       	movw	r18, r26
    3a92:	2e 5f       	subi	r18, 0xFE	; 254
    3a94:	3f 4f       	sbci	r19, 0xFF	; 255
    3a96:	82 0f       	add	r24, r18
    3a98:	93 1f       	adc	r25, r19
    3a9a:	20 91 ff 11 	lds	r18, 0x11FF	; 0x8011ff <__brkval>
    3a9e:	30 91 00 12 	lds	r19, 0x1200	; 0x801200 <__brkval+0x1>
    3aa2:	28 17       	cp	r18, r24
    3aa4:	39 07       	cpc	r19, r25
    3aa6:	69 f4       	brne	.+26     	; 0x3ac2 <free+0x10c>
    3aa8:	30 97       	sbiw	r30, 0x00	; 0
    3aaa:	29 f4       	brne	.+10     	; 0x3ab6 <free+0x100>
    3aac:	10 92 02 12 	sts	0x1202, r1	; 0x801202 <__flp+0x1>
    3ab0:	10 92 01 12 	sts	0x1201, r1	; 0x801201 <__flp>
    3ab4:	02 c0       	rjmp	.+4      	; 0x3aba <free+0x104>
    3ab6:	13 82       	std	Z+3, r1	; 0x03
    3ab8:	12 82       	std	Z+2, r1	; 0x02
    3aba:	b0 93 00 12 	sts	0x1200, r27	; 0x801200 <__brkval+0x1>
    3abe:	a0 93 ff 11 	sts	0x11FF, r26	; 0x8011ff <__brkval>
    3ac2:	df 91       	pop	r29
    3ac4:	cf 91       	pop	r28
    3ac6:	08 95       	ret

00003ac8 <do_rand>:
    3ac8:	8f 92       	push	r8
    3aca:	9f 92       	push	r9
    3acc:	af 92       	push	r10
    3ace:	bf 92       	push	r11
    3ad0:	cf 92       	push	r12
    3ad2:	df 92       	push	r13
    3ad4:	ef 92       	push	r14
    3ad6:	ff 92       	push	r15
    3ad8:	cf 93       	push	r28
    3ada:	df 93       	push	r29
    3adc:	ec 01       	movw	r28, r24
    3ade:	68 81       	ld	r22, Y
    3ae0:	79 81       	ldd	r23, Y+1	; 0x01
    3ae2:	8a 81       	ldd	r24, Y+2	; 0x02
    3ae4:	9b 81       	ldd	r25, Y+3	; 0x03
    3ae6:	61 15       	cp	r22, r1
    3ae8:	71 05       	cpc	r23, r1
    3aea:	81 05       	cpc	r24, r1
    3aec:	91 05       	cpc	r25, r1
    3aee:	21 f4       	brne	.+8      	; 0x3af8 <do_rand+0x30>
    3af0:	64 e2       	ldi	r22, 0x24	; 36
    3af2:	79 ed       	ldi	r23, 0xD9	; 217
    3af4:	8b e5       	ldi	r24, 0x5B	; 91
    3af6:	97 e0       	ldi	r25, 0x07	; 7
    3af8:	2d e1       	ldi	r18, 0x1D	; 29
    3afa:	33 ef       	ldi	r19, 0xF3	; 243
    3afc:	41 e0       	ldi	r20, 0x01	; 1
    3afe:	50 e0       	ldi	r21, 0x00	; 0
    3b00:	3c d3       	rcall	.+1656   	; 0x417a <__divmodsi4>
    3b02:	49 01       	movw	r8, r18
    3b04:	5a 01       	movw	r10, r20
    3b06:	9b 01       	movw	r18, r22
    3b08:	ac 01       	movw	r20, r24
    3b0a:	a7 ea       	ldi	r26, 0xA7	; 167
    3b0c:	b1 e4       	ldi	r27, 0x41	; 65
    3b0e:	51 d3       	rcall	.+1698   	; 0x41b2 <__muluhisi3>
    3b10:	6b 01       	movw	r12, r22
    3b12:	7c 01       	movw	r14, r24
    3b14:	ac ee       	ldi	r26, 0xEC	; 236
    3b16:	b4 ef       	ldi	r27, 0xF4	; 244
    3b18:	a5 01       	movw	r20, r10
    3b1a:	94 01       	movw	r18, r8
    3b1c:	56 d3       	rcall	.+1708   	; 0x41ca <__mulohisi3>
    3b1e:	dc 01       	movw	r26, r24
    3b20:	cb 01       	movw	r24, r22
    3b22:	8c 0d       	add	r24, r12
    3b24:	9d 1d       	adc	r25, r13
    3b26:	ae 1d       	adc	r26, r14
    3b28:	bf 1d       	adc	r27, r15
    3b2a:	b7 ff       	sbrs	r27, 7
    3b2c:	03 c0       	rjmp	.+6      	; 0x3b34 <do_rand+0x6c>
    3b2e:	01 97       	sbiw	r24, 0x01	; 1
    3b30:	a1 09       	sbc	r26, r1
    3b32:	b0 48       	sbci	r27, 0x80	; 128
    3b34:	88 83       	st	Y, r24
    3b36:	99 83       	std	Y+1, r25	; 0x01
    3b38:	aa 83       	std	Y+2, r26	; 0x02
    3b3a:	bb 83       	std	Y+3, r27	; 0x03
    3b3c:	9f 77       	andi	r25, 0x7F	; 127
    3b3e:	df 91       	pop	r29
    3b40:	cf 91       	pop	r28
    3b42:	ff 90       	pop	r15
    3b44:	ef 90       	pop	r14
    3b46:	df 90       	pop	r13
    3b48:	cf 90       	pop	r12
    3b4a:	bf 90       	pop	r11
    3b4c:	af 90       	pop	r10
    3b4e:	9f 90       	pop	r9
    3b50:	8f 90       	pop	r8
    3b52:	08 95       	ret

00003b54 <rand_r>:
    3b54:	b9 cf       	rjmp	.-142    	; 0x3ac8 <do_rand>

00003b56 <rand>:
    3b56:	86 e0       	ldi	r24, 0x06	; 6
    3b58:	92 e0       	ldi	r25, 0x02	; 2
    3b5a:	b6 cf       	rjmp	.-148    	; 0x3ac8 <do_rand>

00003b5c <srand>:
    3b5c:	a0 e0       	ldi	r26, 0x00	; 0
    3b5e:	b0 e0       	ldi	r27, 0x00	; 0
    3b60:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <next>
    3b64:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <next+0x1>
    3b68:	a0 93 08 02 	sts	0x0208, r26	; 0x800208 <next+0x2>
    3b6c:	b0 93 09 02 	sts	0x0209, r27	; 0x800209 <next+0x3>
    3b70:	08 95       	ret

00003b72 <abort>:
    3b72:	81 e0       	ldi	r24, 0x01	; 1
    3b74:	90 e0       	ldi	r25, 0x00	; 0
    3b76:	f8 94       	cli
    3b78:	2c c3       	rjmp	.+1624   	; 0x41d2 <_exit>

00003b7a <memcpy>:
    3b7a:	fb 01       	movw	r30, r22
    3b7c:	dc 01       	movw	r26, r24
    3b7e:	02 c0       	rjmp	.+4      	; 0x3b84 <memcpy+0xa>
    3b80:	01 90       	ld	r0, Z+
    3b82:	0d 92       	st	X+, r0
    3b84:	41 50       	subi	r20, 0x01	; 1
    3b86:	50 40       	sbci	r21, 0x00	; 0
    3b88:	d8 f7       	brcc	.-10     	; 0x3b80 <memcpy+0x6>
    3b8a:	08 95       	ret

00003b8c <memset>:
    3b8c:	dc 01       	movw	r26, r24
    3b8e:	01 c0       	rjmp	.+2      	; 0x3b92 <memset+0x6>
    3b90:	6d 93       	st	X+, r22
    3b92:	41 50       	subi	r20, 0x01	; 1
    3b94:	50 40       	sbci	r21, 0x00	; 0
    3b96:	e0 f7       	brcc	.-8      	; 0x3b90 <memset+0x4>
    3b98:	08 95       	ret

00003b9a <printf>:
    3b9a:	cf 93       	push	r28
    3b9c:	df 93       	push	r29
    3b9e:	cd b7       	in	r28, 0x3d	; 61
    3ba0:	de b7       	in	r29, 0x3e	; 62
    3ba2:	ae 01       	movw	r20, r28
    3ba4:	4a 5f       	subi	r20, 0xFA	; 250
    3ba6:	5f 4f       	sbci	r21, 0xFF	; 255
    3ba8:	fa 01       	movw	r30, r20
    3baa:	61 91       	ld	r22, Z+
    3bac:	71 91       	ld	r23, Z+
    3bae:	af 01       	movw	r20, r30
    3bb0:	80 91 05 12 	lds	r24, 0x1205	; 0x801205 <__iob+0x2>
    3bb4:	90 91 06 12 	lds	r25, 0x1206	; 0x801206 <__iob+0x3>
    3bb8:	33 d0       	rcall	.+102    	; 0x3c20 <vfprintf>
    3bba:	df 91       	pop	r29
    3bbc:	cf 91       	pop	r28
    3bbe:	08 95       	ret

00003bc0 <puts>:
    3bc0:	0f 93       	push	r16
    3bc2:	1f 93       	push	r17
    3bc4:	cf 93       	push	r28
    3bc6:	df 93       	push	r29
    3bc8:	e0 91 05 12 	lds	r30, 0x1205	; 0x801205 <__iob+0x2>
    3bcc:	f0 91 06 12 	lds	r31, 0x1206	; 0x801206 <__iob+0x3>
    3bd0:	23 81       	ldd	r18, Z+3	; 0x03
    3bd2:	21 ff       	sbrs	r18, 1
    3bd4:	1b c0       	rjmp	.+54     	; 0x3c0c <puts+0x4c>
    3bd6:	8c 01       	movw	r16, r24
    3bd8:	d0 e0       	ldi	r29, 0x00	; 0
    3bda:	c0 e0       	ldi	r28, 0x00	; 0
    3bdc:	f8 01       	movw	r30, r16
    3bde:	81 91       	ld	r24, Z+
    3be0:	8f 01       	movw	r16, r30
    3be2:	60 91 05 12 	lds	r22, 0x1205	; 0x801205 <__iob+0x2>
    3be6:	70 91 06 12 	lds	r23, 0x1206	; 0x801206 <__iob+0x3>
    3bea:	db 01       	movw	r26, r22
    3bec:	18 96       	adiw	r26, 0x08	; 8
    3bee:	ed 91       	ld	r30, X+
    3bf0:	fc 91       	ld	r31, X
    3bf2:	19 97       	sbiw	r26, 0x09	; 9
    3bf4:	88 23       	and	r24, r24
    3bf6:	31 f0       	breq	.+12     	; 0x3c04 <puts+0x44>
    3bf8:	19 95       	eicall
    3bfa:	89 2b       	or	r24, r25
    3bfc:	79 f3       	breq	.-34     	; 0x3bdc <puts+0x1c>
    3bfe:	df ef       	ldi	r29, 0xFF	; 255
    3c00:	cf ef       	ldi	r28, 0xFF	; 255
    3c02:	ec cf       	rjmp	.-40     	; 0x3bdc <puts+0x1c>
    3c04:	8a e0       	ldi	r24, 0x0A	; 10
    3c06:	19 95       	eicall
    3c08:	89 2b       	or	r24, r25
    3c0a:	19 f0       	breq	.+6      	; 0x3c12 <puts+0x52>
    3c0c:	8f ef       	ldi	r24, 0xFF	; 255
    3c0e:	9f ef       	ldi	r25, 0xFF	; 255
    3c10:	02 c0       	rjmp	.+4      	; 0x3c16 <puts+0x56>
    3c12:	8d 2f       	mov	r24, r29
    3c14:	9c 2f       	mov	r25, r28
    3c16:	df 91       	pop	r29
    3c18:	cf 91       	pop	r28
    3c1a:	1f 91       	pop	r17
    3c1c:	0f 91       	pop	r16
    3c1e:	08 95       	ret

00003c20 <vfprintf>:
    3c20:	2f 92       	push	r2
    3c22:	3f 92       	push	r3
    3c24:	4f 92       	push	r4
    3c26:	5f 92       	push	r5
    3c28:	6f 92       	push	r6
    3c2a:	7f 92       	push	r7
    3c2c:	8f 92       	push	r8
    3c2e:	9f 92       	push	r9
    3c30:	af 92       	push	r10
    3c32:	bf 92       	push	r11
    3c34:	cf 92       	push	r12
    3c36:	df 92       	push	r13
    3c38:	ef 92       	push	r14
    3c3a:	ff 92       	push	r15
    3c3c:	0f 93       	push	r16
    3c3e:	1f 93       	push	r17
    3c40:	cf 93       	push	r28
    3c42:	df 93       	push	r29
    3c44:	cd b7       	in	r28, 0x3d	; 61
    3c46:	de b7       	in	r29, 0x3e	; 62
    3c48:	2b 97       	sbiw	r28, 0x0b	; 11
    3c4a:	0f b6       	in	r0, 0x3f	; 63
    3c4c:	f8 94       	cli
    3c4e:	de bf       	out	0x3e, r29	; 62
    3c50:	0f be       	out	0x3f, r0	; 63
    3c52:	cd bf       	out	0x3d, r28	; 61
    3c54:	6c 01       	movw	r12, r24
    3c56:	7b 01       	movw	r14, r22
    3c58:	8a 01       	movw	r16, r20
    3c5a:	fc 01       	movw	r30, r24
    3c5c:	17 82       	std	Z+7, r1	; 0x07
    3c5e:	16 82       	std	Z+6, r1	; 0x06
    3c60:	83 81       	ldd	r24, Z+3	; 0x03
    3c62:	81 ff       	sbrs	r24, 1
    3c64:	bf c1       	rjmp	.+894    	; 0x3fe4 <vfprintf+0x3c4>
    3c66:	ce 01       	movw	r24, r28
    3c68:	01 96       	adiw	r24, 0x01	; 1
    3c6a:	3c 01       	movw	r6, r24
    3c6c:	f6 01       	movw	r30, r12
    3c6e:	93 81       	ldd	r25, Z+3	; 0x03
    3c70:	f7 01       	movw	r30, r14
    3c72:	93 fd       	sbrc	r25, 3
    3c74:	85 91       	lpm	r24, Z+
    3c76:	93 ff       	sbrs	r25, 3
    3c78:	81 91       	ld	r24, Z+
    3c7a:	7f 01       	movw	r14, r30
    3c7c:	88 23       	and	r24, r24
    3c7e:	09 f4       	brne	.+2      	; 0x3c82 <vfprintf+0x62>
    3c80:	ad c1       	rjmp	.+858    	; 0x3fdc <vfprintf+0x3bc>
    3c82:	85 32       	cpi	r24, 0x25	; 37
    3c84:	39 f4       	brne	.+14     	; 0x3c94 <vfprintf+0x74>
    3c86:	93 fd       	sbrc	r25, 3
    3c88:	85 91       	lpm	r24, Z+
    3c8a:	93 ff       	sbrs	r25, 3
    3c8c:	81 91       	ld	r24, Z+
    3c8e:	7f 01       	movw	r14, r30
    3c90:	85 32       	cpi	r24, 0x25	; 37
    3c92:	21 f4       	brne	.+8      	; 0x3c9c <vfprintf+0x7c>
    3c94:	b6 01       	movw	r22, r12
    3c96:	90 e0       	ldi	r25, 0x00	; 0
    3c98:	d6 d1       	rcall	.+940    	; 0x4046 <fputc>
    3c9a:	e8 cf       	rjmp	.-48     	; 0x3c6c <vfprintf+0x4c>
    3c9c:	91 2c       	mov	r9, r1
    3c9e:	21 2c       	mov	r2, r1
    3ca0:	31 2c       	mov	r3, r1
    3ca2:	ff e1       	ldi	r31, 0x1F	; 31
    3ca4:	f3 15       	cp	r31, r3
    3ca6:	d8 f0       	brcs	.+54     	; 0x3cde <vfprintf+0xbe>
    3ca8:	8b 32       	cpi	r24, 0x2B	; 43
    3caa:	79 f0       	breq	.+30     	; 0x3cca <vfprintf+0xaa>
    3cac:	38 f4       	brcc	.+14     	; 0x3cbc <vfprintf+0x9c>
    3cae:	80 32       	cpi	r24, 0x20	; 32
    3cb0:	79 f0       	breq	.+30     	; 0x3cd0 <vfprintf+0xb0>
    3cb2:	83 32       	cpi	r24, 0x23	; 35
    3cb4:	a1 f4       	brne	.+40     	; 0x3cde <vfprintf+0xbe>
    3cb6:	23 2d       	mov	r18, r3
    3cb8:	20 61       	ori	r18, 0x10	; 16
    3cba:	1d c0       	rjmp	.+58     	; 0x3cf6 <vfprintf+0xd6>
    3cbc:	8d 32       	cpi	r24, 0x2D	; 45
    3cbe:	61 f0       	breq	.+24     	; 0x3cd8 <vfprintf+0xb8>
    3cc0:	80 33       	cpi	r24, 0x30	; 48
    3cc2:	69 f4       	brne	.+26     	; 0x3cde <vfprintf+0xbe>
    3cc4:	23 2d       	mov	r18, r3
    3cc6:	21 60       	ori	r18, 0x01	; 1
    3cc8:	16 c0       	rjmp	.+44     	; 0x3cf6 <vfprintf+0xd6>
    3cca:	83 2d       	mov	r24, r3
    3ccc:	82 60       	ori	r24, 0x02	; 2
    3cce:	38 2e       	mov	r3, r24
    3cd0:	e3 2d       	mov	r30, r3
    3cd2:	e4 60       	ori	r30, 0x04	; 4
    3cd4:	3e 2e       	mov	r3, r30
    3cd6:	2a c0       	rjmp	.+84     	; 0x3d2c <vfprintf+0x10c>
    3cd8:	f3 2d       	mov	r31, r3
    3cda:	f8 60       	ori	r31, 0x08	; 8
    3cdc:	1d c0       	rjmp	.+58     	; 0x3d18 <vfprintf+0xf8>
    3cde:	37 fc       	sbrc	r3, 7
    3ce0:	2d c0       	rjmp	.+90     	; 0x3d3c <vfprintf+0x11c>
    3ce2:	20 ed       	ldi	r18, 0xD0	; 208
    3ce4:	28 0f       	add	r18, r24
    3ce6:	2a 30       	cpi	r18, 0x0A	; 10
    3ce8:	40 f0       	brcs	.+16     	; 0x3cfa <vfprintf+0xda>
    3cea:	8e 32       	cpi	r24, 0x2E	; 46
    3cec:	b9 f4       	brne	.+46     	; 0x3d1c <vfprintf+0xfc>
    3cee:	36 fc       	sbrc	r3, 6
    3cf0:	75 c1       	rjmp	.+746    	; 0x3fdc <vfprintf+0x3bc>
    3cf2:	23 2d       	mov	r18, r3
    3cf4:	20 64       	ori	r18, 0x40	; 64
    3cf6:	32 2e       	mov	r3, r18
    3cf8:	19 c0       	rjmp	.+50     	; 0x3d2c <vfprintf+0x10c>
    3cfa:	36 fe       	sbrs	r3, 6
    3cfc:	06 c0       	rjmp	.+12     	; 0x3d0a <vfprintf+0xea>
    3cfe:	8a e0       	ldi	r24, 0x0A	; 10
    3d00:	98 9e       	mul	r9, r24
    3d02:	20 0d       	add	r18, r0
    3d04:	11 24       	eor	r1, r1
    3d06:	92 2e       	mov	r9, r18
    3d08:	11 c0       	rjmp	.+34     	; 0x3d2c <vfprintf+0x10c>
    3d0a:	ea e0       	ldi	r30, 0x0A	; 10
    3d0c:	2e 9e       	mul	r2, r30
    3d0e:	20 0d       	add	r18, r0
    3d10:	11 24       	eor	r1, r1
    3d12:	22 2e       	mov	r2, r18
    3d14:	f3 2d       	mov	r31, r3
    3d16:	f0 62       	ori	r31, 0x20	; 32
    3d18:	3f 2e       	mov	r3, r31
    3d1a:	08 c0       	rjmp	.+16     	; 0x3d2c <vfprintf+0x10c>
    3d1c:	8c 36       	cpi	r24, 0x6C	; 108
    3d1e:	21 f4       	brne	.+8      	; 0x3d28 <vfprintf+0x108>
    3d20:	83 2d       	mov	r24, r3
    3d22:	80 68       	ori	r24, 0x80	; 128
    3d24:	38 2e       	mov	r3, r24
    3d26:	02 c0       	rjmp	.+4      	; 0x3d2c <vfprintf+0x10c>
    3d28:	88 36       	cpi	r24, 0x68	; 104
    3d2a:	41 f4       	brne	.+16     	; 0x3d3c <vfprintf+0x11c>
    3d2c:	f7 01       	movw	r30, r14
    3d2e:	93 fd       	sbrc	r25, 3
    3d30:	85 91       	lpm	r24, Z+
    3d32:	93 ff       	sbrs	r25, 3
    3d34:	81 91       	ld	r24, Z+
    3d36:	7f 01       	movw	r14, r30
    3d38:	81 11       	cpse	r24, r1
    3d3a:	b3 cf       	rjmp	.-154    	; 0x3ca2 <vfprintf+0x82>
    3d3c:	98 2f       	mov	r25, r24
    3d3e:	9f 7d       	andi	r25, 0xDF	; 223
    3d40:	95 54       	subi	r25, 0x45	; 69
    3d42:	93 30       	cpi	r25, 0x03	; 3
    3d44:	28 f4       	brcc	.+10     	; 0x3d50 <vfprintf+0x130>
    3d46:	0c 5f       	subi	r16, 0xFC	; 252
    3d48:	1f 4f       	sbci	r17, 0xFF	; 255
    3d4a:	9f e3       	ldi	r25, 0x3F	; 63
    3d4c:	99 83       	std	Y+1, r25	; 0x01
    3d4e:	0d c0       	rjmp	.+26     	; 0x3d6a <vfprintf+0x14a>
    3d50:	83 36       	cpi	r24, 0x63	; 99
    3d52:	31 f0       	breq	.+12     	; 0x3d60 <vfprintf+0x140>
    3d54:	83 37       	cpi	r24, 0x73	; 115
    3d56:	71 f0       	breq	.+28     	; 0x3d74 <vfprintf+0x154>
    3d58:	83 35       	cpi	r24, 0x53	; 83
    3d5a:	09 f0       	breq	.+2      	; 0x3d5e <vfprintf+0x13e>
    3d5c:	55 c0       	rjmp	.+170    	; 0x3e08 <vfprintf+0x1e8>
    3d5e:	20 c0       	rjmp	.+64     	; 0x3da0 <vfprintf+0x180>
    3d60:	f8 01       	movw	r30, r16
    3d62:	80 81       	ld	r24, Z
    3d64:	89 83       	std	Y+1, r24	; 0x01
    3d66:	0e 5f       	subi	r16, 0xFE	; 254
    3d68:	1f 4f       	sbci	r17, 0xFF	; 255
    3d6a:	88 24       	eor	r8, r8
    3d6c:	83 94       	inc	r8
    3d6e:	91 2c       	mov	r9, r1
    3d70:	53 01       	movw	r10, r6
    3d72:	12 c0       	rjmp	.+36     	; 0x3d98 <vfprintf+0x178>
    3d74:	28 01       	movw	r4, r16
    3d76:	f2 e0       	ldi	r31, 0x02	; 2
    3d78:	4f 0e       	add	r4, r31
    3d7a:	51 1c       	adc	r5, r1
    3d7c:	f8 01       	movw	r30, r16
    3d7e:	a0 80       	ld	r10, Z
    3d80:	b1 80       	ldd	r11, Z+1	; 0x01
    3d82:	36 fe       	sbrs	r3, 6
    3d84:	03 c0       	rjmp	.+6      	; 0x3d8c <vfprintf+0x16c>
    3d86:	69 2d       	mov	r22, r9
    3d88:	70 e0       	ldi	r23, 0x00	; 0
    3d8a:	02 c0       	rjmp	.+4      	; 0x3d90 <vfprintf+0x170>
    3d8c:	6f ef       	ldi	r22, 0xFF	; 255
    3d8e:	7f ef       	ldi	r23, 0xFF	; 255
    3d90:	c5 01       	movw	r24, r10
    3d92:	4e d1       	rcall	.+668    	; 0x4030 <strnlen>
    3d94:	4c 01       	movw	r8, r24
    3d96:	82 01       	movw	r16, r4
    3d98:	f3 2d       	mov	r31, r3
    3d9a:	ff 77       	andi	r31, 0x7F	; 127
    3d9c:	3f 2e       	mov	r3, r31
    3d9e:	15 c0       	rjmp	.+42     	; 0x3dca <vfprintf+0x1aa>
    3da0:	28 01       	movw	r4, r16
    3da2:	22 e0       	ldi	r18, 0x02	; 2
    3da4:	42 0e       	add	r4, r18
    3da6:	51 1c       	adc	r5, r1
    3da8:	f8 01       	movw	r30, r16
    3daa:	a0 80       	ld	r10, Z
    3dac:	b1 80       	ldd	r11, Z+1	; 0x01
    3dae:	36 fe       	sbrs	r3, 6
    3db0:	03 c0       	rjmp	.+6      	; 0x3db8 <vfprintf+0x198>
    3db2:	69 2d       	mov	r22, r9
    3db4:	70 e0       	ldi	r23, 0x00	; 0
    3db6:	02 c0       	rjmp	.+4      	; 0x3dbc <vfprintf+0x19c>
    3db8:	6f ef       	ldi	r22, 0xFF	; 255
    3dba:	7f ef       	ldi	r23, 0xFF	; 255
    3dbc:	c5 01       	movw	r24, r10
    3dbe:	2d d1       	rcall	.+602    	; 0x401a <strnlen_P>
    3dc0:	4c 01       	movw	r8, r24
    3dc2:	f3 2d       	mov	r31, r3
    3dc4:	f0 68       	ori	r31, 0x80	; 128
    3dc6:	3f 2e       	mov	r3, r31
    3dc8:	82 01       	movw	r16, r4
    3dca:	33 fc       	sbrc	r3, 3
    3dcc:	19 c0       	rjmp	.+50     	; 0x3e00 <vfprintf+0x1e0>
    3dce:	82 2d       	mov	r24, r2
    3dd0:	90 e0       	ldi	r25, 0x00	; 0
    3dd2:	88 16       	cp	r8, r24
    3dd4:	99 06       	cpc	r9, r25
    3dd6:	a0 f4       	brcc	.+40     	; 0x3e00 <vfprintf+0x1e0>
    3dd8:	b6 01       	movw	r22, r12
    3dda:	80 e2       	ldi	r24, 0x20	; 32
    3ddc:	90 e0       	ldi	r25, 0x00	; 0
    3dde:	33 d1       	rcall	.+614    	; 0x4046 <fputc>
    3de0:	2a 94       	dec	r2
    3de2:	f5 cf       	rjmp	.-22     	; 0x3dce <vfprintf+0x1ae>
    3de4:	f5 01       	movw	r30, r10
    3de6:	37 fc       	sbrc	r3, 7
    3de8:	85 91       	lpm	r24, Z+
    3dea:	37 fe       	sbrs	r3, 7
    3dec:	81 91       	ld	r24, Z+
    3dee:	5f 01       	movw	r10, r30
    3df0:	b6 01       	movw	r22, r12
    3df2:	90 e0       	ldi	r25, 0x00	; 0
    3df4:	28 d1       	rcall	.+592    	; 0x4046 <fputc>
    3df6:	21 10       	cpse	r2, r1
    3df8:	2a 94       	dec	r2
    3dfa:	21 e0       	ldi	r18, 0x01	; 1
    3dfc:	82 1a       	sub	r8, r18
    3dfe:	91 08       	sbc	r9, r1
    3e00:	81 14       	cp	r8, r1
    3e02:	91 04       	cpc	r9, r1
    3e04:	79 f7       	brne	.-34     	; 0x3de4 <vfprintf+0x1c4>
    3e06:	e1 c0       	rjmp	.+450    	; 0x3fca <vfprintf+0x3aa>
    3e08:	84 36       	cpi	r24, 0x64	; 100
    3e0a:	11 f0       	breq	.+4      	; 0x3e10 <vfprintf+0x1f0>
    3e0c:	89 36       	cpi	r24, 0x69	; 105
    3e0e:	39 f5       	brne	.+78     	; 0x3e5e <vfprintf+0x23e>
    3e10:	f8 01       	movw	r30, r16
    3e12:	37 fe       	sbrs	r3, 7
    3e14:	07 c0       	rjmp	.+14     	; 0x3e24 <vfprintf+0x204>
    3e16:	60 81       	ld	r22, Z
    3e18:	71 81       	ldd	r23, Z+1	; 0x01
    3e1a:	82 81       	ldd	r24, Z+2	; 0x02
    3e1c:	93 81       	ldd	r25, Z+3	; 0x03
    3e1e:	0c 5f       	subi	r16, 0xFC	; 252
    3e20:	1f 4f       	sbci	r17, 0xFF	; 255
    3e22:	08 c0       	rjmp	.+16     	; 0x3e34 <vfprintf+0x214>
    3e24:	60 81       	ld	r22, Z
    3e26:	71 81       	ldd	r23, Z+1	; 0x01
    3e28:	07 2e       	mov	r0, r23
    3e2a:	00 0c       	add	r0, r0
    3e2c:	88 0b       	sbc	r24, r24
    3e2e:	99 0b       	sbc	r25, r25
    3e30:	0e 5f       	subi	r16, 0xFE	; 254
    3e32:	1f 4f       	sbci	r17, 0xFF	; 255
    3e34:	f3 2d       	mov	r31, r3
    3e36:	ff 76       	andi	r31, 0x6F	; 111
    3e38:	3f 2e       	mov	r3, r31
    3e3a:	97 ff       	sbrs	r25, 7
    3e3c:	09 c0       	rjmp	.+18     	; 0x3e50 <vfprintf+0x230>
    3e3e:	90 95       	com	r25
    3e40:	80 95       	com	r24
    3e42:	70 95       	com	r23
    3e44:	61 95       	neg	r22
    3e46:	7f 4f       	sbci	r23, 0xFF	; 255
    3e48:	8f 4f       	sbci	r24, 0xFF	; 255
    3e4a:	9f 4f       	sbci	r25, 0xFF	; 255
    3e4c:	f0 68       	ori	r31, 0x80	; 128
    3e4e:	3f 2e       	mov	r3, r31
    3e50:	2a e0       	ldi	r18, 0x0A	; 10
    3e52:	30 e0       	ldi	r19, 0x00	; 0
    3e54:	a3 01       	movw	r20, r6
    3e56:	33 d1       	rcall	.+614    	; 0x40be <__ultoa_invert>
    3e58:	88 2e       	mov	r8, r24
    3e5a:	86 18       	sub	r8, r6
    3e5c:	44 c0       	rjmp	.+136    	; 0x3ee6 <vfprintf+0x2c6>
    3e5e:	85 37       	cpi	r24, 0x75	; 117
    3e60:	31 f4       	brne	.+12     	; 0x3e6e <vfprintf+0x24e>
    3e62:	23 2d       	mov	r18, r3
    3e64:	2f 7e       	andi	r18, 0xEF	; 239
    3e66:	b2 2e       	mov	r11, r18
    3e68:	2a e0       	ldi	r18, 0x0A	; 10
    3e6a:	30 e0       	ldi	r19, 0x00	; 0
    3e6c:	25 c0       	rjmp	.+74     	; 0x3eb8 <vfprintf+0x298>
    3e6e:	93 2d       	mov	r25, r3
    3e70:	99 7f       	andi	r25, 0xF9	; 249
    3e72:	b9 2e       	mov	r11, r25
    3e74:	8f 36       	cpi	r24, 0x6F	; 111
    3e76:	c1 f0       	breq	.+48     	; 0x3ea8 <vfprintf+0x288>
    3e78:	18 f4       	brcc	.+6      	; 0x3e80 <vfprintf+0x260>
    3e7a:	88 35       	cpi	r24, 0x58	; 88
    3e7c:	79 f0       	breq	.+30     	; 0x3e9c <vfprintf+0x27c>
    3e7e:	ae c0       	rjmp	.+348    	; 0x3fdc <vfprintf+0x3bc>
    3e80:	80 37       	cpi	r24, 0x70	; 112
    3e82:	19 f0       	breq	.+6      	; 0x3e8a <vfprintf+0x26a>
    3e84:	88 37       	cpi	r24, 0x78	; 120
    3e86:	21 f0       	breq	.+8      	; 0x3e90 <vfprintf+0x270>
    3e88:	a9 c0       	rjmp	.+338    	; 0x3fdc <vfprintf+0x3bc>
    3e8a:	e9 2f       	mov	r30, r25
    3e8c:	e0 61       	ori	r30, 0x10	; 16
    3e8e:	be 2e       	mov	r11, r30
    3e90:	b4 fe       	sbrs	r11, 4
    3e92:	0d c0       	rjmp	.+26     	; 0x3eae <vfprintf+0x28e>
    3e94:	fb 2d       	mov	r31, r11
    3e96:	f4 60       	ori	r31, 0x04	; 4
    3e98:	bf 2e       	mov	r11, r31
    3e9a:	09 c0       	rjmp	.+18     	; 0x3eae <vfprintf+0x28e>
    3e9c:	34 fe       	sbrs	r3, 4
    3e9e:	0a c0       	rjmp	.+20     	; 0x3eb4 <vfprintf+0x294>
    3ea0:	29 2f       	mov	r18, r25
    3ea2:	26 60       	ori	r18, 0x06	; 6
    3ea4:	b2 2e       	mov	r11, r18
    3ea6:	06 c0       	rjmp	.+12     	; 0x3eb4 <vfprintf+0x294>
    3ea8:	28 e0       	ldi	r18, 0x08	; 8
    3eaa:	30 e0       	ldi	r19, 0x00	; 0
    3eac:	05 c0       	rjmp	.+10     	; 0x3eb8 <vfprintf+0x298>
    3eae:	20 e1       	ldi	r18, 0x10	; 16
    3eb0:	30 e0       	ldi	r19, 0x00	; 0
    3eb2:	02 c0       	rjmp	.+4      	; 0x3eb8 <vfprintf+0x298>
    3eb4:	20 e1       	ldi	r18, 0x10	; 16
    3eb6:	32 e0       	ldi	r19, 0x02	; 2
    3eb8:	f8 01       	movw	r30, r16
    3eba:	b7 fe       	sbrs	r11, 7
    3ebc:	07 c0       	rjmp	.+14     	; 0x3ecc <vfprintf+0x2ac>
    3ebe:	60 81       	ld	r22, Z
    3ec0:	71 81       	ldd	r23, Z+1	; 0x01
    3ec2:	82 81       	ldd	r24, Z+2	; 0x02
    3ec4:	93 81       	ldd	r25, Z+3	; 0x03
    3ec6:	0c 5f       	subi	r16, 0xFC	; 252
    3ec8:	1f 4f       	sbci	r17, 0xFF	; 255
    3eca:	06 c0       	rjmp	.+12     	; 0x3ed8 <vfprintf+0x2b8>
    3ecc:	60 81       	ld	r22, Z
    3ece:	71 81       	ldd	r23, Z+1	; 0x01
    3ed0:	80 e0       	ldi	r24, 0x00	; 0
    3ed2:	90 e0       	ldi	r25, 0x00	; 0
    3ed4:	0e 5f       	subi	r16, 0xFE	; 254
    3ed6:	1f 4f       	sbci	r17, 0xFF	; 255
    3ed8:	a3 01       	movw	r20, r6
    3eda:	f1 d0       	rcall	.+482    	; 0x40be <__ultoa_invert>
    3edc:	88 2e       	mov	r8, r24
    3ede:	86 18       	sub	r8, r6
    3ee0:	fb 2d       	mov	r31, r11
    3ee2:	ff 77       	andi	r31, 0x7F	; 127
    3ee4:	3f 2e       	mov	r3, r31
    3ee6:	36 fe       	sbrs	r3, 6
    3ee8:	0d c0       	rjmp	.+26     	; 0x3f04 <vfprintf+0x2e4>
    3eea:	23 2d       	mov	r18, r3
    3eec:	2e 7f       	andi	r18, 0xFE	; 254
    3eee:	a2 2e       	mov	r10, r18
    3ef0:	89 14       	cp	r8, r9
    3ef2:	58 f4       	brcc	.+22     	; 0x3f0a <vfprintf+0x2ea>
    3ef4:	34 fe       	sbrs	r3, 4
    3ef6:	0b c0       	rjmp	.+22     	; 0x3f0e <vfprintf+0x2ee>
    3ef8:	32 fc       	sbrc	r3, 2
    3efa:	09 c0       	rjmp	.+18     	; 0x3f0e <vfprintf+0x2ee>
    3efc:	83 2d       	mov	r24, r3
    3efe:	8e 7e       	andi	r24, 0xEE	; 238
    3f00:	a8 2e       	mov	r10, r24
    3f02:	05 c0       	rjmp	.+10     	; 0x3f0e <vfprintf+0x2ee>
    3f04:	b8 2c       	mov	r11, r8
    3f06:	a3 2c       	mov	r10, r3
    3f08:	03 c0       	rjmp	.+6      	; 0x3f10 <vfprintf+0x2f0>
    3f0a:	b8 2c       	mov	r11, r8
    3f0c:	01 c0       	rjmp	.+2      	; 0x3f10 <vfprintf+0x2f0>
    3f0e:	b9 2c       	mov	r11, r9
    3f10:	a4 fe       	sbrs	r10, 4
    3f12:	0f c0       	rjmp	.+30     	; 0x3f32 <vfprintf+0x312>
    3f14:	fe 01       	movw	r30, r28
    3f16:	e8 0d       	add	r30, r8
    3f18:	f1 1d       	adc	r31, r1
    3f1a:	80 81       	ld	r24, Z
    3f1c:	80 33       	cpi	r24, 0x30	; 48
    3f1e:	21 f4       	brne	.+8      	; 0x3f28 <vfprintf+0x308>
    3f20:	9a 2d       	mov	r25, r10
    3f22:	99 7e       	andi	r25, 0xE9	; 233
    3f24:	a9 2e       	mov	r10, r25
    3f26:	09 c0       	rjmp	.+18     	; 0x3f3a <vfprintf+0x31a>
    3f28:	a2 fe       	sbrs	r10, 2
    3f2a:	06 c0       	rjmp	.+12     	; 0x3f38 <vfprintf+0x318>
    3f2c:	b3 94       	inc	r11
    3f2e:	b3 94       	inc	r11
    3f30:	04 c0       	rjmp	.+8      	; 0x3f3a <vfprintf+0x31a>
    3f32:	8a 2d       	mov	r24, r10
    3f34:	86 78       	andi	r24, 0x86	; 134
    3f36:	09 f0       	breq	.+2      	; 0x3f3a <vfprintf+0x31a>
    3f38:	b3 94       	inc	r11
    3f3a:	a3 fc       	sbrc	r10, 3
    3f3c:	10 c0       	rjmp	.+32     	; 0x3f5e <vfprintf+0x33e>
    3f3e:	a0 fe       	sbrs	r10, 0
    3f40:	06 c0       	rjmp	.+12     	; 0x3f4e <vfprintf+0x32e>
    3f42:	b2 14       	cp	r11, r2
    3f44:	80 f4       	brcc	.+32     	; 0x3f66 <vfprintf+0x346>
    3f46:	28 0c       	add	r2, r8
    3f48:	92 2c       	mov	r9, r2
    3f4a:	9b 18       	sub	r9, r11
    3f4c:	0d c0       	rjmp	.+26     	; 0x3f68 <vfprintf+0x348>
    3f4e:	b2 14       	cp	r11, r2
    3f50:	58 f4       	brcc	.+22     	; 0x3f68 <vfprintf+0x348>
    3f52:	b6 01       	movw	r22, r12
    3f54:	80 e2       	ldi	r24, 0x20	; 32
    3f56:	90 e0       	ldi	r25, 0x00	; 0
    3f58:	76 d0       	rcall	.+236    	; 0x4046 <fputc>
    3f5a:	b3 94       	inc	r11
    3f5c:	f8 cf       	rjmp	.-16     	; 0x3f4e <vfprintf+0x32e>
    3f5e:	b2 14       	cp	r11, r2
    3f60:	18 f4       	brcc	.+6      	; 0x3f68 <vfprintf+0x348>
    3f62:	2b 18       	sub	r2, r11
    3f64:	02 c0       	rjmp	.+4      	; 0x3f6a <vfprintf+0x34a>
    3f66:	98 2c       	mov	r9, r8
    3f68:	21 2c       	mov	r2, r1
    3f6a:	a4 fe       	sbrs	r10, 4
    3f6c:	0f c0       	rjmp	.+30     	; 0x3f8c <vfprintf+0x36c>
    3f6e:	b6 01       	movw	r22, r12
    3f70:	80 e3       	ldi	r24, 0x30	; 48
    3f72:	90 e0       	ldi	r25, 0x00	; 0
    3f74:	68 d0       	rcall	.+208    	; 0x4046 <fputc>
    3f76:	a2 fe       	sbrs	r10, 2
    3f78:	16 c0       	rjmp	.+44     	; 0x3fa6 <vfprintf+0x386>
    3f7a:	a1 fc       	sbrc	r10, 1
    3f7c:	03 c0       	rjmp	.+6      	; 0x3f84 <vfprintf+0x364>
    3f7e:	88 e7       	ldi	r24, 0x78	; 120
    3f80:	90 e0       	ldi	r25, 0x00	; 0
    3f82:	02 c0       	rjmp	.+4      	; 0x3f88 <vfprintf+0x368>
    3f84:	88 e5       	ldi	r24, 0x58	; 88
    3f86:	90 e0       	ldi	r25, 0x00	; 0
    3f88:	b6 01       	movw	r22, r12
    3f8a:	0c c0       	rjmp	.+24     	; 0x3fa4 <vfprintf+0x384>
    3f8c:	8a 2d       	mov	r24, r10
    3f8e:	86 78       	andi	r24, 0x86	; 134
    3f90:	51 f0       	breq	.+20     	; 0x3fa6 <vfprintf+0x386>
    3f92:	a1 fe       	sbrs	r10, 1
    3f94:	02 c0       	rjmp	.+4      	; 0x3f9a <vfprintf+0x37a>
    3f96:	8b e2       	ldi	r24, 0x2B	; 43
    3f98:	01 c0       	rjmp	.+2      	; 0x3f9c <vfprintf+0x37c>
    3f9a:	80 e2       	ldi	r24, 0x20	; 32
    3f9c:	a7 fc       	sbrc	r10, 7
    3f9e:	8d e2       	ldi	r24, 0x2D	; 45
    3fa0:	b6 01       	movw	r22, r12
    3fa2:	90 e0       	ldi	r25, 0x00	; 0
    3fa4:	50 d0       	rcall	.+160    	; 0x4046 <fputc>
    3fa6:	89 14       	cp	r8, r9
    3fa8:	30 f4       	brcc	.+12     	; 0x3fb6 <vfprintf+0x396>
    3faa:	b6 01       	movw	r22, r12
    3fac:	80 e3       	ldi	r24, 0x30	; 48
    3fae:	90 e0       	ldi	r25, 0x00	; 0
    3fb0:	4a d0       	rcall	.+148    	; 0x4046 <fputc>
    3fb2:	9a 94       	dec	r9
    3fb4:	f8 cf       	rjmp	.-16     	; 0x3fa6 <vfprintf+0x386>
    3fb6:	8a 94       	dec	r8
    3fb8:	f3 01       	movw	r30, r6
    3fba:	e8 0d       	add	r30, r8
    3fbc:	f1 1d       	adc	r31, r1
    3fbe:	80 81       	ld	r24, Z
    3fc0:	b6 01       	movw	r22, r12
    3fc2:	90 e0       	ldi	r25, 0x00	; 0
    3fc4:	40 d0       	rcall	.+128    	; 0x4046 <fputc>
    3fc6:	81 10       	cpse	r8, r1
    3fc8:	f6 cf       	rjmp	.-20     	; 0x3fb6 <vfprintf+0x396>
    3fca:	22 20       	and	r2, r2
    3fcc:	09 f4       	brne	.+2      	; 0x3fd0 <vfprintf+0x3b0>
    3fce:	4e ce       	rjmp	.-868    	; 0x3c6c <vfprintf+0x4c>
    3fd0:	b6 01       	movw	r22, r12
    3fd2:	80 e2       	ldi	r24, 0x20	; 32
    3fd4:	90 e0       	ldi	r25, 0x00	; 0
    3fd6:	37 d0       	rcall	.+110    	; 0x4046 <fputc>
    3fd8:	2a 94       	dec	r2
    3fda:	f7 cf       	rjmp	.-18     	; 0x3fca <vfprintf+0x3aa>
    3fdc:	f6 01       	movw	r30, r12
    3fde:	86 81       	ldd	r24, Z+6	; 0x06
    3fe0:	97 81       	ldd	r25, Z+7	; 0x07
    3fe2:	02 c0       	rjmp	.+4      	; 0x3fe8 <vfprintf+0x3c8>
    3fe4:	8f ef       	ldi	r24, 0xFF	; 255
    3fe6:	9f ef       	ldi	r25, 0xFF	; 255
    3fe8:	2b 96       	adiw	r28, 0x0b	; 11
    3fea:	0f b6       	in	r0, 0x3f	; 63
    3fec:	f8 94       	cli
    3fee:	de bf       	out	0x3e, r29	; 62
    3ff0:	0f be       	out	0x3f, r0	; 63
    3ff2:	cd bf       	out	0x3d, r28	; 61
    3ff4:	df 91       	pop	r29
    3ff6:	cf 91       	pop	r28
    3ff8:	1f 91       	pop	r17
    3ffa:	0f 91       	pop	r16
    3ffc:	ff 90       	pop	r15
    3ffe:	ef 90       	pop	r14
    4000:	df 90       	pop	r13
    4002:	cf 90       	pop	r12
    4004:	bf 90       	pop	r11
    4006:	af 90       	pop	r10
    4008:	9f 90       	pop	r9
    400a:	8f 90       	pop	r8
    400c:	7f 90       	pop	r7
    400e:	6f 90       	pop	r6
    4010:	5f 90       	pop	r5
    4012:	4f 90       	pop	r4
    4014:	3f 90       	pop	r3
    4016:	2f 90       	pop	r2
    4018:	08 95       	ret

0000401a <strnlen_P>:
    401a:	fc 01       	movw	r30, r24
    401c:	05 90       	lpm	r0, Z+
    401e:	61 50       	subi	r22, 0x01	; 1
    4020:	70 40       	sbci	r23, 0x00	; 0
    4022:	01 10       	cpse	r0, r1
    4024:	d8 f7       	brcc	.-10     	; 0x401c <strnlen_P+0x2>
    4026:	80 95       	com	r24
    4028:	90 95       	com	r25
    402a:	8e 0f       	add	r24, r30
    402c:	9f 1f       	adc	r25, r31
    402e:	08 95       	ret

00004030 <strnlen>:
    4030:	fc 01       	movw	r30, r24
    4032:	61 50       	subi	r22, 0x01	; 1
    4034:	70 40       	sbci	r23, 0x00	; 0
    4036:	01 90       	ld	r0, Z+
    4038:	01 10       	cpse	r0, r1
    403a:	d8 f7       	brcc	.-10     	; 0x4032 <strnlen+0x2>
    403c:	80 95       	com	r24
    403e:	90 95       	com	r25
    4040:	8e 0f       	add	r24, r30
    4042:	9f 1f       	adc	r25, r31
    4044:	08 95       	ret

00004046 <fputc>:
    4046:	0f 93       	push	r16
    4048:	1f 93       	push	r17
    404a:	cf 93       	push	r28
    404c:	df 93       	push	r29
    404e:	fb 01       	movw	r30, r22
    4050:	23 81       	ldd	r18, Z+3	; 0x03
    4052:	21 fd       	sbrc	r18, 1
    4054:	03 c0       	rjmp	.+6      	; 0x405c <fputc+0x16>
    4056:	8f ef       	ldi	r24, 0xFF	; 255
    4058:	9f ef       	ldi	r25, 0xFF	; 255
    405a:	2c c0       	rjmp	.+88     	; 0x40b4 <fputc+0x6e>
    405c:	22 ff       	sbrs	r18, 2
    405e:	16 c0       	rjmp	.+44     	; 0x408c <fputc+0x46>
    4060:	46 81       	ldd	r20, Z+6	; 0x06
    4062:	57 81       	ldd	r21, Z+7	; 0x07
    4064:	24 81       	ldd	r18, Z+4	; 0x04
    4066:	35 81       	ldd	r19, Z+5	; 0x05
    4068:	42 17       	cp	r20, r18
    406a:	53 07       	cpc	r21, r19
    406c:	44 f4       	brge	.+16     	; 0x407e <fputc+0x38>
    406e:	a0 81       	ld	r26, Z
    4070:	b1 81       	ldd	r27, Z+1	; 0x01
    4072:	9d 01       	movw	r18, r26
    4074:	2f 5f       	subi	r18, 0xFF	; 255
    4076:	3f 4f       	sbci	r19, 0xFF	; 255
    4078:	31 83       	std	Z+1, r19	; 0x01
    407a:	20 83       	st	Z, r18
    407c:	8c 93       	st	X, r24
    407e:	26 81       	ldd	r18, Z+6	; 0x06
    4080:	37 81       	ldd	r19, Z+7	; 0x07
    4082:	2f 5f       	subi	r18, 0xFF	; 255
    4084:	3f 4f       	sbci	r19, 0xFF	; 255
    4086:	37 83       	std	Z+7, r19	; 0x07
    4088:	26 83       	std	Z+6, r18	; 0x06
    408a:	14 c0       	rjmp	.+40     	; 0x40b4 <fputc+0x6e>
    408c:	8b 01       	movw	r16, r22
    408e:	ec 01       	movw	r28, r24
    4090:	fb 01       	movw	r30, r22
    4092:	00 84       	ldd	r0, Z+8	; 0x08
    4094:	f1 85       	ldd	r31, Z+9	; 0x09
    4096:	e0 2d       	mov	r30, r0
    4098:	19 95       	eicall
    409a:	89 2b       	or	r24, r25
    409c:	e1 f6       	brne	.-72     	; 0x4056 <fputc+0x10>
    409e:	d8 01       	movw	r26, r16
    40a0:	16 96       	adiw	r26, 0x06	; 6
    40a2:	8d 91       	ld	r24, X+
    40a4:	9c 91       	ld	r25, X
    40a6:	17 97       	sbiw	r26, 0x07	; 7
    40a8:	01 96       	adiw	r24, 0x01	; 1
    40aa:	17 96       	adiw	r26, 0x07	; 7
    40ac:	9c 93       	st	X, r25
    40ae:	8e 93       	st	-X, r24
    40b0:	16 97       	sbiw	r26, 0x06	; 6
    40b2:	ce 01       	movw	r24, r28
    40b4:	df 91       	pop	r29
    40b6:	cf 91       	pop	r28
    40b8:	1f 91       	pop	r17
    40ba:	0f 91       	pop	r16
    40bc:	08 95       	ret

000040be <__ultoa_invert>:
    40be:	fa 01       	movw	r30, r20
    40c0:	aa 27       	eor	r26, r26
    40c2:	28 30       	cpi	r18, 0x08	; 8
    40c4:	51 f1       	breq	.+84     	; 0x411a <__ultoa_invert+0x5c>
    40c6:	20 31       	cpi	r18, 0x10	; 16
    40c8:	81 f1       	breq	.+96     	; 0x412a <__ultoa_invert+0x6c>
    40ca:	e8 94       	clt
    40cc:	6f 93       	push	r22
    40ce:	6e 7f       	andi	r22, 0xFE	; 254
    40d0:	6e 5f       	subi	r22, 0xFE	; 254
    40d2:	7f 4f       	sbci	r23, 0xFF	; 255
    40d4:	8f 4f       	sbci	r24, 0xFF	; 255
    40d6:	9f 4f       	sbci	r25, 0xFF	; 255
    40d8:	af 4f       	sbci	r26, 0xFF	; 255
    40da:	b1 e0       	ldi	r27, 0x01	; 1
    40dc:	3e d0       	rcall	.+124    	; 0x415a <__ultoa_invert+0x9c>
    40de:	b4 e0       	ldi	r27, 0x04	; 4
    40e0:	3c d0       	rcall	.+120    	; 0x415a <__ultoa_invert+0x9c>
    40e2:	67 0f       	add	r22, r23
    40e4:	78 1f       	adc	r23, r24
    40e6:	89 1f       	adc	r24, r25
    40e8:	9a 1f       	adc	r25, r26
    40ea:	a1 1d       	adc	r26, r1
    40ec:	68 0f       	add	r22, r24
    40ee:	79 1f       	adc	r23, r25
    40f0:	8a 1f       	adc	r24, r26
    40f2:	91 1d       	adc	r25, r1
    40f4:	a1 1d       	adc	r26, r1
    40f6:	6a 0f       	add	r22, r26
    40f8:	71 1d       	adc	r23, r1
    40fa:	81 1d       	adc	r24, r1
    40fc:	91 1d       	adc	r25, r1
    40fe:	a1 1d       	adc	r26, r1
    4100:	20 d0       	rcall	.+64     	; 0x4142 <__ultoa_invert+0x84>
    4102:	09 f4       	brne	.+2      	; 0x4106 <__ultoa_invert+0x48>
    4104:	68 94       	set
    4106:	3f 91       	pop	r19
    4108:	2a e0       	ldi	r18, 0x0A	; 10
    410a:	26 9f       	mul	r18, r22
    410c:	11 24       	eor	r1, r1
    410e:	30 19       	sub	r19, r0
    4110:	30 5d       	subi	r19, 0xD0	; 208
    4112:	31 93       	st	Z+, r19
    4114:	de f6       	brtc	.-74     	; 0x40cc <__ultoa_invert+0xe>
    4116:	cf 01       	movw	r24, r30
    4118:	08 95       	ret
    411a:	46 2f       	mov	r20, r22
    411c:	47 70       	andi	r20, 0x07	; 7
    411e:	40 5d       	subi	r20, 0xD0	; 208
    4120:	41 93       	st	Z+, r20
    4122:	b3 e0       	ldi	r27, 0x03	; 3
    4124:	0f d0       	rcall	.+30     	; 0x4144 <__ultoa_invert+0x86>
    4126:	c9 f7       	brne	.-14     	; 0x411a <__ultoa_invert+0x5c>
    4128:	f6 cf       	rjmp	.-20     	; 0x4116 <__ultoa_invert+0x58>
    412a:	46 2f       	mov	r20, r22
    412c:	4f 70       	andi	r20, 0x0F	; 15
    412e:	40 5d       	subi	r20, 0xD0	; 208
    4130:	4a 33       	cpi	r20, 0x3A	; 58
    4132:	18 f0       	brcs	.+6      	; 0x413a <__ultoa_invert+0x7c>
    4134:	49 5d       	subi	r20, 0xD9	; 217
    4136:	31 fd       	sbrc	r19, 1
    4138:	40 52       	subi	r20, 0x20	; 32
    413a:	41 93       	st	Z+, r20
    413c:	02 d0       	rcall	.+4      	; 0x4142 <__ultoa_invert+0x84>
    413e:	a9 f7       	brne	.-22     	; 0x412a <__ultoa_invert+0x6c>
    4140:	ea cf       	rjmp	.-44     	; 0x4116 <__ultoa_invert+0x58>
    4142:	b4 e0       	ldi	r27, 0x04	; 4
    4144:	a6 95       	lsr	r26
    4146:	97 95       	ror	r25
    4148:	87 95       	ror	r24
    414a:	77 95       	ror	r23
    414c:	67 95       	ror	r22
    414e:	ba 95       	dec	r27
    4150:	c9 f7       	brne	.-14     	; 0x4144 <__ultoa_invert+0x86>
    4152:	00 97       	sbiw	r24, 0x00	; 0
    4154:	61 05       	cpc	r22, r1
    4156:	71 05       	cpc	r23, r1
    4158:	08 95       	ret
    415a:	9b 01       	movw	r18, r22
    415c:	ac 01       	movw	r20, r24
    415e:	0a 2e       	mov	r0, r26
    4160:	06 94       	lsr	r0
    4162:	57 95       	ror	r21
    4164:	47 95       	ror	r20
    4166:	37 95       	ror	r19
    4168:	27 95       	ror	r18
    416a:	ba 95       	dec	r27
    416c:	c9 f7       	brne	.-14     	; 0x4160 <__ultoa_invert+0xa2>
    416e:	62 0f       	add	r22, r18
    4170:	73 1f       	adc	r23, r19
    4172:	84 1f       	adc	r24, r20
    4174:	95 1f       	adc	r25, r21
    4176:	a0 1d       	adc	r26, r0
    4178:	08 95       	ret

0000417a <__divmodsi4>:
    417a:	05 2e       	mov	r0, r21
    417c:	97 fb       	bst	r25, 7
    417e:	16 f4       	brtc	.+4      	; 0x4184 <__divmodsi4+0xa>
    4180:	00 94       	com	r0
    4182:	0f d0       	rcall	.+30     	; 0x41a2 <__negsi2>
    4184:	57 fd       	sbrc	r21, 7
    4186:	05 d0       	rcall	.+10     	; 0x4192 <__divmodsi4_neg2>
    4188:	31 db       	rcall	.-2462   	; 0x37ec <__udivmodsi4>
    418a:	07 fc       	sbrc	r0, 7
    418c:	02 d0       	rcall	.+4      	; 0x4192 <__divmodsi4_neg2>
    418e:	46 f4       	brtc	.+16     	; 0x41a0 <__divmodsi4_exit>
    4190:	08 c0       	rjmp	.+16     	; 0x41a2 <__negsi2>

00004192 <__divmodsi4_neg2>:
    4192:	50 95       	com	r21
    4194:	40 95       	com	r20
    4196:	30 95       	com	r19
    4198:	21 95       	neg	r18
    419a:	3f 4f       	sbci	r19, 0xFF	; 255
    419c:	4f 4f       	sbci	r20, 0xFF	; 255
    419e:	5f 4f       	sbci	r21, 0xFF	; 255

000041a0 <__divmodsi4_exit>:
    41a0:	08 95       	ret

000041a2 <__negsi2>:
    41a2:	90 95       	com	r25
    41a4:	80 95       	com	r24
    41a6:	70 95       	com	r23
    41a8:	61 95       	neg	r22
    41aa:	7f 4f       	sbci	r23, 0xFF	; 255
    41ac:	8f 4f       	sbci	r24, 0xFF	; 255
    41ae:	9f 4f       	sbci	r25, 0xFF	; 255
    41b0:	08 95       	ret

000041b2 <__muluhisi3>:
    41b2:	46 db       	rcall	.-2420   	; 0x3840 <__umulhisi3>
    41b4:	a5 9f       	mul	r26, r21
    41b6:	90 0d       	add	r25, r0
    41b8:	b4 9f       	mul	r27, r20
    41ba:	90 0d       	add	r25, r0
    41bc:	a4 9f       	mul	r26, r20
    41be:	80 0d       	add	r24, r0
    41c0:	91 1d       	adc	r25, r1
    41c2:	11 24       	eor	r1, r1
    41c4:	08 95       	ret

000041c6 <__mulshisi3>:
    41c6:	b7 ff       	sbrs	r27, 7
    41c8:	f4 cf       	rjmp	.-24     	; 0x41b2 <__muluhisi3>

000041ca <__mulohisi3>:
    41ca:	f3 df       	rcall	.-26     	; 0x41b2 <__muluhisi3>
    41cc:	82 1b       	sub	r24, r18
    41ce:	93 0b       	sbc	r25, r19
    41d0:	08 95       	ret

000041d2 <_exit>:
    41d2:	f8 94       	cli

000041d4 <__stop_program>:
    41d4:	ff cf       	rjmp	.-2      	; 0x41d4 <__stop_program>
