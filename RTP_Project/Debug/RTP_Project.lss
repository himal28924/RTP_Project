
RTP_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000e0  00800200  00003e04  00003e98  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003e04  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000ecf  008002e0  008002e0  00003f78  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003f78  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003fd4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000006f0  00000000  00000000  00004014  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000867a  00000000  00000000  00004704  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000240b  00000000  00000000  0000cd7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000471c  00000000  00000000  0000f189  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001838  00000000  00000000  000138a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002a3e  00000000  00000000  000150e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000078f6  00000000  00000000  00017b1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000006a0  00000000  00000000  0001f414  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	94 c0       	rjmp	.+296    	; 0x12a <__ctors_end>
       2:	00 00       	nop
       4:	b3 c0       	rjmp	.+358    	; 0x16c <__bad_interrupt>
       6:	00 00       	nop
       8:	b1 c0       	rjmp	.+354    	; 0x16c <__bad_interrupt>
       a:	00 00       	nop
       c:	af c0       	rjmp	.+350    	; 0x16c <__bad_interrupt>
       e:	00 00       	nop
      10:	ad c0       	rjmp	.+346    	; 0x16c <__bad_interrupt>
      12:	00 00       	nop
      14:	ab c0       	rjmp	.+342    	; 0x16c <__bad_interrupt>
      16:	00 00       	nop
      18:	a9 c0       	rjmp	.+338    	; 0x16c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	a7 c0       	rjmp	.+334    	; 0x16c <__bad_interrupt>
      1e:	00 00       	nop
      20:	a5 c0       	rjmp	.+330    	; 0x16c <__bad_interrupt>
      22:	00 00       	nop
      24:	a3 c0       	rjmp	.+326    	; 0x16c <__bad_interrupt>
      26:	00 00       	nop
      28:	a1 c0       	rjmp	.+322    	; 0x16c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	9f c0       	rjmp	.+318    	; 0x16c <__bad_interrupt>
      2e:	00 00       	nop
      30:	b4 c4       	rjmp	.+2408   	; 0x99a <__vector_12>
      32:	00 00       	nop
      34:	9b c0       	rjmp	.+310    	; 0x16c <__bad_interrupt>
      36:	00 00       	nop
      38:	99 c0       	rjmp	.+306    	; 0x16c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	97 c0       	rjmp	.+302    	; 0x16c <__bad_interrupt>
      3e:	00 00       	nop
      40:	95 c0       	rjmp	.+298    	; 0x16c <__bad_interrupt>
      42:	00 00       	nop
      44:	93 c0       	rjmp	.+294    	; 0x16c <__bad_interrupt>
      46:	00 00       	nop
      48:	91 c0       	rjmp	.+290    	; 0x16c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	8f c0       	rjmp	.+286    	; 0x16c <__bad_interrupt>
      4e:	00 00       	nop
      50:	8d c0       	rjmp	.+282    	; 0x16c <__bad_interrupt>
      52:	00 00       	nop
      54:	8b c0       	rjmp	.+278    	; 0x16c <__bad_interrupt>
      56:	00 00       	nop
      58:	89 c0       	rjmp	.+274    	; 0x16c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	87 c0       	rjmp	.+270    	; 0x16c <__bad_interrupt>
      5e:	00 00       	nop
      60:	85 c0       	rjmp	.+266    	; 0x16c <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 81 16 	jmp	0x2d02	; 0x2d02 <__vector_25>
      68:	0c 94 d3 16 	jmp	0x2da6	; 0x2da6 <__vector_26>
      6c:	7f c0       	rjmp	.+254    	; 0x16c <__bad_interrupt>
      6e:	00 00       	nop
      70:	7d c0       	rjmp	.+250    	; 0x16c <__bad_interrupt>
      72:	00 00       	nop
      74:	7b c0       	rjmp	.+246    	; 0x16c <__bad_interrupt>
      76:	00 00       	nop
      78:	79 c0       	rjmp	.+242    	; 0x16c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	77 c0       	rjmp	.+238    	; 0x16c <__bad_interrupt>
      7e:	00 00       	nop
      80:	75 c0       	rjmp	.+234    	; 0x16c <__bad_interrupt>
      82:	00 00       	nop
      84:	73 c0       	rjmp	.+230    	; 0x16c <__bad_interrupt>
      86:	00 00       	nop
      88:	71 c0       	rjmp	.+226    	; 0x16c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	6f c0       	rjmp	.+222    	; 0x16c <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 17 17 	jmp	0x2e2e	; 0x2e2e <__vector_36>
      94:	0c 94 69 17 	jmp	0x2ed2	; 0x2ed2 <__vector_37>
      98:	69 c0       	rjmp	.+210    	; 0x16c <__bad_interrupt>
      9a:	00 00       	nop
      9c:	67 c0       	rjmp	.+206    	; 0x16c <__bad_interrupt>
      9e:	00 00       	nop
      a0:	65 c0       	rjmp	.+202    	; 0x16c <__bad_interrupt>
      a2:	00 00       	nop
      a4:	63 c0       	rjmp	.+198    	; 0x16c <__bad_interrupt>
      a6:	00 00       	nop
      a8:	61 c0       	rjmp	.+194    	; 0x16c <__bad_interrupt>
      aa:	00 00       	nop
      ac:	5f c0       	rjmp	.+190    	; 0x16c <__bad_interrupt>
      ae:	00 00       	nop
      b0:	5d c0       	rjmp	.+186    	; 0x16c <__bad_interrupt>
      b2:	00 00       	nop
      b4:	5b c0       	rjmp	.+182    	; 0x16c <__bad_interrupt>
      b6:	00 00       	nop
      b8:	59 c0       	rjmp	.+178    	; 0x16c <__bad_interrupt>
      ba:	00 00       	nop
      bc:	57 c0       	rjmp	.+174    	; 0x16c <__bad_interrupt>
      be:	00 00       	nop
      c0:	55 c0       	rjmp	.+170    	; 0x16c <__bad_interrupt>
      c2:	00 00       	nop
      c4:	53 c0       	rjmp	.+166    	; 0x16c <__bad_interrupt>
      c6:	00 00       	nop
      c8:	51 c0       	rjmp	.+162    	; 0x16c <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 ad 17 	jmp	0x2f5a	; 0x2f5a <__vector_51>
      d0:	0c 94 ff 17 	jmp	0x2ffe	; 0x2ffe <__vector_52>
      d4:	4b c0       	rjmp	.+150    	; 0x16c <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 43 18 	jmp	0x3086	; 0x3086 <__vector_54>
      dc:	0c 94 95 18 	jmp	0x312a	; 0x312a <__vector_55>
      e0:	45 c0       	rjmp	.+138    	; 0x16c <__bad_interrupt>
      e2:	00 00       	nop
      e4:	07 13       	cpse	r16, r23
      e6:	07 13       	cpse	r16, r23
      e8:	07 13       	cpse	r16, r23
      ea:	3e 13       	cpse	r19, r30
      ec:	46 13       	cpse	r20, r22
      ee:	5b 13       	cpse	r21, r27
      f0:	07 13       	cpse	r16, r23
      f2:	07 13       	cpse	r16, r23
      f4:	3e 13       	cpse	r19, r30
      f6:	46 13       	cpse	r20, r22

000000f8 <prvIdleTask>:
    /* Reset the event list item to its normal value - so it can be used with
     * queues and semaphores. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */

    return uxReturn;
}
      f8:	0e 94 9c 09 	call	0x1338	; 0x1338 <prvCheckTasksWaitingTermination>
      fc:	80 91 ef 10 	lds	r24, 0x10EF	; 0x8010ef <pxReadyTasksLists>
     100:	82 30       	cpi	r24, 0x02	; 2
     102:	08 f0       	brcs	.+2      	; 0x106 <prvIdleTask+0xe>
     104:	85 d3       	rcall	.+1802   	; 0x810 <vPortYield>
     106:	0e 94 84 13 	call	0x2708	; 0x2708 <vApplicationIdleHook>
     10a:	f6 cf       	rjmp	.-20     	; 0xf8 <prvIdleTask>

0000010c <prvTimerTask>:
                pxNewTimer->ucStatus = 0x00;
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
     10c:	cf 93       	push	r28
     10e:	df 93       	push	r29
     110:	1f 92       	push	r1
     112:	cd b7       	in	r28, 0x3d	; 61
     114:	de b7       	in	r29, 0x3e	; 62
     116:	ce 01       	movw	r24, r28
     118:	01 96       	adiw	r24, 0x01	; 1
     11a:	0e 94 8b 10 	call	0x2116	; 0x2116 <prvGetNextExpireTime>
     11e:	49 81       	ldd	r20, Y+1	; 0x01
     120:	0e 94 7e 12 	call	0x24fc	; 0x24fc <prvProcessTimerOrBlockTask>
     124:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <prvProcessReceivedCommands>
     128:	f6 cf       	rjmp	.-20     	; 0x116 <prvTimerTask+0xa>

0000012a <__ctors_end>:
     12a:	11 24       	eor	r1, r1
     12c:	1f be       	out	0x3f, r1	; 63
     12e:	cf ef       	ldi	r28, 0xFF	; 255
     130:	d1 e2       	ldi	r29, 0x21	; 33
     132:	de bf       	out	0x3e, r29	; 62
     134:	cd bf       	out	0x3d, r28	; 61
     136:	00 e0       	ldi	r16, 0x00	; 0
     138:	0c bf       	out	0x3c, r16	; 60

0000013a <__do_copy_data>:
     13a:	12 e0       	ldi	r17, 0x02	; 2
     13c:	a0 e0       	ldi	r26, 0x00	; 0
     13e:	b2 e0       	ldi	r27, 0x02	; 2
     140:	e4 e0       	ldi	r30, 0x04	; 4
     142:	fe e3       	ldi	r31, 0x3E	; 62
     144:	00 e0       	ldi	r16, 0x00	; 0
     146:	0b bf       	out	0x3b, r16	; 59
     148:	02 c0       	rjmp	.+4      	; 0x14e <__do_copy_data+0x14>
     14a:	07 90       	elpm	r0, Z+
     14c:	0d 92       	st	X+, r0
     14e:	a0 3e       	cpi	r26, 0xE0	; 224
     150:	b1 07       	cpc	r27, r17
     152:	d9 f7       	brne	.-10     	; 0x14a <__do_copy_data+0x10>

00000154 <__do_clear_bss>:
     154:	21 e1       	ldi	r18, 0x11	; 17
     156:	a0 ee       	ldi	r26, 0xE0	; 224
     158:	b2 e0       	ldi	r27, 0x02	; 2
     15a:	01 c0       	rjmp	.+2      	; 0x15e <.do_clear_bss_start>

0000015c <.do_clear_bss_loop>:
     15c:	1d 92       	st	X+, r1

0000015e <.do_clear_bss_start>:
     15e:	af 3a       	cpi	r26, 0xAF	; 175
     160:	b2 07       	cpc	r27, r18
     162:	e1 f7       	brne	.-8      	; 0x15c <.do_clear_bss_loop>
     164:	0e 94 bc 13 	call	0x2778	; 0x2778 <main>
     168:	0c 94 00 1f 	jmp	0x3e00	; 0x3e00 <_exit>

0000016c <__bad_interrupt>:
     16c:	49 cf       	rjmp	.-366    	; 0x0 <__vectors>

0000016e <distanceMeasurementTask>:

// Implementations of distanceMeasurementTask and obstacleDetectionTask...

void distanceMeasurementTask(void *pvParameters)
{
	printf("Distance measurnment task ");
     16e:	8d e1       	ldi	r24, 0x1D	; 29
     170:	92 e0       	ldi	r25, 0x02	; 2
     172:	9f 93       	push	r25
     174:	8f 93       	push	r24
     176:	0e 94 10 1c 	call	0x3820	; 0x3820 <printf>
	// In every task before loop:
	#if (configUSE_APPLICATION_TASK_TAG == 1)
	// Set taskTag
	vTaskSetApplicationTaskTag(NULL, (void *)4 /*task id*/);
     17a:	64 e0       	ldi	r22, 0x04	; 4
     17c:	70 e0       	ldi	r23, 0x00	; 0
     17e:	80 e0       	ldi	r24, 0x00	; 0
     180:	90 e0       	ldi	r25, 0x00	; 0
     182:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <vTaskSetApplicationTaskTag>
     186:	0f 90       	pop	r0
     188:	0f 90       	pop	r0

	const TickType_t xDelay = 500 / portTICK_PERIOD_MS; // Delay for 500 ms

	while (1)
	{
		vTaskDelay(1000 / portTICK_PERIOD_MS);
     18a:	6e e3       	ldi	r22, 0x3E	; 62
     18c:	70 e0       	ldi	r23, 0x00	; 0
     18e:	80 e0       	ldi	r24, 0x00	; 0
     190:	90 e0       	ldi	r25, 0x00	; 0
     192:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <vTaskDelay>

		uint16_t distance = hc_sr04_takeMeasurement();
     196:	a8 d0       	rcall	.+336    	; 0x2e8 <hc_sr04_takeMeasurement>
     198:	ec 01       	movw	r28, r24

		// Acquire the semaphore before updating the shared variable
		if (xSemaphoreTake(xDistanceSemaphore, portMAX_DELAY) == pdTRUE)
     19a:	4f ef       	ldi	r20, 0xFF	; 255
     19c:	5f ef       	ldi	r21, 0xFF	; 255
     19e:	ba 01       	movw	r22, r20
     1a0:	80 91 a3 11 	lds	r24, 0x11A3	; 0x8011a3 <xDistanceSemaphore>
     1a4:	90 91 a4 11 	lds	r25, 0x11A4	; 0x8011a4 <xDistanceSemaphore+0x1>
     1a8:	ba d6       	rcall	.+3444   	; 0xf1e <xQueueSemaphoreTake>
     1aa:	81 30       	cpi	r24, 0x01	; 1
     1ac:	79 f4       	brne	.+30     	; 0x1cc <distanceMeasurementTask+0x5e>
		{
			measuredDistance = distance;
     1ae:	d0 93 e1 02 	sts	0x02E1, r29	; 0x8002e1 <__data_end+0x1>
     1b2:	c0 93 e0 02 	sts	0x02E0, r28	; 0x8002e0 <__data_end>
			xSemaphoreGive(xDistanceSemaphore); // Release the semaphore
     1b6:	00 e0       	ldi	r16, 0x00	; 0
     1b8:	20 e0       	ldi	r18, 0x00	; 0
     1ba:	30 e0       	ldi	r19, 0x00	; 0
     1bc:	a9 01       	movw	r20, r18
     1be:	60 e0       	ldi	r22, 0x00	; 0
     1c0:	70 e0       	ldi	r23, 0x00	; 0
     1c2:	80 91 a3 11 	lds	r24, 0x11A3	; 0x8011a3 <xDistanceSemaphore>
     1c6:	90 91 a4 11 	lds	r25, 0x11A4	; 0x8011a4 <xDistanceSemaphore+0x1>
     1ca:	39 d5       	rcall	.+2674   	; 0xc3e <xQueueGenericSend>
		}

		vTaskDelay(xDelay); // Wait for the next cycle
     1cc:	6f e1       	ldi	r22, 0x1F	; 31
     1ce:	70 e0       	ldi	r23, 0x00	; 0
     1d0:	80 e0       	ldi	r24, 0x00	; 0
     1d2:	90 e0       	ldi	r25, 0x00	; 0
     1d4:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <vTaskDelay>
	}
     1d8:	d8 cf       	rjmp	.-80     	; 0x18a <distanceMeasurementTask+0x1c>

000001da <create_all_application_tasks>:
volatile uint16_t measuredDistance = 0;
SemaphoreHandle_t xDistanceSemaphore;


void create_all_application_tasks(void)
{
     1da:	ef 92       	push	r14
     1dc:	ff 92       	push	r15
     1de:	0f 93       	push	r16
	
	xDistanceSemaphore = xSemaphoreCreateMutex();  // Initialize semaphore
     1e0:	81 e0       	ldi	r24, 0x01	; 1
     1e2:	cc d5       	rcall	.+2968   	; 0xd7c <xQueueCreateMutex>
     1e4:	90 93 a4 11 	sts	0x11A4, r25	; 0x8011a4 <xDistanceSemaphore+0x1>
     1e8:	80 93 a3 11 	sts	0x11A3, r24	; 0x8011a3 <xDistanceSemaphore>

	// Create tasks
	xTaskCreate(
     1ec:	e1 2c       	mov	r14, r1
     1ee:	f1 2c       	mov	r15, r1
     1f0:	03 e0       	ldi	r16, 0x03	; 3
     1f2:	20 e0       	ldi	r18, 0x00	; 0
     1f4:	30 e0       	ldi	r19, 0x00	; 0
     1f6:	40 ec       	ldi	r20, 0xC0	; 192
     1f8:	50 e0       	ldi	r21, 0x00	; 0
     1fa:	68 e3       	ldi	r22, 0x38	; 56
     1fc:	72 e0       	ldi	r23, 0x02	; 2
     1fe:	87 eb       	ldi	r24, 0xB7	; 183
     200:	90 e0       	ldi	r25, 0x00	; 0
     202:	0e 94 5f 0a 	call	0x14be	; 0x14be <xTaskCreate>
	configMINIMAL_STACK_SIZE,
	NULL,
	3, // Priority
	NULL);

	xTaskCreate(
     206:	01 e0       	ldi	r16, 0x01	; 1
     208:	20 e0       	ldi	r18, 0x00	; 0
     20a:	30 e0       	ldi	r19, 0x00	; 0
     20c:	40 ec       	ldi	r20, 0xC0	; 192
     20e:	50 e0       	ldi	r21, 0x00	; 0
     210:	65 e4       	ldi	r22, 0x45	; 69
     212:	72 e0       	ldi	r23, 0x02	; 2
     214:	8a e1       	ldi	r24, 0x1A	; 26
     216:	91 e0       	ldi	r25, 0x01	; 1
     218:	0e 94 5f 0a 	call	0x14be	; 0x14be <xTaskCreate>
	"ObstacleDetect",
	configMINIMAL_STACK_SIZE,
	NULL,
	1, // Priority
	NULL);
}
     21c:	0f 91       	pop	r16
     21e:	ff 90       	pop	r15
     220:	ef 90       	pop	r14
     222:	08 95       	ret

00000224 <turnOnLight>:

// Function to turn on the light
void turnOnLight(void)
{
	// Set LIGHT_PIN high
	PORTC |= (1 << LIGHT_PIN);
     224:	88 b1       	in	r24, 0x08	; 8
     226:	81 60       	ori	r24, 0x01	; 1
     228:	88 b9       	out	0x08, r24	; 8
     22a:	08 95       	ret

0000022c <turnOffLight>:

// Function to turn off the light
void turnOffLight(void)
{
	// Set LIGHT_PIN low
	PORTC &= ~(1 << LIGHT_PIN);
     22c:	88 b1       	in	r24, 0x08	; 8
     22e:	8e 7f       	andi	r24, 0xFE	; 254
     230:	88 b9       	out	0x08, r24	; 8
     232:	08 95       	ret

00000234 <obstacleDetectionTask>:
	}
}

void obstacleDetectionTask(void *pvParameters)
{
			printf("Obstackele detection task");
     234:	84 e5       	ldi	r24, 0x54	; 84
     236:	92 e0       	ldi	r25, 0x02	; 2
     238:	9f 93       	push	r25
     23a:	8f 93       	push	r24
     23c:	0e 94 10 1c 	call	0x3820	; 0x3820 <printf>

	// In every task before loop:
	#if (configUSE_APPLICATION_TASK_TAG == 1)
	// Set taskTag
	vTaskSetApplicationTaskTag(NULL, (void *)2 /*task id*/);
     240:	62 e0       	ldi	r22, 0x02	; 2
     242:	70 e0       	ldi	r23, 0x00	; 0
     244:	80 e0       	ldi	r24, 0x00	; 0
     246:	90 e0       	ldi	r25, 0x00	; 0
     248:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <vTaskSetApplicationTaskTag>
     24c:	0f 90       	pop	r0
     24e:	0f 90       	pop	r0
	uint16_t distance;

	while (1)
	{
		// Acquire the semaphore before reading the shared variable
		if (xSemaphoreTake(xDistanceSemaphore, portMAX_DELAY) == pdTRUE)
     250:	4f ef       	ldi	r20, 0xFF	; 255
     252:	5f ef       	ldi	r21, 0xFF	; 255
     254:	ba 01       	movw	r22, r20
     256:	80 91 a3 11 	lds	r24, 0x11A3	; 0x8011a3 <xDistanceSemaphore>
     25a:	90 91 a4 11 	lds	r25, 0x11A4	; 0x8011a4 <xDistanceSemaphore+0x1>
     25e:	5f d6       	rcall	.+3262   	; 0xf1e <xQueueSemaphoreTake>
     260:	81 30       	cpi	r24, 0x01	; 1
     262:	79 f4       	brne	.+30     	; 0x282 <obstacleDetectionTask+0x4e>
		{
			distance = measuredDistance;
     264:	c0 91 e0 02 	lds	r28, 0x02E0	; 0x8002e0 <__data_end>
     268:	d0 91 e1 02 	lds	r29, 0x02E1	; 0x8002e1 <__data_end+0x1>
			xSemaphoreGive(xDistanceSemaphore); // Release the semaphore
     26c:	00 e0       	ldi	r16, 0x00	; 0
     26e:	20 e0       	ldi	r18, 0x00	; 0
     270:	30 e0       	ldi	r19, 0x00	; 0
     272:	a9 01       	movw	r20, r18
     274:	60 e0       	ldi	r22, 0x00	; 0
     276:	70 e0       	ldi	r23, 0x00	; 0
     278:	80 91 a3 11 	lds	r24, 0x11A3	; 0x8011a3 <xDistanceSemaphore>
     27c:	90 91 a4 11 	lds	r25, 0x11A4	; 0x8011a4 <xDistanceSemaphore+0x1>
     280:	de d4       	rcall	.+2492   	; 0xc3e <xQueueGenericSend>
		}
		// Check if distance is below a certain threshold
		if (distance < 500) // Assuming 20 cm as a constraint
     282:	c4 3f       	cpi	r28, 0xF4	; 244
     284:	81 e0       	ldi	r24, 0x01	; 1
     286:	d8 07       	cpc	r29, r24
     288:	70 f4       	brcc	.+28     	; 0x2a6 <obstacleDetectionTask+0x72>
		{
			printf("Obstacle too close! ,%d \n" , distance);
     28a:	df 93       	push	r29
     28c:	cf 93       	push	r28
     28e:	8e e6       	ldi	r24, 0x6E	; 110
     290:	92 e0       	ldi	r25, 0x02	; 2
     292:	9f 93       	push	r25
     294:	8f 93       	push	r24
     296:	0e 94 10 1c 	call	0x3820	; 0x3820 <printf>
			turnOnLight(); // Turn on the light
     29a:	c4 df       	rcall	.-120    	; 0x224 <turnOnLight>
     29c:	0f 90       	pop	r0
     29e:	0f 90       	pop	r0
     2a0:	0f 90       	pop	r0
     2a2:	0f 90       	pop	r0
     2a4:	0d c0       	rjmp	.+26     	; 0x2c0 <obstacleDetectionTask+0x8c>

		}
		else{
			printf("Obstacle is far away from us ,%d \n" , distance);
     2a6:	df 93       	push	r29
     2a8:	cf 93       	push	r28
     2aa:	88 e8       	ldi	r24, 0x88	; 136
     2ac:	92 e0       	ldi	r25, 0x02	; 2
     2ae:	9f 93       	push	r25
     2b0:	8f 93       	push	r24
     2b2:	0e 94 10 1c 	call	0x3820	; 0x3820 <printf>
			turnOffLight();
     2b6:	ba df       	rcall	.-140    	; 0x22c <turnOffLight>
     2b8:	0f 90       	pop	r0
     2ba:	0f 90       	pop	r0
     2bc:	0f 90       	pop	r0
     2be:	0f 90       	pop	r0
		}

		
		vTaskDelay(1000 / portTICK_PERIOD_MS);
     2c0:	6e e3       	ldi	r22, 0x3E	; 62
     2c2:	70 e0       	ldi	r23, 0x00	; 0
     2c4:	80 e0       	ldi	r24, 0x00	; 0
     2c6:	90 e0       	ldi	r25, 0x00	; 0
     2c8:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <vTaskDelay>
	}
     2cc:	c1 cf       	rjmp	.-126    	; 0x250 <obstacleDetectionTask+0x1c>

000002ce <hc_sr04_init>:
#define P_Echo PC4

void hc_sr04_init()
{
    //Vcc
    DDR_Vcc|=(1 << P_Vcc);
     2ce:	87 b1       	in	r24, 0x07	; 7
     2d0:	81 60       	ori	r24, 0x01	; 1
     2d2:	87 b9       	out	0x07, r24	; 7
    PORT_Vcc|=(1 << P_Vcc);
     2d4:	88 b1       	in	r24, 0x08	; 8
     2d6:	81 60       	ori	r24, 0x01	; 1
     2d8:	88 b9       	out	0x08, r24	; 8

    //GND
    DDR_Gnd|=(1 << P_Gnd);
     2da:	87 b1       	in	r24, 0x07	; 7
     2dc:	80 64       	ori	r24, 0x40	; 64
     2de:	87 b9       	out	0x07, r24	; 7

    //Trigger
    DDR_Trig|=(1 << P_Trig);
     2e0:	87 b1       	in	r24, 0x07	; 7
     2e2:	84 60       	ori	r24, 0x04	; 4
     2e4:	87 b9       	out	0x07, r24	; 7
     2e6:	08 95       	ret

000002e8 <hc_sr04_takeMeasurement>:
}

uint16_t hc_sr04_takeMeasurement()
{
     2e8:	cf 93       	push	r28
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2ea:	85 e3       	ldi	r24, 0x35	; 53
     2ec:	8a 95       	dec	r24
     2ee:	f1 f7       	brne	.-4      	; 0x2ec <hc_sr04_takeMeasurement+0x4>
     2f0:	00 00       	nop
    uint16_t cnt = 0;

    _delay_us(10);
    PORT_trig |= (1 << P_Trig); // trig is set to high for 10 us to start measurement.
     2f2:	88 b1       	in	r24, 0x08	; 8
     2f4:	84 60       	ori	r24, 0x04	; 4
     2f6:	88 b9       	out	0x08, r24	; 8
     2f8:	85 e3       	ldi	r24, 0x35	; 53
     2fa:	8a 95       	dec	r24
     2fc:	f1 f7       	brne	.-4      	; 0x2fa <hc_sr04_takeMeasurement+0x12>
     2fe:	00 00       	nop
    _delay_us(10);
    PORT_trig &= ~(1 << P_Trig);
     300:	88 b1       	in	r24, 0x08	; 8
     302:	8b 7f       	andi	r24, 0xFB	; 251
     304:	88 b9       	out	0x08, r24	; 8


    
    uint8_t TCCR1B_state = TCCR1B; // The display is using timer1. But Ill just borrow it briefly. But therefor the state of TCCR1B needs to be saved.
     306:	e1 e8       	ldi	r30, 0x81	; 129
     308:	f0 e0       	ldi	r31, 0x00	; 0
     30a:	c0 81       	ld	r28, Z

    // Set the Timer/Counter1 prescaler to 256
     TCCR1B = (1 << CS12);
     30c:	84 e0       	ldi	r24, 0x04	; 4
     30e:	80 83       	st	Z, r24
//    TCCR1B |= (1 << CS12);
//    TCCR1B &= ~(1 << CS11);
//    TCCR1B &= ~(1 << CS10);
   
TCNT1 = 0;
     310:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
     314:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
    while (!(PIN_Echo & (1 << P_Echo)))
     318:	10 c0       	rjmp	.+32     	; 0x33a <hc_sr04_takeMeasurement+0x52>
    {

                // Check for timer overflow (24 ms)
        if (TCNT1 >= (F_CPU / 256) * 0.1) //timeout after 100ms. Chip is not working
     31a:	60 91 84 00 	lds	r22, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
     31e:	70 91 85 00 	lds	r23, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
     322:	80 e0       	ldi	r24, 0x00	; 0
     324:	90 e0       	ldi	r25, 0x00	; 0
     326:	0e 94 c2 13 	call	0x2784	; 0x2784 <__floatunsisf>
     32a:	20 e0       	ldi	r18, 0x00	; 0
     32c:	30 e5       	ldi	r19, 0x50	; 80
     32e:	43 ec       	ldi	r20, 0xC3	; 195
     330:	55 e4       	ldi	r21, 0x45	; 69
     332:	0e 94 ff 13 	call	0x27fe	; 0x27fe <__gesf2>
     336:	88 23       	and	r24, r24
     338:	5c f5       	brge	.+86     	; 0x390 <hc_sr04_takeMeasurement+0xa8>
//    TCCR1B |= (1 << CS12);
//    TCCR1B &= ~(1 << CS11);
//    TCCR1B &= ~(1 << CS10);
   
TCNT1 = 0;
    while (!(PIN_Echo & (1 << P_Echo)))
     33a:	34 9b       	sbis	0x06, 4	; 6
     33c:	ee cf       	rjmp	.-36     	; 0x31a <hc_sr04_takeMeasurement+0x32>
        }
    }
         // Wait for signal to begin /TODO implement some timeout...


    TCNT1 = 0; // Setting the timer to Zero. This is  messing up the display, but hopefully the reader of the display wont notice.
     33e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
     342:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>

    while (PIN_Echo & (1 << P_Echo))
     346:	10 c0       	rjmp	.+32     	; 0x368 <hc_sr04_takeMeasurement+0x80>
    {
        // Check for timer overflow (24 ms)
        if (TCNT1 >= (F_CPU / 256) * 0.024)
     348:	60 91 84 00 	lds	r22, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
     34c:	70 91 85 00 	lds	r23, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
     350:	80 e0       	ldi	r24, 0x00	; 0
     352:	90 e0       	ldi	r25, 0x00	; 0
     354:	0e 94 c2 13 	call	0x2784	; 0x2784 <__floatunsisf>
     358:	20 e0       	ldi	r18, 0x00	; 0
     35a:	30 e8       	ldi	r19, 0x80	; 128
     35c:	4b eb       	ldi	r20, 0xBB	; 187
     35e:	54 e4       	ldi	r21, 0x44	; 68
     360:	0e 94 ff 13 	call	0x27fe	; 0x27fe <__gesf2>
     364:	88 23       	and	r24, r24
     366:	14 f4       	brge	.+4      	; 0x36c <hc_sr04_takeMeasurement+0x84>
         // Wait for signal to begin /TODO implement some timeout...


    TCNT1 = 0; // Setting the timer to Zero. This is  messing up the display, but hopefully the reader of the display wont notice.

    while (PIN_Echo & (1 << P_Echo))
     368:	34 99       	sbic	0x06, 4	; 6
     36a:	ee cf       	rjmp	.-36     	; 0x348 <hc_sr04_takeMeasurement+0x60>
        {
            // Timer overflowed, return 0
            break;
        }
    }
    cnt = TCNT1; // Save the value of the timer!
     36c:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
     370:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>

    TCCR1B = TCCR1B_state; // thx Display, for letting me borrow timer1
     374:	c0 93 81 00 	sts	0x0081, r28	; 0x800081 <__TEXT_REGION_LENGTH__+0x7c0081>
    constant that cnt should me multipliued with is calculated: 256/16000000/2 * 343000 = 2.744. This
    value is not good, as it is a floating point. Another way of writing 2.755 is 343/125. This is better,
    as it is integers. In the calculation we make it UL (unsigned Long, 64bit)  to make sure that 343 times cnt
    does not overfloat before its devided by 125
    */
    cnt = cnt * 343UL / 125UL;
     378:	a7 e5       	ldi	r26, 0x57	; 87
     37a:	b1 e0       	ldi	r27, 0x01	; 1
     37c:	0e 94 cc 1a 	call	0x3598	; 0x3598 <__umulhisi3>
     380:	2d e7       	ldi	r18, 0x7D	; 125
     382:	30 e0       	ldi	r19, 0x00	; 0
     384:	40 e0       	ldi	r20, 0x00	; 0
     386:	50 e0       	ldi	r21, 0x00	; 0
     388:	0e 94 a2 1a 	call	0x3544	; 0x3544 <__udivmodsi4>

    return cnt;
     38c:	c9 01       	movw	r24, r18
     38e:	02 c0       	rjmp	.+4      	; 0x394 <hc_sr04_takeMeasurement+0xac>

                // Check for timer overflow (24 ms)
        if (TCNT1 >= (F_CPU / 256) * 0.1) //timeout after 100ms. Chip is not working
        {
            // Timer overflowed, return 0
            return 0;
     390:	80 e0       	ldi	r24, 0x00	; 0
     392:	90 e0       	ldi	r25, 0x00	; 0
    does not overfloat before its devided by 125
    */
    cnt = cnt * 343UL / 125UL;

    return cnt;
     394:	cf 91       	pop	r28
     396:	08 95       	ret

00000398 <trace_init>:
	 #if (configUseR2RTrace == 1)
	 #ifdef HAL_DEFS_H_

	 #else
		// Used on VIA MEGA Shield rev. 2.0.0
		DDRK |= _BV(DDK0) | _BV(DDK1) | _BV(DDK2) | _BV(DDK3);
     398:	e7 e0       	ldi	r30, 0x07	; 7
     39a:	f1 e0       	ldi	r31, 0x01	; 1
     39c:	80 81       	ld	r24, Z
     39e:	8f 60       	ori	r24, 0x0F	; 15
     3a0:	80 83       	st	Z, r24
     3a2:	08 95       	ret

000003a4 <task_switch_in>:
	void task_switch_in(uint8_t task_no) {
		 #ifdef HAL_DEFS_H_

		 #else
		 // Used on VIA MEGA Shield rev. 2.0.0
		 PORTK &= 0b11110000;
     3a4:	e8 e0       	ldi	r30, 0x08	; 8
     3a6:	f1 e0       	ldi	r31, 0x01	; 1
     3a8:	90 81       	ld	r25, Z
     3aa:	90 7f       	andi	r25, 0xF0	; 240
     3ac:	90 83       	st	Z, r25
		 PORTK |= (task_no & 0b00001111);
     3ae:	90 81       	ld	r25, Z
     3b0:	8f 70       	andi	r24, 0x0F	; 15
     3b2:	98 2b       	or	r25, r24
     3b4:	90 83       	st	Z, r25
     3b6:	08 95       	ret

000003b8 <task_switch_out>:
	void task_switch_out(uint8_t task_no) {
		#ifdef HAL_DEFS_H_

		#else
		// Used on VIA MEGA Shield rev. 2.0.0
		PORTK &= 0b11110000;
     3b8:	e8 e0       	ldi	r30, 0x08	; 8
     3ba:	f1 e0       	ldi	r31, 0x01	; 1
     3bc:	80 81       	ld	r24, Z
     3be:	80 7f       	andi	r24, 0xF0	; 240
     3c0:	80 83       	st	Z, r24
     3c2:	08 95       	ret

000003c4 <prvHeapInit>:

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     3c4:	ee ee       	ldi	r30, 0xEE	; 238
     3c6:	f2 e0       	ldi	r31, 0x02	; 2
     3c8:	a2 ef       	ldi	r26, 0xF2	; 242
     3ca:	b2 e0       	ldi	r27, 0x02	; 2
     3cc:	b1 83       	std	Z+1, r27	; 0x01
     3ce:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
     3d0:	13 82       	std	Z+3, r1	; 0x03
     3d2:	12 82       	std	Z+2, r1	; 0x02

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
     3d4:	ea e9       	ldi	r30, 0x9A	; 154
     3d6:	f0 e1       	ldi	r31, 0x10	; 16
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
     3d8:	f0 93 ed 02 	sts	0x02ED, r31	; 0x8002ed <pxEnd+0x1>
     3dc:	e0 93 ec 02 	sts	0x02EC, r30	; 0x8002ec <pxEnd>
    pxEnd->xBlockSize = 0;
     3e0:	13 82       	std	Z+3, r1	; 0x03
     3e2:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
     3e4:	11 82       	std	Z+1, r1	; 0x01
     3e6:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     3e8:	88 ea       	ldi	r24, 0xA8	; 168
     3ea:	9d e0       	ldi	r25, 0x0D	; 13
     3ec:	13 96       	adiw	r26, 0x03	; 3
     3ee:	9c 93       	st	X, r25
     3f0:	8e 93       	st	-X, r24
     3f2:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     3f4:	ed 93       	st	X+, r30
     3f6:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     3f8:	90 93 e9 02 	sts	0x02E9, r25	; 0x8002e9 <xMinimumEverFreeBytesRemaining+0x1>
     3fc:	80 93 e8 02 	sts	0x02E8, r24	; 0x8002e8 <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     400:	90 93 eb 02 	sts	0x02EB, r25	; 0x8002eb <xFreeBytesRemaining+0x1>
     404:	80 93 ea 02 	sts	0x02EA, r24	; 0x8002ea <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     408:	80 e0       	ldi	r24, 0x00	; 0
     40a:	90 e8       	ldi	r25, 0x80	; 128
     40c:	90 93 e3 02 	sts	0x02E3, r25	; 0x8002e3 <xBlockAllocatedBit+0x1>
     410:	80 93 e2 02 	sts	0x02E2, r24	; 0x8002e2 <xBlockAllocatedBit>
     414:	08 95       	ret

00000416 <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
     416:	cf 93       	push	r28
     418:	df 93       	push	r29
     41a:	ec 01       	movw	r28, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     41c:	ae ee       	ldi	r26, 0xEE	; 238
     41e:	b2 e0       	ldi	r27, 0x02	; 2
     420:	01 c0       	rjmp	.+2      	; 0x424 <prvInsertBlockIntoFreeList+0xe>
     422:	df 01       	movw	r26, r30
     424:	ed 91       	ld	r30, X+
     426:	fc 91       	ld	r31, X
     428:	11 97       	sbiw	r26, 0x01	; 1
     42a:	ec 17       	cp	r30, r28
     42c:	fd 07       	cpc	r31, r29
     42e:	c8 f3       	brcs	.-14     	; 0x422 <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     430:	12 96       	adiw	r26, 0x02	; 2
     432:	8d 91       	ld	r24, X+
     434:	9c 91       	ld	r25, X
     436:	13 97       	sbiw	r26, 0x03	; 3
     438:	9d 01       	movw	r18, r26
     43a:	28 0f       	add	r18, r24
     43c:	39 1f       	adc	r19, r25
     43e:	c2 17       	cp	r28, r18
     440:	d3 07       	cpc	r29, r19
     442:	49 f4       	brne	.+18     	; 0x456 <prvInsertBlockIntoFreeList+0x40>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     444:	2a 81       	ldd	r18, Y+2	; 0x02
     446:	3b 81       	ldd	r19, Y+3	; 0x03
     448:	82 0f       	add	r24, r18
     44a:	93 1f       	adc	r25, r19
     44c:	13 96       	adiw	r26, 0x03	; 3
     44e:	9c 93       	st	X, r25
     450:	8e 93       	st	-X, r24
     452:	12 97       	sbiw	r26, 0x02	; 2
        pxBlockToInsert = pxIterator;
     454:	ed 01       	movw	r28, r26

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     456:	8a 81       	ldd	r24, Y+2	; 0x02
     458:	9b 81       	ldd	r25, Y+3	; 0x03
     45a:	9e 01       	movw	r18, r28
     45c:	28 0f       	add	r18, r24
     45e:	39 1f       	adc	r19, r25
     460:	e2 17       	cp	r30, r18
     462:	f3 07       	cpc	r31, r19
     464:	c1 f4       	brne	.+48     	; 0x496 <prvInsertBlockIntoFreeList+0x80>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
     466:	20 91 ec 02 	lds	r18, 0x02EC	; 0x8002ec <pxEnd>
     46a:	30 91 ed 02 	lds	r19, 0x02ED	; 0x8002ed <pxEnd+0x1>
     46e:	e2 17       	cp	r30, r18
     470:	f3 07       	cpc	r31, r19
     472:	71 f0       	breq	.+28     	; 0x490 <prvInsertBlockIntoFreeList+0x7a>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     474:	22 81       	ldd	r18, Z+2	; 0x02
     476:	33 81       	ldd	r19, Z+3	; 0x03
     478:	82 0f       	add	r24, r18
     47a:	93 1f       	adc	r25, r19
     47c:	9b 83       	std	Y+3, r25	; 0x03
     47e:	8a 83       	std	Y+2, r24	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     480:	ed 91       	ld	r30, X+
     482:	fc 91       	ld	r31, X
     484:	11 97       	sbiw	r26, 0x01	; 1
     486:	80 81       	ld	r24, Z
     488:	91 81       	ldd	r25, Z+1	; 0x01
     48a:	99 83       	std	Y+1, r25	; 0x01
     48c:	88 83       	st	Y, r24
     48e:	05 c0       	rjmp	.+10     	; 0x49a <prvInsertBlockIntoFreeList+0x84>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
     490:	39 83       	std	Y+1, r19	; 0x01
     492:	28 83       	st	Y, r18
     494:	02 c0       	rjmp	.+4      	; 0x49a <prvInsertBlockIntoFreeList+0x84>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     496:	f9 83       	std	Y+1, r31	; 0x01
     498:	e8 83       	st	Y, r30

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
     49a:	ca 17       	cp	r28, r26
     49c:	db 07       	cpc	r29, r27
     49e:	11 f0       	breq	.+4      	; 0x4a4 <prvInsertBlockIntoFreeList+0x8e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
     4a0:	cd 93       	st	X+, r28
     4a2:	dc 93       	st	X, r29
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
     4a4:	df 91       	pop	r29
     4a6:	cf 91       	pop	r28
     4a8:	08 95       	ret

000004aa <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     4aa:	ef 92       	push	r14
     4ac:	ff 92       	push	r15
     4ae:	0f 93       	push	r16
     4b0:	1f 93       	push	r17
     4b2:	cf 93       	push	r28
     4b4:	df 93       	push	r29
     4b6:	8c 01       	movw	r16, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     4b8:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
     4bc:	80 91 ec 02 	lds	r24, 0x02EC	; 0x8002ec <pxEnd>
     4c0:	90 91 ed 02 	lds	r25, 0x02ED	; 0x8002ed <pxEnd+0x1>
     4c4:	89 2b       	or	r24, r25
     4c6:	09 f4       	brne	.+2      	; 0x4ca <pvPortMalloc+0x20>
        {
            prvHeapInit();
     4c8:	7d df       	rcall	.-262    	; 0x3c4 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     4ca:	80 91 e2 02 	lds	r24, 0x02E2	; 0x8002e2 <xBlockAllocatedBit>
     4ce:	90 91 e3 02 	lds	r25, 0x02E3	; 0x8002e3 <xBlockAllocatedBit+0x1>
     4d2:	80 23       	and	r24, r16
     4d4:	91 23       	and	r25, r17
     4d6:	89 2b       	or	r24, r25
     4d8:	09 f0       	breq	.+2      	; 0x4dc <pvPortMalloc+0x32>
     4da:	76 c0       	rjmp	.+236    	; 0x5c8 <pvPortMalloc+0x11e>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     4dc:	01 15       	cp	r16, r1
     4de:	11 05       	cpc	r17, r1
     4e0:	49 f0       	breq	.+18     	; 0x4f4 <pvPortMalloc+0x4a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
     4e2:	c8 01       	movw	r24, r16
     4e4:	04 96       	adiw	r24, 0x04	; 4
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     4e6:	08 17       	cp	r16, r24
     4e8:	19 07       	cpc	r17, r25
     4ea:	18 f0       	brcs	.+6      	; 0x4f2 <pvPortMalloc+0x48>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
     4ec:	00 e0       	ldi	r16, 0x00	; 0
     4ee:	10 e0       	ldi	r17, 0x00	; 0
     4f0:	01 c0       	rjmp	.+2      	; 0x4f4 <pvPortMalloc+0x4a>
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
            {
                xWantedSize += xHeapStructSize;
     4f2:	8c 01       	movw	r16, r24
            else 
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     4f4:	01 15       	cp	r16, r1
     4f6:	11 05       	cpc	r17, r1
     4f8:	09 f4       	brne	.+2      	; 0x4fc <pvPortMalloc+0x52>
     4fa:	69 c0       	rjmp	.+210    	; 0x5ce <pvPortMalloc+0x124>
     4fc:	80 91 ea 02 	lds	r24, 0x02EA	; 0x8002ea <xFreeBytesRemaining>
     500:	90 91 eb 02 	lds	r25, 0x02EB	; 0x8002eb <xFreeBytesRemaining+0x1>
     504:	80 17       	cp	r24, r16
     506:	91 07       	cpc	r25, r17
     508:	08 f4       	brcc	.+2      	; 0x50c <pvPortMalloc+0x62>
     50a:	64 c0       	rjmp	.+200    	; 0x5d4 <pvPortMalloc+0x12a>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
     50c:	c0 91 ee 02 	lds	r28, 0x02EE	; 0x8002ee <xStart>
     510:	d0 91 ef 02 	lds	r29, 0x02EF	; 0x8002ef <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
     514:	ee ee       	ldi	r30, 0xEE	; 238
     516:	f2 e0       	ldi	r31, 0x02	; 2
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     518:	02 c0       	rjmp	.+4      	; 0x51e <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
     51a:	fe 01       	movw	r30, r28
                    pxBlock = pxBlock->pxNextFreeBlock;
     51c:	ec 01       	movw	r28, r24
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     51e:	8a 81       	ldd	r24, Y+2	; 0x02
     520:	9b 81       	ldd	r25, Y+3	; 0x03
     522:	80 17       	cp	r24, r16
     524:	91 07       	cpc	r25, r17
     526:	20 f4       	brcc	.+8      	; 0x530 <pvPortMalloc+0x86>
     528:	88 81       	ld	r24, Y
     52a:	99 81       	ldd	r25, Y+1	; 0x01
     52c:	00 97       	sbiw	r24, 0x00	; 0
     52e:	a9 f7       	brne	.-22     	; 0x51a <pvPortMalloc+0x70>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
     530:	80 91 ec 02 	lds	r24, 0x02EC	; 0x8002ec <pxEnd>
     534:	90 91 ed 02 	lds	r25, 0x02ED	; 0x8002ed <pxEnd+0x1>
     538:	c8 17       	cp	r28, r24
     53a:	d9 07       	cpc	r29, r25
     53c:	09 f4       	brne	.+2      	; 0x540 <pvPortMalloc+0x96>
     53e:	4d c0       	rjmp	.+154    	; 0x5da <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     540:	e0 80       	ld	r14, Z
     542:	f1 80       	ldd	r15, Z+1	; 0x01
     544:	84 e0       	ldi	r24, 0x04	; 4
     546:	e8 0e       	add	r14, r24
     548:	f1 1c       	adc	r15, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     54a:	88 81       	ld	r24, Y
     54c:	99 81       	ldd	r25, Y+1	; 0x01
     54e:	91 83       	std	Z+1, r25	; 0x01
     550:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     552:	2a 81       	ldd	r18, Y+2	; 0x02
     554:	3b 81       	ldd	r19, Y+3	; 0x03
     556:	20 1b       	sub	r18, r16
     558:	31 0b       	sbc	r19, r17
     55a:	29 30       	cpi	r18, 0x09	; 9
     55c:	31 05       	cpc	r19, r1
     55e:	48 f0       	brcs	.+18     	; 0x572 <pvPortMalloc+0xc8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     560:	ce 01       	movw	r24, r28
     562:	80 0f       	add	r24, r16
     564:	91 1f       	adc	r25, r17
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     566:	fc 01       	movw	r30, r24
     568:	33 83       	std	Z+3, r19	; 0x03
     56a:	22 83       	std	Z+2, r18	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
     56c:	1b 83       	std	Y+3, r17	; 0x03

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
     56e:	0a 83       	std	Y+2, r16	; 0x02
     570:	52 df       	rcall	.-348    	; 0x416 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
     572:	2a 81       	ldd	r18, Y+2	; 0x02
     574:	3b 81       	ldd	r19, Y+3	; 0x03
     576:	80 91 ea 02 	lds	r24, 0x02EA	; 0x8002ea <xFreeBytesRemaining>
     57a:	90 91 eb 02 	lds	r25, 0x02EB	; 0x8002eb <xFreeBytesRemaining+0x1>
     57e:	82 1b       	sub	r24, r18
     580:	93 0b       	sbc	r25, r19
     582:	90 93 eb 02 	sts	0x02EB, r25	; 0x8002eb <xFreeBytesRemaining+0x1>
     586:	80 93 ea 02 	sts	0x02EA, r24	; 0x8002ea <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     58a:	40 91 e8 02 	lds	r20, 0x02E8	; 0x8002e8 <xMinimumEverFreeBytesRemaining>
     58e:	50 91 e9 02 	lds	r21, 0x02E9	; 0x8002e9 <xMinimumEverFreeBytesRemaining+0x1>
     592:	84 17       	cp	r24, r20
     594:	95 07       	cpc	r25, r21
     596:	20 f4       	brcc	.+8      	; 0x5a0 <pvPortMalloc+0xf6>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     598:	90 93 e9 02 	sts	0x02E9, r25	; 0x8002e9 <xMinimumEverFreeBytesRemaining+0x1>
     59c:	80 93 e8 02 	sts	0x02E8, r24	; 0x8002e8 <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
     5a0:	80 91 e2 02 	lds	r24, 0x02E2	; 0x8002e2 <xBlockAllocatedBit>
     5a4:	90 91 e3 02 	lds	r25, 0x02E3	; 0x8002e3 <xBlockAllocatedBit+0x1>
     5a8:	28 2b       	or	r18, r24
     5aa:	39 2b       	or	r19, r25
     5ac:	3b 83       	std	Y+3, r19	; 0x03
     5ae:	2a 83       	std	Y+2, r18	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
     5b0:	19 82       	std	Y+1, r1	; 0x01
     5b2:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
     5b4:	80 91 e6 02 	lds	r24, 0x02E6	; 0x8002e6 <xNumberOfSuccessfulAllocations>
     5b8:	90 91 e7 02 	lds	r25, 0x02E7	; 0x8002e7 <xNumberOfSuccessfulAllocations+0x1>
     5bc:	01 96       	adiw	r24, 0x01	; 1
     5be:	90 93 e7 02 	sts	0x02E7, r25	; 0x8002e7 <xNumberOfSuccessfulAllocations+0x1>
     5c2:	80 93 e6 02 	sts	0x02E6, r24	; 0x8002e6 <xNumberOfSuccessfulAllocations>
     5c6:	0b c0       	rjmp	.+22     	; 0x5de <pvPortMalloc+0x134>
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
     5c8:	e1 2c       	mov	r14, r1
     5ca:	f1 2c       	mov	r15, r1
     5cc:	08 c0       	rjmp	.+16     	; 0x5de <pvPortMalloc+0x134>
     5ce:	e1 2c       	mov	r14, r1
     5d0:	f1 2c       	mov	r15, r1
     5d2:	05 c0       	rjmp	.+10     	; 0x5de <pvPortMalloc+0x134>
     5d4:	e1 2c       	mov	r14, r1
     5d6:	f1 2c       	mov	r15, r1
     5d8:	02 c0       	rjmp	.+4      	; 0x5de <pvPortMalloc+0x134>
     5da:	e1 2c       	mov	r14, r1
     5dc:	f1 2c       	mov	r15, r1
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     5de:	0e 94 27 0c 	call	0x184e	; 0x184e <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
     5e2:	e1 14       	cp	r14, r1
     5e4:	f1 04       	cpc	r15, r1
     5e6:	11 f4       	brne	.+4      	; 0x5ec <pvPortMalloc+0x142>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
     5e8:	0e 94 90 13 	call	0x2720	; 0x2720 <vApplicationMallocFailedHook>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
     5ec:	c7 01       	movw	r24, r14
     5ee:	df 91       	pop	r29
     5f0:	cf 91       	pop	r28
     5f2:	1f 91       	pop	r17
     5f4:	0f 91       	pop	r16
     5f6:	ff 90       	pop	r15
     5f8:	ef 90       	pop	r14
     5fa:	08 95       	ret

000005fc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     5fc:	0f 93       	push	r16
     5fe:	1f 93       	push	r17
     600:	cf 93       	push	r28
     602:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     604:	00 97       	sbiw	r24, 0x00	; 0
     606:	89 f1       	breq	.+98     	; 0x66a <vPortFree+0x6e>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
     608:	ec 01       	movw	r28, r24
     60a:	24 97       	sbiw	r28, 0x04	; 4

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     60c:	4a 81       	ldd	r20, Y+2	; 0x02
     60e:	5b 81       	ldd	r21, Y+3	; 0x03
     610:	20 91 e2 02 	lds	r18, 0x02E2	; 0x8002e2 <xBlockAllocatedBit>
     614:	30 91 e3 02 	lds	r19, 0x02E3	; 0x8002e3 <xBlockAllocatedBit+0x1>
     618:	ba 01       	movw	r22, r20
     61a:	62 23       	and	r22, r18
     61c:	73 23       	and	r23, r19
     61e:	67 2b       	or	r22, r23
     620:	21 f1       	breq	.+72     	; 0x66a <vPortFree+0x6e>
        {
            if( pxLink->pxNextFreeBlock == NULL )
     622:	68 81       	ld	r22, Y
     624:	79 81       	ldd	r23, Y+1	; 0x01
     626:	67 2b       	or	r22, r23
     628:	01 f5       	brne	.+64     	; 0x66a <vPortFree+0x6e>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
     62a:	20 95       	com	r18
     62c:	30 95       	com	r19
     62e:	24 23       	and	r18, r20
     630:	35 23       	and	r19, r21
     632:	3b 83       	std	Y+3, r19	; 0x03
     634:	2a 83       	std	Y+2, r18	; 0x02

                vTaskSuspendAll();
     636:	cb d7       	rcall	.+3990   	; 0x15ce <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
     638:	8a 81       	ldd	r24, Y+2	; 0x02
     63a:	9b 81       	ldd	r25, Y+3	; 0x03
     63c:	20 91 ea 02 	lds	r18, 0x02EA	; 0x8002ea <xFreeBytesRemaining>
     640:	30 91 eb 02 	lds	r19, 0x02EB	; 0x8002eb <xFreeBytesRemaining+0x1>
     644:	82 0f       	add	r24, r18
     646:	93 1f       	adc	r25, r19
     648:	90 93 eb 02 	sts	0x02EB, r25	; 0x8002eb <xFreeBytesRemaining+0x1>
     64c:	80 93 ea 02 	sts	0x02EA, r24	; 0x8002ea <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     650:	ce 01       	movw	r24, r28
     652:	e1 de       	rcall	.-574    	; 0x416 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
     654:	80 91 e4 02 	lds	r24, 0x02E4	; 0x8002e4 <xNumberOfSuccessfulFrees>
     658:	90 91 e5 02 	lds	r25, 0x02E5	; 0x8002e5 <xNumberOfSuccessfulFrees+0x1>
     65c:	01 96       	adiw	r24, 0x01	; 1
     65e:	90 93 e5 02 	sts	0x02E5, r25	; 0x8002e5 <xNumberOfSuccessfulFrees+0x1>
     662:	80 93 e4 02 	sts	0x02E4, r24	; 0x8002e4 <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
     666:	0e 94 27 0c 	call	0x184e	; 0x184e <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
     66a:	df 91       	pop	r29
     66c:	cf 91       	pop	r28
     66e:	1f 91       	pop	r17
     670:	0f 91       	pop	r16
     672:	08 95       	ret

00000674 <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     674:	fc 01       	movw	r30, r24
     676:	03 96       	adiw	r24, 0x03	; 3
     678:	92 83       	std	Z+2, r25	; 0x02
     67a:	81 83       	std	Z+1, r24	; 0x01
     67c:	4f ef       	ldi	r20, 0xFF	; 255
     67e:	5f ef       	ldi	r21, 0xFF	; 255
     680:	ba 01       	movw	r22, r20
     682:	43 83       	std	Z+3, r20	; 0x03
     684:	54 83       	std	Z+4, r21	; 0x04
     686:	65 83       	std	Z+5, r22	; 0x05
     688:	76 83       	std	Z+6, r23	; 0x06
     68a:	90 87       	std	Z+8, r25	; 0x08
     68c:	87 83       	std	Z+7, r24	; 0x07
     68e:	92 87       	std	Z+10, r25	; 0x0a
     690:	81 87       	std	Z+9, r24	; 0x09
     692:	10 82       	st	Z, r1
     694:	08 95       	ret

00000696 <vListInitialiseItem>:
     696:	fc 01       	movw	r30, r24
     698:	13 86       	std	Z+11, r1	; 0x0b
     69a:	12 86       	std	Z+10, r1	; 0x0a
     69c:	08 95       	ret

0000069e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     69e:	0f 93       	push	r16
     6a0:	1f 93       	push	r17
     6a2:	cf 93       	push	r28
     6a4:	df 93       	push	r29
     6a6:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     6a8:	08 81       	ld	r16, Y
     6aa:	19 81       	ldd	r17, Y+1	; 0x01
     6ac:	2a 81       	ldd	r18, Y+2	; 0x02
     6ae:	3b 81       	ldd	r19, Y+3	; 0x03
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     6b0:	0f 3f       	cpi	r16, 0xFF	; 255
     6b2:	4f ef       	ldi	r20, 0xFF	; 255
     6b4:	14 07       	cpc	r17, r20
     6b6:	24 07       	cpc	r18, r20
     6b8:	34 07       	cpc	r19, r20
     6ba:	21 f4       	brne	.+8      	; 0x6c4 <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     6bc:	fc 01       	movw	r30, r24
     6be:	a1 85       	ldd	r26, Z+9	; 0x09
     6c0:	b2 85       	ldd	r27, Z+10	; 0x0a
     6c2:	11 c0       	rjmp	.+34     	; 0x6e6 <vListInsert+0x48>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     6c4:	dc 01       	movw	r26, r24
     6c6:	13 96       	adiw	r26, 0x03	; 3
     6c8:	01 c0       	rjmp	.+2      	; 0x6cc <vListInsert+0x2e>
     6ca:	df 01       	movw	r26, r30
     6cc:	14 96       	adiw	r26, 0x04	; 4
     6ce:	ed 91       	ld	r30, X+
     6d0:	fc 91       	ld	r31, X
     6d2:	15 97       	sbiw	r26, 0x05	; 5
     6d4:	40 81       	ld	r20, Z
     6d6:	51 81       	ldd	r21, Z+1	; 0x01
     6d8:	62 81       	ldd	r22, Z+2	; 0x02
     6da:	73 81       	ldd	r23, Z+3	; 0x03
     6dc:	04 17       	cp	r16, r20
     6de:	15 07       	cpc	r17, r21
     6e0:	26 07       	cpc	r18, r22
     6e2:	37 07       	cpc	r19, r23
     6e4:	90 f7       	brcc	.-28     	; 0x6ca <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     6e6:	14 96       	adiw	r26, 0x04	; 4
     6e8:	ed 91       	ld	r30, X+
     6ea:	fc 91       	ld	r31, X
     6ec:	15 97       	sbiw	r26, 0x05	; 5
     6ee:	fd 83       	std	Y+5, r31	; 0x05
     6f0:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     6f2:	d7 83       	std	Z+7, r29	; 0x07
     6f4:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
     6f6:	bf 83       	std	Y+7, r27	; 0x07
     6f8:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
     6fa:	15 96       	adiw	r26, 0x05	; 5
     6fc:	dc 93       	st	X, r29
     6fe:	ce 93       	st	-X, r28
     700:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     702:	9b 87       	std	Y+11, r25	; 0x0b
     704:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
     706:	fc 01       	movw	r30, r24
     708:	20 81       	ld	r18, Z
     70a:	2f 5f       	subi	r18, 0xFF	; 255
     70c:	20 83       	st	Z, r18
}
     70e:	df 91       	pop	r29
     710:	cf 91       	pop	r28
     712:	1f 91       	pop	r17
     714:	0f 91       	pop	r16
     716:	08 95       	ret

00000718 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     718:	cf 93       	push	r28
     71a:	df 93       	push	r29
     71c:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     71e:	a2 85       	ldd	r26, Z+10	; 0x0a
     720:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     722:	c4 81       	ldd	r28, Z+4	; 0x04
     724:	d5 81       	ldd	r29, Z+5	; 0x05
     726:	86 81       	ldd	r24, Z+6	; 0x06
     728:	97 81       	ldd	r25, Z+7	; 0x07
     72a:	9f 83       	std	Y+7, r25	; 0x07
     72c:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     72e:	c6 81       	ldd	r28, Z+6	; 0x06
     730:	d7 81       	ldd	r29, Z+7	; 0x07
     732:	84 81       	ldd	r24, Z+4	; 0x04
     734:	95 81       	ldd	r25, Z+5	; 0x05
     736:	9d 83       	std	Y+5, r25	; 0x05
     738:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     73a:	11 96       	adiw	r26, 0x01	; 1
     73c:	8d 91       	ld	r24, X+
     73e:	9c 91       	ld	r25, X
     740:	12 97       	sbiw	r26, 0x02	; 2
     742:	e8 17       	cp	r30, r24
     744:	f9 07       	cpc	r31, r25
     746:	31 f4       	brne	.+12     	; 0x754 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     748:	86 81       	ldd	r24, Z+6	; 0x06
     74a:	97 81       	ldd	r25, Z+7	; 0x07
     74c:	12 96       	adiw	r26, 0x02	; 2
     74e:	9c 93       	st	X, r25
     750:	8e 93       	st	-X, r24
     752:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     754:	13 86       	std	Z+11, r1	; 0x0b
     756:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
     758:	8c 91       	ld	r24, X
     75a:	81 50       	subi	r24, 0x01	; 1
     75c:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     75e:	8c 91       	ld	r24, X
}
     760:	df 91       	pop	r29
     762:	cf 91       	pop	r28
     764:	08 95       	ret

00000766 <prvSetupTimerInterrupt>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
     766:	a8 95       	wdr
     768:	90 ec       	ldi	r25, 0xC0	; 192
     76a:	88 e1       	ldi	r24, 0x18	; 24
     76c:	0f b6       	in	r0, 0x3f	; 63
     76e:	f8 94       	cli
     770:	a8 95       	wdr
     772:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     776:	0f be       	out	0x3f, r0	; 63
     778:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     77c:	08 95       	ret

0000077e <pxPortInitialiseStack>:
     77e:	fc 01       	movw	r30, r24
     780:	60 83       	st	Z, r22
     782:	31 97       	sbiw	r30, 0x01	; 1
     784:	70 83       	st	Z, r23
     786:	31 97       	sbiw	r30, 0x01	; 1
     788:	10 82       	st	Z, r1
     78a:	31 97       	sbiw	r30, 0x01	; 1
     78c:	10 82       	st	Z, r1
     78e:	31 97       	sbiw	r30, 0x01	; 1
     790:	20 e8       	ldi	r18, 0x80	; 128
     792:	20 83       	st	Z, r18
     794:	31 97       	sbiw	r30, 0x01	; 1
     796:	10 82       	st	Z, r1
     798:	31 97       	sbiw	r30, 0x01	; 1
     79a:	10 82       	st	Z, r1
     79c:	31 97       	sbiw	r30, 0x01	; 1
     79e:	10 82       	st	Z, r1
     7a0:	77 97       	sbiw	r30, 0x17	; 23
     7a2:	40 83       	st	Z, r20
     7a4:	31 97       	sbiw	r30, 0x01	; 1
     7a6:	50 83       	st	Z, r21
     7a8:	86 97       	sbiw	r24, 0x26	; 38
     7aa:	08 95       	ret

000007ac <xPortStartScheduler>:
     7ac:	dc df       	rcall	.-72     	; 0x766 <prvSetupTimerInterrupt>
     7ae:	a0 91 5d 11 	lds	r26, 0x115D	; 0x80115d <pxCurrentTCB>
     7b2:	b0 91 5e 11 	lds	r27, 0x115E	; 0x80115e <pxCurrentTCB+0x1>
     7b6:	cd 91       	ld	r28, X+
     7b8:	cd bf       	out	0x3d, r28	; 61
     7ba:	dd 91       	ld	r29, X+
     7bc:	de bf       	out	0x3e, r29	; 62
     7be:	ff 91       	pop	r31
     7c0:	ef 91       	pop	r30
     7c2:	df 91       	pop	r29
     7c4:	cf 91       	pop	r28
     7c6:	bf 91       	pop	r27
     7c8:	af 91       	pop	r26
     7ca:	9f 91       	pop	r25
     7cc:	8f 91       	pop	r24
     7ce:	7f 91       	pop	r23
     7d0:	6f 91       	pop	r22
     7d2:	5f 91       	pop	r21
     7d4:	4f 91       	pop	r20
     7d6:	3f 91       	pop	r19
     7d8:	2f 91       	pop	r18
     7da:	1f 91       	pop	r17
     7dc:	0f 91       	pop	r16
     7de:	ff 90       	pop	r15
     7e0:	ef 90       	pop	r14
     7e2:	df 90       	pop	r13
     7e4:	cf 90       	pop	r12
     7e6:	bf 90       	pop	r11
     7e8:	af 90       	pop	r10
     7ea:	9f 90       	pop	r9
     7ec:	8f 90       	pop	r8
     7ee:	7f 90       	pop	r7
     7f0:	6f 90       	pop	r6
     7f2:	5f 90       	pop	r5
     7f4:	4f 90       	pop	r4
     7f6:	3f 90       	pop	r3
     7f8:	2f 90       	pop	r2
     7fa:	1f 90       	pop	r1
     7fc:	0f 90       	pop	r0
     7fe:	0c be       	out	0x3c, r0	; 60
     800:	0f 90       	pop	r0
     802:	0b be       	out	0x3b, r0	; 59
     804:	0f 90       	pop	r0
     806:	0f be       	out	0x3f, r0	; 63
     808:	0f 90       	pop	r0
     80a:	08 95       	ret
     80c:	81 e0       	ldi	r24, 0x01	; 1
     80e:	08 95       	ret

00000810 <vPortYield>:
     810:	0f 92       	push	r0
     812:	0f b6       	in	r0, 0x3f	; 63
     814:	f8 94       	cli
     816:	0f 92       	push	r0
     818:	0b b6       	in	r0, 0x3b	; 59
     81a:	0f 92       	push	r0
     81c:	0c b6       	in	r0, 0x3c	; 60
     81e:	0f 92       	push	r0
     820:	1f 92       	push	r1
     822:	11 24       	eor	r1, r1
     824:	2f 92       	push	r2
     826:	3f 92       	push	r3
     828:	4f 92       	push	r4
     82a:	5f 92       	push	r5
     82c:	6f 92       	push	r6
     82e:	7f 92       	push	r7
     830:	8f 92       	push	r8
     832:	9f 92       	push	r9
     834:	af 92       	push	r10
     836:	bf 92       	push	r11
     838:	cf 92       	push	r12
     83a:	df 92       	push	r13
     83c:	ef 92       	push	r14
     83e:	ff 92       	push	r15
     840:	0f 93       	push	r16
     842:	1f 93       	push	r17
     844:	2f 93       	push	r18
     846:	3f 93       	push	r19
     848:	4f 93       	push	r20
     84a:	5f 93       	push	r21
     84c:	6f 93       	push	r22
     84e:	7f 93       	push	r23
     850:	8f 93       	push	r24
     852:	9f 93       	push	r25
     854:	af 93       	push	r26
     856:	bf 93       	push	r27
     858:	cf 93       	push	r28
     85a:	df 93       	push	r29
     85c:	ef 93       	push	r30
     85e:	ff 93       	push	r31
     860:	a0 91 5d 11 	lds	r26, 0x115D	; 0x80115d <pxCurrentTCB>
     864:	b0 91 5e 11 	lds	r27, 0x115E	; 0x80115e <pxCurrentTCB+0x1>
     868:	0d b6       	in	r0, 0x3d	; 61
     86a:	0d 92       	st	X+, r0
     86c:	0e b6       	in	r0, 0x3e	; 62
     86e:	0d 92       	st	X+, r0
     870:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <vTaskSwitchContext>
     874:	a0 91 5d 11 	lds	r26, 0x115D	; 0x80115d <pxCurrentTCB>
     878:	b0 91 5e 11 	lds	r27, 0x115E	; 0x80115e <pxCurrentTCB+0x1>
     87c:	cd 91       	ld	r28, X+
     87e:	cd bf       	out	0x3d, r28	; 61
     880:	dd 91       	ld	r29, X+
     882:	de bf       	out	0x3e, r29	; 62
     884:	ff 91       	pop	r31
     886:	ef 91       	pop	r30
     888:	df 91       	pop	r29
     88a:	cf 91       	pop	r28
     88c:	bf 91       	pop	r27
     88e:	af 91       	pop	r26
     890:	9f 91       	pop	r25
     892:	8f 91       	pop	r24
     894:	7f 91       	pop	r23
     896:	6f 91       	pop	r22
     898:	5f 91       	pop	r21
     89a:	4f 91       	pop	r20
     89c:	3f 91       	pop	r19
     89e:	2f 91       	pop	r18
     8a0:	1f 91       	pop	r17
     8a2:	0f 91       	pop	r16
     8a4:	ff 90       	pop	r15
     8a6:	ef 90       	pop	r14
     8a8:	df 90       	pop	r13
     8aa:	cf 90       	pop	r12
     8ac:	bf 90       	pop	r11
     8ae:	af 90       	pop	r10
     8b0:	9f 90       	pop	r9
     8b2:	8f 90       	pop	r8
     8b4:	7f 90       	pop	r7
     8b6:	6f 90       	pop	r6
     8b8:	5f 90       	pop	r5
     8ba:	4f 90       	pop	r4
     8bc:	3f 90       	pop	r3
     8be:	2f 90       	pop	r2
     8c0:	1f 90       	pop	r1
     8c2:	0f 90       	pop	r0
     8c4:	0c be       	out	0x3c, r0	; 60
     8c6:	0f 90       	pop	r0
     8c8:	0b be       	out	0x3b, r0	; 59
     8ca:	0f 90       	pop	r0
     8cc:	0f be       	out	0x3f, r0	; 63
     8ce:	0f 90       	pop	r0
     8d0:	08 95       	ret

000008d2 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     8d2:	0f 92       	push	r0
     8d4:	0f b6       	in	r0, 0x3f	; 63
     8d6:	f8 94       	cli
     8d8:	0f 92       	push	r0
     8da:	0b b6       	in	r0, 0x3b	; 59
     8dc:	0f 92       	push	r0
     8de:	0c b6       	in	r0, 0x3c	; 60
     8e0:	0f 92       	push	r0
     8e2:	1f 92       	push	r1
     8e4:	11 24       	eor	r1, r1
     8e6:	2f 92       	push	r2
     8e8:	3f 92       	push	r3
     8ea:	4f 92       	push	r4
     8ec:	5f 92       	push	r5
     8ee:	6f 92       	push	r6
     8f0:	7f 92       	push	r7
     8f2:	8f 92       	push	r8
     8f4:	9f 92       	push	r9
     8f6:	af 92       	push	r10
     8f8:	bf 92       	push	r11
     8fa:	cf 92       	push	r12
     8fc:	df 92       	push	r13
     8fe:	ef 92       	push	r14
     900:	ff 92       	push	r15
     902:	0f 93       	push	r16
     904:	1f 93       	push	r17
     906:	2f 93       	push	r18
     908:	3f 93       	push	r19
     90a:	4f 93       	push	r20
     90c:	5f 93       	push	r21
     90e:	6f 93       	push	r22
     910:	7f 93       	push	r23
     912:	8f 93       	push	r24
     914:	9f 93       	push	r25
     916:	af 93       	push	r26
     918:	bf 93       	push	r27
     91a:	cf 93       	push	r28
     91c:	df 93       	push	r29
     91e:	ef 93       	push	r30
     920:	ff 93       	push	r31
     922:	a0 91 5d 11 	lds	r26, 0x115D	; 0x80115d <pxCurrentTCB>
     926:	b0 91 5e 11 	lds	r27, 0x115E	; 0x80115e <pxCurrentTCB+0x1>
     92a:	0d b6       	in	r0, 0x3d	; 61
     92c:	0d 92       	st	X+, r0
     92e:	0e b6       	in	r0, 0x3e	; 62
     930:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
     932:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
     934:	60 d6       	rcall	.+3264   	; 0x15f6 <xTaskIncrementTick>
     936:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     938:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
     93c:	a0 91 5d 11 	lds	r26, 0x115D	; 0x80115d <pxCurrentTCB>
     940:	b0 91 5e 11 	lds	r27, 0x115E	; 0x80115e <pxCurrentTCB+0x1>
     944:	cd 91       	ld	r28, X+
     946:	cd bf       	out	0x3d, r28	; 61
     948:	dd 91       	ld	r29, X+
     94a:	de bf       	out	0x3e, r29	; 62
     94c:	ff 91       	pop	r31
     94e:	ef 91       	pop	r30
     950:	df 91       	pop	r29
     952:	cf 91       	pop	r28
     954:	bf 91       	pop	r27
     956:	af 91       	pop	r26
     958:	9f 91       	pop	r25
     95a:	8f 91       	pop	r24
     95c:	7f 91       	pop	r23
     95e:	6f 91       	pop	r22
     960:	5f 91       	pop	r21
     962:	4f 91       	pop	r20
     964:	3f 91       	pop	r19
     966:	2f 91       	pop	r18
     968:	1f 91       	pop	r17
     96a:	0f 91       	pop	r16
     96c:	ff 90       	pop	r15
     96e:	ef 90       	pop	r14
     970:	df 90       	pop	r13
     972:	cf 90       	pop	r12
     974:	bf 90       	pop	r11
     976:	af 90       	pop	r10
     978:	9f 90       	pop	r9
     97a:	8f 90       	pop	r8
     97c:	7f 90       	pop	r7
     97e:	6f 90       	pop	r6
     980:	5f 90       	pop	r5
     982:	4f 90       	pop	r4
     984:	3f 90       	pop	r3
     986:	2f 90       	pop	r2
     988:	1f 90       	pop	r1
     98a:	0f 90       	pop	r0
     98c:	0c be       	out	0x3c, r0	; 60
     98e:	0f 90       	pop	r0
     990:	0b be       	out	0x3b, r0	; 59
     992:	0f 90       	pop	r0
     994:	0f be       	out	0x3f, r0	; 63
     996:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     998:	08 95       	ret

0000099a <__vector_12>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
     99a:	9b df       	rcall	.-202    	; 0x8d2 <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
     99c:	18 95       	reti

0000099e <prvGetDisinheritPriorityAfterTimeout>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     99e:	dc 01       	movw	r26, r24
     9a0:	53 96       	adiw	r26, 0x13	; 19
     9a2:	2c 91       	ld	r18, X
     9a4:	53 97       	sbiw	r26, 0x13	; 19
     9a6:	22 23       	and	r18, r18
     9a8:	41 f0       	breq	.+16     	; 0x9ba <prvGetDisinheritPriorityAfterTimeout+0x1c>
     9aa:	5a 96       	adiw	r26, 0x1a	; 26
     9ac:	ed 91       	ld	r30, X+
     9ae:	fc 91       	ld	r31, X
     9b0:	5b 97       	sbiw	r26, 0x1b	; 27
     9b2:	90 81       	ld	r25, Z
     9b4:	8a e0       	ldi	r24, 0x0A	; 10
     9b6:	89 1b       	sub	r24, r25
     9b8:	08 95       	ret
     9ba:	80 e0       	ldi	r24, 0x00	; 0
     9bc:	08 95       	ret

000009be <prvIsQueueEmpty>:
     9be:	0f b6       	in	r0, 0x3f	; 63
     9c0:	f8 94       	cli
     9c2:	0f 92       	push	r0
     9c4:	fc 01       	movw	r30, r24
     9c6:	86 8d       	ldd	r24, Z+30	; 0x1e
     9c8:	81 11       	cpse	r24, r1
     9ca:	02 c0       	rjmp	.+4      	; 0x9d0 <prvIsQueueEmpty+0x12>
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	01 c0       	rjmp	.+2      	; 0x9d2 <prvIsQueueEmpty+0x14>
     9d0:	80 e0       	ldi	r24, 0x00	; 0
     9d2:	0f 90       	pop	r0
     9d4:	0f be       	out	0x3f, r0	; 63
     9d6:	08 95       	ret

000009d8 <prvIsQueueFull>:
     9d8:	0f b6       	in	r0, 0x3f	; 63
     9da:	f8 94       	cli
     9dc:	0f 92       	push	r0
     9de:	fc 01       	movw	r30, r24
     9e0:	26 8d       	ldd	r18, Z+30	; 0x1e
     9e2:	87 8d       	ldd	r24, Z+31	; 0x1f
     9e4:	28 13       	cpse	r18, r24
     9e6:	02 c0       	rjmp	.+4      	; 0x9ec <prvIsQueueFull+0x14>
     9e8:	81 e0       	ldi	r24, 0x01	; 1
     9ea:	01 c0       	rjmp	.+2      	; 0x9ee <prvIsQueueFull+0x16>
     9ec:	80 e0       	ldi	r24, 0x00	; 0
     9ee:	0f 90       	pop	r0
     9f0:	0f be       	out	0x3f, r0	; 63
     9f2:	08 95       	ret

000009f4 <prvCopyDataToQueue>:
     9f4:	0f 93       	push	r16
     9f6:	1f 93       	push	r17
     9f8:	cf 93       	push	r28
     9fa:	df 93       	push	r29
     9fc:	ec 01       	movw	r28, r24
     9fe:	04 2f       	mov	r16, r20
     a00:	1e 8d       	ldd	r17, Y+30	; 0x1e
     a02:	48 a1       	ldd	r20, Y+32	; 0x20
     a04:	41 11       	cpse	r20, r1
     a06:	0c c0       	rjmp	.+24     	; 0xa20 <prvCopyDataToQueue+0x2c>
     a08:	88 81       	ld	r24, Y
     a0a:	99 81       	ldd	r25, Y+1	; 0x01
     a0c:	89 2b       	or	r24, r25
     a0e:	09 f0       	breq	.+2      	; 0xa12 <prvCopyDataToQueue+0x1e>
     a10:	42 c0       	rjmp	.+132    	; 0xa96 <prvCopyDataToQueue+0xa2>
     a12:	8c 81       	ldd	r24, Y+4	; 0x04
     a14:	9d 81       	ldd	r25, Y+5	; 0x05
     a16:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <xTaskPriorityDisinherit>
     a1a:	1d 82       	std	Y+5, r1	; 0x05
     a1c:	1c 82       	std	Y+4, r1	; 0x04
     a1e:	42 c0       	rjmp	.+132    	; 0xaa4 <prvCopyDataToQueue+0xb0>
     a20:	01 11       	cpse	r16, r1
     a22:	17 c0       	rjmp	.+46     	; 0xa52 <prvCopyDataToQueue+0x5e>
     a24:	50 e0       	ldi	r21, 0x00	; 0
     a26:	8a 81       	ldd	r24, Y+2	; 0x02
     a28:	9b 81       	ldd	r25, Y+3	; 0x03
     a2a:	0e 94 00 1c 	call	0x3800	; 0x3800 <memcpy>
     a2e:	28 a1       	ldd	r18, Y+32	; 0x20
     a30:	8a 81       	ldd	r24, Y+2	; 0x02
     a32:	9b 81       	ldd	r25, Y+3	; 0x03
     a34:	82 0f       	add	r24, r18
     a36:	91 1d       	adc	r25, r1
     a38:	9b 83       	std	Y+3, r25	; 0x03
     a3a:	8a 83       	std	Y+2, r24	; 0x02
     a3c:	2c 81       	ldd	r18, Y+4	; 0x04
     a3e:	3d 81       	ldd	r19, Y+5	; 0x05
     a40:	82 17       	cp	r24, r18
     a42:	93 07       	cpc	r25, r19
     a44:	50 f1       	brcs	.+84     	; 0xa9a <prvCopyDataToQueue+0xa6>
     a46:	88 81       	ld	r24, Y
     a48:	99 81       	ldd	r25, Y+1	; 0x01
     a4a:	9b 83       	std	Y+3, r25	; 0x03
     a4c:	8a 83       	std	Y+2, r24	; 0x02
     a4e:	80 e0       	ldi	r24, 0x00	; 0
     a50:	29 c0       	rjmp	.+82     	; 0xaa4 <prvCopyDataToQueue+0xb0>
     a52:	50 e0       	ldi	r21, 0x00	; 0
     a54:	8e 81       	ldd	r24, Y+6	; 0x06
     a56:	9f 81       	ldd	r25, Y+7	; 0x07
     a58:	0e 94 00 1c 	call	0x3800	; 0x3800 <memcpy>
     a5c:	88 a1       	ldd	r24, Y+32	; 0x20
     a5e:	90 e0       	ldi	r25, 0x00	; 0
     a60:	91 95       	neg	r25
     a62:	81 95       	neg	r24
     a64:	91 09       	sbc	r25, r1
     a66:	2e 81       	ldd	r18, Y+6	; 0x06
     a68:	3f 81       	ldd	r19, Y+7	; 0x07
     a6a:	28 0f       	add	r18, r24
     a6c:	39 1f       	adc	r19, r25
     a6e:	3f 83       	std	Y+7, r19	; 0x07
     a70:	2e 83       	std	Y+6, r18	; 0x06
     a72:	48 81       	ld	r20, Y
     a74:	59 81       	ldd	r21, Y+1	; 0x01
     a76:	24 17       	cp	r18, r20
     a78:	35 07       	cpc	r19, r21
     a7a:	30 f4       	brcc	.+12     	; 0xa88 <prvCopyDataToQueue+0x94>
     a7c:	2c 81       	ldd	r18, Y+4	; 0x04
     a7e:	3d 81       	ldd	r19, Y+5	; 0x05
     a80:	82 0f       	add	r24, r18
     a82:	93 1f       	adc	r25, r19
     a84:	9f 83       	std	Y+7, r25	; 0x07
     a86:	8e 83       	std	Y+6, r24	; 0x06
     a88:	02 30       	cpi	r16, 0x02	; 2
     a8a:	49 f4       	brne	.+18     	; 0xa9e <prvCopyDataToQueue+0xaa>
     a8c:	11 23       	and	r17, r17
     a8e:	49 f0       	breq	.+18     	; 0xaa2 <prvCopyDataToQueue+0xae>
     a90:	11 50       	subi	r17, 0x01	; 1
     a92:	80 e0       	ldi	r24, 0x00	; 0
     a94:	07 c0       	rjmp	.+14     	; 0xaa4 <prvCopyDataToQueue+0xb0>
     a96:	80 e0       	ldi	r24, 0x00	; 0
     a98:	05 c0       	rjmp	.+10     	; 0xaa4 <prvCopyDataToQueue+0xb0>
     a9a:	80 e0       	ldi	r24, 0x00	; 0
     a9c:	03 c0       	rjmp	.+6      	; 0xaa4 <prvCopyDataToQueue+0xb0>
     a9e:	80 e0       	ldi	r24, 0x00	; 0
     aa0:	01 c0       	rjmp	.+2      	; 0xaa4 <prvCopyDataToQueue+0xb0>
     aa2:	80 e0       	ldi	r24, 0x00	; 0
     aa4:	1f 5f       	subi	r17, 0xFF	; 255
     aa6:	1e 8f       	std	Y+30, r17	; 0x1e
     aa8:	df 91       	pop	r29
     aaa:	cf 91       	pop	r28
     aac:	1f 91       	pop	r17
     aae:	0f 91       	pop	r16
     ab0:	08 95       	ret

00000ab2 <prvCopyDataFromQueue>:
     ab2:	fc 01       	movw	r30, r24
     ab4:	40 a1       	ldd	r20, Z+32	; 0x20
     ab6:	44 23       	and	r20, r20
     ab8:	a9 f0       	breq	.+42     	; 0xae4 <prvCopyDataFromQueue+0x32>
     aba:	50 e0       	ldi	r21, 0x00	; 0
     abc:	26 81       	ldd	r18, Z+6	; 0x06
     abe:	37 81       	ldd	r19, Z+7	; 0x07
     ac0:	24 0f       	add	r18, r20
     ac2:	35 1f       	adc	r19, r21
     ac4:	37 83       	std	Z+7, r19	; 0x07
     ac6:	26 83       	std	Z+6, r18	; 0x06
     ac8:	84 81       	ldd	r24, Z+4	; 0x04
     aca:	95 81       	ldd	r25, Z+5	; 0x05
     acc:	28 17       	cp	r18, r24
     ace:	39 07       	cpc	r19, r25
     ad0:	20 f0       	brcs	.+8      	; 0xada <prvCopyDataFromQueue+0x28>
     ad2:	80 81       	ld	r24, Z
     ad4:	91 81       	ldd	r25, Z+1	; 0x01
     ad6:	97 83       	std	Z+7, r25	; 0x07
     ad8:	86 83       	std	Z+6, r24	; 0x06
     ada:	cb 01       	movw	r24, r22
     adc:	66 81       	ldd	r22, Z+6	; 0x06
     ade:	77 81       	ldd	r23, Z+7	; 0x07
     ae0:	0c 94 00 1c 	jmp	0x3800	; 0x3800 <memcpy>
     ae4:	08 95       	ret

00000ae6 <prvUnlockQueue>:
     ae6:	1f 93       	push	r17
     ae8:	cf 93       	push	r28
     aea:	df 93       	push	r29
     aec:	ec 01       	movw	r28, r24
     aee:	0f b6       	in	r0, 0x3f	; 63
     af0:	f8 94       	cli
     af2:	0f 92       	push	r0
     af4:	1a a1       	ldd	r17, Y+34	; 0x22
     af6:	0b c0       	rjmp	.+22     	; 0xb0e <prvUnlockQueue+0x28>
     af8:	8b 89       	ldd	r24, Y+19	; 0x13
     afa:	88 23       	and	r24, r24
     afc:	51 f0       	breq	.+20     	; 0xb12 <prvUnlockQueue+0x2c>
     afe:	ce 01       	movw	r24, r28
     b00:	43 96       	adiw	r24, 0x13	; 19
     b02:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <xTaskRemoveFromEventList>
     b06:	81 11       	cpse	r24, r1
     b08:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <vTaskMissedYield>
     b0c:	11 50       	subi	r17, 0x01	; 1
     b0e:	11 16       	cp	r1, r17
     b10:	9c f3       	brlt	.-26     	; 0xaf8 <prvUnlockQueue+0x12>
     b12:	8f ef       	ldi	r24, 0xFF	; 255
     b14:	8a a3       	std	Y+34, r24	; 0x22
     b16:	0f 90       	pop	r0
     b18:	0f be       	out	0x3f, r0	; 63
     b1a:	0f b6       	in	r0, 0x3f	; 63
     b1c:	f8 94       	cli
     b1e:	0f 92       	push	r0
     b20:	19 a1       	ldd	r17, Y+33	; 0x21
     b22:	0b c0       	rjmp	.+22     	; 0xb3a <prvUnlockQueue+0x54>
     b24:	88 85       	ldd	r24, Y+8	; 0x08
     b26:	88 23       	and	r24, r24
     b28:	51 f0       	breq	.+20     	; 0xb3e <prvUnlockQueue+0x58>
     b2a:	ce 01       	movw	r24, r28
     b2c:	08 96       	adiw	r24, 0x08	; 8
     b2e:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <xTaskRemoveFromEventList>
     b32:	81 11       	cpse	r24, r1
     b34:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <vTaskMissedYield>
     b38:	11 50       	subi	r17, 0x01	; 1
     b3a:	11 16       	cp	r1, r17
     b3c:	9c f3       	brlt	.-26     	; 0xb24 <prvUnlockQueue+0x3e>
     b3e:	8f ef       	ldi	r24, 0xFF	; 255
     b40:	89 a3       	std	Y+33, r24	; 0x21
     b42:	0f 90       	pop	r0
     b44:	0f be       	out	0x3f, r0	; 63
     b46:	df 91       	pop	r29
     b48:	cf 91       	pop	r28
     b4a:	1f 91       	pop	r17
     b4c:	08 95       	ret

00000b4e <xQueueGenericReset>:
     b4e:	cf 93       	push	r28
     b50:	df 93       	push	r29
     b52:	ec 01       	movw	r28, r24
     b54:	0f b6       	in	r0, 0x3f	; 63
     b56:	f8 94       	cli
     b58:	0f 92       	push	r0
     b5a:	e8 81       	ld	r30, Y
     b5c:	f9 81       	ldd	r31, Y+1	; 0x01
     b5e:	8f 8d       	ldd	r24, Y+31	; 0x1f
     b60:	28 a1       	ldd	r18, Y+32	; 0x20
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	30 e0       	ldi	r19, 0x00	; 0
     b66:	82 9f       	mul	r24, r18
     b68:	a0 01       	movw	r20, r0
     b6a:	83 9f       	mul	r24, r19
     b6c:	50 0d       	add	r21, r0
     b6e:	92 9f       	mul	r25, r18
     b70:	50 0d       	add	r21, r0
     b72:	11 24       	eor	r1, r1
     b74:	4e 0f       	add	r20, r30
     b76:	5f 1f       	adc	r21, r31
     b78:	5d 83       	std	Y+5, r21	; 0x05
     b7a:	4c 83       	std	Y+4, r20	; 0x04
     b7c:	1e 8e       	std	Y+30, r1	; 0x1e
     b7e:	fb 83       	std	Y+3, r31	; 0x03
     b80:	ea 83       	std	Y+2, r30	; 0x02
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	28 9f       	mul	r18, r24
     b86:	a0 01       	movw	r20, r0
     b88:	29 9f       	mul	r18, r25
     b8a:	50 0d       	add	r21, r0
     b8c:	38 9f       	mul	r19, r24
     b8e:	50 0d       	add	r21, r0
     b90:	11 24       	eor	r1, r1
     b92:	cf 01       	movw	r24, r30
     b94:	84 0f       	add	r24, r20
     b96:	95 1f       	adc	r25, r21
     b98:	9f 83       	std	Y+7, r25	; 0x07
     b9a:	8e 83       	std	Y+6, r24	; 0x06
     b9c:	8f ef       	ldi	r24, 0xFF	; 255
     b9e:	89 a3       	std	Y+33, r24	; 0x21
     ba0:	8a a3       	std	Y+34, r24	; 0x22
     ba2:	61 11       	cpse	r22, r1
     ba4:	0b c0       	rjmp	.+22     	; 0xbbc <xQueueGenericReset+0x6e>
     ba6:	88 85       	ldd	r24, Y+8	; 0x08
     ba8:	88 23       	and	r24, r24
     baa:	71 f0       	breq	.+28     	; 0xbc8 <xQueueGenericReset+0x7a>
     bac:	ce 01       	movw	r24, r28
     bae:	08 96       	adiw	r24, 0x08	; 8
     bb0:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <xTaskRemoveFromEventList>
     bb4:	88 23       	and	r24, r24
     bb6:	41 f0       	breq	.+16     	; 0xbc8 <xQueueGenericReset+0x7a>
     bb8:	2b de       	rcall	.-938    	; 0x810 <vPortYield>
     bba:	06 c0       	rjmp	.+12     	; 0xbc8 <xQueueGenericReset+0x7a>
     bbc:	ce 01       	movw	r24, r28
     bbe:	08 96       	adiw	r24, 0x08	; 8
     bc0:	59 dd       	rcall	.-1358   	; 0x674 <vListInitialise>
     bc2:	ce 01       	movw	r24, r28
     bc4:	43 96       	adiw	r24, 0x13	; 19
     bc6:	56 dd       	rcall	.-1364   	; 0x674 <vListInitialise>
     bc8:	0f 90       	pop	r0
     bca:	0f be       	out	0x3f, r0	; 63
     bcc:	81 e0       	ldi	r24, 0x01	; 1
     bce:	df 91       	pop	r29
     bd0:	cf 91       	pop	r28
     bd2:	08 95       	ret

00000bd4 <prvInitialiseNewQueue>:
     bd4:	0f 93       	push	r16
     bd6:	1f 93       	push	r17
     bd8:	f8 01       	movw	r30, r16
     bda:	61 11       	cpse	r22, r1
     bdc:	03 c0       	rjmp	.+6      	; 0xbe4 <prvInitialiseNewQueue+0x10>
     bde:	11 83       	std	Z+1, r17	; 0x01
     be0:	00 83       	st	Z, r16
     be2:	02 c0       	rjmp	.+4      	; 0xbe8 <prvInitialiseNewQueue+0x14>
     be4:	51 83       	std	Z+1, r21	; 0x01
     be6:	40 83       	st	Z, r20
     be8:	87 8f       	std	Z+31, r24	; 0x1f
     bea:	60 a3       	std	Z+32, r22	; 0x20
     bec:	61 e0       	ldi	r22, 0x01	; 1
     bee:	cf 01       	movw	r24, r30
     bf0:	ae df       	rcall	.-164    	; 0xb4e <xQueueGenericReset>
     bf2:	1f 91       	pop	r17
     bf4:	0f 91       	pop	r16
     bf6:	08 95       	ret

00000bf8 <xQueueGenericCreate>:
     bf8:	df 92       	push	r13
     bfa:	ef 92       	push	r14
     bfc:	ff 92       	push	r15
     bfe:	0f 93       	push	r16
     c00:	1f 93       	push	r17
     c02:	cf 93       	push	r28
     c04:	df 93       	push	r29
     c06:	f8 2e       	mov	r15, r24
     c08:	e6 2e       	mov	r14, r22
     c0a:	d4 2e       	mov	r13, r20
     c0c:	86 9f       	mul	r24, r22
     c0e:	c0 01       	movw	r24, r0
     c10:	11 24       	eor	r1, r1
     c12:	83 96       	adiw	r24, 0x23	; 35
     c14:	4a dc       	rcall	.-1900   	; 0x4aa <pvPortMalloc>
     c16:	ec 01       	movw	r28, r24
     c18:	00 97       	sbiw	r24, 0x00	; 0
     c1a:	41 f0       	breq	.+16     	; 0xc2c <xQueueGenericCreate+0x34>
     c1c:	8c 01       	movw	r16, r24
     c1e:	2d 2d       	mov	r18, r13
     c20:	ac 01       	movw	r20, r24
     c22:	4d 5d       	subi	r20, 0xDD	; 221
     c24:	5f 4f       	sbci	r21, 0xFF	; 255
     c26:	6e 2d       	mov	r22, r14
     c28:	8f 2d       	mov	r24, r15
     c2a:	d4 df       	rcall	.-88     	; 0xbd4 <prvInitialiseNewQueue>
     c2c:	ce 01       	movw	r24, r28
     c2e:	df 91       	pop	r29
     c30:	cf 91       	pop	r28
     c32:	1f 91       	pop	r17
     c34:	0f 91       	pop	r16
     c36:	ff 90       	pop	r15
     c38:	ef 90       	pop	r14
     c3a:	df 90       	pop	r13
     c3c:	08 95       	ret

00000c3e <xQueueGenericSend>:
     c3e:	cf 92       	push	r12
     c40:	df 92       	push	r13
     c42:	ef 92       	push	r14
     c44:	ff 92       	push	r15
     c46:	0f 93       	push	r16
     c48:	1f 93       	push	r17
     c4a:	cf 93       	push	r28
     c4c:	df 93       	push	r29
     c4e:	cd b7       	in	r28, 0x3d	; 61
     c50:	de b7       	in	r29, 0x3e	; 62
     c52:	29 97       	sbiw	r28, 0x09	; 9
     c54:	0f b6       	in	r0, 0x3f	; 63
     c56:	f8 94       	cli
     c58:	de bf       	out	0x3e, r29	; 62
     c5a:	0f be       	out	0x3f, r0	; 63
     c5c:	cd bf       	out	0x3d, r28	; 61
     c5e:	7c 01       	movw	r14, r24
     c60:	6b 01       	movw	r12, r22
     c62:	2e 83       	std	Y+6, r18	; 0x06
     c64:	3f 83       	std	Y+7, r19	; 0x07
     c66:	48 87       	std	Y+8, r20	; 0x08
     c68:	59 87       	std	Y+9, r21	; 0x09
     c6a:	10 e0       	ldi	r17, 0x00	; 0
     c6c:	0f b6       	in	r0, 0x3f	; 63
     c6e:	f8 94       	cli
     c70:	0f 92       	push	r0
     c72:	f7 01       	movw	r30, r14
     c74:	96 8d       	ldd	r25, Z+30	; 0x1e
     c76:	87 8d       	ldd	r24, Z+31	; 0x1f
     c78:	98 17       	cp	r25, r24
     c7a:	10 f0       	brcs	.+4      	; 0xc80 <xQueueGenericSend+0x42>
     c7c:	02 30       	cpi	r16, 0x02	; 2
     c7e:	a9 f4       	brne	.+42     	; 0xcaa <xQueueGenericSend+0x6c>
     c80:	40 2f       	mov	r20, r16
     c82:	b6 01       	movw	r22, r12
     c84:	c7 01       	movw	r24, r14
     c86:	b6 de       	rcall	.-660    	; 0x9f4 <prvCopyDataToQueue>
     c88:	f7 01       	movw	r30, r14
     c8a:	93 89       	ldd	r25, Z+19	; 0x13
     c8c:	99 23       	and	r25, r25
     c8e:	39 f0       	breq	.+14     	; 0xc9e <xQueueGenericSend+0x60>
     c90:	c7 01       	movw	r24, r14
     c92:	43 96       	adiw	r24, 0x13	; 19
     c94:	ad d7       	rcall	.+3930   	; 0x1bf0 <xTaskRemoveFromEventList>
     c96:	88 23       	and	r24, r24
     c98:	21 f0       	breq	.+8      	; 0xca2 <xQueueGenericSend+0x64>
     c9a:	ba dd       	rcall	.-1164   	; 0x810 <vPortYield>
     c9c:	02 c0       	rjmp	.+4      	; 0xca2 <xQueueGenericSend+0x64>
     c9e:	81 11       	cpse	r24, r1
     ca0:	b7 dd       	rcall	.-1170   	; 0x810 <vPortYield>
     ca2:	0f 90       	pop	r0
     ca4:	0f be       	out	0x3f, r0	; 63
     ca6:	81 e0       	ldi	r24, 0x01	; 1
     ca8:	48 c0       	rjmp	.+144    	; 0xd3a <xQueueGenericSend+0xfc>
     caa:	8e 81       	ldd	r24, Y+6	; 0x06
     cac:	9f 81       	ldd	r25, Y+7	; 0x07
     cae:	a8 85       	ldd	r26, Y+8	; 0x08
     cb0:	b9 85       	ldd	r27, Y+9	; 0x09
     cb2:	89 2b       	or	r24, r25
     cb4:	8a 2b       	or	r24, r26
     cb6:	8b 2b       	or	r24, r27
     cb8:	21 f4       	brne	.+8      	; 0xcc2 <xQueueGenericSend+0x84>
     cba:	0f 90       	pop	r0
     cbc:	0f be       	out	0x3f, r0	; 63
     cbe:	80 e0       	ldi	r24, 0x00	; 0
     cc0:	3c c0       	rjmp	.+120    	; 0xd3a <xQueueGenericSend+0xfc>
     cc2:	11 11       	cpse	r17, r1
     cc4:	05 c0       	rjmp	.+10     	; 0xcd0 <xQueueGenericSend+0x92>
     cc6:	ce 01       	movw	r24, r28
     cc8:	01 96       	adiw	r24, 0x01	; 1
     cca:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <vTaskInternalSetTimeOutState>
     cce:	11 e0       	ldi	r17, 0x01	; 1
     cd0:	0f 90       	pop	r0
     cd2:	0f be       	out	0x3f, r0	; 63
     cd4:	7c d4       	rcall	.+2296   	; 0x15ce <vTaskSuspendAll>
     cd6:	0f b6       	in	r0, 0x3f	; 63
     cd8:	f8 94       	cli
     cda:	0f 92       	push	r0
     cdc:	f7 01       	movw	r30, r14
     cde:	81 a1       	ldd	r24, Z+33	; 0x21
     ce0:	8f 3f       	cpi	r24, 0xFF	; 255
     ce2:	09 f4       	brne	.+2      	; 0xce6 <xQueueGenericSend+0xa8>
     ce4:	11 a2       	std	Z+33, r1	; 0x21
     ce6:	f7 01       	movw	r30, r14
     ce8:	82 a1       	ldd	r24, Z+34	; 0x22
     cea:	8f 3f       	cpi	r24, 0xFF	; 255
     cec:	09 f4       	brne	.+2      	; 0xcf0 <xQueueGenericSend+0xb2>
     cee:	12 a2       	std	Z+34, r1	; 0x22
     cf0:	0f 90       	pop	r0
     cf2:	0f be       	out	0x3f, r0	; 63
     cf4:	be 01       	movw	r22, r28
     cf6:	6a 5f       	subi	r22, 0xFA	; 250
     cf8:	7f 4f       	sbci	r23, 0xFF	; 255
     cfa:	ce 01       	movw	r24, r28
     cfc:	01 96       	adiw	r24, 0x01	; 1
     cfe:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <xTaskCheckForTimeOut>
     d02:	81 11       	cpse	r24, r1
     d04:	16 c0       	rjmp	.+44     	; 0xd32 <xQueueGenericSend+0xf4>
     d06:	c7 01       	movw	r24, r14
     d08:	67 de       	rcall	.-818    	; 0x9d8 <prvIsQueueFull>
     d0a:	88 23       	and	r24, r24
     d0c:	71 f0       	breq	.+28     	; 0xd2a <xQueueGenericSend+0xec>
     d0e:	4e 81       	ldd	r20, Y+6	; 0x06
     d10:	5f 81       	ldd	r21, Y+7	; 0x07
     d12:	68 85       	ldd	r22, Y+8	; 0x08
     d14:	79 85       	ldd	r23, Y+9	; 0x09
     d16:	c7 01       	movw	r24, r14
     d18:	08 96       	adiw	r24, 0x08	; 8
     d1a:	11 d7       	rcall	.+3618   	; 0x1b3e <vTaskPlaceOnEventList>
     d1c:	c7 01       	movw	r24, r14
     d1e:	e3 de       	rcall	.-570    	; 0xae6 <prvUnlockQueue>
     d20:	96 d5       	rcall	.+2860   	; 0x184e <xTaskResumeAll>
     d22:	81 11       	cpse	r24, r1
     d24:	a3 cf       	rjmp	.-186    	; 0xc6c <xQueueGenericSend+0x2e>
     d26:	74 dd       	rcall	.-1304   	; 0x810 <vPortYield>
     d28:	a1 cf       	rjmp	.-190    	; 0xc6c <xQueueGenericSend+0x2e>
     d2a:	c7 01       	movw	r24, r14
     d2c:	dc de       	rcall	.-584    	; 0xae6 <prvUnlockQueue>
     d2e:	8f d5       	rcall	.+2846   	; 0x184e <xTaskResumeAll>
     d30:	9d cf       	rjmp	.-198    	; 0xc6c <xQueueGenericSend+0x2e>
     d32:	c7 01       	movw	r24, r14
     d34:	d8 de       	rcall	.-592    	; 0xae6 <prvUnlockQueue>
     d36:	8b d5       	rcall	.+2838   	; 0x184e <xTaskResumeAll>
     d38:	80 e0       	ldi	r24, 0x00	; 0
     d3a:	29 96       	adiw	r28, 0x09	; 9
     d3c:	0f b6       	in	r0, 0x3f	; 63
     d3e:	f8 94       	cli
     d40:	de bf       	out	0x3e, r29	; 62
     d42:	0f be       	out	0x3f, r0	; 63
     d44:	cd bf       	out	0x3d, r28	; 61
     d46:	df 91       	pop	r29
     d48:	cf 91       	pop	r28
     d4a:	1f 91       	pop	r17
     d4c:	0f 91       	pop	r16
     d4e:	ff 90       	pop	r15
     d50:	ef 90       	pop	r14
     d52:	df 90       	pop	r13
     d54:	cf 90       	pop	r12
     d56:	08 95       	ret

00000d58 <prvInitialiseMutex>:
     d58:	0f 93       	push	r16
     d5a:	00 97       	sbiw	r24, 0x00	; 0
     d5c:	69 f0       	breq	.+26     	; 0xd78 <prvInitialiseMutex+0x20>
     d5e:	fc 01       	movw	r30, r24
     d60:	15 82       	std	Z+5, r1	; 0x05
     d62:	14 82       	std	Z+4, r1	; 0x04
     d64:	11 82       	std	Z+1, r1	; 0x01
     d66:	10 82       	st	Z, r1
     d68:	16 82       	std	Z+6, r1	; 0x06
     d6a:	00 e0       	ldi	r16, 0x00	; 0
     d6c:	20 e0       	ldi	r18, 0x00	; 0
     d6e:	30 e0       	ldi	r19, 0x00	; 0
     d70:	a9 01       	movw	r20, r18
     d72:	60 e0       	ldi	r22, 0x00	; 0
     d74:	70 e0       	ldi	r23, 0x00	; 0
     d76:	63 df       	rcall	.-314    	; 0xc3e <xQueueGenericSend>
     d78:	0f 91       	pop	r16
     d7a:	08 95       	ret

00000d7c <xQueueCreateMutex>:
     d7c:	cf 93       	push	r28
     d7e:	df 93       	push	r29
     d80:	48 2f       	mov	r20, r24
     d82:	60 e0       	ldi	r22, 0x00	; 0
     d84:	81 e0       	ldi	r24, 0x01	; 1
     d86:	38 df       	rcall	.-400    	; 0xbf8 <xQueueGenericCreate>
     d88:	ec 01       	movw	r28, r24
     d8a:	e6 df       	rcall	.-52     	; 0xd58 <prvInitialiseMutex>
     d8c:	ce 01       	movw	r24, r28
     d8e:	df 91       	pop	r29
     d90:	cf 91       	pop	r28
     d92:	08 95       	ret

00000d94 <xQueueGenericSendFromISR>:
     d94:	ef 92       	push	r14
     d96:	ff 92       	push	r15
     d98:	0f 93       	push	r16
     d9a:	1f 93       	push	r17
     d9c:	cf 93       	push	r28
     d9e:	df 93       	push	r29
     da0:	8a 01       	movw	r16, r20
     da2:	fc 01       	movw	r30, r24
     da4:	56 8d       	ldd	r21, Z+30	; 0x1e
     da6:	37 8d       	ldd	r19, Z+31	; 0x1f
     da8:	53 17       	cp	r21, r19
     daa:	10 f0       	brcs	.+4      	; 0xdb0 <xQueueGenericSendFromISR+0x1c>
     dac:	22 30       	cpi	r18, 0x02	; 2
     dae:	f1 f4       	brne	.+60     	; 0xdec <xQueueGenericSendFromISR+0x58>
     db0:	42 2f       	mov	r20, r18
     db2:	78 01       	movw	r14, r16
     db4:	ec 01       	movw	r28, r24
     db6:	1a a1       	ldd	r17, Y+34	; 0x22
     db8:	8e 8d       	ldd	r24, Y+30	; 0x1e
     dba:	ce 01       	movw	r24, r28
     dbc:	1b de       	rcall	.-970    	; 0x9f4 <prvCopyDataToQueue>
     dbe:	1f 3f       	cpi	r17, 0xFF	; 255
     dc0:	79 f4       	brne	.+30     	; 0xde0 <xQueueGenericSendFromISR+0x4c>
     dc2:	8b 89       	ldd	r24, Y+19	; 0x13
     dc4:	88 23       	and	r24, r24
     dc6:	a1 f0       	breq	.+40     	; 0xdf0 <xQueueGenericSendFromISR+0x5c>
     dc8:	ce 01       	movw	r24, r28
     dca:	43 96       	adiw	r24, 0x13	; 19
     dcc:	11 d7       	rcall	.+3618   	; 0x1bf0 <xTaskRemoveFromEventList>
     dce:	88 23       	and	r24, r24
     dd0:	89 f0       	breq	.+34     	; 0xdf4 <xQueueGenericSendFromISR+0x60>
     dd2:	e1 14       	cp	r14, r1
     dd4:	f1 04       	cpc	r15, r1
     dd6:	81 f0       	breq	.+32     	; 0xdf8 <xQueueGenericSendFromISR+0x64>
     dd8:	81 e0       	ldi	r24, 0x01	; 1
     dda:	f7 01       	movw	r30, r14
     ddc:	80 83       	st	Z, r24
     dde:	0d c0       	rjmp	.+26     	; 0xdfa <xQueueGenericSendFromISR+0x66>
     de0:	ff 24       	eor	r15, r15
     de2:	f3 94       	inc	r15
     de4:	f1 0e       	add	r15, r17
     de6:	fa a2       	std	Y+34, r15	; 0x22
     de8:	81 e0       	ldi	r24, 0x01	; 1
     dea:	07 c0       	rjmp	.+14     	; 0xdfa <xQueueGenericSendFromISR+0x66>
     dec:	80 e0       	ldi	r24, 0x00	; 0
     dee:	05 c0       	rjmp	.+10     	; 0xdfa <xQueueGenericSendFromISR+0x66>
     df0:	81 e0       	ldi	r24, 0x01	; 1
     df2:	03 c0       	rjmp	.+6      	; 0xdfa <xQueueGenericSendFromISR+0x66>
     df4:	81 e0       	ldi	r24, 0x01	; 1
     df6:	01 c0       	rjmp	.+2      	; 0xdfa <xQueueGenericSendFromISR+0x66>
     df8:	81 e0       	ldi	r24, 0x01	; 1
     dfa:	df 91       	pop	r29
     dfc:	cf 91       	pop	r28
     dfe:	1f 91       	pop	r17
     e00:	0f 91       	pop	r16
     e02:	ff 90       	pop	r15
     e04:	ef 90       	pop	r14
     e06:	08 95       	ret

00000e08 <xQueueReceive>:
     e08:	cf 92       	push	r12
     e0a:	df 92       	push	r13
     e0c:	ef 92       	push	r14
     e0e:	ff 92       	push	r15
     e10:	0f 93       	push	r16
     e12:	1f 93       	push	r17
     e14:	cf 93       	push	r28
     e16:	df 93       	push	r29
     e18:	cd b7       	in	r28, 0x3d	; 61
     e1a:	de b7       	in	r29, 0x3e	; 62
     e1c:	29 97       	sbiw	r28, 0x09	; 9
     e1e:	0f b6       	in	r0, 0x3f	; 63
     e20:	f8 94       	cli
     e22:	de bf       	out	0x3e, r29	; 62
     e24:	0f be       	out	0x3f, r0	; 63
     e26:	cd bf       	out	0x3d, r28	; 61
     e28:	8c 01       	movw	r16, r24
     e2a:	6b 01       	movw	r12, r22
     e2c:	2e 83       	std	Y+6, r18	; 0x06
     e2e:	3f 83       	std	Y+7, r19	; 0x07
     e30:	48 87       	std	Y+8, r20	; 0x08
     e32:	59 87       	std	Y+9, r21	; 0x09
     e34:	e1 2c       	mov	r14, r1
     e36:	0f b6       	in	r0, 0x3f	; 63
     e38:	f8 94       	cli
     e3a:	0f 92       	push	r0
     e3c:	f8 01       	movw	r30, r16
     e3e:	f6 8c       	ldd	r15, Z+30	; 0x1e
     e40:	ff 20       	and	r15, r15
     e42:	91 f0       	breq	.+36     	; 0xe68 <xQueueReceive+0x60>
     e44:	b6 01       	movw	r22, r12
     e46:	c8 01       	movw	r24, r16
     e48:	34 de       	rcall	.-920    	; 0xab2 <prvCopyDataFromQueue>
     e4a:	fa 94       	dec	r15
     e4c:	f8 01       	movw	r30, r16
     e4e:	f6 8e       	std	Z+30, r15	; 0x1e
     e50:	80 85       	ldd	r24, Z+8	; 0x08
     e52:	88 23       	and	r24, r24
     e54:	29 f0       	breq	.+10     	; 0xe60 <xQueueReceive+0x58>
     e56:	c8 01       	movw	r24, r16
     e58:	08 96       	adiw	r24, 0x08	; 8
     e5a:	ca d6       	rcall	.+3476   	; 0x1bf0 <xTaskRemoveFromEventList>
     e5c:	81 11       	cpse	r24, r1
     e5e:	d8 dc       	rcall	.-1616   	; 0x810 <vPortYield>
     e60:	0f 90       	pop	r0
     e62:	0f be       	out	0x3f, r0	; 63
     e64:	81 e0       	ldi	r24, 0x01	; 1
     e66:	4c c0       	rjmp	.+152    	; 0xf00 <xQueueReceive+0xf8>
     e68:	8e 81       	ldd	r24, Y+6	; 0x06
     e6a:	9f 81       	ldd	r25, Y+7	; 0x07
     e6c:	a8 85       	ldd	r26, Y+8	; 0x08
     e6e:	b9 85       	ldd	r27, Y+9	; 0x09
     e70:	89 2b       	or	r24, r25
     e72:	8a 2b       	or	r24, r26
     e74:	8b 2b       	or	r24, r27
     e76:	21 f4       	brne	.+8      	; 0xe80 <xQueueReceive+0x78>
     e78:	0f 90       	pop	r0
     e7a:	0f be       	out	0x3f, r0	; 63
     e7c:	80 e0       	ldi	r24, 0x00	; 0
     e7e:	40 c0       	rjmp	.+128    	; 0xf00 <xQueueReceive+0xf8>
     e80:	e1 10       	cpse	r14, r1
     e82:	05 c0       	rjmp	.+10     	; 0xe8e <xQueueReceive+0x86>
     e84:	ce 01       	movw	r24, r28
     e86:	01 96       	adiw	r24, 0x01	; 1
     e88:	62 d7       	rcall	.+3780   	; 0x1d4e <vTaskInternalSetTimeOutState>
     e8a:	ee 24       	eor	r14, r14
     e8c:	e3 94       	inc	r14
     e8e:	0f 90       	pop	r0
     e90:	0f be       	out	0x3f, r0	; 63
     e92:	9d d3       	rcall	.+1850   	; 0x15ce <vTaskSuspendAll>
     e94:	0f b6       	in	r0, 0x3f	; 63
     e96:	f8 94       	cli
     e98:	0f 92       	push	r0
     e9a:	f8 01       	movw	r30, r16
     e9c:	81 a1       	ldd	r24, Z+33	; 0x21
     e9e:	8f 3f       	cpi	r24, 0xFF	; 255
     ea0:	09 f4       	brne	.+2      	; 0xea4 <xQueueReceive+0x9c>
     ea2:	11 a2       	std	Z+33, r1	; 0x21
     ea4:	f8 01       	movw	r30, r16
     ea6:	82 a1       	ldd	r24, Z+34	; 0x22
     ea8:	8f 3f       	cpi	r24, 0xFF	; 255
     eaa:	09 f4       	brne	.+2      	; 0xeae <xQueueReceive+0xa6>
     eac:	12 a2       	std	Z+34, r1	; 0x22
     eae:	0f 90       	pop	r0
     eb0:	0f be       	out	0x3f, r0	; 63
     eb2:	be 01       	movw	r22, r28
     eb4:	6a 5f       	subi	r22, 0xFA	; 250
     eb6:	7f 4f       	sbci	r23, 0xFF	; 255
     eb8:	ce 01       	movw	r24, r28
     eba:	01 96       	adiw	r24, 0x01	; 1
     ebc:	59 d7       	rcall	.+3762   	; 0x1d70 <xTaskCheckForTimeOut>
     ebe:	81 11       	cpse	r24, r1
     ec0:	16 c0       	rjmp	.+44     	; 0xeee <xQueueReceive+0xe6>
     ec2:	c8 01       	movw	r24, r16
     ec4:	7c dd       	rcall	.-1288   	; 0x9be <prvIsQueueEmpty>
     ec6:	88 23       	and	r24, r24
     ec8:	71 f0       	breq	.+28     	; 0xee6 <xQueueReceive+0xde>
     eca:	4e 81       	ldd	r20, Y+6	; 0x06
     ecc:	5f 81       	ldd	r21, Y+7	; 0x07
     ece:	68 85       	ldd	r22, Y+8	; 0x08
     ed0:	79 85       	ldd	r23, Y+9	; 0x09
     ed2:	c8 01       	movw	r24, r16
     ed4:	43 96       	adiw	r24, 0x13	; 19
     ed6:	33 d6       	rcall	.+3174   	; 0x1b3e <vTaskPlaceOnEventList>
     ed8:	c8 01       	movw	r24, r16
     eda:	05 de       	rcall	.-1014   	; 0xae6 <prvUnlockQueue>
     edc:	b8 d4       	rcall	.+2416   	; 0x184e <xTaskResumeAll>
     ede:	81 11       	cpse	r24, r1
     ee0:	aa cf       	rjmp	.-172    	; 0xe36 <xQueueReceive+0x2e>
     ee2:	96 dc       	rcall	.-1748   	; 0x810 <vPortYield>
     ee4:	a8 cf       	rjmp	.-176    	; 0xe36 <xQueueReceive+0x2e>
     ee6:	c8 01       	movw	r24, r16
     ee8:	fe dd       	rcall	.-1028   	; 0xae6 <prvUnlockQueue>
     eea:	b1 d4       	rcall	.+2402   	; 0x184e <xTaskResumeAll>
     eec:	a4 cf       	rjmp	.-184    	; 0xe36 <xQueueReceive+0x2e>
     eee:	c8 01       	movw	r24, r16
     ef0:	fa dd       	rcall	.-1036   	; 0xae6 <prvUnlockQueue>
     ef2:	ad d4       	rcall	.+2394   	; 0x184e <xTaskResumeAll>
     ef4:	c8 01       	movw	r24, r16
     ef6:	63 dd       	rcall	.-1338   	; 0x9be <prvIsQueueEmpty>
     ef8:	88 23       	and	r24, r24
     efa:	09 f4       	brne	.+2      	; 0xefe <xQueueReceive+0xf6>
     efc:	9c cf       	rjmp	.-200    	; 0xe36 <xQueueReceive+0x2e>
     efe:	80 e0       	ldi	r24, 0x00	; 0
     f00:	29 96       	adiw	r28, 0x09	; 9
     f02:	0f b6       	in	r0, 0x3f	; 63
     f04:	f8 94       	cli
     f06:	de bf       	out	0x3e, r29	; 62
     f08:	0f be       	out	0x3f, r0	; 63
     f0a:	cd bf       	out	0x3d, r28	; 61
     f0c:	df 91       	pop	r29
     f0e:	cf 91       	pop	r28
     f10:	1f 91       	pop	r17
     f12:	0f 91       	pop	r16
     f14:	ff 90       	pop	r15
     f16:	ef 90       	pop	r14
     f18:	df 90       	pop	r13
     f1a:	cf 90       	pop	r12
     f1c:	08 95       	ret

00000f1e <xQueueSemaphoreTake>:
     f1e:	ef 92       	push	r14
     f20:	ff 92       	push	r15
     f22:	0f 93       	push	r16
     f24:	1f 93       	push	r17
     f26:	cf 93       	push	r28
     f28:	df 93       	push	r29
     f2a:	cd b7       	in	r28, 0x3d	; 61
     f2c:	de b7       	in	r29, 0x3e	; 62
     f2e:	29 97       	sbiw	r28, 0x09	; 9
     f30:	0f b6       	in	r0, 0x3f	; 63
     f32:	f8 94       	cli
     f34:	de bf       	out	0x3e, r29	; 62
     f36:	0f be       	out	0x3f, r0	; 63
     f38:	cd bf       	out	0x3d, r28	; 61
     f3a:	8c 01       	movw	r16, r24
     f3c:	4e 83       	std	Y+6, r20	; 0x06
     f3e:	5f 83       	std	Y+7, r21	; 0x07
     f40:	68 87       	std	Y+8, r22	; 0x08
     f42:	79 87       	std	Y+9, r23	; 0x09
     f44:	e1 2c       	mov	r14, r1
     f46:	f1 2c       	mov	r15, r1
     f48:	0f b6       	in	r0, 0x3f	; 63
     f4a:	f8 94       	cli
     f4c:	0f 92       	push	r0
     f4e:	f8 01       	movw	r30, r16
     f50:	86 8d       	ldd	r24, Z+30	; 0x1e
     f52:	88 23       	and	r24, r24
     f54:	c1 f0       	breq	.+48     	; 0xf86 <xQueueSemaphoreTake+0x68>
     f56:	81 50       	subi	r24, 0x01	; 1
     f58:	86 8f       	std	Z+30, r24	; 0x1e
     f5a:	80 81       	ld	r24, Z
     f5c:	91 81       	ldd	r25, Z+1	; 0x01
     f5e:	89 2b       	or	r24, r25
     f60:	29 f4       	brne	.+10     	; 0xf6c <xQueueSemaphoreTake+0x4e>
     f62:	0e 94 79 10 	call	0x20f2	; 0x20f2 <pvTaskIncrementMutexHeldCount>
     f66:	f8 01       	movw	r30, r16
     f68:	95 83       	std	Z+5, r25	; 0x05
     f6a:	84 83       	std	Z+4, r24	; 0x04
     f6c:	f8 01       	movw	r30, r16
     f6e:	80 85       	ldd	r24, Z+8	; 0x08
     f70:	88 23       	and	r24, r24
     f72:	29 f0       	breq	.+10     	; 0xf7e <xQueueSemaphoreTake+0x60>
     f74:	c8 01       	movw	r24, r16
     f76:	08 96       	adiw	r24, 0x08	; 8
     f78:	3b d6       	rcall	.+3190   	; 0x1bf0 <xTaskRemoveFromEventList>
     f7a:	81 11       	cpse	r24, r1
     f7c:	49 dc       	rcall	.-1902   	; 0x810 <vPortYield>
     f7e:	0f 90       	pop	r0
     f80:	0f be       	out	0x3f, r0	; 63
     f82:	81 e0       	ldi	r24, 0x01	; 1
     f84:	6a c0       	rjmp	.+212    	; 0x105a <__EEPROM_REGION_LENGTH__+0x5a>
     f86:	8e 81       	ldd	r24, Y+6	; 0x06
     f88:	9f 81       	ldd	r25, Y+7	; 0x07
     f8a:	a8 85       	ldd	r26, Y+8	; 0x08
     f8c:	b9 85       	ldd	r27, Y+9	; 0x09
     f8e:	89 2b       	or	r24, r25
     f90:	8a 2b       	or	r24, r26
     f92:	8b 2b       	or	r24, r27
     f94:	21 f4       	brne	.+8      	; 0xf9e <xQueueSemaphoreTake+0x80>
     f96:	0f 90       	pop	r0
     f98:	0f be       	out	0x3f, r0	; 63
     f9a:	80 e0       	ldi	r24, 0x00	; 0
     f9c:	5e c0       	rjmp	.+188    	; 0x105a <__EEPROM_REGION_LENGTH__+0x5a>
     f9e:	f1 10       	cpse	r15, r1
     fa0:	05 c0       	rjmp	.+10     	; 0xfac <xQueueSemaphoreTake+0x8e>
     fa2:	ce 01       	movw	r24, r28
     fa4:	01 96       	adiw	r24, 0x01	; 1
     fa6:	d3 d6       	rcall	.+3494   	; 0x1d4e <vTaskInternalSetTimeOutState>
     fa8:	ff 24       	eor	r15, r15
     faa:	f3 94       	inc	r15
     fac:	0f 90       	pop	r0
     fae:	0f be       	out	0x3f, r0	; 63
     fb0:	0e d3       	rcall	.+1564   	; 0x15ce <vTaskSuspendAll>
     fb2:	0f b6       	in	r0, 0x3f	; 63
     fb4:	f8 94       	cli
     fb6:	0f 92       	push	r0
     fb8:	f8 01       	movw	r30, r16
     fba:	81 a1       	ldd	r24, Z+33	; 0x21
     fbc:	8f 3f       	cpi	r24, 0xFF	; 255
     fbe:	09 f4       	brne	.+2      	; 0xfc2 <xQueueSemaphoreTake+0xa4>
     fc0:	11 a2       	std	Z+33, r1	; 0x21
     fc2:	f8 01       	movw	r30, r16
     fc4:	82 a1       	ldd	r24, Z+34	; 0x22
     fc6:	8f 3f       	cpi	r24, 0xFF	; 255
     fc8:	09 f4       	brne	.+2      	; 0xfcc <xQueueSemaphoreTake+0xae>
     fca:	12 a2       	std	Z+34, r1	; 0x22
     fcc:	0f 90       	pop	r0
     fce:	0f be       	out	0x3f, r0	; 63
     fd0:	be 01       	movw	r22, r28
     fd2:	6a 5f       	subi	r22, 0xFA	; 250
     fd4:	7f 4f       	sbci	r23, 0xFF	; 255
     fd6:	ce 01       	movw	r24, r28
     fd8:	01 96       	adiw	r24, 0x01	; 1
     fda:	ca d6       	rcall	.+3476   	; 0x1d70 <xTaskCheckForTimeOut>
     fdc:	81 11       	cpse	r24, r1
     fde:	24 c0       	rjmp	.+72     	; 0x1028 <__EEPROM_REGION_LENGTH__+0x28>
     fe0:	c8 01       	movw	r24, r16
     fe2:	ed dc       	rcall	.-1574   	; 0x9be <prvIsQueueEmpty>
     fe4:	88 23       	and	r24, r24
     fe6:	e1 f0       	breq	.+56     	; 0x1020 <__EEPROM_REGION_LENGTH__+0x20>
     fe8:	f8 01       	movw	r30, r16
     fea:	80 81       	ld	r24, Z
     fec:	91 81       	ldd	r25, Z+1	; 0x01
     fee:	89 2b       	or	r24, r25
     ff0:	49 f4       	brne	.+18     	; 0x1004 <__EEPROM_REGION_LENGTH__+0x4>
     ff2:	0f b6       	in	r0, 0x3f	; 63
     ff4:	f8 94       	cli
     ff6:	0f 92       	push	r0
     ff8:	84 81       	ldd	r24, Z+4	; 0x04
     ffa:	95 81       	ldd	r25, Z+5	; 0x05
     ffc:	31 d7       	rcall	.+3682   	; 0x1e60 <xTaskPriorityInherit>
     ffe:	e8 2e       	mov	r14, r24
    1000:	0f 90       	pop	r0
    1002:	0f be       	out	0x3f, r0	; 63
    1004:	4e 81       	ldd	r20, Y+6	; 0x06
    1006:	5f 81       	ldd	r21, Y+7	; 0x07
    1008:	68 85       	ldd	r22, Y+8	; 0x08
    100a:	79 85       	ldd	r23, Y+9	; 0x09
    100c:	c8 01       	movw	r24, r16
    100e:	43 96       	adiw	r24, 0x13	; 19
    1010:	96 d5       	rcall	.+2860   	; 0x1b3e <vTaskPlaceOnEventList>
    1012:	c8 01       	movw	r24, r16
    1014:	68 dd       	rcall	.-1328   	; 0xae6 <prvUnlockQueue>
    1016:	1b d4       	rcall	.+2102   	; 0x184e <xTaskResumeAll>
    1018:	81 11       	cpse	r24, r1
    101a:	96 cf       	rjmp	.-212    	; 0xf48 <xQueueSemaphoreTake+0x2a>
    101c:	f9 db       	rcall	.-2062   	; 0x810 <vPortYield>
    101e:	94 cf       	rjmp	.-216    	; 0xf48 <xQueueSemaphoreTake+0x2a>
    1020:	c8 01       	movw	r24, r16
    1022:	61 dd       	rcall	.-1342   	; 0xae6 <prvUnlockQueue>
    1024:	14 d4       	rcall	.+2088   	; 0x184e <xTaskResumeAll>
    1026:	90 cf       	rjmp	.-224    	; 0xf48 <xQueueSemaphoreTake+0x2a>
    1028:	c8 01       	movw	r24, r16
    102a:	5d dd       	rcall	.-1350   	; 0xae6 <prvUnlockQueue>
    102c:	10 d4       	rcall	.+2080   	; 0x184e <xTaskResumeAll>
    102e:	c8 01       	movw	r24, r16
    1030:	c6 dc       	rcall	.-1652   	; 0x9be <prvIsQueueEmpty>
    1032:	88 23       	and	r24, r24
    1034:	09 f4       	brne	.+2      	; 0x1038 <__EEPROM_REGION_LENGTH__+0x38>
    1036:	88 cf       	rjmp	.-240    	; 0xf48 <xQueueSemaphoreTake+0x2a>
    1038:	ee 20       	and	r14, r14
    103a:	71 f0       	breq	.+28     	; 0x1058 <__EEPROM_REGION_LENGTH__+0x58>
    103c:	0f b6       	in	r0, 0x3f	; 63
    103e:	f8 94       	cli
    1040:	0f 92       	push	r0
    1042:	c8 01       	movw	r24, r16
    1044:	ac dc       	rcall	.-1704   	; 0x99e <prvGetDisinheritPriorityAfterTimeout>
    1046:	68 2f       	mov	r22, r24
    1048:	f8 01       	movw	r30, r16
    104a:	84 81       	ldd	r24, Z+4	; 0x04
    104c:	95 81       	ldd	r25, Z+5	; 0x05
    104e:	ea d7       	rcall	.+4052   	; 0x2024 <vTaskPriorityDisinheritAfterTimeout>
    1050:	0f 90       	pop	r0
    1052:	0f be       	out	0x3f, r0	; 63
    1054:	80 e0       	ldi	r24, 0x00	; 0
    1056:	01 c0       	rjmp	.+2      	; 0x105a <__EEPROM_REGION_LENGTH__+0x5a>
    1058:	80 e0       	ldi	r24, 0x00	; 0
    105a:	29 96       	adiw	r28, 0x09	; 9
    105c:	0f b6       	in	r0, 0x3f	; 63
    105e:	f8 94       	cli
    1060:	de bf       	out	0x3e, r29	; 62
    1062:	0f be       	out	0x3f, r0	; 63
    1064:	cd bf       	out	0x3d, r28	; 61
    1066:	df 91       	pop	r29
    1068:	cf 91       	pop	r28
    106a:	1f 91       	pop	r17
    106c:	0f 91       	pop	r16
    106e:	ff 90       	pop	r15
    1070:	ef 90       	pop	r14
    1072:	08 95       	ret

00001074 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
    1074:	cf 93       	push	r28
    1076:	df 93       	push	r29
    1078:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    107a:	0f b6       	in	r0, 0x3f	; 63
    107c:	f8 94       	cli
    107e:	0f 92       	push	r0
    1080:	89 a1       	ldd	r24, Y+33	; 0x21
    1082:	8f 3f       	cpi	r24, 0xFF	; 255
    1084:	09 f4       	brne	.+2      	; 0x1088 <vQueueWaitForMessageRestricted+0x14>
    1086:	19 a2       	std	Y+33, r1	; 0x21
    1088:	8a a1       	ldd	r24, Y+34	; 0x22
    108a:	8f 3f       	cpi	r24, 0xFF	; 255
    108c:	09 f4       	brne	.+2      	; 0x1090 <vQueueWaitForMessageRestricted+0x1c>
    108e:	1a a2       	std	Y+34, r1	; 0x22
    1090:	0f 90       	pop	r0
    1092:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    1094:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1096:	81 11       	cpse	r24, r1
    1098:	03 c0       	rjmp	.+6      	; 0x10a0 <vQueueWaitForMessageRestricted+0x2c>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    109a:	ce 01       	movw	r24, r28
    109c:	43 96       	adiw	r24, 0x13	; 19
    109e:	66 d5       	rcall	.+2764   	; 0x1b6c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
    10a0:	ce 01       	movw	r24, r28
    10a2:	21 dd       	rcall	.-1470   	; 0xae6 <prvUnlockQueue>
    }
    10a4:	df 91       	pop	r29
    10a6:	cf 91       	pop	r28
    10a8:	08 95       	ret

000010aa <prvResetNextTaskUnblockTime>:
    10aa:	e0 91 d7 10 	lds	r30, 0x10D7	; 0x8010d7 <pxDelayedTaskList>
    10ae:	f0 91 d8 10 	lds	r31, 0x10D8	; 0x8010d8 <pxDelayedTaskList+0x1>
    10b2:	80 81       	ld	r24, Z
    10b4:	81 11       	cpse	r24, r1
    10b6:	0c c0       	rjmp	.+24     	; 0x10d0 <prvResetNextTaskUnblockTime+0x26>
    10b8:	8f ef       	ldi	r24, 0xFF	; 255
    10ba:	9f ef       	ldi	r25, 0xFF	; 255
    10bc:	dc 01       	movw	r26, r24
    10be:	80 93 a1 10 	sts	0x10A1, r24	; 0x8010a1 <xNextTaskUnblockTime>
    10c2:	90 93 a2 10 	sts	0x10A2, r25	; 0x8010a2 <xNextTaskUnblockTime+0x1>
    10c6:	a0 93 a3 10 	sts	0x10A3, r26	; 0x8010a3 <xNextTaskUnblockTime+0x2>
    10ca:	b0 93 a4 10 	sts	0x10A4, r27	; 0x8010a4 <xNextTaskUnblockTime+0x3>
    10ce:	08 95       	ret
    10d0:	e0 91 d7 10 	lds	r30, 0x10D7	; 0x8010d7 <pxDelayedTaskList>
    10d4:	f0 91 d8 10 	lds	r31, 0x10D8	; 0x8010d8 <pxDelayedTaskList+0x1>
    10d8:	07 80       	ldd	r0, Z+7	; 0x07
    10da:	f0 85       	ldd	r31, Z+8	; 0x08
    10dc:	e0 2d       	mov	r30, r0
    10de:	80 81       	ld	r24, Z
    10e0:	91 81       	ldd	r25, Z+1	; 0x01
    10e2:	a2 81       	ldd	r26, Z+2	; 0x02
    10e4:	b3 81       	ldd	r27, Z+3	; 0x03
    10e6:	80 93 a1 10 	sts	0x10A1, r24	; 0x8010a1 <xNextTaskUnblockTime>
    10ea:	90 93 a2 10 	sts	0x10A2, r25	; 0x8010a2 <xNextTaskUnblockTime+0x1>
    10ee:	a0 93 a3 10 	sts	0x10A3, r26	; 0x8010a3 <xNextTaskUnblockTime+0x2>
    10f2:	b0 93 a4 10 	sts	0x10A4, r27	; 0x8010a4 <xNextTaskUnblockTime+0x3>
    10f6:	08 95       	ret

000010f8 <prvDeleteTCB>:
    10f8:	cf 93       	push	r28
    10fa:	df 93       	push	r29
    10fc:	ec 01       	movw	r28, r24
    10fe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1100:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1102:	7c da       	rcall	.-2824   	; 0x5fc <vPortFree>
    1104:	ce 01       	movw	r24, r28
    1106:	7a da       	rcall	.-2828   	; 0x5fc <vPortFree>
    1108:	df 91       	pop	r29
    110a:	cf 91       	pop	r28
    110c:	08 95       	ret

0000110e <prvInitialiseNewTask>:
    110e:	4f 92       	push	r4
    1110:	5f 92       	push	r5
    1112:	6f 92       	push	r6
    1114:	7f 92       	push	r7
    1116:	8f 92       	push	r8
    1118:	9f 92       	push	r9
    111a:	af 92       	push	r10
    111c:	bf 92       	push	r11
    111e:	cf 92       	push	r12
    1120:	df 92       	push	r13
    1122:	ef 92       	push	r14
    1124:	ff 92       	push	r15
    1126:	0f 93       	push	r16
    1128:	cf 93       	push	r28
    112a:	df 93       	push	r29
    112c:	2c 01       	movw	r4, r24
    112e:	5b 01       	movw	r10, r22
    1130:	4a 01       	movw	r8, r20
    1132:	39 01       	movw	r6, r18
    1134:	e6 01       	movw	r28, r12
    1136:	65 ea       	ldi	r22, 0xA5	; 165
    1138:	70 e0       	ldi	r23, 0x00	; 0
    113a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    113c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    113e:	0e 94 09 1c 	call	0x3812	; 0x3812 <memset>
    1142:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1144:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1146:	21 e0       	ldi	r18, 0x01	; 1
    1148:	82 1a       	sub	r8, r18
    114a:	91 08       	sbc	r9, r1
    114c:	88 0e       	add	r8, r24
    114e:	99 1e       	adc	r9, r25
    1150:	a1 14       	cp	r10, r1
    1152:	b1 04       	cpc	r11, r1
    1154:	89 f4       	brne	.+34     	; 0x1178 <prvInitialiseNewTask+0x6a>
    1156:	15 c0       	rjmp	.+42     	; 0x1182 <prvInitialiseNewTask+0x74>
    1158:	82 2f       	mov	r24, r18
    115a:	90 e0       	ldi	r25, 0x00	; 0
    115c:	f5 01       	movw	r30, r10
    115e:	e8 0f       	add	r30, r24
    1160:	f9 1f       	adc	r31, r25
    1162:	30 81       	ld	r19, Z
    1164:	de 01       	movw	r26, r28
    1166:	a8 0f       	add	r26, r24
    1168:	b9 1f       	adc	r27, r25
    116a:	5d 96       	adiw	r26, 0x1d	; 29
    116c:	3c 93       	st	X, r19
    116e:	80 81       	ld	r24, Z
    1170:	88 23       	and	r24, r24
    1172:	29 f0       	breq	.+10     	; 0x117e <prvInitialiseNewTask+0x70>
    1174:	2f 5f       	subi	r18, 0xFF	; 255
    1176:	01 c0       	rjmp	.+2      	; 0x117a <prvInitialiseNewTask+0x6c>
    1178:	20 e0       	ldi	r18, 0x00	; 0
    117a:	20 31       	cpi	r18, 0x10	; 16
    117c:	68 f3       	brcs	.-38     	; 0x1158 <prvInitialiseNewTask+0x4a>
    117e:	1c a6       	std	Y+44, r1	; 0x2c
    1180:	01 c0       	rjmp	.+2      	; 0x1184 <prvInitialiseNewTask+0x76>
    1182:	1d 8e       	std	Y+29, r1	; 0x1d
    1184:	0a 30       	cpi	r16, 0x0A	; 10
    1186:	08 f0       	brcs	.+2      	; 0x118a <prvInitialiseNewTask+0x7c>
    1188:	09 e0       	ldi	r16, 0x09	; 9
    118a:	0a 8f       	std	Y+26, r16	; 0x1a
    118c:	0d a7       	std	Y+45, r16	; 0x2d
    118e:	1e a6       	std	Y+46, r1	; 0x2e
    1190:	ce 01       	movw	r24, r28
    1192:	02 96       	adiw	r24, 0x02	; 2
    1194:	80 da       	rcall	.-2816   	; 0x696 <vListInitialiseItem>
    1196:	ce 01       	movw	r24, r28
    1198:	0e 96       	adiw	r24, 0x0e	; 14
    119a:	7d da       	rcall	.-2822   	; 0x696 <vListInitialiseItem>
    119c:	db 87       	std	Y+11, r29	; 0x0b
    119e:	ca 87       	std	Y+10, r28	; 0x0a
    11a0:	8a e0       	ldi	r24, 0x0A	; 10
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	a0 e0       	ldi	r26, 0x00	; 0
    11a6:	b0 e0       	ldi	r27, 0x00	; 0
    11a8:	80 1b       	sub	r24, r16
    11aa:	91 09       	sbc	r25, r1
    11ac:	a1 09       	sbc	r26, r1
    11ae:	b1 09       	sbc	r27, r1
    11b0:	8e 87       	std	Y+14, r24	; 0x0e
    11b2:	9f 87       	std	Y+15, r25	; 0x0f
    11b4:	a8 8b       	std	Y+16, r26	; 0x10
    11b6:	b9 8b       	std	Y+17, r27	; 0x11
    11b8:	df 8b       	std	Y+23, r29	; 0x17
    11ba:	ce 8b       	std	Y+22, r28	; 0x16
    11bc:	18 aa       	std	Y+48, r1	; 0x30
    11be:	1f a6       	std	Y+47, r1	; 0x2f
    11c0:	84 e0       	ldi	r24, 0x04	; 4
    11c2:	fe 01       	movw	r30, r28
    11c4:	f1 96       	adiw	r30, 0x31	; 49
    11c6:	df 01       	movw	r26, r30
    11c8:	1d 92       	st	X+, r1
    11ca:	8a 95       	dec	r24
    11cc:	e9 f7       	brne	.-6      	; 0x11c8 <prvInitialiseNewTask+0xba>
    11ce:	1d aa       	std	Y+53, r1	; 0x35
    11d0:	a3 01       	movw	r20, r6
    11d2:	b2 01       	movw	r22, r4
    11d4:	c4 01       	movw	r24, r8
    11d6:	d3 da       	rcall	.-2650   	; 0x77e <pxPortInitialiseStack>
    11d8:	99 83       	std	Y+1, r25	; 0x01
    11da:	88 83       	st	Y, r24
    11dc:	e1 14       	cp	r14, r1
    11de:	f1 04       	cpc	r15, r1
    11e0:	19 f0       	breq	.+6      	; 0x11e8 <prvInitialiseNewTask+0xda>
    11e2:	f7 01       	movw	r30, r14
    11e4:	d1 83       	std	Z+1, r29	; 0x01
    11e6:	c0 83       	st	Z, r28
    11e8:	df 91       	pop	r29
    11ea:	cf 91       	pop	r28
    11ec:	0f 91       	pop	r16
    11ee:	ff 90       	pop	r15
    11f0:	ef 90       	pop	r14
    11f2:	df 90       	pop	r13
    11f4:	cf 90       	pop	r12
    11f6:	bf 90       	pop	r11
    11f8:	af 90       	pop	r10
    11fa:	9f 90       	pop	r9
    11fc:	8f 90       	pop	r8
    11fe:	7f 90       	pop	r7
    1200:	6f 90       	pop	r6
    1202:	5f 90       	pop	r5
    1204:	4f 90       	pop	r4
    1206:	08 95       	ret

00001208 <prvInitialiseTaskLists>:
    1208:	cf 93       	push	r28
    120a:	c0 e0       	ldi	r28, 0x00	; 0
    120c:	08 c0       	rjmp	.+16     	; 0x121e <prvInitialiseTaskLists+0x16>
    120e:	2b e0       	ldi	r18, 0x0B	; 11
    1210:	c2 9f       	mul	r28, r18
    1212:	c0 01       	movw	r24, r0
    1214:	11 24       	eor	r1, r1
    1216:	81 51       	subi	r24, 0x11	; 17
    1218:	9f 4e       	sbci	r25, 0xEF	; 239
    121a:	2c da       	rcall	.-2984   	; 0x674 <vListInitialise>
    121c:	cf 5f       	subi	r28, 0xFF	; 255
    121e:	ca 30       	cpi	r28, 0x0A	; 10
    1220:	b0 f3       	brcs	.-20     	; 0x120e <prvInitialiseTaskLists+0x6>
    1222:	84 ee       	ldi	r24, 0xE4	; 228
    1224:	90 e1       	ldi	r25, 0x10	; 16
    1226:	26 da       	rcall	.-2996   	; 0x674 <vListInitialise>
    1228:	89 ed       	ldi	r24, 0xD9	; 217
    122a:	90 e1       	ldi	r25, 0x10	; 16
    122c:	23 da       	rcall	.-3002   	; 0x674 <vListInitialise>
    122e:	8a ec       	ldi	r24, 0xCA	; 202
    1230:	90 e1       	ldi	r25, 0x10	; 16
    1232:	20 da       	rcall	.-3008   	; 0x674 <vListInitialise>
    1234:	8f eb       	ldi	r24, 0xBF	; 191
    1236:	90 e1       	ldi	r25, 0x10	; 16
    1238:	1d da       	rcall	.-3014   	; 0x674 <vListInitialise>
    123a:	83 eb       	ldi	r24, 0xB3	; 179
    123c:	90 e1       	ldi	r25, 0x10	; 16
    123e:	1a da       	rcall	.-3020   	; 0x674 <vListInitialise>
    1240:	84 ee       	ldi	r24, 0xE4	; 228
    1242:	90 e1       	ldi	r25, 0x10	; 16
    1244:	90 93 d8 10 	sts	0x10D8, r25	; 0x8010d8 <pxDelayedTaskList+0x1>
    1248:	80 93 d7 10 	sts	0x10D7, r24	; 0x8010d7 <pxDelayedTaskList>
    124c:	89 ed       	ldi	r24, 0xD9	; 217
    124e:	90 e1       	ldi	r25, 0x10	; 16
    1250:	90 93 d6 10 	sts	0x10D6, r25	; 0x8010d6 <pxOverflowDelayedTaskList+0x1>
    1254:	80 93 d5 10 	sts	0x10D5, r24	; 0x8010d5 <pxOverflowDelayedTaskList>
    1258:	cf 91       	pop	r28
    125a:	08 95       	ret

0000125c <prvAddNewTaskToReadyList>:
    125c:	cf 93       	push	r28
    125e:	df 93       	push	r29
    1260:	ec 01       	movw	r28, r24
    1262:	0f b6       	in	r0, 0x3f	; 63
    1264:	f8 94       	cli
    1266:	0f 92       	push	r0
    1268:	80 91 b2 10 	lds	r24, 0x10B2	; 0x8010b2 <uxCurrentNumberOfTasks>
    126c:	8f 5f       	subi	r24, 0xFF	; 255
    126e:	80 93 b2 10 	sts	0x10B2, r24	; 0x8010b2 <uxCurrentNumberOfTasks>
    1272:	80 91 5d 11 	lds	r24, 0x115D	; 0x80115d <pxCurrentTCB>
    1276:	90 91 5e 11 	lds	r25, 0x115E	; 0x80115e <pxCurrentTCB+0x1>
    127a:	89 2b       	or	r24, r25
    127c:	51 f4       	brne	.+20     	; 0x1292 <prvAddNewTaskToReadyList+0x36>
    127e:	d0 93 5e 11 	sts	0x115E, r29	; 0x80115e <pxCurrentTCB+0x1>
    1282:	c0 93 5d 11 	sts	0x115D, r28	; 0x80115d <pxCurrentTCB>
    1286:	80 91 b2 10 	lds	r24, 0x10B2	; 0x8010b2 <uxCurrentNumberOfTasks>
    128a:	81 30       	cpi	r24, 0x01	; 1
    128c:	91 f4       	brne	.+36     	; 0x12b2 <prvAddNewTaskToReadyList+0x56>
    128e:	bc df       	rcall	.-136    	; 0x1208 <prvInitialiseTaskLists>
    1290:	10 c0       	rjmp	.+32     	; 0x12b2 <prvAddNewTaskToReadyList+0x56>
    1292:	80 91 ac 10 	lds	r24, 0x10AC	; 0x8010ac <xSchedulerRunning>
    1296:	81 11       	cpse	r24, r1
    1298:	0c c0       	rjmp	.+24     	; 0x12b2 <prvAddNewTaskToReadyList+0x56>
    129a:	e0 91 5d 11 	lds	r30, 0x115D	; 0x80115d <pxCurrentTCB>
    129e:	f0 91 5e 11 	lds	r31, 0x115E	; 0x80115e <pxCurrentTCB+0x1>
    12a2:	92 8d       	ldd	r25, Z+26	; 0x1a
    12a4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    12a6:	89 17       	cp	r24, r25
    12a8:	20 f0       	brcs	.+8      	; 0x12b2 <prvAddNewTaskToReadyList+0x56>
    12aa:	d0 93 5e 11 	sts	0x115E, r29	; 0x80115e <pxCurrentTCB+0x1>
    12ae:	c0 93 5d 11 	sts	0x115D, r28	; 0x80115d <pxCurrentTCB>
    12b2:	80 91 a5 10 	lds	r24, 0x10A5	; 0x8010a5 <uxTaskNumber>
    12b6:	8f 5f       	subi	r24, 0xFF	; 255
    12b8:	80 93 a5 10 	sts	0x10A5, r24	; 0x8010a5 <uxTaskNumber>
    12bc:	ea 8d       	ldd	r30, Y+26	; 0x1a
    12be:	80 91 ad 10 	lds	r24, 0x10AD	; 0x8010ad <uxTopReadyPriority>
    12c2:	8e 17       	cp	r24, r30
    12c4:	10 f4       	brcc	.+4      	; 0x12ca <prvAddNewTaskToReadyList+0x6e>
    12c6:	e0 93 ad 10 	sts	0x10AD, r30	; 0x8010ad <uxTopReadyPriority>
    12ca:	8b e0       	ldi	r24, 0x0B	; 11
    12cc:	8e 9f       	mul	r24, r30
    12ce:	f0 01       	movw	r30, r0
    12d0:	11 24       	eor	r1, r1
    12d2:	e1 51       	subi	r30, 0x11	; 17
    12d4:	ff 4e       	sbci	r31, 0xEF	; 239
    12d6:	01 80       	ldd	r0, Z+1	; 0x01
    12d8:	f2 81       	ldd	r31, Z+2	; 0x02
    12da:	e0 2d       	mov	r30, r0
    12dc:	ff 83       	std	Y+7, r31	; 0x07
    12de:	ee 83       	std	Y+6, r30	; 0x06
    12e0:	26 81       	ldd	r18, Z+6	; 0x06
    12e2:	37 81       	ldd	r19, Z+7	; 0x07
    12e4:	39 87       	std	Y+9, r19	; 0x09
    12e6:	28 87       	std	Y+8, r18	; 0x08
    12e8:	a6 81       	ldd	r26, Z+6	; 0x06
    12ea:	b7 81       	ldd	r27, Z+7	; 0x07
    12ec:	9e 01       	movw	r18, r28
    12ee:	2e 5f       	subi	r18, 0xFE	; 254
    12f0:	3f 4f       	sbci	r19, 0xFF	; 255
    12f2:	15 96       	adiw	r26, 0x05	; 5
    12f4:	3c 93       	st	X, r19
    12f6:	2e 93       	st	-X, r18
    12f8:	14 97       	sbiw	r26, 0x04	; 4
    12fa:	37 83       	std	Z+7, r19	; 0x07
    12fc:	26 83       	std	Z+6, r18	; 0x06
    12fe:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1300:	8e 9f       	mul	r24, r30
    1302:	f0 01       	movw	r30, r0
    1304:	11 24       	eor	r1, r1
    1306:	e1 51       	subi	r30, 0x11	; 17
    1308:	ff 4e       	sbci	r31, 0xEF	; 239
    130a:	fd 87       	std	Y+13, r31	; 0x0d
    130c:	ec 87       	std	Y+12, r30	; 0x0c
    130e:	80 81       	ld	r24, Z
    1310:	8f 5f       	subi	r24, 0xFF	; 255
    1312:	80 83       	st	Z, r24
    1314:	0f 90       	pop	r0
    1316:	0f be       	out	0x3f, r0	; 63
    1318:	80 91 ac 10 	lds	r24, 0x10AC	; 0x8010ac <xSchedulerRunning>
    131c:	88 23       	and	r24, r24
    131e:	49 f0       	breq	.+18     	; 0x1332 <prvAddNewTaskToReadyList+0xd6>
    1320:	e0 91 5d 11 	lds	r30, 0x115D	; 0x80115d <pxCurrentTCB>
    1324:	f0 91 5e 11 	lds	r31, 0x115E	; 0x80115e <pxCurrentTCB+0x1>
    1328:	92 8d       	ldd	r25, Z+26	; 0x1a
    132a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    132c:	98 17       	cp	r25, r24
    132e:	08 f4       	brcc	.+2      	; 0x1332 <prvAddNewTaskToReadyList+0xd6>
    1330:	6f da       	rcall	.-2850   	; 0x810 <vPortYield>
    1332:	df 91       	pop	r29
    1334:	cf 91       	pop	r28
    1336:	08 95       	ret

00001338 <prvCheckTasksWaitingTermination>:
    1338:	cf 93       	push	r28
    133a:	df 93       	push	r29
    133c:	1a c0       	rjmp	.+52     	; 0x1372 <prvCheckTasksWaitingTermination+0x3a>
    133e:	0f b6       	in	r0, 0x3f	; 63
    1340:	f8 94       	cli
    1342:	0f 92       	push	r0
    1344:	e0 91 c6 10 	lds	r30, 0x10C6	; 0x8010c6 <xTasksWaitingTermination+0x7>
    1348:	f0 91 c7 10 	lds	r31, 0x10C7	; 0x8010c7 <xTasksWaitingTermination+0x8>
    134c:	c0 85       	ldd	r28, Z+8	; 0x08
    134e:	d1 85       	ldd	r29, Z+9	; 0x09
    1350:	ce 01       	movw	r24, r28
    1352:	02 96       	adiw	r24, 0x02	; 2
    1354:	e1 d9       	rcall	.-3134   	; 0x718 <uxListRemove>
    1356:	80 91 b2 10 	lds	r24, 0x10B2	; 0x8010b2 <uxCurrentNumberOfTasks>
    135a:	81 50       	subi	r24, 0x01	; 1
    135c:	80 93 b2 10 	sts	0x10B2, r24	; 0x8010b2 <uxCurrentNumberOfTasks>
    1360:	80 91 be 10 	lds	r24, 0x10BE	; 0x8010be <uxDeletedTasksWaitingCleanUp>
    1364:	81 50       	subi	r24, 0x01	; 1
    1366:	80 93 be 10 	sts	0x10BE, r24	; 0x8010be <uxDeletedTasksWaitingCleanUp>
    136a:	0f 90       	pop	r0
    136c:	0f be       	out	0x3f, r0	; 63
    136e:	ce 01       	movw	r24, r28
    1370:	c3 de       	rcall	.-634    	; 0x10f8 <prvDeleteTCB>
    1372:	80 91 be 10 	lds	r24, 0x10BE	; 0x8010be <uxDeletedTasksWaitingCleanUp>
    1376:	81 11       	cpse	r24, r1
    1378:	e2 cf       	rjmp	.-60     	; 0x133e <prvCheckTasksWaitingTermination+0x6>
    137a:	df 91       	pop	r29
    137c:	cf 91       	pop	r28
    137e:	08 95       	ret

00001380 <prvAddCurrentTaskToDelayedList>:
    1380:	8f 92       	push	r8
    1382:	9f 92       	push	r9
    1384:	af 92       	push	r10
    1386:	bf 92       	push	r11
    1388:	cf 92       	push	r12
    138a:	df 92       	push	r13
    138c:	ef 92       	push	r14
    138e:	ff 92       	push	r15
    1390:	cf 93       	push	r28
    1392:	df 93       	push	r29
    1394:	6b 01       	movw	r12, r22
    1396:	7c 01       	movw	r14, r24
    1398:	c4 2f       	mov	r28, r20
    139a:	80 90 ae 10 	lds	r8, 0x10AE	; 0x8010ae <xTickCount>
    139e:	90 90 af 10 	lds	r9, 0x10AF	; 0x8010af <xTickCount+0x1>
    13a2:	a0 90 b0 10 	lds	r10, 0x10B0	; 0x8010b0 <xTickCount+0x2>
    13a6:	b0 90 b1 10 	lds	r11, 0x10B1	; 0x8010b1 <xTickCount+0x3>
    13aa:	80 91 5d 11 	lds	r24, 0x115D	; 0x80115d <pxCurrentTCB>
    13ae:	90 91 5e 11 	lds	r25, 0x115E	; 0x80115e <pxCurrentTCB+0x1>
    13b2:	02 96       	adiw	r24, 0x02	; 2
    13b4:	b1 d9       	rcall	.-3230   	; 0x718 <uxListRemove>
    13b6:	8f ef       	ldi	r24, 0xFF	; 255
    13b8:	c8 16       	cp	r12, r24
    13ba:	d8 06       	cpc	r13, r24
    13bc:	e8 06       	cpc	r14, r24
    13be:	f8 06       	cpc	r15, r24
    13c0:	b1 f5       	brne	.+108    	; 0x142e <prvAddCurrentTaskToDelayedList+0xae>
    13c2:	cc 23       	and	r28, r28
    13c4:	a1 f1       	breq	.+104    	; 0x142e <prvAddCurrentTaskToDelayedList+0xae>
    13c6:	e3 eb       	ldi	r30, 0xB3	; 179
    13c8:	f0 e1       	ldi	r31, 0x10	; 16
    13ca:	a1 81       	ldd	r26, Z+1	; 0x01
    13cc:	b2 81       	ldd	r27, Z+2	; 0x02
    13ce:	c0 91 5d 11 	lds	r28, 0x115D	; 0x80115d <pxCurrentTCB>
    13d2:	d0 91 5e 11 	lds	r29, 0x115E	; 0x80115e <pxCurrentTCB+0x1>
    13d6:	bf 83       	std	Y+7, r27	; 0x07
    13d8:	ae 83       	std	Y+6, r26	; 0x06
    13da:	c0 91 5d 11 	lds	r28, 0x115D	; 0x80115d <pxCurrentTCB>
    13de:	d0 91 5e 11 	lds	r29, 0x115E	; 0x80115e <pxCurrentTCB+0x1>
    13e2:	16 96       	adiw	r26, 0x06	; 6
    13e4:	8d 91       	ld	r24, X+
    13e6:	9c 91       	ld	r25, X
    13e8:	17 97       	sbiw	r26, 0x07	; 7
    13ea:	99 87       	std	Y+9, r25	; 0x09
    13ec:	88 87       	std	Y+8, r24	; 0x08
    13ee:	16 96       	adiw	r26, 0x06	; 6
    13f0:	cd 91       	ld	r28, X+
    13f2:	dc 91       	ld	r29, X
    13f4:	17 97       	sbiw	r26, 0x07	; 7
    13f6:	80 91 5d 11 	lds	r24, 0x115D	; 0x80115d <pxCurrentTCB>
    13fa:	90 91 5e 11 	lds	r25, 0x115E	; 0x80115e <pxCurrentTCB+0x1>
    13fe:	02 96       	adiw	r24, 0x02	; 2
    1400:	9d 83       	std	Y+5, r25	; 0x05
    1402:	8c 83       	std	Y+4, r24	; 0x04
    1404:	80 91 5d 11 	lds	r24, 0x115D	; 0x80115d <pxCurrentTCB>
    1408:	90 91 5e 11 	lds	r25, 0x115E	; 0x80115e <pxCurrentTCB+0x1>
    140c:	02 96       	adiw	r24, 0x02	; 2
    140e:	17 96       	adiw	r26, 0x07	; 7
    1410:	9c 93       	st	X, r25
    1412:	8e 93       	st	-X, r24
    1414:	16 97       	sbiw	r26, 0x06	; 6
    1416:	a0 91 5d 11 	lds	r26, 0x115D	; 0x80115d <pxCurrentTCB>
    141a:	b0 91 5e 11 	lds	r27, 0x115E	; 0x80115e <pxCurrentTCB+0x1>
    141e:	1d 96       	adiw	r26, 0x0d	; 13
    1420:	fc 93       	st	X, r31
    1422:	ee 93       	st	-X, r30
    1424:	1c 97       	sbiw	r26, 0x0c	; 12
    1426:	80 81       	ld	r24, Z
    1428:	8f 5f       	subi	r24, 0xFF	; 255
    142a:	80 83       	st	Z, r24
    142c:	3d c0       	rjmp	.+122    	; 0x14a8 <prvAddCurrentTaskToDelayedList+0x128>
    142e:	c8 0c       	add	r12, r8
    1430:	d9 1c       	adc	r13, r9
    1432:	ea 1c       	adc	r14, r10
    1434:	fb 1c       	adc	r15, r11
    1436:	e0 91 5d 11 	lds	r30, 0x115D	; 0x80115d <pxCurrentTCB>
    143a:	f0 91 5e 11 	lds	r31, 0x115E	; 0x80115e <pxCurrentTCB+0x1>
    143e:	c2 82       	std	Z+2, r12	; 0x02
    1440:	d3 82       	std	Z+3, r13	; 0x03
    1442:	e4 82       	std	Z+4, r14	; 0x04
    1444:	f5 82       	std	Z+5, r15	; 0x05
    1446:	c8 14       	cp	r12, r8
    1448:	d9 04       	cpc	r13, r9
    144a:	ea 04       	cpc	r14, r10
    144c:	fb 04       	cpc	r15, r11
    144e:	60 f4       	brcc	.+24     	; 0x1468 <prvAddCurrentTaskToDelayedList+0xe8>
    1450:	60 91 5d 11 	lds	r22, 0x115D	; 0x80115d <pxCurrentTCB>
    1454:	70 91 5e 11 	lds	r23, 0x115E	; 0x80115e <pxCurrentTCB+0x1>
    1458:	80 91 d5 10 	lds	r24, 0x10D5	; 0x8010d5 <pxOverflowDelayedTaskList>
    145c:	90 91 d6 10 	lds	r25, 0x10D6	; 0x8010d6 <pxOverflowDelayedTaskList+0x1>
    1460:	6e 5f       	subi	r22, 0xFE	; 254
    1462:	7f 4f       	sbci	r23, 0xFF	; 255
    1464:	1c d9       	rcall	.-3528   	; 0x69e <vListInsert>
    1466:	20 c0       	rjmp	.+64     	; 0x14a8 <prvAddCurrentTaskToDelayedList+0x128>
    1468:	60 91 5d 11 	lds	r22, 0x115D	; 0x80115d <pxCurrentTCB>
    146c:	70 91 5e 11 	lds	r23, 0x115E	; 0x80115e <pxCurrentTCB+0x1>
    1470:	80 91 d7 10 	lds	r24, 0x10D7	; 0x8010d7 <pxDelayedTaskList>
    1474:	90 91 d8 10 	lds	r25, 0x10D8	; 0x8010d8 <pxDelayedTaskList+0x1>
    1478:	6e 5f       	subi	r22, 0xFE	; 254
    147a:	7f 4f       	sbci	r23, 0xFF	; 255
    147c:	10 d9       	rcall	.-3552   	; 0x69e <vListInsert>
    147e:	80 91 a1 10 	lds	r24, 0x10A1	; 0x8010a1 <xNextTaskUnblockTime>
    1482:	90 91 a2 10 	lds	r25, 0x10A2	; 0x8010a2 <xNextTaskUnblockTime+0x1>
    1486:	a0 91 a3 10 	lds	r26, 0x10A3	; 0x8010a3 <xNextTaskUnblockTime+0x2>
    148a:	b0 91 a4 10 	lds	r27, 0x10A4	; 0x8010a4 <xNextTaskUnblockTime+0x3>
    148e:	c8 16       	cp	r12, r24
    1490:	d9 06       	cpc	r13, r25
    1492:	ea 06       	cpc	r14, r26
    1494:	fb 06       	cpc	r15, r27
    1496:	40 f4       	brcc	.+16     	; 0x14a8 <prvAddCurrentTaskToDelayedList+0x128>
    1498:	c0 92 a1 10 	sts	0x10A1, r12	; 0x8010a1 <xNextTaskUnblockTime>
    149c:	d0 92 a2 10 	sts	0x10A2, r13	; 0x8010a2 <xNextTaskUnblockTime+0x1>
    14a0:	e0 92 a3 10 	sts	0x10A3, r14	; 0x8010a3 <xNextTaskUnblockTime+0x2>
    14a4:	f0 92 a4 10 	sts	0x10A4, r15	; 0x8010a4 <xNextTaskUnblockTime+0x3>
    14a8:	df 91       	pop	r29
    14aa:	cf 91       	pop	r28
    14ac:	ff 90       	pop	r15
    14ae:	ef 90       	pop	r14
    14b0:	df 90       	pop	r13
    14b2:	cf 90       	pop	r12
    14b4:	bf 90       	pop	r11
    14b6:	af 90       	pop	r10
    14b8:	9f 90       	pop	r9
    14ba:	8f 90       	pop	r8
    14bc:	08 95       	ret

000014be <xTaskCreate>:
    14be:	2f 92       	push	r2
    14c0:	3f 92       	push	r3
    14c2:	4f 92       	push	r4
    14c4:	5f 92       	push	r5
    14c6:	6f 92       	push	r6
    14c8:	7f 92       	push	r7
    14ca:	8f 92       	push	r8
    14cc:	9f 92       	push	r9
    14ce:	af 92       	push	r10
    14d0:	bf 92       	push	r11
    14d2:	cf 92       	push	r12
    14d4:	df 92       	push	r13
    14d6:	ef 92       	push	r14
    14d8:	ff 92       	push	r15
    14da:	0f 93       	push	r16
    14dc:	cf 93       	push	r28
    14de:	df 93       	push	r29
    14e0:	3c 01       	movw	r6, r24
    14e2:	1b 01       	movw	r2, r22
    14e4:	4a 01       	movw	r8, r20
    14e6:	29 01       	movw	r4, r18
    14e8:	ca 01       	movw	r24, r20
    14ea:	0e 94 55 02 	call	0x4aa	; 0x4aa <pvPortMalloc>
    14ee:	6c 01       	movw	r12, r24
    14f0:	89 2b       	or	r24, r25
    14f2:	69 f0       	breq	.+26     	; 0x150e <xTaskCreate+0x50>
    14f4:	86 e3       	ldi	r24, 0x36	; 54
    14f6:	90 e0       	ldi	r25, 0x00	; 0
    14f8:	0e 94 55 02 	call	0x4aa	; 0x4aa <pvPortMalloc>
    14fc:	ec 01       	movw	r28, r24
    14fe:	89 2b       	or	r24, r25
    1500:	19 f0       	breq	.+6      	; 0x1508 <xTaskCreate+0x4a>
    1502:	dc 8e       	std	Y+28, r13	; 0x1c
    1504:	cb 8e       	std	Y+27, r12	; 0x1b
    1506:	05 c0       	rjmp	.+10     	; 0x1512 <xTaskCreate+0x54>
    1508:	c6 01       	movw	r24, r12
    150a:	78 d8       	rcall	.-3856   	; 0x5fc <vPortFree>
    150c:	02 c0       	rjmp	.+4      	; 0x1512 <xTaskCreate+0x54>
    150e:	c0 e0       	ldi	r28, 0x00	; 0
    1510:	d0 e0       	ldi	r29, 0x00	; 0
    1512:	20 97       	sbiw	r28, 0x00	; 0
    1514:	61 f0       	breq	.+24     	; 0x152e <xTaskCreate+0x70>
    1516:	a1 2c       	mov	r10, r1
    1518:	b1 2c       	mov	r11, r1
    151a:	6e 01       	movw	r12, r28
    151c:	92 01       	movw	r18, r4
    151e:	a4 01       	movw	r20, r8
    1520:	b1 01       	movw	r22, r2
    1522:	c3 01       	movw	r24, r6
    1524:	f4 dd       	rcall	.-1048   	; 0x110e <prvInitialiseNewTask>
    1526:	ce 01       	movw	r24, r28
    1528:	99 de       	rcall	.-718    	; 0x125c <prvAddNewTaskToReadyList>
    152a:	81 e0       	ldi	r24, 0x01	; 1
    152c:	01 c0       	rjmp	.+2      	; 0x1530 <xTaskCreate+0x72>
    152e:	8f ef       	ldi	r24, 0xFF	; 255
    1530:	df 91       	pop	r29
    1532:	cf 91       	pop	r28
    1534:	0f 91       	pop	r16
    1536:	ff 90       	pop	r15
    1538:	ef 90       	pop	r14
    153a:	df 90       	pop	r13
    153c:	cf 90       	pop	r12
    153e:	bf 90       	pop	r11
    1540:	af 90       	pop	r10
    1542:	9f 90       	pop	r9
    1544:	8f 90       	pop	r8
    1546:	7f 90       	pop	r7
    1548:	6f 90       	pop	r6
    154a:	5f 90       	pop	r5
    154c:	4f 90       	pop	r4
    154e:	3f 90       	pop	r3
    1550:	2f 90       	pop	r2
    1552:	08 95       	ret

00001554 <vTaskStartScheduler>:
    1554:	ef 92       	push	r14
    1556:	ff 92       	push	r15
    1558:	0f 93       	push	r16
    155a:	0f 2e       	mov	r0, r31
    155c:	ff e9       	ldi	r31, 0x9F	; 159
    155e:	ef 2e       	mov	r14, r31
    1560:	f0 e1       	ldi	r31, 0x10	; 16
    1562:	ff 2e       	mov	r15, r31
    1564:	f0 2d       	mov	r31, r0
    1566:	00 e0       	ldi	r16, 0x00	; 0
    1568:	20 e0       	ldi	r18, 0x00	; 0
    156a:	30 e0       	ldi	r19, 0x00	; 0
    156c:	40 ec       	ldi	r20, 0xC0	; 192
    156e:	50 e0       	ldi	r21, 0x00	; 0
    1570:	6b ea       	ldi	r22, 0xAB	; 171
    1572:	72 e0       	ldi	r23, 0x02	; 2
    1574:	8c e7       	ldi	r24, 0x7C	; 124
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	a2 df       	rcall	.-188    	; 0x14be <xTaskCreate>
    157a:	81 30       	cpi	r24, 0x01	; 1
    157c:	09 f4       	brne	.+2      	; 0x1580 <vTaskStartScheduler+0x2c>
    157e:	55 d6       	rcall	.+3242   	; 0x222a <xTimerCreateTimerTask>
    1580:	81 30       	cpi	r24, 0x01	; 1
    1582:	f9 f4       	brne	.+62     	; 0x15c2 <vTaskStartScheduler+0x6e>
    1584:	f8 94       	cli
    1586:	8f ef       	ldi	r24, 0xFF	; 255
    1588:	9f ef       	ldi	r25, 0xFF	; 255
    158a:	dc 01       	movw	r26, r24
    158c:	80 93 a1 10 	sts	0x10A1, r24	; 0x8010a1 <xNextTaskUnblockTime>
    1590:	90 93 a2 10 	sts	0x10A2, r25	; 0x8010a2 <xNextTaskUnblockTime+0x1>
    1594:	a0 93 a3 10 	sts	0x10A3, r26	; 0x8010a3 <xNextTaskUnblockTime+0x2>
    1598:	b0 93 a4 10 	sts	0x10A4, r27	; 0x8010a4 <xNextTaskUnblockTime+0x3>
    159c:	81 e0       	ldi	r24, 0x01	; 1
    159e:	80 93 ac 10 	sts	0x10AC, r24	; 0x8010ac <xSchedulerRunning>
    15a2:	10 92 ae 10 	sts	0x10AE, r1	; 0x8010ae <xTickCount>
    15a6:	10 92 af 10 	sts	0x10AF, r1	; 0x8010af <xTickCount+0x1>
    15aa:	10 92 b0 10 	sts	0x10B0, r1	; 0x8010b0 <xTickCount+0x2>
    15ae:	10 92 b1 10 	sts	0x10B1, r1	; 0x8010b1 <xTickCount+0x3>
    15b2:	e0 91 5d 11 	lds	r30, 0x115D	; 0x80115d <pxCurrentTCB>
    15b6:	f0 91 5e 11 	lds	r31, 0x115E	; 0x80115e <pxCurrentTCB+0x1>
    15ba:	87 a5       	ldd	r24, Z+47	; 0x2f
    15bc:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <task_switch_in>
    15c0:	f5 d8       	rcall	.-3606   	; 0x7ac <xPortStartScheduler>
    15c2:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <uxTopUsedPriority>
    15c6:	0f 91       	pop	r16
    15c8:	ff 90       	pop	r15
    15ca:	ef 90       	pop	r14
    15cc:	08 95       	ret

000015ce <vTaskSuspendAll>:
    15ce:	80 91 9e 10 	lds	r24, 0x109E	; 0x80109e <uxSchedulerSuspended>
    15d2:	8f 5f       	subi	r24, 0xFF	; 255
    15d4:	80 93 9e 10 	sts	0x109E, r24	; 0x80109e <uxSchedulerSuspended>
    15d8:	08 95       	ret

000015da <xTaskGetTickCount>:
    15da:	0f b6       	in	r0, 0x3f	; 63
    15dc:	f8 94       	cli
    15de:	0f 92       	push	r0
    15e0:	60 91 ae 10 	lds	r22, 0x10AE	; 0x8010ae <xTickCount>
    15e4:	70 91 af 10 	lds	r23, 0x10AF	; 0x8010af <xTickCount+0x1>
    15e8:	80 91 b0 10 	lds	r24, 0x10B0	; 0x8010b0 <xTickCount+0x2>
    15ec:	90 91 b1 10 	lds	r25, 0x10B1	; 0x8010b1 <xTickCount+0x3>
    15f0:	0f 90       	pop	r0
    15f2:	0f be       	out	0x3f, r0	; 63
    15f4:	08 95       	ret

000015f6 <xTaskIncrementTick>:
    15f6:	cf 92       	push	r12
    15f8:	df 92       	push	r13
    15fa:	ef 92       	push	r14
    15fc:	ff 92       	push	r15
    15fe:	cf 93       	push	r28
    1600:	df 93       	push	r29
    1602:	80 91 9e 10 	lds	r24, 0x109E	; 0x80109e <uxSchedulerSuspended>
    1606:	81 11       	cpse	r24, r1
    1608:	05 c1       	rjmp	.+522    	; 0x1814 <xTaskIncrementTick+0x21e>
    160a:	c0 90 ae 10 	lds	r12, 0x10AE	; 0x8010ae <xTickCount>
    160e:	d0 90 af 10 	lds	r13, 0x10AF	; 0x8010af <xTickCount+0x1>
    1612:	e0 90 b0 10 	lds	r14, 0x10B0	; 0x8010b0 <xTickCount+0x2>
    1616:	f0 90 b1 10 	lds	r15, 0x10B1	; 0x8010b1 <xTickCount+0x3>
    161a:	8f ef       	ldi	r24, 0xFF	; 255
    161c:	c8 1a       	sub	r12, r24
    161e:	d8 0a       	sbc	r13, r24
    1620:	e8 0a       	sbc	r14, r24
    1622:	f8 0a       	sbc	r15, r24
    1624:	c0 92 ae 10 	sts	0x10AE, r12	; 0x8010ae <xTickCount>
    1628:	d0 92 af 10 	sts	0x10AF, r13	; 0x8010af <xTickCount+0x1>
    162c:	e0 92 b0 10 	sts	0x10B0, r14	; 0x8010b0 <xTickCount+0x2>
    1630:	f0 92 b1 10 	sts	0x10B1, r15	; 0x8010b1 <xTickCount+0x3>
    1634:	c1 14       	cp	r12, r1
    1636:	d1 04       	cpc	r13, r1
    1638:	e1 04       	cpc	r14, r1
    163a:	f1 04       	cpc	r15, r1
    163c:	b1 f4       	brne	.+44     	; 0x166a <xTaskIncrementTick+0x74>
    163e:	80 91 d7 10 	lds	r24, 0x10D7	; 0x8010d7 <pxDelayedTaskList>
    1642:	90 91 d8 10 	lds	r25, 0x10D8	; 0x8010d8 <pxDelayedTaskList+0x1>
    1646:	20 91 d5 10 	lds	r18, 0x10D5	; 0x8010d5 <pxOverflowDelayedTaskList>
    164a:	30 91 d6 10 	lds	r19, 0x10D6	; 0x8010d6 <pxOverflowDelayedTaskList+0x1>
    164e:	30 93 d8 10 	sts	0x10D8, r19	; 0x8010d8 <pxDelayedTaskList+0x1>
    1652:	20 93 d7 10 	sts	0x10D7, r18	; 0x8010d7 <pxDelayedTaskList>
    1656:	90 93 d6 10 	sts	0x10D6, r25	; 0x8010d6 <pxOverflowDelayedTaskList+0x1>
    165a:	80 93 d5 10 	sts	0x10D5, r24	; 0x8010d5 <pxOverflowDelayedTaskList>
    165e:	80 91 a6 10 	lds	r24, 0x10A6	; 0x8010a6 <xNumOfOverflows>
    1662:	8f 5f       	subi	r24, 0xFF	; 255
    1664:	80 93 a6 10 	sts	0x10A6, r24	; 0x8010a6 <xNumOfOverflows>
    1668:	20 dd       	rcall	.-1472   	; 0x10aa <prvResetNextTaskUnblockTime>
    166a:	80 91 a1 10 	lds	r24, 0x10A1	; 0x8010a1 <xNextTaskUnblockTime>
    166e:	90 91 a2 10 	lds	r25, 0x10A2	; 0x8010a2 <xNextTaskUnblockTime+0x1>
    1672:	a0 91 a3 10 	lds	r26, 0x10A3	; 0x8010a3 <xNextTaskUnblockTime+0x2>
    1676:	b0 91 a4 10 	lds	r27, 0x10A4	; 0x8010a4 <xNextTaskUnblockTime+0x3>
    167a:	c8 16       	cp	r12, r24
    167c:	d9 06       	cpc	r13, r25
    167e:	ea 06       	cpc	r14, r26
    1680:	fb 06       	cpc	r15, r27
    1682:	20 f4       	brcc	.+8      	; 0x168c <xTaskIncrementTick+0x96>
    1684:	80 e0       	ldi	r24, 0x00	; 0
    1686:	b2 c0       	rjmp	.+356    	; 0x17ec <xTaskIncrementTick+0x1f6>
    1688:	81 e0       	ldi	r24, 0x01	; 1
    168a:	01 c0       	rjmp	.+2      	; 0x168e <xTaskIncrementTick+0x98>
    168c:	80 e0       	ldi	r24, 0x00	; 0
    168e:	e0 91 d7 10 	lds	r30, 0x10D7	; 0x8010d7 <pxDelayedTaskList>
    1692:	f0 91 d8 10 	lds	r31, 0x10D8	; 0x8010d8 <pxDelayedTaskList+0x1>
    1696:	90 81       	ld	r25, Z
    1698:	91 11       	cpse	r25, r1
    169a:	0c c0       	rjmp	.+24     	; 0x16b4 <xTaskIncrementTick+0xbe>
    169c:	4f ef       	ldi	r20, 0xFF	; 255
    169e:	5f ef       	ldi	r21, 0xFF	; 255
    16a0:	ba 01       	movw	r22, r20
    16a2:	40 93 a1 10 	sts	0x10A1, r20	; 0x8010a1 <xNextTaskUnblockTime>
    16a6:	50 93 a2 10 	sts	0x10A2, r21	; 0x8010a2 <xNextTaskUnblockTime+0x1>
    16aa:	60 93 a3 10 	sts	0x10A3, r22	; 0x8010a3 <xNextTaskUnblockTime+0x2>
    16ae:	70 93 a4 10 	sts	0x10A4, r23	; 0x8010a4 <xNextTaskUnblockTime+0x3>
    16b2:	9c c0       	rjmp	.+312    	; 0x17ec <xTaskIncrementTick+0x1f6>
    16b4:	e0 91 d7 10 	lds	r30, 0x10D7	; 0x8010d7 <pxDelayedTaskList>
    16b8:	f0 91 d8 10 	lds	r31, 0x10D8	; 0x8010d8 <pxDelayedTaskList+0x1>
    16bc:	07 80       	ldd	r0, Z+7	; 0x07
    16be:	f0 85       	ldd	r31, Z+8	; 0x08
    16c0:	e0 2d       	mov	r30, r0
    16c2:	00 84       	ldd	r0, Z+8	; 0x08
    16c4:	f1 85       	ldd	r31, Z+9	; 0x09
    16c6:	e0 2d       	mov	r30, r0
    16c8:	42 81       	ldd	r20, Z+2	; 0x02
    16ca:	53 81       	ldd	r21, Z+3	; 0x03
    16cc:	64 81       	ldd	r22, Z+4	; 0x04
    16ce:	75 81       	ldd	r23, Z+5	; 0x05
    16d0:	c4 16       	cp	r12, r20
    16d2:	d5 06       	cpc	r13, r21
    16d4:	e6 06       	cpc	r14, r22
    16d6:	f7 06       	cpc	r15, r23
    16d8:	48 f4       	brcc	.+18     	; 0x16ec <xTaskIncrementTick+0xf6>
    16da:	40 93 a1 10 	sts	0x10A1, r20	; 0x8010a1 <xNextTaskUnblockTime>
    16de:	50 93 a2 10 	sts	0x10A2, r21	; 0x8010a2 <xNextTaskUnblockTime+0x1>
    16e2:	60 93 a3 10 	sts	0x10A3, r22	; 0x8010a3 <xNextTaskUnblockTime+0x2>
    16e6:	70 93 a4 10 	sts	0x10A4, r23	; 0x8010a4 <xNextTaskUnblockTime+0x3>
    16ea:	80 c0       	rjmp	.+256    	; 0x17ec <xTaskIncrementTick+0x1f6>
    16ec:	a4 85       	ldd	r26, Z+12	; 0x0c
    16ee:	b5 85       	ldd	r27, Z+13	; 0x0d
    16f0:	c6 81       	ldd	r28, Z+6	; 0x06
    16f2:	d7 81       	ldd	r29, Z+7	; 0x07
    16f4:	20 85       	ldd	r18, Z+8	; 0x08
    16f6:	31 85       	ldd	r19, Z+9	; 0x09
    16f8:	3f 83       	std	Y+7, r19	; 0x07
    16fa:	2e 83       	std	Y+6, r18	; 0x06
    16fc:	c0 85       	ldd	r28, Z+8	; 0x08
    16fe:	d1 85       	ldd	r29, Z+9	; 0x09
    1700:	26 81       	ldd	r18, Z+6	; 0x06
    1702:	37 81       	ldd	r19, Z+7	; 0x07
    1704:	3d 83       	std	Y+5, r19	; 0x05
    1706:	2c 83       	std	Y+4, r18	; 0x04
    1708:	11 96       	adiw	r26, 0x01	; 1
    170a:	4d 91       	ld	r20, X+
    170c:	5c 91       	ld	r21, X
    170e:	12 97       	sbiw	r26, 0x02	; 2
    1710:	9f 01       	movw	r18, r30
    1712:	2e 5f       	subi	r18, 0xFE	; 254
    1714:	3f 4f       	sbci	r19, 0xFF	; 255
    1716:	42 17       	cp	r20, r18
    1718:	53 07       	cpc	r21, r19
    171a:	31 f4       	brne	.+12     	; 0x1728 <xTaskIncrementTick+0x132>
    171c:	40 85       	ldd	r20, Z+8	; 0x08
    171e:	51 85       	ldd	r21, Z+9	; 0x09
    1720:	12 96       	adiw	r26, 0x02	; 2
    1722:	5c 93       	st	X, r21
    1724:	4e 93       	st	-X, r20
    1726:	11 97       	sbiw	r26, 0x01	; 1
    1728:	15 86       	std	Z+13, r1	; 0x0d
    172a:	14 86       	std	Z+12, r1	; 0x0c
    172c:	9c 91       	ld	r25, X
    172e:	91 50       	subi	r25, 0x01	; 1
    1730:	9c 93       	st	X, r25
    1732:	a0 8d       	ldd	r26, Z+24	; 0x18
    1734:	b1 8d       	ldd	r27, Z+25	; 0x19
    1736:	10 97       	sbiw	r26, 0x00	; 0
    1738:	09 f1       	breq	.+66     	; 0x177c <xTaskIncrementTick+0x186>
    173a:	c2 89       	ldd	r28, Z+18	; 0x12
    173c:	d3 89       	ldd	r29, Z+19	; 0x13
    173e:	44 89       	ldd	r20, Z+20	; 0x14
    1740:	55 89       	ldd	r21, Z+21	; 0x15
    1742:	5f 83       	std	Y+7, r21	; 0x07
    1744:	4e 83       	std	Y+6, r20	; 0x06
    1746:	c4 89       	ldd	r28, Z+20	; 0x14
    1748:	d5 89       	ldd	r29, Z+21	; 0x15
    174a:	42 89       	ldd	r20, Z+18	; 0x12
    174c:	53 89       	ldd	r21, Z+19	; 0x13
    174e:	5d 83       	std	Y+5, r21	; 0x05
    1750:	4c 83       	std	Y+4, r20	; 0x04
    1752:	11 96       	adiw	r26, 0x01	; 1
    1754:	6d 91       	ld	r22, X+
    1756:	7c 91       	ld	r23, X
    1758:	12 97       	sbiw	r26, 0x02	; 2
    175a:	af 01       	movw	r20, r30
    175c:	42 5f       	subi	r20, 0xF2	; 242
    175e:	5f 4f       	sbci	r21, 0xFF	; 255
    1760:	64 17       	cp	r22, r20
    1762:	75 07       	cpc	r23, r21
    1764:	31 f4       	brne	.+12     	; 0x1772 <xTaskIncrementTick+0x17c>
    1766:	44 89       	ldd	r20, Z+20	; 0x14
    1768:	55 89       	ldd	r21, Z+21	; 0x15
    176a:	12 96       	adiw	r26, 0x02	; 2
    176c:	5c 93       	st	X, r21
    176e:	4e 93       	st	-X, r20
    1770:	11 97       	sbiw	r26, 0x01	; 1
    1772:	11 8e       	std	Z+25, r1	; 0x19
    1774:	10 8e       	std	Z+24, r1	; 0x18
    1776:	9c 91       	ld	r25, X
    1778:	91 50       	subi	r25, 0x01	; 1
    177a:	9c 93       	st	X, r25
    177c:	a2 8d       	ldd	r26, Z+26	; 0x1a
    177e:	90 91 ad 10 	lds	r25, 0x10AD	; 0x8010ad <uxTopReadyPriority>
    1782:	9a 17       	cp	r25, r26
    1784:	10 f4       	brcc	.+4      	; 0x178a <xTaskIncrementTick+0x194>
    1786:	a0 93 ad 10 	sts	0x10AD, r26	; 0x8010ad <uxTopReadyPriority>
    178a:	9b e0       	ldi	r25, 0x0B	; 11
    178c:	9a 9f       	mul	r25, r26
    178e:	d0 01       	movw	r26, r0
    1790:	11 24       	eor	r1, r1
    1792:	a1 51       	subi	r26, 0x11	; 17
    1794:	bf 4e       	sbci	r27, 0xEF	; 239
    1796:	11 96       	adiw	r26, 0x01	; 1
    1798:	0d 90       	ld	r0, X+
    179a:	bc 91       	ld	r27, X
    179c:	a0 2d       	mov	r26, r0
    179e:	b7 83       	std	Z+7, r27	; 0x07
    17a0:	a6 83       	std	Z+6, r26	; 0x06
    17a2:	16 96       	adiw	r26, 0x06	; 6
    17a4:	4d 91       	ld	r20, X+
    17a6:	5c 91       	ld	r21, X
    17a8:	17 97       	sbiw	r26, 0x07	; 7
    17aa:	51 87       	std	Z+9, r21	; 0x09
    17ac:	40 87       	std	Z+8, r20	; 0x08
    17ae:	16 96       	adiw	r26, 0x06	; 6
    17b0:	cd 91       	ld	r28, X+
    17b2:	dc 91       	ld	r29, X
    17b4:	17 97       	sbiw	r26, 0x07	; 7
    17b6:	3d 83       	std	Y+5, r19	; 0x05
    17b8:	2c 83       	std	Y+4, r18	; 0x04
    17ba:	17 96       	adiw	r26, 0x07	; 7
    17bc:	3c 93       	st	X, r19
    17be:	2e 93       	st	-X, r18
    17c0:	16 97       	sbiw	r26, 0x06	; 6
    17c2:	a2 8d       	ldd	r26, Z+26	; 0x1a
    17c4:	9a 9f       	mul	r25, r26
    17c6:	d0 01       	movw	r26, r0
    17c8:	11 24       	eor	r1, r1
    17ca:	a1 51       	subi	r26, 0x11	; 17
    17cc:	bf 4e       	sbci	r27, 0xEF	; 239
    17ce:	b5 87       	std	Z+13, r27	; 0x0d
    17d0:	a4 87       	std	Z+12, r26	; 0x0c
    17d2:	9c 91       	ld	r25, X
    17d4:	9f 5f       	subi	r25, 0xFF	; 255
    17d6:	9c 93       	st	X, r25
    17d8:	22 8d       	ldd	r18, Z+26	; 0x1a
    17da:	e0 91 5d 11 	lds	r30, 0x115D	; 0x80115d <pxCurrentTCB>
    17de:	f0 91 5e 11 	lds	r31, 0x115E	; 0x80115e <pxCurrentTCB+0x1>
    17e2:	92 8d       	ldd	r25, Z+26	; 0x1a
    17e4:	29 17       	cp	r18, r25
    17e6:	08 f0       	brcs	.+2      	; 0x17ea <xTaskIncrementTick+0x1f4>
    17e8:	4f cf       	rjmp	.-354    	; 0x1688 <xTaskIncrementTick+0x92>
    17ea:	51 cf       	rjmp	.-350    	; 0x168e <xTaskIncrementTick+0x98>
    17ec:	e0 91 5d 11 	lds	r30, 0x115D	; 0x80115d <pxCurrentTCB>
    17f0:	f0 91 5e 11 	lds	r31, 0x115E	; 0x80115e <pxCurrentTCB+0x1>
    17f4:	e2 8d       	ldd	r30, Z+26	; 0x1a
    17f6:	9b e0       	ldi	r25, 0x0B	; 11
    17f8:	e9 9f       	mul	r30, r25
    17fa:	f0 01       	movw	r30, r0
    17fc:	11 24       	eor	r1, r1
    17fe:	e1 51       	subi	r30, 0x11	; 17
    1800:	ff 4e       	sbci	r31, 0xEF	; 239
    1802:	90 81       	ld	r25, Z
    1804:	92 30       	cpi	r25, 0x02	; 2
    1806:	08 f0       	brcs	.+2      	; 0x180a <xTaskIncrementTick+0x214>
    1808:	81 e0       	ldi	r24, 0x01	; 1
    180a:	90 91 a7 10 	lds	r25, 0x10A7	; 0x8010a7 <xYieldPending>
    180e:	91 11       	cpse	r25, r1
    1810:	16 c0       	rjmp	.+44     	; 0x183e <xTaskIncrementTick+0x248>
    1812:	16 c0       	rjmp	.+44     	; 0x1840 <xTaskIncrementTick+0x24a>
    1814:	80 91 a8 10 	lds	r24, 0x10A8	; 0x8010a8 <xPendedTicks>
    1818:	90 91 a9 10 	lds	r25, 0x10A9	; 0x8010a9 <xPendedTicks+0x1>
    181c:	a0 91 aa 10 	lds	r26, 0x10AA	; 0x8010aa <xPendedTicks+0x2>
    1820:	b0 91 ab 10 	lds	r27, 0x10AB	; 0x8010ab <xPendedTicks+0x3>
    1824:	01 96       	adiw	r24, 0x01	; 1
    1826:	a1 1d       	adc	r26, r1
    1828:	b1 1d       	adc	r27, r1
    182a:	80 93 a8 10 	sts	0x10A8, r24	; 0x8010a8 <xPendedTicks>
    182e:	90 93 a9 10 	sts	0x10A9, r25	; 0x8010a9 <xPendedTicks+0x1>
    1832:	a0 93 aa 10 	sts	0x10AA, r26	; 0x8010aa <xPendedTicks+0x2>
    1836:	b0 93 ab 10 	sts	0x10AB, r27	; 0x8010ab <xPendedTicks+0x3>
    183a:	80 e0       	ldi	r24, 0x00	; 0
    183c:	01 c0       	rjmp	.+2      	; 0x1840 <xTaskIncrementTick+0x24a>
    183e:	81 e0       	ldi	r24, 0x01	; 1
    1840:	df 91       	pop	r29
    1842:	cf 91       	pop	r28
    1844:	ff 90       	pop	r15
    1846:	ef 90       	pop	r14
    1848:	df 90       	pop	r13
    184a:	cf 90       	pop	r12
    184c:	08 95       	ret

0000184e <xTaskResumeAll>:
    184e:	cf 92       	push	r12
    1850:	df 92       	push	r13
    1852:	ef 92       	push	r14
    1854:	ff 92       	push	r15
    1856:	cf 93       	push	r28
    1858:	df 93       	push	r29
    185a:	0f b6       	in	r0, 0x3f	; 63
    185c:	f8 94       	cli
    185e:	0f 92       	push	r0
    1860:	80 91 9e 10 	lds	r24, 0x109E	; 0x80109e <uxSchedulerSuspended>
    1864:	81 50       	subi	r24, 0x01	; 1
    1866:	80 93 9e 10 	sts	0x109E, r24	; 0x80109e <uxSchedulerSuspended>
    186a:	80 91 9e 10 	lds	r24, 0x109E	; 0x80109e <uxSchedulerSuspended>
    186e:	81 11       	cpse	r24, r1
    1870:	be c0       	rjmp	.+380    	; 0x19ee <xTaskResumeAll+0x1a0>
    1872:	80 91 b2 10 	lds	r24, 0x10B2	; 0x8010b2 <uxCurrentNumberOfTasks>
    1876:	81 11       	cpse	r24, r1
    1878:	88 c0       	rjmp	.+272    	; 0x198a <xTaskResumeAll+0x13c>
    187a:	bc c0       	rjmp	.+376    	; 0x19f4 <xTaskResumeAll+0x1a6>
    187c:	e0 91 d1 10 	lds	r30, 0x10D1	; 0x8010d1 <xPendingReadyList+0x7>
    1880:	f0 91 d2 10 	lds	r31, 0x10D2	; 0x8010d2 <xPendingReadyList+0x8>
    1884:	00 84       	ldd	r0, Z+8	; 0x08
    1886:	f1 85       	ldd	r31, Z+9	; 0x09
    1888:	e0 2d       	mov	r30, r0
    188a:	a0 8d       	ldd	r26, Z+24	; 0x18
    188c:	b1 8d       	ldd	r27, Z+25	; 0x19
    188e:	c2 89       	ldd	r28, Z+18	; 0x12
    1890:	d3 89       	ldd	r29, Z+19	; 0x13
    1892:	84 89       	ldd	r24, Z+20	; 0x14
    1894:	95 89       	ldd	r25, Z+21	; 0x15
    1896:	9f 83       	std	Y+7, r25	; 0x07
    1898:	8e 83       	std	Y+6, r24	; 0x06
    189a:	c4 89       	ldd	r28, Z+20	; 0x14
    189c:	d5 89       	ldd	r29, Z+21	; 0x15
    189e:	82 89       	ldd	r24, Z+18	; 0x12
    18a0:	93 89       	ldd	r25, Z+19	; 0x13
    18a2:	9d 83       	std	Y+5, r25	; 0x05
    18a4:	8c 83       	std	Y+4, r24	; 0x04
    18a6:	11 96       	adiw	r26, 0x01	; 1
    18a8:	2d 91       	ld	r18, X+
    18aa:	3c 91       	ld	r19, X
    18ac:	12 97       	sbiw	r26, 0x02	; 2
    18ae:	cf 01       	movw	r24, r30
    18b0:	0e 96       	adiw	r24, 0x0e	; 14
    18b2:	28 17       	cp	r18, r24
    18b4:	39 07       	cpc	r19, r25
    18b6:	31 f4       	brne	.+12     	; 0x18c4 <xTaskResumeAll+0x76>
    18b8:	84 89       	ldd	r24, Z+20	; 0x14
    18ba:	95 89       	ldd	r25, Z+21	; 0x15
    18bc:	12 96       	adiw	r26, 0x02	; 2
    18be:	9c 93       	st	X, r25
    18c0:	8e 93       	st	-X, r24
    18c2:	11 97       	sbiw	r26, 0x01	; 1
    18c4:	11 8e       	std	Z+25, r1	; 0x19
    18c6:	10 8e       	std	Z+24, r1	; 0x18
    18c8:	8c 91       	ld	r24, X
    18ca:	81 50       	subi	r24, 0x01	; 1
    18cc:	8c 93       	st	X, r24
    18ce:	a4 85       	ldd	r26, Z+12	; 0x0c
    18d0:	b5 85       	ldd	r27, Z+13	; 0x0d
    18d2:	c6 81       	ldd	r28, Z+6	; 0x06
    18d4:	d7 81       	ldd	r29, Z+7	; 0x07
    18d6:	80 85       	ldd	r24, Z+8	; 0x08
    18d8:	91 85       	ldd	r25, Z+9	; 0x09
    18da:	9f 83       	std	Y+7, r25	; 0x07
    18dc:	8e 83       	std	Y+6, r24	; 0x06
    18de:	c0 85       	ldd	r28, Z+8	; 0x08
    18e0:	d1 85       	ldd	r29, Z+9	; 0x09
    18e2:	86 81       	ldd	r24, Z+6	; 0x06
    18e4:	97 81       	ldd	r25, Z+7	; 0x07
    18e6:	9d 83       	std	Y+5, r25	; 0x05
    18e8:	8c 83       	std	Y+4, r24	; 0x04
    18ea:	11 96       	adiw	r26, 0x01	; 1
    18ec:	8d 91       	ld	r24, X+
    18ee:	9c 91       	ld	r25, X
    18f0:	12 97       	sbiw	r26, 0x02	; 2
    18f2:	9f 01       	movw	r18, r30
    18f4:	2e 5f       	subi	r18, 0xFE	; 254
    18f6:	3f 4f       	sbci	r19, 0xFF	; 255
    18f8:	82 17       	cp	r24, r18
    18fa:	93 07       	cpc	r25, r19
    18fc:	31 f4       	brne	.+12     	; 0x190a <xTaskResumeAll+0xbc>
    18fe:	80 85       	ldd	r24, Z+8	; 0x08
    1900:	91 85       	ldd	r25, Z+9	; 0x09
    1902:	12 96       	adiw	r26, 0x02	; 2
    1904:	9c 93       	st	X, r25
    1906:	8e 93       	st	-X, r24
    1908:	11 97       	sbiw	r26, 0x01	; 1
    190a:	15 86       	std	Z+13, r1	; 0x0d
    190c:	14 86       	std	Z+12, r1	; 0x0c
    190e:	8c 91       	ld	r24, X
    1910:	81 50       	subi	r24, 0x01	; 1
    1912:	8c 93       	st	X, r24
    1914:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1916:	80 91 ad 10 	lds	r24, 0x10AD	; 0x8010ad <uxTopReadyPriority>
    191a:	8a 17       	cp	r24, r26
    191c:	10 f4       	brcc	.+4      	; 0x1922 <xTaskResumeAll+0xd4>
    191e:	a0 93 ad 10 	sts	0x10AD, r26	; 0x8010ad <uxTopReadyPriority>
    1922:	8b e0       	ldi	r24, 0x0B	; 11
    1924:	8a 9f       	mul	r24, r26
    1926:	d0 01       	movw	r26, r0
    1928:	11 24       	eor	r1, r1
    192a:	a1 51       	subi	r26, 0x11	; 17
    192c:	bf 4e       	sbci	r27, 0xEF	; 239
    192e:	11 96       	adiw	r26, 0x01	; 1
    1930:	0d 90       	ld	r0, X+
    1932:	bc 91       	ld	r27, X
    1934:	a0 2d       	mov	r26, r0
    1936:	b7 83       	std	Z+7, r27	; 0x07
    1938:	a6 83       	std	Z+6, r26	; 0x06
    193a:	16 96       	adiw	r26, 0x06	; 6
    193c:	4d 91       	ld	r20, X+
    193e:	5c 91       	ld	r21, X
    1940:	17 97       	sbiw	r26, 0x07	; 7
    1942:	51 87       	std	Z+9, r21	; 0x09
    1944:	40 87       	std	Z+8, r20	; 0x08
    1946:	16 96       	adiw	r26, 0x06	; 6
    1948:	cd 91       	ld	r28, X+
    194a:	dc 91       	ld	r29, X
    194c:	17 97       	sbiw	r26, 0x07	; 7
    194e:	3d 83       	std	Y+5, r19	; 0x05
    1950:	2c 83       	std	Y+4, r18	; 0x04
    1952:	17 96       	adiw	r26, 0x07	; 7
    1954:	3c 93       	st	X, r19
    1956:	2e 93       	st	-X, r18
    1958:	16 97       	sbiw	r26, 0x06	; 6
    195a:	a2 8d       	ldd	r26, Z+26	; 0x1a
    195c:	8a 9f       	mul	r24, r26
    195e:	d0 01       	movw	r26, r0
    1960:	11 24       	eor	r1, r1
    1962:	a1 51       	subi	r26, 0x11	; 17
    1964:	bf 4e       	sbci	r27, 0xEF	; 239
    1966:	b5 87       	std	Z+13, r27	; 0x0d
    1968:	a4 87       	std	Z+12, r26	; 0x0c
    196a:	8c 91       	ld	r24, X
    196c:	8f 5f       	subi	r24, 0xFF	; 255
    196e:	8c 93       	st	X, r24
    1970:	92 8d       	ldd	r25, Z+26	; 0x1a
    1972:	a0 91 5d 11 	lds	r26, 0x115D	; 0x80115d <pxCurrentTCB>
    1976:	b0 91 5e 11 	lds	r27, 0x115E	; 0x80115e <pxCurrentTCB+0x1>
    197a:	5a 96       	adiw	r26, 0x1a	; 26
    197c:	8c 91       	ld	r24, X
    197e:	98 17       	cp	r25, r24
    1980:	30 f0       	brcs	.+12     	; 0x198e <xTaskResumeAll+0x140>
    1982:	81 e0       	ldi	r24, 0x01	; 1
    1984:	80 93 a7 10 	sts	0x10A7, r24	; 0x8010a7 <xYieldPending>
    1988:	02 c0       	rjmp	.+4      	; 0x198e <xTaskResumeAll+0x140>
    198a:	e0 e0       	ldi	r30, 0x00	; 0
    198c:	f0 e0       	ldi	r31, 0x00	; 0
    198e:	80 91 ca 10 	lds	r24, 0x10CA	; 0x8010ca <xPendingReadyList>
    1992:	81 11       	cpse	r24, r1
    1994:	73 cf       	rjmp	.-282    	; 0x187c <xTaskResumeAll+0x2e>
    1996:	ef 2b       	or	r30, r31
    1998:	09 f0       	breq	.+2      	; 0x199c <xTaskResumeAll+0x14e>
    199a:	87 db       	rcall	.-2290   	; 0x10aa <prvResetNextTaskUnblockTime>
    199c:	c0 90 a8 10 	lds	r12, 0x10A8	; 0x8010a8 <xPendedTicks>
    19a0:	d0 90 a9 10 	lds	r13, 0x10A9	; 0x8010a9 <xPendedTicks+0x1>
    19a4:	e0 90 aa 10 	lds	r14, 0x10AA	; 0x8010aa <xPendedTicks+0x2>
    19a8:	f0 90 ab 10 	lds	r15, 0x10AB	; 0x8010ab <xPendedTicks+0x3>
    19ac:	c1 14       	cp	r12, r1
    19ae:	d1 04       	cpc	r13, r1
    19b0:	e1 04       	cpc	r14, r1
    19b2:	f1 04       	cpc	r15, r1
    19b4:	a1 f0       	breq	.+40     	; 0x19de <xTaskResumeAll+0x190>
    19b6:	1f de       	rcall	.-962    	; 0x15f6 <xTaskIncrementTick>
    19b8:	88 23       	and	r24, r24
    19ba:	19 f0       	breq	.+6      	; 0x19c2 <xTaskResumeAll+0x174>
    19bc:	81 e0       	ldi	r24, 0x01	; 1
    19be:	80 93 a7 10 	sts	0x10A7, r24	; 0x8010a7 <xYieldPending>
    19c2:	81 e0       	ldi	r24, 0x01	; 1
    19c4:	c8 1a       	sub	r12, r24
    19c6:	d1 08       	sbc	r13, r1
    19c8:	e1 08       	sbc	r14, r1
    19ca:	f1 08       	sbc	r15, r1
    19cc:	a1 f7       	brne	.-24     	; 0x19b6 <xTaskResumeAll+0x168>
    19ce:	10 92 a8 10 	sts	0x10A8, r1	; 0x8010a8 <xPendedTicks>
    19d2:	10 92 a9 10 	sts	0x10A9, r1	; 0x8010a9 <xPendedTicks+0x1>
    19d6:	10 92 aa 10 	sts	0x10AA, r1	; 0x8010aa <xPendedTicks+0x2>
    19da:	10 92 ab 10 	sts	0x10AB, r1	; 0x8010ab <xPendedTicks+0x3>
    19de:	80 91 a7 10 	lds	r24, 0x10A7	; 0x8010a7 <xYieldPending>
    19e2:	88 23       	and	r24, r24
    19e4:	31 f0       	breq	.+12     	; 0x19f2 <xTaskResumeAll+0x1a4>
    19e6:	0e 94 08 04 	call	0x810	; 0x810 <vPortYield>
    19ea:	81 e0       	ldi	r24, 0x01	; 1
    19ec:	03 c0       	rjmp	.+6      	; 0x19f4 <xTaskResumeAll+0x1a6>
    19ee:	80 e0       	ldi	r24, 0x00	; 0
    19f0:	01 c0       	rjmp	.+2      	; 0x19f4 <xTaskResumeAll+0x1a6>
    19f2:	80 e0       	ldi	r24, 0x00	; 0
    19f4:	0f 90       	pop	r0
    19f6:	0f be       	out	0x3f, r0	; 63
    19f8:	df 91       	pop	r29
    19fa:	cf 91       	pop	r28
    19fc:	ff 90       	pop	r15
    19fe:	ef 90       	pop	r14
    1a00:	df 90       	pop	r13
    1a02:	cf 90       	pop	r12
    1a04:	08 95       	ret

00001a06 <vTaskDelay>:
    1a06:	cf 92       	push	r12
    1a08:	df 92       	push	r13
    1a0a:	ef 92       	push	r14
    1a0c:	ff 92       	push	r15
    1a0e:	6b 01       	movw	r12, r22
    1a10:	7c 01       	movw	r14, r24
    1a12:	67 2b       	or	r22, r23
    1a14:	68 2b       	or	r22, r24
    1a16:	69 2b       	or	r22, r25
    1a18:	39 f0       	breq	.+14     	; 0x1a28 <vTaskDelay+0x22>
    1a1a:	d9 dd       	rcall	.-1102   	; 0x15ce <vTaskSuspendAll>
    1a1c:	40 e0       	ldi	r20, 0x00	; 0
    1a1e:	c7 01       	movw	r24, r14
    1a20:	b6 01       	movw	r22, r12
    1a22:	ae dc       	rcall	.-1700   	; 0x1380 <prvAddCurrentTaskToDelayedList>
    1a24:	14 df       	rcall	.-472    	; 0x184e <xTaskResumeAll>
    1a26:	01 c0       	rjmp	.+2      	; 0x1a2a <vTaskDelay+0x24>
    1a28:	80 e0       	ldi	r24, 0x00	; 0
    1a2a:	81 11       	cpse	r24, r1
    1a2c:	02 c0       	rjmp	.+4      	; 0x1a32 <vTaskDelay+0x2c>
    1a2e:	0e 94 08 04 	call	0x810	; 0x810 <vPortYield>
    1a32:	ff 90       	pop	r15
    1a34:	ef 90       	pop	r14
    1a36:	df 90       	pop	r13
    1a38:	cf 90       	pop	r12
    1a3a:	08 95       	ret

00001a3c <vTaskSetApplicationTaskTag>:
    1a3c:	00 97       	sbiw	r24, 0x00	; 0
    1a3e:	21 f4       	brne	.+8      	; 0x1a48 <vTaskSetApplicationTaskTag+0xc>
    1a40:	80 91 5d 11 	lds	r24, 0x115D	; 0x80115d <pxCurrentTCB>
    1a44:	90 91 5e 11 	lds	r25, 0x115E	; 0x80115e <pxCurrentTCB+0x1>
    1a48:	0f b6       	in	r0, 0x3f	; 63
    1a4a:	f8 94       	cli
    1a4c:	0f 92       	push	r0
    1a4e:	fc 01       	movw	r30, r24
    1a50:	70 ab       	std	Z+48, r23	; 0x30
    1a52:	67 a7       	std	Z+47, r22	; 0x2f
    1a54:	0f 90       	pop	r0
    1a56:	0f be       	out	0x3f, r0	; 63
    1a58:	08 95       	ret

00001a5a <vTaskSwitchContext>:
    1a5a:	80 91 9e 10 	lds	r24, 0x109E	; 0x80109e <uxSchedulerSuspended>
    1a5e:	88 23       	and	r24, r24
    1a60:	21 f0       	breq	.+8      	; 0x1a6a <vTaskSwitchContext+0x10>
    1a62:	81 e0       	ldi	r24, 0x01	; 1
    1a64:	80 93 a7 10 	sts	0x10A7, r24	; 0x8010a7 <xYieldPending>
    1a68:	08 95       	ret
    1a6a:	10 92 a7 10 	sts	0x10A7, r1	; 0x8010a7 <xYieldPending>
    1a6e:	e0 91 5d 11 	lds	r30, 0x115D	; 0x80115d <pxCurrentTCB>
    1a72:	f0 91 5e 11 	lds	r31, 0x115E	; 0x80115e <pxCurrentTCB+0x1>
    1a76:	87 a5       	ldd	r24, Z+47	; 0x2f
    1a78:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <task_switch_out>
    1a7c:	e0 91 5d 11 	lds	r30, 0x115D	; 0x80115d <pxCurrentTCB>
    1a80:	f0 91 5e 11 	lds	r31, 0x115E	; 0x80115e <pxCurrentTCB+0x1>
    1a84:	20 81       	ld	r18, Z
    1a86:	31 81       	ldd	r19, Z+1	; 0x01
    1a88:	e0 91 5d 11 	lds	r30, 0x115D	; 0x80115d <pxCurrentTCB>
    1a8c:	f0 91 5e 11 	lds	r31, 0x115E	; 0x80115e <pxCurrentTCB+0x1>
    1a90:	83 8d       	ldd	r24, Z+27	; 0x1b
    1a92:	94 8d       	ldd	r25, Z+28	; 0x1c
    1a94:	82 17       	cp	r24, r18
    1a96:	93 07       	cpc	r25, r19
    1a98:	58 f0       	brcs	.+22     	; 0x1ab0 <vTaskSwitchContext+0x56>
    1a9a:	60 91 5d 11 	lds	r22, 0x115D	; 0x80115d <pxCurrentTCB>
    1a9e:	70 91 5e 11 	lds	r23, 0x115E	; 0x80115e <pxCurrentTCB+0x1>
    1aa2:	63 5e       	subi	r22, 0xE3	; 227
    1aa4:	7f 4f       	sbci	r23, 0xFF	; 255
    1aa6:	80 91 5d 11 	lds	r24, 0x115D	; 0x80115d <pxCurrentTCB>
    1aaa:	90 91 5e 11 	lds	r25, 0x115E	; 0x80115e <pxCurrentTCB+0x1>
    1aae:	44 d6       	rcall	.+3208   	; 0x2738 <vApplicationStackOverflowHook>
    1ab0:	80 91 ad 10 	lds	r24, 0x10AD	; 0x8010ad <uxTopReadyPriority>
    1ab4:	01 c0       	rjmp	.+2      	; 0x1ab8 <vTaskSwitchContext+0x5e>
    1ab6:	81 50       	subi	r24, 0x01	; 1
    1ab8:	28 2f       	mov	r18, r24
    1aba:	30 e0       	ldi	r19, 0x00	; 0
    1abc:	9b e0       	ldi	r25, 0x0B	; 11
    1abe:	92 9f       	mul	r25, r18
    1ac0:	f0 01       	movw	r30, r0
    1ac2:	93 9f       	mul	r25, r19
    1ac4:	f0 0d       	add	r31, r0
    1ac6:	11 24       	eor	r1, r1
    1ac8:	e1 51       	subi	r30, 0x11	; 17
    1aca:	ff 4e       	sbci	r31, 0xEF	; 239
    1acc:	90 81       	ld	r25, Z
    1ace:	99 23       	and	r25, r25
    1ad0:	91 f3       	breq	.-28     	; 0x1ab6 <vTaskSwitchContext+0x5c>
    1ad2:	9b e0       	ldi	r25, 0x0B	; 11
    1ad4:	92 9f       	mul	r25, r18
    1ad6:	a0 01       	movw	r20, r0
    1ad8:	93 9f       	mul	r25, r19
    1ada:	50 0d       	add	r21, r0
    1adc:	11 24       	eor	r1, r1
    1ade:	df 01       	movw	r26, r30
    1ae0:	01 80       	ldd	r0, Z+1	; 0x01
    1ae2:	f2 81       	ldd	r31, Z+2	; 0x02
    1ae4:	e0 2d       	mov	r30, r0
    1ae6:	04 80       	ldd	r0, Z+4	; 0x04
    1ae8:	f5 81       	ldd	r31, Z+5	; 0x05
    1aea:	e0 2d       	mov	r30, r0
    1aec:	12 96       	adiw	r26, 0x02	; 2
    1aee:	fc 93       	st	X, r31
    1af0:	ee 93       	st	-X, r30
    1af2:	11 97       	sbiw	r26, 0x01	; 1
    1af4:	4e 50       	subi	r20, 0x0E	; 14
    1af6:	5f 4e       	sbci	r21, 0xEF	; 239
    1af8:	e4 17       	cp	r30, r20
    1afa:	f5 07       	cpc	r31, r21
    1afc:	29 f4       	brne	.+10     	; 0x1b08 <vTaskSwitchContext+0xae>
    1afe:	44 81       	ldd	r20, Z+4	; 0x04
    1b00:	55 81       	ldd	r21, Z+5	; 0x05
    1b02:	fd 01       	movw	r30, r26
    1b04:	52 83       	std	Z+2, r21	; 0x02
    1b06:	41 83       	std	Z+1, r20	; 0x01
    1b08:	9b e0       	ldi	r25, 0x0B	; 11
    1b0a:	92 9f       	mul	r25, r18
    1b0c:	f0 01       	movw	r30, r0
    1b0e:	93 9f       	mul	r25, r19
    1b10:	f0 0d       	add	r31, r0
    1b12:	11 24       	eor	r1, r1
    1b14:	e1 51       	subi	r30, 0x11	; 17
    1b16:	ff 4e       	sbci	r31, 0xEF	; 239
    1b18:	01 80       	ldd	r0, Z+1	; 0x01
    1b1a:	f2 81       	ldd	r31, Z+2	; 0x02
    1b1c:	e0 2d       	mov	r30, r0
    1b1e:	20 85       	ldd	r18, Z+8	; 0x08
    1b20:	31 85       	ldd	r19, Z+9	; 0x09
    1b22:	30 93 5e 11 	sts	0x115E, r19	; 0x80115e <pxCurrentTCB+0x1>
    1b26:	20 93 5d 11 	sts	0x115D, r18	; 0x80115d <pxCurrentTCB>
    1b2a:	80 93 ad 10 	sts	0x10AD, r24	; 0x8010ad <uxTopReadyPriority>
    1b2e:	e0 91 5d 11 	lds	r30, 0x115D	; 0x80115d <pxCurrentTCB>
    1b32:	f0 91 5e 11 	lds	r31, 0x115E	; 0x80115e <pxCurrentTCB+0x1>
    1b36:	87 a5       	ldd	r24, Z+47	; 0x2f
    1b38:	0c 94 d2 01 	jmp	0x3a4	; 0x3a4 <task_switch_in>
    1b3c:	08 95       	ret

00001b3e <vTaskPlaceOnEventList>:
    1b3e:	cf 92       	push	r12
    1b40:	df 92       	push	r13
    1b42:	ef 92       	push	r14
    1b44:	ff 92       	push	r15
    1b46:	6a 01       	movw	r12, r20
    1b48:	7b 01       	movw	r14, r22
    1b4a:	60 91 5d 11 	lds	r22, 0x115D	; 0x80115d <pxCurrentTCB>
    1b4e:	70 91 5e 11 	lds	r23, 0x115E	; 0x80115e <pxCurrentTCB+0x1>
    1b52:	62 5f       	subi	r22, 0xF2	; 242
    1b54:	7f 4f       	sbci	r23, 0xFF	; 255
    1b56:	0e 94 4f 03 	call	0x69e	; 0x69e <vListInsert>
    1b5a:	41 e0       	ldi	r20, 0x01	; 1
    1b5c:	c7 01       	movw	r24, r14
    1b5e:	b6 01       	movw	r22, r12
    1b60:	0f dc       	rcall	.-2018   	; 0x1380 <prvAddCurrentTaskToDelayedList>
    1b62:	ff 90       	pop	r15
    1b64:	ef 90       	pop	r14
    1b66:	df 90       	pop	r13
    1b68:	cf 90       	pop	r12
    1b6a:	08 95       	ret

00001b6c <vTaskPlaceOnEventListRestricted>:
    1b6c:	cf 93       	push	r28
    1b6e:	df 93       	push	r29
    1b70:	fc 01       	movw	r30, r24
    1b72:	cb 01       	movw	r24, r22
    1b74:	ba 01       	movw	r22, r20
    1b76:	a1 81       	ldd	r26, Z+1	; 0x01
    1b78:	b2 81       	ldd	r27, Z+2	; 0x02
    1b7a:	c0 91 5d 11 	lds	r28, 0x115D	; 0x80115d <pxCurrentTCB>
    1b7e:	d0 91 5e 11 	lds	r29, 0x115E	; 0x80115e <pxCurrentTCB+0x1>
    1b82:	bb 8b       	std	Y+19, r27	; 0x13
    1b84:	aa 8b       	std	Y+18, r26	; 0x12
    1b86:	c0 91 5d 11 	lds	r28, 0x115D	; 0x80115d <pxCurrentTCB>
    1b8a:	d0 91 5e 11 	lds	r29, 0x115E	; 0x80115e <pxCurrentTCB+0x1>
    1b8e:	16 96       	adiw	r26, 0x06	; 6
    1b90:	4d 91       	ld	r20, X+
    1b92:	5c 91       	ld	r21, X
    1b94:	17 97       	sbiw	r26, 0x07	; 7
    1b96:	5d 8b       	std	Y+21, r21	; 0x15
    1b98:	4c 8b       	std	Y+20, r20	; 0x14
    1b9a:	16 96       	adiw	r26, 0x06	; 6
    1b9c:	cd 91       	ld	r28, X+
    1b9e:	dc 91       	ld	r29, X
    1ba0:	17 97       	sbiw	r26, 0x07	; 7
    1ba2:	40 91 5d 11 	lds	r20, 0x115D	; 0x80115d <pxCurrentTCB>
    1ba6:	50 91 5e 11 	lds	r21, 0x115E	; 0x80115e <pxCurrentTCB+0x1>
    1baa:	42 5f       	subi	r20, 0xF2	; 242
    1bac:	5f 4f       	sbci	r21, 0xFF	; 255
    1bae:	5d 83       	std	Y+5, r21	; 0x05
    1bb0:	4c 83       	std	Y+4, r20	; 0x04
    1bb2:	40 91 5d 11 	lds	r20, 0x115D	; 0x80115d <pxCurrentTCB>
    1bb6:	50 91 5e 11 	lds	r21, 0x115E	; 0x80115e <pxCurrentTCB+0x1>
    1bba:	42 5f       	subi	r20, 0xF2	; 242
    1bbc:	5f 4f       	sbci	r21, 0xFF	; 255
    1bbe:	17 96       	adiw	r26, 0x07	; 7
    1bc0:	5c 93       	st	X, r21
    1bc2:	4e 93       	st	-X, r20
    1bc4:	16 97       	sbiw	r26, 0x06	; 6
    1bc6:	a0 91 5d 11 	lds	r26, 0x115D	; 0x80115d <pxCurrentTCB>
    1bca:	b0 91 5e 11 	lds	r27, 0x115E	; 0x80115e <pxCurrentTCB+0x1>
    1bce:	59 96       	adiw	r26, 0x19	; 25
    1bd0:	fc 93       	st	X, r31
    1bd2:	ee 93       	st	-X, r30
    1bd4:	58 97       	sbiw	r26, 0x18	; 24
    1bd6:	30 81       	ld	r19, Z
    1bd8:	3f 5f       	subi	r19, 0xFF	; 255
    1bda:	30 83       	st	Z, r19
    1bdc:	22 23       	and	r18, r18
    1bde:	19 f0       	breq	.+6      	; 0x1be6 <vTaskPlaceOnEventListRestricted+0x7a>
    1be0:	6f ef       	ldi	r22, 0xFF	; 255
    1be2:	7f ef       	ldi	r23, 0xFF	; 255
    1be4:	cb 01       	movw	r24, r22
    1be6:	42 2f       	mov	r20, r18
    1be8:	cb db       	rcall	.-2154   	; 0x1380 <prvAddCurrentTaskToDelayedList>
    1bea:	df 91       	pop	r29
    1bec:	cf 91       	pop	r28
    1bee:	08 95       	ret

00001bf0 <xTaskRemoveFromEventList>:
    1bf0:	cf 93       	push	r28
    1bf2:	df 93       	push	r29
    1bf4:	dc 01       	movw	r26, r24
    1bf6:	17 96       	adiw	r26, 0x07	; 7
    1bf8:	ed 91       	ld	r30, X+
    1bfa:	fc 91       	ld	r31, X
    1bfc:	18 97       	sbiw	r26, 0x08	; 8
    1bfe:	00 84       	ldd	r0, Z+8	; 0x08
    1c00:	f1 85       	ldd	r31, Z+9	; 0x09
    1c02:	e0 2d       	mov	r30, r0
    1c04:	a0 8d       	ldd	r26, Z+24	; 0x18
    1c06:	b1 8d       	ldd	r27, Z+25	; 0x19
    1c08:	c2 89       	ldd	r28, Z+18	; 0x12
    1c0a:	d3 89       	ldd	r29, Z+19	; 0x13
    1c0c:	84 89       	ldd	r24, Z+20	; 0x14
    1c0e:	95 89       	ldd	r25, Z+21	; 0x15
    1c10:	9f 83       	std	Y+7, r25	; 0x07
    1c12:	8e 83       	std	Y+6, r24	; 0x06
    1c14:	c4 89       	ldd	r28, Z+20	; 0x14
    1c16:	d5 89       	ldd	r29, Z+21	; 0x15
    1c18:	82 89       	ldd	r24, Z+18	; 0x12
    1c1a:	93 89       	ldd	r25, Z+19	; 0x13
    1c1c:	9d 83       	std	Y+5, r25	; 0x05
    1c1e:	8c 83       	std	Y+4, r24	; 0x04
    1c20:	11 96       	adiw	r26, 0x01	; 1
    1c22:	8d 91       	ld	r24, X+
    1c24:	9c 91       	ld	r25, X
    1c26:	12 97       	sbiw	r26, 0x02	; 2
    1c28:	9f 01       	movw	r18, r30
    1c2a:	22 5f       	subi	r18, 0xF2	; 242
    1c2c:	3f 4f       	sbci	r19, 0xFF	; 255
    1c2e:	82 17       	cp	r24, r18
    1c30:	93 07       	cpc	r25, r19
    1c32:	31 f4       	brne	.+12     	; 0x1c40 <xTaskRemoveFromEventList+0x50>
    1c34:	84 89       	ldd	r24, Z+20	; 0x14
    1c36:	95 89       	ldd	r25, Z+21	; 0x15
    1c38:	12 96       	adiw	r26, 0x02	; 2
    1c3a:	9c 93       	st	X, r25
    1c3c:	8e 93       	st	-X, r24
    1c3e:	11 97       	sbiw	r26, 0x01	; 1
    1c40:	11 8e       	std	Z+25, r1	; 0x19
    1c42:	10 8e       	std	Z+24, r1	; 0x18
    1c44:	8c 91       	ld	r24, X
    1c46:	81 50       	subi	r24, 0x01	; 1
    1c48:	8c 93       	st	X, r24
    1c4a:	80 91 9e 10 	lds	r24, 0x109E	; 0x80109e <uxSchedulerSuspended>
    1c4e:	81 11       	cpse	r24, r1
    1c50:	52 c0       	rjmp	.+164    	; 0x1cf6 <xTaskRemoveFromEventList+0x106>
    1c52:	a4 85       	ldd	r26, Z+12	; 0x0c
    1c54:	b5 85       	ldd	r27, Z+13	; 0x0d
    1c56:	c6 81       	ldd	r28, Z+6	; 0x06
    1c58:	d7 81       	ldd	r29, Z+7	; 0x07
    1c5a:	80 85       	ldd	r24, Z+8	; 0x08
    1c5c:	91 85       	ldd	r25, Z+9	; 0x09
    1c5e:	9f 83       	std	Y+7, r25	; 0x07
    1c60:	8e 83       	std	Y+6, r24	; 0x06
    1c62:	c0 85       	ldd	r28, Z+8	; 0x08
    1c64:	d1 85       	ldd	r29, Z+9	; 0x09
    1c66:	86 81       	ldd	r24, Z+6	; 0x06
    1c68:	97 81       	ldd	r25, Z+7	; 0x07
    1c6a:	9d 83       	std	Y+5, r25	; 0x05
    1c6c:	8c 83       	std	Y+4, r24	; 0x04
    1c6e:	11 96       	adiw	r26, 0x01	; 1
    1c70:	8d 91       	ld	r24, X+
    1c72:	9c 91       	ld	r25, X
    1c74:	12 97       	sbiw	r26, 0x02	; 2
    1c76:	9f 01       	movw	r18, r30
    1c78:	2e 5f       	subi	r18, 0xFE	; 254
    1c7a:	3f 4f       	sbci	r19, 0xFF	; 255
    1c7c:	82 17       	cp	r24, r18
    1c7e:	93 07       	cpc	r25, r19
    1c80:	31 f4       	brne	.+12     	; 0x1c8e <xTaskRemoveFromEventList+0x9e>
    1c82:	80 85       	ldd	r24, Z+8	; 0x08
    1c84:	91 85       	ldd	r25, Z+9	; 0x09
    1c86:	12 96       	adiw	r26, 0x02	; 2
    1c88:	9c 93       	st	X, r25
    1c8a:	8e 93       	st	-X, r24
    1c8c:	11 97       	sbiw	r26, 0x01	; 1
    1c8e:	15 86       	std	Z+13, r1	; 0x0d
    1c90:	14 86       	std	Z+12, r1	; 0x0c
    1c92:	8c 91       	ld	r24, X
    1c94:	81 50       	subi	r24, 0x01	; 1
    1c96:	8c 93       	st	X, r24
    1c98:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1c9a:	80 91 ad 10 	lds	r24, 0x10AD	; 0x8010ad <uxTopReadyPriority>
    1c9e:	8a 17       	cp	r24, r26
    1ca0:	10 f4       	brcc	.+4      	; 0x1ca6 <xTaskRemoveFromEventList+0xb6>
    1ca2:	a0 93 ad 10 	sts	0x10AD, r26	; 0x8010ad <uxTopReadyPriority>
    1ca6:	8b e0       	ldi	r24, 0x0B	; 11
    1ca8:	8a 9f       	mul	r24, r26
    1caa:	d0 01       	movw	r26, r0
    1cac:	11 24       	eor	r1, r1
    1cae:	a1 51       	subi	r26, 0x11	; 17
    1cb0:	bf 4e       	sbci	r27, 0xEF	; 239
    1cb2:	11 96       	adiw	r26, 0x01	; 1
    1cb4:	0d 90       	ld	r0, X+
    1cb6:	bc 91       	ld	r27, X
    1cb8:	a0 2d       	mov	r26, r0
    1cba:	b7 83       	std	Z+7, r27	; 0x07
    1cbc:	a6 83       	std	Z+6, r26	; 0x06
    1cbe:	16 96       	adiw	r26, 0x06	; 6
    1cc0:	4d 91       	ld	r20, X+
    1cc2:	5c 91       	ld	r21, X
    1cc4:	17 97       	sbiw	r26, 0x07	; 7
    1cc6:	51 87       	std	Z+9, r21	; 0x09
    1cc8:	40 87       	std	Z+8, r20	; 0x08
    1cca:	16 96       	adiw	r26, 0x06	; 6
    1ccc:	cd 91       	ld	r28, X+
    1cce:	dc 91       	ld	r29, X
    1cd0:	17 97       	sbiw	r26, 0x07	; 7
    1cd2:	3d 83       	std	Y+5, r19	; 0x05
    1cd4:	2c 83       	std	Y+4, r18	; 0x04
    1cd6:	17 96       	adiw	r26, 0x07	; 7
    1cd8:	3c 93       	st	X, r19
    1cda:	2e 93       	st	-X, r18
    1cdc:	16 97       	sbiw	r26, 0x06	; 6
    1cde:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1ce0:	8a 9f       	mul	r24, r26
    1ce2:	d0 01       	movw	r26, r0
    1ce4:	11 24       	eor	r1, r1
    1ce6:	a1 51       	subi	r26, 0x11	; 17
    1ce8:	bf 4e       	sbci	r27, 0xEF	; 239
    1cea:	b5 87       	std	Z+13, r27	; 0x0d
    1cec:	a4 87       	std	Z+12, r26	; 0x0c
    1cee:	8c 91       	ld	r24, X
    1cf0:	8f 5f       	subi	r24, 0xFF	; 255
    1cf2:	8c 93       	st	X, r24
    1cf4:	1c c0       	rjmp	.+56     	; 0x1d2e <xTaskRemoveFromEventList+0x13e>
    1cf6:	4a ec       	ldi	r20, 0xCA	; 202
    1cf8:	50 e1       	ldi	r21, 0x10	; 16
    1cfa:	da 01       	movw	r26, r20
    1cfc:	11 96       	adiw	r26, 0x01	; 1
    1cfe:	cd 91       	ld	r28, X+
    1d00:	dc 91       	ld	r29, X
    1d02:	12 97       	sbiw	r26, 0x02	; 2
    1d04:	d3 8b       	std	Z+19, r29	; 0x13
    1d06:	c2 8b       	std	Z+18, r28	; 0x12
    1d08:	8e 81       	ldd	r24, Y+6	; 0x06
    1d0a:	9f 81       	ldd	r25, Y+7	; 0x07
    1d0c:	95 8b       	std	Z+21, r25	; 0x15
    1d0e:	84 8b       	std	Z+20, r24	; 0x14
    1d10:	8e 81       	ldd	r24, Y+6	; 0x06
    1d12:	9f 81       	ldd	r25, Y+7	; 0x07
    1d14:	dc 01       	movw	r26, r24
    1d16:	15 96       	adiw	r26, 0x05	; 5
    1d18:	3c 93       	st	X, r19
    1d1a:	2e 93       	st	-X, r18
    1d1c:	14 97       	sbiw	r26, 0x04	; 4
    1d1e:	3f 83       	std	Y+7, r19	; 0x07
    1d20:	2e 83       	std	Y+6, r18	; 0x06
    1d22:	51 8f       	std	Z+25, r21	; 0x19
    1d24:	40 8f       	std	Z+24, r20	; 0x18
    1d26:	da 01       	movw	r26, r20
    1d28:	8c 91       	ld	r24, X
    1d2a:	8f 5f       	subi	r24, 0xFF	; 255
    1d2c:	8c 93       	st	X, r24
    1d2e:	92 8d       	ldd	r25, Z+26	; 0x1a
    1d30:	e0 91 5d 11 	lds	r30, 0x115D	; 0x80115d <pxCurrentTCB>
    1d34:	f0 91 5e 11 	lds	r31, 0x115E	; 0x80115e <pxCurrentTCB+0x1>
    1d38:	82 8d       	ldd	r24, Z+26	; 0x1a
    1d3a:	89 17       	cp	r24, r25
    1d3c:	20 f4       	brcc	.+8      	; 0x1d46 <xTaskRemoveFromEventList+0x156>
    1d3e:	81 e0       	ldi	r24, 0x01	; 1
    1d40:	80 93 a7 10 	sts	0x10A7, r24	; 0x8010a7 <xYieldPending>
    1d44:	01 c0       	rjmp	.+2      	; 0x1d48 <xTaskRemoveFromEventList+0x158>
    1d46:	80 e0       	ldi	r24, 0x00	; 0
    1d48:	df 91       	pop	r29
    1d4a:	cf 91       	pop	r28
    1d4c:	08 95       	ret

00001d4e <vTaskInternalSetTimeOutState>:
    1d4e:	20 91 a6 10 	lds	r18, 0x10A6	; 0x8010a6 <xNumOfOverflows>
    1d52:	fc 01       	movw	r30, r24
    1d54:	20 83       	st	Z, r18
    1d56:	40 91 ae 10 	lds	r20, 0x10AE	; 0x8010ae <xTickCount>
    1d5a:	50 91 af 10 	lds	r21, 0x10AF	; 0x8010af <xTickCount+0x1>
    1d5e:	60 91 b0 10 	lds	r22, 0x10B0	; 0x8010b0 <xTickCount+0x2>
    1d62:	70 91 b1 10 	lds	r23, 0x10B1	; 0x8010b1 <xTickCount+0x3>
    1d66:	41 83       	std	Z+1, r20	; 0x01
    1d68:	52 83       	std	Z+2, r21	; 0x02
    1d6a:	63 83       	std	Z+3, r22	; 0x03
    1d6c:	74 83       	std	Z+4, r23	; 0x04
    1d6e:	08 95       	ret

00001d70 <xTaskCheckForTimeOut>:
    1d70:	8f 92       	push	r8
    1d72:	9f 92       	push	r9
    1d74:	af 92       	push	r10
    1d76:	bf 92       	push	r11
    1d78:	cf 92       	push	r12
    1d7a:	df 92       	push	r13
    1d7c:	ef 92       	push	r14
    1d7e:	ff 92       	push	r15
    1d80:	0f 93       	push	r16
    1d82:	1f 93       	push	r17
    1d84:	cf 93       	push	r28
    1d86:	df 93       	push	r29
    1d88:	fb 01       	movw	r30, r22
    1d8a:	0f b6       	in	r0, 0x3f	; 63
    1d8c:	f8 94       	cli
    1d8e:	0f 92       	push	r0
    1d90:	c0 90 ae 10 	lds	r12, 0x10AE	; 0x8010ae <xTickCount>
    1d94:	d0 90 af 10 	lds	r13, 0x10AF	; 0x8010af <xTickCount+0x1>
    1d98:	e0 90 b0 10 	lds	r14, 0x10B0	; 0x8010b0 <xTickCount+0x2>
    1d9c:	f0 90 b1 10 	lds	r15, 0x10B1	; 0x8010b1 <xTickCount+0x3>
    1da0:	dc 01       	movw	r26, r24
    1da2:	11 96       	adiw	r26, 0x01	; 1
    1da4:	0d 91       	ld	r16, X+
    1da6:	1d 91       	ld	r17, X+
    1da8:	2d 91       	ld	r18, X+
    1daa:	3c 91       	ld	r19, X
    1dac:	14 97       	sbiw	r26, 0x04	; 4
    1dae:	46 01       	movw	r8, r12
    1db0:	57 01       	movw	r10, r14
    1db2:	80 1a       	sub	r8, r16
    1db4:	91 0a       	sbc	r9, r17
    1db6:	a2 0a       	sbc	r10, r18
    1db8:	b3 0a       	sbc	r11, r19
    1dba:	40 81       	ld	r20, Z
    1dbc:	51 81       	ldd	r21, Z+1	; 0x01
    1dbe:	62 81       	ldd	r22, Z+2	; 0x02
    1dc0:	73 81       	ldd	r23, Z+3	; 0x03
    1dc2:	4f 3f       	cpi	r20, 0xFF	; 255
    1dc4:	bf ef       	ldi	r27, 0xFF	; 255
    1dc6:	5b 07       	cpc	r21, r27
    1dc8:	6b 07       	cpc	r22, r27
    1dca:	7b 07       	cpc	r23, r27
    1dcc:	39 f1       	breq	.+78     	; 0x1e1c <xTaskCheckForTimeOut+0xac>
    1dce:	ec 01       	movw	r28, r24
    1dd0:	b8 81       	ld	r27, Y
    1dd2:	a0 91 a6 10 	lds	r26, 0x10A6	; 0x8010a6 <xNumOfOverflows>
    1dd6:	ba 17       	cp	r27, r26
    1dd8:	59 f0       	breq	.+22     	; 0x1df0 <xTaskCheckForTimeOut+0x80>
    1dda:	c0 16       	cp	r12, r16
    1ddc:	d1 06       	cpc	r13, r17
    1dde:	e2 06       	cpc	r14, r18
    1de0:	f3 06       	cpc	r15, r19
    1de2:	30 f0       	brcs	.+12     	; 0x1df0 <xTaskCheckForTimeOut+0x80>
    1de4:	10 82       	st	Z, r1
    1de6:	11 82       	std	Z+1, r1	; 0x01
    1de8:	12 82       	std	Z+2, r1	; 0x02
    1dea:	13 82       	std	Z+3, r1	; 0x03
    1dec:	81 e0       	ldi	r24, 0x01	; 1
    1dee:	17 c0       	rjmp	.+46     	; 0x1e1e <xTaskCheckForTimeOut+0xae>
    1df0:	84 16       	cp	r8, r20
    1df2:	95 06       	cpc	r9, r21
    1df4:	a6 06       	cpc	r10, r22
    1df6:	b7 06       	cpc	r11, r23
    1df8:	58 f4       	brcc	.+22     	; 0x1e10 <xTaskCheckForTimeOut+0xa0>
    1dfa:	48 19       	sub	r20, r8
    1dfc:	59 09       	sbc	r21, r9
    1dfe:	6a 09       	sbc	r22, r10
    1e00:	7b 09       	sbc	r23, r11
    1e02:	40 83       	st	Z, r20
    1e04:	51 83       	std	Z+1, r21	; 0x01
    1e06:	62 83       	std	Z+2, r22	; 0x02
    1e08:	73 83       	std	Z+3, r23	; 0x03
    1e0a:	a1 df       	rcall	.-190    	; 0x1d4e <vTaskInternalSetTimeOutState>
    1e0c:	80 e0       	ldi	r24, 0x00	; 0
    1e0e:	07 c0       	rjmp	.+14     	; 0x1e1e <xTaskCheckForTimeOut+0xae>
    1e10:	10 82       	st	Z, r1
    1e12:	11 82       	std	Z+1, r1	; 0x01
    1e14:	12 82       	std	Z+2, r1	; 0x02
    1e16:	13 82       	std	Z+3, r1	; 0x03
    1e18:	81 e0       	ldi	r24, 0x01	; 1
    1e1a:	01 c0       	rjmp	.+2      	; 0x1e1e <xTaskCheckForTimeOut+0xae>
    1e1c:	80 e0       	ldi	r24, 0x00	; 0
    1e1e:	0f 90       	pop	r0
    1e20:	0f be       	out	0x3f, r0	; 63
    1e22:	df 91       	pop	r29
    1e24:	cf 91       	pop	r28
    1e26:	1f 91       	pop	r17
    1e28:	0f 91       	pop	r16
    1e2a:	ff 90       	pop	r15
    1e2c:	ef 90       	pop	r14
    1e2e:	df 90       	pop	r13
    1e30:	cf 90       	pop	r12
    1e32:	bf 90       	pop	r11
    1e34:	af 90       	pop	r10
    1e36:	9f 90       	pop	r9
    1e38:	8f 90       	pop	r8
    1e3a:	08 95       	ret

00001e3c <vTaskMissedYield>:
    1e3c:	81 e0       	ldi	r24, 0x01	; 1
    1e3e:	80 93 a7 10 	sts	0x10A7, r24	; 0x8010a7 <xYieldPending>
    1e42:	08 95       	ret

00001e44 <xTaskGetSchedulerState>:
    1e44:	80 91 ac 10 	lds	r24, 0x10AC	; 0x8010ac <xSchedulerRunning>
    1e48:	88 23       	and	r24, r24
    1e4a:	31 f0       	breq	.+12     	; 0x1e58 <xTaskGetSchedulerState+0x14>
    1e4c:	80 91 9e 10 	lds	r24, 0x109E	; 0x80109e <uxSchedulerSuspended>
    1e50:	81 11       	cpse	r24, r1
    1e52:	04 c0       	rjmp	.+8      	; 0x1e5c <xTaskGetSchedulerState+0x18>
    1e54:	82 e0       	ldi	r24, 0x02	; 2
    1e56:	08 95       	ret
    1e58:	81 e0       	ldi	r24, 0x01	; 1
    1e5a:	08 95       	ret
    1e5c:	80 e0       	ldi	r24, 0x00	; 0
    1e5e:	08 95       	ret

00001e60 <xTaskPriorityInherit>:
    1e60:	0f 93       	push	r16
    1e62:	1f 93       	push	r17
    1e64:	cf 93       	push	r28
    1e66:	df 93       	push	r29
    1e68:	fc 01       	movw	r30, r24
    1e6a:	89 2b       	or	r24, r25
    1e6c:	09 f4       	brne	.+2      	; 0x1e70 <xTaskPriorityInherit+0x10>
    1e6e:	77 c0       	rjmp	.+238    	; 0x1f5e <xTaskPriorityInherit+0xfe>
    1e70:	82 8d       	ldd	r24, Z+26	; 0x1a
    1e72:	a0 91 5d 11 	lds	r26, 0x115D	; 0x80115d <pxCurrentTCB>
    1e76:	b0 91 5e 11 	lds	r27, 0x115E	; 0x80115e <pxCurrentTCB+0x1>
    1e7a:	5a 96       	adiw	r26, 0x1a	; 26
    1e7c:	9c 91       	ld	r25, X
    1e7e:	89 17       	cp	r24, r25
    1e80:	08 f0       	brcs	.+2      	; 0x1e84 <xTaskPriorityInherit+0x24>
    1e82:	63 c0       	rjmp	.+198    	; 0x1f4a <xTaskPriorityInherit+0xea>
    1e84:	46 85       	ldd	r20, Z+14	; 0x0e
    1e86:	57 85       	ldd	r21, Z+15	; 0x0f
    1e88:	60 89       	ldd	r22, Z+16	; 0x10
    1e8a:	71 89       	ldd	r23, Z+17	; 0x11
    1e8c:	77 23       	and	r23, r23
    1e8e:	94 f0       	brlt	.+36     	; 0x1eb4 <xTaskPriorityInherit+0x54>
    1e90:	a0 91 5d 11 	lds	r26, 0x115D	; 0x80115d <pxCurrentTCB>
    1e94:	b0 91 5e 11 	lds	r27, 0x115E	; 0x80115e <pxCurrentTCB+0x1>
    1e98:	5a 96       	adiw	r26, 0x1a	; 26
    1e9a:	9c 91       	ld	r25, X
    1e9c:	4a e0       	ldi	r20, 0x0A	; 10
    1e9e:	50 e0       	ldi	r21, 0x00	; 0
    1ea0:	60 e0       	ldi	r22, 0x00	; 0
    1ea2:	70 e0       	ldi	r23, 0x00	; 0
    1ea4:	49 1b       	sub	r20, r25
    1ea6:	51 09       	sbc	r21, r1
    1ea8:	61 09       	sbc	r22, r1
    1eaa:	71 09       	sbc	r23, r1
    1eac:	46 87       	std	Z+14, r20	; 0x0e
    1eae:	57 87       	std	Z+15, r21	; 0x0f
    1eb0:	60 8b       	std	Z+16, r22	; 0x10
    1eb2:	71 8b       	std	Z+17, r23	; 0x11
    1eb4:	24 85       	ldd	r18, Z+12	; 0x0c
    1eb6:	35 85       	ldd	r19, Z+13	; 0x0d
    1eb8:	4b e0       	ldi	r20, 0x0B	; 11
    1eba:	84 9f       	mul	r24, r20
    1ebc:	c0 01       	movw	r24, r0
    1ebe:	11 24       	eor	r1, r1
    1ec0:	81 51       	subi	r24, 0x11	; 17
    1ec2:	9f 4e       	sbci	r25, 0xEF	; 239
    1ec4:	28 17       	cp	r18, r24
    1ec6:	39 07       	cpc	r19, r25
    1ec8:	b9 f5       	brne	.+110    	; 0x1f38 <xTaskPriorityInherit+0xd8>
    1eca:	ef 01       	movw	r28, r30
    1ecc:	8f 01       	movw	r16, r30
    1ece:	0e 5f       	subi	r16, 0xFE	; 254
    1ed0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ed2:	c8 01       	movw	r24, r16
    1ed4:	0e 94 8c 03 	call	0x718	; 0x718 <uxListRemove>
    1ed8:	e0 91 5d 11 	lds	r30, 0x115D	; 0x80115d <pxCurrentTCB>
    1edc:	f0 91 5e 11 	lds	r31, 0x115E	; 0x80115e <pxCurrentTCB+0x1>
    1ee0:	e2 8d       	ldd	r30, Z+26	; 0x1a
    1ee2:	ea 8f       	std	Y+26, r30	; 0x1a
    1ee4:	80 91 ad 10 	lds	r24, 0x10AD	; 0x8010ad <uxTopReadyPriority>
    1ee8:	8e 17       	cp	r24, r30
    1eea:	10 f4       	brcc	.+4      	; 0x1ef0 <xTaskPriorityInherit+0x90>
    1eec:	e0 93 ad 10 	sts	0x10AD, r30	; 0x8010ad <uxTopReadyPriority>
    1ef0:	8b e0       	ldi	r24, 0x0B	; 11
    1ef2:	8e 9f       	mul	r24, r30
    1ef4:	f0 01       	movw	r30, r0
    1ef6:	11 24       	eor	r1, r1
    1ef8:	e1 51       	subi	r30, 0x11	; 17
    1efa:	ff 4e       	sbci	r31, 0xEF	; 239
    1efc:	01 80       	ldd	r0, Z+1	; 0x01
    1efe:	f2 81       	ldd	r31, Z+2	; 0x02
    1f00:	e0 2d       	mov	r30, r0
    1f02:	ff 83       	std	Y+7, r31	; 0x07
    1f04:	ee 83       	std	Y+6, r30	; 0x06
    1f06:	26 81       	ldd	r18, Z+6	; 0x06
    1f08:	37 81       	ldd	r19, Z+7	; 0x07
    1f0a:	39 87       	std	Y+9, r19	; 0x09
    1f0c:	28 87       	std	Y+8, r18	; 0x08
    1f0e:	a6 81       	ldd	r26, Z+6	; 0x06
    1f10:	b7 81       	ldd	r27, Z+7	; 0x07
    1f12:	15 96       	adiw	r26, 0x05	; 5
    1f14:	1c 93       	st	X, r17
    1f16:	0e 93       	st	-X, r16
    1f18:	14 97       	sbiw	r26, 0x04	; 4
    1f1a:	17 83       	std	Z+7, r17	; 0x07
    1f1c:	06 83       	std	Z+6, r16	; 0x06
    1f1e:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1f20:	8e 9f       	mul	r24, r30
    1f22:	f0 01       	movw	r30, r0
    1f24:	11 24       	eor	r1, r1
    1f26:	e1 51       	subi	r30, 0x11	; 17
    1f28:	ff 4e       	sbci	r31, 0xEF	; 239
    1f2a:	fd 87       	std	Y+13, r31	; 0x0d
    1f2c:	ec 87       	std	Y+12, r30	; 0x0c
    1f2e:	80 81       	ld	r24, Z
    1f30:	8f 5f       	subi	r24, 0xFF	; 255
    1f32:	80 83       	st	Z, r24
    1f34:	81 e0       	ldi	r24, 0x01	; 1
    1f36:	16 c0       	rjmp	.+44     	; 0x1f64 <xTaskPriorityInherit+0x104>
    1f38:	a0 91 5d 11 	lds	r26, 0x115D	; 0x80115d <pxCurrentTCB>
    1f3c:	b0 91 5e 11 	lds	r27, 0x115E	; 0x80115e <pxCurrentTCB+0x1>
    1f40:	5a 96       	adiw	r26, 0x1a	; 26
    1f42:	8c 91       	ld	r24, X
    1f44:	82 8f       	std	Z+26, r24	; 0x1a
    1f46:	81 e0       	ldi	r24, 0x01	; 1
    1f48:	0d c0       	rjmp	.+26     	; 0x1f64 <xTaskPriorityInherit+0x104>
    1f4a:	95 a5       	ldd	r25, Z+45	; 0x2d
    1f4c:	e0 91 5d 11 	lds	r30, 0x115D	; 0x80115d <pxCurrentTCB>
    1f50:	f0 91 5e 11 	lds	r31, 0x115E	; 0x80115e <pxCurrentTCB+0x1>
    1f54:	82 8d       	ldd	r24, Z+26	; 0x1a
    1f56:	98 17       	cp	r25, r24
    1f58:	20 f0       	brcs	.+8      	; 0x1f62 <xTaskPriorityInherit+0x102>
    1f5a:	80 e0       	ldi	r24, 0x00	; 0
    1f5c:	03 c0       	rjmp	.+6      	; 0x1f64 <xTaskPriorityInherit+0x104>
    1f5e:	80 e0       	ldi	r24, 0x00	; 0
    1f60:	01 c0       	rjmp	.+2      	; 0x1f64 <xTaskPriorityInherit+0x104>
    1f62:	81 e0       	ldi	r24, 0x01	; 1
    1f64:	df 91       	pop	r29
    1f66:	cf 91       	pop	r28
    1f68:	1f 91       	pop	r17
    1f6a:	0f 91       	pop	r16
    1f6c:	08 95       	ret

00001f6e <xTaskPriorityDisinherit>:
    1f6e:	0f 93       	push	r16
    1f70:	1f 93       	push	r17
    1f72:	cf 93       	push	r28
    1f74:	df 93       	push	r29
    1f76:	fc 01       	movw	r30, r24
    1f78:	89 2b       	or	r24, r25
    1f7a:	09 f4       	brne	.+2      	; 0x1f7e <xTaskPriorityDisinherit+0x10>
    1f7c:	49 c0       	rjmp	.+146    	; 0x2010 <__DATA_REGION_LENGTH__+0x10>
    1f7e:	86 a5       	ldd	r24, Z+46	; 0x2e
    1f80:	81 50       	subi	r24, 0x01	; 1
    1f82:	86 a7       	std	Z+46, r24	; 0x2e
    1f84:	22 8d       	ldd	r18, Z+26	; 0x1a
    1f86:	95 a5       	ldd	r25, Z+45	; 0x2d
    1f88:	29 17       	cp	r18, r25
    1f8a:	09 f4       	brne	.+2      	; 0x1f8e <xTaskPriorityDisinherit+0x20>
    1f8c:	43 c0       	rjmp	.+134    	; 0x2014 <__DATA_REGION_LENGTH__+0x14>
    1f8e:	81 11       	cpse	r24, r1
    1f90:	43 c0       	rjmp	.+134    	; 0x2018 <__DATA_REGION_LENGTH__+0x18>
    1f92:	ef 01       	movw	r28, r30
    1f94:	8f 01       	movw	r16, r30
    1f96:	0e 5f       	subi	r16, 0xFE	; 254
    1f98:	1f 4f       	sbci	r17, 0xFF	; 255
    1f9a:	c8 01       	movw	r24, r16
    1f9c:	0e 94 8c 03 	call	0x718	; 0x718 <uxListRemove>
    1fa0:	ed a5       	ldd	r30, Y+45	; 0x2d
    1fa2:	ea 8f       	std	Y+26, r30	; 0x1a
    1fa4:	8a e0       	ldi	r24, 0x0A	; 10
    1fa6:	90 e0       	ldi	r25, 0x00	; 0
    1fa8:	a0 e0       	ldi	r26, 0x00	; 0
    1faa:	b0 e0       	ldi	r27, 0x00	; 0
    1fac:	8e 1b       	sub	r24, r30
    1fae:	91 09       	sbc	r25, r1
    1fb0:	a1 09       	sbc	r26, r1
    1fb2:	b1 09       	sbc	r27, r1
    1fb4:	8e 87       	std	Y+14, r24	; 0x0e
    1fb6:	9f 87       	std	Y+15, r25	; 0x0f
    1fb8:	a8 8b       	std	Y+16, r26	; 0x10
    1fba:	b9 8b       	std	Y+17, r27	; 0x11
    1fbc:	80 91 ad 10 	lds	r24, 0x10AD	; 0x8010ad <uxTopReadyPriority>
    1fc0:	8e 17       	cp	r24, r30
    1fc2:	10 f4       	brcc	.+4      	; 0x1fc8 <xTaskPriorityDisinherit+0x5a>
    1fc4:	e0 93 ad 10 	sts	0x10AD, r30	; 0x8010ad <uxTopReadyPriority>
    1fc8:	8b e0       	ldi	r24, 0x0B	; 11
    1fca:	8e 9f       	mul	r24, r30
    1fcc:	f0 01       	movw	r30, r0
    1fce:	11 24       	eor	r1, r1
    1fd0:	e1 51       	subi	r30, 0x11	; 17
    1fd2:	ff 4e       	sbci	r31, 0xEF	; 239
    1fd4:	01 80       	ldd	r0, Z+1	; 0x01
    1fd6:	f2 81       	ldd	r31, Z+2	; 0x02
    1fd8:	e0 2d       	mov	r30, r0
    1fda:	ff 83       	std	Y+7, r31	; 0x07
    1fdc:	ee 83       	std	Y+6, r30	; 0x06
    1fde:	26 81       	ldd	r18, Z+6	; 0x06
    1fe0:	37 81       	ldd	r19, Z+7	; 0x07
    1fe2:	39 87       	std	Y+9, r19	; 0x09
    1fe4:	28 87       	std	Y+8, r18	; 0x08
    1fe6:	a6 81       	ldd	r26, Z+6	; 0x06
    1fe8:	b7 81       	ldd	r27, Z+7	; 0x07
    1fea:	15 96       	adiw	r26, 0x05	; 5
    1fec:	1c 93       	st	X, r17
    1fee:	0e 93       	st	-X, r16
    1ff0:	14 97       	sbiw	r26, 0x04	; 4
    1ff2:	17 83       	std	Z+7, r17	; 0x07
    1ff4:	06 83       	std	Z+6, r16	; 0x06
    1ff6:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1ff8:	8e 9f       	mul	r24, r30
    1ffa:	f0 01       	movw	r30, r0
    1ffc:	11 24       	eor	r1, r1
    1ffe:	e1 51       	subi	r30, 0x11	; 17
    2000:	ff 4e       	sbci	r31, 0xEF	; 239
    2002:	fd 87       	std	Y+13, r31	; 0x0d
    2004:	ec 87       	std	Y+12, r30	; 0x0c
    2006:	80 81       	ld	r24, Z
    2008:	8f 5f       	subi	r24, 0xFF	; 255
    200a:	80 83       	st	Z, r24
    200c:	81 e0       	ldi	r24, 0x01	; 1
    200e:	05 c0       	rjmp	.+10     	; 0x201a <__DATA_REGION_LENGTH__+0x1a>
    2010:	80 e0       	ldi	r24, 0x00	; 0
    2012:	03 c0       	rjmp	.+6      	; 0x201a <__DATA_REGION_LENGTH__+0x1a>
    2014:	80 e0       	ldi	r24, 0x00	; 0
    2016:	01 c0       	rjmp	.+2      	; 0x201a <__DATA_REGION_LENGTH__+0x1a>
    2018:	80 e0       	ldi	r24, 0x00	; 0
    201a:	df 91       	pop	r29
    201c:	cf 91       	pop	r28
    201e:	1f 91       	pop	r17
    2020:	0f 91       	pop	r16
    2022:	08 95       	ret

00002024 <vTaskPriorityDisinheritAfterTimeout>:
    2024:	0f 93       	push	r16
    2026:	1f 93       	push	r17
    2028:	cf 93       	push	r28
    202a:	df 93       	push	r29
    202c:	fc 01       	movw	r30, r24
    202e:	89 2b       	or	r24, r25
    2030:	09 f4       	brne	.+2      	; 0x2034 <vTaskPriorityDisinheritAfterTimeout+0x10>
    2032:	5a c0       	rjmp	.+180    	; 0x20e8 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    2034:	85 a5       	ldd	r24, Z+45	; 0x2d
    2036:	86 17       	cp	r24, r22
    2038:	08 f4       	brcc	.+2      	; 0x203c <vTaskPriorityDisinheritAfterTimeout+0x18>
    203a:	86 2f       	mov	r24, r22
    203c:	92 8d       	ldd	r25, Z+26	; 0x1a
    203e:	89 17       	cp	r24, r25
    2040:	09 f4       	brne	.+2      	; 0x2044 <vTaskPriorityDisinheritAfterTimeout+0x20>
    2042:	52 c0       	rjmp	.+164    	; 0x20e8 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    2044:	26 a5       	ldd	r18, Z+46	; 0x2e
    2046:	21 30       	cpi	r18, 0x01	; 1
    2048:	09 f0       	breq	.+2      	; 0x204c <vTaskPriorityDisinheritAfterTimeout+0x28>
    204a:	4e c0       	rjmp	.+156    	; 0x20e8 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    204c:	82 8f       	std	Z+26, r24	; 0x1a
    204e:	46 85       	ldd	r20, Z+14	; 0x0e
    2050:	57 85       	ldd	r21, Z+15	; 0x0f
    2052:	60 89       	ldd	r22, Z+16	; 0x10
    2054:	71 89       	ldd	r23, Z+17	; 0x11
    2056:	77 23       	and	r23, r23
    2058:	64 f0       	brlt	.+24     	; 0x2072 <vTaskPriorityDisinheritAfterTimeout+0x4e>
    205a:	4a e0       	ldi	r20, 0x0A	; 10
    205c:	50 e0       	ldi	r21, 0x00	; 0
    205e:	60 e0       	ldi	r22, 0x00	; 0
    2060:	70 e0       	ldi	r23, 0x00	; 0
    2062:	48 1b       	sub	r20, r24
    2064:	51 09       	sbc	r21, r1
    2066:	61 09       	sbc	r22, r1
    2068:	71 09       	sbc	r23, r1
    206a:	46 87       	std	Z+14, r20	; 0x0e
    206c:	57 87       	std	Z+15, r21	; 0x0f
    206e:	60 8b       	std	Z+16, r22	; 0x10
    2070:	71 8b       	std	Z+17, r23	; 0x11
    2072:	24 85       	ldd	r18, Z+12	; 0x0c
    2074:	35 85       	ldd	r19, Z+13	; 0x0d
    2076:	4b e0       	ldi	r20, 0x0B	; 11
    2078:	94 9f       	mul	r25, r20
    207a:	c0 01       	movw	r24, r0
    207c:	11 24       	eor	r1, r1
    207e:	81 51       	subi	r24, 0x11	; 17
    2080:	9f 4e       	sbci	r25, 0xEF	; 239
    2082:	28 17       	cp	r18, r24
    2084:	39 07       	cpc	r19, r25
    2086:	81 f5       	brne	.+96     	; 0x20e8 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    2088:	ef 01       	movw	r28, r30
    208a:	8f 01       	movw	r16, r30
    208c:	0e 5f       	subi	r16, 0xFE	; 254
    208e:	1f 4f       	sbci	r17, 0xFF	; 255
    2090:	c8 01       	movw	r24, r16
    2092:	0e 94 8c 03 	call	0x718	; 0x718 <uxListRemove>
    2096:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2098:	80 91 ad 10 	lds	r24, 0x10AD	; 0x8010ad <uxTopReadyPriority>
    209c:	8e 17       	cp	r24, r30
    209e:	10 f4       	brcc	.+4      	; 0x20a4 <vTaskPriorityDisinheritAfterTimeout+0x80>
    20a0:	e0 93 ad 10 	sts	0x10AD, r30	; 0x8010ad <uxTopReadyPriority>
    20a4:	8b e0       	ldi	r24, 0x0B	; 11
    20a6:	8e 9f       	mul	r24, r30
    20a8:	f0 01       	movw	r30, r0
    20aa:	11 24       	eor	r1, r1
    20ac:	e1 51       	subi	r30, 0x11	; 17
    20ae:	ff 4e       	sbci	r31, 0xEF	; 239
    20b0:	01 80       	ldd	r0, Z+1	; 0x01
    20b2:	f2 81       	ldd	r31, Z+2	; 0x02
    20b4:	e0 2d       	mov	r30, r0
    20b6:	ff 83       	std	Y+7, r31	; 0x07
    20b8:	ee 83       	std	Y+6, r30	; 0x06
    20ba:	26 81       	ldd	r18, Z+6	; 0x06
    20bc:	37 81       	ldd	r19, Z+7	; 0x07
    20be:	39 87       	std	Y+9, r19	; 0x09
    20c0:	28 87       	std	Y+8, r18	; 0x08
    20c2:	a6 81       	ldd	r26, Z+6	; 0x06
    20c4:	b7 81       	ldd	r27, Z+7	; 0x07
    20c6:	15 96       	adiw	r26, 0x05	; 5
    20c8:	1c 93       	st	X, r17
    20ca:	0e 93       	st	-X, r16
    20cc:	14 97       	sbiw	r26, 0x04	; 4
    20ce:	17 83       	std	Z+7, r17	; 0x07
    20d0:	06 83       	std	Z+6, r16	; 0x06
    20d2:	ea 8d       	ldd	r30, Y+26	; 0x1a
    20d4:	8e 9f       	mul	r24, r30
    20d6:	f0 01       	movw	r30, r0
    20d8:	11 24       	eor	r1, r1
    20da:	e1 51       	subi	r30, 0x11	; 17
    20dc:	ff 4e       	sbci	r31, 0xEF	; 239
    20de:	fd 87       	std	Y+13, r31	; 0x0d
    20e0:	ec 87       	std	Y+12, r30	; 0x0c
    20e2:	80 81       	ld	r24, Z
    20e4:	8f 5f       	subi	r24, 0xFF	; 255
    20e6:	80 83       	st	Z, r24
    20e8:	df 91       	pop	r29
    20ea:	cf 91       	pop	r28
    20ec:	1f 91       	pop	r17
    20ee:	0f 91       	pop	r16
    20f0:	08 95       	ret

000020f2 <pvTaskIncrementMutexHeldCount>:

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
    20f2:	80 91 5d 11 	lds	r24, 0x115D	; 0x80115d <pxCurrentTCB>
    20f6:	90 91 5e 11 	lds	r25, 0x115E	; 0x80115e <pxCurrentTCB+0x1>
    20fa:	89 2b       	or	r24, r25
    20fc:	39 f0       	breq	.+14     	; 0x210c <pvTaskIncrementMutexHeldCount+0x1a>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
    20fe:	e0 91 5d 11 	lds	r30, 0x115D	; 0x80115d <pxCurrentTCB>
    2102:	f0 91 5e 11 	lds	r31, 0x115E	; 0x80115e <pxCurrentTCB+0x1>
    2106:	86 a5       	ldd	r24, Z+46	; 0x2e
    2108:	8f 5f       	subi	r24, 0xFF	; 255
    210a:	86 a7       	std	Z+46, r24	; 0x2e
        }

        return ( TaskHandle_t ) pxCurrentTCB;
    210c:	80 91 5d 11 	lds	r24, 0x115D	; 0x80115d <pxCurrentTCB>
    2110:	90 91 5e 11 	lds	r25, 0x115E	; 0x80115e <pxCurrentTCB+0x1>
    }
    2114:	08 95       	ret

00002116 <prvGetNextExpireTime>:
    2116:	dc 01       	movw	r26, r24
    2118:	e0 91 69 11 	lds	r30, 0x1169	; 0x801169 <pxCurrentTimerList>
    211c:	f0 91 6a 11 	lds	r31, 0x116A	; 0x80116a <pxCurrentTimerList+0x1>
    2120:	80 81       	ld	r24, Z
    2122:	91 e0       	ldi	r25, 0x01	; 1
    2124:	81 11       	cpse	r24, r1
    2126:	90 e0       	ldi	r25, 0x00	; 0
    2128:	9c 93       	st	X, r25
    212a:	91 11       	cpse	r25, r1
    212c:	08 c0       	rjmp	.+16     	; 0x213e <prvGetNextExpireTime+0x28>
    212e:	07 80       	ldd	r0, Z+7	; 0x07
    2130:	f0 85       	ldd	r31, Z+8	; 0x08
    2132:	e0 2d       	mov	r30, r0
    2134:	60 81       	ld	r22, Z
    2136:	71 81       	ldd	r23, Z+1	; 0x01
    2138:	82 81       	ldd	r24, Z+2	; 0x02
    213a:	93 81       	ldd	r25, Z+3	; 0x03
    213c:	08 95       	ret
    213e:	60 e0       	ldi	r22, 0x00	; 0
    2140:	70 e0       	ldi	r23, 0x00	; 0
    2142:	cb 01       	movw	r24, r22
    2144:	08 95       	ret

00002146 <prvInsertTimerInActiveList>:
    2146:	cf 92       	push	r12
    2148:	df 92       	push	r13
    214a:	ef 92       	push	r14
    214c:	ff 92       	push	r15
    214e:	0f 93       	push	r16
    2150:	1f 93       	push	r17
    2152:	fc 01       	movw	r30, r24
    2154:	42 83       	std	Z+2, r20	; 0x02
    2156:	53 83       	std	Z+3, r21	; 0x03
    2158:	64 83       	std	Z+4, r22	; 0x04
    215a:	75 83       	std	Z+5, r23	; 0x05
    215c:	93 87       	std	Z+11, r25	; 0x0b
    215e:	82 87       	std	Z+10, r24	; 0x0a
    2160:	04 17       	cp	r16, r20
    2162:	15 07       	cpc	r17, r21
    2164:	26 07       	cpc	r18, r22
    2166:	37 07       	cpc	r19, r23
    2168:	c0 f0       	brcs	.+48     	; 0x219a <prvInsertTimerInActiveList+0x54>
    216a:	0c 19       	sub	r16, r12
    216c:	1d 09       	sbc	r17, r13
    216e:	2e 09       	sbc	r18, r14
    2170:	3f 09       	sbc	r19, r15
    2172:	86 85       	ldd	r24, Z+14	; 0x0e
    2174:	97 85       	ldd	r25, Z+15	; 0x0f
    2176:	a0 89       	ldd	r26, Z+16	; 0x10
    2178:	b1 89       	ldd	r27, Z+17	; 0x11
    217a:	08 17       	cp	r16, r24
    217c:	19 07       	cpc	r17, r25
    217e:	2a 07       	cpc	r18, r26
    2180:	3b 07       	cpc	r19, r27
    2182:	00 f5       	brcc	.+64     	; 0x21c4 <prvInsertTimerInActiveList+0x7e>
    2184:	bf 01       	movw	r22, r30
    2186:	6e 5f       	subi	r22, 0xFE	; 254
    2188:	7f 4f       	sbci	r23, 0xFF	; 255
    218a:	80 91 67 11 	lds	r24, 0x1167	; 0x801167 <pxOverflowTimerList>
    218e:	90 91 68 11 	lds	r25, 0x1168	; 0x801168 <pxOverflowTimerList+0x1>
    2192:	0e 94 4f 03 	call	0x69e	; 0x69e <vListInsert>
    2196:	80 e0       	ldi	r24, 0x00	; 0
    2198:	18 c0       	rjmp	.+48     	; 0x21ca <prvInsertTimerInActiveList+0x84>
    219a:	0c 15       	cp	r16, r12
    219c:	1d 05       	cpc	r17, r13
    219e:	2e 05       	cpc	r18, r14
    21a0:	3f 05       	cpc	r19, r15
    21a2:	28 f4       	brcc	.+10     	; 0x21ae <prvInsertTimerInActiveList+0x68>
    21a4:	4c 15       	cp	r20, r12
    21a6:	5d 05       	cpc	r21, r13
    21a8:	6e 05       	cpc	r22, r14
    21aa:	7f 05       	cpc	r23, r15
    21ac:	68 f4       	brcc	.+26     	; 0x21c8 <prvInsertTimerInActiveList+0x82>
    21ae:	bf 01       	movw	r22, r30
    21b0:	6e 5f       	subi	r22, 0xFE	; 254
    21b2:	7f 4f       	sbci	r23, 0xFF	; 255
    21b4:	80 91 69 11 	lds	r24, 0x1169	; 0x801169 <pxCurrentTimerList>
    21b8:	90 91 6a 11 	lds	r25, 0x116A	; 0x80116a <pxCurrentTimerList+0x1>
    21bc:	0e 94 4f 03 	call	0x69e	; 0x69e <vListInsert>
    21c0:	80 e0       	ldi	r24, 0x00	; 0
    21c2:	03 c0       	rjmp	.+6      	; 0x21ca <prvInsertTimerInActiveList+0x84>
    21c4:	81 e0       	ldi	r24, 0x01	; 1
    21c6:	01 c0       	rjmp	.+2      	; 0x21ca <prvInsertTimerInActiveList+0x84>
    21c8:	81 e0       	ldi	r24, 0x01	; 1
    21ca:	1f 91       	pop	r17
    21cc:	0f 91       	pop	r16
    21ce:	ff 90       	pop	r15
    21d0:	ef 90       	pop	r14
    21d2:	df 90       	pop	r13
    21d4:	cf 90       	pop	r12
    21d6:	08 95       	ret

000021d8 <prvCheckForValidListAndQueue>:
    21d8:	0f b6       	in	r0, 0x3f	; 63
    21da:	f8 94       	cli
    21dc:	0f 92       	push	r0
    21de:	80 91 65 11 	lds	r24, 0x1165	; 0x801165 <xTimerQueue>
    21e2:	90 91 66 11 	lds	r25, 0x1166	; 0x801166 <xTimerQueue+0x1>
    21e6:	89 2b       	or	r24, r25
    21e8:	e9 f4       	brne	.+58     	; 0x2224 <__stack+0x25>
    21ea:	86 e7       	ldi	r24, 0x76	; 118
    21ec:	91 e1       	ldi	r25, 0x11	; 17
    21ee:	0e 94 3a 03 	call	0x674	; 0x674 <vListInitialise>
    21f2:	8b e6       	ldi	r24, 0x6B	; 107
    21f4:	91 e1       	ldi	r25, 0x11	; 17
    21f6:	0e 94 3a 03 	call	0x674	; 0x674 <vListInitialise>
    21fa:	86 e7       	ldi	r24, 0x76	; 118
    21fc:	91 e1       	ldi	r25, 0x11	; 17
    21fe:	90 93 6a 11 	sts	0x116A, r25	; 0x80116a <pxCurrentTimerList+0x1>
    2202:	80 93 69 11 	sts	0x1169, r24	; 0x801169 <pxCurrentTimerList>
    2206:	8b e6       	ldi	r24, 0x6B	; 107
    2208:	91 e1       	ldi	r25, 0x11	; 17
    220a:	90 93 68 11 	sts	0x1168, r25	; 0x801168 <pxOverflowTimerList+0x1>
    220e:	80 93 67 11 	sts	0x1167, r24	; 0x801167 <pxOverflowTimerList>
    2212:	40 e0       	ldi	r20, 0x00	; 0
    2214:	67 e0       	ldi	r22, 0x07	; 7
    2216:	8a e0       	ldi	r24, 0x0A	; 10
    2218:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <xQueueGenericCreate>
    221c:	90 93 66 11 	sts	0x1166, r25	; 0x801166 <xTimerQueue+0x1>
    2220:	80 93 65 11 	sts	0x1165, r24	; 0x801165 <xTimerQueue>
    2224:	0f 90       	pop	r0
    2226:	0f be       	out	0x3f, r0	; 63
    2228:	08 95       	ret

0000222a <xTimerCreateTimerTask>:
    222a:	ef 92       	push	r14
    222c:	ff 92       	push	r15
    222e:	0f 93       	push	r16
    2230:	d3 df       	rcall	.-90     	; 0x21d8 <prvCheckForValidListAndQueue>
    2232:	80 91 65 11 	lds	r24, 0x1165	; 0x801165 <xTimerQueue>
    2236:	90 91 66 11 	lds	r25, 0x1166	; 0x801166 <xTimerQueue+0x1>
    223a:	89 2b       	or	r24, r25
    223c:	89 f0       	breq	.+34     	; 0x2260 <xTimerCreateTimerTask+0x36>
    223e:	0f 2e       	mov	r0, r31
    2240:	f3 e6       	ldi	r31, 0x63	; 99
    2242:	ef 2e       	mov	r14, r31
    2244:	f1 e1       	ldi	r31, 0x11	; 17
    2246:	ff 2e       	mov	r15, r31
    2248:	f0 2d       	mov	r31, r0
    224a:	03 e0       	ldi	r16, 0x03	; 3
    224c:	20 e0       	ldi	r18, 0x00	; 0
    224e:	30 e0       	ldi	r19, 0x00	; 0
    2250:	40 ec       	ldi	r20, 0xC0	; 192
    2252:	50 e0       	ldi	r21, 0x00	; 0
    2254:	60 eb       	ldi	r22, 0xB0	; 176
    2256:	72 e0       	ldi	r23, 0x02	; 2
    2258:	86 e8       	ldi	r24, 0x86	; 134
    225a:	90 e0       	ldi	r25, 0x00	; 0
    225c:	30 d9       	rcall	.-3488   	; 0x14be <xTaskCreate>
    225e:	01 c0       	rjmp	.+2      	; 0x2262 <xTimerCreateTimerTask+0x38>
    2260:	80 e0       	ldi	r24, 0x00	; 0
    2262:	0f 91       	pop	r16
    2264:	ff 90       	pop	r15
    2266:	ef 90       	pop	r14
    2268:	08 95       	ret

0000226a <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    226a:	8f 92       	push	r8
    226c:	9f 92       	push	r9
    226e:	af 92       	push	r10
    2270:	bf 92       	push	r11
    2272:	cf 92       	push	r12
    2274:	df 92       	push	r13
    2276:	ef 92       	push	r14
    2278:	ff 92       	push	r15
    227a:	0f 93       	push	r16
    227c:	1f 93       	push	r17
    227e:	cf 93       	push	r28
    2280:	df 93       	push	r29
    2282:	cd b7       	in	r28, 0x3d	; 61
    2284:	de b7       	in	r29, 0x3e	; 62
    2286:	27 97       	sbiw	r28, 0x07	; 7
    2288:	0f b6       	in	r0, 0x3f	; 63
    228a:	f8 94       	cli
    228c:	de bf       	out	0x3e, r29	; 62
    228e:	0f be       	out	0x3f, r0	; 63
    2290:	cd bf       	out	0x3d, r28	; 61

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    2292:	e0 91 65 11 	lds	r30, 0x1165	; 0x801165 <xTimerQueue>
    2296:	f0 91 66 11 	lds	r31, 0x1166	; 0x801166 <xTimerQueue+0x1>
    229a:	30 97       	sbiw	r30, 0x00	; 0
    229c:	81 f1       	breq	.+96     	; 0x22fe <xTimerGenericCommand+0x94>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    229e:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    22a0:	2a 83       	std	Y+2, r18	; 0x02
    22a2:	3b 83       	std	Y+3, r19	; 0x03
    22a4:	4c 83       	std	Y+4, r20	; 0x04
    22a6:	5d 83       	std	Y+5, r21	; 0x05
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    22a8:	9f 83       	std	Y+7, r25	; 0x07
    22aa:	8e 83       	std	Y+6, r24	; 0x06

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    22ac:	66 30       	cpi	r22, 0x06	; 6
    22ae:	f4 f4       	brge	.+60     	; 0x22ec <xTimerGenericCommand+0x82>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    22b0:	c9 dd       	rcall	.-1134   	; 0x1e44 <xTaskGetSchedulerState>
    22b2:	82 30       	cpi	r24, 0x02	; 2
    22b4:	69 f4       	brne	.+26     	; 0x22d0 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    22b6:	00 e0       	ldi	r16, 0x00	; 0
    22b8:	a7 01       	movw	r20, r14
    22ba:	96 01       	movw	r18, r12
    22bc:	be 01       	movw	r22, r28
    22be:	6f 5f       	subi	r22, 0xFF	; 255
    22c0:	7f 4f       	sbci	r23, 0xFF	; 255
    22c2:	80 91 65 11 	lds	r24, 0x1165	; 0x801165 <xTimerQueue>
    22c6:	90 91 66 11 	lds	r25, 0x1166	; 0x801166 <xTimerQueue+0x1>
    22ca:	0e 94 1f 06 	call	0xc3e	; 0xc3e <xQueueGenericSend>
    22ce:	18 c0       	rjmp	.+48     	; 0x2300 <xTimerGenericCommand+0x96>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    22d0:	00 e0       	ldi	r16, 0x00	; 0
    22d2:	20 e0       	ldi	r18, 0x00	; 0
    22d4:	30 e0       	ldi	r19, 0x00	; 0
    22d6:	a9 01       	movw	r20, r18
    22d8:	be 01       	movw	r22, r28
    22da:	6f 5f       	subi	r22, 0xFF	; 255
    22dc:	7f 4f       	sbci	r23, 0xFF	; 255
    22de:	80 91 65 11 	lds	r24, 0x1165	; 0x801165 <xTimerQueue>
    22e2:	90 91 66 11 	lds	r25, 0x1166	; 0x801166 <xTimerQueue+0x1>
    22e6:	0e 94 1f 06 	call	0xc3e	; 0xc3e <xQueueGenericSend>
    22ea:	0a c0       	rjmp	.+20     	; 0x2300 <xTimerGenericCommand+0x96>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    22ec:	20 e0       	ldi	r18, 0x00	; 0
    22ee:	a8 01       	movw	r20, r16
    22f0:	be 01       	movw	r22, r28
    22f2:	6f 5f       	subi	r22, 0xFF	; 255
    22f4:	7f 4f       	sbci	r23, 0xFF	; 255
    22f6:	cf 01       	movw	r24, r30
    22f8:	0e 94 ca 06 	call	0xd94	; 0xd94 <xQueueGenericSendFromISR>
    22fc:	01 c0       	rjmp	.+2      	; 0x2300 <xTimerGenericCommand+0x96>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    22fe:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    2300:	27 96       	adiw	r28, 0x07	; 7
    2302:	0f b6       	in	r0, 0x3f	; 63
    2304:	f8 94       	cli
    2306:	de bf       	out	0x3e, r29	; 62
    2308:	0f be       	out	0x3f, r0	; 63
    230a:	cd bf       	out	0x3d, r28	; 61
    230c:	df 91       	pop	r29
    230e:	cf 91       	pop	r28
    2310:	1f 91       	pop	r17
    2312:	0f 91       	pop	r16
    2314:	ff 90       	pop	r15
    2316:	ef 90       	pop	r14
    2318:	df 90       	pop	r13
    231a:	cf 90       	pop	r12
    231c:	bf 90       	pop	r11
    231e:	af 90       	pop	r10
    2320:	9f 90       	pop	r9
    2322:	8f 90       	pop	r8
    2324:	08 95       	ret

00002326 <prvSwitchTimerLists>:
        }
    }
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
    2326:	8f 92       	push	r8
    2328:	9f 92       	push	r9
    232a:	af 92       	push	r10
    232c:	bf 92       	push	r11
    232e:	cf 92       	push	r12
    2330:	df 92       	push	r13
    2332:	ef 92       	push	r14
    2334:	ff 92       	push	r15
    2336:	0f 93       	push	r16
    2338:	1f 93       	push	r17
    233a:	cf 93       	push	r28
    233c:	df 93       	push	r29

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    233e:	3b c0       	rjmp	.+118    	; 0x23b6 <prvSwitchTimerLists+0x90>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    2340:	07 80       	ldd	r0, Z+7	; 0x07
    2342:	f0 85       	ldd	r31, Z+8	; 0x08
    2344:	e0 2d       	mov	r30, r0
    2346:	80 80       	ld	r8, Z
    2348:	91 80       	ldd	r9, Z+1	; 0x01
    234a:	a2 80       	ldd	r10, Z+2	; 0x02
    234c:	b3 80       	ldd	r11, Z+3	; 0x03

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    234e:	c0 85       	ldd	r28, Z+8	; 0x08
    2350:	d1 85       	ldd	r29, Z+9	; 0x09
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2352:	8e 01       	movw	r16, r28
    2354:	0e 5f       	subi	r16, 0xFE	; 254
    2356:	1f 4f       	sbci	r17, 0xFF	; 255
    2358:	c8 01       	movw	r24, r16
    235a:	0e 94 8c 03 	call	0x718	; 0x718 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    235e:	ec 89       	ldd	r30, Y+20	; 0x14
    2360:	fd 89       	ldd	r31, Y+21	; 0x15
    2362:	ce 01       	movw	r24, r28
    2364:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2366:	8e 89       	ldd	r24, Y+22	; 0x16
    2368:	82 ff       	sbrs	r24, 2
    236a:	25 c0       	rjmp	.+74     	; 0x23b6 <prvSwitchTimerLists+0x90>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    236c:	8e 85       	ldd	r24, Y+14	; 0x0e
    236e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2370:	a8 89       	ldd	r26, Y+16	; 0x10
    2372:	b9 89       	ldd	r27, Y+17	; 0x11
    2374:	88 0d       	add	r24, r8
    2376:	99 1d       	adc	r25, r9
    2378:	aa 1d       	adc	r26, r10
    237a:	bb 1d       	adc	r27, r11

                if( xReloadTime > xNextExpireTime )
    237c:	88 16       	cp	r8, r24
    237e:	99 06       	cpc	r9, r25
    2380:	aa 06       	cpc	r10, r26
    2382:	bb 06       	cpc	r11, r27
    2384:	70 f4       	brcc	.+28     	; 0x23a2 <prvSwitchTimerLists+0x7c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    2386:	8a 83       	std	Y+2, r24	; 0x02
    2388:	9b 83       	std	Y+3, r25	; 0x03
    238a:	ac 83       	std	Y+4, r26	; 0x04
    238c:	bd 83       	std	Y+5, r27	; 0x05
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    238e:	db 87       	std	Y+11, r29	; 0x0b
    2390:	ca 87       	std	Y+10, r28	; 0x0a
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    2392:	b8 01       	movw	r22, r16
    2394:	80 91 69 11 	lds	r24, 0x1169	; 0x801169 <pxCurrentTimerList>
    2398:	90 91 6a 11 	lds	r25, 0x116A	; 0x80116a <pxCurrentTimerList+0x1>
    239c:	0e 94 4f 03 	call	0x69e	; 0x69e <vListInsert>
    23a0:	0a c0       	rjmp	.+20     	; 0x23b6 <prvSwitchTimerLists+0x90>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    23a2:	c1 2c       	mov	r12, r1
    23a4:	d1 2c       	mov	r13, r1
    23a6:	76 01       	movw	r14, r12
    23a8:	00 e0       	ldi	r16, 0x00	; 0
    23aa:	10 e0       	ldi	r17, 0x00	; 0
    23ac:	a5 01       	movw	r20, r10
    23ae:	94 01       	movw	r18, r8
    23b0:	60 e0       	ldi	r22, 0x00	; 0
    23b2:	ce 01       	movw	r24, r28
    23b4:	5a df       	rcall	.-332    	; 0x226a <xTimerGenericCommand>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    23b6:	e0 91 69 11 	lds	r30, 0x1169	; 0x801169 <pxCurrentTimerList>
    23ba:	f0 91 6a 11 	lds	r31, 0x116A	; 0x80116a <pxCurrentTimerList+0x1>
    23be:	80 81       	ld	r24, Z
    23c0:	81 11       	cpse	r24, r1
    23c2:	be cf       	rjmp	.-132    	; 0x2340 <prvSwitchTimerLists+0x1a>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    23c4:	80 91 67 11 	lds	r24, 0x1167	; 0x801167 <pxOverflowTimerList>
    23c8:	90 91 68 11 	lds	r25, 0x1168	; 0x801168 <pxOverflowTimerList+0x1>
    23cc:	90 93 6a 11 	sts	0x116A, r25	; 0x80116a <pxCurrentTimerList+0x1>
    23d0:	80 93 69 11 	sts	0x1169, r24	; 0x801169 <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    23d4:	f0 93 68 11 	sts	0x1168, r31	; 0x801168 <pxOverflowTimerList+0x1>
    23d8:	e0 93 67 11 	sts	0x1167, r30	; 0x801167 <pxOverflowTimerList>
    }
    23dc:	df 91       	pop	r29
    23de:	cf 91       	pop	r28
    23e0:	1f 91       	pop	r17
    23e2:	0f 91       	pop	r16
    23e4:	ff 90       	pop	r15
    23e6:	ef 90       	pop	r14
    23e8:	df 90       	pop	r13
    23ea:	cf 90       	pop	r12
    23ec:	bf 90       	pop	r11
    23ee:	af 90       	pop	r10
    23f0:	9f 90       	pop	r9
    23f2:	8f 90       	pop	r8
    23f4:	08 95       	ret

000023f6 <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    23f6:	cf 92       	push	r12
    23f8:	df 92       	push	r13
    23fa:	ef 92       	push	r14
    23fc:	ff 92       	push	r15
    23fe:	cf 93       	push	r28
    2400:	df 93       	push	r29
    2402:	ec 01       	movw	r28, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    2404:	ea d8       	rcall	.-3628   	; 0x15da <xTaskGetTickCount>
    2406:	6b 01       	movw	r12, r22
    2408:	7c 01       	movw	r14, r24

        if( xTimeNow < xLastTime )
    240a:	80 91 5f 11 	lds	r24, 0x115F	; 0x80115f <xLastTime.2448>
    240e:	90 91 60 11 	lds	r25, 0x1160	; 0x801160 <xLastTime.2448+0x1>
    2412:	a0 91 61 11 	lds	r26, 0x1161	; 0x801161 <xLastTime.2448+0x2>
    2416:	b0 91 62 11 	lds	r27, 0x1162	; 0x801162 <xLastTime.2448+0x3>
    241a:	c8 16       	cp	r12, r24
    241c:	d9 06       	cpc	r13, r25
    241e:	ea 06       	cpc	r14, r26
    2420:	fb 06       	cpc	r15, r27
        {
            prvSwitchTimerLists();
    2422:	20 f4       	brcc	.+8      	; 0x242c <prvSampleTimeNow+0x36>
    2424:	80 df       	rcall	.-256    	; 0x2326 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
    2426:	81 e0       	ldi	r24, 0x01	; 1
    2428:	88 83       	st	Y, r24
    242a:	01 c0       	rjmp	.+2      	; 0x242e <prvSampleTimeNow+0x38>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    242c:	18 82       	st	Y, r1
        }

        xLastTime = xTimeNow;
    242e:	c0 92 5f 11 	sts	0x115F, r12	; 0x80115f <xLastTime.2448>
    2432:	d0 92 60 11 	sts	0x1160, r13	; 0x801160 <xLastTime.2448+0x1>
    2436:	e0 92 61 11 	sts	0x1161, r14	; 0x801161 <xLastTime.2448+0x2>
    243a:	f0 92 62 11 	sts	0x1162, r15	; 0x801162 <xLastTime.2448+0x3>

        return xTimeNow;
    }
    243e:	c7 01       	movw	r24, r14
    2440:	b6 01       	movw	r22, r12
    2442:	df 91       	pop	r29
    2444:	cf 91       	pop	r28
    2446:	ff 90       	pop	r15
    2448:	ef 90       	pop	r14
    244a:	df 90       	pop	r13
    244c:	cf 90       	pop	r12
    244e:	08 95       	ret

00002450 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    2450:	4f 92       	push	r4
    2452:	5f 92       	push	r5
    2454:	6f 92       	push	r6
    2456:	7f 92       	push	r7
    2458:	8f 92       	push	r8
    245a:	9f 92       	push	r9
    245c:	af 92       	push	r10
    245e:	bf 92       	push	r11
    2460:	cf 92       	push	r12
    2462:	df 92       	push	r13
    2464:	ef 92       	push	r14
    2466:	ff 92       	push	r15
    2468:	0f 93       	push	r16
    246a:	1f 93       	push	r17
    246c:	cf 93       	push	r28
    246e:	df 93       	push	r29
    2470:	4b 01       	movw	r8, r22
    2472:	5c 01       	movw	r10, r24
    2474:	29 01       	movw	r4, r18
    2476:	3a 01       	movw	r6, r20
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    2478:	e0 91 69 11 	lds	r30, 0x1169	; 0x801169 <pxCurrentTimerList>
    247c:	f0 91 6a 11 	lds	r31, 0x116A	; 0x80116a <pxCurrentTimerList+0x1>
    2480:	07 80       	ldd	r0, Z+7	; 0x07
    2482:	f0 85       	ldd	r31, Z+8	; 0x08
    2484:	e0 2d       	mov	r30, r0
    2486:	c0 85       	ldd	r28, Z+8	; 0x08
    2488:	d1 85       	ldd	r29, Z+9	; 0x09

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    248a:	ce 01       	movw	r24, r28
    248c:	02 96       	adiw	r24, 0x02	; 2
    248e:	0e 94 8c 03 	call	0x718	; 0x718 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2492:	8e 89       	ldd	r24, Y+22	; 0x16
    2494:	82 ff       	sbrs	r24, 2
    2496:	1b c0       	rjmp	.+54     	; 0x24ce <prvProcessExpiredTimer+0x7e>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    2498:	4e 85       	ldd	r20, Y+14	; 0x0e
    249a:	5f 85       	ldd	r21, Y+15	; 0x0f
    249c:	68 89       	ldd	r22, Y+16	; 0x10
    249e:	79 89       	ldd	r23, Y+17	; 0x11
    24a0:	48 0d       	add	r20, r8
    24a2:	59 1d       	adc	r21, r9
    24a4:	6a 1d       	adc	r22, r10
    24a6:	7b 1d       	adc	r23, r11
    24a8:	75 01       	movw	r14, r10
    24aa:	64 01       	movw	r12, r8
    24ac:	93 01       	movw	r18, r6
    24ae:	82 01       	movw	r16, r4
    24b0:	ce 01       	movw	r24, r28
    24b2:	49 de       	rcall	.-878    	; 0x2146 <prvInsertTimerInActiveList>
    24b4:	88 23       	and	r24, r24
    24b6:	69 f0       	breq	.+26     	; 0x24d2 <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    24b8:	c1 2c       	mov	r12, r1
    24ba:	d1 2c       	mov	r13, r1
    24bc:	76 01       	movw	r14, r12
    24be:	00 e0       	ldi	r16, 0x00	; 0
    24c0:	10 e0       	ldi	r17, 0x00	; 0
    24c2:	a5 01       	movw	r20, r10
    24c4:	94 01       	movw	r18, r8
    24c6:	60 e0       	ldi	r22, 0x00	; 0
    24c8:	ce 01       	movw	r24, r28
    24ca:	cf de       	rcall	.-610    	; 0x226a <xTimerGenericCommand>
    24cc:	02 c0       	rjmp	.+4      	; 0x24d2 <prvProcessExpiredTimer+0x82>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    24ce:	8e 7f       	andi	r24, 0xFE	; 254
    24d0:	8e 8b       	std	Y+22, r24	; 0x16
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    24d2:	ec 89       	ldd	r30, Y+20	; 0x14
    24d4:	fd 89       	ldd	r31, Y+21	; 0x15
    24d6:	ce 01       	movw	r24, r28
    24d8:	19 95       	eicall
    }
    24da:	df 91       	pop	r29
    24dc:	cf 91       	pop	r28
    24de:	1f 91       	pop	r17
    24e0:	0f 91       	pop	r16
    24e2:	ff 90       	pop	r15
    24e4:	ef 90       	pop	r14
    24e6:	df 90       	pop	r13
    24e8:	cf 90       	pop	r12
    24ea:	bf 90       	pop	r11
    24ec:	af 90       	pop	r10
    24ee:	9f 90       	pop	r9
    24f0:	8f 90       	pop	r8
    24f2:	7f 90       	pop	r7
    24f4:	6f 90       	pop	r6
    24f6:	5f 90       	pop	r5
    24f8:	4f 90       	pop	r4
    24fa:	08 95       	ret

000024fc <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
    24fc:	8f 92       	push	r8
    24fe:	9f 92       	push	r9
    2500:	af 92       	push	r10
    2502:	bf 92       	push	r11
    2504:	cf 92       	push	r12
    2506:	df 92       	push	r13
    2508:	ef 92       	push	r14
    250a:	ff 92       	push	r15
    250c:	1f 93       	push	r17
    250e:	cf 93       	push	r28
    2510:	df 93       	push	r29
    2512:	1f 92       	push	r1
    2514:	cd b7       	in	r28, 0x3d	; 61
    2516:	de b7       	in	r29, 0x3e	; 62
    2518:	6b 01       	movw	r12, r22
    251a:	7c 01       	movw	r14, r24
    251c:	14 2f       	mov	r17, r20
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    251e:	57 d8       	rcall	.-3922   	; 0x15ce <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    2520:	ce 01       	movw	r24, r28
    2522:	01 96       	adiw	r24, 0x01	; 1
    2524:	68 df       	rcall	.-304    	; 0x23f6 <prvSampleTimeNow>
    2526:	4b 01       	movw	r8, r22
    2528:	5c 01       	movw	r10, r24

            if( xTimerListsWereSwitched == pdFALSE )
    252a:	89 81       	ldd	r24, Y+1	; 0x01
    252c:	81 11       	cpse	r24, r1
    252e:	2b c0       	rjmp	.+86     	; 0x2586 <prvProcessTimerOrBlockTask+0x8a>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    2530:	11 11       	cpse	r17, r1
    2532:	0c c0       	rjmp	.+24     	; 0x254c <prvProcessTimerOrBlockTask+0x50>
    2534:	8c 14       	cp	r8, r12
    2536:	9d 04       	cpc	r9, r13
    2538:	ae 04       	cpc	r10, r14
    253a:	bf 04       	cpc	r11, r15
                {
                    ( void ) xTaskResumeAll();
    253c:	38 f0       	brcs	.+14     	; 0x254c <prvProcessTimerOrBlockTask+0x50>
    253e:	87 d9       	rcall	.-3314   	; 0x184e <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    2540:	a5 01       	movw	r20, r10
    2542:	94 01       	movw	r18, r8
    2544:	c7 01       	movw	r24, r14
    2546:	b6 01       	movw	r22, r12
    2548:	83 df       	rcall	.-250    	; 0x2450 <prvProcessExpiredTimer>
    254a:	1e c0       	rjmp	.+60     	; 0x2588 <prvProcessTimerOrBlockTask+0x8c>
                     * time has not been reached yet.  This task should therefore
                     * block to wait for the next expire time or a command to be
                     * received - whichever comes first.  The following line cannot
                     * be reached unless xNextExpireTime > xTimeNow, except in the
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
    254c:	11 23       	and	r17, r17
    254e:	41 f0       	breq	.+16     	; 0x2560 <prvProcessTimerOrBlockTask+0x64>
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    2550:	e0 91 67 11 	lds	r30, 0x1167	; 0x801167 <pxOverflowTimerList>
    2554:	f0 91 68 11 	lds	r31, 0x1168	; 0x801168 <pxOverflowTimerList+0x1>
    2558:	80 81       	ld	r24, Z
    255a:	11 e0       	ldi	r17, 0x01	; 1
    255c:	81 11       	cpse	r24, r1
    255e:	10 e0       	ldi	r17, 0x00	; 0
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    2560:	b7 01       	movw	r22, r14
    2562:	a6 01       	movw	r20, r12
    2564:	48 19       	sub	r20, r8
    2566:	59 09       	sbc	r21, r9
    2568:	6a 09       	sbc	r22, r10
    256a:	7b 09       	sbc	r23, r11
    256c:	21 2f       	mov	r18, r17
    256e:	80 91 65 11 	lds	r24, 0x1165	; 0x801165 <xTimerQueue>
    2572:	90 91 66 11 	lds	r25, 0x1166	; 0x801166 <xTimerQueue+0x1>
    2576:	0e 94 3a 08 	call	0x1074	; 0x1074 <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
    257a:	69 d9       	rcall	.-3374   	; 0x184e <xTaskResumeAll>
    257c:	81 11       	cpse	r24, r1
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
    257e:	04 c0       	rjmp	.+8      	; 0x2588 <prvProcessTimerOrBlockTask+0x8c>
    2580:	0e 94 08 04 	call	0x810	; 0x810 <vPortYield>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    2584:	01 c0       	rjmp	.+2      	; 0x2588 <prvProcessTimerOrBlockTask+0x8c>
    2586:	63 d9       	rcall	.-3386   	; 0x184e <xTaskResumeAll>
            }
        }
    }
    2588:	0f 90       	pop	r0
    258a:	df 91       	pop	r29
    258c:	cf 91       	pop	r28
    258e:	1f 91       	pop	r17
    2590:	ff 90       	pop	r15
    2592:	ef 90       	pop	r14
    2594:	df 90       	pop	r13
    2596:	cf 90       	pop	r12
    2598:	bf 90       	pop	r11
    259a:	af 90       	pop	r10
    259c:	9f 90       	pop	r9
    259e:	8f 90       	pop	r8
    25a0:	08 95       	ret

000025a2 <prvProcessReceivedCommands>:
        return xProcessTimerNow;
    }
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
    25a2:	af 92       	push	r10
    25a4:	bf 92       	push	r11
    25a6:	cf 92       	push	r12
    25a8:	df 92       	push	r13
    25aa:	ef 92       	push	r14
    25ac:	ff 92       	push	r15
    25ae:	0f 93       	push	r16
    25b0:	1f 93       	push	r17
    25b2:	cf 93       	push	r28
    25b4:	df 93       	push	r29
    25b6:	cd b7       	in	r28, 0x3d	; 61
    25b8:	de b7       	in	r29, 0x3e	; 62
    25ba:	28 97       	sbiw	r28, 0x08	; 8
    25bc:	0f b6       	in	r0, 0x3f	; 63
    25be:	f8 94       	cli
    25c0:	de bf       	out	0x3e, r29	; 62
    25c2:	0f be       	out	0x3f, r0	; 63
    25c4:	cd bf       	out	0x3d, r28	; 61
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    25c6:	81 c0       	rjmp	.+258    	; 0x26ca <prvProcessReceivedCommands+0x128>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    25c8:	89 81       	ldd	r24, Y+1	; 0x01
    25ca:	88 23       	and	r24, r24
    25cc:	0c f4       	brge	.+2      	; 0x25d0 <prvProcessReceivedCommands+0x2e>
    25ce:	7d c0       	rjmp	.+250    	; 0x26ca <prvProcessReceivedCommands+0x128>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    25d0:	ae 80       	ldd	r10, Y+6	; 0x06
    25d2:	bf 80       	ldd	r11, Y+7	; 0x07

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    25d4:	d5 01       	movw	r26, r10
    25d6:	1c 96       	adiw	r26, 0x0c	; 12
    25d8:	8d 91       	ld	r24, X+
    25da:	9c 91       	ld	r25, X
    25dc:	1d 97       	sbiw	r26, 0x0d	; 13
    25de:	89 2b       	or	r24, r25
    25e0:	21 f0       	breq	.+8      	; 0x25ea <prvProcessReceivedCommands+0x48>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    25e2:	c5 01       	movw	r24, r10
    25e4:	02 96       	adiw	r24, 0x02	; 2
    25e6:	0e 94 8c 03 	call	0x718	; 0x718 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    25ea:	ce 01       	movw	r24, r28
    25ec:	08 96       	adiw	r24, 0x08	; 8
    25ee:	03 df       	rcall	.-506    	; 0x23f6 <prvSampleTimeNow>
    25f0:	8b 01       	movw	r16, r22
    25f2:	9c 01       	movw	r18, r24

                switch( xMessage.xMessageID )
    25f4:	e9 81       	ldd	r30, Y+1	; 0x01
    25f6:	0e 2e       	mov	r0, r30
    25f8:	00 0c       	add	r0, r0
    25fa:	ff 0b       	sbc	r31, r31
    25fc:	ea 30       	cpi	r30, 0x0A	; 10
    25fe:	f1 05       	cpc	r31, r1
    2600:	08 f0       	brcs	.+2      	; 0x2604 <prvProcessReceivedCommands+0x62>
    2602:	63 c0       	rjmp	.+198    	; 0x26ca <prvProcessReceivedCommands+0x128>
    2604:	88 27       	eor	r24, r24
    2606:	ee 58       	subi	r30, 0x8E	; 142
    2608:	ff 4f       	sbci	r31, 0xFF	; 255
    260a:	8f 4f       	sbci	r24, 0xFF	; 255
    260c:	bd c7       	rjmp	.+3962   	; 0x3588 <__tablejump2__>
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    260e:	f5 01       	movw	r30, r10
    2610:	86 89       	ldd	r24, Z+22	; 0x16
    2612:	81 60       	ori	r24, 0x01	; 1
    2614:	86 8b       	std	Z+22, r24	; 0x16

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    2616:	ca 80       	ldd	r12, Y+2	; 0x02
    2618:	db 80       	ldd	r13, Y+3	; 0x03
    261a:	ec 80       	ldd	r14, Y+4	; 0x04
    261c:	fd 80       	ldd	r15, Y+5	; 0x05
    261e:	46 85       	ldd	r20, Z+14	; 0x0e
    2620:	57 85       	ldd	r21, Z+15	; 0x0f
    2622:	60 89       	ldd	r22, Z+16	; 0x10
    2624:	71 89       	ldd	r23, Z+17	; 0x11
    2626:	4c 0d       	add	r20, r12
    2628:	5d 1d       	adc	r21, r13
    262a:	6e 1d       	adc	r22, r14
    262c:	7f 1d       	adc	r23, r15
    262e:	c5 01       	movw	r24, r10
    2630:	8a dd       	rcall	.-1260   	; 0x2146 <prvInsertTimerInActiveList>
    2632:	88 23       	and	r24, r24
    2634:	09 f4       	brne	.+2      	; 0x2638 <prvProcessReceivedCommands+0x96>
    2636:	49 c0       	rjmp	.+146    	; 0x26ca <prvProcessReceivedCommands+0x128>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2638:	d5 01       	movw	r26, r10
    263a:	54 96       	adiw	r26, 0x14	; 20
    263c:	ed 91       	ld	r30, X+
    263e:	fc 91       	ld	r31, X
    2640:	55 97       	sbiw	r26, 0x15	; 21
    2642:	c5 01       	movw	r24, r10
    2644:	19 95       	eicall
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2646:	f5 01       	movw	r30, r10
    2648:	86 89       	ldd	r24, Z+22	; 0x16
    264a:	82 ff       	sbrs	r24, 2
    264c:	3e c0       	rjmp	.+124    	; 0x26ca <prvProcessReceivedCommands+0x128>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    264e:	4a 81       	ldd	r20, Y+2	; 0x02
    2650:	5b 81       	ldd	r21, Y+3	; 0x03
    2652:	6c 81       	ldd	r22, Y+4	; 0x04
    2654:	7d 81       	ldd	r23, Y+5	; 0x05
    2656:	86 85       	ldd	r24, Z+14	; 0x0e
    2658:	97 85       	ldd	r25, Z+15	; 0x0f
    265a:	a0 89       	ldd	r26, Z+16	; 0x10
    265c:	b1 89       	ldd	r27, Z+17	; 0x11
    265e:	9a 01       	movw	r18, r20
    2660:	ab 01       	movw	r20, r22
    2662:	28 0f       	add	r18, r24
    2664:	39 1f       	adc	r19, r25
    2666:	4a 1f       	adc	r20, r26
    2668:	5b 1f       	adc	r21, r27
    266a:	c1 2c       	mov	r12, r1
    266c:	d1 2c       	mov	r13, r1
    266e:	76 01       	movw	r14, r12
    2670:	00 e0       	ldi	r16, 0x00	; 0
    2672:	10 e0       	ldi	r17, 0x00	; 0
    2674:	60 e0       	ldi	r22, 0x00	; 0
    2676:	c5 01       	movw	r24, r10
    2678:	f8 dd       	rcall	.-1040   	; 0x226a <xTimerGenericCommand>
    267a:	27 c0       	rjmp	.+78     	; 0x26ca <prvProcessReceivedCommands+0x128>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    267c:	d5 01       	movw	r26, r10
    267e:	56 96       	adiw	r26, 0x16	; 22
    2680:	8c 91       	ld	r24, X
    2682:	56 97       	sbiw	r26, 0x16	; 22
    2684:	8e 7f       	andi	r24, 0xFE	; 254
    2686:	56 96       	adiw	r26, 0x16	; 22
    2688:	8c 93       	st	X, r24
                        break;
    268a:	1f c0       	rjmp	.+62     	; 0x26ca <prvProcessReceivedCommands+0x128>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    268c:	f5 01       	movw	r30, r10
    268e:	86 89       	ldd	r24, Z+22	; 0x16
    2690:	81 60       	ori	r24, 0x01	; 1
    2692:	86 8b       	std	Z+22, r24	; 0x16
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    2694:	4a 81       	ldd	r20, Y+2	; 0x02
    2696:	5b 81       	ldd	r21, Y+3	; 0x03
    2698:	6c 81       	ldd	r22, Y+4	; 0x04
    269a:	7d 81       	ldd	r23, Y+5	; 0x05
    269c:	46 87       	std	Z+14, r20	; 0x0e
    269e:	57 87       	std	Z+15, r21	; 0x0f
    26a0:	60 8b       	std	Z+16, r22	; 0x10
    26a2:	71 8b       	std	Z+17, r23	; 0x11
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    26a4:	40 0f       	add	r20, r16
    26a6:	51 1f       	adc	r21, r17
    26a8:	62 1f       	adc	r22, r18
    26aa:	73 1f       	adc	r23, r19
    26ac:	68 01       	movw	r12, r16
    26ae:	79 01       	movw	r14, r18
    26b0:	c5 01       	movw	r24, r10
    26b2:	49 dd       	rcall	.-1390   	; 0x2146 <prvInsertTimerInActiveList>
                        break;
    26b4:	0a c0       	rjmp	.+20     	; 0x26ca <prvProcessReceivedCommands+0x128>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    26b6:	f5 01       	movw	r30, r10
    26b8:	86 89       	ldd	r24, Z+22	; 0x16
    26ba:	81 fd       	sbrc	r24, 1
    26bc:	04 c0       	rjmp	.+8      	; 0x26c6 <prvProcessReceivedCommands+0x124>
                                {
                                    vPortFree( pxTimer );
    26be:	c5 01       	movw	r24, r10
    26c0:	0e 94 fe 02 	call	0x5fc	; 0x5fc <vPortFree>
    26c4:	02 c0       	rjmp	.+4      	; 0x26ca <prvProcessReceivedCommands+0x128>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    26c6:	8e 7f       	andi	r24, 0xFE	; 254
    26c8:	86 8b       	std	Z+22, r24	; 0x16
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    26ca:	20 e0       	ldi	r18, 0x00	; 0
    26cc:	30 e0       	ldi	r19, 0x00	; 0
    26ce:	a9 01       	movw	r20, r18
    26d0:	be 01       	movw	r22, r28
    26d2:	6f 5f       	subi	r22, 0xFF	; 255
    26d4:	7f 4f       	sbci	r23, 0xFF	; 255
    26d6:	80 91 65 11 	lds	r24, 0x1165	; 0x801165 <xTimerQueue>
    26da:	90 91 66 11 	lds	r25, 0x1166	; 0x801166 <xTimerQueue+0x1>
    26de:	0e 94 04 07 	call	0xe08	; 0xe08 <xQueueReceive>
    26e2:	81 11       	cpse	r24, r1
    26e4:	71 cf       	rjmp	.-286    	; 0x25c8 <prvProcessReceivedCommands+0x26>
                        /* Don't expect to get here. */
                        break;
                }
            }
        }
    }
    26e6:	28 96       	adiw	r28, 0x08	; 8
    26e8:	0f b6       	in	r0, 0x3f	; 63
    26ea:	f8 94       	cli
    26ec:	de bf       	out	0x3e, r29	; 62
    26ee:	0f be       	out	0x3f, r0	; 63
    26f0:	cd bf       	out	0x3d, r28	; 61
    26f2:	df 91       	pop	r29
    26f4:	cf 91       	pop	r28
    26f6:	1f 91       	pop	r17
    26f8:	0f 91       	pop	r16
    26fa:	ff 90       	pop	r15
    26fc:	ef 90       	pop	r14
    26fe:	df 90       	pop	r13
    2700:	cf 90       	pop	r12
    2702:	bf 90       	pop	r11
    2704:	af 90       	pop	r10
    2706:	08 95       	ret

00002708 <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    2708:	08 95       	ret

0000270a <prvSetMainLedOn>:
 * Private function to enable board led to use it in application hooks
 */
void prvSetMainLedOn( void ) 
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    270a:	84 b1       	in	r24, 0x04	; 4
    270c:	80 68       	ori	r24, 0x80	; 128
    270e:	84 b9       	out	0x04, r24	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    2710:	85 b1       	in	r24, 0x05	; 5
    2712:	80 68       	ori	r24, 0x80	; 128
    2714:	85 b9       	out	0x05, r24	; 5
    2716:	08 95       	ret

00002718 <prvBlinkMainLed>:
 */
void prvBlinkMainLed( void ) 
{

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    2718:	83 b1       	in	r24, 0x03	; 3
    271a:	80 68       	ori	r24, 0x80	; 128
    271c:	83 b9       	out	0x03, r24	; 3
    271e:	08 95       	ret

00002720 <vApplicationMallocFailedHook>:
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    prvSetMainLedOn(); // Main LED on.
    2720:	f4 df       	rcall	.-24     	; 0x270a <prvSetMainLedOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2722:	2f ef       	ldi	r18, 0xFF	; 255
    2724:	80 e7       	ldi	r24, 0x70	; 112
    2726:	92 e0       	ldi	r25, 0x02	; 2
    2728:	21 50       	subi	r18, 0x01	; 1
    272a:	80 40       	sbci	r24, 0x00	; 0
    272c:	90 40       	sbci	r25, 0x00	; 0
    272e:	e1 f7       	brne	.-8      	; 0x2728 <vApplicationMallocFailedHook+0x8>
    2730:	00 c0       	rjmp	.+0      	; 0x2732 <vApplicationMallocFailedHook+0x12>
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    2732:	00 00       	nop
    2734:	f1 df       	rcall	.-30     	; 0x2718 <prvBlinkMainLed>
    2736:	f5 cf       	rjmp	.-22     	; 0x2722 <vApplicationMallocFailedHook+0x2>

00002738 <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)),
                                    char * pcTaskName __attribute__((unused)) )
{

    prvSetMainLedOn(); // Main LED on.
    2738:	e8 df       	rcall	.-48     	; 0x270a <prvSetMainLedOn>
    273a:	2f ef       	ldi	r18, 0xFF	; 255
    273c:	87 ea       	ldi	r24, 0xA7	; 167
    273e:	91 e6       	ldi	r25, 0x61	; 97
    2740:	21 50       	subi	r18, 0x01	; 1
    2742:	80 40       	sbci	r24, 0x00	; 0
    2744:	90 40       	sbci	r25, 0x00	; 0
    2746:	e1 f7       	brne	.-8      	; 0x2740 <vApplicationStackOverflowHook+0x8>
    2748:	00 c0       	rjmp	.+0      	; 0x274a <vApplicationStackOverflowHook+0x12>

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    274a:	00 00       	nop
    274c:	e5 df       	rcall	.-54     	; 0x2718 <prvBlinkMainLed>
    274e:	f5 cf       	rjmp	.-22     	; 0x273a <vApplicationStackOverflowHook+0x2>

00002750 <initializeSystem>:
	return 0;
}

void initializeSystem(void)
{
	trace_init();
    2750:	0e 94 cc 01 	call	0x398	; 0x398 <trace_init>
	stdio_initialise(ser_USART0);
    2754:	80 e0       	ldi	r24, 0x00	; 0
    2756:	99 d0       	rcall	.+306    	; 0x288a <stdio_initialise>
	status_leds_initialise(5);
    2758:	85 e0       	ldi	r24, 0x05	; 5
    275a:	90 e0       	ldi	r25, 0x00	; 0
    275c:	9d d1       	rcall	.+826    	; 0x2a98 <status_leds_initialise>
	DDRC |= (1 << LIGHT_PIN);
    275e:	87 b1       	in	r24, 0x07	; 7
    2760:	81 60       	ori	r24, 0x01	; 1
    2762:	87 b9       	out	0x07, r24	; 7
	PORTC &= ~(1 << LIGHT_PIN);
    2764:	88 b1       	in	r24, 0x08	; 8
    2766:	8e 7f       	andi	r24, 0xFE	; 254
    2768:	88 b9       	out	0x08, r24	; 8
	hc_sr04_init();
    276a:	0e 94 67 01 	call	0x2ce	; 0x2ce <hc_sr04_init>

	printf("System Initialization Complete\n");
    276e:	88 eb       	ldi	r24, 0xB8	; 184
    2770:	92 e0       	ldi	r25, 0x02	; 2
    2772:	0c 94 23 1c 	jmp	0x3846	; 0x3846 <puts>
    2776:	08 95       	ret

00002778 <main>:
void initializeSystem(void);
#include "application.h"

int main(void)
{
	initializeSystem();  // Initialize system configurations
    2778:	eb df       	rcall	.-42     	; 0x2750 <initializeSystem>

	create_all_application_tasks();  // Create all tasks from application.c
    277a:	0e 94 ed 00 	call	0x1da	; 0x1da <create_all_application_tasks>
	vTaskStartScheduler();  // Start the scheduler
    277e:	0e 94 aa 0a 	call	0x1554	; 0x1554 <vTaskStartScheduler>
    2782:	ff cf       	rjmp	.-2      	; 0x2782 <main+0xa>

00002784 <__floatunsisf>:
    2784:	e8 94       	clt
    2786:	09 c0       	rjmp	.+18     	; 0x279a <__floatsisf+0x12>

00002788 <__floatsisf>:
    2788:	97 fb       	bst	r25, 7
    278a:	3e f4       	brtc	.+14     	; 0x279a <__floatsisf+0x12>
    278c:	90 95       	com	r25
    278e:	80 95       	com	r24
    2790:	70 95       	com	r23
    2792:	61 95       	neg	r22
    2794:	7f 4f       	sbci	r23, 0xFF	; 255
    2796:	8f 4f       	sbci	r24, 0xFF	; 255
    2798:	9f 4f       	sbci	r25, 0xFF	; 255
    279a:	99 23       	and	r25, r25
    279c:	a9 f0       	breq	.+42     	; 0x27c8 <__floatsisf+0x40>
    279e:	f9 2f       	mov	r31, r25
    27a0:	96 e9       	ldi	r25, 0x96	; 150
    27a2:	bb 27       	eor	r27, r27
    27a4:	93 95       	inc	r25
    27a6:	f6 95       	lsr	r31
    27a8:	87 95       	ror	r24
    27aa:	77 95       	ror	r23
    27ac:	67 95       	ror	r22
    27ae:	b7 95       	ror	r27
    27b0:	f1 11       	cpse	r31, r1
    27b2:	f8 cf       	rjmp	.-16     	; 0x27a4 <__floatsisf+0x1c>
    27b4:	fa f4       	brpl	.+62     	; 0x27f4 <__floatsisf+0x6c>
    27b6:	bb 0f       	add	r27, r27
    27b8:	11 f4       	brne	.+4      	; 0x27be <__floatsisf+0x36>
    27ba:	60 ff       	sbrs	r22, 0
    27bc:	1b c0       	rjmp	.+54     	; 0x27f4 <__floatsisf+0x6c>
    27be:	6f 5f       	subi	r22, 0xFF	; 255
    27c0:	7f 4f       	sbci	r23, 0xFF	; 255
    27c2:	8f 4f       	sbci	r24, 0xFF	; 255
    27c4:	9f 4f       	sbci	r25, 0xFF	; 255
    27c6:	16 c0       	rjmp	.+44     	; 0x27f4 <__floatsisf+0x6c>
    27c8:	88 23       	and	r24, r24
    27ca:	11 f0       	breq	.+4      	; 0x27d0 <__floatsisf+0x48>
    27cc:	96 e9       	ldi	r25, 0x96	; 150
    27ce:	11 c0       	rjmp	.+34     	; 0x27f2 <__floatsisf+0x6a>
    27d0:	77 23       	and	r23, r23
    27d2:	21 f0       	breq	.+8      	; 0x27dc <__floatsisf+0x54>
    27d4:	9e e8       	ldi	r25, 0x8E	; 142
    27d6:	87 2f       	mov	r24, r23
    27d8:	76 2f       	mov	r23, r22
    27da:	05 c0       	rjmp	.+10     	; 0x27e6 <__floatsisf+0x5e>
    27dc:	66 23       	and	r22, r22
    27de:	71 f0       	breq	.+28     	; 0x27fc <__floatsisf+0x74>
    27e0:	96 e8       	ldi	r25, 0x86	; 134
    27e2:	86 2f       	mov	r24, r22
    27e4:	70 e0       	ldi	r23, 0x00	; 0
    27e6:	60 e0       	ldi	r22, 0x00	; 0
    27e8:	2a f0       	brmi	.+10     	; 0x27f4 <__floatsisf+0x6c>
    27ea:	9a 95       	dec	r25
    27ec:	66 0f       	add	r22, r22
    27ee:	77 1f       	adc	r23, r23
    27f0:	88 1f       	adc	r24, r24
    27f2:	da f7       	brpl	.-10     	; 0x27ea <__floatsisf+0x62>
    27f4:	88 0f       	add	r24, r24
    27f6:	96 95       	lsr	r25
    27f8:	87 95       	ror	r24
    27fa:	97 f9       	bld	r25, 7
    27fc:	08 95       	ret

000027fe <__gesf2>:
    27fe:	03 d0       	rcall	.+6      	; 0x2806 <__fp_cmp>
    2800:	08 f4       	brcc	.+2      	; 0x2804 <__gesf2+0x6>
    2802:	8f ef       	ldi	r24, 0xFF	; 255
    2804:	08 95       	ret

00002806 <__fp_cmp>:
    2806:	99 0f       	add	r25, r25
    2808:	00 08       	sbc	r0, r0
    280a:	55 0f       	add	r21, r21
    280c:	aa 0b       	sbc	r26, r26
    280e:	e0 e8       	ldi	r30, 0x80	; 128
    2810:	fe ef       	ldi	r31, 0xFE	; 254
    2812:	16 16       	cp	r1, r22
    2814:	17 06       	cpc	r1, r23
    2816:	e8 07       	cpc	r30, r24
    2818:	f9 07       	cpc	r31, r25
    281a:	c0 f0       	brcs	.+48     	; 0x284c <__fp_cmp+0x46>
    281c:	12 16       	cp	r1, r18
    281e:	13 06       	cpc	r1, r19
    2820:	e4 07       	cpc	r30, r20
    2822:	f5 07       	cpc	r31, r21
    2824:	98 f0       	brcs	.+38     	; 0x284c <__fp_cmp+0x46>
    2826:	62 1b       	sub	r22, r18
    2828:	73 0b       	sbc	r23, r19
    282a:	84 0b       	sbc	r24, r20
    282c:	95 0b       	sbc	r25, r21
    282e:	39 f4       	brne	.+14     	; 0x283e <__fp_cmp+0x38>
    2830:	0a 26       	eor	r0, r26
    2832:	61 f0       	breq	.+24     	; 0x284c <__fp_cmp+0x46>
    2834:	23 2b       	or	r18, r19
    2836:	24 2b       	or	r18, r20
    2838:	25 2b       	or	r18, r21
    283a:	21 f4       	brne	.+8      	; 0x2844 <__fp_cmp+0x3e>
    283c:	08 95       	ret
    283e:	0a 26       	eor	r0, r26
    2840:	09 f4       	brne	.+2      	; 0x2844 <__fp_cmp+0x3e>
    2842:	a1 40       	sbci	r26, 0x01	; 1
    2844:	a6 95       	lsr	r26
    2846:	8f ef       	ldi	r24, 0xFF	; 255
    2848:	81 1d       	adc	r24, r1
    284a:	81 1d       	adc	r24, r1
    284c:	08 95       	ret

0000284e <usart_getchar>:
    284e:	cf 93       	push	r28
    2850:	df 93       	push	r29
    2852:	1f 92       	push	r1
    2854:	cd b7       	in	r28, 0x3d	; 61
    2856:	de b7       	in	r29, 0x3e	; 62
    2858:	be 01       	movw	r22, r28
    285a:	6f 5f       	subi	r22, 0xFF	; 255
    285c:	7f 4f       	sbci	r23, 0xFF	; 255
    285e:	80 91 81 11 	lds	r24, 0x1181	; 0x801181 <_com_serial_instance>
    2862:	90 91 82 11 	lds	r25, 0x1182	; 0x801182 <_com_serial_instance+0x1>
    2866:	2d d2       	rcall	.+1114   	; 0x2cc2 <serial_getByte>
    2868:	81 11       	cpse	r24, r1
    286a:	f6 cf       	rjmp	.-20     	; 0x2858 <usart_getchar+0xa>
    286c:	89 81       	ldd	r24, Y+1	; 0x01
    286e:	90 e0       	ldi	r25, 0x00	; 0
    2870:	0f 90       	pop	r0
    2872:	df 91       	pop	r29
    2874:	cf 91       	pop	r28
    2876:	08 95       	ret

00002878 <usart_putchar>:
    2878:	68 2f       	mov	r22, r24
    287a:	80 91 81 11 	lds	r24, 0x1181	; 0x801181 <_com_serial_instance>
    287e:	90 91 82 11 	lds	r25, 0x1182	; 0x801182 <_com_serial_instance+0x1>
    2882:	f4 d1       	rcall	.+1000   	; 0x2c6c <serial_sendByte>
    2884:	80 e0       	ldi	r24, 0x00	; 0
    2886:	90 e0       	ldi	r25, 0x00	; 0
    2888:	08 95       	ret

0000288a <stdio_initialise>:
    288a:	8f 92       	push	r8
    288c:	9f 92       	push	r9
    288e:	af 92       	push	r10
    2890:	cf 92       	push	r12
    2892:	ef 92       	push	r14
    2894:	0f 93       	push	r16
    2896:	81 2c       	mov	r8, r1
    2898:	91 2c       	mov	r9, r1
    289a:	68 94       	set
    289c:	aa 24       	eor	r10, r10
    289e:	a7 f8       	bld	r10, 7
    28a0:	68 94       	set
    28a2:	cc 24       	eor	r12, r12
    28a4:	c7 f8       	bld	r12, 7
    28a6:	e1 2c       	mov	r14, r1
    28a8:	00 e0       	ldi	r16, 0x00	; 0
    28aa:	23 e0       	ldi	r18, 0x03	; 3
    28ac:	40 e0       	ldi	r20, 0x00	; 0
    28ae:	51 ee       	ldi	r21, 0xE1	; 225
    28b0:	60 e0       	ldi	r22, 0x00	; 0
    28b2:	70 e0       	ldi	r23, 0x00	; 0
    28b4:	3f d1       	rcall	.+638    	; 0x2b34 <serial_create>
    28b6:	90 93 82 11 	sts	0x1182, r25	; 0x801182 <_com_serial_instance+0x1>
    28ba:	80 93 81 11 	sts	0x1181, r24	; 0x801181 <_com_serial_instance>
    28be:	e9 ea       	ldi	r30, 0xA9	; 169
    28c0:	f1 e1       	ldi	r31, 0x11	; 17
    28c2:	87 e0       	ldi	r24, 0x07	; 7
    28c4:	92 e0       	ldi	r25, 0x02	; 2
    28c6:	91 83       	std	Z+1, r25	; 0x01
    28c8:	80 83       	st	Z, r24
    28ca:	93 83       	std	Z+3, r25	; 0x03
    28cc:	82 83       	std	Z+2, r24	; 0x02
    28ce:	0f 91       	pop	r16
    28d0:	ef 90       	pop	r14
    28d2:	cf 90       	pop	r12
    28d4:	af 90       	pop	r10
    28d6:	9f 90       	pop	r9
    28d8:	8f 90       	pop	r8
    28da:	08 95       	ret

000028dc <_turn_off>:
    28dc:	90 e0       	ldi	r25, 0x00	; 0
    28de:	fc 01       	movw	r30, r24
    28e0:	ee 0f       	add	r30, r30
    28e2:	ff 1f       	adc	r31, r31
    28e4:	e8 0f       	add	r30, r24
    28e6:	f9 1f       	adc	r31, r25
    28e8:	ee 0f       	add	r30, r30
    28ea:	ff 1f       	adc	r31, r31
    28ec:	ed 57       	subi	r30, 0x7D	; 125
    28ee:	fe 4e       	sbci	r31, 0xEE	; 238
    28f0:	23 81       	ldd	r18, Z+3	; 0x03
    28f2:	21 11       	cpse	r18, r1
    28f4:	1f c0       	rjmp	.+62     	; 0x2934 <_turn_off+0x58>
    28f6:	9c 01       	movw	r18, r24
    28f8:	22 0f       	add	r18, r18
    28fa:	33 1f       	adc	r19, r19
    28fc:	f9 01       	movw	r30, r18
    28fe:	e8 0f       	add	r30, r24
    2900:	f9 1f       	adc	r31, r25
    2902:	ee 0f       	add	r30, r30
    2904:	ff 1f       	adc	r31, r31
    2906:	ed 57       	subi	r30, 0x7D	; 125
    2908:	fe 4e       	sbci	r31, 0xEE	; 238
    290a:	a0 81       	ld	r26, Z
    290c:	b1 81       	ldd	r27, Z+1	; 0x01
    290e:	4c 91       	ld	r20, X
    2910:	f9 01       	movw	r30, r18
    2912:	e8 0f       	add	r30, r24
    2914:	f9 1f       	adc	r31, r25
    2916:	ee 0f       	add	r30, r30
    2918:	ff 1f       	adc	r31, r31
    291a:	ed 57       	subi	r30, 0x7D	; 125
    291c:	fe 4e       	sbci	r31, 0xEE	; 238
    291e:	81 e0       	ldi	r24, 0x01	; 1
    2920:	90 e0       	ldi	r25, 0x00	; 0
    2922:	02 80       	ldd	r0, Z+2	; 0x02
    2924:	02 c0       	rjmp	.+4      	; 0x292a <_turn_off+0x4e>
    2926:	88 0f       	add	r24, r24
    2928:	99 1f       	adc	r25, r25
    292a:	0a 94       	dec	r0
    292c:	e2 f7       	brpl	.-8      	; 0x2926 <_turn_off+0x4a>
    292e:	84 2b       	or	r24, r20
    2930:	8c 93       	st	X, r24
    2932:	08 95       	ret
    2934:	fc 01       	movw	r30, r24
    2936:	ee 0f       	add	r30, r30
    2938:	ff 1f       	adc	r31, r31
    293a:	df 01       	movw	r26, r30
    293c:	a8 0f       	add	r26, r24
    293e:	b9 1f       	adc	r27, r25
    2940:	aa 0f       	add	r26, r26
    2942:	bb 1f       	adc	r27, r27
    2944:	ad 57       	subi	r26, 0x7D	; 125
    2946:	be 4e       	sbci	r27, 0xEE	; 238
    2948:	0d 90       	ld	r0, X+
    294a:	bc 91       	ld	r27, X
    294c:	a0 2d       	mov	r26, r0
    294e:	2c 91       	ld	r18, X
    2950:	e8 0f       	add	r30, r24
    2952:	f9 1f       	adc	r31, r25
    2954:	ee 0f       	add	r30, r30
    2956:	ff 1f       	adc	r31, r31
    2958:	ed 57       	subi	r30, 0x7D	; 125
    295a:	fe 4e       	sbci	r31, 0xEE	; 238
    295c:	81 e0       	ldi	r24, 0x01	; 1
    295e:	90 e0       	ldi	r25, 0x00	; 0
    2960:	02 80       	ldd	r0, Z+2	; 0x02
    2962:	02 c0       	rjmp	.+4      	; 0x2968 <_turn_off+0x8c>
    2964:	88 0f       	add	r24, r24
    2966:	99 1f       	adc	r25, r25
    2968:	0a 94       	dec	r0
    296a:	e2 f7       	brpl	.-8      	; 0x2964 <_turn_off+0x88>
    296c:	80 95       	com	r24
    296e:	82 23       	and	r24, r18
    2970:	8c 93       	st	X, r24
    2972:	08 95       	ret

00002974 <_turn_on>:
    2974:	90 e0       	ldi	r25, 0x00	; 0
    2976:	fc 01       	movw	r30, r24
    2978:	ee 0f       	add	r30, r30
    297a:	ff 1f       	adc	r31, r31
    297c:	e8 0f       	add	r30, r24
    297e:	f9 1f       	adc	r31, r25
    2980:	ee 0f       	add	r30, r30
    2982:	ff 1f       	adc	r31, r31
    2984:	ed 57       	subi	r30, 0x7D	; 125
    2986:	fe 4e       	sbci	r31, 0xEE	; 238
    2988:	23 81       	ldd	r18, Z+3	; 0x03
    298a:	21 11       	cpse	r18, r1
    298c:	20 c0       	rjmp	.+64     	; 0x29ce <_turn_on+0x5a>
    298e:	9c 01       	movw	r18, r24
    2990:	22 0f       	add	r18, r18
    2992:	33 1f       	adc	r19, r19
    2994:	f9 01       	movw	r30, r18
    2996:	e8 0f       	add	r30, r24
    2998:	f9 1f       	adc	r31, r25
    299a:	ee 0f       	add	r30, r30
    299c:	ff 1f       	adc	r31, r31
    299e:	ed 57       	subi	r30, 0x7D	; 125
    29a0:	fe 4e       	sbci	r31, 0xEE	; 238
    29a2:	a0 81       	ld	r26, Z
    29a4:	b1 81       	ldd	r27, Z+1	; 0x01
    29a6:	4c 91       	ld	r20, X
    29a8:	f9 01       	movw	r30, r18
    29aa:	e8 0f       	add	r30, r24
    29ac:	f9 1f       	adc	r31, r25
    29ae:	ee 0f       	add	r30, r30
    29b0:	ff 1f       	adc	r31, r31
    29b2:	ed 57       	subi	r30, 0x7D	; 125
    29b4:	fe 4e       	sbci	r31, 0xEE	; 238
    29b6:	81 e0       	ldi	r24, 0x01	; 1
    29b8:	90 e0       	ldi	r25, 0x00	; 0
    29ba:	02 80       	ldd	r0, Z+2	; 0x02
    29bc:	02 c0       	rjmp	.+4      	; 0x29c2 <_turn_on+0x4e>
    29be:	88 0f       	add	r24, r24
    29c0:	99 1f       	adc	r25, r25
    29c2:	0a 94       	dec	r0
    29c4:	e2 f7       	brpl	.-8      	; 0x29be <_turn_on+0x4a>
    29c6:	80 95       	com	r24
    29c8:	84 23       	and	r24, r20
    29ca:	8c 93       	st	X, r24
    29cc:	08 95       	ret
    29ce:	fc 01       	movw	r30, r24
    29d0:	ee 0f       	add	r30, r30
    29d2:	ff 1f       	adc	r31, r31
    29d4:	df 01       	movw	r26, r30
    29d6:	a8 0f       	add	r26, r24
    29d8:	b9 1f       	adc	r27, r25
    29da:	aa 0f       	add	r26, r26
    29dc:	bb 1f       	adc	r27, r27
    29de:	ad 57       	subi	r26, 0x7D	; 125
    29e0:	be 4e       	sbci	r27, 0xEE	; 238
    29e2:	0d 90       	ld	r0, X+
    29e4:	bc 91       	ld	r27, X
    29e6:	a0 2d       	mov	r26, r0
    29e8:	2c 91       	ld	r18, X
    29ea:	e8 0f       	add	r30, r24
    29ec:	f9 1f       	adc	r31, r25
    29ee:	ee 0f       	add	r30, r30
    29f0:	ff 1f       	adc	r31, r31
    29f2:	ed 57       	subi	r30, 0x7D	; 125
    29f4:	fe 4e       	sbci	r31, 0xEE	; 238
    29f6:	81 e0       	ldi	r24, 0x01	; 1
    29f8:	90 e0       	ldi	r25, 0x00	; 0
    29fa:	02 80       	ldd	r0, Z+2	; 0x02
    29fc:	02 c0       	rjmp	.+4      	; 0x2a02 <_turn_on+0x8e>
    29fe:	88 0f       	add	r24, r24
    2a00:	99 1f       	adc	r25, r25
    2a02:	0a 94       	dec	r0
    2a04:	e2 f7       	brpl	.-8      	; 0x29fe <_turn_on+0x8a>
    2a06:	82 2b       	or	r24, r18
    2a08:	8c 93       	st	X, r24
    2a0a:	08 95       	ret

00002a0c <_hal_led_task>:
    2a0c:	cc 24       	eor	r12, r12
    2a0e:	c3 94       	inc	r12
    2a10:	d1 2c       	mov	r13, r1
    2a12:	68 94       	set
    2a14:	bb 24       	eor	r11, r11
    2a16:	b2 f8       	bld	r11, 2
    2a18:	c3 e8       	ldi	r28, 0x83	; 131
    2a1a:	d1 e1       	ldi	r29, 0x11	; 17
    2a1c:	10 e0       	ldi	r17, 0x00	; 0
    2a1e:	8c 81       	ldd	r24, Y+4	; 0x04
    2a20:	81 30       	cpi	r24, 0x01	; 1
    2a22:	81 f0       	breq	.+32     	; 0x2a44 <_hal_led_task+0x38>
    2a24:	18 f1       	brcs	.+70     	; 0x2a6c <_hal_led_task+0x60>
    2a26:	82 30       	cpi	r24, 0x02	; 2
    2a28:	61 f5       	brne	.+88     	; 0x2a82 <_hal_led_task+0x76>
    2a2a:	e8 81       	ld	r30, Y
    2a2c:	f9 81       	ldd	r31, Y+1	; 0x01
    2a2e:	20 81       	ld	r18, Z
    2a30:	c6 01       	movw	r24, r12
    2a32:	0a 80       	ldd	r0, Y+2	; 0x02
    2a34:	02 c0       	rjmp	.+4      	; 0x2a3a <_hal_led_task+0x2e>
    2a36:	88 0f       	add	r24, r24
    2a38:	99 1f       	adc	r25, r25
    2a3a:	0a 94       	dec	r0
    2a3c:	e2 f7       	brpl	.-8      	; 0x2a36 <_hal_led_task+0x2a>
    2a3e:	82 27       	eor	r24, r18
    2a40:	80 83       	st	Z, r24
    2a42:	1f c0       	rjmp	.+62     	; 0x2a82 <_hal_led_task+0x76>
    2a44:	8d 81       	ldd	r24, Y+5	; 0x05
    2a46:	8f 5f       	subi	r24, 0xFF	; 255
    2a48:	86 30       	cpi	r24, 0x06	; 6
    2a4a:	10 f4       	brcc	.+4      	; 0x2a50 <_hal_led_task+0x44>
    2a4c:	8d 83       	std	Y+5, r24	; 0x05
    2a4e:	19 c0       	rjmp	.+50     	; 0x2a82 <_hal_led_task+0x76>
    2a50:	1d 82       	std	Y+5, r1	; 0x05
    2a52:	e8 81       	ld	r30, Y
    2a54:	f9 81       	ldd	r31, Y+1	; 0x01
    2a56:	20 81       	ld	r18, Z
    2a58:	c6 01       	movw	r24, r12
    2a5a:	0a 80       	ldd	r0, Y+2	; 0x02
    2a5c:	02 c0       	rjmp	.+4      	; 0x2a62 <_hal_led_task+0x56>
    2a5e:	88 0f       	add	r24, r24
    2a60:	99 1f       	adc	r25, r25
    2a62:	0a 94       	dec	r0
    2a64:	e2 f7       	brpl	.-8      	; 0x2a5e <_hal_led_task+0x52>
    2a66:	82 27       	eor	r24, r18
    2a68:	80 83       	st	Z, r24
    2a6a:	0b c0       	rjmp	.+22     	; 0x2a82 <_hal_led_task+0x76>
    2a6c:	0d 81       	ldd	r16, Y+5	; 0x05
    2a6e:	00 23       	and	r16, r16
    2a70:	29 f0       	breq	.+10     	; 0x2a7c <_hal_led_task+0x70>
    2a72:	81 2f       	mov	r24, r17
    2a74:	7f df       	rcall	.-258    	; 0x2974 <_turn_on>
    2a76:	01 50       	subi	r16, 0x01	; 1
    2a78:	0d 83       	std	Y+5, r16	; 0x05
    2a7a:	03 c0       	rjmp	.+6      	; 0x2a82 <_hal_led_task+0x76>
    2a7c:	bc 82       	std	Y+4, r11	; 0x04
    2a7e:	81 2f       	mov	r24, r17
    2a80:	2d df       	rcall	.-422    	; 0x28dc <_turn_off>
    2a82:	1f 5f       	subi	r17, 0xFF	; 255
    2a84:	26 96       	adiw	r28, 0x06	; 6
    2a86:	14 30       	cpi	r17, 0x04	; 4
    2a88:	51 f6       	brne	.-108    	; 0x2a1e <_hal_led_task+0x12>
    2a8a:	6c e0       	ldi	r22, 0x0C	; 12
    2a8c:	70 e0       	ldi	r23, 0x00	; 0
    2a8e:	80 e0       	ldi	r24, 0x00	; 0
    2a90:	90 e0       	ldi	r25, 0x00	; 0
    2a92:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <vTaskDelay>
    2a96:	c0 cf       	rjmp	.-128    	; 0x2a18 <_hal_led_task+0xc>

00002a98 <status_leds_initialise>:
    2a98:	ef 92       	push	r14
    2a9a:	ff 92       	push	r15
    2a9c:	0f 93       	push	r16
    2a9e:	1f 93       	push	r17
    2aa0:	cf 93       	push	r28
    2aa2:	df 93       	push	r29
    2aa4:	08 2f       	mov	r16, r24
    2aa6:	80 e4       	ldi	r24, 0x40	; 64
    2aa8:	87 b9       	out	0x07, r24	; 7
    2aaa:	c3 e8       	ldi	r28, 0x83	; 131
    2aac:	d1 e1       	ldi	r29, 0x11	; 17
    2aae:	0f 2e       	mov	r0, r31
    2ab0:	f8 e2       	ldi	r31, 0x28	; 40
    2ab2:	ef 2e       	mov	r14, r31
    2ab4:	f1 2c       	mov	r15, r1
    2ab6:	f0 2d       	mov	r31, r0
    2ab8:	f9 82       	std	Y+1, r15	; 0x01
    2aba:	e8 82       	st	Y, r14
    2abc:	86 e0       	ldi	r24, 0x06	; 6
    2abe:	8a 83       	std	Y+2, r24	; 0x02
    2ac0:	1b 82       	std	Y+3, r1	; 0x03
    2ac2:	14 e0       	ldi	r17, 0x04	; 4
    2ac4:	1c 83       	std	Y+4, r17	; 0x04
    2ac6:	80 e0       	ldi	r24, 0x00	; 0
    2ac8:	09 df       	rcall	.-494    	; 0x28dc <_turn_off>
    2aca:	80 e8       	ldi	r24, 0x80	; 128
    2acc:	87 b9       	out	0x07, r24	; 7
    2ace:	ff 82       	std	Y+7, r15	; 0x07
    2ad0:	ee 82       	std	Y+6, r14	; 0x06
    2ad2:	87 e0       	ldi	r24, 0x07	; 7
    2ad4:	88 87       	std	Y+8, r24	; 0x08
    2ad6:	19 86       	std	Y+9, r1	; 0x09
    2ad8:	1a 87       	std	Y+10, r17	; 0x0a
    2ada:	81 e0       	ldi	r24, 0x01	; 1
    2adc:	ff de       	rcall	.-514    	; 0x28dc <_turn_off>
    2ade:	80 e2       	ldi	r24, 0x20	; 32
    2ae0:	83 bb       	out	0x13, r24	; 19
    2ae2:	84 e3       	ldi	r24, 0x34	; 52
    2ae4:	90 e0       	ldi	r25, 0x00	; 0
    2ae6:	9d 87       	std	Y+13, r25	; 0x0d
    2ae8:	8c 87       	std	Y+12, r24	; 0x0c
    2aea:	85 e0       	ldi	r24, 0x05	; 5
    2aec:	8e 87       	std	Y+14, r24	; 0x0e
    2aee:	1f 86       	std	Y+15, r1	; 0x0f
    2af0:	18 8b       	std	Y+16, r17	; 0x10
    2af2:	82 e0       	ldi	r24, 0x02	; 2
    2af4:	f3 de       	rcall	.-538    	; 0x28dc <_turn_off>
    2af6:	80 e1       	ldi	r24, 0x10	; 16
    2af8:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x7c0101>
    2afc:	82 e0       	ldi	r24, 0x02	; 2
    2afe:	91 e0       	ldi	r25, 0x01	; 1
    2b00:	9b 8b       	std	Y+19, r25	; 0x13
    2b02:	8a 8b       	std	Y+18, r24	; 0x12
    2b04:	1c 8b       	std	Y+20, r17	; 0x14
    2b06:	1d 8a       	std	Y+21, r1	; 0x15
    2b08:	1e 8b       	std	Y+22, r17	; 0x16
    2b0a:	83 e0       	ldi	r24, 0x03	; 3
    2b0c:	e7 de       	rcall	.-562    	; 0x28dc <_turn_off>
    2b0e:	e1 2c       	mov	r14, r1
    2b10:	f1 2c       	mov	r15, r1
    2b12:	20 e0       	ldi	r18, 0x00	; 0
    2b14:	30 e0       	ldi	r19, 0x00	; 0
    2b16:	40 ec       	ldi	r20, 0xC0	; 192
    2b18:	50 e0       	ldi	r21, 0x00	; 0
    2b1a:	67 ed       	ldi	r22, 0xD7	; 215
    2b1c:	72 e0       	ldi	r23, 0x02	; 2
    2b1e:	86 e0       	ldi	r24, 0x06	; 6
    2b20:	95 e1       	ldi	r25, 0x15	; 21
    2b22:	0e 94 5f 0a 	call	0x14be	; 0x14be <xTaskCreate>
    2b26:	df 91       	pop	r29
    2b28:	cf 91       	pop	r28
    2b2a:	1f 91       	pop	r17
    2b2c:	0f 91       	pop	r16
    2b2e:	ff 90       	pop	r15
    2b30:	ef 90       	pop	r14
    2b32:	08 95       	ret

00002b34 <serial_create>:
    2b34:	2f 92       	push	r2
    2b36:	3f 92       	push	r3
    2b38:	4f 92       	push	r4
    2b3a:	5f 92       	push	r5
    2b3c:	6f 92       	push	r6
    2b3e:	7f 92       	push	r7
    2b40:	8f 92       	push	r8
    2b42:	9f 92       	push	r9
    2b44:	af 92       	push	r10
    2b46:	cf 92       	push	r12
    2b48:	ef 92       	push	r14
    2b4a:	ff 92       	push	r15
    2b4c:	0f 93       	push	r16
    2b4e:	1f 93       	push	r17
    2b50:	cf 93       	push	r28
    2b52:	df 93       	push	r29
    2b54:	cd b7       	in	r28, 0x3d	; 61
    2b56:	de b7       	in	r29, 0x3e	; 62
    2b58:	f8 2e       	mov	r15, r24
    2b5a:	2a 01       	movw	r4, r20
    2b5c:	3b 01       	movw	r6, r22
    2b5e:	88 e0       	ldi	r24, 0x08	; 8
    2b60:	90 e0       	ldi	r25, 0x00	; 0
    2b62:	29 d5       	rcall	.+2642   	; 0x35b6 <malloc>
    2b64:	8c 01       	movw	r16, r24
    2b66:	8f 2d       	mov	r24, r15
    2b68:	90 e0       	ldi	r25, 0x00	; 0
    2b6a:	fc 01       	movw	r30, r24
    2b6c:	ee 0f       	add	r30, r30
    2b6e:	ff 1f       	adc	r31, r31
    2b70:	e5 56       	subi	r30, 0x65	; 101
    2b72:	fe 4e       	sbci	r31, 0xEE	; 238
    2b74:	11 83       	std	Z+1, r17	; 0x01
    2b76:	00 83       	st	Z, r16
    2b78:	01 15       	cp	r16, r1
    2b7a:	11 05       	cpc	r17, r1
    2b7c:	09 f4       	brne	.+2      	; 0x2b80 <serial_create+0x4c>
    2b7e:	64 c0       	rjmp	.+200    	; 0x2c48 <serial_create+0x114>
    2b80:	88 0f       	add	r24, r24
    2b82:	99 1f       	adc	r25, r25
    2b84:	fc 01       	movw	r30, r24
    2b86:	eb 5e       	subi	r30, 0xEB	; 235
    2b88:	fd 4f       	sbci	r31, 0xFD	; 253
    2b8a:	80 81       	ld	r24, Z
    2b8c:	91 81       	ldd	r25, Z+1	; 0x01
    2b8e:	d8 01       	movw	r26, r16
    2b90:	8d 93       	st	X+, r24
    2b92:	9c 93       	st	X, r25
    2b94:	8c 2d       	mov	r24, r12
    2b96:	90 e0       	ldi	r25, 0x00	; 0
    2b98:	88 0f       	add	r24, r24
    2b9a:	99 1f       	adc	r25, r25
    2b9c:	88 0f       	add	r24, r24
    2b9e:	99 1f       	adc	r25, r25
    2ba0:	0a d5       	rcall	.+2580   	; 0x35b6 <malloc>
    2ba2:	1c 01       	movw	r2, r24
    2ba4:	86 e0       	ldi	r24, 0x06	; 6
    2ba6:	90 e0       	ldi	r25, 0x00	; 0
    2ba8:	06 d5       	rcall	.+2572   	; 0x35b6 <malloc>
    2baa:	7c 01       	movw	r14, r24
    2bac:	4c 2d       	mov	r20, r12
    2bae:	b1 01       	movw	r22, r2
    2bb0:	00 d3       	rcall	.+1536   	; 0x31b2 <fifo_init>
    2bb2:	f8 01       	movw	r30, r16
    2bb4:	f5 82       	std	Z+5, r15	; 0x05
    2bb6:	e4 82       	std	Z+4, r14	; 0x04
    2bb8:	8a 2d       	mov	r24, r10
    2bba:	90 e0       	ldi	r25, 0x00	; 0
    2bbc:	88 0f       	add	r24, r24
    2bbe:	99 1f       	adc	r25, r25
    2bc0:	88 0f       	add	r24, r24
    2bc2:	99 1f       	adc	r25, r25
    2bc4:	f8 d4       	rcall	.+2544   	; 0x35b6 <malloc>
    2bc6:	1c 01       	movw	r2, r24
    2bc8:	86 e0       	ldi	r24, 0x06	; 6
    2bca:	90 e0       	ldi	r25, 0x00	; 0
    2bcc:	f4 d4       	rcall	.+2536   	; 0x35b6 <malloc>
    2bce:	7c 01       	movw	r14, r24
    2bd0:	4a 2d       	mov	r20, r10
    2bd2:	b1 01       	movw	r22, r2
    2bd4:	ee d2       	rcall	.+1500   	; 0x31b2 <fifo_init>
    2bd6:	d8 01       	movw	r26, r16
    2bd8:	13 96       	adiw	r26, 0x03	; 3
    2bda:	fc 92       	st	X, r15
    2bdc:	ee 92       	st	-X, r14
    2bde:	12 97       	sbiw	r26, 0x02	; 2
    2be0:	17 96       	adiw	r26, 0x07	; 7
    2be2:	9c 92       	st	X, r9
    2be4:	8e 92       	st	-X, r8
    2be6:	16 97       	sbiw	r26, 0x06	; 6
    2be8:	ff b6       	in	r15, 0x3f	; 63
    2bea:	f8 94       	cli
    2bec:	ed 91       	ld	r30, X+
    2bee:	fc 91       	ld	r31, X
    2bf0:	11 97       	sbiw	r26, 0x01	; 1
    2bf2:	36 97       	sbiw	r30, 0x06	; 6
    2bf4:	80 81       	ld	r24, Z
    2bf6:	82 60       	ori	r24, 0x02	; 2
    2bf8:	80 83       	st	Z, r24
    2bfa:	8d 90       	ld	r8, X+
    2bfc:	9c 90       	ld	r9, X
    2bfe:	c3 01       	movw	r24, r6
    2c00:	b2 01       	movw	r22, r4
    2c02:	c0 dd       	rcall	.-1152   	; 0x2784 <__floatunsisf>
    2c04:	20 e0       	ldi	r18, 0x00	; 0
    2c06:	30 e0       	ldi	r19, 0x00	; 0
    2c08:	40 e0       	ldi	r20, 0x00	; 0
    2c0a:	51 e4       	ldi	r21, 0x41	; 65
    2c0c:	38 d4       	rcall	.+2160   	; 0x347e <__mulsf3>
    2c0e:	9b 01       	movw	r18, r22
    2c10:	ac 01       	movw	r20, r24
    2c12:	60 e0       	ldi	r22, 0x00	; 0
    2c14:	74 e2       	ldi	r23, 0x24	; 36
    2c16:	84 e7       	ldi	r24, 0x74	; 116
    2c18:	9b e4       	ldi	r25, 0x4B	; 75
    2c1a:	4c d3       	rcall	.+1688   	; 0x32b4 <__divsf3>
    2c1c:	20 e0       	ldi	r18, 0x00	; 0
    2c1e:	30 e0       	ldi	r19, 0x00	; 0
    2c20:	40 e8       	ldi	r20, 0x80	; 128
    2c22:	5f e3       	ldi	r21, 0x3F	; 63
    2c24:	e2 d2       	rcall	.+1476   	; 0x31ea <__subsf3>
    2c26:	ae d3       	rcall	.+1884   	; 0x3384 <__fixunssfsi>
    2c28:	f4 01       	movw	r30, r8
    2c2a:	32 97       	sbiw	r30, 0x02	; 2
    2c2c:	60 83       	st	Z, r22
    2c2e:	d8 01       	movw	r26, r16
    2c30:	ed 91       	ld	r30, X+
    2c32:	fc 91       	ld	r31, X
    2c34:	11 97       	sbiw	r26, 0x01	; 1
    2c36:	35 97       	sbiw	r30, 0x05	; 5
    2c38:	88 e9       	ldi	r24, 0x98	; 152
    2c3a:	80 83       	st	Z, r24
    2c3c:	ed 91       	ld	r30, X+
    2c3e:	fc 91       	ld	r31, X
    2c40:	34 97       	sbiw	r30, 0x04	; 4
    2c42:	86 e0       	ldi	r24, 0x06	; 6
    2c44:	80 83       	st	Z, r24
    2c46:	ff be       	out	0x3f, r15	; 63
    2c48:	c8 01       	movw	r24, r16
    2c4a:	df 91       	pop	r29
    2c4c:	cf 91       	pop	r28
    2c4e:	1f 91       	pop	r17
    2c50:	0f 91       	pop	r16
    2c52:	ff 90       	pop	r15
    2c54:	ef 90       	pop	r14
    2c56:	cf 90       	pop	r12
    2c58:	af 90       	pop	r10
    2c5a:	9f 90       	pop	r9
    2c5c:	8f 90       	pop	r8
    2c5e:	7f 90       	pop	r7
    2c60:	6f 90       	pop	r6
    2c62:	5f 90       	pop	r5
    2c64:	4f 90       	pop	r4
    2c66:	3f 90       	pop	r3
    2c68:	2f 90       	pop	r2
    2c6a:	08 95       	ret

00002c6c <serial_sendByte>:
    2c6c:	cf 93       	push	r28
    2c6e:	df 93       	push	r29
    2c70:	dc 01       	movw	r26, r24
    2c72:	89 2b       	or	r24, r25
    2c74:	01 f1       	breq	.+64     	; 0x2cb6 <serial_sendByte+0x4a>
    2c76:	12 96       	adiw	r26, 0x02	; 2
    2c78:	ed 91       	ld	r30, X+
    2c7a:	fc 91       	ld	r31, X
    2c7c:	13 97       	sbiw	r26, 0x03	; 3
    2c7e:	93 81       	ldd	r25, Z+3	; 0x03
    2c80:	82 81       	ldd	r24, Z+2	; 0x02
    2c82:	25 81       	ldd	r18, Z+5	; 0x05
    2c84:	98 1b       	sub	r25, r24
    2c86:	92 23       	and	r25, r18
    2c88:	84 81       	ldd	r24, Z+4	; 0x04
    2c8a:	98 17       	cp	r25, r24
    2c8c:	b1 f0       	breq	.+44     	; 0x2cba <serial_sendByte+0x4e>
    2c8e:	83 81       	ldd	r24, Z+3	; 0x03
    2c90:	26 95       	lsr	r18
    2c92:	28 23       	and	r18, r24
    2c94:	c0 81       	ld	r28, Z
    2c96:	d1 81       	ldd	r29, Z+1	; 0x01
    2c98:	c2 0f       	add	r28, r18
    2c9a:	d1 1d       	adc	r29, r1
    2c9c:	68 83       	st	Y, r22
    2c9e:	8f 5f       	subi	r24, 0xFF	; 255
    2ca0:	95 81       	ldd	r25, Z+5	; 0x05
    2ca2:	89 23       	and	r24, r25
    2ca4:	83 83       	std	Z+3, r24	; 0x03
    2ca6:	ed 91       	ld	r30, X+
    2ca8:	fc 91       	ld	r31, X
    2caa:	35 97       	sbiw	r30, 0x05	; 5
    2cac:	80 81       	ld	r24, Z
    2cae:	80 62       	ori	r24, 0x20	; 32
    2cb0:	80 83       	st	Z, r24
    2cb2:	80 e0       	ldi	r24, 0x00	; 0
    2cb4:	03 c0       	rjmp	.+6      	; 0x2cbc <serial_sendByte+0x50>
    2cb6:	81 e0       	ldi	r24, 0x01	; 1
    2cb8:	01 c0       	rjmp	.+2      	; 0x2cbc <serial_sendByte+0x50>
    2cba:	82 e0       	ldi	r24, 0x02	; 2
    2cbc:	df 91       	pop	r29
    2cbe:	cf 91       	pop	r28
    2cc0:	08 95       	ret

00002cc2 <serial_getByte>:
    2cc2:	00 97       	sbiw	r24, 0x00	; 0
    2cc4:	d1 f0       	breq	.+52     	; 0x2cfa <serial_getByte+0x38>
    2cc6:	dc 01       	movw	r26, r24
    2cc8:	14 96       	adiw	r26, 0x04	; 4
    2cca:	ed 91       	ld	r30, X+
    2ccc:	fc 91       	ld	r31, X
    2cce:	15 97       	sbiw	r26, 0x05	; 5
    2cd0:	93 81       	ldd	r25, Z+3	; 0x03
    2cd2:	82 81       	ldd	r24, Z+2	; 0x02
    2cd4:	98 17       	cp	r25, r24
    2cd6:	99 f0       	breq	.+38     	; 0x2cfe <serial_getByte+0x3c>
    2cd8:	92 81       	ldd	r25, Z+2	; 0x02
    2cda:	85 81       	ldd	r24, Z+5	; 0x05
    2cdc:	86 95       	lsr	r24
    2cde:	89 23       	and	r24, r25
    2ce0:	a0 81       	ld	r26, Z
    2ce2:	b1 81       	ldd	r27, Z+1	; 0x01
    2ce4:	a8 0f       	add	r26, r24
    2ce6:	b1 1d       	adc	r27, r1
    2ce8:	8c 91       	ld	r24, X
    2cea:	db 01       	movw	r26, r22
    2cec:	8c 93       	st	X, r24
    2cee:	9f 5f       	subi	r25, 0xFF	; 255
    2cf0:	85 81       	ldd	r24, Z+5	; 0x05
    2cf2:	98 23       	and	r25, r24
    2cf4:	92 83       	std	Z+2, r25	; 0x02
    2cf6:	80 e0       	ldi	r24, 0x00	; 0
    2cf8:	08 95       	ret
    2cfa:	81 e0       	ldi	r24, 0x01	; 1
    2cfc:	08 95       	ret
    2cfe:	83 e0       	ldi	r24, 0x03	; 3
    2d00:	08 95       	ret

00002d02 <__vector_25>:
    2d02:	1f 92       	push	r1
    2d04:	0f 92       	push	r0
    2d06:	0f b6       	in	r0, 0x3f	; 63
    2d08:	0f 92       	push	r0
    2d0a:	11 24       	eor	r1, r1
    2d0c:	0b b6       	in	r0, 0x3b	; 59
    2d0e:	0f 92       	push	r0
    2d10:	2f 93       	push	r18
    2d12:	3f 93       	push	r19
    2d14:	4f 93       	push	r20
    2d16:	5f 93       	push	r21
    2d18:	6f 93       	push	r22
    2d1a:	7f 93       	push	r23
    2d1c:	8f 93       	push	r24
    2d1e:	9f 93       	push	r25
    2d20:	af 93       	push	r26
    2d22:	bf 93       	push	r27
    2d24:	cf 93       	push	r28
    2d26:	df 93       	push	r29
    2d28:	ef 93       	push	r30
    2d2a:	ff 93       	push	r31
    2d2c:	a0 91 9b 11 	lds	r26, 0x119B	; 0x80119b <_ser_handle>
    2d30:	b0 91 9c 11 	lds	r27, 0x119C	; 0x80119c <_ser_handle+0x1>
    2d34:	10 97       	sbiw	r26, 0x00	; 0
    2d36:	11 f1       	breq	.+68     	; 0x2d7c <__vector_25+0x7a>
    2d38:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    2d3c:	14 96       	adiw	r26, 0x04	; 4
    2d3e:	ed 91       	ld	r30, X+
    2d40:	fc 91       	ld	r31, X
    2d42:	15 97       	sbiw	r26, 0x05	; 5
    2d44:	93 81       	ldd	r25, Z+3	; 0x03
    2d46:	82 81       	ldd	r24, Z+2	; 0x02
    2d48:	25 81       	ldd	r18, Z+5	; 0x05
    2d4a:	98 1b       	sub	r25, r24
    2d4c:	92 23       	and	r25, r18
    2d4e:	84 81       	ldd	r24, Z+4	; 0x04
    2d50:	98 17       	cp	r25, r24
    2d52:	61 f0       	breq	.+24     	; 0x2d6c <__vector_25+0x6a>
    2d54:	83 81       	ldd	r24, Z+3	; 0x03
    2d56:	26 95       	lsr	r18
    2d58:	28 23       	and	r18, r24
    2d5a:	c0 81       	ld	r28, Z
    2d5c:	d1 81       	ldd	r29, Z+1	; 0x01
    2d5e:	c2 0f       	add	r28, r18
    2d60:	d1 1d       	adc	r29, r1
    2d62:	68 83       	st	Y, r22
    2d64:	8f 5f       	subi	r24, 0xFF	; 255
    2d66:	95 81       	ldd	r25, Z+5	; 0x05
    2d68:	89 23       	and	r24, r25
    2d6a:	83 83       	std	Z+3, r24	; 0x03
    2d6c:	16 96       	adiw	r26, 0x06	; 6
    2d6e:	ed 91       	ld	r30, X+
    2d70:	fc 91       	ld	r31, X
    2d72:	17 97       	sbiw	r26, 0x07	; 7
    2d74:	30 97       	sbiw	r30, 0x00	; 0
    2d76:	11 f0       	breq	.+4      	; 0x2d7c <__vector_25+0x7a>
    2d78:	cd 01       	movw	r24, r26
    2d7a:	19 95       	eicall
    2d7c:	ff 91       	pop	r31
    2d7e:	ef 91       	pop	r30
    2d80:	df 91       	pop	r29
    2d82:	cf 91       	pop	r28
    2d84:	bf 91       	pop	r27
    2d86:	af 91       	pop	r26
    2d88:	9f 91       	pop	r25
    2d8a:	8f 91       	pop	r24
    2d8c:	7f 91       	pop	r23
    2d8e:	6f 91       	pop	r22
    2d90:	5f 91       	pop	r21
    2d92:	4f 91       	pop	r20
    2d94:	3f 91       	pop	r19
    2d96:	2f 91       	pop	r18
    2d98:	0f 90       	pop	r0
    2d9a:	0b be       	out	0x3b, r0	; 59
    2d9c:	0f 90       	pop	r0
    2d9e:	0f be       	out	0x3f, r0	; 63
    2da0:	0f 90       	pop	r0
    2da2:	1f 90       	pop	r1
    2da4:	18 95       	reti

00002da6 <__vector_26>:
    2da6:	1f 92       	push	r1
    2da8:	0f 92       	push	r0
    2daa:	0f b6       	in	r0, 0x3f	; 63
    2dac:	0f 92       	push	r0
    2dae:	11 24       	eor	r1, r1
    2db0:	0b b6       	in	r0, 0x3b	; 59
    2db2:	0f 92       	push	r0
    2db4:	2f 93       	push	r18
    2db6:	8f 93       	push	r24
    2db8:	9f 93       	push	r25
    2dba:	af 93       	push	r26
    2dbc:	bf 93       	push	r27
    2dbe:	ef 93       	push	r30
    2dc0:	ff 93       	push	r31
    2dc2:	e0 91 9b 11 	lds	r30, 0x119B	; 0x80119b <_ser_handle>
    2dc6:	f0 91 9c 11 	lds	r31, 0x119C	; 0x80119c <_ser_handle+0x1>
    2dca:	30 97       	sbiw	r30, 0x00	; 0
    2dcc:	b9 f0       	breq	.+46     	; 0x2dfc <__vector_26+0x56>
    2dce:	02 80       	ldd	r0, Z+2	; 0x02
    2dd0:	f3 81       	ldd	r31, Z+3	; 0x03
    2dd2:	e0 2d       	mov	r30, r0
    2dd4:	93 81       	ldd	r25, Z+3	; 0x03
    2dd6:	82 81       	ldd	r24, Z+2	; 0x02
    2dd8:	98 17       	cp	r25, r24
    2dda:	b1 f0       	breq	.+44     	; 0x2e08 <__vector_26+0x62>
    2ddc:	92 81       	ldd	r25, Z+2	; 0x02
    2dde:	85 81       	ldd	r24, Z+5	; 0x05
    2de0:	28 2f       	mov	r18, r24
    2de2:	26 95       	lsr	r18
    2de4:	29 23       	and	r18, r25
    2de6:	a0 81       	ld	r26, Z
    2de8:	b1 81       	ldd	r27, Z+1	; 0x01
    2dea:	a2 0f       	add	r26, r18
    2dec:	b1 1d       	adc	r27, r1
    2dee:	2c 91       	ld	r18, X
    2df0:	9f 5f       	subi	r25, 0xFF	; 255
    2df2:	89 23       	and	r24, r25
    2df4:	82 83       	std	Z+2, r24	; 0x02
    2df6:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    2dfa:	0b c0       	rjmp	.+22     	; 0x2e12 <__vector_26+0x6c>
    2dfc:	e1 ec       	ldi	r30, 0xC1	; 193
    2dfe:	f0 e0       	ldi	r31, 0x00	; 0
    2e00:	80 81       	ld	r24, Z
    2e02:	8f 7d       	andi	r24, 0xDF	; 223
    2e04:	80 83       	st	Z, r24
    2e06:	05 c0       	rjmp	.+10     	; 0x2e12 <__vector_26+0x6c>
    2e08:	e1 ec       	ldi	r30, 0xC1	; 193
    2e0a:	f0 e0       	ldi	r31, 0x00	; 0
    2e0c:	80 81       	ld	r24, Z
    2e0e:	8f 7d       	andi	r24, 0xDF	; 223
    2e10:	80 83       	st	Z, r24
    2e12:	ff 91       	pop	r31
    2e14:	ef 91       	pop	r30
    2e16:	bf 91       	pop	r27
    2e18:	af 91       	pop	r26
    2e1a:	9f 91       	pop	r25
    2e1c:	8f 91       	pop	r24
    2e1e:	2f 91       	pop	r18
    2e20:	0f 90       	pop	r0
    2e22:	0b be       	out	0x3b, r0	; 59
    2e24:	0f 90       	pop	r0
    2e26:	0f be       	out	0x3f, r0	; 63
    2e28:	0f 90       	pop	r0
    2e2a:	1f 90       	pop	r1
    2e2c:	18 95       	reti

00002e2e <__vector_36>:
    2e2e:	1f 92       	push	r1
    2e30:	0f 92       	push	r0
    2e32:	0f b6       	in	r0, 0x3f	; 63
    2e34:	0f 92       	push	r0
    2e36:	11 24       	eor	r1, r1
    2e38:	0b b6       	in	r0, 0x3b	; 59
    2e3a:	0f 92       	push	r0
    2e3c:	2f 93       	push	r18
    2e3e:	3f 93       	push	r19
    2e40:	4f 93       	push	r20
    2e42:	5f 93       	push	r21
    2e44:	6f 93       	push	r22
    2e46:	7f 93       	push	r23
    2e48:	8f 93       	push	r24
    2e4a:	9f 93       	push	r25
    2e4c:	af 93       	push	r26
    2e4e:	bf 93       	push	r27
    2e50:	cf 93       	push	r28
    2e52:	df 93       	push	r29
    2e54:	ef 93       	push	r30
    2e56:	ff 93       	push	r31
    2e58:	a0 91 9d 11 	lds	r26, 0x119D	; 0x80119d <_ser_handle+0x2>
    2e5c:	b0 91 9e 11 	lds	r27, 0x119E	; 0x80119e <_ser_handle+0x3>
    2e60:	10 97       	sbiw	r26, 0x00	; 0
    2e62:	11 f1       	breq	.+68     	; 0x2ea8 <__vector_36+0x7a>
    2e64:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    2e68:	14 96       	adiw	r26, 0x04	; 4
    2e6a:	ed 91       	ld	r30, X+
    2e6c:	fc 91       	ld	r31, X
    2e6e:	15 97       	sbiw	r26, 0x05	; 5
    2e70:	93 81       	ldd	r25, Z+3	; 0x03
    2e72:	82 81       	ldd	r24, Z+2	; 0x02
    2e74:	25 81       	ldd	r18, Z+5	; 0x05
    2e76:	98 1b       	sub	r25, r24
    2e78:	92 23       	and	r25, r18
    2e7a:	84 81       	ldd	r24, Z+4	; 0x04
    2e7c:	98 17       	cp	r25, r24
    2e7e:	61 f0       	breq	.+24     	; 0x2e98 <__vector_36+0x6a>
    2e80:	83 81       	ldd	r24, Z+3	; 0x03
    2e82:	26 95       	lsr	r18
    2e84:	28 23       	and	r18, r24
    2e86:	c0 81       	ld	r28, Z
    2e88:	d1 81       	ldd	r29, Z+1	; 0x01
    2e8a:	c2 0f       	add	r28, r18
    2e8c:	d1 1d       	adc	r29, r1
    2e8e:	68 83       	st	Y, r22
    2e90:	8f 5f       	subi	r24, 0xFF	; 255
    2e92:	95 81       	ldd	r25, Z+5	; 0x05
    2e94:	89 23       	and	r24, r25
    2e96:	83 83       	std	Z+3, r24	; 0x03
    2e98:	16 96       	adiw	r26, 0x06	; 6
    2e9a:	ed 91       	ld	r30, X+
    2e9c:	fc 91       	ld	r31, X
    2e9e:	17 97       	sbiw	r26, 0x07	; 7
    2ea0:	30 97       	sbiw	r30, 0x00	; 0
    2ea2:	11 f0       	breq	.+4      	; 0x2ea8 <__vector_36+0x7a>
    2ea4:	cd 01       	movw	r24, r26
    2ea6:	19 95       	eicall
    2ea8:	ff 91       	pop	r31
    2eaa:	ef 91       	pop	r30
    2eac:	df 91       	pop	r29
    2eae:	cf 91       	pop	r28
    2eb0:	bf 91       	pop	r27
    2eb2:	af 91       	pop	r26
    2eb4:	9f 91       	pop	r25
    2eb6:	8f 91       	pop	r24
    2eb8:	7f 91       	pop	r23
    2eba:	6f 91       	pop	r22
    2ebc:	5f 91       	pop	r21
    2ebe:	4f 91       	pop	r20
    2ec0:	3f 91       	pop	r19
    2ec2:	2f 91       	pop	r18
    2ec4:	0f 90       	pop	r0
    2ec6:	0b be       	out	0x3b, r0	; 59
    2ec8:	0f 90       	pop	r0
    2eca:	0f be       	out	0x3f, r0	; 63
    2ecc:	0f 90       	pop	r0
    2ece:	1f 90       	pop	r1
    2ed0:	18 95       	reti

00002ed2 <__vector_37>:
    2ed2:	1f 92       	push	r1
    2ed4:	0f 92       	push	r0
    2ed6:	0f b6       	in	r0, 0x3f	; 63
    2ed8:	0f 92       	push	r0
    2eda:	11 24       	eor	r1, r1
    2edc:	0b b6       	in	r0, 0x3b	; 59
    2ede:	0f 92       	push	r0
    2ee0:	2f 93       	push	r18
    2ee2:	8f 93       	push	r24
    2ee4:	9f 93       	push	r25
    2ee6:	af 93       	push	r26
    2ee8:	bf 93       	push	r27
    2eea:	ef 93       	push	r30
    2eec:	ff 93       	push	r31
    2eee:	e0 91 9d 11 	lds	r30, 0x119D	; 0x80119d <_ser_handle+0x2>
    2ef2:	f0 91 9e 11 	lds	r31, 0x119E	; 0x80119e <_ser_handle+0x3>
    2ef6:	30 97       	sbiw	r30, 0x00	; 0
    2ef8:	b9 f0       	breq	.+46     	; 0x2f28 <__vector_37+0x56>
    2efa:	02 80       	ldd	r0, Z+2	; 0x02
    2efc:	f3 81       	ldd	r31, Z+3	; 0x03
    2efe:	e0 2d       	mov	r30, r0
    2f00:	93 81       	ldd	r25, Z+3	; 0x03
    2f02:	82 81       	ldd	r24, Z+2	; 0x02
    2f04:	98 17       	cp	r25, r24
    2f06:	b1 f0       	breq	.+44     	; 0x2f34 <__vector_37+0x62>
    2f08:	92 81       	ldd	r25, Z+2	; 0x02
    2f0a:	85 81       	ldd	r24, Z+5	; 0x05
    2f0c:	28 2f       	mov	r18, r24
    2f0e:	26 95       	lsr	r18
    2f10:	29 23       	and	r18, r25
    2f12:	a0 81       	ld	r26, Z
    2f14:	b1 81       	ldd	r27, Z+1	; 0x01
    2f16:	a2 0f       	add	r26, r18
    2f18:	b1 1d       	adc	r27, r1
    2f1a:	2c 91       	ld	r18, X
    2f1c:	9f 5f       	subi	r25, 0xFF	; 255
    2f1e:	89 23       	and	r24, r25
    2f20:	82 83       	std	Z+2, r24	; 0x02
    2f22:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    2f26:	0b c0       	rjmp	.+22     	; 0x2f3e <__vector_37+0x6c>
    2f28:	e9 ec       	ldi	r30, 0xC9	; 201
    2f2a:	f0 e0       	ldi	r31, 0x00	; 0
    2f2c:	80 81       	ld	r24, Z
    2f2e:	8f 7d       	andi	r24, 0xDF	; 223
    2f30:	80 83       	st	Z, r24
    2f32:	05 c0       	rjmp	.+10     	; 0x2f3e <__vector_37+0x6c>
    2f34:	e9 ec       	ldi	r30, 0xC9	; 201
    2f36:	f0 e0       	ldi	r31, 0x00	; 0
    2f38:	80 81       	ld	r24, Z
    2f3a:	8f 7d       	andi	r24, 0xDF	; 223
    2f3c:	80 83       	st	Z, r24
    2f3e:	ff 91       	pop	r31
    2f40:	ef 91       	pop	r30
    2f42:	bf 91       	pop	r27
    2f44:	af 91       	pop	r26
    2f46:	9f 91       	pop	r25
    2f48:	8f 91       	pop	r24
    2f4a:	2f 91       	pop	r18
    2f4c:	0f 90       	pop	r0
    2f4e:	0b be       	out	0x3b, r0	; 59
    2f50:	0f 90       	pop	r0
    2f52:	0f be       	out	0x3f, r0	; 63
    2f54:	0f 90       	pop	r0
    2f56:	1f 90       	pop	r1
    2f58:	18 95       	reti

00002f5a <__vector_51>:
    2f5a:	1f 92       	push	r1
    2f5c:	0f 92       	push	r0
    2f5e:	0f b6       	in	r0, 0x3f	; 63
    2f60:	0f 92       	push	r0
    2f62:	11 24       	eor	r1, r1
    2f64:	0b b6       	in	r0, 0x3b	; 59
    2f66:	0f 92       	push	r0
    2f68:	2f 93       	push	r18
    2f6a:	3f 93       	push	r19
    2f6c:	4f 93       	push	r20
    2f6e:	5f 93       	push	r21
    2f70:	6f 93       	push	r22
    2f72:	7f 93       	push	r23
    2f74:	8f 93       	push	r24
    2f76:	9f 93       	push	r25
    2f78:	af 93       	push	r26
    2f7a:	bf 93       	push	r27
    2f7c:	cf 93       	push	r28
    2f7e:	df 93       	push	r29
    2f80:	ef 93       	push	r30
    2f82:	ff 93       	push	r31
    2f84:	a0 91 9f 11 	lds	r26, 0x119F	; 0x80119f <_ser_handle+0x4>
    2f88:	b0 91 a0 11 	lds	r27, 0x11A0	; 0x8011a0 <_ser_handle+0x5>
    2f8c:	10 97       	sbiw	r26, 0x00	; 0
    2f8e:	11 f1       	breq	.+68     	; 0x2fd4 <__vector_51+0x7a>
    2f90:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    2f94:	14 96       	adiw	r26, 0x04	; 4
    2f96:	ed 91       	ld	r30, X+
    2f98:	fc 91       	ld	r31, X
    2f9a:	15 97       	sbiw	r26, 0x05	; 5
    2f9c:	93 81       	ldd	r25, Z+3	; 0x03
    2f9e:	82 81       	ldd	r24, Z+2	; 0x02
    2fa0:	25 81       	ldd	r18, Z+5	; 0x05
    2fa2:	98 1b       	sub	r25, r24
    2fa4:	92 23       	and	r25, r18
    2fa6:	84 81       	ldd	r24, Z+4	; 0x04
    2fa8:	98 17       	cp	r25, r24
    2faa:	61 f0       	breq	.+24     	; 0x2fc4 <__vector_51+0x6a>
    2fac:	83 81       	ldd	r24, Z+3	; 0x03
    2fae:	26 95       	lsr	r18
    2fb0:	28 23       	and	r18, r24
    2fb2:	c0 81       	ld	r28, Z
    2fb4:	d1 81       	ldd	r29, Z+1	; 0x01
    2fb6:	c2 0f       	add	r28, r18
    2fb8:	d1 1d       	adc	r29, r1
    2fba:	68 83       	st	Y, r22
    2fbc:	8f 5f       	subi	r24, 0xFF	; 255
    2fbe:	95 81       	ldd	r25, Z+5	; 0x05
    2fc0:	89 23       	and	r24, r25
    2fc2:	83 83       	std	Z+3, r24	; 0x03
    2fc4:	16 96       	adiw	r26, 0x06	; 6
    2fc6:	ed 91       	ld	r30, X+
    2fc8:	fc 91       	ld	r31, X
    2fca:	17 97       	sbiw	r26, 0x07	; 7
    2fcc:	30 97       	sbiw	r30, 0x00	; 0
    2fce:	11 f0       	breq	.+4      	; 0x2fd4 <__vector_51+0x7a>
    2fd0:	cd 01       	movw	r24, r26
    2fd2:	19 95       	eicall
    2fd4:	ff 91       	pop	r31
    2fd6:	ef 91       	pop	r30
    2fd8:	df 91       	pop	r29
    2fda:	cf 91       	pop	r28
    2fdc:	bf 91       	pop	r27
    2fde:	af 91       	pop	r26
    2fe0:	9f 91       	pop	r25
    2fe2:	8f 91       	pop	r24
    2fe4:	7f 91       	pop	r23
    2fe6:	6f 91       	pop	r22
    2fe8:	5f 91       	pop	r21
    2fea:	4f 91       	pop	r20
    2fec:	3f 91       	pop	r19
    2fee:	2f 91       	pop	r18
    2ff0:	0f 90       	pop	r0
    2ff2:	0b be       	out	0x3b, r0	; 59
    2ff4:	0f 90       	pop	r0
    2ff6:	0f be       	out	0x3f, r0	; 63
    2ff8:	0f 90       	pop	r0
    2ffa:	1f 90       	pop	r1
    2ffc:	18 95       	reti

00002ffe <__vector_52>:
    2ffe:	1f 92       	push	r1
    3000:	0f 92       	push	r0
    3002:	0f b6       	in	r0, 0x3f	; 63
    3004:	0f 92       	push	r0
    3006:	11 24       	eor	r1, r1
    3008:	0b b6       	in	r0, 0x3b	; 59
    300a:	0f 92       	push	r0
    300c:	2f 93       	push	r18
    300e:	8f 93       	push	r24
    3010:	9f 93       	push	r25
    3012:	af 93       	push	r26
    3014:	bf 93       	push	r27
    3016:	ef 93       	push	r30
    3018:	ff 93       	push	r31
    301a:	e0 91 9f 11 	lds	r30, 0x119F	; 0x80119f <_ser_handle+0x4>
    301e:	f0 91 a0 11 	lds	r31, 0x11A0	; 0x8011a0 <_ser_handle+0x5>
    3022:	30 97       	sbiw	r30, 0x00	; 0
    3024:	b9 f0       	breq	.+46     	; 0x3054 <__vector_52+0x56>
    3026:	02 80       	ldd	r0, Z+2	; 0x02
    3028:	f3 81       	ldd	r31, Z+3	; 0x03
    302a:	e0 2d       	mov	r30, r0
    302c:	93 81       	ldd	r25, Z+3	; 0x03
    302e:	82 81       	ldd	r24, Z+2	; 0x02
    3030:	98 17       	cp	r25, r24
    3032:	b1 f0       	breq	.+44     	; 0x3060 <__vector_52+0x62>
    3034:	92 81       	ldd	r25, Z+2	; 0x02
    3036:	85 81       	ldd	r24, Z+5	; 0x05
    3038:	28 2f       	mov	r18, r24
    303a:	26 95       	lsr	r18
    303c:	29 23       	and	r18, r25
    303e:	a0 81       	ld	r26, Z
    3040:	b1 81       	ldd	r27, Z+1	; 0x01
    3042:	a2 0f       	add	r26, r18
    3044:	b1 1d       	adc	r27, r1
    3046:	2c 91       	ld	r18, X
    3048:	9f 5f       	subi	r25, 0xFF	; 255
    304a:	89 23       	and	r24, r25
    304c:	82 83       	std	Z+2, r24	; 0x02
    304e:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    3052:	0b c0       	rjmp	.+22     	; 0x306a <__vector_52+0x6c>
    3054:	e1 ed       	ldi	r30, 0xD1	; 209
    3056:	f0 e0       	ldi	r31, 0x00	; 0
    3058:	80 81       	ld	r24, Z
    305a:	8f 7d       	andi	r24, 0xDF	; 223
    305c:	80 83       	st	Z, r24
    305e:	05 c0       	rjmp	.+10     	; 0x306a <__vector_52+0x6c>
    3060:	e1 ed       	ldi	r30, 0xD1	; 209
    3062:	f0 e0       	ldi	r31, 0x00	; 0
    3064:	80 81       	ld	r24, Z
    3066:	8f 7d       	andi	r24, 0xDF	; 223
    3068:	80 83       	st	Z, r24
    306a:	ff 91       	pop	r31
    306c:	ef 91       	pop	r30
    306e:	bf 91       	pop	r27
    3070:	af 91       	pop	r26
    3072:	9f 91       	pop	r25
    3074:	8f 91       	pop	r24
    3076:	2f 91       	pop	r18
    3078:	0f 90       	pop	r0
    307a:	0b be       	out	0x3b, r0	; 59
    307c:	0f 90       	pop	r0
    307e:	0f be       	out	0x3f, r0	; 63
    3080:	0f 90       	pop	r0
    3082:	1f 90       	pop	r1
    3084:	18 95       	reti

00003086 <__vector_54>:
    3086:	1f 92       	push	r1
    3088:	0f 92       	push	r0
    308a:	0f b6       	in	r0, 0x3f	; 63
    308c:	0f 92       	push	r0
    308e:	11 24       	eor	r1, r1
    3090:	0b b6       	in	r0, 0x3b	; 59
    3092:	0f 92       	push	r0
    3094:	2f 93       	push	r18
    3096:	3f 93       	push	r19
    3098:	4f 93       	push	r20
    309a:	5f 93       	push	r21
    309c:	6f 93       	push	r22
    309e:	7f 93       	push	r23
    30a0:	8f 93       	push	r24
    30a2:	9f 93       	push	r25
    30a4:	af 93       	push	r26
    30a6:	bf 93       	push	r27
    30a8:	cf 93       	push	r28
    30aa:	df 93       	push	r29
    30ac:	ef 93       	push	r30
    30ae:	ff 93       	push	r31
    30b0:	a0 91 a1 11 	lds	r26, 0x11A1	; 0x8011a1 <_ser_handle+0x6>
    30b4:	b0 91 a2 11 	lds	r27, 0x11A2	; 0x8011a2 <_ser_handle+0x7>
    30b8:	10 97       	sbiw	r26, 0x00	; 0
    30ba:	11 f1       	breq	.+68     	; 0x3100 <__vector_54+0x7a>
    30bc:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    30c0:	14 96       	adiw	r26, 0x04	; 4
    30c2:	ed 91       	ld	r30, X+
    30c4:	fc 91       	ld	r31, X
    30c6:	15 97       	sbiw	r26, 0x05	; 5
    30c8:	93 81       	ldd	r25, Z+3	; 0x03
    30ca:	82 81       	ldd	r24, Z+2	; 0x02
    30cc:	25 81       	ldd	r18, Z+5	; 0x05
    30ce:	98 1b       	sub	r25, r24
    30d0:	92 23       	and	r25, r18
    30d2:	84 81       	ldd	r24, Z+4	; 0x04
    30d4:	98 17       	cp	r25, r24
    30d6:	61 f0       	breq	.+24     	; 0x30f0 <__vector_54+0x6a>
    30d8:	83 81       	ldd	r24, Z+3	; 0x03
    30da:	26 95       	lsr	r18
    30dc:	28 23       	and	r18, r24
    30de:	c0 81       	ld	r28, Z
    30e0:	d1 81       	ldd	r29, Z+1	; 0x01
    30e2:	c2 0f       	add	r28, r18
    30e4:	d1 1d       	adc	r29, r1
    30e6:	68 83       	st	Y, r22
    30e8:	8f 5f       	subi	r24, 0xFF	; 255
    30ea:	95 81       	ldd	r25, Z+5	; 0x05
    30ec:	89 23       	and	r24, r25
    30ee:	83 83       	std	Z+3, r24	; 0x03
    30f0:	16 96       	adiw	r26, 0x06	; 6
    30f2:	ed 91       	ld	r30, X+
    30f4:	fc 91       	ld	r31, X
    30f6:	17 97       	sbiw	r26, 0x07	; 7
    30f8:	30 97       	sbiw	r30, 0x00	; 0
    30fa:	11 f0       	breq	.+4      	; 0x3100 <__vector_54+0x7a>
    30fc:	cd 01       	movw	r24, r26
    30fe:	19 95       	eicall
    3100:	ff 91       	pop	r31
    3102:	ef 91       	pop	r30
    3104:	df 91       	pop	r29
    3106:	cf 91       	pop	r28
    3108:	bf 91       	pop	r27
    310a:	af 91       	pop	r26
    310c:	9f 91       	pop	r25
    310e:	8f 91       	pop	r24
    3110:	7f 91       	pop	r23
    3112:	6f 91       	pop	r22
    3114:	5f 91       	pop	r21
    3116:	4f 91       	pop	r20
    3118:	3f 91       	pop	r19
    311a:	2f 91       	pop	r18
    311c:	0f 90       	pop	r0
    311e:	0b be       	out	0x3b, r0	; 59
    3120:	0f 90       	pop	r0
    3122:	0f be       	out	0x3f, r0	; 63
    3124:	0f 90       	pop	r0
    3126:	1f 90       	pop	r1
    3128:	18 95       	reti

0000312a <__vector_55>:
    312a:	1f 92       	push	r1
    312c:	0f 92       	push	r0
    312e:	0f b6       	in	r0, 0x3f	; 63
    3130:	0f 92       	push	r0
    3132:	11 24       	eor	r1, r1
    3134:	0b b6       	in	r0, 0x3b	; 59
    3136:	0f 92       	push	r0
    3138:	2f 93       	push	r18
    313a:	8f 93       	push	r24
    313c:	9f 93       	push	r25
    313e:	af 93       	push	r26
    3140:	bf 93       	push	r27
    3142:	ef 93       	push	r30
    3144:	ff 93       	push	r31
    3146:	e0 91 a1 11 	lds	r30, 0x11A1	; 0x8011a1 <_ser_handle+0x6>
    314a:	f0 91 a2 11 	lds	r31, 0x11A2	; 0x8011a2 <_ser_handle+0x7>
    314e:	30 97       	sbiw	r30, 0x00	; 0
    3150:	b9 f0       	breq	.+46     	; 0x3180 <__vector_55+0x56>
    3152:	02 80       	ldd	r0, Z+2	; 0x02
    3154:	f3 81       	ldd	r31, Z+3	; 0x03
    3156:	e0 2d       	mov	r30, r0
    3158:	93 81       	ldd	r25, Z+3	; 0x03
    315a:	82 81       	ldd	r24, Z+2	; 0x02
    315c:	98 17       	cp	r25, r24
    315e:	b1 f0       	breq	.+44     	; 0x318c <__vector_55+0x62>
    3160:	92 81       	ldd	r25, Z+2	; 0x02
    3162:	85 81       	ldd	r24, Z+5	; 0x05
    3164:	28 2f       	mov	r18, r24
    3166:	26 95       	lsr	r18
    3168:	29 23       	and	r18, r25
    316a:	a0 81       	ld	r26, Z
    316c:	b1 81       	ldd	r27, Z+1	; 0x01
    316e:	a2 0f       	add	r26, r18
    3170:	b1 1d       	adc	r27, r1
    3172:	2c 91       	ld	r18, X
    3174:	9f 5f       	subi	r25, 0xFF	; 255
    3176:	89 23       	and	r24, r25
    3178:	82 83       	std	Z+2, r24	; 0x02
    317a:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    317e:	0b c0       	rjmp	.+22     	; 0x3196 <__vector_55+0x6c>
    3180:	e1 e3       	ldi	r30, 0x31	; 49
    3182:	f1 e0       	ldi	r31, 0x01	; 1
    3184:	80 81       	ld	r24, Z
    3186:	8f 7d       	andi	r24, 0xDF	; 223
    3188:	80 83       	st	Z, r24
    318a:	05 c0       	rjmp	.+10     	; 0x3196 <__vector_55+0x6c>
    318c:	e1 e3       	ldi	r30, 0x31	; 49
    318e:	f1 e0       	ldi	r31, 0x01	; 1
    3190:	80 81       	ld	r24, Z
    3192:	8f 7d       	andi	r24, 0xDF	; 223
    3194:	80 83       	st	Z, r24
    3196:	ff 91       	pop	r31
    3198:	ef 91       	pop	r30
    319a:	bf 91       	pop	r27
    319c:	af 91       	pop	r26
    319e:	9f 91       	pop	r25
    31a0:	8f 91       	pop	r24
    31a2:	2f 91       	pop	r18
    31a4:	0f 90       	pop	r0
    31a6:	0b be       	out	0x3b, r0	; 59
    31a8:	0f 90       	pop	r0
    31aa:	0f be       	out	0x3f, r0	; 63
    31ac:	0f 90       	pop	r0
    31ae:	1f 90       	pop	r1
    31b0:	18 95       	reti

000031b2 <fifo_init>:
    31b2:	fc 01       	movw	r30, r24
    31b4:	41 11       	cpse	r20, r1
    31b6:	01 c0       	rjmp	.+2      	; 0x31ba <fifo_init+0x8>
    31b8:	1f d3       	rcall	.+1598   	; 0x37f8 <abort>
    31ba:	84 2f       	mov	r24, r20
    31bc:	90 e0       	ldi	r25, 0x00	; 0
    31be:	9c 01       	movw	r18, r24
    31c0:	21 50       	subi	r18, 0x01	; 1
    31c2:	31 09       	sbc	r19, r1
    31c4:	82 23       	and	r24, r18
    31c6:	93 23       	and	r25, r19
    31c8:	89 2b       	or	r24, r25
    31ca:	09 f0       	breq	.+2      	; 0x31ce <fifo_init+0x1c>
    31cc:	15 d3       	rcall	.+1578   	; 0x37f8 <abort>
    31ce:	41 38       	cpi	r20, 0x81	; 129
    31d0:	08 f0       	brcs	.+2      	; 0x31d4 <fifo_init+0x22>
    31d2:	12 d3       	rcall	.+1572   	; 0x37f8 <abort>
    31d4:	12 82       	std	Z+2, r1	; 0x02
    31d6:	13 82       	std	Z+3, r1	; 0x03
    31d8:	44 83       	std	Z+4, r20	; 0x04
    31da:	44 0f       	add	r20, r20
    31dc:	41 50       	subi	r20, 0x01	; 1
    31de:	45 83       	std	Z+5, r20	; 0x05
    31e0:	71 83       	std	Z+1, r23	; 0x01
    31e2:	60 83       	st	Z, r22
    31e4:	80 e0       	ldi	r24, 0x00	; 0
    31e6:	90 e0       	ldi	r25, 0x00	; 0
    31e8:	08 95       	ret

000031ea <__subsf3>:
    31ea:	50 58       	subi	r21, 0x80	; 128

000031ec <__addsf3>:
    31ec:	bb 27       	eor	r27, r27
    31ee:	aa 27       	eor	r26, r26
    31f0:	0e d0       	rcall	.+28     	; 0x320e <__addsf3x>
    31f2:	0b c1       	rjmp	.+534    	; 0x340a <__fp_round>
    31f4:	fc d0       	rcall	.+504    	; 0x33ee <__fp_pscA>
    31f6:	30 f0       	brcs	.+12     	; 0x3204 <__addsf3+0x18>
    31f8:	01 d1       	rcall	.+514    	; 0x33fc <__fp_pscB>
    31fa:	20 f0       	brcs	.+8      	; 0x3204 <__addsf3+0x18>
    31fc:	31 f4       	brne	.+12     	; 0x320a <__addsf3+0x1e>
    31fe:	9f 3f       	cpi	r25, 0xFF	; 255
    3200:	11 f4       	brne	.+4      	; 0x3206 <__addsf3+0x1a>
    3202:	1e f4       	brtc	.+6      	; 0x320a <__addsf3+0x1e>
    3204:	f1 c0       	rjmp	.+482    	; 0x33e8 <__fp_nan>
    3206:	0e f4       	brtc	.+2      	; 0x320a <__addsf3+0x1e>
    3208:	e0 95       	com	r30
    320a:	e7 fb       	bst	r30, 7
    320c:	e7 c0       	rjmp	.+462    	; 0x33dc <__fp_inf>

0000320e <__addsf3x>:
    320e:	e9 2f       	mov	r30, r25
    3210:	0d d1       	rcall	.+538    	; 0x342c <__fp_split3>
    3212:	80 f3       	brcs	.-32     	; 0x31f4 <__addsf3+0x8>
    3214:	ba 17       	cp	r27, r26
    3216:	62 07       	cpc	r22, r18
    3218:	73 07       	cpc	r23, r19
    321a:	84 07       	cpc	r24, r20
    321c:	95 07       	cpc	r25, r21
    321e:	18 f0       	brcs	.+6      	; 0x3226 <__addsf3x+0x18>
    3220:	71 f4       	brne	.+28     	; 0x323e <__addsf3x+0x30>
    3222:	9e f5       	brtc	.+102    	; 0x328a <__addsf3x+0x7c>
    3224:	25 c1       	rjmp	.+586    	; 0x3470 <__fp_zero>
    3226:	0e f4       	brtc	.+2      	; 0x322a <__addsf3x+0x1c>
    3228:	e0 95       	com	r30
    322a:	0b 2e       	mov	r0, r27
    322c:	ba 2f       	mov	r27, r26
    322e:	a0 2d       	mov	r26, r0
    3230:	0b 01       	movw	r0, r22
    3232:	b9 01       	movw	r22, r18
    3234:	90 01       	movw	r18, r0
    3236:	0c 01       	movw	r0, r24
    3238:	ca 01       	movw	r24, r20
    323a:	a0 01       	movw	r20, r0
    323c:	11 24       	eor	r1, r1
    323e:	ff 27       	eor	r31, r31
    3240:	59 1b       	sub	r21, r25
    3242:	99 f0       	breq	.+38     	; 0x326a <__addsf3x+0x5c>
    3244:	59 3f       	cpi	r21, 0xF9	; 249
    3246:	50 f4       	brcc	.+20     	; 0x325c <__addsf3x+0x4e>
    3248:	50 3e       	cpi	r21, 0xE0	; 224
    324a:	68 f1       	brcs	.+90     	; 0x32a6 <__addsf3x+0x98>
    324c:	1a 16       	cp	r1, r26
    324e:	f0 40       	sbci	r31, 0x00	; 0
    3250:	a2 2f       	mov	r26, r18
    3252:	23 2f       	mov	r18, r19
    3254:	34 2f       	mov	r19, r20
    3256:	44 27       	eor	r20, r20
    3258:	58 5f       	subi	r21, 0xF8	; 248
    325a:	f3 cf       	rjmp	.-26     	; 0x3242 <__addsf3x+0x34>
    325c:	46 95       	lsr	r20
    325e:	37 95       	ror	r19
    3260:	27 95       	ror	r18
    3262:	a7 95       	ror	r26
    3264:	f0 40       	sbci	r31, 0x00	; 0
    3266:	53 95       	inc	r21
    3268:	c9 f7       	brne	.-14     	; 0x325c <__addsf3x+0x4e>
    326a:	7e f4       	brtc	.+30     	; 0x328a <__addsf3x+0x7c>
    326c:	1f 16       	cp	r1, r31
    326e:	ba 0b       	sbc	r27, r26
    3270:	62 0b       	sbc	r22, r18
    3272:	73 0b       	sbc	r23, r19
    3274:	84 0b       	sbc	r24, r20
    3276:	ba f0       	brmi	.+46     	; 0x32a6 <__addsf3x+0x98>
    3278:	91 50       	subi	r25, 0x01	; 1
    327a:	a1 f0       	breq	.+40     	; 0x32a4 <__addsf3x+0x96>
    327c:	ff 0f       	add	r31, r31
    327e:	bb 1f       	adc	r27, r27
    3280:	66 1f       	adc	r22, r22
    3282:	77 1f       	adc	r23, r23
    3284:	88 1f       	adc	r24, r24
    3286:	c2 f7       	brpl	.-16     	; 0x3278 <__addsf3x+0x6a>
    3288:	0e c0       	rjmp	.+28     	; 0x32a6 <__addsf3x+0x98>
    328a:	ba 0f       	add	r27, r26
    328c:	62 1f       	adc	r22, r18
    328e:	73 1f       	adc	r23, r19
    3290:	84 1f       	adc	r24, r20
    3292:	48 f4       	brcc	.+18     	; 0x32a6 <__addsf3x+0x98>
    3294:	87 95       	ror	r24
    3296:	77 95       	ror	r23
    3298:	67 95       	ror	r22
    329a:	b7 95       	ror	r27
    329c:	f7 95       	ror	r31
    329e:	9e 3f       	cpi	r25, 0xFE	; 254
    32a0:	08 f0       	brcs	.+2      	; 0x32a4 <__addsf3x+0x96>
    32a2:	b3 cf       	rjmp	.-154    	; 0x320a <__addsf3+0x1e>
    32a4:	93 95       	inc	r25
    32a6:	88 0f       	add	r24, r24
    32a8:	08 f0       	brcs	.+2      	; 0x32ac <__addsf3x+0x9e>
    32aa:	99 27       	eor	r25, r25
    32ac:	ee 0f       	add	r30, r30
    32ae:	97 95       	ror	r25
    32b0:	87 95       	ror	r24
    32b2:	08 95       	ret

000032b4 <__divsf3>:
    32b4:	0c d0       	rcall	.+24     	; 0x32ce <__divsf3x>
    32b6:	a9 c0       	rjmp	.+338    	; 0x340a <__fp_round>
    32b8:	a1 d0       	rcall	.+322    	; 0x33fc <__fp_pscB>
    32ba:	40 f0       	brcs	.+16     	; 0x32cc <__divsf3+0x18>
    32bc:	98 d0       	rcall	.+304    	; 0x33ee <__fp_pscA>
    32be:	30 f0       	brcs	.+12     	; 0x32cc <__divsf3+0x18>
    32c0:	21 f4       	brne	.+8      	; 0x32ca <__divsf3+0x16>
    32c2:	5f 3f       	cpi	r21, 0xFF	; 255
    32c4:	19 f0       	breq	.+6      	; 0x32cc <__divsf3+0x18>
    32c6:	8a c0       	rjmp	.+276    	; 0x33dc <__fp_inf>
    32c8:	51 11       	cpse	r21, r1
    32ca:	d3 c0       	rjmp	.+422    	; 0x3472 <__fp_szero>
    32cc:	8d c0       	rjmp	.+282    	; 0x33e8 <__fp_nan>

000032ce <__divsf3x>:
    32ce:	ae d0       	rcall	.+348    	; 0x342c <__fp_split3>
    32d0:	98 f3       	brcs	.-26     	; 0x32b8 <__divsf3+0x4>

000032d2 <__divsf3_pse>:
    32d2:	99 23       	and	r25, r25
    32d4:	c9 f3       	breq	.-14     	; 0x32c8 <__divsf3+0x14>
    32d6:	55 23       	and	r21, r21
    32d8:	b1 f3       	breq	.-20     	; 0x32c6 <__divsf3+0x12>
    32da:	95 1b       	sub	r25, r21
    32dc:	55 0b       	sbc	r21, r21
    32de:	bb 27       	eor	r27, r27
    32e0:	aa 27       	eor	r26, r26
    32e2:	62 17       	cp	r22, r18
    32e4:	73 07       	cpc	r23, r19
    32e6:	84 07       	cpc	r24, r20
    32e8:	38 f0       	brcs	.+14     	; 0x32f8 <__divsf3_pse+0x26>
    32ea:	9f 5f       	subi	r25, 0xFF	; 255
    32ec:	5f 4f       	sbci	r21, 0xFF	; 255
    32ee:	22 0f       	add	r18, r18
    32f0:	33 1f       	adc	r19, r19
    32f2:	44 1f       	adc	r20, r20
    32f4:	aa 1f       	adc	r26, r26
    32f6:	a9 f3       	breq	.-22     	; 0x32e2 <__divsf3_pse+0x10>
    32f8:	33 d0       	rcall	.+102    	; 0x3360 <__divsf3_pse+0x8e>
    32fa:	0e 2e       	mov	r0, r30
    32fc:	3a f0       	brmi	.+14     	; 0x330c <__divsf3_pse+0x3a>
    32fe:	e0 e8       	ldi	r30, 0x80	; 128
    3300:	30 d0       	rcall	.+96     	; 0x3362 <__divsf3_pse+0x90>
    3302:	91 50       	subi	r25, 0x01	; 1
    3304:	50 40       	sbci	r21, 0x00	; 0
    3306:	e6 95       	lsr	r30
    3308:	00 1c       	adc	r0, r0
    330a:	ca f7       	brpl	.-14     	; 0x32fe <__divsf3_pse+0x2c>
    330c:	29 d0       	rcall	.+82     	; 0x3360 <__divsf3_pse+0x8e>
    330e:	fe 2f       	mov	r31, r30
    3310:	27 d0       	rcall	.+78     	; 0x3360 <__divsf3_pse+0x8e>
    3312:	66 0f       	add	r22, r22
    3314:	77 1f       	adc	r23, r23
    3316:	88 1f       	adc	r24, r24
    3318:	bb 1f       	adc	r27, r27
    331a:	26 17       	cp	r18, r22
    331c:	37 07       	cpc	r19, r23
    331e:	48 07       	cpc	r20, r24
    3320:	ab 07       	cpc	r26, r27
    3322:	b0 e8       	ldi	r27, 0x80	; 128
    3324:	09 f0       	breq	.+2      	; 0x3328 <__divsf3_pse+0x56>
    3326:	bb 0b       	sbc	r27, r27
    3328:	80 2d       	mov	r24, r0
    332a:	bf 01       	movw	r22, r30
    332c:	ff 27       	eor	r31, r31
    332e:	93 58       	subi	r25, 0x83	; 131
    3330:	5f 4f       	sbci	r21, 0xFF	; 255
    3332:	2a f0       	brmi	.+10     	; 0x333e <__divsf3_pse+0x6c>
    3334:	9e 3f       	cpi	r25, 0xFE	; 254
    3336:	51 05       	cpc	r21, r1
    3338:	68 f0       	brcs	.+26     	; 0x3354 <__divsf3_pse+0x82>
    333a:	50 c0       	rjmp	.+160    	; 0x33dc <__fp_inf>
    333c:	9a c0       	rjmp	.+308    	; 0x3472 <__fp_szero>
    333e:	5f 3f       	cpi	r21, 0xFF	; 255
    3340:	ec f3       	brlt	.-6      	; 0x333c <__divsf3_pse+0x6a>
    3342:	98 3e       	cpi	r25, 0xE8	; 232
    3344:	dc f3       	brlt	.-10     	; 0x333c <__divsf3_pse+0x6a>
    3346:	86 95       	lsr	r24
    3348:	77 95       	ror	r23
    334a:	67 95       	ror	r22
    334c:	b7 95       	ror	r27
    334e:	f7 95       	ror	r31
    3350:	9f 5f       	subi	r25, 0xFF	; 255
    3352:	c9 f7       	brne	.-14     	; 0x3346 <__divsf3_pse+0x74>
    3354:	88 0f       	add	r24, r24
    3356:	91 1d       	adc	r25, r1
    3358:	96 95       	lsr	r25
    335a:	87 95       	ror	r24
    335c:	97 f9       	bld	r25, 7
    335e:	08 95       	ret
    3360:	e1 e0       	ldi	r30, 0x01	; 1
    3362:	66 0f       	add	r22, r22
    3364:	77 1f       	adc	r23, r23
    3366:	88 1f       	adc	r24, r24
    3368:	bb 1f       	adc	r27, r27
    336a:	62 17       	cp	r22, r18
    336c:	73 07       	cpc	r23, r19
    336e:	84 07       	cpc	r24, r20
    3370:	ba 07       	cpc	r27, r26
    3372:	20 f0       	brcs	.+8      	; 0x337c <__divsf3_pse+0xaa>
    3374:	62 1b       	sub	r22, r18
    3376:	73 0b       	sbc	r23, r19
    3378:	84 0b       	sbc	r24, r20
    337a:	ba 0b       	sbc	r27, r26
    337c:	ee 1f       	adc	r30, r30
    337e:	88 f7       	brcc	.-30     	; 0x3362 <__divsf3_pse+0x90>
    3380:	e0 95       	com	r30
    3382:	08 95       	ret

00003384 <__fixunssfsi>:
    3384:	5b d0       	rcall	.+182    	; 0x343c <__fp_splitA>
    3386:	88 f0       	brcs	.+34     	; 0x33aa <__fixunssfsi+0x26>
    3388:	9f 57       	subi	r25, 0x7F	; 127
    338a:	90 f0       	brcs	.+36     	; 0x33b0 <__fixunssfsi+0x2c>
    338c:	b9 2f       	mov	r27, r25
    338e:	99 27       	eor	r25, r25
    3390:	b7 51       	subi	r27, 0x17	; 23
    3392:	a0 f0       	brcs	.+40     	; 0x33bc <__fixunssfsi+0x38>
    3394:	d1 f0       	breq	.+52     	; 0x33ca <__fixunssfsi+0x46>
    3396:	66 0f       	add	r22, r22
    3398:	77 1f       	adc	r23, r23
    339a:	88 1f       	adc	r24, r24
    339c:	99 1f       	adc	r25, r25
    339e:	1a f0       	brmi	.+6      	; 0x33a6 <__fixunssfsi+0x22>
    33a0:	ba 95       	dec	r27
    33a2:	c9 f7       	brne	.-14     	; 0x3396 <__fixunssfsi+0x12>
    33a4:	12 c0       	rjmp	.+36     	; 0x33ca <__fixunssfsi+0x46>
    33a6:	b1 30       	cpi	r27, 0x01	; 1
    33a8:	81 f0       	breq	.+32     	; 0x33ca <__fixunssfsi+0x46>
    33aa:	62 d0       	rcall	.+196    	; 0x3470 <__fp_zero>
    33ac:	b1 e0       	ldi	r27, 0x01	; 1
    33ae:	08 95       	ret
    33b0:	5f c0       	rjmp	.+190    	; 0x3470 <__fp_zero>
    33b2:	67 2f       	mov	r22, r23
    33b4:	78 2f       	mov	r23, r24
    33b6:	88 27       	eor	r24, r24
    33b8:	b8 5f       	subi	r27, 0xF8	; 248
    33ba:	39 f0       	breq	.+14     	; 0x33ca <__fixunssfsi+0x46>
    33bc:	b9 3f       	cpi	r27, 0xF9	; 249
    33be:	cc f3       	brlt	.-14     	; 0x33b2 <__fixunssfsi+0x2e>
    33c0:	86 95       	lsr	r24
    33c2:	77 95       	ror	r23
    33c4:	67 95       	ror	r22
    33c6:	b3 95       	inc	r27
    33c8:	d9 f7       	brne	.-10     	; 0x33c0 <__fixunssfsi+0x3c>
    33ca:	3e f4       	brtc	.+14     	; 0x33da <__fixunssfsi+0x56>
    33cc:	90 95       	com	r25
    33ce:	80 95       	com	r24
    33d0:	70 95       	com	r23
    33d2:	61 95       	neg	r22
    33d4:	7f 4f       	sbci	r23, 0xFF	; 255
    33d6:	8f 4f       	sbci	r24, 0xFF	; 255
    33d8:	9f 4f       	sbci	r25, 0xFF	; 255
    33da:	08 95       	ret

000033dc <__fp_inf>:
    33dc:	97 f9       	bld	r25, 7
    33de:	9f 67       	ori	r25, 0x7F	; 127
    33e0:	80 e8       	ldi	r24, 0x80	; 128
    33e2:	70 e0       	ldi	r23, 0x00	; 0
    33e4:	60 e0       	ldi	r22, 0x00	; 0
    33e6:	08 95       	ret

000033e8 <__fp_nan>:
    33e8:	9f ef       	ldi	r25, 0xFF	; 255
    33ea:	80 ec       	ldi	r24, 0xC0	; 192
    33ec:	08 95       	ret

000033ee <__fp_pscA>:
    33ee:	00 24       	eor	r0, r0
    33f0:	0a 94       	dec	r0
    33f2:	16 16       	cp	r1, r22
    33f4:	17 06       	cpc	r1, r23
    33f6:	18 06       	cpc	r1, r24
    33f8:	09 06       	cpc	r0, r25
    33fa:	08 95       	ret

000033fc <__fp_pscB>:
    33fc:	00 24       	eor	r0, r0
    33fe:	0a 94       	dec	r0
    3400:	12 16       	cp	r1, r18
    3402:	13 06       	cpc	r1, r19
    3404:	14 06       	cpc	r1, r20
    3406:	05 06       	cpc	r0, r21
    3408:	08 95       	ret

0000340a <__fp_round>:
    340a:	09 2e       	mov	r0, r25
    340c:	03 94       	inc	r0
    340e:	00 0c       	add	r0, r0
    3410:	11 f4       	brne	.+4      	; 0x3416 <__fp_round+0xc>
    3412:	88 23       	and	r24, r24
    3414:	52 f0       	brmi	.+20     	; 0x342a <__fp_round+0x20>
    3416:	bb 0f       	add	r27, r27
    3418:	40 f4       	brcc	.+16     	; 0x342a <__fp_round+0x20>
    341a:	bf 2b       	or	r27, r31
    341c:	11 f4       	brne	.+4      	; 0x3422 <__fp_round+0x18>
    341e:	60 ff       	sbrs	r22, 0
    3420:	04 c0       	rjmp	.+8      	; 0x342a <__fp_round+0x20>
    3422:	6f 5f       	subi	r22, 0xFF	; 255
    3424:	7f 4f       	sbci	r23, 0xFF	; 255
    3426:	8f 4f       	sbci	r24, 0xFF	; 255
    3428:	9f 4f       	sbci	r25, 0xFF	; 255
    342a:	08 95       	ret

0000342c <__fp_split3>:
    342c:	57 fd       	sbrc	r21, 7
    342e:	90 58       	subi	r25, 0x80	; 128
    3430:	44 0f       	add	r20, r20
    3432:	55 1f       	adc	r21, r21
    3434:	59 f0       	breq	.+22     	; 0x344c <__fp_splitA+0x10>
    3436:	5f 3f       	cpi	r21, 0xFF	; 255
    3438:	71 f0       	breq	.+28     	; 0x3456 <__fp_splitA+0x1a>
    343a:	47 95       	ror	r20

0000343c <__fp_splitA>:
    343c:	88 0f       	add	r24, r24
    343e:	97 fb       	bst	r25, 7
    3440:	99 1f       	adc	r25, r25
    3442:	61 f0       	breq	.+24     	; 0x345c <__fp_splitA+0x20>
    3444:	9f 3f       	cpi	r25, 0xFF	; 255
    3446:	79 f0       	breq	.+30     	; 0x3466 <__fp_splitA+0x2a>
    3448:	87 95       	ror	r24
    344a:	08 95       	ret
    344c:	12 16       	cp	r1, r18
    344e:	13 06       	cpc	r1, r19
    3450:	14 06       	cpc	r1, r20
    3452:	55 1f       	adc	r21, r21
    3454:	f2 cf       	rjmp	.-28     	; 0x343a <__fp_split3+0xe>
    3456:	46 95       	lsr	r20
    3458:	f1 df       	rcall	.-30     	; 0x343c <__fp_splitA>
    345a:	08 c0       	rjmp	.+16     	; 0x346c <__fp_splitA+0x30>
    345c:	16 16       	cp	r1, r22
    345e:	17 06       	cpc	r1, r23
    3460:	18 06       	cpc	r1, r24
    3462:	99 1f       	adc	r25, r25
    3464:	f1 cf       	rjmp	.-30     	; 0x3448 <__fp_splitA+0xc>
    3466:	86 95       	lsr	r24
    3468:	71 05       	cpc	r23, r1
    346a:	61 05       	cpc	r22, r1
    346c:	08 94       	sec
    346e:	08 95       	ret

00003470 <__fp_zero>:
    3470:	e8 94       	clt

00003472 <__fp_szero>:
    3472:	bb 27       	eor	r27, r27
    3474:	66 27       	eor	r22, r22
    3476:	77 27       	eor	r23, r23
    3478:	cb 01       	movw	r24, r22
    347a:	97 f9       	bld	r25, 7
    347c:	08 95       	ret

0000347e <__mulsf3>:
    347e:	0b d0       	rcall	.+22     	; 0x3496 <__mulsf3x>
    3480:	c4 cf       	rjmp	.-120    	; 0x340a <__fp_round>
    3482:	b5 df       	rcall	.-150    	; 0x33ee <__fp_pscA>
    3484:	28 f0       	brcs	.+10     	; 0x3490 <__mulsf3+0x12>
    3486:	ba df       	rcall	.-140    	; 0x33fc <__fp_pscB>
    3488:	18 f0       	brcs	.+6      	; 0x3490 <__mulsf3+0x12>
    348a:	95 23       	and	r25, r21
    348c:	09 f0       	breq	.+2      	; 0x3490 <__mulsf3+0x12>
    348e:	a6 cf       	rjmp	.-180    	; 0x33dc <__fp_inf>
    3490:	ab cf       	rjmp	.-170    	; 0x33e8 <__fp_nan>
    3492:	11 24       	eor	r1, r1
    3494:	ee cf       	rjmp	.-36     	; 0x3472 <__fp_szero>

00003496 <__mulsf3x>:
    3496:	ca df       	rcall	.-108    	; 0x342c <__fp_split3>
    3498:	a0 f3       	brcs	.-24     	; 0x3482 <__mulsf3+0x4>

0000349a <__mulsf3_pse>:
    349a:	95 9f       	mul	r25, r21
    349c:	d1 f3       	breq	.-12     	; 0x3492 <__mulsf3+0x14>
    349e:	95 0f       	add	r25, r21
    34a0:	50 e0       	ldi	r21, 0x00	; 0
    34a2:	55 1f       	adc	r21, r21
    34a4:	62 9f       	mul	r22, r18
    34a6:	f0 01       	movw	r30, r0
    34a8:	72 9f       	mul	r23, r18
    34aa:	bb 27       	eor	r27, r27
    34ac:	f0 0d       	add	r31, r0
    34ae:	b1 1d       	adc	r27, r1
    34b0:	63 9f       	mul	r22, r19
    34b2:	aa 27       	eor	r26, r26
    34b4:	f0 0d       	add	r31, r0
    34b6:	b1 1d       	adc	r27, r1
    34b8:	aa 1f       	adc	r26, r26
    34ba:	64 9f       	mul	r22, r20
    34bc:	66 27       	eor	r22, r22
    34be:	b0 0d       	add	r27, r0
    34c0:	a1 1d       	adc	r26, r1
    34c2:	66 1f       	adc	r22, r22
    34c4:	82 9f       	mul	r24, r18
    34c6:	22 27       	eor	r18, r18
    34c8:	b0 0d       	add	r27, r0
    34ca:	a1 1d       	adc	r26, r1
    34cc:	62 1f       	adc	r22, r18
    34ce:	73 9f       	mul	r23, r19
    34d0:	b0 0d       	add	r27, r0
    34d2:	a1 1d       	adc	r26, r1
    34d4:	62 1f       	adc	r22, r18
    34d6:	83 9f       	mul	r24, r19
    34d8:	a0 0d       	add	r26, r0
    34da:	61 1d       	adc	r22, r1
    34dc:	22 1f       	adc	r18, r18
    34de:	74 9f       	mul	r23, r20
    34e0:	33 27       	eor	r19, r19
    34e2:	a0 0d       	add	r26, r0
    34e4:	61 1d       	adc	r22, r1
    34e6:	23 1f       	adc	r18, r19
    34e8:	84 9f       	mul	r24, r20
    34ea:	60 0d       	add	r22, r0
    34ec:	21 1d       	adc	r18, r1
    34ee:	82 2f       	mov	r24, r18
    34f0:	76 2f       	mov	r23, r22
    34f2:	6a 2f       	mov	r22, r26
    34f4:	11 24       	eor	r1, r1
    34f6:	9f 57       	subi	r25, 0x7F	; 127
    34f8:	50 40       	sbci	r21, 0x00	; 0
    34fa:	8a f0       	brmi	.+34     	; 0x351e <__mulsf3_pse+0x84>
    34fc:	e1 f0       	breq	.+56     	; 0x3536 <__mulsf3_pse+0x9c>
    34fe:	88 23       	and	r24, r24
    3500:	4a f0       	brmi	.+18     	; 0x3514 <__mulsf3_pse+0x7a>
    3502:	ee 0f       	add	r30, r30
    3504:	ff 1f       	adc	r31, r31
    3506:	bb 1f       	adc	r27, r27
    3508:	66 1f       	adc	r22, r22
    350a:	77 1f       	adc	r23, r23
    350c:	88 1f       	adc	r24, r24
    350e:	91 50       	subi	r25, 0x01	; 1
    3510:	50 40       	sbci	r21, 0x00	; 0
    3512:	a9 f7       	brne	.-22     	; 0x34fe <__mulsf3_pse+0x64>
    3514:	9e 3f       	cpi	r25, 0xFE	; 254
    3516:	51 05       	cpc	r21, r1
    3518:	70 f0       	brcs	.+28     	; 0x3536 <__mulsf3_pse+0x9c>
    351a:	60 cf       	rjmp	.-320    	; 0x33dc <__fp_inf>
    351c:	aa cf       	rjmp	.-172    	; 0x3472 <__fp_szero>
    351e:	5f 3f       	cpi	r21, 0xFF	; 255
    3520:	ec f3       	brlt	.-6      	; 0x351c <__mulsf3_pse+0x82>
    3522:	98 3e       	cpi	r25, 0xE8	; 232
    3524:	dc f3       	brlt	.-10     	; 0x351c <__mulsf3_pse+0x82>
    3526:	86 95       	lsr	r24
    3528:	77 95       	ror	r23
    352a:	67 95       	ror	r22
    352c:	b7 95       	ror	r27
    352e:	f7 95       	ror	r31
    3530:	e7 95       	ror	r30
    3532:	9f 5f       	subi	r25, 0xFF	; 255
    3534:	c1 f7       	brne	.-16     	; 0x3526 <__mulsf3_pse+0x8c>
    3536:	fe 2b       	or	r31, r30
    3538:	88 0f       	add	r24, r24
    353a:	91 1d       	adc	r25, r1
    353c:	96 95       	lsr	r25
    353e:	87 95       	ror	r24
    3540:	97 f9       	bld	r25, 7
    3542:	08 95       	ret

00003544 <__udivmodsi4>:
    3544:	a1 e2       	ldi	r26, 0x21	; 33
    3546:	1a 2e       	mov	r1, r26
    3548:	aa 1b       	sub	r26, r26
    354a:	bb 1b       	sub	r27, r27
    354c:	fd 01       	movw	r30, r26
    354e:	0d c0       	rjmp	.+26     	; 0x356a <__udivmodsi4_ep>

00003550 <__udivmodsi4_loop>:
    3550:	aa 1f       	adc	r26, r26
    3552:	bb 1f       	adc	r27, r27
    3554:	ee 1f       	adc	r30, r30
    3556:	ff 1f       	adc	r31, r31
    3558:	a2 17       	cp	r26, r18
    355a:	b3 07       	cpc	r27, r19
    355c:	e4 07       	cpc	r30, r20
    355e:	f5 07       	cpc	r31, r21
    3560:	20 f0       	brcs	.+8      	; 0x356a <__udivmodsi4_ep>
    3562:	a2 1b       	sub	r26, r18
    3564:	b3 0b       	sbc	r27, r19
    3566:	e4 0b       	sbc	r30, r20
    3568:	f5 0b       	sbc	r31, r21

0000356a <__udivmodsi4_ep>:
    356a:	66 1f       	adc	r22, r22
    356c:	77 1f       	adc	r23, r23
    356e:	88 1f       	adc	r24, r24
    3570:	99 1f       	adc	r25, r25
    3572:	1a 94       	dec	r1
    3574:	69 f7       	brne	.-38     	; 0x3550 <__udivmodsi4_loop>
    3576:	60 95       	com	r22
    3578:	70 95       	com	r23
    357a:	80 95       	com	r24
    357c:	90 95       	com	r25
    357e:	9b 01       	movw	r18, r22
    3580:	ac 01       	movw	r20, r24
    3582:	bd 01       	movw	r22, r26
    3584:	cf 01       	movw	r24, r30
    3586:	08 95       	ret

00003588 <__tablejump2__>:
    3588:	ee 0f       	add	r30, r30
    358a:	ff 1f       	adc	r31, r31
    358c:	88 1f       	adc	r24, r24
    358e:	8b bf       	out	0x3b, r24	; 59
    3590:	07 90       	elpm	r0, Z+
    3592:	f6 91       	elpm	r31, Z
    3594:	e0 2d       	mov	r30, r0
    3596:	19 94       	eijmp

00003598 <__umulhisi3>:
    3598:	a2 9f       	mul	r26, r18
    359a:	b0 01       	movw	r22, r0
    359c:	b3 9f       	mul	r27, r19
    359e:	c0 01       	movw	r24, r0
    35a0:	a3 9f       	mul	r26, r19
    35a2:	70 0d       	add	r23, r0
    35a4:	81 1d       	adc	r24, r1
    35a6:	11 24       	eor	r1, r1
    35a8:	91 1d       	adc	r25, r1
    35aa:	b2 9f       	mul	r27, r18
    35ac:	70 0d       	add	r23, r0
    35ae:	81 1d       	adc	r24, r1
    35b0:	11 24       	eor	r1, r1
    35b2:	91 1d       	adc	r25, r1
    35b4:	08 95       	ret

000035b6 <malloc>:
    35b6:	0f 93       	push	r16
    35b8:	1f 93       	push	r17
    35ba:	cf 93       	push	r28
    35bc:	df 93       	push	r29
    35be:	82 30       	cpi	r24, 0x02	; 2
    35c0:	91 05       	cpc	r25, r1
    35c2:	10 f4       	brcc	.+4      	; 0x35c8 <malloc+0x12>
    35c4:	82 e0       	ldi	r24, 0x02	; 2
    35c6:	90 e0       	ldi	r25, 0x00	; 0
    35c8:	e0 91 a7 11 	lds	r30, 0x11A7	; 0x8011a7 <__flp>
    35cc:	f0 91 a8 11 	lds	r31, 0x11A8	; 0x8011a8 <__flp+0x1>
    35d0:	20 e0       	ldi	r18, 0x00	; 0
    35d2:	30 e0       	ldi	r19, 0x00	; 0
    35d4:	a0 e0       	ldi	r26, 0x00	; 0
    35d6:	b0 e0       	ldi	r27, 0x00	; 0
    35d8:	30 97       	sbiw	r30, 0x00	; 0
    35da:	19 f1       	breq	.+70     	; 0x3622 <malloc+0x6c>
    35dc:	40 81       	ld	r20, Z
    35de:	51 81       	ldd	r21, Z+1	; 0x01
    35e0:	02 81       	ldd	r16, Z+2	; 0x02
    35e2:	13 81       	ldd	r17, Z+3	; 0x03
    35e4:	48 17       	cp	r20, r24
    35e6:	59 07       	cpc	r21, r25
    35e8:	c8 f0       	brcs	.+50     	; 0x361c <malloc+0x66>
    35ea:	84 17       	cp	r24, r20
    35ec:	95 07       	cpc	r25, r21
    35ee:	69 f4       	brne	.+26     	; 0x360a <malloc+0x54>
    35f0:	10 97       	sbiw	r26, 0x00	; 0
    35f2:	31 f0       	breq	.+12     	; 0x3600 <malloc+0x4a>
    35f4:	12 96       	adiw	r26, 0x02	; 2
    35f6:	0c 93       	st	X, r16
    35f8:	12 97       	sbiw	r26, 0x02	; 2
    35fa:	13 96       	adiw	r26, 0x03	; 3
    35fc:	1c 93       	st	X, r17
    35fe:	27 c0       	rjmp	.+78     	; 0x364e <malloc+0x98>
    3600:	00 93 a7 11 	sts	0x11A7, r16	; 0x8011a7 <__flp>
    3604:	10 93 a8 11 	sts	0x11A8, r17	; 0x8011a8 <__flp+0x1>
    3608:	22 c0       	rjmp	.+68     	; 0x364e <malloc+0x98>
    360a:	21 15       	cp	r18, r1
    360c:	31 05       	cpc	r19, r1
    360e:	19 f0       	breq	.+6      	; 0x3616 <malloc+0x60>
    3610:	42 17       	cp	r20, r18
    3612:	53 07       	cpc	r21, r19
    3614:	18 f4       	brcc	.+6      	; 0x361c <malloc+0x66>
    3616:	9a 01       	movw	r18, r20
    3618:	bd 01       	movw	r22, r26
    361a:	ef 01       	movw	r28, r30
    361c:	df 01       	movw	r26, r30
    361e:	f8 01       	movw	r30, r16
    3620:	db cf       	rjmp	.-74     	; 0x35d8 <malloc+0x22>
    3622:	21 15       	cp	r18, r1
    3624:	31 05       	cpc	r19, r1
    3626:	f9 f0       	breq	.+62     	; 0x3666 <malloc+0xb0>
    3628:	28 1b       	sub	r18, r24
    362a:	39 0b       	sbc	r19, r25
    362c:	24 30       	cpi	r18, 0x04	; 4
    362e:	31 05       	cpc	r19, r1
    3630:	80 f4       	brcc	.+32     	; 0x3652 <malloc+0x9c>
    3632:	8a 81       	ldd	r24, Y+2	; 0x02
    3634:	9b 81       	ldd	r25, Y+3	; 0x03
    3636:	61 15       	cp	r22, r1
    3638:	71 05       	cpc	r23, r1
    363a:	21 f0       	breq	.+8      	; 0x3644 <malloc+0x8e>
    363c:	fb 01       	movw	r30, r22
    363e:	93 83       	std	Z+3, r25	; 0x03
    3640:	82 83       	std	Z+2, r24	; 0x02
    3642:	04 c0       	rjmp	.+8      	; 0x364c <malloc+0x96>
    3644:	90 93 a8 11 	sts	0x11A8, r25	; 0x8011a8 <__flp+0x1>
    3648:	80 93 a7 11 	sts	0x11A7, r24	; 0x8011a7 <__flp>
    364c:	fe 01       	movw	r30, r28
    364e:	32 96       	adiw	r30, 0x02	; 2
    3650:	44 c0       	rjmp	.+136    	; 0x36da <malloc+0x124>
    3652:	fe 01       	movw	r30, r28
    3654:	e2 0f       	add	r30, r18
    3656:	f3 1f       	adc	r31, r19
    3658:	81 93       	st	Z+, r24
    365a:	91 93       	st	Z+, r25
    365c:	22 50       	subi	r18, 0x02	; 2
    365e:	31 09       	sbc	r19, r1
    3660:	39 83       	std	Y+1, r19	; 0x01
    3662:	28 83       	st	Y, r18
    3664:	3a c0       	rjmp	.+116    	; 0x36da <malloc+0x124>
    3666:	20 91 a5 11 	lds	r18, 0x11A5	; 0x8011a5 <__brkval>
    366a:	30 91 a6 11 	lds	r19, 0x11A6	; 0x8011a6 <__brkval+0x1>
    366e:	23 2b       	or	r18, r19
    3670:	41 f4       	brne	.+16     	; 0x3682 <malloc+0xcc>
    3672:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    3676:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    367a:	30 93 a6 11 	sts	0x11A6, r19	; 0x8011a6 <__brkval+0x1>
    367e:	20 93 a5 11 	sts	0x11A5, r18	; 0x8011a5 <__brkval>
    3682:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    3686:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    368a:	21 15       	cp	r18, r1
    368c:	31 05       	cpc	r19, r1
    368e:	41 f4       	brne	.+16     	; 0x36a0 <malloc+0xea>
    3690:	2d b7       	in	r18, 0x3d	; 61
    3692:	3e b7       	in	r19, 0x3e	; 62
    3694:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    3698:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    369c:	24 1b       	sub	r18, r20
    369e:	35 0b       	sbc	r19, r21
    36a0:	e0 91 a5 11 	lds	r30, 0x11A5	; 0x8011a5 <__brkval>
    36a4:	f0 91 a6 11 	lds	r31, 0x11A6	; 0x8011a6 <__brkval+0x1>
    36a8:	e2 17       	cp	r30, r18
    36aa:	f3 07       	cpc	r31, r19
    36ac:	a0 f4       	brcc	.+40     	; 0x36d6 <malloc+0x120>
    36ae:	2e 1b       	sub	r18, r30
    36b0:	3f 0b       	sbc	r19, r31
    36b2:	28 17       	cp	r18, r24
    36b4:	39 07       	cpc	r19, r25
    36b6:	78 f0       	brcs	.+30     	; 0x36d6 <malloc+0x120>
    36b8:	ac 01       	movw	r20, r24
    36ba:	4e 5f       	subi	r20, 0xFE	; 254
    36bc:	5f 4f       	sbci	r21, 0xFF	; 255
    36be:	24 17       	cp	r18, r20
    36c0:	35 07       	cpc	r19, r21
    36c2:	48 f0       	brcs	.+18     	; 0x36d6 <malloc+0x120>
    36c4:	4e 0f       	add	r20, r30
    36c6:	5f 1f       	adc	r21, r31
    36c8:	50 93 a6 11 	sts	0x11A6, r21	; 0x8011a6 <__brkval+0x1>
    36cc:	40 93 a5 11 	sts	0x11A5, r20	; 0x8011a5 <__brkval>
    36d0:	81 93       	st	Z+, r24
    36d2:	91 93       	st	Z+, r25
    36d4:	02 c0       	rjmp	.+4      	; 0x36da <malloc+0x124>
    36d6:	e0 e0       	ldi	r30, 0x00	; 0
    36d8:	f0 e0       	ldi	r31, 0x00	; 0
    36da:	cf 01       	movw	r24, r30
    36dc:	df 91       	pop	r29
    36de:	cf 91       	pop	r28
    36e0:	1f 91       	pop	r17
    36e2:	0f 91       	pop	r16
    36e4:	08 95       	ret

000036e6 <free>:
    36e6:	cf 93       	push	r28
    36e8:	df 93       	push	r29
    36ea:	00 97       	sbiw	r24, 0x00	; 0
    36ec:	09 f4       	brne	.+2      	; 0x36f0 <free+0xa>
    36ee:	81 c0       	rjmp	.+258    	; 0x37f2 <free+0x10c>
    36f0:	fc 01       	movw	r30, r24
    36f2:	32 97       	sbiw	r30, 0x02	; 2
    36f4:	13 82       	std	Z+3, r1	; 0x03
    36f6:	12 82       	std	Z+2, r1	; 0x02
    36f8:	a0 91 a7 11 	lds	r26, 0x11A7	; 0x8011a7 <__flp>
    36fc:	b0 91 a8 11 	lds	r27, 0x11A8	; 0x8011a8 <__flp+0x1>
    3700:	10 97       	sbiw	r26, 0x00	; 0
    3702:	81 f4       	brne	.+32     	; 0x3724 <free+0x3e>
    3704:	20 81       	ld	r18, Z
    3706:	31 81       	ldd	r19, Z+1	; 0x01
    3708:	82 0f       	add	r24, r18
    370a:	93 1f       	adc	r25, r19
    370c:	20 91 a5 11 	lds	r18, 0x11A5	; 0x8011a5 <__brkval>
    3710:	30 91 a6 11 	lds	r19, 0x11A6	; 0x8011a6 <__brkval+0x1>
    3714:	28 17       	cp	r18, r24
    3716:	39 07       	cpc	r19, r25
    3718:	51 f5       	brne	.+84     	; 0x376e <free+0x88>
    371a:	f0 93 a6 11 	sts	0x11A6, r31	; 0x8011a6 <__brkval+0x1>
    371e:	e0 93 a5 11 	sts	0x11A5, r30	; 0x8011a5 <__brkval>
    3722:	67 c0       	rjmp	.+206    	; 0x37f2 <free+0x10c>
    3724:	ed 01       	movw	r28, r26
    3726:	20 e0       	ldi	r18, 0x00	; 0
    3728:	30 e0       	ldi	r19, 0x00	; 0
    372a:	ce 17       	cp	r28, r30
    372c:	df 07       	cpc	r29, r31
    372e:	40 f4       	brcc	.+16     	; 0x3740 <free+0x5a>
    3730:	4a 81       	ldd	r20, Y+2	; 0x02
    3732:	5b 81       	ldd	r21, Y+3	; 0x03
    3734:	9e 01       	movw	r18, r28
    3736:	41 15       	cp	r20, r1
    3738:	51 05       	cpc	r21, r1
    373a:	f1 f0       	breq	.+60     	; 0x3778 <free+0x92>
    373c:	ea 01       	movw	r28, r20
    373e:	f5 cf       	rjmp	.-22     	; 0x372a <free+0x44>
    3740:	d3 83       	std	Z+3, r29	; 0x03
    3742:	c2 83       	std	Z+2, r28	; 0x02
    3744:	40 81       	ld	r20, Z
    3746:	51 81       	ldd	r21, Z+1	; 0x01
    3748:	84 0f       	add	r24, r20
    374a:	95 1f       	adc	r25, r21
    374c:	c8 17       	cp	r28, r24
    374e:	d9 07       	cpc	r29, r25
    3750:	59 f4       	brne	.+22     	; 0x3768 <free+0x82>
    3752:	88 81       	ld	r24, Y
    3754:	99 81       	ldd	r25, Y+1	; 0x01
    3756:	84 0f       	add	r24, r20
    3758:	95 1f       	adc	r25, r21
    375a:	02 96       	adiw	r24, 0x02	; 2
    375c:	91 83       	std	Z+1, r25	; 0x01
    375e:	80 83       	st	Z, r24
    3760:	8a 81       	ldd	r24, Y+2	; 0x02
    3762:	9b 81       	ldd	r25, Y+3	; 0x03
    3764:	93 83       	std	Z+3, r25	; 0x03
    3766:	82 83       	std	Z+2, r24	; 0x02
    3768:	21 15       	cp	r18, r1
    376a:	31 05       	cpc	r19, r1
    376c:	29 f4       	brne	.+10     	; 0x3778 <free+0x92>
    376e:	f0 93 a8 11 	sts	0x11A8, r31	; 0x8011a8 <__flp+0x1>
    3772:	e0 93 a7 11 	sts	0x11A7, r30	; 0x8011a7 <__flp>
    3776:	3d c0       	rjmp	.+122    	; 0x37f2 <free+0x10c>
    3778:	e9 01       	movw	r28, r18
    377a:	fb 83       	std	Y+3, r31	; 0x03
    377c:	ea 83       	std	Y+2, r30	; 0x02
    377e:	49 91       	ld	r20, Y+
    3780:	59 91       	ld	r21, Y+
    3782:	c4 0f       	add	r28, r20
    3784:	d5 1f       	adc	r29, r21
    3786:	ec 17       	cp	r30, r28
    3788:	fd 07       	cpc	r31, r29
    378a:	61 f4       	brne	.+24     	; 0x37a4 <free+0xbe>
    378c:	80 81       	ld	r24, Z
    378e:	91 81       	ldd	r25, Z+1	; 0x01
    3790:	84 0f       	add	r24, r20
    3792:	95 1f       	adc	r25, r21
    3794:	02 96       	adiw	r24, 0x02	; 2
    3796:	e9 01       	movw	r28, r18
    3798:	99 83       	std	Y+1, r25	; 0x01
    379a:	88 83       	st	Y, r24
    379c:	82 81       	ldd	r24, Z+2	; 0x02
    379e:	93 81       	ldd	r25, Z+3	; 0x03
    37a0:	9b 83       	std	Y+3, r25	; 0x03
    37a2:	8a 83       	std	Y+2, r24	; 0x02
    37a4:	e0 e0       	ldi	r30, 0x00	; 0
    37a6:	f0 e0       	ldi	r31, 0x00	; 0
    37a8:	12 96       	adiw	r26, 0x02	; 2
    37aa:	8d 91       	ld	r24, X+
    37ac:	9c 91       	ld	r25, X
    37ae:	13 97       	sbiw	r26, 0x03	; 3
    37b0:	00 97       	sbiw	r24, 0x00	; 0
    37b2:	19 f0       	breq	.+6      	; 0x37ba <free+0xd4>
    37b4:	fd 01       	movw	r30, r26
    37b6:	dc 01       	movw	r26, r24
    37b8:	f7 cf       	rjmp	.-18     	; 0x37a8 <free+0xc2>
    37ba:	8d 91       	ld	r24, X+
    37bc:	9c 91       	ld	r25, X
    37be:	11 97       	sbiw	r26, 0x01	; 1
    37c0:	9d 01       	movw	r18, r26
    37c2:	2e 5f       	subi	r18, 0xFE	; 254
    37c4:	3f 4f       	sbci	r19, 0xFF	; 255
    37c6:	82 0f       	add	r24, r18
    37c8:	93 1f       	adc	r25, r19
    37ca:	20 91 a5 11 	lds	r18, 0x11A5	; 0x8011a5 <__brkval>
    37ce:	30 91 a6 11 	lds	r19, 0x11A6	; 0x8011a6 <__brkval+0x1>
    37d2:	28 17       	cp	r18, r24
    37d4:	39 07       	cpc	r19, r25
    37d6:	69 f4       	brne	.+26     	; 0x37f2 <free+0x10c>
    37d8:	30 97       	sbiw	r30, 0x00	; 0
    37da:	29 f4       	brne	.+10     	; 0x37e6 <free+0x100>
    37dc:	10 92 a8 11 	sts	0x11A8, r1	; 0x8011a8 <__flp+0x1>
    37e0:	10 92 a7 11 	sts	0x11A7, r1	; 0x8011a7 <__flp>
    37e4:	02 c0       	rjmp	.+4      	; 0x37ea <free+0x104>
    37e6:	13 82       	std	Z+3, r1	; 0x03
    37e8:	12 82       	std	Z+2, r1	; 0x02
    37ea:	b0 93 a6 11 	sts	0x11A6, r27	; 0x8011a6 <__brkval+0x1>
    37ee:	a0 93 a5 11 	sts	0x11A5, r26	; 0x8011a5 <__brkval>
    37f2:	df 91       	pop	r29
    37f4:	cf 91       	pop	r28
    37f6:	08 95       	ret

000037f8 <abort>:
    37f8:	81 e0       	ldi	r24, 0x01	; 1
    37fa:	90 e0       	ldi	r25, 0x00	; 0
    37fc:	f8 94       	cli
    37fe:	00 c3       	rjmp	.+1536   	; 0x3e00 <_exit>

00003800 <memcpy>:
    3800:	fb 01       	movw	r30, r22
    3802:	dc 01       	movw	r26, r24
    3804:	02 c0       	rjmp	.+4      	; 0x380a <memcpy+0xa>
    3806:	01 90       	ld	r0, Z+
    3808:	0d 92       	st	X+, r0
    380a:	41 50       	subi	r20, 0x01	; 1
    380c:	50 40       	sbci	r21, 0x00	; 0
    380e:	d8 f7       	brcc	.-10     	; 0x3806 <memcpy+0x6>
    3810:	08 95       	ret

00003812 <memset>:
    3812:	dc 01       	movw	r26, r24
    3814:	01 c0       	rjmp	.+2      	; 0x3818 <memset+0x6>
    3816:	6d 93       	st	X+, r22
    3818:	41 50       	subi	r20, 0x01	; 1
    381a:	50 40       	sbci	r21, 0x00	; 0
    381c:	e0 f7       	brcc	.-8      	; 0x3816 <memset+0x4>
    381e:	08 95       	ret

00003820 <printf>:
    3820:	cf 93       	push	r28
    3822:	df 93       	push	r29
    3824:	cd b7       	in	r28, 0x3d	; 61
    3826:	de b7       	in	r29, 0x3e	; 62
    3828:	ae 01       	movw	r20, r28
    382a:	4a 5f       	subi	r20, 0xFA	; 250
    382c:	5f 4f       	sbci	r21, 0xFF	; 255
    382e:	fa 01       	movw	r30, r20
    3830:	61 91       	ld	r22, Z+
    3832:	71 91       	ld	r23, Z+
    3834:	af 01       	movw	r20, r30
    3836:	80 91 ab 11 	lds	r24, 0x11AB	; 0x8011ab <__iob+0x2>
    383a:	90 91 ac 11 	lds	r25, 0x11AC	; 0x8011ac <__iob+0x3>
    383e:	33 d0       	rcall	.+102    	; 0x38a6 <vfprintf>
    3840:	df 91       	pop	r29
    3842:	cf 91       	pop	r28
    3844:	08 95       	ret

00003846 <puts>:
    3846:	0f 93       	push	r16
    3848:	1f 93       	push	r17
    384a:	cf 93       	push	r28
    384c:	df 93       	push	r29
    384e:	e0 91 ab 11 	lds	r30, 0x11AB	; 0x8011ab <__iob+0x2>
    3852:	f0 91 ac 11 	lds	r31, 0x11AC	; 0x8011ac <__iob+0x3>
    3856:	23 81       	ldd	r18, Z+3	; 0x03
    3858:	21 ff       	sbrs	r18, 1
    385a:	1b c0       	rjmp	.+54     	; 0x3892 <puts+0x4c>
    385c:	8c 01       	movw	r16, r24
    385e:	d0 e0       	ldi	r29, 0x00	; 0
    3860:	c0 e0       	ldi	r28, 0x00	; 0
    3862:	f8 01       	movw	r30, r16
    3864:	81 91       	ld	r24, Z+
    3866:	8f 01       	movw	r16, r30
    3868:	60 91 ab 11 	lds	r22, 0x11AB	; 0x8011ab <__iob+0x2>
    386c:	70 91 ac 11 	lds	r23, 0x11AC	; 0x8011ac <__iob+0x3>
    3870:	db 01       	movw	r26, r22
    3872:	18 96       	adiw	r26, 0x08	; 8
    3874:	ed 91       	ld	r30, X+
    3876:	fc 91       	ld	r31, X
    3878:	19 97       	sbiw	r26, 0x09	; 9
    387a:	88 23       	and	r24, r24
    387c:	31 f0       	breq	.+12     	; 0x388a <puts+0x44>
    387e:	19 95       	eicall
    3880:	89 2b       	or	r24, r25
    3882:	79 f3       	breq	.-34     	; 0x3862 <puts+0x1c>
    3884:	df ef       	ldi	r29, 0xFF	; 255
    3886:	cf ef       	ldi	r28, 0xFF	; 255
    3888:	ec cf       	rjmp	.-40     	; 0x3862 <puts+0x1c>
    388a:	8a e0       	ldi	r24, 0x0A	; 10
    388c:	19 95       	eicall
    388e:	89 2b       	or	r24, r25
    3890:	19 f0       	breq	.+6      	; 0x3898 <puts+0x52>
    3892:	8f ef       	ldi	r24, 0xFF	; 255
    3894:	9f ef       	ldi	r25, 0xFF	; 255
    3896:	02 c0       	rjmp	.+4      	; 0x389c <puts+0x56>
    3898:	8d 2f       	mov	r24, r29
    389a:	9c 2f       	mov	r25, r28
    389c:	df 91       	pop	r29
    389e:	cf 91       	pop	r28
    38a0:	1f 91       	pop	r17
    38a2:	0f 91       	pop	r16
    38a4:	08 95       	ret

000038a6 <vfprintf>:
    38a6:	2f 92       	push	r2
    38a8:	3f 92       	push	r3
    38aa:	4f 92       	push	r4
    38ac:	5f 92       	push	r5
    38ae:	6f 92       	push	r6
    38b0:	7f 92       	push	r7
    38b2:	8f 92       	push	r8
    38b4:	9f 92       	push	r9
    38b6:	af 92       	push	r10
    38b8:	bf 92       	push	r11
    38ba:	cf 92       	push	r12
    38bc:	df 92       	push	r13
    38be:	ef 92       	push	r14
    38c0:	ff 92       	push	r15
    38c2:	0f 93       	push	r16
    38c4:	1f 93       	push	r17
    38c6:	cf 93       	push	r28
    38c8:	df 93       	push	r29
    38ca:	cd b7       	in	r28, 0x3d	; 61
    38cc:	de b7       	in	r29, 0x3e	; 62
    38ce:	2b 97       	sbiw	r28, 0x0b	; 11
    38d0:	0f b6       	in	r0, 0x3f	; 63
    38d2:	f8 94       	cli
    38d4:	de bf       	out	0x3e, r29	; 62
    38d6:	0f be       	out	0x3f, r0	; 63
    38d8:	cd bf       	out	0x3d, r28	; 61
    38da:	6c 01       	movw	r12, r24
    38dc:	7b 01       	movw	r14, r22
    38de:	8a 01       	movw	r16, r20
    38e0:	fc 01       	movw	r30, r24
    38e2:	17 82       	std	Z+7, r1	; 0x07
    38e4:	16 82       	std	Z+6, r1	; 0x06
    38e6:	83 81       	ldd	r24, Z+3	; 0x03
    38e8:	81 ff       	sbrs	r24, 1
    38ea:	bf c1       	rjmp	.+894    	; 0x3c6a <vfprintf+0x3c4>
    38ec:	ce 01       	movw	r24, r28
    38ee:	01 96       	adiw	r24, 0x01	; 1
    38f0:	3c 01       	movw	r6, r24
    38f2:	f6 01       	movw	r30, r12
    38f4:	93 81       	ldd	r25, Z+3	; 0x03
    38f6:	f7 01       	movw	r30, r14
    38f8:	93 fd       	sbrc	r25, 3
    38fa:	85 91       	lpm	r24, Z+
    38fc:	93 ff       	sbrs	r25, 3
    38fe:	81 91       	ld	r24, Z+
    3900:	7f 01       	movw	r14, r30
    3902:	88 23       	and	r24, r24
    3904:	09 f4       	brne	.+2      	; 0x3908 <vfprintf+0x62>
    3906:	ad c1       	rjmp	.+858    	; 0x3c62 <vfprintf+0x3bc>
    3908:	85 32       	cpi	r24, 0x25	; 37
    390a:	39 f4       	brne	.+14     	; 0x391a <vfprintf+0x74>
    390c:	93 fd       	sbrc	r25, 3
    390e:	85 91       	lpm	r24, Z+
    3910:	93 ff       	sbrs	r25, 3
    3912:	81 91       	ld	r24, Z+
    3914:	7f 01       	movw	r14, r30
    3916:	85 32       	cpi	r24, 0x25	; 37
    3918:	21 f4       	brne	.+8      	; 0x3922 <vfprintf+0x7c>
    391a:	b6 01       	movw	r22, r12
    391c:	90 e0       	ldi	r25, 0x00	; 0
    391e:	d6 d1       	rcall	.+940    	; 0x3ccc <fputc>
    3920:	e8 cf       	rjmp	.-48     	; 0x38f2 <vfprintf+0x4c>
    3922:	91 2c       	mov	r9, r1
    3924:	21 2c       	mov	r2, r1
    3926:	31 2c       	mov	r3, r1
    3928:	ff e1       	ldi	r31, 0x1F	; 31
    392a:	f3 15       	cp	r31, r3
    392c:	d8 f0       	brcs	.+54     	; 0x3964 <vfprintf+0xbe>
    392e:	8b 32       	cpi	r24, 0x2B	; 43
    3930:	79 f0       	breq	.+30     	; 0x3950 <vfprintf+0xaa>
    3932:	38 f4       	brcc	.+14     	; 0x3942 <vfprintf+0x9c>
    3934:	80 32       	cpi	r24, 0x20	; 32
    3936:	79 f0       	breq	.+30     	; 0x3956 <vfprintf+0xb0>
    3938:	83 32       	cpi	r24, 0x23	; 35
    393a:	a1 f4       	brne	.+40     	; 0x3964 <vfprintf+0xbe>
    393c:	23 2d       	mov	r18, r3
    393e:	20 61       	ori	r18, 0x10	; 16
    3940:	1d c0       	rjmp	.+58     	; 0x397c <vfprintf+0xd6>
    3942:	8d 32       	cpi	r24, 0x2D	; 45
    3944:	61 f0       	breq	.+24     	; 0x395e <vfprintf+0xb8>
    3946:	80 33       	cpi	r24, 0x30	; 48
    3948:	69 f4       	brne	.+26     	; 0x3964 <vfprintf+0xbe>
    394a:	23 2d       	mov	r18, r3
    394c:	21 60       	ori	r18, 0x01	; 1
    394e:	16 c0       	rjmp	.+44     	; 0x397c <vfprintf+0xd6>
    3950:	83 2d       	mov	r24, r3
    3952:	82 60       	ori	r24, 0x02	; 2
    3954:	38 2e       	mov	r3, r24
    3956:	e3 2d       	mov	r30, r3
    3958:	e4 60       	ori	r30, 0x04	; 4
    395a:	3e 2e       	mov	r3, r30
    395c:	2a c0       	rjmp	.+84     	; 0x39b2 <vfprintf+0x10c>
    395e:	f3 2d       	mov	r31, r3
    3960:	f8 60       	ori	r31, 0x08	; 8
    3962:	1d c0       	rjmp	.+58     	; 0x399e <vfprintf+0xf8>
    3964:	37 fc       	sbrc	r3, 7
    3966:	2d c0       	rjmp	.+90     	; 0x39c2 <vfprintf+0x11c>
    3968:	20 ed       	ldi	r18, 0xD0	; 208
    396a:	28 0f       	add	r18, r24
    396c:	2a 30       	cpi	r18, 0x0A	; 10
    396e:	40 f0       	brcs	.+16     	; 0x3980 <vfprintf+0xda>
    3970:	8e 32       	cpi	r24, 0x2E	; 46
    3972:	b9 f4       	brne	.+46     	; 0x39a2 <vfprintf+0xfc>
    3974:	36 fc       	sbrc	r3, 6
    3976:	75 c1       	rjmp	.+746    	; 0x3c62 <vfprintf+0x3bc>
    3978:	23 2d       	mov	r18, r3
    397a:	20 64       	ori	r18, 0x40	; 64
    397c:	32 2e       	mov	r3, r18
    397e:	19 c0       	rjmp	.+50     	; 0x39b2 <vfprintf+0x10c>
    3980:	36 fe       	sbrs	r3, 6
    3982:	06 c0       	rjmp	.+12     	; 0x3990 <vfprintf+0xea>
    3984:	8a e0       	ldi	r24, 0x0A	; 10
    3986:	98 9e       	mul	r9, r24
    3988:	20 0d       	add	r18, r0
    398a:	11 24       	eor	r1, r1
    398c:	92 2e       	mov	r9, r18
    398e:	11 c0       	rjmp	.+34     	; 0x39b2 <vfprintf+0x10c>
    3990:	ea e0       	ldi	r30, 0x0A	; 10
    3992:	2e 9e       	mul	r2, r30
    3994:	20 0d       	add	r18, r0
    3996:	11 24       	eor	r1, r1
    3998:	22 2e       	mov	r2, r18
    399a:	f3 2d       	mov	r31, r3
    399c:	f0 62       	ori	r31, 0x20	; 32
    399e:	3f 2e       	mov	r3, r31
    39a0:	08 c0       	rjmp	.+16     	; 0x39b2 <vfprintf+0x10c>
    39a2:	8c 36       	cpi	r24, 0x6C	; 108
    39a4:	21 f4       	brne	.+8      	; 0x39ae <vfprintf+0x108>
    39a6:	83 2d       	mov	r24, r3
    39a8:	80 68       	ori	r24, 0x80	; 128
    39aa:	38 2e       	mov	r3, r24
    39ac:	02 c0       	rjmp	.+4      	; 0x39b2 <vfprintf+0x10c>
    39ae:	88 36       	cpi	r24, 0x68	; 104
    39b0:	41 f4       	brne	.+16     	; 0x39c2 <vfprintf+0x11c>
    39b2:	f7 01       	movw	r30, r14
    39b4:	93 fd       	sbrc	r25, 3
    39b6:	85 91       	lpm	r24, Z+
    39b8:	93 ff       	sbrs	r25, 3
    39ba:	81 91       	ld	r24, Z+
    39bc:	7f 01       	movw	r14, r30
    39be:	81 11       	cpse	r24, r1
    39c0:	b3 cf       	rjmp	.-154    	; 0x3928 <vfprintf+0x82>
    39c2:	98 2f       	mov	r25, r24
    39c4:	9f 7d       	andi	r25, 0xDF	; 223
    39c6:	95 54       	subi	r25, 0x45	; 69
    39c8:	93 30       	cpi	r25, 0x03	; 3
    39ca:	28 f4       	brcc	.+10     	; 0x39d6 <vfprintf+0x130>
    39cc:	0c 5f       	subi	r16, 0xFC	; 252
    39ce:	1f 4f       	sbci	r17, 0xFF	; 255
    39d0:	9f e3       	ldi	r25, 0x3F	; 63
    39d2:	99 83       	std	Y+1, r25	; 0x01
    39d4:	0d c0       	rjmp	.+26     	; 0x39f0 <vfprintf+0x14a>
    39d6:	83 36       	cpi	r24, 0x63	; 99
    39d8:	31 f0       	breq	.+12     	; 0x39e6 <vfprintf+0x140>
    39da:	83 37       	cpi	r24, 0x73	; 115
    39dc:	71 f0       	breq	.+28     	; 0x39fa <vfprintf+0x154>
    39de:	83 35       	cpi	r24, 0x53	; 83
    39e0:	09 f0       	breq	.+2      	; 0x39e4 <vfprintf+0x13e>
    39e2:	55 c0       	rjmp	.+170    	; 0x3a8e <vfprintf+0x1e8>
    39e4:	20 c0       	rjmp	.+64     	; 0x3a26 <vfprintf+0x180>
    39e6:	f8 01       	movw	r30, r16
    39e8:	80 81       	ld	r24, Z
    39ea:	89 83       	std	Y+1, r24	; 0x01
    39ec:	0e 5f       	subi	r16, 0xFE	; 254
    39ee:	1f 4f       	sbci	r17, 0xFF	; 255
    39f0:	88 24       	eor	r8, r8
    39f2:	83 94       	inc	r8
    39f4:	91 2c       	mov	r9, r1
    39f6:	53 01       	movw	r10, r6
    39f8:	12 c0       	rjmp	.+36     	; 0x3a1e <vfprintf+0x178>
    39fa:	28 01       	movw	r4, r16
    39fc:	f2 e0       	ldi	r31, 0x02	; 2
    39fe:	4f 0e       	add	r4, r31
    3a00:	51 1c       	adc	r5, r1
    3a02:	f8 01       	movw	r30, r16
    3a04:	a0 80       	ld	r10, Z
    3a06:	b1 80       	ldd	r11, Z+1	; 0x01
    3a08:	36 fe       	sbrs	r3, 6
    3a0a:	03 c0       	rjmp	.+6      	; 0x3a12 <vfprintf+0x16c>
    3a0c:	69 2d       	mov	r22, r9
    3a0e:	70 e0       	ldi	r23, 0x00	; 0
    3a10:	02 c0       	rjmp	.+4      	; 0x3a16 <vfprintf+0x170>
    3a12:	6f ef       	ldi	r22, 0xFF	; 255
    3a14:	7f ef       	ldi	r23, 0xFF	; 255
    3a16:	c5 01       	movw	r24, r10
    3a18:	4e d1       	rcall	.+668    	; 0x3cb6 <strnlen>
    3a1a:	4c 01       	movw	r8, r24
    3a1c:	82 01       	movw	r16, r4
    3a1e:	f3 2d       	mov	r31, r3
    3a20:	ff 77       	andi	r31, 0x7F	; 127
    3a22:	3f 2e       	mov	r3, r31
    3a24:	15 c0       	rjmp	.+42     	; 0x3a50 <vfprintf+0x1aa>
    3a26:	28 01       	movw	r4, r16
    3a28:	22 e0       	ldi	r18, 0x02	; 2
    3a2a:	42 0e       	add	r4, r18
    3a2c:	51 1c       	adc	r5, r1
    3a2e:	f8 01       	movw	r30, r16
    3a30:	a0 80       	ld	r10, Z
    3a32:	b1 80       	ldd	r11, Z+1	; 0x01
    3a34:	36 fe       	sbrs	r3, 6
    3a36:	03 c0       	rjmp	.+6      	; 0x3a3e <vfprintf+0x198>
    3a38:	69 2d       	mov	r22, r9
    3a3a:	70 e0       	ldi	r23, 0x00	; 0
    3a3c:	02 c0       	rjmp	.+4      	; 0x3a42 <vfprintf+0x19c>
    3a3e:	6f ef       	ldi	r22, 0xFF	; 255
    3a40:	7f ef       	ldi	r23, 0xFF	; 255
    3a42:	c5 01       	movw	r24, r10
    3a44:	2d d1       	rcall	.+602    	; 0x3ca0 <strnlen_P>
    3a46:	4c 01       	movw	r8, r24
    3a48:	f3 2d       	mov	r31, r3
    3a4a:	f0 68       	ori	r31, 0x80	; 128
    3a4c:	3f 2e       	mov	r3, r31
    3a4e:	82 01       	movw	r16, r4
    3a50:	33 fc       	sbrc	r3, 3
    3a52:	19 c0       	rjmp	.+50     	; 0x3a86 <vfprintf+0x1e0>
    3a54:	82 2d       	mov	r24, r2
    3a56:	90 e0       	ldi	r25, 0x00	; 0
    3a58:	88 16       	cp	r8, r24
    3a5a:	99 06       	cpc	r9, r25
    3a5c:	a0 f4       	brcc	.+40     	; 0x3a86 <vfprintf+0x1e0>
    3a5e:	b6 01       	movw	r22, r12
    3a60:	80 e2       	ldi	r24, 0x20	; 32
    3a62:	90 e0       	ldi	r25, 0x00	; 0
    3a64:	33 d1       	rcall	.+614    	; 0x3ccc <fputc>
    3a66:	2a 94       	dec	r2
    3a68:	f5 cf       	rjmp	.-22     	; 0x3a54 <vfprintf+0x1ae>
    3a6a:	f5 01       	movw	r30, r10
    3a6c:	37 fc       	sbrc	r3, 7
    3a6e:	85 91       	lpm	r24, Z+
    3a70:	37 fe       	sbrs	r3, 7
    3a72:	81 91       	ld	r24, Z+
    3a74:	5f 01       	movw	r10, r30
    3a76:	b6 01       	movw	r22, r12
    3a78:	90 e0       	ldi	r25, 0x00	; 0
    3a7a:	28 d1       	rcall	.+592    	; 0x3ccc <fputc>
    3a7c:	21 10       	cpse	r2, r1
    3a7e:	2a 94       	dec	r2
    3a80:	21 e0       	ldi	r18, 0x01	; 1
    3a82:	82 1a       	sub	r8, r18
    3a84:	91 08       	sbc	r9, r1
    3a86:	81 14       	cp	r8, r1
    3a88:	91 04       	cpc	r9, r1
    3a8a:	79 f7       	brne	.-34     	; 0x3a6a <vfprintf+0x1c4>
    3a8c:	e1 c0       	rjmp	.+450    	; 0x3c50 <vfprintf+0x3aa>
    3a8e:	84 36       	cpi	r24, 0x64	; 100
    3a90:	11 f0       	breq	.+4      	; 0x3a96 <vfprintf+0x1f0>
    3a92:	89 36       	cpi	r24, 0x69	; 105
    3a94:	39 f5       	brne	.+78     	; 0x3ae4 <vfprintf+0x23e>
    3a96:	f8 01       	movw	r30, r16
    3a98:	37 fe       	sbrs	r3, 7
    3a9a:	07 c0       	rjmp	.+14     	; 0x3aaa <vfprintf+0x204>
    3a9c:	60 81       	ld	r22, Z
    3a9e:	71 81       	ldd	r23, Z+1	; 0x01
    3aa0:	82 81       	ldd	r24, Z+2	; 0x02
    3aa2:	93 81       	ldd	r25, Z+3	; 0x03
    3aa4:	0c 5f       	subi	r16, 0xFC	; 252
    3aa6:	1f 4f       	sbci	r17, 0xFF	; 255
    3aa8:	08 c0       	rjmp	.+16     	; 0x3aba <vfprintf+0x214>
    3aaa:	60 81       	ld	r22, Z
    3aac:	71 81       	ldd	r23, Z+1	; 0x01
    3aae:	07 2e       	mov	r0, r23
    3ab0:	00 0c       	add	r0, r0
    3ab2:	88 0b       	sbc	r24, r24
    3ab4:	99 0b       	sbc	r25, r25
    3ab6:	0e 5f       	subi	r16, 0xFE	; 254
    3ab8:	1f 4f       	sbci	r17, 0xFF	; 255
    3aba:	f3 2d       	mov	r31, r3
    3abc:	ff 76       	andi	r31, 0x6F	; 111
    3abe:	3f 2e       	mov	r3, r31
    3ac0:	97 ff       	sbrs	r25, 7
    3ac2:	09 c0       	rjmp	.+18     	; 0x3ad6 <vfprintf+0x230>
    3ac4:	90 95       	com	r25
    3ac6:	80 95       	com	r24
    3ac8:	70 95       	com	r23
    3aca:	61 95       	neg	r22
    3acc:	7f 4f       	sbci	r23, 0xFF	; 255
    3ace:	8f 4f       	sbci	r24, 0xFF	; 255
    3ad0:	9f 4f       	sbci	r25, 0xFF	; 255
    3ad2:	f0 68       	ori	r31, 0x80	; 128
    3ad4:	3f 2e       	mov	r3, r31
    3ad6:	2a e0       	ldi	r18, 0x0A	; 10
    3ad8:	30 e0       	ldi	r19, 0x00	; 0
    3ada:	a3 01       	movw	r20, r6
    3adc:	33 d1       	rcall	.+614    	; 0x3d44 <__ultoa_invert>
    3ade:	88 2e       	mov	r8, r24
    3ae0:	86 18       	sub	r8, r6
    3ae2:	44 c0       	rjmp	.+136    	; 0x3b6c <vfprintf+0x2c6>
    3ae4:	85 37       	cpi	r24, 0x75	; 117
    3ae6:	31 f4       	brne	.+12     	; 0x3af4 <vfprintf+0x24e>
    3ae8:	23 2d       	mov	r18, r3
    3aea:	2f 7e       	andi	r18, 0xEF	; 239
    3aec:	b2 2e       	mov	r11, r18
    3aee:	2a e0       	ldi	r18, 0x0A	; 10
    3af0:	30 e0       	ldi	r19, 0x00	; 0
    3af2:	25 c0       	rjmp	.+74     	; 0x3b3e <vfprintf+0x298>
    3af4:	93 2d       	mov	r25, r3
    3af6:	99 7f       	andi	r25, 0xF9	; 249
    3af8:	b9 2e       	mov	r11, r25
    3afa:	8f 36       	cpi	r24, 0x6F	; 111
    3afc:	c1 f0       	breq	.+48     	; 0x3b2e <vfprintf+0x288>
    3afe:	18 f4       	brcc	.+6      	; 0x3b06 <vfprintf+0x260>
    3b00:	88 35       	cpi	r24, 0x58	; 88
    3b02:	79 f0       	breq	.+30     	; 0x3b22 <vfprintf+0x27c>
    3b04:	ae c0       	rjmp	.+348    	; 0x3c62 <vfprintf+0x3bc>
    3b06:	80 37       	cpi	r24, 0x70	; 112
    3b08:	19 f0       	breq	.+6      	; 0x3b10 <vfprintf+0x26a>
    3b0a:	88 37       	cpi	r24, 0x78	; 120
    3b0c:	21 f0       	breq	.+8      	; 0x3b16 <vfprintf+0x270>
    3b0e:	a9 c0       	rjmp	.+338    	; 0x3c62 <vfprintf+0x3bc>
    3b10:	e9 2f       	mov	r30, r25
    3b12:	e0 61       	ori	r30, 0x10	; 16
    3b14:	be 2e       	mov	r11, r30
    3b16:	b4 fe       	sbrs	r11, 4
    3b18:	0d c0       	rjmp	.+26     	; 0x3b34 <vfprintf+0x28e>
    3b1a:	fb 2d       	mov	r31, r11
    3b1c:	f4 60       	ori	r31, 0x04	; 4
    3b1e:	bf 2e       	mov	r11, r31
    3b20:	09 c0       	rjmp	.+18     	; 0x3b34 <vfprintf+0x28e>
    3b22:	34 fe       	sbrs	r3, 4
    3b24:	0a c0       	rjmp	.+20     	; 0x3b3a <vfprintf+0x294>
    3b26:	29 2f       	mov	r18, r25
    3b28:	26 60       	ori	r18, 0x06	; 6
    3b2a:	b2 2e       	mov	r11, r18
    3b2c:	06 c0       	rjmp	.+12     	; 0x3b3a <vfprintf+0x294>
    3b2e:	28 e0       	ldi	r18, 0x08	; 8
    3b30:	30 e0       	ldi	r19, 0x00	; 0
    3b32:	05 c0       	rjmp	.+10     	; 0x3b3e <vfprintf+0x298>
    3b34:	20 e1       	ldi	r18, 0x10	; 16
    3b36:	30 e0       	ldi	r19, 0x00	; 0
    3b38:	02 c0       	rjmp	.+4      	; 0x3b3e <vfprintf+0x298>
    3b3a:	20 e1       	ldi	r18, 0x10	; 16
    3b3c:	32 e0       	ldi	r19, 0x02	; 2
    3b3e:	f8 01       	movw	r30, r16
    3b40:	b7 fe       	sbrs	r11, 7
    3b42:	07 c0       	rjmp	.+14     	; 0x3b52 <vfprintf+0x2ac>
    3b44:	60 81       	ld	r22, Z
    3b46:	71 81       	ldd	r23, Z+1	; 0x01
    3b48:	82 81       	ldd	r24, Z+2	; 0x02
    3b4a:	93 81       	ldd	r25, Z+3	; 0x03
    3b4c:	0c 5f       	subi	r16, 0xFC	; 252
    3b4e:	1f 4f       	sbci	r17, 0xFF	; 255
    3b50:	06 c0       	rjmp	.+12     	; 0x3b5e <vfprintf+0x2b8>
    3b52:	60 81       	ld	r22, Z
    3b54:	71 81       	ldd	r23, Z+1	; 0x01
    3b56:	80 e0       	ldi	r24, 0x00	; 0
    3b58:	90 e0       	ldi	r25, 0x00	; 0
    3b5a:	0e 5f       	subi	r16, 0xFE	; 254
    3b5c:	1f 4f       	sbci	r17, 0xFF	; 255
    3b5e:	a3 01       	movw	r20, r6
    3b60:	f1 d0       	rcall	.+482    	; 0x3d44 <__ultoa_invert>
    3b62:	88 2e       	mov	r8, r24
    3b64:	86 18       	sub	r8, r6
    3b66:	fb 2d       	mov	r31, r11
    3b68:	ff 77       	andi	r31, 0x7F	; 127
    3b6a:	3f 2e       	mov	r3, r31
    3b6c:	36 fe       	sbrs	r3, 6
    3b6e:	0d c0       	rjmp	.+26     	; 0x3b8a <vfprintf+0x2e4>
    3b70:	23 2d       	mov	r18, r3
    3b72:	2e 7f       	andi	r18, 0xFE	; 254
    3b74:	a2 2e       	mov	r10, r18
    3b76:	89 14       	cp	r8, r9
    3b78:	58 f4       	brcc	.+22     	; 0x3b90 <vfprintf+0x2ea>
    3b7a:	34 fe       	sbrs	r3, 4
    3b7c:	0b c0       	rjmp	.+22     	; 0x3b94 <vfprintf+0x2ee>
    3b7e:	32 fc       	sbrc	r3, 2
    3b80:	09 c0       	rjmp	.+18     	; 0x3b94 <vfprintf+0x2ee>
    3b82:	83 2d       	mov	r24, r3
    3b84:	8e 7e       	andi	r24, 0xEE	; 238
    3b86:	a8 2e       	mov	r10, r24
    3b88:	05 c0       	rjmp	.+10     	; 0x3b94 <vfprintf+0x2ee>
    3b8a:	b8 2c       	mov	r11, r8
    3b8c:	a3 2c       	mov	r10, r3
    3b8e:	03 c0       	rjmp	.+6      	; 0x3b96 <vfprintf+0x2f0>
    3b90:	b8 2c       	mov	r11, r8
    3b92:	01 c0       	rjmp	.+2      	; 0x3b96 <vfprintf+0x2f0>
    3b94:	b9 2c       	mov	r11, r9
    3b96:	a4 fe       	sbrs	r10, 4
    3b98:	0f c0       	rjmp	.+30     	; 0x3bb8 <vfprintf+0x312>
    3b9a:	fe 01       	movw	r30, r28
    3b9c:	e8 0d       	add	r30, r8
    3b9e:	f1 1d       	adc	r31, r1
    3ba0:	80 81       	ld	r24, Z
    3ba2:	80 33       	cpi	r24, 0x30	; 48
    3ba4:	21 f4       	brne	.+8      	; 0x3bae <vfprintf+0x308>
    3ba6:	9a 2d       	mov	r25, r10
    3ba8:	99 7e       	andi	r25, 0xE9	; 233
    3baa:	a9 2e       	mov	r10, r25
    3bac:	09 c0       	rjmp	.+18     	; 0x3bc0 <vfprintf+0x31a>
    3bae:	a2 fe       	sbrs	r10, 2
    3bb0:	06 c0       	rjmp	.+12     	; 0x3bbe <vfprintf+0x318>
    3bb2:	b3 94       	inc	r11
    3bb4:	b3 94       	inc	r11
    3bb6:	04 c0       	rjmp	.+8      	; 0x3bc0 <vfprintf+0x31a>
    3bb8:	8a 2d       	mov	r24, r10
    3bba:	86 78       	andi	r24, 0x86	; 134
    3bbc:	09 f0       	breq	.+2      	; 0x3bc0 <vfprintf+0x31a>
    3bbe:	b3 94       	inc	r11
    3bc0:	a3 fc       	sbrc	r10, 3
    3bc2:	10 c0       	rjmp	.+32     	; 0x3be4 <vfprintf+0x33e>
    3bc4:	a0 fe       	sbrs	r10, 0
    3bc6:	06 c0       	rjmp	.+12     	; 0x3bd4 <vfprintf+0x32e>
    3bc8:	b2 14       	cp	r11, r2
    3bca:	80 f4       	brcc	.+32     	; 0x3bec <vfprintf+0x346>
    3bcc:	28 0c       	add	r2, r8
    3bce:	92 2c       	mov	r9, r2
    3bd0:	9b 18       	sub	r9, r11
    3bd2:	0d c0       	rjmp	.+26     	; 0x3bee <vfprintf+0x348>
    3bd4:	b2 14       	cp	r11, r2
    3bd6:	58 f4       	brcc	.+22     	; 0x3bee <vfprintf+0x348>
    3bd8:	b6 01       	movw	r22, r12
    3bda:	80 e2       	ldi	r24, 0x20	; 32
    3bdc:	90 e0       	ldi	r25, 0x00	; 0
    3bde:	76 d0       	rcall	.+236    	; 0x3ccc <fputc>
    3be0:	b3 94       	inc	r11
    3be2:	f8 cf       	rjmp	.-16     	; 0x3bd4 <vfprintf+0x32e>
    3be4:	b2 14       	cp	r11, r2
    3be6:	18 f4       	brcc	.+6      	; 0x3bee <vfprintf+0x348>
    3be8:	2b 18       	sub	r2, r11
    3bea:	02 c0       	rjmp	.+4      	; 0x3bf0 <vfprintf+0x34a>
    3bec:	98 2c       	mov	r9, r8
    3bee:	21 2c       	mov	r2, r1
    3bf0:	a4 fe       	sbrs	r10, 4
    3bf2:	0f c0       	rjmp	.+30     	; 0x3c12 <vfprintf+0x36c>
    3bf4:	b6 01       	movw	r22, r12
    3bf6:	80 e3       	ldi	r24, 0x30	; 48
    3bf8:	90 e0       	ldi	r25, 0x00	; 0
    3bfa:	68 d0       	rcall	.+208    	; 0x3ccc <fputc>
    3bfc:	a2 fe       	sbrs	r10, 2
    3bfe:	16 c0       	rjmp	.+44     	; 0x3c2c <vfprintf+0x386>
    3c00:	a1 fc       	sbrc	r10, 1
    3c02:	03 c0       	rjmp	.+6      	; 0x3c0a <vfprintf+0x364>
    3c04:	88 e7       	ldi	r24, 0x78	; 120
    3c06:	90 e0       	ldi	r25, 0x00	; 0
    3c08:	02 c0       	rjmp	.+4      	; 0x3c0e <vfprintf+0x368>
    3c0a:	88 e5       	ldi	r24, 0x58	; 88
    3c0c:	90 e0       	ldi	r25, 0x00	; 0
    3c0e:	b6 01       	movw	r22, r12
    3c10:	0c c0       	rjmp	.+24     	; 0x3c2a <vfprintf+0x384>
    3c12:	8a 2d       	mov	r24, r10
    3c14:	86 78       	andi	r24, 0x86	; 134
    3c16:	51 f0       	breq	.+20     	; 0x3c2c <vfprintf+0x386>
    3c18:	a1 fe       	sbrs	r10, 1
    3c1a:	02 c0       	rjmp	.+4      	; 0x3c20 <vfprintf+0x37a>
    3c1c:	8b e2       	ldi	r24, 0x2B	; 43
    3c1e:	01 c0       	rjmp	.+2      	; 0x3c22 <vfprintf+0x37c>
    3c20:	80 e2       	ldi	r24, 0x20	; 32
    3c22:	a7 fc       	sbrc	r10, 7
    3c24:	8d e2       	ldi	r24, 0x2D	; 45
    3c26:	b6 01       	movw	r22, r12
    3c28:	90 e0       	ldi	r25, 0x00	; 0
    3c2a:	50 d0       	rcall	.+160    	; 0x3ccc <fputc>
    3c2c:	89 14       	cp	r8, r9
    3c2e:	30 f4       	brcc	.+12     	; 0x3c3c <vfprintf+0x396>
    3c30:	b6 01       	movw	r22, r12
    3c32:	80 e3       	ldi	r24, 0x30	; 48
    3c34:	90 e0       	ldi	r25, 0x00	; 0
    3c36:	4a d0       	rcall	.+148    	; 0x3ccc <fputc>
    3c38:	9a 94       	dec	r9
    3c3a:	f8 cf       	rjmp	.-16     	; 0x3c2c <vfprintf+0x386>
    3c3c:	8a 94       	dec	r8
    3c3e:	f3 01       	movw	r30, r6
    3c40:	e8 0d       	add	r30, r8
    3c42:	f1 1d       	adc	r31, r1
    3c44:	80 81       	ld	r24, Z
    3c46:	b6 01       	movw	r22, r12
    3c48:	90 e0       	ldi	r25, 0x00	; 0
    3c4a:	40 d0       	rcall	.+128    	; 0x3ccc <fputc>
    3c4c:	81 10       	cpse	r8, r1
    3c4e:	f6 cf       	rjmp	.-20     	; 0x3c3c <vfprintf+0x396>
    3c50:	22 20       	and	r2, r2
    3c52:	09 f4       	brne	.+2      	; 0x3c56 <vfprintf+0x3b0>
    3c54:	4e ce       	rjmp	.-868    	; 0x38f2 <vfprintf+0x4c>
    3c56:	b6 01       	movw	r22, r12
    3c58:	80 e2       	ldi	r24, 0x20	; 32
    3c5a:	90 e0       	ldi	r25, 0x00	; 0
    3c5c:	37 d0       	rcall	.+110    	; 0x3ccc <fputc>
    3c5e:	2a 94       	dec	r2
    3c60:	f7 cf       	rjmp	.-18     	; 0x3c50 <vfprintf+0x3aa>
    3c62:	f6 01       	movw	r30, r12
    3c64:	86 81       	ldd	r24, Z+6	; 0x06
    3c66:	97 81       	ldd	r25, Z+7	; 0x07
    3c68:	02 c0       	rjmp	.+4      	; 0x3c6e <vfprintf+0x3c8>
    3c6a:	8f ef       	ldi	r24, 0xFF	; 255
    3c6c:	9f ef       	ldi	r25, 0xFF	; 255
    3c6e:	2b 96       	adiw	r28, 0x0b	; 11
    3c70:	0f b6       	in	r0, 0x3f	; 63
    3c72:	f8 94       	cli
    3c74:	de bf       	out	0x3e, r29	; 62
    3c76:	0f be       	out	0x3f, r0	; 63
    3c78:	cd bf       	out	0x3d, r28	; 61
    3c7a:	df 91       	pop	r29
    3c7c:	cf 91       	pop	r28
    3c7e:	1f 91       	pop	r17
    3c80:	0f 91       	pop	r16
    3c82:	ff 90       	pop	r15
    3c84:	ef 90       	pop	r14
    3c86:	df 90       	pop	r13
    3c88:	cf 90       	pop	r12
    3c8a:	bf 90       	pop	r11
    3c8c:	af 90       	pop	r10
    3c8e:	9f 90       	pop	r9
    3c90:	8f 90       	pop	r8
    3c92:	7f 90       	pop	r7
    3c94:	6f 90       	pop	r6
    3c96:	5f 90       	pop	r5
    3c98:	4f 90       	pop	r4
    3c9a:	3f 90       	pop	r3
    3c9c:	2f 90       	pop	r2
    3c9e:	08 95       	ret

00003ca0 <strnlen_P>:
    3ca0:	fc 01       	movw	r30, r24
    3ca2:	05 90       	lpm	r0, Z+
    3ca4:	61 50       	subi	r22, 0x01	; 1
    3ca6:	70 40       	sbci	r23, 0x00	; 0
    3ca8:	01 10       	cpse	r0, r1
    3caa:	d8 f7       	brcc	.-10     	; 0x3ca2 <strnlen_P+0x2>
    3cac:	80 95       	com	r24
    3cae:	90 95       	com	r25
    3cb0:	8e 0f       	add	r24, r30
    3cb2:	9f 1f       	adc	r25, r31
    3cb4:	08 95       	ret

00003cb6 <strnlen>:
    3cb6:	fc 01       	movw	r30, r24
    3cb8:	61 50       	subi	r22, 0x01	; 1
    3cba:	70 40       	sbci	r23, 0x00	; 0
    3cbc:	01 90       	ld	r0, Z+
    3cbe:	01 10       	cpse	r0, r1
    3cc0:	d8 f7       	brcc	.-10     	; 0x3cb8 <strnlen+0x2>
    3cc2:	80 95       	com	r24
    3cc4:	90 95       	com	r25
    3cc6:	8e 0f       	add	r24, r30
    3cc8:	9f 1f       	adc	r25, r31
    3cca:	08 95       	ret

00003ccc <fputc>:
    3ccc:	0f 93       	push	r16
    3cce:	1f 93       	push	r17
    3cd0:	cf 93       	push	r28
    3cd2:	df 93       	push	r29
    3cd4:	fb 01       	movw	r30, r22
    3cd6:	23 81       	ldd	r18, Z+3	; 0x03
    3cd8:	21 fd       	sbrc	r18, 1
    3cda:	03 c0       	rjmp	.+6      	; 0x3ce2 <fputc+0x16>
    3cdc:	8f ef       	ldi	r24, 0xFF	; 255
    3cde:	9f ef       	ldi	r25, 0xFF	; 255
    3ce0:	2c c0       	rjmp	.+88     	; 0x3d3a <fputc+0x6e>
    3ce2:	22 ff       	sbrs	r18, 2
    3ce4:	16 c0       	rjmp	.+44     	; 0x3d12 <fputc+0x46>
    3ce6:	46 81       	ldd	r20, Z+6	; 0x06
    3ce8:	57 81       	ldd	r21, Z+7	; 0x07
    3cea:	24 81       	ldd	r18, Z+4	; 0x04
    3cec:	35 81       	ldd	r19, Z+5	; 0x05
    3cee:	42 17       	cp	r20, r18
    3cf0:	53 07       	cpc	r21, r19
    3cf2:	44 f4       	brge	.+16     	; 0x3d04 <fputc+0x38>
    3cf4:	a0 81       	ld	r26, Z
    3cf6:	b1 81       	ldd	r27, Z+1	; 0x01
    3cf8:	9d 01       	movw	r18, r26
    3cfa:	2f 5f       	subi	r18, 0xFF	; 255
    3cfc:	3f 4f       	sbci	r19, 0xFF	; 255
    3cfe:	31 83       	std	Z+1, r19	; 0x01
    3d00:	20 83       	st	Z, r18
    3d02:	8c 93       	st	X, r24
    3d04:	26 81       	ldd	r18, Z+6	; 0x06
    3d06:	37 81       	ldd	r19, Z+7	; 0x07
    3d08:	2f 5f       	subi	r18, 0xFF	; 255
    3d0a:	3f 4f       	sbci	r19, 0xFF	; 255
    3d0c:	37 83       	std	Z+7, r19	; 0x07
    3d0e:	26 83       	std	Z+6, r18	; 0x06
    3d10:	14 c0       	rjmp	.+40     	; 0x3d3a <fputc+0x6e>
    3d12:	8b 01       	movw	r16, r22
    3d14:	ec 01       	movw	r28, r24
    3d16:	fb 01       	movw	r30, r22
    3d18:	00 84       	ldd	r0, Z+8	; 0x08
    3d1a:	f1 85       	ldd	r31, Z+9	; 0x09
    3d1c:	e0 2d       	mov	r30, r0
    3d1e:	19 95       	eicall
    3d20:	89 2b       	or	r24, r25
    3d22:	e1 f6       	brne	.-72     	; 0x3cdc <fputc+0x10>
    3d24:	d8 01       	movw	r26, r16
    3d26:	16 96       	adiw	r26, 0x06	; 6
    3d28:	8d 91       	ld	r24, X+
    3d2a:	9c 91       	ld	r25, X
    3d2c:	17 97       	sbiw	r26, 0x07	; 7
    3d2e:	01 96       	adiw	r24, 0x01	; 1
    3d30:	17 96       	adiw	r26, 0x07	; 7
    3d32:	9c 93       	st	X, r25
    3d34:	8e 93       	st	-X, r24
    3d36:	16 97       	sbiw	r26, 0x06	; 6
    3d38:	ce 01       	movw	r24, r28
    3d3a:	df 91       	pop	r29
    3d3c:	cf 91       	pop	r28
    3d3e:	1f 91       	pop	r17
    3d40:	0f 91       	pop	r16
    3d42:	08 95       	ret

00003d44 <__ultoa_invert>:
    3d44:	fa 01       	movw	r30, r20
    3d46:	aa 27       	eor	r26, r26
    3d48:	28 30       	cpi	r18, 0x08	; 8
    3d4a:	51 f1       	breq	.+84     	; 0x3da0 <__ultoa_invert+0x5c>
    3d4c:	20 31       	cpi	r18, 0x10	; 16
    3d4e:	81 f1       	breq	.+96     	; 0x3db0 <__ultoa_invert+0x6c>
    3d50:	e8 94       	clt
    3d52:	6f 93       	push	r22
    3d54:	6e 7f       	andi	r22, 0xFE	; 254
    3d56:	6e 5f       	subi	r22, 0xFE	; 254
    3d58:	7f 4f       	sbci	r23, 0xFF	; 255
    3d5a:	8f 4f       	sbci	r24, 0xFF	; 255
    3d5c:	9f 4f       	sbci	r25, 0xFF	; 255
    3d5e:	af 4f       	sbci	r26, 0xFF	; 255
    3d60:	b1 e0       	ldi	r27, 0x01	; 1
    3d62:	3e d0       	rcall	.+124    	; 0x3de0 <__ultoa_invert+0x9c>
    3d64:	b4 e0       	ldi	r27, 0x04	; 4
    3d66:	3c d0       	rcall	.+120    	; 0x3de0 <__ultoa_invert+0x9c>
    3d68:	67 0f       	add	r22, r23
    3d6a:	78 1f       	adc	r23, r24
    3d6c:	89 1f       	adc	r24, r25
    3d6e:	9a 1f       	adc	r25, r26
    3d70:	a1 1d       	adc	r26, r1
    3d72:	68 0f       	add	r22, r24
    3d74:	79 1f       	adc	r23, r25
    3d76:	8a 1f       	adc	r24, r26
    3d78:	91 1d       	adc	r25, r1
    3d7a:	a1 1d       	adc	r26, r1
    3d7c:	6a 0f       	add	r22, r26
    3d7e:	71 1d       	adc	r23, r1
    3d80:	81 1d       	adc	r24, r1
    3d82:	91 1d       	adc	r25, r1
    3d84:	a1 1d       	adc	r26, r1
    3d86:	20 d0       	rcall	.+64     	; 0x3dc8 <__ultoa_invert+0x84>
    3d88:	09 f4       	brne	.+2      	; 0x3d8c <__ultoa_invert+0x48>
    3d8a:	68 94       	set
    3d8c:	3f 91       	pop	r19
    3d8e:	2a e0       	ldi	r18, 0x0A	; 10
    3d90:	26 9f       	mul	r18, r22
    3d92:	11 24       	eor	r1, r1
    3d94:	30 19       	sub	r19, r0
    3d96:	30 5d       	subi	r19, 0xD0	; 208
    3d98:	31 93       	st	Z+, r19
    3d9a:	de f6       	brtc	.-74     	; 0x3d52 <__ultoa_invert+0xe>
    3d9c:	cf 01       	movw	r24, r30
    3d9e:	08 95       	ret
    3da0:	46 2f       	mov	r20, r22
    3da2:	47 70       	andi	r20, 0x07	; 7
    3da4:	40 5d       	subi	r20, 0xD0	; 208
    3da6:	41 93       	st	Z+, r20
    3da8:	b3 e0       	ldi	r27, 0x03	; 3
    3daa:	0f d0       	rcall	.+30     	; 0x3dca <__ultoa_invert+0x86>
    3dac:	c9 f7       	brne	.-14     	; 0x3da0 <__ultoa_invert+0x5c>
    3dae:	f6 cf       	rjmp	.-20     	; 0x3d9c <__ultoa_invert+0x58>
    3db0:	46 2f       	mov	r20, r22
    3db2:	4f 70       	andi	r20, 0x0F	; 15
    3db4:	40 5d       	subi	r20, 0xD0	; 208
    3db6:	4a 33       	cpi	r20, 0x3A	; 58
    3db8:	18 f0       	brcs	.+6      	; 0x3dc0 <__ultoa_invert+0x7c>
    3dba:	49 5d       	subi	r20, 0xD9	; 217
    3dbc:	31 fd       	sbrc	r19, 1
    3dbe:	40 52       	subi	r20, 0x20	; 32
    3dc0:	41 93       	st	Z+, r20
    3dc2:	02 d0       	rcall	.+4      	; 0x3dc8 <__ultoa_invert+0x84>
    3dc4:	a9 f7       	brne	.-22     	; 0x3db0 <__ultoa_invert+0x6c>
    3dc6:	ea cf       	rjmp	.-44     	; 0x3d9c <__ultoa_invert+0x58>
    3dc8:	b4 e0       	ldi	r27, 0x04	; 4
    3dca:	a6 95       	lsr	r26
    3dcc:	97 95       	ror	r25
    3dce:	87 95       	ror	r24
    3dd0:	77 95       	ror	r23
    3dd2:	67 95       	ror	r22
    3dd4:	ba 95       	dec	r27
    3dd6:	c9 f7       	brne	.-14     	; 0x3dca <__ultoa_invert+0x86>
    3dd8:	00 97       	sbiw	r24, 0x00	; 0
    3dda:	61 05       	cpc	r22, r1
    3ddc:	71 05       	cpc	r23, r1
    3dde:	08 95       	ret
    3de0:	9b 01       	movw	r18, r22
    3de2:	ac 01       	movw	r20, r24
    3de4:	0a 2e       	mov	r0, r26
    3de6:	06 94       	lsr	r0
    3de8:	57 95       	ror	r21
    3dea:	47 95       	ror	r20
    3dec:	37 95       	ror	r19
    3dee:	27 95       	ror	r18
    3df0:	ba 95       	dec	r27
    3df2:	c9 f7       	brne	.-14     	; 0x3de6 <__ultoa_invert+0xa2>
    3df4:	62 0f       	add	r22, r18
    3df6:	73 1f       	adc	r23, r19
    3df8:	84 1f       	adc	r24, r20
    3dfa:	95 1f       	adc	r25, r21
    3dfc:	a0 1d       	adc	r26, r0
    3dfe:	08 95       	ret

00003e00 <_exit>:
    3e00:	f8 94       	cli

00003e02 <__stop_program>:
    3e02:	ff cf       	rjmp	.-2      	; 0x3e02 <__stop_program>
