
RTP_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000140  00800200  00003ffa  0000408e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003ffa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000ed3  00800340  00800340  000041ce  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000041ce  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000422c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000700  00000000  00000000  0000426c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000089d8  00000000  00000000  0000496c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002408  00000000  00000000  0000d344  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004833  00000000  00000000  0000f74c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000018a4  00000000  00000000  00013f80  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002ae5  00000000  00000000  00015824  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00007b55  00000000  00000000  00018309  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000006b0  00000000  00000000  0001fe5e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	94 c0       	rjmp	.+296    	; 0x12a <__ctors_end>
       2:	00 00       	nop
       4:	b3 c0       	rjmp	.+358    	; 0x16c <__bad_interrupt>
       6:	00 00       	nop
       8:	b1 c0       	rjmp	.+354    	; 0x16c <__bad_interrupt>
       a:	00 00       	nop
       c:	af c0       	rjmp	.+350    	; 0x16c <__bad_interrupt>
       e:	00 00       	nop
      10:	ad c0       	rjmp	.+346    	; 0x16c <__bad_interrupt>
      12:	00 00       	nop
      14:	ab c0       	rjmp	.+342    	; 0x16c <__bad_interrupt>
      16:	00 00       	nop
      18:	a9 c0       	rjmp	.+338    	; 0x16c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	a7 c0       	rjmp	.+334    	; 0x16c <__bad_interrupt>
      1e:	00 00       	nop
      20:	a5 c0       	rjmp	.+330    	; 0x16c <__bad_interrupt>
      22:	00 00       	nop
      24:	a3 c0       	rjmp	.+326    	; 0x16c <__bad_interrupt>
      26:	00 00       	nop
      28:	a1 c0       	rjmp	.+322    	; 0x16c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	9f c0       	rjmp	.+318    	; 0x16c <__bad_interrupt>
      2e:	00 00       	nop
      30:	a9 c5       	rjmp	.+2898   	; 0xb84 <__vector_12>
      32:	00 00       	nop
      34:	9b c0       	rjmp	.+310    	; 0x16c <__bad_interrupt>
      36:	00 00       	nop
      38:	99 c0       	rjmp	.+306    	; 0x16c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	97 c0       	rjmp	.+302    	; 0x16c <__bad_interrupt>
      3e:	00 00       	nop
      40:	95 c0       	rjmp	.+298    	; 0x16c <__bad_interrupt>
      42:	00 00       	nop
      44:	93 c0       	rjmp	.+294    	; 0x16c <__bad_interrupt>
      46:	00 00       	nop
      48:	91 c0       	rjmp	.+290    	; 0x16c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	8f c0       	rjmp	.+286    	; 0x16c <__bad_interrupt>
      4e:	00 00       	nop
      50:	8d c0       	rjmp	.+282    	; 0x16c <__bad_interrupt>
      52:	00 00       	nop
      54:	8b c0       	rjmp	.+278    	; 0x16c <__bad_interrupt>
      56:	00 00       	nop
      58:	89 c0       	rjmp	.+274    	; 0x16c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	87 c0       	rjmp	.+270    	; 0x16c <__bad_interrupt>
      5e:	00 00       	nop
      60:	85 c0       	rjmp	.+266    	; 0x16c <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 7c 17 	jmp	0x2ef8	; 0x2ef8 <__vector_25>
      68:	0c 94 ce 17 	jmp	0x2f9c	; 0x2f9c <__vector_26>
      6c:	7f c0       	rjmp	.+254    	; 0x16c <__bad_interrupt>
      6e:	00 00       	nop
      70:	7d c0       	rjmp	.+250    	; 0x16c <__bad_interrupt>
      72:	00 00       	nop
      74:	7b c0       	rjmp	.+246    	; 0x16c <__bad_interrupt>
      76:	00 00       	nop
      78:	79 c0       	rjmp	.+242    	; 0x16c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	77 c0       	rjmp	.+238    	; 0x16c <__bad_interrupt>
      7e:	00 00       	nop
      80:	75 c0       	rjmp	.+234    	; 0x16c <__bad_interrupt>
      82:	00 00       	nop
      84:	73 c0       	rjmp	.+230    	; 0x16c <__bad_interrupt>
      86:	00 00       	nop
      88:	71 c0       	rjmp	.+226    	; 0x16c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	6f c0       	rjmp	.+222    	; 0x16c <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 12 18 	jmp	0x3024	; 0x3024 <__vector_36>
      94:	0c 94 64 18 	jmp	0x30c8	; 0x30c8 <__vector_37>
      98:	69 c0       	rjmp	.+210    	; 0x16c <__bad_interrupt>
      9a:	00 00       	nop
      9c:	67 c0       	rjmp	.+206    	; 0x16c <__bad_interrupt>
      9e:	00 00       	nop
      a0:	65 c0       	rjmp	.+202    	; 0x16c <__bad_interrupt>
      a2:	00 00       	nop
      a4:	63 c0       	rjmp	.+198    	; 0x16c <__bad_interrupt>
      a6:	00 00       	nop
      a8:	61 c0       	rjmp	.+194    	; 0x16c <__bad_interrupt>
      aa:	00 00       	nop
      ac:	5f c0       	rjmp	.+190    	; 0x16c <__bad_interrupt>
      ae:	00 00       	nop
      b0:	5d c0       	rjmp	.+186    	; 0x16c <__bad_interrupt>
      b2:	00 00       	nop
      b4:	5b c0       	rjmp	.+182    	; 0x16c <__bad_interrupt>
      b6:	00 00       	nop
      b8:	59 c0       	rjmp	.+178    	; 0x16c <__bad_interrupt>
      ba:	00 00       	nop
      bc:	57 c0       	rjmp	.+174    	; 0x16c <__bad_interrupt>
      be:	00 00       	nop
      c0:	55 c0       	rjmp	.+170    	; 0x16c <__bad_interrupt>
      c2:	00 00       	nop
      c4:	53 c0       	rjmp	.+166    	; 0x16c <__bad_interrupt>
      c6:	00 00       	nop
      c8:	51 c0       	rjmp	.+162    	; 0x16c <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 a8 18 	jmp	0x3150	; 0x3150 <__vector_51>
      d0:	0c 94 fa 18 	jmp	0x31f4	; 0x31f4 <__vector_52>
      d4:	4b c0       	rjmp	.+150    	; 0x16c <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 3e 19 	jmp	0x327c	; 0x327c <__vector_54>
      dc:	0c 94 90 19 	jmp	0x3320	; 0x3320 <__vector_55>
      e0:	45 c0       	rjmp	.+138    	; 0x16c <__bad_interrupt>
      e2:	00 00       	nop
      e4:	fc 13       	cpse	r31, r28
      e6:	fc 13       	cpse	r31, r28
      e8:	fc 13       	cpse	r31, r28
      ea:	33 14       	cp	r3, r3
      ec:	3b 14       	cp	r3, r11
      ee:	50 14       	cp	r5, r0
      f0:	fc 13       	cpse	r31, r28
      f2:	fc 13       	cpse	r31, r28
      f4:	33 14       	cp	r3, r3
      f6:	3b 14       	cp	r3, r11

000000f8 <prvIdleTask>:
    /* Reset the event list item to its normal value - so it can be used with
     * queues and semaphores. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */

    return uxReturn;
}
      f8:	0e 94 91 0a 	call	0x1522	; 0x1522 <prvCheckTasksWaitingTermination>
      fc:	80 91 51 11 	lds	r24, 0x1151	; 0x801151 <pxReadyTasksLists>
     100:	82 30       	cpi	r24, 0x02	; 2
     102:	08 f0       	brcs	.+2      	; 0x106 <prvIdleTask+0xe>
     104:	7a d4       	rcall	.+2292   	; 0x9fa <vPortYield>
     106:	0e 94 79 14 	call	0x28f2	; 0x28f2 <vApplicationIdleHook>
     10a:	f6 cf       	rjmp	.-20     	; 0xf8 <prvIdleTask>

0000010c <prvTimerTask>:
                pxNewTimer->ucStatus = 0x00;
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
     10c:	cf 93       	push	r28
     10e:	df 93       	push	r29
     110:	1f 92       	push	r1
     112:	cd b7       	in	r28, 0x3d	; 61
     114:	de b7       	in	r29, 0x3e	; 62
     116:	ce 01       	movw	r24, r28
     118:	01 96       	adiw	r24, 0x01	; 1
     11a:	0e 94 80 11 	call	0x2300	; 0x2300 <prvGetNextExpireTime>
     11e:	49 81       	ldd	r20, Y+1	; 0x01
     120:	0e 94 73 13 	call	0x26e6	; 0x26e6 <prvProcessTimerOrBlockTask>
     124:	0e 94 c6 13 	call	0x278c	; 0x278c <prvProcessReceivedCommands>
     128:	f6 cf       	rjmp	.-20     	; 0x116 <prvTimerTask+0xa>

0000012a <__ctors_end>:
     12a:	11 24       	eor	r1, r1
     12c:	1f be       	out	0x3f, r1	; 63
     12e:	cf ef       	ldi	r28, 0xFF	; 255
     130:	d1 e2       	ldi	r29, 0x21	; 33
     132:	de bf       	out	0x3e, r29	; 62
     134:	cd bf       	out	0x3d, r28	; 61
     136:	00 e0       	ldi	r16, 0x00	; 0
     138:	0c bf       	out	0x3c, r16	; 60

0000013a <__do_copy_data>:
     13a:	13 e0       	ldi	r17, 0x03	; 3
     13c:	a0 e0       	ldi	r26, 0x00	; 0
     13e:	b2 e0       	ldi	r27, 0x02	; 2
     140:	ea ef       	ldi	r30, 0xFA	; 250
     142:	ff e3       	ldi	r31, 0x3F	; 63
     144:	00 e0       	ldi	r16, 0x00	; 0
     146:	0b bf       	out	0x3b, r16	; 59
     148:	02 c0       	rjmp	.+4      	; 0x14e <__do_copy_data+0x14>
     14a:	07 90       	elpm	r0, Z+
     14c:	0d 92       	st	X+, r0
     14e:	a0 34       	cpi	r26, 0x40	; 64
     150:	b1 07       	cpc	r27, r17
     152:	d9 f7       	brne	.-10     	; 0x14a <__do_copy_data+0x10>

00000154 <__do_clear_bss>:
     154:	22 e1       	ldi	r18, 0x12	; 18
     156:	a0 e4       	ldi	r26, 0x40	; 64
     158:	b3 e0       	ldi	r27, 0x03	; 3
     15a:	01 c0       	rjmp	.+2      	; 0x15e <.do_clear_bss_start>

0000015c <.do_clear_bss_loop>:
     15c:	1d 92       	st	X+, r1

0000015e <.do_clear_bss_start>:
     15e:	a3 31       	cpi	r26, 0x13	; 19
     160:	b2 07       	cpc	r27, r18
     162:	e1 f7       	brne	.-8      	; 0x15c <.do_clear_bss_loop>
     164:	0e 94 b7 14 	call	0x296e	; 0x296e <main>
     168:	0c 94 fb 1f 	jmp	0x3ff6	; 0x3ff6 <_exit>

0000016c <__bad_interrupt>:
     16c:	49 cf       	rjmp	.-366    	; 0x0 <__vectors>

0000016e <distanceMeasurementFrontTask>:

// Implementations of distanceMeasurementTask and obstacleDetectionTask...

void distanceMeasurementFrontTask(void *pvParameters)
{
	printf("Distance measurement task ");
     16e:	8d e1       	ldi	r24, 0x1D	; 29
     170:	92 e0       	ldi	r25, 0x02	; 2
     172:	9f 93       	push	r25
     174:	8f 93       	push	r24
     176:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <printf>
	// In every task before loop:
	#if (configUSE_APPLICATION_TASK_TAG == 1)
	// Set taskTag
	vTaskSetApplicationTaskTag(NULL, (void *)5 /*task id*/);
     17a:	65 e0       	ldi	r22, 0x05	; 5
     17c:	70 e0       	ldi	r23, 0x00	; 0
     17e:	80 e0       	ldi	r24, 0x00	; 0
     180:	90 e0       	ldi	r25, 0x00	; 0
     182:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <vTaskSetApplicationTaskTag>
     186:	0f 90       	pop	r0
     188:	0f 90       	pop	r0

	const TickType_t xDelay = 1000 / portTICK_PERIOD_MS; // Delay for 500 ms

	while (1)
	{
		vTaskDelay(1000 / portTICK_PERIOD_MS);
     18a:	6e e3       	ldi	r22, 0x3E	; 62
     18c:	70 e0       	ldi	r23, 0x00	; 0
     18e:	80 e0       	ldi	r24, 0x00	; 0
     190:	90 e0       	ldi	r25, 0x00	; 0
     192:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <vTaskDelay>

		uint16_t distance = hc_sr04_takeMeasurement(true);
     196:	81 e0       	ldi	r24, 0x01	; 1
     198:	72 d1       	rcall	.+740    	; 0x47e <hc_sr04_takeMeasurement>
     19a:	ec 01       	movw	r28, r24

		// Acquire the semaphore before updating the shared variable
		if (xSemaphoreTake(xFrontDistanceSemaphore, portMAX_DELAY) == pdTRUE)
     19c:	4f ef       	ldi	r20, 0xFF	; 255
     19e:	5f ef       	ldi	r21, 0xFF	; 255
     1a0:	ba 01       	movw	r22, r20
     1a2:	80 91 07 12 	lds	r24, 0x1207	; 0x801207 <xFrontDistanceSemaphore>
     1a6:	90 91 08 12 	lds	r25, 0x1208	; 0x801208 <xFrontDistanceSemaphore+0x1>
     1aa:	ae d7       	rcall	.+3932   	; 0x1108 <xQueueSemaphoreTake>
     1ac:	81 30       	cpi	r24, 0x01	; 1
     1ae:	79 f4       	brne	.+30     	; 0x1ce <distanceMeasurementFrontTask+0x60>
		{
			frontMeasuredDistance = distance;
     1b0:	d0 93 43 03 	sts	0x0343, r29	; 0x800343 <frontMeasuredDistance+0x1>
     1b4:	c0 93 42 03 	sts	0x0342, r28	; 0x800342 <frontMeasuredDistance>
			xSemaphoreGive(xFrontDistanceSemaphore); // Release the semaphore
     1b8:	00 e0       	ldi	r16, 0x00	; 0
     1ba:	20 e0       	ldi	r18, 0x00	; 0
     1bc:	30 e0       	ldi	r19, 0x00	; 0
     1be:	a9 01       	movw	r20, r18
     1c0:	60 e0       	ldi	r22, 0x00	; 0
     1c2:	70 e0       	ldi	r23, 0x00	; 0
     1c4:	80 91 07 12 	lds	r24, 0x1207	; 0x801207 <xFrontDistanceSemaphore>
     1c8:	90 91 08 12 	lds	r25, 0x1208	; 0x801208 <xFrontDistanceSemaphore+0x1>
     1cc:	2d d6       	rcall	.+3162   	; 0xe28 <xQueueGenericSend>
		}

		vTaskDelay(xDelay); // Wait for the next cycle
     1ce:	6e e3       	ldi	r22, 0x3E	; 62
     1d0:	70 e0       	ldi	r23, 0x00	; 0
     1d2:	80 e0       	ldi	r24, 0x00	; 0
     1d4:	90 e0       	ldi	r25, 0x00	; 0
     1d6:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <vTaskDelay>
	}
     1da:	d7 cf       	rjmp	.-82     	; 0x18a <distanceMeasurementFrontTask+0x1c>

000001dc <distanceMeasurementBackTask>:
	}
}

void distanceMeasurementBackTask(void *pvParameters)
{
	printf("Distance measurement back task ");
     1dc:	88 e3       	ldi	r24, 0x38	; 56
     1de:	92 e0       	ldi	r25, 0x02	; 2
     1e0:	9f 93       	push	r25
     1e2:	8f 93       	push	r24
     1e4:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <printf>
	// In every task before loop:
	#if (configUSE_APPLICATION_TASK_TAG == 1)
	// Set taskTag
	vTaskSetApplicationTaskTag(NULL, (void *)3 /*task id*/);
     1e8:	63 e0       	ldi	r22, 0x03	; 3
     1ea:	70 e0       	ldi	r23, 0x00	; 0
     1ec:	80 e0       	ldi	r24, 0x00	; 0
     1ee:	90 e0       	ldi	r25, 0x00	; 0
     1f0:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <vTaskSetApplicationTaskTag>
     1f4:	0f 90       	pop	r0
     1f6:	0f 90       	pop	r0

	const TickType_t xDelay = 1000 / portTICK_PERIOD_MS; // Delay for 500 ms

	while (1)
	{
		vTaskDelay(1000 / portTICK_PERIOD_MS);
     1f8:	6e e3       	ldi	r22, 0x3E	; 62
     1fa:	70 e0       	ldi	r23, 0x00	; 0
     1fc:	80 e0       	ldi	r24, 0x00	; 0
     1fe:	90 e0       	ldi	r25, 0x00	; 0
     200:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <vTaskDelay>

		uint16_t distance = hc_sr04_takeMeasurement(false);
     204:	80 e0       	ldi	r24, 0x00	; 0
     206:	3b d1       	rcall	.+630    	; 0x47e <hc_sr04_takeMeasurement>
     208:	ec 01       	movw	r28, r24

		// Acquire the semaphore before updating the shared variable
		if (xSemaphoreTake(xBackDistanceSemaphore, portMAX_DELAY) == pdTRUE)
     20a:	4f ef       	ldi	r20, 0xFF	; 255
     20c:	5f ef       	ldi	r21, 0xFF	; 255
     20e:	ba 01       	movw	r22, r20
     210:	80 91 05 12 	lds	r24, 0x1205	; 0x801205 <xBackDistanceSemaphore>
     214:	90 91 06 12 	lds	r25, 0x1206	; 0x801206 <xBackDistanceSemaphore+0x1>
     218:	77 d7       	rcall	.+3822   	; 0x1108 <xQueueSemaphoreTake>
     21a:	81 30       	cpi	r24, 0x01	; 1
     21c:	d9 f4       	brne	.+54     	; 0x254 <distanceMeasurementBackTask+0x78>
		{
			backMeasuredDistance = distance;
     21e:	d0 93 41 03 	sts	0x0341, r29	; 0x800341 <__data_end+0x1>
     222:	c0 93 40 03 	sts	0x0340, r28	; 0x800340 <__data_end>
			printf("Measurement!! ,%d \n" , distance);
     226:	df 93       	push	r29
     228:	cf 93       	push	r28
     22a:	88 e5       	ldi	r24, 0x58	; 88
     22c:	92 e0       	ldi	r25, 0x02	; 2
     22e:	9f 93       	push	r25
     230:	8f 93       	push	r24
     232:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <printf>
			xSemaphoreGive(xBackDistanceSemaphore); // Release the semaphore
     236:	00 e0       	ldi	r16, 0x00	; 0
     238:	20 e0       	ldi	r18, 0x00	; 0
     23a:	30 e0       	ldi	r19, 0x00	; 0
     23c:	a9 01       	movw	r20, r18
     23e:	60 e0       	ldi	r22, 0x00	; 0
     240:	70 e0       	ldi	r23, 0x00	; 0
     242:	80 91 05 12 	lds	r24, 0x1205	; 0x801205 <xBackDistanceSemaphore>
     246:	90 91 06 12 	lds	r25, 0x1206	; 0x801206 <xBackDistanceSemaphore+0x1>
     24a:	ee d5       	rcall	.+3036   	; 0xe28 <xQueueGenericSend>
     24c:	0f 90       	pop	r0
     24e:	0f 90       	pop	r0
     250:	0f 90       	pop	r0
     252:	0f 90       	pop	r0
		}

		vTaskDelay(xDelay); // Wait for the next cycle
     254:	6e e3       	ldi	r22, 0x3E	; 62
     256:	70 e0       	ldi	r23, 0x00	; 0
     258:	80 e0       	ldi	r24, 0x00	; 0
     25a:	90 e0       	ldi	r25, 0x00	; 0
     25c:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <vTaskDelay>
	}
     260:	cb cf       	rjmp	.-106    	; 0x1f8 <distanceMeasurementBackTask+0x1c>

00000262 <create_all_application_tasks>:
SemaphoreHandle_t xFrontDistanceSemaphore;
SemaphoreHandle_t xBackDistanceSemaphore;


void create_all_application_tasks(void)
{
     262:	ef 92       	push	r14
     264:	ff 92       	push	r15
     266:	0f 93       	push	r16
	
    // Initialize semaphores
    xFrontDistanceSemaphore = xSemaphoreCreateMutex();
     268:	81 e0       	ldi	r24, 0x01	; 1
     26a:	7d d6       	rcall	.+3322   	; 0xf66 <xQueueCreateMutex>
     26c:	90 93 08 12 	sts	0x1208, r25	; 0x801208 <xFrontDistanceSemaphore+0x1>
     270:	80 93 07 12 	sts	0x1207, r24	; 0x801207 <xFrontDistanceSemaphore>
    xBackDistanceSemaphore = xSemaphoreCreateMutex();
     274:	81 e0       	ldi	r24, 0x01	; 1
     276:	77 d6       	rcall	.+3310   	; 0xf66 <xQueueCreateMutex>
     278:	90 93 06 12 	sts	0x1206, r25	; 0x801206 <xBackDistanceSemaphore+0x1>
     27c:	80 93 05 12 	sts	0x1205, r24	; 0x801205 <xBackDistanceSemaphore>

    // Create front distance measurement task
    xTaskCreate(
     280:	e1 2c       	mov	r14, r1
     282:	f1 2c       	mov	r15, r1
     284:	03 e0       	ldi	r16, 0x03	; 3
     286:	20 e0       	ldi	r18, 0x00	; 0
     288:	30 e0       	ldi	r19, 0x00	; 0
     28a:	40 ec       	ldi	r20, 0xC0	; 192
     28c:	50 e0       	ldi	r21, 0x00	; 0
     28e:	6c e6       	ldi	r22, 0x6C	; 108
     290:	72 e0       	ldi	r23, 0x02	; 2
     292:	87 eb       	ldi	r24, 0xB7	; 183
     294:	90 e0       	ldi	r25, 0x00	; 0
     296:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <xTaskCreate>
    NULL,
    3, // Priority
    NULL);

    // Create back distance measurement task
    xTaskCreate(
     29a:	20 e0       	ldi	r18, 0x00	; 0
     29c:	30 e0       	ldi	r19, 0x00	; 0
     29e:	40 ec       	ldi	r20, 0xC0	; 192
     2a0:	50 e0       	ldi	r21, 0x00	; 0
     2a2:	6e e7       	ldi	r22, 0x7E	; 126
     2a4:	72 e0       	ldi	r23, 0x02	; 2
     2a6:	8e ee       	ldi	r24, 0xEE	; 238
     2a8:	90 e0       	ldi	r25, 0x00	; 0
     2aa:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <xTaskCreate>
    NULL,
    3, // Priority
    NULL);

    // Create obstacle detection task
    xTaskCreate(
     2ae:	01 e0       	ldi	r16, 0x01	; 1
     2b0:	20 e0       	ldi	r18, 0x00	; 0
     2b2:	30 e0       	ldi	r19, 0x00	; 0
     2b4:	40 ec       	ldi	r20, 0xC0	; 192
     2b6:	50 e0       	ldi	r21, 0x00	; 0
     2b8:	6f e8       	ldi	r22, 0x8F	; 143
     2ba:	72 e0       	ldi	r23, 0x02	; 2
     2bc:	81 e9       	ldi	r24, 0x91	; 145
     2be:	91 e0       	ldi	r25, 0x01	; 1
     2c0:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <xTaskCreate>
    1, // Priority
    NULL);
	
	
	// Create obstacle detection task
	xTaskCreate(
     2c4:	20 e0       	ldi	r18, 0x00	; 0
     2c6:	30 e0       	ldi	r19, 0x00	; 0
     2c8:	40 ec       	ldi	r20, 0xC0	; 192
     2ca:	50 e0       	ldi	r21, 0x00	; 0
     2cc:	6e e9       	ldi	r22, 0x9E	; 158
     2ce:	72 e0       	ldi	r23, 0x02	; 2
     2d0:	80 ee       	ldi	r24, 0xE0	; 224
     2d2:	91 e0       	ldi	r25, 0x01	; 1
     2d4:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <xTaskCreate>
	"obstacleDetectionForBack",
	configMINIMAL_STACK_SIZE,
	NULL,
	1, // Priority
	NULL);
}
     2d8:	0f 91       	pop	r16
     2da:	ff 90       	pop	r15
     2dc:	ef 90       	pop	r14
     2de:	08 95       	ret

000002e0 <turnOnLight>:

// Function to turn on the light
void turnOnLight(bool frontLight)
{
	
	uint8_t LIGHT_PIN = frontLight ? P_LIGHT_PIN_Front : P_LIGHT_PIN_Back; // Choose the correct pin based on the sensor
     2e0:	88 23       	and	r24, r24
     2e2:	11 f0       	breq	.+4      	; 0x2e8 <turnOnLight+0x8>
     2e4:	30 e0       	ldi	r19, 0x00	; 0
     2e6:	01 c0       	rjmp	.+2      	; 0x2ea <turnOnLight+0xa>
     2e8:	36 e0       	ldi	r19, 0x06	; 6
	// Set LIGHT_PIN high
	PORTC |= (1 << LIGHT_PIN);
     2ea:	28 b1       	in	r18, 0x08	; 8
     2ec:	81 e0       	ldi	r24, 0x01	; 1
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	02 c0       	rjmp	.+4      	; 0x2f6 <turnOnLight+0x16>
     2f2:	88 0f       	add	r24, r24
     2f4:	99 1f       	adc	r25, r25
     2f6:	3a 95       	dec	r19
     2f8:	e2 f7       	brpl	.-8      	; 0x2f2 <turnOnLight+0x12>
     2fa:	82 2b       	or	r24, r18
     2fc:	88 b9       	out	0x08, r24	; 8
     2fe:	08 95       	ret

00000300 <turnOffLight>:
}

// Function to turn off the light
void turnOffLight(bool frontLight)
{
	uint8_t LIGHT_PIN = frontLight ? P_LIGHT_PIN_Front : P_LIGHT_PIN_Back; // Choose the correct pin based on the sensor
     300:	88 23       	and	r24, r24
     302:	11 f0       	breq	.+4      	; 0x308 <turnOffLight+0x8>
     304:	30 e0       	ldi	r19, 0x00	; 0
     306:	01 c0       	rjmp	.+2      	; 0x30a <turnOffLight+0xa>
     308:	36 e0       	ldi	r19, 0x06	; 6

	// Set LIGHT_PIN low
	PORTC &= ~(1 << LIGHT_PIN);
     30a:	28 b1       	in	r18, 0x08	; 8
     30c:	81 e0       	ldi	r24, 0x01	; 1
     30e:	90 e0       	ldi	r25, 0x00	; 0
     310:	02 c0       	rjmp	.+4      	; 0x316 <turnOffLight+0x16>
     312:	88 0f       	add	r24, r24
     314:	99 1f       	adc	r25, r25
     316:	3a 95       	dec	r19
     318:	e2 f7       	brpl	.-8      	; 0x312 <turnOffLight+0x12>
     31a:	80 95       	com	r24
     31c:	82 23       	and	r24, r18
     31e:	88 b9       	out	0x08, r24	; 8
     320:	08 95       	ret

00000322 <obstacleDetectionTask>:
	}
}

void obstacleDetectionTask(void *pvParameters)
{
			printf("Obstacle detection task");
     322:	87 eb       	ldi	r24, 0xB7	; 183
     324:	92 e0       	ldi	r25, 0x02	; 2
     326:	9f 93       	push	r25
     328:	8f 93       	push	r24
     32a:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <printf>

	// In every task before loop:
	#if (configUSE_APPLICATION_TASK_TAG == 1)
	// Set taskTag
	vTaskSetApplicationTaskTag(NULL, (void *)1 /*task id*/);
     32e:	61 e0       	ldi	r22, 0x01	; 1
     330:	70 e0       	ldi	r23, 0x00	; 0
     332:	80 e0       	ldi	r24, 0x00	; 0
     334:	90 e0       	ldi	r25, 0x00	; 0
     336:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <vTaskSetApplicationTaskTag>
     33a:	0f 90       	pop	r0
     33c:	0f 90       	pop	r0
	uint16_t distance;

	while (1)
	{
		// Acquire the semaphore before reading the shared variable
		if (xSemaphoreTake(xFrontDistanceSemaphore, portMAX_DELAY) == pdTRUE)
     33e:	4f ef       	ldi	r20, 0xFF	; 255
     340:	5f ef       	ldi	r21, 0xFF	; 255
     342:	ba 01       	movw	r22, r20
     344:	80 91 07 12 	lds	r24, 0x1207	; 0x801207 <xFrontDistanceSemaphore>
     348:	90 91 08 12 	lds	r25, 0x1208	; 0x801208 <xFrontDistanceSemaphore+0x1>
     34c:	dd d6       	rcall	.+3514   	; 0x1108 <xQueueSemaphoreTake>
     34e:	81 30       	cpi	r24, 0x01	; 1
     350:	79 f4       	brne	.+30     	; 0x370 <obstacleDetectionTask+0x4e>
		{
			distance = frontMeasuredDistance;
     352:	c0 91 42 03 	lds	r28, 0x0342	; 0x800342 <frontMeasuredDistance>
     356:	d0 91 43 03 	lds	r29, 0x0343	; 0x800343 <frontMeasuredDistance+0x1>
			xSemaphoreGive(xFrontDistanceSemaphore); // Release the semaphore
     35a:	00 e0       	ldi	r16, 0x00	; 0
     35c:	20 e0       	ldi	r18, 0x00	; 0
     35e:	30 e0       	ldi	r19, 0x00	; 0
     360:	a9 01       	movw	r20, r18
     362:	60 e0       	ldi	r22, 0x00	; 0
     364:	70 e0       	ldi	r23, 0x00	; 0
     366:	80 91 07 12 	lds	r24, 0x1207	; 0x801207 <xFrontDistanceSemaphore>
     36a:	90 91 08 12 	lds	r25, 0x1208	; 0x801208 <xFrontDistanceSemaphore+0x1>
     36e:	5c d5       	rcall	.+2744   	; 0xe28 <xQueueGenericSend>
		}
		// Check if distance is below a certain threshold
		if (distance < 500) // Assuming 20 cm as a constraint
     370:	c4 3f       	cpi	r28, 0xF4	; 244
     372:	81 e0       	ldi	r24, 0x01	; 1
     374:	d8 07       	cpc	r29, r24
     376:	78 f4       	brcc	.+30     	; 0x396 <obstacleDetectionTask+0x74>
		{
			printf("Obstacle too close! ,%d \n" , distance);
     378:	df 93       	push	r29
     37a:	cf 93       	push	r28
     37c:	8f ec       	ldi	r24, 0xCF	; 207
     37e:	92 e0       	ldi	r25, 0x02	; 2
     380:	9f 93       	push	r25
     382:	8f 93       	push	r24
     384:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <printf>
			turnOnLight(true); // Turn on the light
     388:	81 e0       	ldi	r24, 0x01	; 1
     38a:	aa df       	rcall	.-172    	; 0x2e0 <turnOnLight>
     38c:	0f 90       	pop	r0
     38e:	0f 90       	pop	r0
     390:	0f 90       	pop	r0
     392:	0f 90       	pop	r0
     394:	0e c0       	rjmp	.+28     	; 0x3b2 <obstacleDetectionTask+0x90>

		}
		else{
			printf("Obstacle is far away from us ,%d \n" , distance);
     396:	df 93       	push	r29
     398:	cf 93       	push	r28
     39a:	89 ee       	ldi	r24, 0xE9	; 233
     39c:	92 e0       	ldi	r25, 0x02	; 2
     39e:	9f 93       	push	r25
     3a0:	8f 93       	push	r24
     3a2:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <printf>
			turnOffLight(true);
     3a6:	81 e0       	ldi	r24, 0x01	; 1
     3a8:	ab df       	rcall	.-170    	; 0x300 <turnOffLight>
     3aa:	0f 90       	pop	r0
     3ac:	0f 90       	pop	r0
     3ae:	0f 90       	pop	r0
     3b0:	0f 90       	pop	r0
		}

		
		vTaskDelay(2000 / portTICK_PERIOD_MS);
     3b2:	6d e7       	ldi	r22, 0x7D	; 125
     3b4:	70 e0       	ldi	r23, 0x00	; 0
     3b6:	80 e0       	ldi	r24, 0x00	; 0
     3b8:	90 e0       	ldi	r25, 0x00	; 0
     3ba:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <vTaskDelay>
	}
     3be:	bf cf       	rjmp	.-130    	; 0x33e <obstacleDetectionTask+0x1c>

000003c0 <obstacleDetectionForBackTask>:
	}
}

void obstacleDetectionForBackTask(void *pvParameters)
{
	printf("Obstacle detection task");
     3c0:	87 eb       	ldi	r24, 0xB7	; 183
     3c2:	92 e0       	ldi	r25, 0x02	; 2
     3c4:	9f 93       	push	r25
     3c6:	8f 93       	push	r24
     3c8:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <printf>

	// In every task before loop:
	#if (configUSE_APPLICATION_TASK_TAG == 1)
	// Set taskTag
	vTaskSetApplicationTaskTag(NULL, (void *)4 /*task id*/);
     3cc:	64 e0       	ldi	r22, 0x04	; 4
     3ce:	70 e0       	ldi	r23, 0x00	; 0
     3d0:	80 e0       	ldi	r24, 0x00	; 0
     3d2:	90 e0       	ldi	r25, 0x00	; 0
     3d4:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <vTaskSetApplicationTaskTag>
     3d8:	0f 90       	pop	r0
     3da:	0f 90       	pop	r0
	uint16_t distance;

	while (1)
	{
		// Acquire the semaphore before reading the shared variable
		if (xSemaphoreTake(xFrontDistanceSemaphore, portMAX_DELAY) == pdTRUE)
     3dc:	4f ef       	ldi	r20, 0xFF	; 255
     3de:	5f ef       	ldi	r21, 0xFF	; 255
     3e0:	ba 01       	movw	r22, r20
     3e2:	80 91 07 12 	lds	r24, 0x1207	; 0x801207 <xFrontDistanceSemaphore>
     3e6:	90 91 08 12 	lds	r25, 0x1208	; 0x801208 <xFrontDistanceSemaphore+0x1>
     3ea:	8e d6       	rcall	.+3356   	; 0x1108 <xQueueSemaphoreTake>
     3ec:	81 30       	cpi	r24, 0x01	; 1
     3ee:	79 f4       	brne	.+30     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
		{
			distance = backMeasuredDistance;
     3f0:	c0 91 40 03 	lds	r28, 0x0340	; 0x800340 <__data_end>
     3f4:	d0 91 41 03 	lds	r29, 0x0341	; 0x800341 <__data_end+0x1>
			xSemaphoreGive(xFrontDistanceSemaphore); // Release the semaphore
     3f8:	00 e0       	ldi	r16, 0x00	; 0
     3fa:	20 e0       	ldi	r18, 0x00	; 0
     3fc:	30 e0       	ldi	r19, 0x00	; 0
     3fe:	a9 01       	movw	r20, r18
     400:	60 e0       	ldi	r22, 0x00	; 0
     402:	70 e0       	ldi	r23, 0x00	; 0
     404:	80 91 07 12 	lds	r24, 0x1207	; 0x801207 <xFrontDistanceSemaphore>
     408:	90 91 08 12 	lds	r25, 0x1208	; 0x801208 <xFrontDistanceSemaphore+0x1>
     40c:	0d d5       	rcall	.+2586   	; 0xe28 <xQueueGenericSend>
		}
		// Check if distance is below a certain threshold
		if (distance < 500) // Assuming 20 cm as a constraint
     40e:	c4 3f       	cpi	r28, 0xF4	; 244
     410:	81 e0       	ldi	r24, 0x01	; 1
     412:	d8 07       	cpc	r29, r24
     414:	78 f4       	brcc	.+30     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
		{
			printf("Obstacle too close! ,%d \n" , distance);
     416:	df 93       	push	r29
     418:	cf 93       	push	r28
     41a:	8f ec       	ldi	r24, 0xCF	; 207
     41c:	92 e0       	ldi	r25, 0x02	; 2
     41e:	9f 93       	push	r25
     420:	8f 93       	push	r24
     422:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <printf>
			turnOnLight(false); // Turn on the light
     426:	80 e0       	ldi	r24, 0x00	; 0
     428:	5b df       	rcall	.-330    	; 0x2e0 <turnOnLight>
     42a:	0f 90       	pop	r0
     42c:	0f 90       	pop	r0
     42e:	0f 90       	pop	r0
     430:	0f 90       	pop	r0
     432:	0e c0       	rjmp	.+28     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>

		}
		else{
			printf("Obstacle is far away from us ,%d \n" , distance);
     434:	df 93       	push	r29
     436:	cf 93       	push	r28
     438:	89 ee       	ldi	r24, 0xE9	; 233
     43a:	92 e0       	ldi	r25, 0x02	; 2
     43c:	9f 93       	push	r25
     43e:	8f 93       	push	r24
     440:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <printf>
			turnOffLight(false);
     444:	80 e0       	ldi	r24, 0x00	; 0
     446:	5c df       	rcall	.-328    	; 0x300 <turnOffLight>
     448:	0f 90       	pop	r0
     44a:	0f 90       	pop	r0
     44c:	0f 90       	pop	r0
     44e:	0f 90       	pop	r0
		}

		
		vTaskDelay(2000 / portTICK_PERIOD_MS);
     450:	6d e7       	ldi	r22, 0x7D	; 125
     452:	70 e0       	ldi	r23, 0x00	; 0
     454:	80 e0       	ldi	r24, 0x00	; 0
     456:	90 e0       	ldi	r25, 0x00	; 0
     458:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <vTaskDelay>
	}
     45c:	bf cf       	rjmp	.-130    	; 0x3dc <obstacleDetectionForBackTask+0x1c>

0000045e <hc_sr04_init>:
#define P_EchoFront PC4
#define P_EchoBack PC3
void hc_sr04_init()
{
    //Vcc
    DDR_Vcc|=(1 << P_Vcc);
     45e:	87 b1       	in	r24, 0x07	; 7
     460:	81 60       	ori	r24, 0x01	; 1
     462:	87 b9       	out	0x07, r24	; 7
    PORT_Vcc|=(1 << P_Vcc);
     464:	88 b1       	in	r24, 0x08	; 8
     466:	81 60       	ori	r24, 0x01	; 1
     468:	88 b9       	out	0x08, r24	; 8

    //GND
    DDR_Gnd|=(1 << P_Gnd);
     46a:	87 b1       	in	r24, 0x07	; 7
     46c:	80 64       	ori	r24, 0x40	; 64
     46e:	87 b9       	out	0x07, r24	; 7

    //Trigger
    DDR_Trig|=(1 << P_TrigFront);
     470:	87 b1       	in	r24, 0x07	; 7
     472:	84 60       	ori	r24, 0x04	; 4
     474:	87 b9       	out	0x07, r24	; 7
	DDR_Trig|=(1<< P_TrigBack);
     476:	87 b1       	in	r24, 0x07	; 7
     478:	82 60       	ori	r24, 0x02	; 2
     47a:	87 b9       	out	0x07, r24	; 7
     47c:	08 95       	ret

0000047e <hc_sr04_takeMeasurement>:
//     */
//     cnt = cnt * 343UL / 125UL;
// 
//     return cnt;
// }
uint16_t hc_sr04_takeMeasurement(bool isFrontSensor) {
     47e:	0f 93       	push	r16
     480:	1f 93       	push	r17
     482:	cf 93       	push	r28
     484:	df 93       	push	r29
	uint16_t cnt = 0;
	uint8_t trigPin = isFrontSensor ? P_TrigFront : P_TrigBack; // Choose the correct pin based on the sensor
     486:	88 23       	and	r24, r24
     488:	11 f0       	breq	.+4      	; 0x48e <hc_sr04_takeMeasurement+0x10>
     48a:	32 e0       	ldi	r19, 0x02	; 2
     48c:	01 c0       	rjmp	.+2      	; 0x490 <hc_sr04_takeMeasurement+0x12>
     48e:	31 e0       	ldi	r19, 0x01	; 1
	uint8_t echoPin = isFrontSensor ? P_EchoFront : P_EchoBack; // Choose the correct pin based on the sensor
     490:	88 23       	and	r24, r24
     492:	11 f0       	breq	.+4      	; 0x498 <hc_sr04_takeMeasurement+0x1a>
     494:	04 e0       	ldi	r16, 0x04	; 4
     496:	01 c0       	rjmp	.+2      	; 0x49a <hc_sr04_takeMeasurement+0x1c>
     498:	03 e0       	ldi	r16, 0x03	; 3
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     49a:	25 e3       	ldi	r18, 0x35	; 53
     49c:	2a 95       	dec	r18
     49e:	f1 f7       	brne	.-4      	; 0x49c <hc_sr04_takeMeasurement+0x1e>
     4a0:	00 00       	nop

	_delay_us(10);
	PORT_trig |= (1 << trigPin); // Trigger the measurement
     4a2:	28 b1       	in	r18, 0x08	; 8
     4a4:	81 e0       	ldi	r24, 0x01	; 1
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	02 c0       	rjmp	.+4      	; 0x4ae <hc_sr04_takeMeasurement+0x30>
     4aa:	88 0f       	add	r24, r24
     4ac:	99 1f       	adc	r25, r25
     4ae:	3a 95       	dec	r19
     4b0:	e2 f7       	brpl	.-8      	; 0x4aa <hc_sr04_takeMeasurement+0x2c>
     4b2:	92 2f       	mov	r25, r18
     4b4:	98 2b       	or	r25, r24
     4b6:	98 b9       	out	0x08, r25	; 8
     4b8:	25 e3       	ldi	r18, 0x35	; 53
     4ba:	2a 95       	dec	r18
     4bc:	f1 f7       	brne	.-4      	; 0x4ba <hc_sr04_takeMeasurement+0x3c>
     4be:	00 00       	nop
	_delay_us(10);
	PORT_trig &= ~(1 << trigPin);
     4c0:	98 b1       	in	r25, 0x08	; 8
     4c2:	80 95       	com	r24
     4c4:	89 23       	and	r24, r25
     4c6:	88 b9       	out	0x08, r24	; 8

	uint8_t TCCR1B_state = TCCR1B; // Save the current state of TCCR1B
     4c8:	e1 e8       	ldi	r30, 0x81	; 129
     4ca:	f0 e0       	ldi	r31, 0x00	; 0
     4cc:	10 81       	ld	r17, Z

	// Set the Timer/Counter1 prescaler to 256
	TCCR1B = (1 << CS12);
     4ce:	84 e0       	ldi	r24, 0x04	; 4
     4d0:	80 83       	st	Z, r24
	
	TCNT1 = 0; // Reset the timer
     4d2:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
     4d6:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
	while (!(PIN_Echo & (1 << echoPin))) {
     4da:	10 c0       	rjmp	.+32     	; 0x4fc <hc_sr04_takeMeasurement+0x7e>
		// Check for timeout (100ms)
		if (TCNT1 >= (F_CPU / 256) * 0.1) {
     4dc:	60 91 84 00 	lds	r22, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
     4e0:	70 91 85 00 	lds	r23, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
     4e4:	80 e0       	ldi	r24, 0x00	; 0
     4e6:	90 e0       	ldi	r25, 0x00	; 0
     4e8:	0e 94 bd 14 	call	0x297a	; 0x297a <__floatunsisf>
     4ec:	20 e0       	ldi	r18, 0x00	; 0
     4ee:	30 e5       	ldi	r19, 0x50	; 80
     4f0:	43 ec       	ldi	r20, 0xC3	; 195
     4f2:	55 e4       	ldi	r21, 0x45	; 69
     4f4:	0e 94 fa 14 	call	0x29f4	; 0x29f4 <__gesf2>
     4f8:	88 23       	and	r24, r24
     4fa:	e4 f5       	brge	.+120    	; 0x574 <hc_sr04_takeMeasurement+0xf6>

	// Set the Timer/Counter1 prescaler to 256
	TCCR1B = (1 << CS12);
	
	TCNT1 = 0; // Reset the timer
	while (!(PIN_Echo & (1 << echoPin))) {
     4fc:	86 b1       	in	r24, 0x06	; 6
     4fe:	c0 2f       	mov	r28, r16
     500:	90 e0       	ldi	r25, 0x00	; 0
     502:	00 2e       	mov	r0, r16
     504:	02 c0       	rjmp	.+4      	; 0x50a <hc_sr04_takeMeasurement+0x8c>
     506:	95 95       	asr	r25
     508:	87 95       	ror	r24
     50a:	0a 94       	dec	r0
     50c:	e2 f7       	brpl	.-8      	; 0x506 <hc_sr04_takeMeasurement+0x88>
     50e:	80 ff       	sbrs	r24, 0
     510:	e5 cf       	rjmp	.-54     	; 0x4dc <hc_sr04_takeMeasurement+0x5e>
			return 0; // Sensor is not working
		}
	}

	// Wait for the echo pin to go high
	TCNT1 = 0; // Reset the timer for the high signal duration
     512:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
     516:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
	while (PIN_Echo & (1 << echoPin)) {
     51a:	10 c0       	rjmp	.+32     	; 0x53c <hc_sr04_takeMeasurement+0xbe>
		// Check for timer overflow (24ms)
		if (TCNT1 >= (F_CPU / 256) * 0.024) {
     51c:	60 91 84 00 	lds	r22, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
     520:	70 91 85 00 	lds	r23, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
     524:	80 e0       	ldi	r24, 0x00	; 0
     526:	90 e0       	ldi	r25, 0x00	; 0
     528:	0e 94 bd 14 	call	0x297a	; 0x297a <__floatunsisf>
     52c:	20 e0       	ldi	r18, 0x00	; 0
     52e:	30 e8       	ldi	r19, 0x80	; 128
     530:	4b eb       	ldi	r20, 0xBB	; 187
     532:	54 e4       	ldi	r21, 0x44	; 68
     534:	0e 94 fa 14 	call	0x29f4	; 0x29f4 <__gesf2>
     538:	88 23       	and	r24, r24
     53a:	54 f4       	brge	.+20     	; 0x550 <hc_sr04_takeMeasurement+0xd2>
		}
	}

	// Wait for the echo pin to go high
	TCNT1 = 0; // Reset the timer for the high signal duration
	while (PIN_Echo & (1 << echoPin)) {
     53c:	86 b1       	in	r24, 0x06	; 6
     53e:	90 e0       	ldi	r25, 0x00	; 0
     540:	0c 2e       	mov	r0, r28
     542:	02 c0       	rjmp	.+4      	; 0x548 <hc_sr04_takeMeasurement+0xca>
     544:	95 95       	asr	r25
     546:	87 95       	ror	r24
     548:	0a 94       	dec	r0
     54a:	e2 f7       	brpl	.-8      	; 0x544 <hc_sr04_takeMeasurement+0xc6>
     54c:	80 fd       	sbrc	r24, 0
     54e:	e6 cf       	rjmp	.-52     	; 0x51c <hc_sr04_takeMeasurement+0x9e>
		// Check for timer overflow (24ms)
		if (TCNT1 >= (F_CPU / 256) * 0.024) {
			break; // Timer overflowed
		}
	}
	cnt = TCNT1; // Save the duration of the high signal
     550:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
     554:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>

	TCCR1B = TCCR1B_state; // Restore TCCR1B state
     558:	10 93 81 00 	sts	0x0081, r17	; 0x800081 <__TEXT_REGION_LENGTH__+0x7c0081>

	// Distance calculation based on the duration of the high signal
	cnt = cnt * 343UL / 125UL;
     55c:	a7 e5       	ldi	r26, 0x57	; 87
     55e:	b1 e0       	ldi	r27, 0x01	; 1
     560:	0e 94 c7 1b 	call	0x378e	; 0x378e <__umulhisi3>
     564:	2d e7       	ldi	r18, 0x7D	; 125
     566:	30 e0       	ldi	r19, 0x00	; 0
     568:	40 e0       	ldi	r20, 0x00	; 0
     56a:	50 e0       	ldi	r21, 0x00	; 0
     56c:	0e 94 9d 1b 	call	0x373a	; 0x373a <__udivmodsi4>

	return cnt;
     570:	c9 01       	movw	r24, r18
     572:	02 c0       	rjmp	.+4      	; 0x578 <hc_sr04_takeMeasurement+0xfa>
	
	TCNT1 = 0; // Reset the timer
	while (!(PIN_Echo & (1 << echoPin))) {
		// Check for timeout (100ms)
		if (TCNT1 >= (F_CPU / 256) * 0.1) {
			return 0; // Sensor is not working
     574:	80 e0       	ldi	r24, 0x00	; 0
     576:	90 e0       	ldi	r25, 0x00	; 0

	// Distance calculation based on the duration of the high signal
	cnt = cnt * 343UL / 125UL;

	return cnt;
}
     578:	df 91       	pop	r29
     57a:	cf 91       	pop	r28
     57c:	1f 91       	pop	r17
     57e:	0f 91       	pop	r16
     580:	08 95       	ret

00000582 <trace_init>:
	 #if (configUseR2RTrace == 1)
	 #ifdef HAL_DEFS_H_

	 #else
		// Used on VIA MEGA Shield rev. 2.0.0
		DDRK |= _BV(DDK0) | _BV(DDK1) | _BV(DDK2) | _BV(DDK3);
     582:	e7 e0       	ldi	r30, 0x07	; 7
     584:	f1 e0       	ldi	r31, 0x01	; 1
     586:	80 81       	ld	r24, Z
     588:	8f 60       	ori	r24, 0x0F	; 15
     58a:	80 83       	st	Z, r24
     58c:	08 95       	ret

0000058e <task_switch_in>:
	void task_switch_in(uint8_t task_no) {
		 #ifdef HAL_DEFS_H_

		 #else
		 // Used on VIA MEGA Shield rev. 2.0.0
		 PORTK &= 0b11110000;
     58e:	e8 e0       	ldi	r30, 0x08	; 8
     590:	f1 e0       	ldi	r31, 0x01	; 1
     592:	90 81       	ld	r25, Z
     594:	90 7f       	andi	r25, 0xF0	; 240
     596:	90 83       	st	Z, r25
		 PORTK |= (task_no & 0b00001111);
     598:	90 81       	ld	r25, Z
     59a:	8f 70       	andi	r24, 0x0F	; 15
     59c:	98 2b       	or	r25, r24
     59e:	90 83       	st	Z, r25
     5a0:	08 95       	ret

000005a2 <task_switch_out>:
	void task_switch_out(uint8_t task_no) {
		#ifdef HAL_DEFS_H_

		#else
		// Used on VIA MEGA Shield rev. 2.0.0
		PORTK &= 0b11110000;
     5a2:	e8 e0       	ldi	r30, 0x08	; 8
     5a4:	f1 e0       	ldi	r31, 0x01	; 1
     5a6:	80 81       	ld	r24, Z
     5a8:	80 7f       	andi	r24, 0xF0	; 240
     5aa:	80 83       	st	Z, r24
     5ac:	08 95       	ret

000005ae <prvHeapInit>:

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     5ae:	e0 e5       	ldi	r30, 0x50	; 80
     5b0:	f3 e0       	ldi	r31, 0x03	; 3
     5b2:	a4 e5       	ldi	r26, 0x54	; 84
     5b4:	b3 e0       	ldi	r27, 0x03	; 3
     5b6:	b1 83       	std	Z+1, r27	; 0x01
     5b8:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
     5ba:	13 82       	std	Z+3, r1	; 0x03
     5bc:	12 82       	std	Z+2, r1	; 0x02

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
     5be:	ec ef       	ldi	r30, 0xFC	; 252
     5c0:	f0 e1       	ldi	r31, 0x10	; 16
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
     5c2:	f0 93 4f 03 	sts	0x034F, r31	; 0x80034f <pxEnd+0x1>
     5c6:	e0 93 4e 03 	sts	0x034E, r30	; 0x80034e <pxEnd>
    pxEnd->xBlockSize = 0;
     5ca:	13 82       	std	Z+3, r1	; 0x03
     5cc:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
     5ce:	11 82       	std	Z+1, r1	; 0x01
     5d0:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     5d2:	88 ea       	ldi	r24, 0xA8	; 168
     5d4:	9d e0       	ldi	r25, 0x0D	; 13
     5d6:	13 96       	adiw	r26, 0x03	; 3
     5d8:	9c 93       	st	X, r25
     5da:	8e 93       	st	-X, r24
     5dc:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     5de:	ed 93       	st	X+, r30
     5e0:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     5e2:	90 93 4b 03 	sts	0x034B, r25	; 0x80034b <xMinimumEverFreeBytesRemaining+0x1>
     5e6:	80 93 4a 03 	sts	0x034A, r24	; 0x80034a <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     5ea:	90 93 4d 03 	sts	0x034D, r25	; 0x80034d <xFreeBytesRemaining+0x1>
     5ee:	80 93 4c 03 	sts	0x034C, r24	; 0x80034c <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     5f2:	80 e0       	ldi	r24, 0x00	; 0
     5f4:	90 e8       	ldi	r25, 0x80	; 128
     5f6:	90 93 45 03 	sts	0x0345, r25	; 0x800345 <xBlockAllocatedBit+0x1>
     5fa:	80 93 44 03 	sts	0x0344, r24	; 0x800344 <xBlockAllocatedBit>
     5fe:	08 95       	ret

00000600 <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
     600:	cf 93       	push	r28
     602:	df 93       	push	r29
     604:	ec 01       	movw	r28, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     606:	a0 e5       	ldi	r26, 0x50	; 80
     608:	b3 e0       	ldi	r27, 0x03	; 3
     60a:	01 c0       	rjmp	.+2      	; 0x60e <prvInsertBlockIntoFreeList+0xe>
     60c:	df 01       	movw	r26, r30
     60e:	ed 91       	ld	r30, X+
     610:	fc 91       	ld	r31, X
     612:	11 97       	sbiw	r26, 0x01	; 1
     614:	ec 17       	cp	r30, r28
     616:	fd 07       	cpc	r31, r29
     618:	c8 f3       	brcs	.-14     	; 0x60c <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     61a:	12 96       	adiw	r26, 0x02	; 2
     61c:	8d 91       	ld	r24, X+
     61e:	9c 91       	ld	r25, X
     620:	13 97       	sbiw	r26, 0x03	; 3
     622:	9d 01       	movw	r18, r26
     624:	28 0f       	add	r18, r24
     626:	39 1f       	adc	r19, r25
     628:	c2 17       	cp	r28, r18
     62a:	d3 07       	cpc	r29, r19
     62c:	49 f4       	brne	.+18     	; 0x640 <prvInsertBlockIntoFreeList+0x40>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     62e:	2a 81       	ldd	r18, Y+2	; 0x02
     630:	3b 81       	ldd	r19, Y+3	; 0x03
     632:	82 0f       	add	r24, r18
     634:	93 1f       	adc	r25, r19
     636:	13 96       	adiw	r26, 0x03	; 3
     638:	9c 93       	st	X, r25
     63a:	8e 93       	st	-X, r24
     63c:	12 97       	sbiw	r26, 0x02	; 2
        pxBlockToInsert = pxIterator;
     63e:	ed 01       	movw	r28, r26

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     640:	8a 81       	ldd	r24, Y+2	; 0x02
     642:	9b 81       	ldd	r25, Y+3	; 0x03
     644:	9e 01       	movw	r18, r28
     646:	28 0f       	add	r18, r24
     648:	39 1f       	adc	r19, r25
     64a:	e2 17       	cp	r30, r18
     64c:	f3 07       	cpc	r31, r19
     64e:	c1 f4       	brne	.+48     	; 0x680 <prvInsertBlockIntoFreeList+0x80>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
     650:	20 91 4e 03 	lds	r18, 0x034E	; 0x80034e <pxEnd>
     654:	30 91 4f 03 	lds	r19, 0x034F	; 0x80034f <pxEnd+0x1>
     658:	e2 17       	cp	r30, r18
     65a:	f3 07       	cpc	r31, r19
     65c:	71 f0       	breq	.+28     	; 0x67a <prvInsertBlockIntoFreeList+0x7a>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     65e:	22 81       	ldd	r18, Z+2	; 0x02
     660:	33 81       	ldd	r19, Z+3	; 0x03
     662:	82 0f       	add	r24, r18
     664:	93 1f       	adc	r25, r19
     666:	9b 83       	std	Y+3, r25	; 0x03
     668:	8a 83       	std	Y+2, r24	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     66a:	ed 91       	ld	r30, X+
     66c:	fc 91       	ld	r31, X
     66e:	11 97       	sbiw	r26, 0x01	; 1
     670:	80 81       	ld	r24, Z
     672:	91 81       	ldd	r25, Z+1	; 0x01
     674:	99 83       	std	Y+1, r25	; 0x01
     676:	88 83       	st	Y, r24
     678:	05 c0       	rjmp	.+10     	; 0x684 <prvInsertBlockIntoFreeList+0x84>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
     67a:	39 83       	std	Y+1, r19	; 0x01
     67c:	28 83       	st	Y, r18
     67e:	02 c0       	rjmp	.+4      	; 0x684 <prvInsertBlockIntoFreeList+0x84>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     680:	f9 83       	std	Y+1, r31	; 0x01
     682:	e8 83       	st	Y, r30

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
     684:	ca 17       	cp	r28, r26
     686:	db 07       	cpc	r29, r27
     688:	11 f0       	breq	.+4      	; 0x68e <prvInsertBlockIntoFreeList+0x8e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
     68a:	cd 93       	st	X+, r28
     68c:	dc 93       	st	X, r29
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
     68e:	df 91       	pop	r29
     690:	cf 91       	pop	r28
     692:	08 95       	ret

00000694 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     694:	ef 92       	push	r14
     696:	ff 92       	push	r15
     698:	0f 93       	push	r16
     69a:	1f 93       	push	r17
     69c:	cf 93       	push	r28
     69e:	df 93       	push	r29
     6a0:	8c 01       	movw	r16, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     6a2:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
     6a6:	80 91 4e 03 	lds	r24, 0x034E	; 0x80034e <pxEnd>
     6aa:	90 91 4f 03 	lds	r25, 0x034F	; 0x80034f <pxEnd+0x1>
     6ae:	89 2b       	or	r24, r25
     6b0:	09 f4       	brne	.+2      	; 0x6b4 <pvPortMalloc+0x20>
        {
            prvHeapInit();
     6b2:	7d df       	rcall	.-262    	; 0x5ae <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     6b4:	80 91 44 03 	lds	r24, 0x0344	; 0x800344 <xBlockAllocatedBit>
     6b8:	90 91 45 03 	lds	r25, 0x0345	; 0x800345 <xBlockAllocatedBit+0x1>
     6bc:	80 23       	and	r24, r16
     6be:	91 23       	and	r25, r17
     6c0:	89 2b       	or	r24, r25
     6c2:	09 f0       	breq	.+2      	; 0x6c6 <pvPortMalloc+0x32>
     6c4:	76 c0       	rjmp	.+236    	; 0x7b2 <pvPortMalloc+0x11e>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     6c6:	01 15       	cp	r16, r1
     6c8:	11 05       	cpc	r17, r1
     6ca:	49 f0       	breq	.+18     	; 0x6de <pvPortMalloc+0x4a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
     6cc:	c8 01       	movw	r24, r16
     6ce:	04 96       	adiw	r24, 0x04	; 4
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     6d0:	08 17       	cp	r16, r24
     6d2:	19 07       	cpc	r17, r25
     6d4:	18 f0       	brcs	.+6      	; 0x6dc <pvPortMalloc+0x48>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
     6d6:	00 e0       	ldi	r16, 0x00	; 0
     6d8:	10 e0       	ldi	r17, 0x00	; 0
     6da:	01 c0       	rjmp	.+2      	; 0x6de <pvPortMalloc+0x4a>
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
            {
                xWantedSize += xHeapStructSize;
     6dc:	8c 01       	movw	r16, r24
            else 
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     6de:	01 15       	cp	r16, r1
     6e0:	11 05       	cpc	r17, r1
     6e2:	09 f4       	brne	.+2      	; 0x6e6 <pvPortMalloc+0x52>
     6e4:	69 c0       	rjmp	.+210    	; 0x7b8 <pvPortMalloc+0x124>
     6e6:	80 91 4c 03 	lds	r24, 0x034C	; 0x80034c <xFreeBytesRemaining>
     6ea:	90 91 4d 03 	lds	r25, 0x034D	; 0x80034d <xFreeBytesRemaining+0x1>
     6ee:	80 17       	cp	r24, r16
     6f0:	91 07       	cpc	r25, r17
     6f2:	08 f4       	brcc	.+2      	; 0x6f6 <pvPortMalloc+0x62>
     6f4:	64 c0       	rjmp	.+200    	; 0x7be <pvPortMalloc+0x12a>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
     6f6:	c0 91 50 03 	lds	r28, 0x0350	; 0x800350 <xStart>
     6fa:	d0 91 51 03 	lds	r29, 0x0351	; 0x800351 <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
     6fe:	e0 e5       	ldi	r30, 0x50	; 80
     700:	f3 e0       	ldi	r31, 0x03	; 3
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     702:	02 c0       	rjmp	.+4      	; 0x708 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
     704:	fe 01       	movw	r30, r28
                    pxBlock = pxBlock->pxNextFreeBlock;
     706:	ec 01       	movw	r28, r24
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     708:	8a 81       	ldd	r24, Y+2	; 0x02
     70a:	9b 81       	ldd	r25, Y+3	; 0x03
     70c:	80 17       	cp	r24, r16
     70e:	91 07       	cpc	r25, r17
     710:	20 f4       	brcc	.+8      	; 0x71a <pvPortMalloc+0x86>
     712:	88 81       	ld	r24, Y
     714:	99 81       	ldd	r25, Y+1	; 0x01
     716:	00 97       	sbiw	r24, 0x00	; 0
     718:	a9 f7       	brne	.-22     	; 0x704 <pvPortMalloc+0x70>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
     71a:	80 91 4e 03 	lds	r24, 0x034E	; 0x80034e <pxEnd>
     71e:	90 91 4f 03 	lds	r25, 0x034F	; 0x80034f <pxEnd+0x1>
     722:	c8 17       	cp	r28, r24
     724:	d9 07       	cpc	r29, r25
     726:	09 f4       	brne	.+2      	; 0x72a <pvPortMalloc+0x96>
     728:	4d c0       	rjmp	.+154    	; 0x7c4 <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     72a:	e0 80       	ld	r14, Z
     72c:	f1 80       	ldd	r15, Z+1	; 0x01
     72e:	84 e0       	ldi	r24, 0x04	; 4
     730:	e8 0e       	add	r14, r24
     732:	f1 1c       	adc	r15, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     734:	88 81       	ld	r24, Y
     736:	99 81       	ldd	r25, Y+1	; 0x01
     738:	91 83       	std	Z+1, r25	; 0x01
     73a:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     73c:	2a 81       	ldd	r18, Y+2	; 0x02
     73e:	3b 81       	ldd	r19, Y+3	; 0x03
     740:	20 1b       	sub	r18, r16
     742:	31 0b       	sbc	r19, r17
     744:	29 30       	cpi	r18, 0x09	; 9
     746:	31 05       	cpc	r19, r1
     748:	48 f0       	brcs	.+18     	; 0x75c <pvPortMalloc+0xc8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     74a:	ce 01       	movw	r24, r28
     74c:	80 0f       	add	r24, r16
     74e:	91 1f       	adc	r25, r17
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     750:	fc 01       	movw	r30, r24
     752:	33 83       	std	Z+3, r19	; 0x03
     754:	22 83       	std	Z+2, r18	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
     756:	1b 83       	std	Y+3, r17	; 0x03

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
     758:	0a 83       	std	Y+2, r16	; 0x02
     75a:	52 df       	rcall	.-348    	; 0x600 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
     75c:	2a 81       	ldd	r18, Y+2	; 0x02
     75e:	3b 81       	ldd	r19, Y+3	; 0x03
     760:	80 91 4c 03 	lds	r24, 0x034C	; 0x80034c <xFreeBytesRemaining>
     764:	90 91 4d 03 	lds	r25, 0x034D	; 0x80034d <xFreeBytesRemaining+0x1>
     768:	82 1b       	sub	r24, r18
     76a:	93 0b       	sbc	r25, r19
     76c:	90 93 4d 03 	sts	0x034D, r25	; 0x80034d <xFreeBytesRemaining+0x1>
     770:	80 93 4c 03 	sts	0x034C, r24	; 0x80034c <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     774:	40 91 4a 03 	lds	r20, 0x034A	; 0x80034a <xMinimumEverFreeBytesRemaining>
     778:	50 91 4b 03 	lds	r21, 0x034B	; 0x80034b <xMinimumEverFreeBytesRemaining+0x1>
     77c:	84 17       	cp	r24, r20
     77e:	95 07       	cpc	r25, r21
     780:	20 f4       	brcc	.+8      	; 0x78a <pvPortMalloc+0xf6>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     782:	90 93 4b 03 	sts	0x034B, r25	; 0x80034b <xMinimumEverFreeBytesRemaining+0x1>
     786:	80 93 4a 03 	sts	0x034A, r24	; 0x80034a <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
     78a:	80 91 44 03 	lds	r24, 0x0344	; 0x800344 <xBlockAllocatedBit>
     78e:	90 91 45 03 	lds	r25, 0x0345	; 0x800345 <xBlockAllocatedBit+0x1>
     792:	28 2b       	or	r18, r24
     794:	39 2b       	or	r19, r25
     796:	3b 83       	std	Y+3, r19	; 0x03
     798:	2a 83       	std	Y+2, r18	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
     79a:	19 82       	std	Y+1, r1	; 0x01
     79c:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
     79e:	80 91 48 03 	lds	r24, 0x0348	; 0x800348 <xNumberOfSuccessfulAllocations>
     7a2:	90 91 49 03 	lds	r25, 0x0349	; 0x800349 <xNumberOfSuccessfulAllocations+0x1>
     7a6:	01 96       	adiw	r24, 0x01	; 1
     7a8:	90 93 49 03 	sts	0x0349, r25	; 0x800349 <xNumberOfSuccessfulAllocations+0x1>
     7ac:	80 93 48 03 	sts	0x0348, r24	; 0x800348 <xNumberOfSuccessfulAllocations>
     7b0:	0b c0       	rjmp	.+22     	; 0x7c8 <pvPortMalloc+0x134>
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
     7b2:	e1 2c       	mov	r14, r1
     7b4:	f1 2c       	mov	r15, r1
     7b6:	08 c0       	rjmp	.+16     	; 0x7c8 <pvPortMalloc+0x134>
     7b8:	e1 2c       	mov	r14, r1
     7ba:	f1 2c       	mov	r15, r1
     7bc:	05 c0       	rjmp	.+10     	; 0x7c8 <pvPortMalloc+0x134>
     7be:	e1 2c       	mov	r14, r1
     7c0:	f1 2c       	mov	r15, r1
     7c2:	02 c0       	rjmp	.+4      	; 0x7c8 <pvPortMalloc+0x134>
     7c4:	e1 2c       	mov	r14, r1
     7c6:	f1 2c       	mov	r15, r1
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     7c8:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
     7cc:	e1 14       	cp	r14, r1
     7ce:	f1 04       	cpc	r15, r1
     7d0:	11 f4       	brne	.+4      	; 0x7d6 <pvPortMalloc+0x142>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
     7d2:	0e 94 85 14 	call	0x290a	; 0x290a <vApplicationMallocFailedHook>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
     7d6:	c7 01       	movw	r24, r14
     7d8:	df 91       	pop	r29
     7da:	cf 91       	pop	r28
     7dc:	1f 91       	pop	r17
     7de:	0f 91       	pop	r16
     7e0:	ff 90       	pop	r15
     7e2:	ef 90       	pop	r14
     7e4:	08 95       	ret

000007e6 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     7e6:	0f 93       	push	r16
     7e8:	1f 93       	push	r17
     7ea:	cf 93       	push	r28
     7ec:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     7ee:	00 97       	sbiw	r24, 0x00	; 0
     7f0:	89 f1       	breq	.+98     	; 0x854 <vPortFree+0x6e>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
     7f2:	ec 01       	movw	r28, r24
     7f4:	24 97       	sbiw	r28, 0x04	; 4

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     7f6:	4a 81       	ldd	r20, Y+2	; 0x02
     7f8:	5b 81       	ldd	r21, Y+3	; 0x03
     7fa:	20 91 44 03 	lds	r18, 0x0344	; 0x800344 <xBlockAllocatedBit>
     7fe:	30 91 45 03 	lds	r19, 0x0345	; 0x800345 <xBlockAllocatedBit+0x1>
     802:	ba 01       	movw	r22, r20
     804:	62 23       	and	r22, r18
     806:	73 23       	and	r23, r19
     808:	67 2b       	or	r22, r23
     80a:	21 f1       	breq	.+72     	; 0x854 <vPortFree+0x6e>
        {
            if( pxLink->pxNextFreeBlock == NULL )
     80c:	68 81       	ld	r22, Y
     80e:	79 81       	ldd	r23, Y+1	; 0x01
     810:	67 2b       	or	r22, r23
     812:	01 f5       	brne	.+64     	; 0x854 <vPortFree+0x6e>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
     814:	20 95       	com	r18
     816:	30 95       	com	r19
     818:	24 23       	and	r18, r20
     81a:	35 23       	and	r19, r21
     81c:	3b 83       	std	Y+3, r19	; 0x03
     81e:	2a 83       	std	Y+2, r18	; 0x02

                vTaskSuspendAll();
     820:	cb d7       	rcall	.+3990   	; 0x17b8 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
     822:	8a 81       	ldd	r24, Y+2	; 0x02
     824:	9b 81       	ldd	r25, Y+3	; 0x03
     826:	20 91 4c 03 	lds	r18, 0x034C	; 0x80034c <xFreeBytesRemaining>
     82a:	30 91 4d 03 	lds	r19, 0x034D	; 0x80034d <xFreeBytesRemaining+0x1>
     82e:	82 0f       	add	r24, r18
     830:	93 1f       	adc	r25, r19
     832:	90 93 4d 03 	sts	0x034D, r25	; 0x80034d <xFreeBytesRemaining+0x1>
     836:	80 93 4c 03 	sts	0x034C, r24	; 0x80034c <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     83a:	ce 01       	movw	r24, r28
     83c:	e1 de       	rcall	.-574    	; 0x600 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
     83e:	80 91 46 03 	lds	r24, 0x0346	; 0x800346 <xNumberOfSuccessfulFrees>
     842:	90 91 47 03 	lds	r25, 0x0347	; 0x800347 <xNumberOfSuccessfulFrees+0x1>
     846:	01 96       	adiw	r24, 0x01	; 1
     848:	90 93 47 03 	sts	0x0347, r25	; 0x800347 <xNumberOfSuccessfulFrees+0x1>
     84c:	80 93 46 03 	sts	0x0346, r24	; 0x800346 <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
     850:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
     854:	df 91       	pop	r29
     856:	cf 91       	pop	r28
     858:	1f 91       	pop	r17
     85a:	0f 91       	pop	r16
     85c:	08 95       	ret

0000085e <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     85e:	fc 01       	movw	r30, r24
     860:	03 96       	adiw	r24, 0x03	; 3
     862:	92 83       	std	Z+2, r25	; 0x02
     864:	81 83       	std	Z+1, r24	; 0x01
     866:	4f ef       	ldi	r20, 0xFF	; 255
     868:	5f ef       	ldi	r21, 0xFF	; 255
     86a:	ba 01       	movw	r22, r20
     86c:	43 83       	std	Z+3, r20	; 0x03
     86e:	54 83       	std	Z+4, r21	; 0x04
     870:	65 83       	std	Z+5, r22	; 0x05
     872:	76 83       	std	Z+6, r23	; 0x06
     874:	90 87       	std	Z+8, r25	; 0x08
     876:	87 83       	std	Z+7, r24	; 0x07
     878:	92 87       	std	Z+10, r25	; 0x0a
     87a:	81 87       	std	Z+9, r24	; 0x09
     87c:	10 82       	st	Z, r1
     87e:	08 95       	ret

00000880 <vListInitialiseItem>:
     880:	fc 01       	movw	r30, r24
     882:	13 86       	std	Z+11, r1	; 0x0b
     884:	12 86       	std	Z+10, r1	; 0x0a
     886:	08 95       	ret

00000888 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     888:	0f 93       	push	r16
     88a:	1f 93       	push	r17
     88c:	cf 93       	push	r28
     88e:	df 93       	push	r29
     890:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     892:	08 81       	ld	r16, Y
     894:	19 81       	ldd	r17, Y+1	; 0x01
     896:	2a 81       	ldd	r18, Y+2	; 0x02
     898:	3b 81       	ldd	r19, Y+3	; 0x03
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     89a:	0f 3f       	cpi	r16, 0xFF	; 255
     89c:	4f ef       	ldi	r20, 0xFF	; 255
     89e:	14 07       	cpc	r17, r20
     8a0:	24 07       	cpc	r18, r20
     8a2:	34 07       	cpc	r19, r20
     8a4:	21 f4       	brne	.+8      	; 0x8ae <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     8a6:	fc 01       	movw	r30, r24
     8a8:	a1 85       	ldd	r26, Z+9	; 0x09
     8aa:	b2 85       	ldd	r27, Z+10	; 0x0a
     8ac:	11 c0       	rjmp	.+34     	; 0x8d0 <vListInsert+0x48>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     8ae:	dc 01       	movw	r26, r24
     8b0:	13 96       	adiw	r26, 0x03	; 3
     8b2:	01 c0       	rjmp	.+2      	; 0x8b6 <vListInsert+0x2e>
     8b4:	df 01       	movw	r26, r30
     8b6:	14 96       	adiw	r26, 0x04	; 4
     8b8:	ed 91       	ld	r30, X+
     8ba:	fc 91       	ld	r31, X
     8bc:	15 97       	sbiw	r26, 0x05	; 5
     8be:	40 81       	ld	r20, Z
     8c0:	51 81       	ldd	r21, Z+1	; 0x01
     8c2:	62 81       	ldd	r22, Z+2	; 0x02
     8c4:	73 81       	ldd	r23, Z+3	; 0x03
     8c6:	04 17       	cp	r16, r20
     8c8:	15 07       	cpc	r17, r21
     8ca:	26 07       	cpc	r18, r22
     8cc:	37 07       	cpc	r19, r23
     8ce:	90 f7       	brcc	.-28     	; 0x8b4 <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     8d0:	14 96       	adiw	r26, 0x04	; 4
     8d2:	ed 91       	ld	r30, X+
     8d4:	fc 91       	ld	r31, X
     8d6:	15 97       	sbiw	r26, 0x05	; 5
     8d8:	fd 83       	std	Y+5, r31	; 0x05
     8da:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     8dc:	d7 83       	std	Z+7, r29	; 0x07
     8de:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
     8e0:	bf 83       	std	Y+7, r27	; 0x07
     8e2:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
     8e4:	15 96       	adiw	r26, 0x05	; 5
     8e6:	dc 93       	st	X, r29
     8e8:	ce 93       	st	-X, r28
     8ea:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     8ec:	9b 87       	std	Y+11, r25	; 0x0b
     8ee:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
     8f0:	fc 01       	movw	r30, r24
     8f2:	20 81       	ld	r18, Z
     8f4:	2f 5f       	subi	r18, 0xFF	; 255
     8f6:	20 83       	st	Z, r18
}
     8f8:	df 91       	pop	r29
     8fa:	cf 91       	pop	r28
     8fc:	1f 91       	pop	r17
     8fe:	0f 91       	pop	r16
     900:	08 95       	ret

00000902 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     902:	cf 93       	push	r28
     904:	df 93       	push	r29
     906:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     908:	a2 85       	ldd	r26, Z+10	; 0x0a
     90a:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     90c:	c4 81       	ldd	r28, Z+4	; 0x04
     90e:	d5 81       	ldd	r29, Z+5	; 0x05
     910:	86 81       	ldd	r24, Z+6	; 0x06
     912:	97 81       	ldd	r25, Z+7	; 0x07
     914:	9f 83       	std	Y+7, r25	; 0x07
     916:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     918:	c6 81       	ldd	r28, Z+6	; 0x06
     91a:	d7 81       	ldd	r29, Z+7	; 0x07
     91c:	84 81       	ldd	r24, Z+4	; 0x04
     91e:	95 81       	ldd	r25, Z+5	; 0x05
     920:	9d 83       	std	Y+5, r25	; 0x05
     922:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     924:	11 96       	adiw	r26, 0x01	; 1
     926:	8d 91       	ld	r24, X+
     928:	9c 91       	ld	r25, X
     92a:	12 97       	sbiw	r26, 0x02	; 2
     92c:	e8 17       	cp	r30, r24
     92e:	f9 07       	cpc	r31, r25
     930:	31 f4       	brne	.+12     	; 0x93e <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     932:	86 81       	ldd	r24, Z+6	; 0x06
     934:	97 81       	ldd	r25, Z+7	; 0x07
     936:	12 96       	adiw	r26, 0x02	; 2
     938:	9c 93       	st	X, r25
     93a:	8e 93       	st	-X, r24
     93c:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     93e:	13 86       	std	Z+11, r1	; 0x0b
     940:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
     942:	8c 91       	ld	r24, X
     944:	81 50       	subi	r24, 0x01	; 1
     946:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     948:	8c 91       	ld	r24, X
}
     94a:	df 91       	pop	r29
     94c:	cf 91       	pop	r28
     94e:	08 95       	ret

00000950 <prvSetupTimerInterrupt>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
     950:	a8 95       	wdr
     952:	90 ec       	ldi	r25, 0xC0	; 192
     954:	88 e1       	ldi	r24, 0x18	; 24
     956:	0f b6       	in	r0, 0x3f	; 63
     958:	f8 94       	cli
     95a:	a8 95       	wdr
     95c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     960:	0f be       	out	0x3f, r0	; 63
     962:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     966:	08 95       	ret

00000968 <pxPortInitialiseStack>:
     968:	fc 01       	movw	r30, r24
     96a:	60 83       	st	Z, r22
     96c:	31 97       	sbiw	r30, 0x01	; 1
     96e:	70 83       	st	Z, r23
     970:	31 97       	sbiw	r30, 0x01	; 1
     972:	10 82       	st	Z, r1
     974:	31 97       	sbiw	r30, 0x01	; 1
     976:	10 82       	st	Z, r1
     978:	31 97       	sbiw	r30, 0x01	; 1
     97a:	20 e8       	ldi	r18, 0x80	; 128
     97c:	20 83       	st	Z, r18
     97e:	31 97       	sbiw	r30, 0x01	; 1
     980:	10 82       	st	Z, r1
     982:	31 97       	sbiw	r30, 0x01	; 1
     984:	10 82       	st	Z, r1
     986:	31 97       	sbiw	r30, 0x01	; 1
     988:	10 82       	st	Z, r1
     98a:	77 97       	sbiw	r30, 0x17	; 23
     98c:	40 83       	st	Z, r20
     98e:	31 97       	sbiw	r30, 0x01	; 1
     990:	50 83       	st	Z, r21
     992:	86 97       	sbiw	r24, 0x26	; 38
     994:	08 95       	ret

00000996 <xPortStartScheduler>:
     996:	dc df       	rcall	.-72     	; 0x950 <prvSetupTimerInterrupt>
     998:	a0 91 bf 11 	lds	r26, 0x11BF	; 0x8011bf <pxCurrentTCB>
     99c:	b0 91 c0 11 	lds	r27, 0x11C0	; 0x8011c0 <pxCurrentTCB+0x1>
     9a0:	cd 91       	ld	r28, X+
     9a2:	cd bf       	out	0x3d, r28	; 61
     9a4:	dd 91       	ld	r29, X+
     9a6:	de bf       	out	0x3e, r29	; 62
     9a8:	ff 91       	pop	r31
     9aa:	ef 91       	pop	r30
     9ac:	df 91       	pop	r29
     9ae:	cf 91       	pop	r28
     9b0:	bf 91       	pop	r27
     9b2:	af 91       	pop	r26
     9b4:	9f 91       	pop	r25
     9b6:	8f 91       	pop	r24
     9b8:	7f 91       	pop	r23
     9ba:	6f 91       	pop	r22
     9bc:	5f 91       	pop	r21
     9be:	4f 91       	pop	r20
     9c0:	3f 91       	pop	r19
     9c2:	2f 91       	pop	r18
     9c4:	1f 91       	pop	r17
     9c6:	0f 91       	pop	r16
     9c8:	ff 90       	pop	r15
     9ca:	ef 90       	pop	r14
     9cc:	df 90       	pop	r13
     9ce:	cf 90       	pop	r12
     9d0:	bf 90       	pop	r11
     9d2:	af 90       	pop	r10
     9d4:	9f 90       	pop	r9
     9d6:	8f 90       	pop	r8
     9d8:	7f 90       	pop	r7
     9da:	6f 90       	pop	r6
     9dc:	5f 90       	pop	r5
     9de:	4f 90       	pop	r4
     9e0:	3f 90       	pop	r3
     9e2:	2f 90       	pop	r2
     9e4:	1f 90       	pop	r1
     9e6:	0f 90       	pop	r0
     9e8:	0c be       	out	0x3c, r0	; 60
     9ea:	0f 90       	pop	r0
     9ec:	0b be       	out	0x3b, r0	; 59
     9ee:	0f 90       	pop	r0
     9f0:	0f be       	out	0x3f, r0	; 63
     9f2:	0f 90       	pop	r0
     9f4:	08 95       	ret
     9f6:	81 e0       	ldi	r24, 0x01	; 1
     9f8:	08 95       	ret

000009fa <vPortYield>:
     9fa:	0f 92       	push	r0
     9fc:	0f b6       	in	r0, 0x3f	; 63
     9fe:	f8 94       	cli
     a00:	0f 92       	push	r0
     a02:	0b b6       	in	r0, 0x3b	; 59
     a04:	0f 92       	push	r0
     a06:	0c b6       	in	r0, 0x3c	; 60
     a08:	0f 92       	push	r0
     a0a:	1f 92       	push	r1
     a0c:	11 24       	eor	r1, r1
     a0e:	2f 92       	push	r2
     a10:	3f 92       	push	r3
     a12:	4f 92       	push	r4
     a14:	5f 92       	push	r5
     a16:	6f 92       	push	r6
     a18:	7f 92       	push	r7
     a1a:	8f 92       	push	r8
     a1c:	9f 92       	push	r9
     a1e:	af 92       	push	r10
     a20:	bf 92       	push	r11
     a22:	cf 92       	push	r12
     a24:	df 92       	push	r13
     a26:	ef 92       	push	r14
     a28:	ff 92       	push	r15
     a2a:	0f 93       	push	r16
     a2c:	1f 93       	push	r17
     a2e:	2f 93       	push	r18
     a30:	3f 93       	push	r19
     a32:	4f 93       	push	r20
     a34:	5f 93       	push	r21
     a36:	6f 93       	push	r22
     a38:	7f 93       	push	r23
     a3a:	8f 93       	push	r24
     a3c:	9f 93       	push	r25
     a3e:	af 93       	push	r26
     a40:	bf 93       	push	r27
     a42:	cf 93       	push	r28
     a44:	df 93       	push	r29
     a46:	ef 93       	push	r30
     a48:	ff 93       	push	r31
     a4a:	a0 91 bf 11 	lds	r26, 0x11BF	; 0x8011bf <pxCurrentTCB>
     a4e:	b0 91 c0 11 	lds	r27, 0x11C0	; 0x8011c0 <pxCurrentTCB+0x1>
     a52:	0d b6       	in	r0, 0x3d	; 61
     a54:	0d 92       	st	X+, r0
     a56:	0e b6       	in	r0, 0x3e	; 62
     a58:	0d 92       	st	X+, r0
     a5a:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <vTaskSwitchContext>
     a5e:	a0 91 bf 11 	lds	r26, 0x11BF	; 0x8011bf <pxCurrentTCB>
     a62:	b0 91 c0 11 	lds	r27, 0x11C0	; 0x8011c0 <pxCurrentTCB+0x1>
     a66:	cd 91       	ld	r28, X+
     a68:	cd bf       	out	0x3d, r28	; 61
     a6a:	dd 91       	ld	r29, X+
     a6c:	de bf       	out	0x3e, r29	; 62
     a6e:	ff 91       	pop	r31
     a70:	ef 91       	pop	r30
     a72:	df 91       	pop	r29
     a74:	cf 91       	pop	r28
     a76:	bf 91       	pop	r27
     a78:	af 91       	pop	r26
     a7a:	9f 91       	pop	r25
     a7c:	8f 91       	pop	r24
     a7e:	7f 91       	pop	r23
     a80:	6f 91       	pop	r22
     a82:	5f 91       	pop	r21
     a84:	4f 91       	pop	r20
     a86:	3f 91       	pop	r19
     a88:	2f 91       	pop	r18
     a8a:	1f 91       	pop	r17
     a8c:	0f 91       	pop	r16
     a8e:	ff 90       	pop	r15
     a90:	ef 90       	pop	r14
     a92:	df 90       	pop	r13
     a94:	cf 90       	pop	r12
     a96:	bf 90       	pop	r11
     a98:	af 90       	pop	r10
     a9a:	9f 90       	pop	r9
     a9c:	8f 90       	pop	r8
     a9e:	7f 90       	pop	r7
     aa0:	6f 90       	pop	r6
     aa2:	5f 90       	pop	r5
     aa4:	4f 90       	pop	r4
     aa6:	3f 90       	pop	r3
     aa8:	2f 90       	pop	r2
     aaa:	1f 90       	pop	r1
     aac:	0f 90       	pop	r0
     aae:	0c be       	out	0x3c, r0	; 60
     ab0:	0f 90       	pop	r0
     ab2:	0b be       	out	0x3b, r0	; 59
     ab4:	0f 90       	pop	r0
     ab6:	0f be       	out	0x3f, r0	; 63
     ab8:	0f 90       	pop	r0
     aba:	08 95       	ret

00000abc <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     abc:	0f 92       	push	r0
     abe:	0f b6       	in	r0, 0x3f	; 63
     ac0:	f8 94       	cli
     ac2:	0f 92       	push	r0
     ac4:	0b b6       	in	r0, 0x3b	; 59
     ac6:	0f 92       	push	r0
     ac8:	0c b6       	in	r0, 0x3c	; 60
     aca:	0f 92       	push	r0
     acc:	1f 92       	push	r1
     ace:	11 24       	eor	r1, r1
     ad0:	2f 92       	push	r2
     ad2:	3f 92       	push	r3
     ad4:	4f 92       	push	r4
     ad6:	5f 92       	push	r5
     ad8:	6f 92       	push	r6
     ada:	7f 92       	push	r7
     adc:	8f 92       	push	r8
     ade:	9f 92       	push	r9
     ae0:	af 92       	push	r10
     ae2:	bf 92       	push	r11
     ae4:	cf 92       	push	r12
     ae6:	df 92       	push	r13
     ae8:	ef 92       	push	r14
     aea:	ff 92       	push	r15
     aec:	0f 93       	push	r16
     aee:	1f 93       	push	r17
     af0:	2f 93       	push	r18
     af2:	3f 93       	push	r19
     af4:	4f 93       	push	r20
     af6:	5f 93       	push	r21
     af8:	6f 93       	push	r22
     afa:	7f 93       	push	r23
     afc:	8f 93       	push	r24
     afe:	9f 93       	push	r25
     b00:	af 93       	push	r26
     b02:	bf 93       	push	r27
     b04:	cf 93       	push	r28
     b06:	df 93       	push	r29
     b08:	ef 93       	push	r30
     b0a:	ff 93       	push	r31
     b0c:	a0 91 bf 11 	lds	r26, 0x11BF	; 0x8011bf <pxCurrentTCB>
     b10:	b0 91 c0 11 	lds	r27, 0x11C0	; 0x8011c0 <pxCurrentTCB+0x1>
     b14:	0d b6       	in	r0, 0x3d	; 61
     b16:	0d 92       	st	X+, r0
     b18:	0e b6       	in	r0, 0x3e	; 62
     b1a:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
     b1c:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
     b1e:	60 d6       	rcall	.+3264   	; 0x17e0 <xTaskIncrementTick>
     b20:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     b22:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
     b26:	a0 91 bf 11 	lds	r26, 0x11BF	; 0x8011bf <pxCurrentTCB>
     b2a:	b0 91 c0 11 	lds	r27, 0x11C0	; 0x8011c0 <pxCurrentTCB+0x1>
     b2e:	cd 91       	ld	r28, X+
     b30:	cd bf       	out	0x3d, r28	; 61
     b32:	dd 91       	ld	r29, X+
     b34:	de bf       	out	0x3e, r29	; 62
     b36:	ff 91       	pop	r31
     b38:	ef 91       	pop	r30
     b3a:	df 91       	pop	r29
     b3c:	cf 91       	pop	r28
     b3e:	bf 91       	pop	r27
     b40:	af 91       	pop	r26
     b42:	9f 91       	pop	r25
     b44:	8f 91       	pop	r24
     b46:	7f 91       	pop	r23
     b48:	6f 91       	pop	r22
     b4a:	5f 91       	pop	r21
     b4c:	4f 91       	pop	r20
     b4e:	3f 91       	pop	r19
     b50:	2f 91       	pop	r18
     b52:	1f 91       	pop	r17
     b54:	0f 91       	pop	r16
     b56:	ff 90       	pop	r15
     b58:	ef 90       	pop	r14
     b5a:	df 90       	pop	r13
     b5c:	cf 90       	pop	r12
     b5e:	bf 90       	pop	r11
     b60:	af 90       	pop	r10
     b62:	9f 90       	pop	r9
     b64:	8f 90       	pop	r8
     b66:	7f 90       	pop	r7
     b68:	6f 90       	pop	r6
     b6a:	5f 90       	pop	r5
     b6c:	4f 90       	pop	r4
     b6e:	3f 90       	pop	r3
     b70:	2f 90       	pop	r2
     b72:	1f 90       	pop	r1
     b74:	0f 90       	pop	r0
     b76:	0c be       	out	0x3c, r0	; 60
     b78:	0f 90       	pop	r0
     b7a:	0b be       	out	0x3b, r0	; 59
     b7c:	0f 90       	pop	r0
     b7e:	0f be       	out	0x3f, r0	; 63
     b80:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     b82:	08 95       	ret

00000b84 <__vector_12>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
     b84:	9b df       	rcall	.-202    	; 0xabc <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
     b86:	18 95       	reti

00000b88 <prvGetDisinheritPriorityAfterTimeout>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     b88:	dc 01       	movw	r26, r24
     b8a:	53 96       	adiw	r26, 0x13	; 19
     b8c:	2c 91       	ld	r18, X
     b8e:	53 97       	sbiw	r26, 0x13	; 19
     b90:	22 23       	and	r18, r18
     b92:	41 f0       	breq	.+16     	; 0xba4 <prvGetDisinheritPriorityAfterTimeout+0x1c>
     b94:	5a 96       	adiw	r26, 0x1a	; 26
     b96:	ed 91       	ld	r30, X+
     b98:	fc 91       	ld	r31, X
     b9a:	5b 97       	sbiw	r26, 0x1b	; 27
     b9c:	90 81       	ld	r25, Z
     b9e:	8a e0       	ldi	r24, 0x0A	; 10
     ba0:	89 1b       	sub	r24, r25
     ba2:	08 95       	ret
     ba4:	80 e0       	ldi	r24, 0x00	; 0
     ba6:	08 95       	ret

00000ba8 <prvIsQueueEmpty>:
     ba8:	0f b6       	in	r0, 0x3f	; 63
     baa:	f8 94       	cli
     bac:	0f 92       	push	r0
     bae:	fc 01       	movw	r30, r24
     bb0:	86 8d       	ldd	r24, Z+30	; 0x1e
     bb2:	81 11       	cpse	r24, r1
     bb4:	02 c0       	rjmp	.+4      	; 0xbba <prvIsQueueEmpty+0x12>
     bb6:	81 e0       	ldi	r24, 0x01	; 1
     bb8:	01 c0       	rjmp	.+2      	; 0xbbc <prvIsQueueEmpty+0x14>
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	0f 90       	pop	r0
     bbe:	0f be       	out	0x3f, r0	; 63
     bc0:	08 95       	ret

00000bc2 <prvIsQueueFull>:
     bc2:	0f b6       	in	r0, 0x3f	; 63
     bc4:	f8 94       	cli
     bc6:	0f 92       	push	r0
     bc8:	fc 01       	movw	r30, r24
     bca:	26 8d       	ldd	r18, Z+30	; 0x1e
     bcc:	87 8d       	ldd	r24, Z+31	; 0x1f
     bce:	28 13       	cpse	r18, r24
     bd0:	02 c0       	rjmp	.+4      	; 0xbd6 <prvIsQueueFull+0x14>
     bd2:	81 e0       	ldi	r24, 0x01	; 1
     bd4:	01 c0       	rjmp	.+2      	; 0xbd8 <prvIsQueueFull+0x16>
     bd6:	80 e0       	ldi	r24, 0x00	; 0
     bd8:	0f 90       	pop	r0
     bda:	0f be       	out	0x3f, r0	; 63
     bdc:	08 95       	ret

00000bde <prvCopyDataToQueue>:
     bde:	0f 93       	push	r16
     be0:	1f 93       	push	r17
     be2:	cf 93       	push	r28
     be4:	df 93       	push	r29
     be6:	ec 01       	movw	r28, r24
     be8:	04 2f       	mov	r16, r20
     bea:	1e 8d       	ldd	r17, Y+30	; 0x1e
     bec:	48 a1       	ldd	r20, Y+32	; 0x20
     bee:	41 11       	cpse	r20, r1
     bf0:	0c c0       	rjmp	.+24     	; 0xc0a <prvCopyDataToQueue+0x2c>
     bf2:	88 81       	ld	r24, Y
     bf4:	99 81       	ldd	r25, Y+1	; 0x01
     bf6:	89 2b       	or	r24, r25
     bf8:	09 f0       	breq	.+2      	; 0xbfc <prvCopyDataToQueue+0x1e>
     bfa:	42 c0       	rjmp	.+132    	; 0xc80 <prvCopyDataToQueue+0xa2>
     bfc:	8c 81       	ldd	r24, Y+4	; 0x04
     bfe:	9d 81       	ldd	r25, Y+5	; 0x05
     c00:	0e 94 ac 10 	call	0x2158	; 0x2158 <xTaskPriorityDisinherit>
     c04:	1d 82       	std	Y+5, r1	; 0x05
     c06:	1c 82       	std	Y+4, r1	; 0x04
     c08:	42 c0       	rjmp	.+132    	; 0xc8e <prvCopyDataToQueue+0xb0>
     c0a:	01 11       	cpse	r16, r1
     c0c:	17 c0       	rjmp	.+46     	; 0xc3c <prvCopyDataToQueue+0x5e>
     c0e:	50 e0       	ldi	r21, 0x00	; 0
     c10:	8a 81       	ldd	r24, Y+2	; 0x02
     c12:	9b 81       	ldd	r25, Y+3	; 0x03
     c14:	0e 94 fb 1c 	call	0x39f6	; 0x39f6 <memcpy>
     c18:	28 a1       	ldd	r18, Y+32	; 0x20
     c1a:	8a 81       	ldd	r24, Y+2	; 0x02
     c1c:	9b 81       	ldd	r25, Y+3	; 0x03
     c1e:	82 0f       	add	r24, r18
     c20:	91 1d       	adc	r25, r1
     c22:	9b 83       	std	Y+3, r25	; 0x03
     c24:	8a 83       	std	Y+2, r24	; 0x02
     c26:	2c 81       	ldd	r18, Y+4	; 0x04
     c28:	3d 81       	ldd	r19, Y+5	; 0x05
     c2a:	82 17       	cp	r24, r18
     c2c:	93 07       	cpc	r25, r19
     c2e:	50 f1       	brcs	.+84     	; 0xc84 <prvCopyDataToQueue+0xa6>
     c30:	88 81       	ld	r24, Y
     c32:	99 81       	ldd	r25, Y+1	; 0x01
     c34:	9b 83       	std	Y+3, r25	; 0x03
     c36:	8a 83       	std	Y+2, r24	; 0x02
     c38:	80 e0       	ldi	r24, 0x00	; 0
     c3a:	29 c0       	rjmp	.+82     	; 0xc8e <prvCopyDataToQueue+0xb0>
     c3c:	50 e0       	ldi	r21, 0x00	; 0
     c3e:	8e 81       	ldd	r24, Y+6	; 0x06
     c40:	9f 81       	ldd	r25, Y+7	; 0x07
     c42:	0e 94 fb 1c 	call	0x39f6	; 0x39f6 <memcpy>
     c46:	88 a1       	ldd	r24, Y+32	; 0x20
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	91 95       	neg	r25
     c4c:	81 95       	neg	r24
     c4e:	91 09       	sbc	r25, r1
     c50:	2e 81       	ldd	r18, Y+6	; 0x06
     c52:	3f 81       	ldd	r19, Y+7	; 0x07
     c54:	28 0f       	add	r18, r24
     c56:	39 1f       	adc	r19, r25
     c58:	3f 83       	std	Y+7, r19	; 0x07
     c5a:	2e 83       	std	Y+6, r18	; 0x06
     c5c:	48 81       	ld	r20, Y
     c5e:	59 81       	ldd	r21, Y+1	; 0x01
     c60:	24 17       	cp	r18, r20
     c62:	35 07       	cpc	r19, r21
     c64:	30 f4       	brcc	.+12     	; 0xc72 <prvCopyDataToQueue+0x94>
     c66:	2c 81       	ldd	r18, Y+4	; 0x04
     c68:	3d 81       	ldd	r19, Y+5	; 0x05
     c6a:	82 0f       	add	r24, r18
     c6c:	93 1f       	adc	r25, r19
     c6e:	9f 83       	std	Y+7, r25	; 0x07
     c70:	8e 83       	std	Y+6, r24	; 0x06
     c72:	02 30       	cpi	r16, 0x02	; 2
     c74:	49 f4       	brne	.+18     	; 0xc88 <prvCopyDataToQueue+0xaa>
     c76:	11 23       	and	r17, r17
     c78:	49 f0       	breq	.+18     	; 0xc8c <prvCopyDataToQueue+0xae>
     c7a:	11 50       	subi	r17, 0x01	; 1
     c7c:	80 e0       	ldi	r24, 0x00	; 0
     c7e:	07 c0       	rjmp	.+14     	; 0xc8e <prvCopyDataToQueue+0xb0>
     c80:	80 e0       	ldi	r24, 0x00	; 0
     c82:	05 c0       	rjmp	.+10     	; 0xc8e <prvCopyDataToQueue+0xb0>
     c84:	80 e0       	ldi	r24, 0x00	; 0
     c86:	03 c0       	rjmp	.+6      	; 0xc8e <prvCopyDataToQueue+0xb0>
     c88:	80 e0       	ldi	r24, 0x00	; 0
     c8a:	01 c0       	rjmp	.+2      	; 0xc8e <prvCopyDataToQueue+0xb0>
     c8c:	80 e0       	ldi	r24, 0x00	; 0
     c8e:	1f 5f       	subi	r17, 0xFF	; 255
     c90:	1e 8f       	std	Y+30, r17	; 0x1e
     c92:	df 91       	pop	r29
     c94:	cf 91       	pop	r28
     c96:	1f 91       	pop	r17
     c98:	0f 91       	pop	r16
     c9a:	08 95       	ret

00000c9c <prvCopyDataFromQueue>:
     c9c:	fc 01       	movw	r30, r24
     c9e:	40 a1       	ldd	r20, Z+32	; 0x20
     ca0:	44 23       	and	r20, r20
     ca2:	a9 f0       	breq	.+42     	; 0xcce <prvCopyDataFromQueue+0x32>
     ca4:	50 e0       	ldi	r21, 0x00	; 0
     ca6:	26 81       	ldd	r18, Z+6	; 0x06
     ca8:	37 81       	ldd	r19, Z+7	; 0x07
     caa:	24 0f       	add	r18, r20
     cac:	35 1f       	adc	r19, r21
     cae:	37 83       	std	Z+7, r19	; 0x07
     cb0:	26 83       	std	Z+6, r18	; 0x06
     cb2:	84 81       	ldd	r24, Z+4	; 0x04
     cb4:	95 81       	ldd	r25, Z+5	; 0x05
     cb6:	28 17       	cp	r18, r24
     cb8:	39 07       	cpc	r19, r25
     cba:	20 f0       	brcs	.+8      	; 0xcc4 <prvCopyDataFromQueue+0x28>
     cbc:	80 81       	ld	r24, Z
     cbe:	91 81       	ldd	r25, Z+1	; 0x01
     cc0:	97 83       	std	Z+7, r25	; 0x07
     cc2:	86 83       	std	Z+6, r24	; 0x06
     cc4:	cb 01       	movw	r24, r22
     cc6:	66 81       	ldd	r22, Z+6	; 0x06
     cc8:	77 81       	ldd	r23, Z+7	; 0x07
     cca:	0c 94 fb 1c 	jmp	0x39f6	; 0x39f6 <memcpy>
     cce:	08 95       	ret

00000cd0 <prvUnlockQueue>:
     cd0:	1f 93       	push	r17
     cd2:	cf 93       	push	r28
     cd4:	df 93       	push	r29
     cd6:	ec 01       	movw	r28, r24
     cd8:	0f b6       	in	r0, 0x3f	; 63
     cda:	f8 94       	cli
     cdc:	0f 92       	push	r0
     cde:	1a a1       	ldd	r17, Y+34	; 0x22
     ce0:	0b c0       	rjmp	.+22     	; 0xcf8 <prvUnlockQueue+0x28>
     ce2:	8b 89       	ldd	r24, Y+19	; 0x13
     ce4:	88 23       	and	r24, r24
     ce6:	51 f0       	breq	.+20     	; 0xcfc <prvUnlockQueue+0x2c>
     ce8:	ce 01       	movw	r24, r28
     cea:	43 96       	adiw	r24, 0x13	; 19
     cec:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <xTaskRemoveFromEventList>
     cf0:	81 11       	cpse	r24, r1
     cf2:	0e 94 13 10 	call	0x2026	; 0x2026 <vTaskMissedYield>
     cf6:	11 50       	subi	r17, 0x01	; 1
     cf8:	11 16       	cp	r1, r17
     cfa:	9c f3       	brlt	.-26     	; 0xce2 <prvUnlockQueue+0x12>
     cfc:	8f ef       	ldi	r24, 0xFF	; 255
     cfe:	8a a3       	std	Y+34, r24	; 0x22
     d00:	0f 90       	pop	r0
     d02:	0f be       	out	0x3f, r0	; 63
     d04:	0f b6       	in	r0, 0x3f	; 63
     d06:	f8 94       	cli
     d08:	0f 92       	push	r0
     d0a:	19 a1       	ldd	r17, Y+33	; 0x21
     d0c:	0b c0       	rjmp	.+22     	; 0xd24 <prvUnlockQueue+0x54>
     d0e:	88 85       	ldd	r24, Y+8	; 0x08
     d10:	88 23       	and	r24, r24
     d12:	51 f0       	breq	.+20     	; 0xd28 <prvUnlockQueue+0x58>
     d14:	ce 01       	movw	r24, r28
     d16:	08 96       	adiw	r24, 0x08	; 8
     d18:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <xTaskRemoveFromEventList>
     d1c:	81 11       	cpse	r24, r1
     d1e:	0e 94 13 10 	call	0x2026	; 0x2026 <vTaskMissedYield>
     d22:	11 50       	subi	r17, 0x01	; 1
     d24:	11 16       	cp	r1, r17
     d26:	9c f3       	brlt	.-26     	; 0xd0e <prvUnlockQueue+0x3e>
     d28:	8f ef       	ldi	r24, 0xFF	; 255
     d2a:	89 a3       	std	Y+33, r24	; 0x21
     d2c:	0f 90       	pop	r0
     d2e:	0f be       	out	0x3f, r0	; 63
     d30:	df 91       	pop	r29
     d32:	cf 91       	pop	r28
     d34:	1f 91       	pop	r17
     d36:	08 95       	ret

00000d38 <xQueueGenericReset>:
     d38:	cf 93       	push	r28
     d3a:	df 93       	push	r29
     d3c:	ec 01       	movw	r28, r24
     d3e:	0f b6       	in	r0, 0x3f	; 63
     d40:	f8 94       	cli
     d42:	0f 92       	push	r0
     d44:	e8 81       	ld	r30, Y
     d46:	f9 81       	ldd	r31, Y+1	; 0x01
     d48:	8f 8d       	ldd	r24, Y+31	; 0x1f
     d4a:	28 a1       	ldd	r18, Y+32	; 0x20
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	30 e0       	ldi	r19, 0x00	; 0
     d50:	82 9f       	mul	r24, r18
     d52:	a0 01       	movw	r20, r0
     d54:	83 9f       	mul	r24, r19
     d56:	50 0d       	add	r21, r0
     d58:	92 9f       	mul	r25, r18
     d5a:	50 0d       	add	r21, r0
     d5c:	11 24       	eor	r1, r1
     d5e:	4e 0f       	add	r20, r30
     d60:	5f 1f       	adc	r21, r31
     d62:	5d 83       	std	Y+5, r21	; 0x05
     d64:	4c 83       	std	Y+4, r20	; 0x04
     d66:	1e 8e       	std	Y+30, r1	; 0x1e
     d68:	fb 83       	std	Y+3, r31	; 0x03
     d6a:	ea 83       	std	Y+2, r30	; 0x02
     d6c:	01 97       	sbiw	r24, 0x01	; 1
     d6e:	28 9f       	mul	r18, r24
     d70:	a0 01       	movw	r20, r0
     d72:	29 9f       	mul	r18, r25
     d74:	50 0d       	add	r21, r0
     d76:	38 9f       	mul	r19, r24
     d78:	50 0d       	add	r21, r0
     d7a:	11 24       	eor	r1, r1
     d7c:	cf 01       	movw	r24, r30
     d7e:	84 0f       	add	r24, r20
     d80:	95 1f       	adc	r25, r21
     d82:	9f 83       	std	Y+7, r25	; 0x07
     d84:	8e 83       	std	Y+6, r24	; 0x06
     d86:	8f ef       	ldi	r24, 0xFF	; 255
     d88:	89 a3       	std	Y+33, r24	; 0x21
     d8a:	8a a3       	std	Y+34, r24	; 0x22
     d8c:	61 11       	cpse	r22, r1
     d8e:	0b c0       	rjmp	.+22     	; 0xda6 <xQueueGenericReset+0x6e>
     d90:	88 85       	ldd	r24, Y+8	; 0x08
     d92:	88 23       	and	r24, r24
     d94:	71 f0       	breq	.+28     	; 0xdb2 <xQueueGenericReset+0x7a>
     d96:	ce 01       	movw	r24, r28
     d98:	08 96       	adiw	r24, 0x08	; 8
     d9a:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <xTaskRemoveFromEventList>
     d9e:	88 23       	and	r24, r24
     da0:	41 f0       	breq	.+16     	; 0xdb2 <xQueueGenericReset+0x7a>
     da2:	2b de       	rcall	.-938    	; 0x9fa <vPortYield>
     da4:	06 c0       	rjmp	.+12     	; 0xdb2 <xQueueGenericReset+0x7a>
     da6:	ce 01       	movw	r24, r28
     da8:	08 96       	adiw	r24, 0x08	; 8
     daa:	59 dd       	rcall	.-1358   	; 0x85e <vListInitialise>
     dac:	ce 01       	movw	r24, r28
     dae:	43 96       	adiw	r24, 0x13	; 19
     db0:	56 dd       	rcall	.-1364   	; 0x85e <vListInitialise>
     db2:	0f 90       	pop	r0
     db4:	0f be       	out	0x3f, r0	; 63
     db6:	81 e0       	ldi	r24, 0x01	; 1
     db8:	df 91       	pop	r29
     dba:	cf 91       	pop	r28
     dbc:	08 95       	ret

00000dbe <prvInitialiseNewQueue>:
     dbe:	0f 93       	push	r16
     dc0:	1f 93       	push	r17
     dc2:	f8 01       	movw	r30, r16
     dc4:	61 11       	cpse	r22, r1
     dc6:	03 c0       	rjmp	.+6      	; 0xdce <prvInitialiseNewQueue+0x10>
     dc8:	11 83       	std	Z+1, r17	; 0x01
     dca:	00 83       	st	Z, r16
     dcc:	02 c0       	rjmp	.+4      	; 0xdd2 <prvInitialiseNewQueue+0x14>
     dce:	51 83       	std	Z+1, r21	; 0x01
     dd0:	40 83       	st	Z, r20
     dd2:	87 8f       	std	Z+31, r24	; 0x1f
     dd4:	60 a3       	std	Z+32, r22	; 0x20
     dd6:	61 e0       	ldi	r22, 0x01	; 1
     dd8:	cf 01       	movw	r24, r30
     dda:	ae df       	rcall	.-164    	; 0xd38 <xQueueGenericReset>
     ddc:	1f 91       	pop	r17
     dde:	0f 91       	pop	r16
     de0:	08 95       	ret

00000de2 <xQueueGenericCreate>:
     de2:	df 92       	push	r13
     de4:	ef 92       	push	r14
     de6:	ff 92       	push	r15
     de8:	0f 93       	push	r16
     dea:	1f 93       	push	r17
     dec:	cf 93       	push	r28
     dee:	df 93       	push	r29
     df0:	f8 2e       	mov	r15, r24
     df2:	e6 2e       	mov	r14, r22
     df4:	d4 2e       	mov	r13, r20
     df6:	86 9f       	mul	r24, r22
     df8:	c0 01       	movw	r24, r0
     dfa:	11 24       	eor	r1, r1
     dfc:	83 96       	adiw	r24, 0x23	; 35
     dfe:	4a dc       	rcall	.-1900   	; 0x694 <pvPortMalloc>
     e00:	ec 01       	movw	r28, r24
     e02:	00 97       	sbiw	r24, 0x00	; 0
     e04:	41 f0       	breq	.+16     	; 0xe16 <xQueueGenericCreate+0x34>
     e06:	8c 01       	movw	r16, r24
     e08:	2d 2d       	mov	r18, r13
     e0a:	ac 01       	movw	r20, r24
     e0c:	4d 5d       	subi	r20, 0xDD	; 221
     e0e:	5f 4f       	sbci	r21, 0xFF	; 255
     e10:	6e 2d       	mov	r22, r14
     e12:	8f 2d       	mov	r24, r15
     e14:	d4 df       	rcall	.-88     	; 0xdbe <prvInitialiseNewQueue>
     e16:	ce 01       	movw	r24, r28
     e18:	df 91       	pop	r29
     e1a:	cf 91       	pop	r28
     e1c:	1f 91       	pop	r17
     e1e:	0f 91       	pop	r16
     e20:	ff 90       	pop	r15
     e22:	ef 90       	pop	r14
     e24:	df 90       	pop	r13
     e26:	08 95       	ret

00000e28 <xQueueGenericSend>:
     e28:	cf 92       	push	r12
     e2a:	df 92       	push	r13
     e2c:	ef 92       	push	r14
     e2e:	ff 92       	push	r15
     e30:	0f 93       	push	r16
     e32:	1f 93       	push	r17
     e34:	cf 93       	push	r28
     e36:	df 93       	push	r29
     e38:	cd b7       	in	r28, 0x3d	; 61
     e3a:	de b7       	in	r29, 0x3e	; 62
     e3c:	29 97       	sbiw	r28, 0x09	; 9
     e3e:	0f b6       	in	r0, 0x3f	; 63
     e40:	f8 94       	cli
     e42:	de bf       	out	0x3e, r29	; 62
     e44:	0f be       	out	0x3f, r0	; 63
     e46:	cd bf       	out	0x3d, r28	; 61
     e48:	7c 01       	movw	r14, r24
     e4a:	6b 01       	movw	r12, r22
     e4c:	2e 83       	std	Y+6, r18	; 0x06
     e4e:	3f 83       	std	Y+7, r19	; 0x07
     e50:	48 87       	std	Y+8, r20	; 0x08
     e52:	59 87       	std	Y+9, r21	; 0x09
     e54:	10 e0       	ldi	r17, 0x00	; 0
     e56:	0f b6       	in	r0, 0x3f	; 63
     e58:	f8 94       	cli
     e5a:	0f 92       	push	r0
     e5c:	f7 01       	movw	r30, r14
     e5e:	96 8d       	ldd	r25, Z+30	; 0x1e
     e60:	87 8d       	ldd	r24, Z+31	; 0x1f
     e62:	98 17       	cp	r25, r24
     e64:	10 f0       	brcs	.+4      	; 0xe6a <xQueueGenericSend+0x42>
     e66:	02 30       	cpi	r16, 0x02	; 2
     e68:	a9 f4       	brne	.+42     	; 0xe94 <xQueueGenericSend+0x6c>
     e6a:	40 2f       	mov	r20, r16
     e6c:	b6 01       	movw	r22, r12
     e6e:	c7 01       	movw	r24, r14
     e70:	b6 de       	rcall	.-660    	; 0xbde <prvCopyDataToQueue>
     e72:	f7 01       	movw	r30, r14
     e74:	93 89       	ldd	r25, Z+19	; 0x13
     e76:	99 23       	and	r25, r25
     e78:	39 f0       	breq	.+14     	; 0xe88 <xQueueGenericSend+0x60>
     e7a:	c7 01       	movw	r24, r14
     e7c:	43 96       	adiw	r24, 0x13	; 19
     e7e:	ad d7       	rcall	.+3930   	; 0x1dda <xTaskRemoveFromEventList>
     e80:	88 23       	and	r24, r24
     e82:	21 f0       	breq	.+8      	; 0xe8c <xQueueGenericSend+0x64>
     e84:	ba dd       	rcall	.-1164   	; 0x9fa <vPortYield>
     e86:	02 c0       	rjmp	.+4      	; 0xe8c <xQueueGenericSend+0x64>
     e88:	81 11       	cpse	r24, r1
     e8a:	b7 dd       	rcall	.-1170   	; 0x9fa <vPortYield>
     e8c:	0f 90       	pop	r0
     e8e:	0f be       	out	0x3f, r0	; 63
     e90:	81 e0       	ldi	r24, 0x01	; 1
     e92:	48 c0       	rjmp	.+144    	; 0xf24 <xQueueGenericSend+0xfc>
     e94:	8e 81       	ldd	r24, Y+6	; 0x06
     e96:	9f 81       	ldd	r25, Y+7	; 0x07
     e98:	a8 85       	ldd	r26, Y+8	; 0x08
     e9a:	b9 85       	ldd	r27, Y+9	; 0x09
     e9c:	89 2b       	or	r24, r25
     e9e:	8a 2b       	or	r24, r26
     ea0:	8b 2b       	or	r24, r27
     ea2:	21 f4       	brne	.+8      	; 0xeac <xQueueGenericSend+0x84>
     ea4:	0f 90       	pop	r0
     ea6:	0f be       	out	0x3f, r0	; 63
     ea8:	80 e0       	ldi	r24, 0x00	; 0
     eaa:	3c c0       	rjmp	.+120    	; 0xf24 <xQueueGenericSend+0xfc>
     eac:	11 11       	cpse	r17, r1
     eae:	05 c0       	rjmp	.+10     	; 0xeba <xQueueGenericSend+0x92>
     eb0:	ce 01       	movw	r24, r28
     eb2:	01 96       	adiw	r24, 0x01	; 1
     eb4:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <vTaskInternalSetTimeOutState>
     eb8:	11 e0       	ldi	r17, 0x01	; 1
     eba:	0f 90       	pop	r0
     ebc:	0f be       	out	0x3f, r0	; 63
     ebe:	7c d4       	rcall	.+2296   	; 0x17b8 <vTaskSuspendAll>
     ec0:	0f b6       	in	r0, 0x3f	; 63
     ec2:	f8 94       	cli
     ec4:	0f 92       	push	r0
     ec6:	f7 01       	movw	r30, r14
     ec8:	81 a1       	ldd	r24, Z+33	; 0x21
     eca:	8f 3f       	cpi	r24, 0xFF	; 255
     ecc:	09 f4       	brne	.+2      	; 0xed0 <xQueueGenericSend+0xa8>
     ece:	11 a2       	std	Z+33, r1	; 0x21
     ed0:	f7 01       	movw	r30, r14
     ed2:	82 a1       	ldd	r24, Z+34	; 0x22
     ed4:	8f 3f       	cpi	r24, 0xFF	; 255
     ed6:	09 f4       	brne	.+2      	; 0xeda <xQueueGenericSend+0xb2>
     ed8:	12 a2       	std	Z+34, r1	; 0x22
     eda:	0f 90       	pop	r0
     edc:	0f be       	out	0x3f, r0	; 63
     ede:	be 01       	movw	r22, r28
     ee0:	6a 5f       	subi	r22, 0xFA	; 250
     ee2:	7f 4f       	sbci	r23, 0xFF	; 255
     ee4:	ce 01       	movw	r24, r28
     ee6:	01 96       	adiw	r24, 0x01	; 1
     ee8:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <xTaskCheckForTimeOut>
     eec:	81 11       	cpse	r24, r1
     eee:	16 c0       	rjmp	.+44     	; 0xf1c <xQueueGenericSend+0xf4>
     ef0:	c7 01       	movw	r24, r14
     ef2:	67 de       	rcall	.-818    	; 0xbc2 <prvIsQueueFull>
     ef4:	88 23       	and	r24, r24
     ef6:	71 f0       	breq	.+28     	; 0xf14 <xQueueGenericSend+0xec>
     ef8:	4e 81       	ldd	r20, Y+6	; 0x06
     efa:	5f 81       	ldd	r21, Y+7	; 0x07
     efc:	68 85       	ldd	r22, Y+8	; 0x08
     efe:	79 85       	ldd	r23, Y+9	; 0x09
     f00:	c7 01       	movw	r24, r14
     f02:	08 96       	adiw	r24, 0x08	; 8
     f04:	11 d7       	rcall	.+3618   	; 0x1d28 <vTaskPlaceOnEventList>
     f06:	c7 01       	movw	r24, r14
     f08:	e3 de       	rcall	.-570    	; 0xcd0 <prvUnlockQueue>
     f0a:	96 d5       	rcall	.+2860   	; 0x1a38 <xTaskResumeAll>
     f0c:	81 11       	cpse	r24, r1
     f0e:	a3 cf       	rjmp	.-186    	; 0xe56 <xQueueGenericSend+0x2e>
     f10:	74 dd       	rcall	.-1304   	; 0x9fa <vPortYield>
     f12:	a1 cf       	rjmp	.-190    	; 0xe56 <xQueueGenericSend+0x2e>
     f14:	c7 01       	movw	r24, r14
     f16:	dc de       	rcall	.-584    	; 0xcd0 <prvUnlockQueue>
     f18:	8f d5       	rcall	.+2846   	; 0x1a38 <xTaskResumeAll>
     f1a:	9d cf       	rjmp	.-198    	; 0xe56 <xQueueGenericSend+0x2e>
     f1c:	c7 01       	movw	r24, r14
     f1e:	d8 de       	rcall	.-592    	; 0xcd0 <prvUnlockQueue>
     f20:	8b d5       	rcall	.+2838   	; 0x1a38 <xTaskResumeAll>
     f22:	80 e0       	ldi	r24, 0x00	; 0
     f24:	29 96       	adiw	r28, 0x09	; 9
     f26:	0f b6       	in	r0, 0x3f	; 63
     f28:	f8 94       	cli
     f2a:	de bf       	out	0x3e, r29	; 62
     f2c:	0f be       	out	0x3f, r0	; 63
     f2e:	cd bf       	out	0x3d, r28	; 61
     f30:	df 91       	pop	r29
     f32:	cf 91       	pop	r28
     f34:	1f 91       	pop	r17
     f36:	0f 91       	pop	r16
     f38:	ff 90       	pop	r15
     f3a:	ef 90       	pop	r14
     f3c:	df 90       	pop	r13
     f3e:	cf 90       	pop	r12
     f40:	08 95       	ret

00000f42 <prvInitialiseMutex>:
     f42:	0f 93       	push	r16
     f44:	00 97       	sbiw	r24, 0x00	; 0
     f46:	69 f0       	breq	.+26     	; 0xf62 <prvInitialiseMutex+0x20>
     f48:	fc 01       	movw	r30, r24
     f4a:	15 82       	std	Z+5, r1	; 0x05
     f4c:	14 82       	std	Z+4, r1	; 0x04
     f4e:	11 82       	std	Z+1, r1	; 0x01
     f50:	10 82       	st	Z, r1
     f52:	16 82       	std	Z+6, r1	; 0x06
     f54:	00 e0       	ldi	r16, 0x00	; 0
     f56:	20 e0       	ldi	r18, 0x00	; 0
     f58:	30 e0       	ldi	r19, 0x00	; 0
     f5a:	a9 01       	movw	r20, r18
     f5c:	60 e0       	ldi	r22, 0x00	; 0
     f5e:	70 e0       	ldi	r23, 0x00	; 0
     f60:	63 df       	rcall	.-314    	; 0xe28 <xQueueGenericSend>
     f62:	0f 91       	pop	r16
     f64:	08 95       	ret

00000f66 <xQueueCreateMutex>:
     f66:	cf 93       	push	r28
     f68:	df 93       	push	r29
     f6a:	48 2f       	mov	r20, r24
     f6c:	60 e0       	ldi	r22, 0x00	; 0
     f6e:	81 e0       	ldi	r24, 0x01	; 1
     f70:	38 df       	rcall	.-400    	; 0xde2 <xQueueGenericCreate>
     f72:	ec 01       	movw	r28, r24
     f74:	e6 df       	rcall	.-52     	; 0xf42 <prvInitialiseMutex>
     f76:	ce 01       	movw	r24, r28
     f78:	df 91       	pop	r29
     f7a:	cf 91       	pop	r28
     f7c:	08 95       	ret

00000f7e <xQueueGenericSendFromISR>:
     f7e:	ef 92       	push	r14
     f80:	ff 92       	push	r15
     f82:	0f 93       	push	r16
     f84:	1f 93       	push	r17
     f86:	cf 93       	push	r28
     f88:	df 93       	push	r29
     f8a:	8a 01       	movw	r16, r20
     f8c:	fc 01       	movw	r30, r24
     f8e:	56 8d       	ldd	r21, Z+30	; 0x1e
     f90:	37 8d       	ldd	r19, Z+31	; 0x1f
     f92:	53 17       	cp	r21, r19
     f94:	10 f0       	brcs	.+4      	; 0xf9a <xQueueGenericSendFromISR+0x1c>
     f96:	22 30       	cpi	r18, 0x02	; 2
     f98:	f1 f4       	brne	.+60     	; 0xfd6 <xQueueGenericSendFromISR+0x58>
     f9a:	42 2f       	mov	r20, r18
     f9c:	78 01       	movw	r14, r16
     f9e:	ec 01       	movw	r28, r24
     fa0:	1a a1       	ldd	r17, Y+34	; 0x22
     fa2:	8e 8d       	ldd	r24, Y+30	; 0x1e
     fa4:	ce 01       	movw	r24, r28
     fa6:	1b de       	rcall	.-970    	; 0xbde <prvCopyDataToQueue>
     fa8:	1f 3f       	cpi	r17, 0xFF	; 255
     faa:	79 f4       	brne	.+30     	; 0xfca <xQueueGenericSendFromISR+0x4c>
     fac:	8b 89       	ldd	r24, Y+19	; 0x13
     fae:	88 23       	and	r24, r24
     fb0:	a1 f0       	breq	.+40     	; 0xfda <xQueueGenericSendFromISR+0x5c>
     fb2:	ce 01       	movw	r24, r28
     fb4:	43 96       	adiw	r24, 0x13	; 19
     fb6:	11 d7       	rcall	.+3618   	; 0x1dda <xTaskRemoveFromEventList>
     fb8:	88 23       	and	r24, r24
     fba:	89 f0       	breq	.+34     	; 0xfde <xQueueGenericSendFromISR+0x60>
     fbc:	e1 14       	cp	r14, r1
     fbe:	f1 04       	cpc	r15, r1
     fc0:	81 f0       	breq	.+32     	; 0xfe2 <xQueueGenericSendFromISR+0x64>
     fc2:	81 e0       	ldi	r24, 0x01	; 1
     fc4:	f7 01       	movw	r30, r14
     fc6:	80 83       	st	Z, r24
     fc8:	0d c0       	rjmp	.+26     	; 0xfe4 <xQueueGenericSendFromISR+0x66>
     fca:	ff 24       	eor	r15, r15
     fcc:	f3 94       	inc	r15
     fce:	f1 0e       	add	r15, r17
     fd0:	fa a2       	std	Y+34, r15	; 0x22
     fd2:	81 e0       	ldi	r24, 0x01	; 1
     fd4:	07 c0       	rjmp	.+14     	; 0xfe4 <xQueueGenericSendFromISR+0x66>
     fd6:	80 e0       	ldi	r24, 0x00	; 0
     fd8:	05 c0       	rjmp	.+10     	; 0xfe4 <xQueueGenericSendFromISR+0x66>
     fda:	81 e0       	ldi	r24, 0x01	; 1
     fdc:	03 c0       	rjmp	.+6      	; 0xfe4 <xQueueGenericSendFromISR+0x66>
     fde:	81 e0       	ldi	r24, 0x01	; 1
     fe0:	01 c0       	rjmp	.+2      	; 0xfe4 <xQueueGenericSendFromISR+0x66>
     fe2:	81 e0       	ldi	r24, 0x01	; 1
     fe4:	df 91       	pop	r29
     fe6:	cf 91       	pop	r28
     fe8:	1f 91       	pop	r17
     fea:	0f 91       	pop	r16
     fec:	ff 90       	pop	r15
     fee:	ef 90       	pop	r14
     ff0:	08 95       	ret

00000ff2 <xQueueReceive>:
     ff2:	cf 92       	push	r12
     ff4:	df 92       	push	r13
     ff6:	ef 92       	push	r14
     ff8:	ff 92       	push	r15
     ffa:	0f 93       	push	r16
     ffc:	1f 93       	push	r17
     ffe:	cf 93       	push	r28
    1000:	df 93       	push	r29
    1002:	cd b7       	in	r28, 0x3d	; 61
    1004:	de b7       	in	r29, 0x3e	; 62
    1006:	29 97       	sbiw	r28, 0x09	; 9
    1008:	0f b6       	in	r0, 0x3f	; 63
    100a:	f8 94       	cli
    100c:	de bf       	out	0x3e, r29	; 62
    100e:	0f be       	out	0x3f, r0	; 63
    1010:	cd bf       	out	0x3d, r28	; 61
    1012:	8c 01       	movw	r16, r24
    1014:	6b 01       	movw	r12, r22
    1016:	2e 83       	std	Y+6, r18	; 0x06
    1018:	3f 83       	std	Y+7, r19	; 0x07
    101a:	48 87       	std	Y+8, r20	; 0x08
    101c:	59 87       	std	Y+9, r21	; 0x09
    101e:	e1 2c       	mov	r14, r1
    1020:	0f b6       	in	r0, 0x3f	; 63
    1022:	f8 94       	cli
    1024:	0f 92       	push	r0
    1026:	f8 01       	movw	r30, r16
    1028:	f6 8c       	ldd	r15, Z+30	; 0x1e
    102a:	ff 20       	and	r15, r15
    102c:	91 f0       	breq	.+36     	; 0x1052 <__EEPROM_REGION_LENGTH__+0x52>
    102e:	b6 01       	movw	r22, r12
    1030:	c8 01       	movw	r24, r16
    1032:	34 de       	rcall	.-920    	; 0xc9c <prvCopyDataFromQueue>
    1034:	fa 94       	dec	r15
    1036:	f8 01       	movw	r30, r16
    1038:	f6 8e       	std	Z+30, r15	; 0x1e
    103a:	80 85       	ldd	r24, Z+8	; 0x08
    103c:	88 23       	and	r24, r24
    103e:	29 f0       	breq	.+10     	; 0x104a <__EEPROM_REGION_LENGTH__+0x4a>
    1040:	c8 01       	movw	r24, r16
    1042:	08 96       	adiw	r24, 0x08	; 8
    1044:	ca d6       	rcall	.+3476   	; 0x1dda <xTaskRemoveFromEventList>
    1046:	81 11       	cpse	r24, r1
    1048:	d8 dc       	rcall	.-1616   	; 0x9fa <vPortYield>
    104a:	0f 90       	pop	r0
    104c:	0f be       	out	0x3f, r0	; 63
    104e:	81 e0       	ldi	r24, 0x01	; 1
    1050:	4c c0       	rjmp	.+152    	; 0x10ea <__EEPROM_REGION_LENGTH__+0xea>
    1052:	8e 81       	ldd	r24, Y+6	; 0x06
    1054:	9f 81       	ldd	r25, Y+7	; 0x07
    1056:	a8 85       	ldd	r26, Y+8	; 0x08
    1058:	b9 85       	ldd	r27, Y+9	; 0x09
    105a:	89 2b       	or	r24, r25
    105c:	8a 2b       	or	r24, r26
    105e:	8b 2b       	or	r24, r27
    1060:	21 f4       	brne	.+8      	; 0x106a <__EEPROM_REGION_LENGTH__+0x6a>
    1062:	0f 90       	pop	r0
    1064:	0f be       	out	0x3f, r0	; 63
    1066:	80 e0       	ldi	r24, 0x00	; 0
    1068:	40 c0       	rjmp	.+128    	; 0x10ea <__EEPROM_REGION_LENGTH__+0xea>
    106a:	e1 10       	cpse	r14, r1
    106c:	05 c0       	rjmp	.+10     	; 0x1078 <__EEPROM_REGION_LENGTH__+0x78>
    106e:	ce 01       	movw	r24, r28
    1070:	01 96       	adiw	r24, 0x01	; 1
    1072:	62 d7       	rcall	.+3780   	; 0x1f38 <vTaskInternalSetTimeOutState>
    1074:	ee 24       	eor	r14, r14
    1076:	e3 94       	inc	r14
    1078:	0f 90       	pop	r0
    107a:	0f be       	out	0x3f, r0	; 63
    107c:	9d d3       	rcall	.+1850   	; 0x17b8 <vTaskSuspendAll>
    107e:	0f b6       	in	r0, 0x3f	; 63
    1080:	f8 94       	cli
    1082:	0f 92       	push	r0
    1084:	f8 01       	movw	r30, r16
    1086:	81 a1       	ldd	r24, Z+33	; 0x21
    1088:	8f 3f       	cpi	r24, 0xFF	; 255
    108a:	09 f4       	brne	.+2      	; 0x108e <__EEPROM_REGION_LENGTH__+0x8e>
    108c:	11 a2       	std	Z+33, r1	; 0x21
    108e:	f8 01       	movw	r30, r16
    1090:	82 a1       	ldd	r24, Z+34	; 0x22
    1092:	8f 3f       	cpi	r24, 0xFF	; 255
    1094:	09 f4       	brne	.+2      	; 0x1098 <__EEPROM_REGION_LENGTH__+0x98>
    1096:	12 a2       	std	Z+34, r1	; 0x22
    1098:	0f 90       	pop	r0
    109a:	0f be       	out	0x3f, r0	; 63
    109c:	be 01       	movw	r22, r28
    109e:	6a 5f       	subi	r22, 0xFA	; 250
    10a0:	7f 4f       	sbci	r23, 0xFF	; 255
    10a2:	ce 01       	movw	r24, r28
    10a4:	01 96       	adiw	r24, 0x01	; 1
    10a6:	59 d7       	rcall	.+3762   	; 0x1f5a <xTaskCheckForTimeOut>
    10a8:	81 11       	cpse	r24, r1
    10aa:	16 c0       	rjmp	.+44     	; 0x10d8 <__EEPROM_REGION_LENGTH__+0xd8>
    10ac:	c8 01       	movw	r24, r16
    10ae:	7c dd       	rcall	.-1288   	; 0xba8 <prvIsQueueEmpty>
    10b0:	88 23       	and	r24, r24
    10b2:	71 f0       	breq	.+28     	; 0x10d0 <__EEPROM_REGION_LENGTH__+0xd0>
    10b4:	4e 81       	ldd	r20, Y+6	; 0x06
    10b6:	5f 81       	ldd	r21, Y+7	; 0x07
    10b8:	68 85       	ldd	r22, Y+8	; 0x08
    10ba:	79 85       	ldd	r23, Y+9	; 0x09
    10bc:	c8 01       	movw	r24, r16
    10be:	43 96       	adiw	r24, 0x13	; 19
    10c0:	33 d6       	rcall	.+3174   	; 0x1d28 <vTaskPlaceOnEventList>
    10c2:	c8 01       	movw	r24, r16
    10c4:	05 de       	rcall	.-1014   	; 0xcd0 <prvUnlockQueue>
    10c6:	b8 d4       	rcall	.+2416   	; 0x1a38 <xTaskResumeAll>
    10c8:	81 11       	cpse	r24, r1
    10ca:	aa cf       	rjmp	.-172    	; 0x1020 <__EEPROM_REGION_LENGTH__+0x20>
    10cc:	96 dc       	rcall	.-1748   	; 0x9fa <vPortYield>
    10ce:	a8 cf       	rjmp	.-176    	; 0x1020 <__EEPROM_REGION_LENGTH__+0x20>
    10d0:	c8 01       	movw	r24, r16
    10d2:	fe dd       	rcall	.-1028   	; 0xcd0 <prvUnlockQueue>
    10d4:	b1 d4       	rcall	.+2402   	; 0x1a38 <xTaskResumeAll>
    10d6:	a4 cf       	rjmp	.-184    	; 0x1020 <__EEPROM_REGION_LENGTH__+0x20>
    10d8:	c8 01       	movw	r24, r16
    10da:	fa dd       	rcall	.-1036   	; 0xcd0 <prvUnlockQueue>
    10dc:	ad d4       	rcall	.+2394   	; 0x1a38 <xTaskResumeAll>
    10de:	c8 01       	movw	r24, r16
    10e0:	63 dd       	rcall	.-1338   	; 0xba8 <prvIsQueueEmpty>
    10e2:	88 23       	and	r24, r24
    10e4:	09 f4       	brne	.+2      	; 0x10e8 <__EEPROM_REGION_LENGTH__+0xe8>
    10e6:	9c cf       	rjmp	.-200    	; 0x1020 <__EEPROM_REGION_LENGTH__+0x20>
    10e8:	80 e0       	ldi	r24, 0x00	; 0
    10ea:	29 96       	adiw	r28, 0x09	; 9
    10ec:	0f b6       	in	r0, 0x3f	; 63
    10ee:	f8 94       	cli
    10f0:	de bf       	out	0x3e, r29	; 62
    10f2:	0f be       	out	0x3f, r0	; 63
    10f4:	cd bf       	out	0x3d, r28	; 61
    10f6:	df 91       	pop	r29
    10f8:	cf 91       	pop	r28
    10fa:	1f 91       	pop	r17
    10fc:	0f 91       	pop	r16
    10fe:	ff 90       	pop	r15
    1100:	ef 90       	pop	r14
    1102:	df 90       	pop	r13
    1104:	cf 90       	pop	r12
    1106:	08 95       	ret

00001108 <xQueueSemaphoreTake>:
    1108:	ef 92       	push	r14
    110a:	ff 92       	push	r15
    110c:	0f 93       	push	r16
    110e:	1f 93       	push	r17
    1110:	cf 93       	push	r28
    1112:	df 93       	push	r29
    1114:	cd b7       	in	r28, 0x3d	; 61
    1116:	de b7       	in	r29, 0x3e	; 62
    1118:	29 97       	sbiw	r28, 0x09	; 9
    111a:	0f b6       	in	r0, 0x3f	; 63
    111c:	f8 94       	cli
    111e:	de bf       	out	0x3e, r29	; 62
    1120:	0f be       	out	0x3f, r0	; 63
    1122:	cd bf       	out	0x3d, r28	; 61
    1124:	8c 01       	movw	r16, r24
    1126:	4e 83       	std	Y+6, r20	; 0x06
    1128:	5f 83       	std	Y+7, r21	; 0x07
    112a:	68 87       	std	Y+8, r22	; 0x08
    112c:	79 87       	std	Y+9, r23	; 0x09
    112e:	e1 2c       	mov	r14, r1
    1130:	f1 2c       	mov	r15, r1
    1132:	0f b6       	in	r0, 0x3f	; 63
    1134:	f8 94       	cli
    1136:	0f 92       	push	r0
    1138:	f8 01       	movw	r30, r16
    113a:	86 8d       	ldd	r24, Z+30	; 0x1e
    113c:	88 23       	and	r24, r24
    113e:	c1 f0       	breq	.+48     	; 0x1170 <xQueueSemaphoreTake+0x68>
    1140:	81 50       	subi	r24, 0x01	; 1
    1142:	86 8f       	std	Z+30, r24	; 0x1e
    1144:	80 81       	ld	r24, Z
    1146:	91 81       	ldd	r25, Z+1	; 0x01
    1148:	89 2b       	or	r24, r25
    114a:	29 f4       	brne	.+10     	; 0x1156 <xQueueSemaphoreTake+0x4e>
    114c:	0e 94 6e 11 	call	0x22dc	; 0x22dc <pvTaskIncrementMutexHeldCount>
    1150:	f8 01       	movw	r30, r16
    1152:	95 83       	std	Z+5, r25	; 0x05
    1154:	84 83       	std	Z+4, r24	; 0x04
    1156:	f8 01       	movw	r30, r16
    1158:	80 85       	ldd	r24, Z+8	; 0x08
    115a:	88 23       	and	r24, r24
    115c:	29 f0       	breq	.+10     	; 0x1168 <xQueueSemaphoreTake+0x60>
    115e:	c8 01       	movw	r24, r16
    1160:	08 96       	adiw	r24, 0x08	; 8
    1162:	3b d6       	rcall	.+3190   	; 0x1dda <xTaskRemoveFromEventList>
    1164:	81 11       	cpse	r24, r1
    1166:	49 dc       	rcall	.-1902   	; 0x9fa <vPortYield>
    1168:	0f 90       	pop	r0
    116a:	0f be       	out	0x3f, r0	; 63
    116c:	81 e0       	ldi	r24, 0x01	; 1
    116e:	6a c0       	rjmp	.+212    	; 0x1244 <xQueueSemaphoreTake+0x13c>
    1170:	8e 81       	ldd	r24, Y+6	; 0x06
    1172:	9f 81       	ldd	r25, Y+7	; 0x07
    1174:	a8 85       	ldd	r26, Y+8	; 0x08
    1176:	b9 85       	ldd	r27, Y+9	; 0x09
    1178:	89 2b       	or	r24, r25
    117a:	8a 2b       	or	r24, r26
    117c:	8b 2b       	or	r24, r27
    117e:	21 f4       	brne	.+8      	; 0x1188 <xQueueSemaphoreTake+0x80>
    1180:	0f 90       	pop	r0
    1182:	0f be       	out	0x3f, r0	; 63
    1184:	80 e0       	ldi	r24, 0x00	; 0
    1186:	5e c0       	rjmp	.+188    	; 0x1244 <xQueueSemaphoreTake+0x13c>
    1188:	f1 10       	cpse	r15, r1
    118a:	05 c0       	rjmp	.+10     	; 0x1196 <xQueueSemaphoreTake+0x8e>
    118c:	ce 01       	movw	r24, r28
    118e:	01 96       	adiw	r24, 0x01	; 1
    1190:	d3 d6       	rcall	.+3494   	; 0x1f38 <vTaskInternalSetTimeOutState>
    1192:	ff 24       	eor	r15, r15
    1194:	f3 94       	inc	r15
    1196:	0f 90       	pop	r0
    1198:	0f be       	out	0x3f, r0	; 63
    119a:	0e d3       	rcall	.+1564   	; 0x17b8 <vTaskSuspendAll>
    119c:	0f b6       	in	r0, 0x3f	; 63
    119e:	f8 94       	cli
    11a0:	0f 92       	push	r0
    11a2:	f8 01       	movw	r30, r16
    11a4:	81 a1       	ldd	r24, Z+33	; 0x21
    11a6:	8f 3f       	cpi	r24, 0xFF	; 255
    11a8:	09 f4       	brne	.+2      	; 0x11ac <xQueueSemaphoreTake+0xa4>
    11aa:	11 a2       	std	Z+33, r1	; 0x21
    11ac:	f8 01       	movw	r30, r16
    11ae:	82 a1       	ldd	r24, Z+34	; 0x22
    11b0:	8f 3f       	cpi	r24, 0xFF	; 255
    11b2:	09 f4       	brne	.+2      	; 0x11b6 <xQueueSemaphoreTake+0xae>
    11b4:	12 a2       	std	Z+34, r1	; 0x22
    11b6:	0f 90       	pop	r0
    11b8:	0f be       	out	0x3f, r0	; 63
    11ba:	be 01       	movw	r22, r28
    11bc:	6a 5f       	subi	r22, 0xFA	; 250
    11be:	7f 4f       	sbci	r23, 0xFF	; 255
    11c0:	ce 01       	movw	r24, r28
    11c2:	01 96       	adiw	r24, 0x01	; 1
    11c4:	ca d6       	rcall	.+3476   	; 0x1f5a <xTaskCheckForTimeOut>
    11c6:	81 11       	cpse	r24, r1
    11c8:	24 c0       	rjmp	.+72     	; 0x1212 <xQueueSemaphoreTake+0x10a>
    11ca:	c8 01       	movw	r24, r16
    11cc:	ed dc       	rcall	.-1574   	; 0xba8 <prvIsQueueEmpty>
    11ce:	88 23       	and	r24, r24
    11d0:	e1 f0       	breq	.+56     	; 0x120a <xQueueSemaphoreTake+0x102>
    11d2:	f8 01       	movw	r30, r16
    11d4:	80 81       	ld	r24, Z
    11d6:	91 81       	ldd	r25, Z+1	; 0x01
    11d8:	89 2b       	or	r24, r25
    11da:	49 f4       	brne	.+18     	; 0x11ee <xQueueSemaphoreTake+0xe6>
    11dc:	0f b6       	in	r0, 0x3f	; 63
    11de:	f8 94       	cli
    11e0:	0f 92       	push	r0
    11e2:	84 81       	ldd	r24, Z+4	; 0x04
    11e4:	95 81       	ldd	r25, Z+5	; 0x05
    11e6:	31 d7       	rcall	.+3682   	; 0x204a <xTaskPriorityInherit>
    11e8:	e8 2e       	mov	r14, r24
    11ea:	0f 90       	pop	r0
    11ec:	0f be       	out	0x3f, r0	; 63
    11ee:	4e 81       	ldd	r20, Y+6	; 0x06
    11f0:	5f 81       	ldd	r21, Y+7	; 0x07
    11f2:	68 85       	ldd	r22, Y+8	; 0x08
    11f4:	79 85       	ldd	r23, Y+9	; 0x09
    11f6:	c8 01       	movw	r24, r16
    11f8:	43 96       	adiw	r24, 0x13	; 19
    11fa:	96 d5       	rcall	.+2860   	; 0x1d28 <vTaskPlaceOnEventList>
    11fc:	c8 01       	movw	r24, r16
    11fe:	68 dd       	rcall	.-1328   	; 0xcd0 <prvUnlockQueue>
    1200:	1b d4       	rcall	.+2102   	; 0x1a38 <xTaskResumeAll>
    1202:	81 11       	cpse	r24, r1
    1204:	96 cf       	rjmp	.-212    	; 0x1132 <xQueueSemaphoreTake+0x2a>
    1206:	f9 db       	rcall	.-2062   	; 0x9fa <vPortYield>
    1208:	94 cf       	rjmp	.-216    	; 0x1132 <xQueueSemaphoreTake+0x2a>
    120a:	c8 01       	movw	r24, r16
    120c:	61 dd       	rcall	.-1342   	; 0xcd0 <prvUnlockQueue>
    120e:	14 d4       	rcall	.+2088   	; 0x1a38 <xTaskResumeAll>
    1210:	90 cf       	rjmp	.-224    	; 0x1132 <xQueueSemaphoreTake+0x2a>
    1212:	c8 01       	movw	r24, r16
    1214:	5d dd       	rcall	.-1350   	; 0xcd0 <prvUnlockQueue>
    1216:	10 d4       	rcall	.+2080   	; 0x1a38 <xTaskResumeAll>
    1218:	c8 01       	movw	r24, r16
    121a:	c6 dc       	rcall	.-1652   	; 0xba8 <prvIsQueueEmpty>
    121c:	88 23       	and	r24, r24
    121e:	09 f4       	brne	.+2      	; 0x1222 <xQueueSemaphoreTake+0x11a>
    1220:	88 cf       	rjmp	.-240    	; 0x1132 <xQueueSemaphoreTake+0x2a>
    1222:	ee 20       	and	r14, r14
    1224:	71 f0       	breq	.+28     	; 0x1242 <xQueueSemaphoreTake+0x13a>
    1226:	0f b6       	in	r0, 0x3f	; 63
    1228:	f8 94       	cli
    122a:	0f 92       	push	r0
    122c:	c8 01       	movw	r24, r16
    122e:	ac dc       	rcall	.-1704   	; 0xb88 <prvGetDisinheritPriorityAfterTimeout>
    1230:	68 2f       	mov	r22, r24
    1232:	f8 01       	movw	r30, r16
    1234:	84 81       	ldd	r24, Z+4	; 0x04
    1236:	95 81       	ldd	r25, Z+5	; 0x05
    1238:	ea d7       	rcall	.+4052   	; 0x220e <vTaskPriorityDisinheritAfterTimeout>
    123a:	0f 90       	pop	r0
    123c:	0f be       	out	0x3f, r0	; 63
    123e:	80 e0       	ldi	r24, 0x00	; 0
    1240:	01 c0       	rjmp	.+2      	; 0x1244 <xQueueSemaphoreTake+0x13c>
    1242:	80 e0       	ldi	r24, 0x00	; 0
    1244:	29 96       	adiw	r28, 0x09	; 9
    1246:	0f b6       	in	r0, 0x3f	; 63
    1248:	f8 94       	cli
    124a:	de bf       	out	0x3e, r29	; 62
    124c:	0f be       	out	0x3f, r0	; 63
    124e:	cd bf       	out	0x3d, r28	; 61
    1250:	df 91       	pop	r29
    1252:	cf 91       	pop	r28
    1254:	1f 91       	pop	r17
    1256:	0f 91       	pop	r16
    1258:	ff 90       	pop	r15
    125a:	ef 90       	pop	r14
    125c:	08 95       	ret

0000125e <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
    125e:	cf 93       	push	r28
    1260:	df 93       	push	r29
    1262:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    1264:	0f b6       	in	r0, 0x3f	; 63
    1266:	f8 94       	cli
    1268:	0f 92       	push	r0
    126a:	89 a1       	ldd	r24, Y+33	; 0x21
    126c:	8f 3f       	cpi	r24, 0xFF	; 255
    126e:	09 f4       	brne	.+2      	; 0x1272 <vQueueWaitForMessageRestricted+0x14>
    1270:	19 a2       	std	Y+33, r1	; 0x21
    1272:	8a a1       	ldd	r24, Y+34	; 0x22
    1274:	8f 3f       	cpi	r24, 0xFF	; 255
    1276:	09 f4       	brne	.+2      	; 0x127a <vQueueWaitForMessageRestricted+0x1c>
    1278:	1a a2       	std	Y+34, r1	; 0x22
    127a:	0f 90       	pop	r0
    127c:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    127e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1280:	81 11       	cpse	r24, r1
    1282:	03 c0       	rjmp	.+6      	; 0x128a <vQueueWaitForMessageRestricted+0x2c>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    1284:	ce 01       	movw	r24, r28
    1286:	43 96       	adiw	r24, 0x13	; 19
    1288:	66 d5       	rcall	.+2764   	; 0x1d56 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
    128a:	ce 01       	movw	r24, r28
    128c:	21 dd       	rcall	.-1470   	; 0xcd0 <prvUnlockQueue>
    }
    128e:	df 91       	pop	r29
    1290:	cf 91       	pop	r28
    1292:	08 95       	ret

00001294 <prvResetNextTaskUnblockTime>:
    1294:	e0 91 39 11 	lds	r30, 0x1139	; 0x801139 <pxDelayedTaskList>
    1298:	f0 91 3a 11 	lds	r31, 0x113A	; 0x80113a <pxDelayedTaskList+0x1>
    129c:	80 81       	ld	r24, Z
    129e:	81 11       	cpse	r24, r1
    12a0:	0c c0       	rjmp	.+24     	; 0x12ba <prvResetNextTaskUnblockTime+0x26>
    12a2:	8f ef       	ldi	r24, 0xFF	; 255
    12a4:	9f ef       	ldi	r25, 0xFF	; 255
    12a6:	dc 01       	movw	r26, r24
    12a8:	80 93 03 11 	sts	0x1103, r24	; 0x801103 <xNextTaskUnblockTime>
    12ac:	90 93 04 11 	sts	0x1104, r25	; 0x801104 <xNextTaskUnblockTime+0x1>
    12b0:	a0 93 05 11 	sts	0x1105, r26	; 0x801105 <xNextTaskUnblockTime+0x2>
    12b4:	b0 93 06 11 	sts	0x1106, r27	; 0x801106 <xNextTaskUnblockTime+0x3>
    12b8:	08 95       	ret
    12ba:	e0 91 39 11 	lds	r30, 0x1139	; 0x801139 <pxDelayedTaskList>
    12be:	f0 91 3a 11 	lds	r31, 0x113A	; 0x80113a <pxDelayedTaskList+0x1>
    12c2:	07 80       	ldd	r0, Z+7	; 0x07
    12c4:	f0 85       	ldd	r31, Z+8	; 0x08
    12c6:	e0 2d       	mov	r30, r0
    12c8:	80 81       	ld	r24, Z
    12ca:	91 81       	ldd	r25, Z+1	; 0x01
    12cc:	a2 81       	ldd	r26, Z+2	; 0x02
    12ce:	b3 81       	ldd	r27, Z+3	; 0x03
    12d0:	80 93 03 11 	sts	0x1103, r24	; 0x801103 <xNextTaskUnblockTime>
    12d4:	90 93 04 11 	sts	0x1104, r25	; 0x801104 <xNextTaskUnblockTime+0x1>
    12d8:	a0 93 05 11 	sts	0x1105, r26	; 0x801105 <xNextTaskUnblockTime+0x2>
    12dc:	b0 93 06 11 	sts	0x1106, r27	; 0x801106 <xNextTaskUnblockTime+0x3>
    12e0:	08 95       	ret

000012e2 <prvDeleteTCB>:
    12e2:	cf 93       	push	r28
    12e4:	df 93       	push	r29
    12e6:	ec 01       	movw	r28, r24
    12e8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    12ea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    12ec:	7c da       	rcall	.-2824   	; 0x7e6 <vPortFree>
    12ee:	ce 01       	movw	r24, r28
    12f0:	7a da       	rcall	.-2828   	; 0x7e6 <vPortFree>
    12f2:	df 91       	pop	r29
    12f4:	cf 91       	pop	r28
    12f6:	08 95       	ret

000012f8 <prvInitialiseNewTask>:
    12f8:	4f 92       	push	r4
    12fa:	5f 92       	push	r5
    12fc:	6f 92       	push	r6
    12fe:	7f 92       	push	r7
    1300:	8f 92       	push	r8
    1302:	9f 92       	push	r9
    1304:	af 92       	push	r10
    1306:	bf 92       	push	r11
    1308:	cf 92       	push	r12
    130a:	df 92       	push	r13
    130c:	ef 92       	push	r14
    130e:	ff 92       	push	r15
    1310:	0f 93       	push	r16
    1312:	cf 93       	push	r28
    1314:	df 93       	push	r29
    1316:	2c 01       	movw	r4, r24
    1318:	5b 01       	movw	r10, r22
    131a:	4a 01       	movw	r8, r20
    131c:	39 01       	movw	r6, r18
    131e:	e6 01       	movw	r28, r12
    1320:	65 ea       	ldi	r22, 0xA5	; 165
    1322:	70 e0       	ldi	r23, 0x00	; 0
    1324:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1326:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1328:	0e 94 04 1d 	call	0x3a08	; 0x3a08 <memset>
    132c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    132e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1330:	21 e0       	ldi	r18, 0x01	; 1
    1332:	82 1a       	sub	r8, r18
    1334:	91 08       	sbc	r9, r1
    1336:	88 0e       	add	r8, r24
    1338:	99 1e       	adc	r9, r25
    133a:	a1 14       	cp	r10, r1
    133c:	b1 04       	cpc	r11, r1
    133e:	89 f4       	brne	.+34     	; 0x1362 <prvInitialiseNewTask+0x6a>
    1340:	15 c0       	rjmp	.+42     	; 0x136c <prvInitialiseNewTask+0x74>
    1342:	82 2f       	mov	r24, r18
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	f5 01       	movw	r30, r10
    1348:	e8 0f       	add	r30, r24
    134a:	f9 1f       	adc	r31, r25
    134c:	30 81       	ld	r19, Z
    134e:	de 01       	movw	r26, r28
    1350:	a8 0f       	add	r26, r24
    1352:	b9 1f       	adc	r27, r25
    1354:	5d 96       	adiw	r26, 0x1d	; 29
    1356:	3c 93       	st	X, r19
    1358:	80 81       	ld	r24, Z
    135a:	88 23       	and	r24, r24
    135c:	29 f0       	breq	.+10     	; 0x1368 <prvInitialiseNewTask+0x70>
    135e:	2f 5f       	subi	r18, 0xFF	; 255
    1360:	01 c0       	rjmp	.+2      	; 0x1364 <prvInitialiseNewTask+0x6c>
    1362:	20 e0       	ldi	r18, 0x00	; 0
    1364:	20 31       	cpi	r18, 0x10	; 16
    1366:	68 f3       	brcs	.-38     	; 0x1342 <prvInitialiseNewTask+0x4a>
    1368:	1c a6       	std	Y+44, r1	; 0x2c
    136a:	01 c0       	rjmp	.+2      	; 0x136e <prvInitialiseNewTask+0x76>
    136c:	1d 8e       	std	Y+29, r1	; 0x1d
    136e:	0a 30       	cpi	r16, 0x0A	; 10
    1370:	08 f0       	brcs	.+2      	; 0x1374 <prvInitialiseNewTask+0x7c>
    1372:	09 e0       	ldi	r16, 0x09	; 9
    1374:	0a 8f       	std	Y+26, r16	; 0x1a
    1376:	0d a7       	std	Y+45, r16	; 0x2d
    1378:	1e a6       	std	Y+46, r1	; 0x2e
    137a:	ce 01       	movw	r24, r28
    137c:	02 96       	adiw	r24, 0x02	; 2
    137e:	80 da       	rcall	.-2816   	; 0x880 <vListInitialiseItem>
    1380:	ce 01       	movw	r24, r28
    1382:	0e 96       	adiw	r24, 0x0e	; 14
    1384:	7d da       	rcall	.-2822   	; 0x880 <vListInitialiseItem>
    1386:	db 87       	std	Y+11, r29	; 0x0b
    1388:	ca 87       	std	Y+10, r28	; 0x0a
    138a:	8a e0       	ldi	r24, 0x0A	; 10
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	a0 e0       	ldi	r26, 0x00	; 0
    1390:	b0 e0       	ldi	r27, 0x00	; 0
    1392:	80 1b       	sub	r24, r16
    1394:	91 09       	sbc	r25, r1
    1396:	a1 09       	sbc	r26, r1
    1398:	b1 09       	sbc	r27, r1
    139a:	8e 87       	std	Y+14, r24	; 0x0e
    139c:	9f 87       	std	Y+15, r25	; 0x0f
    139e:	a8 8b       	std	Y+16, r26	; 0x10
    13a0:	b9 8b       	std	Y+17, r27	; 0x11
    13a2:	df 8b       	std	Y+23, r29	; 0x17
    13a4:	ce 8b       	std	Y+22, r28	; 0x16
    13a6:	18 aa       	std	Y+48, r1	; 0x30
    13a8:	1f a6       	std	Y+47, r1	; 0x2f
    13aa:	84 e0       	ldi	r24, 0x04	; 4
    13ac:	fe 01       	movw	r30, r28
    13ae:	f1 96       	adiw	r30, 0x31	; 49
    13b0:	df 01       	movw	r26, r30
    13b2:	1d 92       	st	X+, r1
    13b4:	8a 95       	dec	r24
    13b6:	e9 f7       	brne	.-6      	; 0x13b2 <prvInitialiseNewTask+0xba>
    13b8:	1d aa       	std	Y+53, r1	; 0x35
    13ba:	a3 01       	movw	r20, r6
    13bc:	b2 01       	movw	r22, r4
    13be:	c4 01       	movw	r24, r8
    13c0:	d3 da       	rcall	.-2650   	; 0x968 <pxPortInitialiseStack>
    13c2:	99 83       	std	Y+1, r25	; 0x01
    13c4:	88 83       	st	Y, r24
    13c6:	e1 14       	cp	r14, r1
    13c8:	f1 04       	cpc	r15, r1
    13ca:	19 f0       	breq	.+6      	; 0x13d2 <prvInitialiseNewTask+0xda>
    13cc:	f7 01       	movw	r30, r14
    13ce:	d1 83       	std	Z+1, r29	; 0x01
    13d0:	c0 83       	st	Z, r28
    13d2:	df 91       	pop	r29
    13d4:	cf 91       	pop	r28
    13d6:	0f 91       	pop	r16
    13d8:	ff 90       	pop	r15
    13da:	ef 90       	pop	r14
    13dc:	df 90       	pop	r13
    13de:	cf 90       	pop	r12
    13e0:	bf 90       	pop	r11
    13e2:	af 90       	pop	r10
    13e4:	9f 90       	pop	r9
    13e6:	8f 90       	pop	r8
    13e8:	7f 90       	pop	r7
    13ea:	6f 90       	pop	r6
    13ec:	5f 90       	pop	r5
    13ee:	4f 90       	pop	r4
    13f0:	08 95       	ret

000013f2 <prvInitialiseTaskLists>:
    13f2:	cf 93       	push	r28
    13f4:	c0 e0       	ldi	r28, 0x00	; 0
    13f6:	08 c0       	rjmp	.+16     	; 0x1408 <prvInitialiseTaskLists+0x16>
    13f8:	2b e0       	ldi	r18, 0x0B	; 11
    13fa:	c2 9f       	mul	r28, r18
    13fc:	c0 01       	movw	r24, r0
    13fe:	11 24       	eor	r1, r1
    1400:	8f 5a       	subi	r24, 0xAF	; 175
    1402:	9e 4e       	sbci	r25, 0xEE	; 238
    1404:	2c da       	rcall	.-2984   	; 0x85e <vListInitialise>
    1406:	cf 5f       	subi	r28, 0xFF	; 255
    1408:	ca 30       	cpi	r28, 0x0A	; 10
    140a:	b0 f3       	brcs	.-20     	; 0x13f8 <prvInitialiseTaskLists+0x6>
    140c:	86 e4       	ldi	r24, 0x46	; 70
    140e:	91 e1       	ldi	r25, 0x11	; 17
    1410:	26 da       	rcall	.-2996   	; 0x85e <vListInitialise>
    1412:	8b e3       	ldi	r24, 0x3B	; 59
    1414:	91 e1       	ldi	r25, 0x11	; 17
    1416:	23 da       	rcall	.-3002   	; 0x85e <vListInitialise>
    1418:	8c e2       	ldi	r24, 0x2C	; 44
    141a:	91 e1       	ldi	r25, 0x11	; 17
    141c:	20 da       	rcall	.-3008   	; 0x85e <vListInitialise>
    141e:	81 e2       	ldi	r24, 0x21	; 33
    1420:	91 e1       	ldi	r25, 0x11	; 17
    1422:	1d da       	rcall	.-3014   	; 0x85e <vListInitialise>
    1424:	85 e1       	ldi	r24, 0x15	; 21
    1426:	91 e1       	ldi	r25, 0x11	; 17
    1428:	1a da       	rcall	.-3020   	; 0x85e <vListInitialise>
    142a:	86 e4       	ldi	r24, 0x46	; 70
    142c:	91 e1       	ldi	r25, 0x11	; 17
    142e:	90 93 3a 11 	sts	0x113A, r25	; 0x80113a <pxDelayedTaskList+0x1>
    1432:	80 93 39 11 	sts	0x1139, r24	; 0x801139 <pxDelayedTaskList>
    1436:	8b e3       	ldi	r24, 0x3B	; 59
    1438:	91 e1       	ldi	r25, 0x11	; 17
    143a:	90 93 38 11 	sts	0x1138, r25	; 0x801138 <pxOverflowDelayedTaskList+0x1>
    143e:	80 93 37 11 	sts	0x1137, r24	; 0x801137 <pxOverflowDelayedTaskList>
    1442:	cf 91       	pop	r28
    1444:	08 95       	ret

00001446 <prvAddNewTaskToReadyList>:
    1446:	cf 93       	push	r28
    1448:	df 93       	push	r29
    144a:	ec 01       	movw	r28, r24
    144c:	0f b6       	in	r0, 0x3f	; 63
    144e:	f8 94       	cli
    1450:	0f 92       	push	r0
    1452:	80 91 14 11 	lds	r24, 0x1114	; 0x801114 <uxCurrentNumberOfTasks>
    1456:	8f 5f       	subi	r24, 0xFF	; 255
    1458:	80 93 14 11 	sts	0x1114, r24	; 0x801114 <uxCurrentNumberOfTasks>
    145c:	80 91 bf 11 	lds	r24, 0x11BF	; 0x8011bf <pxCurrentTCB>
    1460:	90 91 c0 11 	lds	r25, 0x11C0	; 0x8011c0 <pxCurrentTCB+0x1>
    1464:	89 2b       	or	r24, r25
    1466:	51 f4       	brne	.+20     	; 0x147c <prvAddNewTaskToReadyList+0x36>
    1468:	d0 93 c0 11 	sts	0x11C0, r29	; 0x8011c0 <pxCurrentTCB+0x1>
    146c:	c0 93 bf 11 	sts	0x11BF, r28	; 0x8011bf <pxCurrentTCB>
    1470:	80 91 14 11 	lds	r24, 0x1114	; 0x801114 <uxCurrentNumberOfTasks>
    1474:	81 30       	cpi	r24, 0x01	; 1
    1476:	91 f4       	brne	.+36     	; 0x149c <prvAddNewTaskToReadyList+0x56>
    1478:	bc df       	rcall	.-136    	; 0x13f2 <prvInitialiseTaskLists>
    147a:	10 c0       	rjmp	.+32     	; 0x149c <prvAddNewTaskToReadyList+0x56>
    147c:	80 91 0e 11 	lds	r24, 0x110E	; 0x80110e <xSchedulerRunning>
    1480:	81 11       	cpse	r24, r1
    1482:	0c c0       	rjmp	.+24     	; 0x149c <prvAddNewTaskToReadyList+0x56>
    1484:	e0 91 bf 11 	lds	r30, 0x11BF	; 0x8011bf <pxCurrentTCB>
    1488:	f0 91 c0 11 	lds	r31, 0x11C0	; 0x8011c0 <pxCurrentTCB+0x1>
    148c:	92 8d       	ldd	r25, Z+26	; 0x1a
    148e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1490:	89 17       	cp	r24, r25
    1492:	20 f0       	brcs	.+8      	; 0x149c <prvAddNewTaskToReadyList+0x56>
    1494:	d0 93 c0 11 	sts	0x11C0, r29	; 0x8011c0 <pxCurrentTCB+0x1>
    1498:	c0 93 bf 11 	sts	0x11BF, r28	; 0x8011bf <pxCurrentTCB>
    149c:	80 91 07 11 	lds	r24, 0x1107	; 0x801107 <uxTaskNumber>
    14a0:	8f 5f       	subi	r24, 0xFF	; 255
    14a2:	80 93 07 11 	sts	0x1107, r24	; 0x801107 <uxTaskNumber>
    14a6:	ea 8d       	ldd	r30, Y+26	; 0x1a
    14a8:	80 91 0f 11 	lds	r24, 0x110F	; 0x80110f <uxTopReadyPriority>
    14ac:	8e 17       	cp	r24, r30
    14ae:	10 f4       	brcc	.+4      	; 0x14b4 <prvAddNewTaskToReadyList+0x6e>
    14b0:	e0 93 0f 11 	sts	0x110F, r30	; 0x80110f <uxTopReadyPriority>
    14b4:	8b e0       	ldi	r24, 0x0B	; 11
    14b6:	8e 9f       	mul	r24, r30
    14b8:	f0 01       	movw	r30, r0
    14ba:	11 24       	eor	r1, r1
    14bc:	ef 5a       	subi	r30, 0xAF	; 175
    14be:	fe 4e       	sbci	r31, 0xEE	; 238
    14c0:	01 80       	ldd	r0, Z+1	; 0x01
    14c2:	f2 81       	ldd	r31, Z+2	; 0x02
    14c4:	e0 2d       	mov	r30, r0
    14c6:	ff 83       	std	Y+7, r31	; 0x07
    14c8:	ee 83       	std	Y+6, r30	; 0x06
    14ca:	26 81       	ldd	r18, Z+6	; 0x06
    14cc:	37 81       	ldd	r19, Z+7	; 0x07
    14ce:	39 87       	std	Y+9, r19	; 0x09
    14d0:	28 87       	std	Y+8, r18	; 0x08
    14d2:	a6 81       	ldd	r26, Z+6	; 0x06
    14d4:	b7 81       	ldd	r27, Z+7	; 0x07
    14d6:	9e 01       	movw	r18, r28
    14d8:	2e 5f       	subi	r18, 0xFE	; 254
    14da:	3f 4f       	sbci	r19, 0xFF	; 255
    14dc:	15 96       	adiw	r26, 0x05	; 5
    14de:	3c 93       	st	X, r19
    14e0:	2e 93       	st	-X, r18
    14e2:	14 97       	sbiw	r26, 0x04	; 4
    14e4:	37 83       	std	Z+7, r19	; 0x07
    14e6:	26 83       	std	Z+6, r18	; 0x06
    14e8:	ea 8d       	ldd	r30, Y+26	; 0x1a
    14ea:	8e 9f       	mul	r24, r30
    14ec:	f0 01       	movw	r30, r0
    14ee:	11 24       	eor	r1, r1
    14f0:	ef 5a       	subi	r30, 0xAF	; 175
    14f2:	fe 4e       	sbci	r31, 0xEE	; 238
    14f4:	fd 87       	std	Y+13, r31	; 0x0d
    14f6:	ec 87       	std	Y+12, r30	; 0x0c
    14f8:	80 81       	ld	r24, Z
    14fa:	8f 5f       	subi	r24, 0xFF	; 255
    14fc:	80 83       	st	Z, r24
    14fe:	0f 90       	pop	r0
    1500:	0f be       	out	0x3f, r0	; 63
    1502:	80 91 0e 11 	lds	r24, 0x110E	; 0x80110e <xSchedulerRunning>
    1506:	88 23       	and	r24, r24
    1508:	49 f0       	breq	.+18     	; 0x151c <prvAddNewTaskToReadyList+0xd6>
    150a:	e0 91 bf 11 	lds	r30, 0x11BF	; 0x8011bf <pxCurrentTCB>
    150e:	f0 91 c0 11 	lds	r31, 0x11C0	; 0x8011c0 <pxCurrentTCB+0x1>
    1512:	92 8d       	ldd	r25, Z+26	; 0x1a
    1514:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1516:	98 17       	cp	r25, r24
    1518:	08 f4       	brcc	.+2      	; 0x151c <prvAddNewTaskToReadyList+0xd6>
    151a:	6f da       	rcall	.-2850   	; 0x9fa <vPortYield>
    151c:	df 91       	pop	r29
    151e:	cf 91       	pop	r28
    1520:	08 95       	ret

00001522 <prvCheckTasksWaitingTermination>:
    1522:	cf 93       	push	r28
    1524:	df 93       	push	r29
    1526:	1a c0       	rjmp	.+52     	; 0x155c <prvCheckTasksWaitingTermination+0x3a>
    1528:	0f b6       	in	r0, 0x3f	; 63
    152a:	f8 94       	cli
    152c:	0f 92       	push	r0
    152e:	e0 91 28 11 	lds	r30, 0x1128	; 0x801128 <xTasksWaitingTermination+0x7>
    1532:	f0 91 29 11 	lds	r31, 0x1129	; 0x801129 <xTasksWaitingTermination+0x8>
    1536:	c0 85       	ldd	r28, Z+8	; 0x08
    1538:	d1 85       	ldd	r29, Z+9	; 0x09
    153a:	ce 01       	movw	r24, r28
    153c:	02 96       	adiw	r24, 0x02	; 2
    153e:	e1 d9       	rcall	.-3134   	; 0x902 <uxListRemove>
    1540:	80 91 14 11 	lds	r24, 0x1114	; 0x801114 <uxCurrentNumberOfTasks>
    1544:	81 50       	subi	r24, 0x01	; 1
    1546:	80 93 14 11 	sts	0x1114, r24	; 0x801114 <uxCurrentNumberOfTasks>
    154a:	80 91 20 11 	lds	r24, 0x1120	; 0x801120 <uxDeletedTasksWaitingCleanUp>
    154e:	81 50       	subi	r24, 0x01	; 1
    1550:	80 93 20 11 	sts	0x1120, r24	; 0x801120 <uxDeletedTasksWaitingCleanUp>
    1554:	0f 90       	pop	r0
    1556:	0f be       	out	0x3f, r0	; 63
    1558:	ce 01       	movw	r24, r28
    155a:	c3 de       	rcall	.-634    	; 0x12e2 <prvDeleteTCB>
    155c:	80 91 20 11 	lds	r24, 0x1120	; 0x801120 <uxDeletedTasksWaitingCleanUp>
    1560:	81 11       	cpse	r24, r1
    1562:	e2 cf       	rjmp	.-60     	; 0x1528 <prvCheckTasksWaitingTermination+0x6>
    1564:	df 91       	pop	r29
    1566:	cf 91       	pop	r28
    1568:	08 95       	ret

0000156a <prvAddCurrentTaskToDelayedList>:
    156a:	8f 92       	push	r8
    156c:	9f 92       	push	r9
    156e:	af 92       	push	r10
    1570:	bf 92       	push	r11
    1572:	cf 92       	push	r12
    1574:	df 92       	push	r13
    1576:	ef 92       	push	r14
    1578:	ff 92       	push	r15
    157a:	cf 93       	push	r28
    157c:	df 93       	push	r29
    157e:	6b 01       	movw	r12, r22
    1580:	7c 01       	movw	r14, r24
    1582:	c4 2f       	mov	r28, r20
    1584:	80 90 10 11 	lds	r8, 0x1110	; 0x801110 <xTickCount>
    1588:	90 90 11 11 	lds	r9, 0x1111	; 0x801111 <xTickCount+0x1>
    158c:	a0 90 12 11 	lds	r10, 0x1112	; 0x801112 <xTickCount+0x2>
    1590:	b0 90 13 11 	lds	r11, 0x1113	; 0x801113 <xTickCount+0x3>
    1594:	80 91 bf 11 	lds	r24, 0x11BF	; 0x8011bf <pxCurrentTCB>
    1598:	90 91 c0 11 	lds	r25, 0x11C0	; 0x8011c0 <pxCurrentTCB+0x1>
    159c:	02 96       	adiw	r24, 0x02	; 2
    159e:	b1 d9       	rcall	.-3230   	; 0x902 <uxListRemove>
    15a0:	8f ef       	ldi	r24, 0xFF	; 255
    15a2:	c8 16       	cp	r12, r24
    15a4:	d8 06       	cpc	r13, r24
    15a6:	e8 06       	cpc	r14, r24
    15a8:	f8 06       	cpc	r15, r24
    15aa:	b1 f5       	brne	.+108    	; 0x1618 <prvAddCurrentTaskToDelayedList+0xae>
    15ac:	cc 23       	and	r28, r28
    15ae:	a1 f1       	breq	.+104    	; 0x1618 <prvAddCurrentTaskToDelayedList+0xae>
    15b0:	e5 e1       	ldi	r30, 0x15	; 21
    15b2:	f1 e1       	ldi	r31, 0x11	; 17
    15b4:	a1 81       	ldd	r26, Z+1	; 0x01
    15b6:	b2 81       	ldd	r27, Z+2	; 0x02
    15b8:	c0 91 bf 11 	lds	r28, 0x11BF	; 0x8011bf <pxCurrentTCB>
    15bc:	d0 91 c0 11 	lds	r29, 0x11C0	; 0x8011c0 <pxCurrentTCB+0x1>
    15c0:	bf 83       	std	Y+7, r27	; 0x07
    15c2:	ae 83       	std	Y+6, r26	; 0x06
    15c4:	c0 91 bf 11 	lds	r28, 0x11BF	; 0x8011bf <pxCurrentTCB>
    15c8:	d0 91 c0 11 	lds	r29, 0x11C0	; 0x8011c0 <pxCurrentTCB+0x1>
    15cc:	16 96       	adiw	r26, 0x06	; 6
    15ce:	8d 91       	ld	r24, X+
    15d0:	9c 91       	ld	r25, X
    15d2:	17 97       	sbiw	r26, 0x07	; 7
    15d4:	99 87       	std	Y+9, r25	; 0x09
    15d6:	88 87       	std	Y+8, r24	; 0x08
    15d8:	16 96       	adiw	r26, 0x06	; 6
    15da:	cd 91       	ld	r28, X+
    15dc:	dc 91       	ld	r29, X
    15de:	17 97       	sbiw	r26, 0x07	; 7
    15e0:	80 91 bf 11 	lds	r24, 0x11BF	; 0x8011bf <pxCurrentTCB>
    15e4:	90 91 c0 11 	lds	r25, 0x11C0	; 0x8011c0 <pxCurrentTCB+0x1>
    15e8:	02 96       	adiw	r24, 0x02	; 2
    15ea:	9d 83       	std	Y+5, r25	; 0x05
    15ec:	8c 83       	std	Y+4, r24	; 0x04
    15ee:	80 91 bf 11 	lds	r24, 0x11BF	; 0x8011bf <pxCurrentTCB>
    15f2:	90 91 c0 11 	lds	r25, 0x11C0	; 0x8011c0 <pxCurrentTCB+0x1>
    15f6:	02 96       	adiw	r24, 0x02	; 2
    15f8:	17 96       	adiw	r26, 0x07	; 7
    15fa:	9c 93       	st	X, r25
    15fc:	8e 93       	st	-X, r24
    15fe:	16 97       	sbiw	r26, 0x06	; 6
    1600:	a0 91 bf 11 	lds	r26, 0x11BF	; 0x8011bf <pxCurrentTCB>
    1604:	b0 91 c0 11 	lds	r27, 0x11C0	; 0x8011c0 <pxCurrentTCB+0x1>
    1608:	1d 96       	adiw	r26, 0x0d	; 13
    160a:	fc 93       	st	X, r31
    160c:	ee 93       	st	-X, r30
    160e:	1c 97       	sbiw	r26, 0x0c	; 12
    1610:	80 81       	ld	r24, Z
    1612:	8f 5f       	subi	r24, 0xFF	; 255
    1614:	80 83       	st	Z, r24
    1616:	3d c0       	rjmp	.+122    	; 0x1692 <prvAddCurrentTaskToDelayedList+0x128>
    1618:	c8 0c       	add	r12, r8
    161a:	d9 1c       	adc	r13, r9
    161c:	ea 1c       	adc	r14, r10
    161e:	fb 1c       	adc	r15, r11
    1620:	e0 91 bf 11 	lds	r30, 0x11BF	; 0x8011bf <pxCurrentTCB>
    1624:	f0 91 c0 11 	lds	r31, 0x11C0	; 0x8011c0 <pxCurrentTCB+0x1>
    1628:	c2 82       	std	Z+2, r12	; 0x02
    162a:	d3 82       	std	Z+3, r13	; 0x03
    162c:	e4 82       	std	Z+4, r14	; 0x04
    162e:	f5 82       	std	Z+5, r15	; 0x05
    1630:	c8 14       	cp	r12, r8
    1632:	d9 04       	cpc	r13, r9
    1634:	ea 04       	cpc	r14, r10
    1636:	fb 04       	cpc	r15, r11
    1638:	60 f4       	brcc	.+24     	; 0x1652 <prvAddCurrentTaskToDelayedList+0xe8>
    163a:	60 91 bf 11 	lds	r22, 0x11BF	; 0x8011bf <pxCurrentTCB>
    163e:	70 91 c0 11 	lds	r23, 0x11C0	; 0x8011c0 <pxCurrentTCB+0x1>
    1642:	80 91 37 11 	lds	r24, 0x1137	; 0x801137 <pxOverflowDelayedTaskList>
    1646:	90 91 38 11 	lds	r25, 0x1138	; 0x801138 <pxOverflowDelayedTaskList+0x1>
    164a:	6e 5f       	subi	r22, 0xFE	; 254
    164c:	7f 4f       	sbci	r23, 0xFF	; 255
    164e:	1c d9       	rcall	.-3528   	; 0x888 <vListInsert>
    1650:	20 c0       	rjmp	.+64     	; 0x1692 <prvAddCurrentTaskToDelayedList+0x128>
    1652:	60 91 bf 11 	lds	r22, 0x11BF	; 0x8011bf <pxCurrentTCB>
    1656:	70 91 c0 11 	lds	r23, 0x11C0	; 0x8011c0 <pxCurrentTCB+0x1>
    165a:	80 91 39 11 	lds	r24, 0x1139	; 0x801139 <pxDelayedTaskList>
    165e:	90 91 3a 11 	lds	r25, 0x113A	; 0x80113a <pxDelayedTaskList+0x1>
    1662:	6e 5f       	subi	r22, 0xFE	; 254
    1664:	7f 4f       	sbci	r23, 0xFF	; 255
    1666:	10 d9       	rcall	.-3552   	; 0x888 <vListInsert>
    1668:	80 91 03 11 	lds	r24, 0x1103	; 0x801103 <xNextTaskUnblockTime>
    166c:	90 91 04 11 	lds	r25, 0x1104	; 0x801104 <xNextTaskUnblockTime+0x1>
    1670:	a0 91 05 11 	lds	r26, 0x1105	; 0x801105 <xNextTaskUnblockTime+0x2>
    1674:	b0 91 06 11 	lds	r27, 0x1106	; 0x801106 <xNextTaskUnblockTime+0x3>
    1678:	c8 16       	cp	r12, r24
    167a:	d9 06       	cpc	r13, r25
    167c:	ea 06       	cpc	r14, r26
    167e:	fb 06       	cpc	r15, r27
    1680:	40 f4       	brcc	.+16     	; 0x1692 <prvAddCurrentTaskToDelayedList+0x128>
    1682:	c0 92 03 11 	sts	0x1103, r12	; 0x801103 <xNextTaskUnblockTime>
    1686:	d0 92 04 11 	sts	0x1104, r13	; 0x801104 <xNextTaskUnblockTime+0x1>
    168a:	e0 92 05 11 	sts	0x1105, r14	; 0x801105 <xNextTaskUnblockTime+0x2>
    168e:	f0 92 06 11 	sts	0x1106, r15	; 0x801106 <xNextTaskUnblockTime+0x3>
    1692:	df 91       	pop	r29
    1694:	cf 91       	pop	r28
    1696:	ff 90       	pop	r15
    1698:	ef 90       	pop	r14
    169a:	df 90       	pop	r13
    169c:	cf 90       	pop	r12
    169e:	bf 90       	pop	r11
    16a0:	af 90       	pop	r10
    16a2:	9f 90       	pop	r9
    16a4:	8f 90       	pop	r8
    16a6:	08 95       	ret

000016a8 <xTaskCreate>:
    16a8:	2f 92       	push	r2
    16aa:	3f 92       	push	r3
    16ac:	4f 92       	push	r4
    16ae:	5f 92       	push	r5
    16b0:	6f 92       	push	r6
    16b2:	7f 92       	push	r7
    16b4:	8f 92       	push	r8
    16b6:	9f 92       	push	r9
    16b8:	af 92       	push	r10
    16ba:	bf 92       	push	r11
    16bc:	cf 92       	push	r12
    16be:	df 92       	push	r13
    16c0:	ef 92       	push	r14
    16c2:	ff 92       	push	r15
    16c4:	0f 93       	push	r16
    16c6:	cf 93       	push	r28
    16c8:	df 93       	push	r29
    16ca:	3c 01       	movw	r6, r24
    16cc:	1b 01       	movw	r2, r22
    16ce:	4a 01       	movw	r8, r20
    16d0:	29 01       	movw	r4, r18
    16d2:	ca 01       	movw	r24, r20
    16d4:	0e 94 4a 03 	call	0x694	; 0x694 <pvPortMalloc>
    16d8:	6c 01       	movw	r12, r24
    16da:	89 2b       	or	r24, r25
    16dc:	69 f0       	breq	.+26     	; 0x16f8 <xTaskCreate+0x50>
    16de:	86 e3       	ldi	r24, 0x36	; 54
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	0e 94 4a 03 	call	0x694	; 0x694 <pvPortMalloc>
    16e6:	ec 01       	movw	r28, r24
    16e8:	89 2b       	or	r24, r25
    16ea:	19 f0       	breq	.+6      	; 0x16f2 <xTaskCreate+0x4a>
    16ec:	dc 8e       	std	Y+28, r13	; 0x1c
    16ee:	cb 8e       	std	Y+27, r12	; 0x1b
    16f0:	05 c0       	rjmp	.+10     	; 0x16fc <xTaskCreate+0x54>
    16f2:	c6 01       	movw	r24, r12
    16f4:	78 d8       	rcall	.-3856   	; 0x7e6 <vPortFree>
    16f6:	02 c0       	rjmp	.+4      	; 0x16fc <xTaskCreate+0x54>
    16f8:	c0 e0       	ldi	r28, 0x00	; 0
    16fa:	d0 e0       	ldi	r29, 0x00	; 0
    16fc:	20 97       	sbiw	r28, 0x00	; 0
    16fe:	61 f0       	breq	.+24     	; 0x1718 <xTaskCreate+0x70>
    1700:	a1 2c       	mov	r10, r1
    1702:	b1 2c       	mov	r11, r1
    1704:	6e 01       	movw	r12, r28
    1706:	92 01       	movw	r18, r4
    1708:	a4 01       	movw	r20, r8
    170a:	b1 01       	movw	r22, r2
    170c:	c3 01       	movw	r24, r6
    170e:	f4 dd       	rcall	.-1048   	; 0x12f8 <prvInitialiseNewTask>
    1710:	ce 01       	movw	r24, r28
    1712:	99 de       	rcall	.-718    	; 0x1446 <prvAddNewTaskToReadyList>
    1714:	81 e0       	ldi	r24, 0x01	; 1
    1716:	01 c0       	rjmp	.+2      	; 0x171a <xTaskCreate+0x72>
    1718:	8f ef       	ldi	r24, 0xFF	; 255
    171a:	df 91       	pop	r29
    171c:	cf 91       	pop	r28
    171e:	0f 91       	pop	r16
    1720:	ff 90       	pop	r15
    1722:	ef 90       	pop	r14
    1724:	df 90       	pop	r13
    1726:	cf 90       	pop	r12
    1728:	bf 90       	pop	r11
    172a:	af 90       	pop	r10
    172c:	9f 90       	pop	r9
    172e:	8f 90       	pop	r8
    1730:	7f 90       	pop	r7
    1732:	6f 90       	pop	r6
    1734:	5f 90       	pop	r5
    1736:	4f 90       	pop	r4
    1738:	3f 90       	pop	r3
    173a:	2f 90       	pop	r2
    173c:	08 95       	ret

0000173e <vTaskStartScheduler>:
    173e:	ef 92       	push	r14
    1740:	ff 92       	push	r15
    1742:	0f 93       	push	r16
    1744:	0f 2e       	mov	r0, r31
    1746:	f1 e0       	ldi	r31, 0x01	; 1
    1748:	ef 2e       	mov	r14, r31
    174a:	f1 e1       	ldi	r31, 0x11	; 17
    174c:	ff 2e       	mov	r15, r31
    174e:	f0 2d       	mov	r31, r0
    1750:	00 e0       	ldi	r16, 0x00	; 0
    1752:	20 e0       	ldi	r18, 0x00	; 0
    1754:	30 e0       	ldi	r19, 0x00	; 0
    1756:	40 ec       	ldi	r20, 0xC0	; 192
    1758:	50 e0       	ldi	r21, 0x00	; 0
    175a:	6c e0       	ldi	r22, 0x0C	; 12
    175c:	73 e0       	ldi	r23, 0x03	; 3
    175e:	8c e7       	ldi	r24, 0x7C	; 124
    1760:	90 e0       	ldi	r25, 0x00	; 0
    1762:	a2 df       	rcall	.-188    	; 0x16a8 <xTaskCreate>
    1764:	81 30       	cpi	r24, 0x01	; 1
    1766:	09 f4       	brne	.+2      	; 0x176a <vTaskStartScheduler+0x2c>
    1768:	55 d6       	rcall	.+3242   	; 0x2414 <xTimerCreateTimerTask>
    176a:	81 30       	cpi	r24, 0x01	; 1
    176c:	f9 f4       	brne	.+62     	; 0x17ac <vTaskStartScheduler+0x6e>
    176e:	f8 94       	cli
    1770:	8f ef       	ldi	r24, 0xFF	; 255
    1772:	9f ef       	ldi	r25, 0xFF	; 255
    1774:	dc 01       	movw	r26, r24
    1776:	80 93 03 11 	sts	0x1103, r24	; 0x801103 <xNextTaskUnblockTime>
    177a:	90 93 04 11 	sts	0x1104, r25	; 0x801104 <xNextTaskUnblockTime+0x1>
    177e:	a0 93 05 11 	sts	0x1105, r26	; 0x801105 <xNextTaskUnblockTime+0x2>
    1782:	b0 93 06 11 	sts	0x1106, r27	; 0x801106 <xNextTaskUnblockTime+0x3>
    1786:	81 e0       	ldi	r24, 0x01	; 1
    1788:	80 93 0e 11 	sts	0x110E, r24	; 0x80110e <xSchedulerRunning>
    178c:	10 92 10 11 	sts	0x1110, r1	; 0x801110 <xTickCount>
    1790:	10 92 11 11 	sts	0x1111, r1	; 0x801111 <xTickCount+0x1>
    1794:	10 92 12 11 	sts	0x1112, r1	; 0x801112 <xTickCount+0x2>
    1798:	10 92 13 11 	sts	0x1113, r1	; 0x801113 <xTickCount+0x3>
    179c:	e0 91 bf 11 	lds	r30, 0x11BF	; 0x8011bf <pxCurrentTCB>
    17a0:	f0 91 c0 11 	lds	r31, 0x11C0	; 0x8011c0 <pxCurrentTCB+0x1>
    17a4:	87 a5       	ldd	r24, Z+47	; 0x2f
    17a6:	0e 94 c7 02 	call	0x58e	; 0x58e <task_switch_in>
    17aa:	f5 d8       	rcall	.-3606   	; 0x996 <xPortStartScheduler>
    17ac:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <uxTopUsedPriority>
    17b0:	0f 91       	pop	r16
    17b2:	ff 90       	pop	r15
    17b4:	ef 90       	pop	r14
    17b6:	08 95       	ret

000017b8 <vTaskSuspendAll>:
    17b8:	80 91 00 11 	lds	r24, 0x1100	; 0x801100 <uxSchedulerSuspended>
    17bc:	8f 5f       	subi	r24, 0xFF	; 255
    17be:	80 93 00 11 	sts	0x1100, r24	; 0x801100 <uxSchedulerSuspended>
    17c2:	08 95       	ret

000017c4 <xTaskGetTickCount>:
    17c4:	0f b6       	in	r0, 0x3f	; 63
    17c6:	f8 94       	cli
    17c8:	0f 92       	push	r0
    17ca:	60 91 10 11 	lds	r22, 0x1110	; 0x801110 <xTickCount>
    17ce:	70 91 11 11 	lds	r23, 0x1111	; 0x801111 <xTickCount+0x1>
    17d2:	80 91 12 11 	lds	r24, 0x1112	; 0x801112 <xTickCount+0x2>
    17d6:	90 91 13 11 	lds	r25, 0x1113	; 0x801113 <xTickCount+0x3>
    17da:	0f 90       	pop	r0
    17dc:	0f be       	out	0x3f, r0	; 63
    17de:	08 95       	ret

000017e0 <xTaskIncrementTick>:
    17e0:	cf 92       	push	r12
    17e2:	df 92       	push	r13
    17e4:	ef 92       	push	r14
    17e6:	ff 92       	push	r15
    17e8:	cf 93       	push	r28
    17ea:	df 93       	push	r29
    17ec:	80 91 00 11 	lds	r24, 0x1100	; 0x801100 <uxSchedulerSuspended>
    17f0:	81 11       	cpse	r24, r1
    17f2:	05 c1       	rjmp	.+522    	; 0x19fe <xTaskIncrementTick+0x21e>
    17f4:	c0 90 10 11 	lds	r12, 0x1110	; 0x801110 <xTickCount>
    17f8:	d0 90 11 11 	lds	r13, 0x1111	; 0x801111 <xTickCount+0x1>
    17fc:	e0 90 12 11 	lds	r14, 0x1112	; 0x801112 <xTickCount+0x2>
    1800:	f0 90 13 11 	lds	r15, 0x1113	; 0x801113 <xTickCount+0x3>
    1804:	8f ef       	ldi	r24, 0xFF	; 255
    1806:	c8 1a       	sub	r12, r24
    1808:	d8 0a       	sbc	r13, r24
    180a:	e8 0a       	sbc	r14, r24
    180c:	f8 0a       	sbc	r15, r24
    180e:	c0 92 10 11 	sts	0x1110, r12	; 0x801110 <xTickCount>
    1812:	d0 92 11 11 	sts	0x1111, r13	; 0x801111 <xTickCount+0x1>
    1816:	e0 92 12 11 	sts	0x1112, r14	; 0x801112 <xTickCount+0x2>
    181a:	f0 92 13 11 	sts	0x1113, r15	; 0x801113 <xTickCount+0x3>
    181e:	c1 14       	cp	r12, r1
    1820:	d1 04       	cpc	r13, r1
    1822:	e1 04       	cpc	r14, r1
    1824:	f1 04       	cpc	r15, r1
    1826:	b1 f4       	brne	.+44     	; 0x1854 <xTaskIncrementTick+0x74>
    1828:	80 91 39 11 	lds	r24, 0x1139	; 0x801139 <pxDelayedTaskList>
    182c:	90 91 3a 11 	lds	r25, 0x113A	; 0x80113a <pxDelayedTaskList+0x1>
    1830:	20 91 37 11 	lds	r18, 0x1137	; 0x801137 <pxOverflowDelayedTaskList>
    1834:	30 91 38 11 	lds	r19, 0x1138	; 0x801138 <pxOverflowDelayedTaskList+0x1>
    1838:	30 93 3a 11 	sts	0x113A, r19	; 0x80113a <pxDelayedTaskList+0x1>
    183c:	20 93 39 11 	sts	0x1139, r18	; 0x801139 <pxDelayedTaskList>
    1840:	90 93 38 11 	sts	0x1138, r25	; 0x801138 <pxOverflowDelayedTaskList+0x1>
    1844:	80 93 37 11 	sts	0x1137, r24	; 0x801137 <pxOverflowDelayedTaskList>
    1848:	80 91 08 11 	lds	r24, 0x1108	; 0x801108 <xNumOfOverflows>
    184c:	8f 5f       	subi	r24, 0xFF	; 255
    184e:	80 93 08 11 	sts	0x1108, r24	; 0x801108 <xNumOfOverflows>
    1852:	20 dd       	rcall	.-1472   	; 0x1294 <prvResetNextTaskUnblockTime>
    1854:	80 91 03 11 	lds	r24, 0x1103	; 0x801103 <xNextTaskUnblockTime>
    1858:	90 91 04 11 	lds	r25, 0x1104	; 0x801104 <xNextTaskUnblockTime+0x1>
    185c:	a0 91 05 11 	lds	r26, 0x1105	; 0x801105 <xNextTaskUnblockTime+0x2>
    1860:	b0 91 06 11 	lds	r27, 0x1106	; 0x801106 <xNextTaskUnblockTime+0x3>
    1864:	c8 16       	cp	r12, r24
    1866:	d9 06       	cpc	r13, r25
    1868:	ea 06       	cpc	r14, r26
    186a:	fb 06       	cpc	r15, r27
    186c:	20 f4       	brcc	.+8      	; 0x1876 <xTaskIncrementTick+0x96>
    186e:	80 e0       	ldi	r24, 0x00	; 0
    1870:	b2 c0       	rjmp	.+356    	; 0x19d6 <xTaskIncrementTick+0x1f6>
    1872:	81 e0       	ldi	r24, 0x01	; 1
    1874:	01 c0       	rjmp	.+2      	; 0x1878 <xTaskIncrementTick+0x98>
    1876:	80 e0       	ldi	r24, 0x00	; 0
    1878:	e0 91 39 11 	lds	r30, 0x1139	; 0x801139 <pxDelayedTaskList>
    187c:	f0 91 3a 11 	lds	r31, 0x113A	; 0x80113a <pxDelayedTaskList+0x1>
    1880:	90 81       	ld	r25, Z
    1882:	91 11       	cpse	r25, r1
    1884:	0c c0       	rjmp	.+24     	; 0x189e <xTaskIncrementTick+0xbe>
    1886:	4f ef       	ldi	r20, 0xFF	; 255
    1888:	5f ef       	ldi	r21, 0xFF	; 255
    188a:	ba 01       	movw	r22, r20
    188c:	40 93 03 11 	sts	0x1103, r20	; 0x801103 <xNextTaskUnblockTime>
    1890:	50 93 04 11 	sts	0x1104, r21	; 0x801104 <xNextTaskUnblockTime+0x1>
    1894:	60 93 05 11 	sts	0x1105, r22	; 0x801105 <xNextTaskUnblockTime+0x2>
    1898:	70 93 06 11 	sts	0x1106, r23	; 0x801106 <xNextTaskUnblockTime+0x3>
    189c:	9c c0       	rjmp	.+312    	; 0x19d6 <xTaskIncrementTick+0x1f6>
    189e:	e0 91 39 11 	lds	r30, 0x1139	; 0x801139 <pxDelayedTaskList>
    18a2:	f0 91 3a 11 	lds	r31, 0x113A	; 0x80113a <pxDelayedTaskList+0x1>
    18a6:	07 80       	ldd	r0, Z+7	; 0x07
    18a8:	f0 85       	ldd	r31, Z+8	; 0x08
    18aa:	e0 2d       	mov	r30, r0
    18ac:	00 84       	ldd	r0, Z+8	; 0x08
    18ae:	f1 85       	ldd	r31, Z+9	; 0x09
    18b0:	e0 2d       	mov	r30, r0
    18b2:	42 81       	ldd	r20, Z+2	; 0x02
    18b4:	53 81       	ldd	r21, Z+3	; 0x03
    18b6:	64 81       	ldd	r22, Z+4	; 0x04
    18b8:	75 81       	ldd	r23, Z+5	; 0x05
    18ba:	c4 16       	cp	r12, r20
    18bc:	d5 06       	cpc	r13, r21
    18be:	e6 06       	cpc	r14, r22
    18c0:	f7 06       	cpc	r15, r23
    18c2:	48 f4       	brcc	.+18     	; 0x18d6 <xTaskIncrementTick+0xf6>
    18c4:	40 93 03 11 	sts	0x1103, r20	; 0x801103 <xNextTaskUnblockTime>
    18c8:	50 93 04 11 	sts	0x1104, r21	; 0x801104 <xNextTaskUnblockTime+0x1>
    18cc:	60 93 05 11 	sts	0x1105, r22	; 0x801105 <xNextTaskUnblockTime+0x2>
    18d0:	70 93 06 11 	sts	0x1106, r23	; 0x801106 <xNextTaskUnblockTime+0x3>
    18d4:	80 c0       	rjmp	.+256    	; 0x19d6 <xTaskIncrementTick+0x1f6>
    18d6:	a4 85       	ldd	r26, Z+12	; 0x0c
    18d8:	b5 85       	ldd	r27, Z+13	; 0x0d
    18da:	c6 81       	ldd	r28, Z+6	; 0x06
    18dc:	d7 81       	ldd	r29, Z+7	; 0x07
    18de:	20 85       	ldd	r18, Z+8	; 0x08
    18e0:	31 85       	ldd	r19, Z+9	; 0x09
    18e2:	3f 83       	std	Y+7, r19	; 0x07
    18e4:	2e 83       	std	Y+6, r18	; 0x06
    18e6:	c0 85       	ldd	r28, Z+8	; 0x08
    18e8:	d1 85       	ldd	r29, Z+9	; 0x09
    18ea:	26 81       	ldd	r18, Z+6	; 0x06
    18ec:	37 81       	ldd	r19, Z+7	; 0x07
    18ee:	3d 83       	std	Y+5, r19	; 0x05
    18f0:	2c 83       	std	Y+4, r18	; 0x04
    18f2:	11 96       	adiw	r26, 0x01	; 1
    18f4:	4d 91       	ld	r20, X+
    18f6:	5c 91       	ld	r21, X
    18f8:	12 97       	sbiw	r26, 0x02	; 2
    18fa:	9f 01       	movw	r18, r30
    18fc:	2e 5f       	subi	r18, 0xFE	; 254
    18fe:	3f 4f       	sbci	r19, 0xFF	; 255
    1900:	42 17       	cp	r20, r18
    1902:	53 07       	cpc	r21, r19
    1904:	31 f4       	brne	.+12     	; 0x1912 <xTaskIncrementTick+0x132>
    1906:	40 85       	ldd	r20, Z+8	; 0x08
    1908:	51 85       	ldd	r21, Z+9	; 0x09
    190a:	12 96       	adiw	r26, 0x02	; 2
    190c:	5c 93       	st	X, r21
    190e:	4e 93       	st	-X, r20
    1910:	11 97       	sbiw	r26, 0x01	; 1
    1912:	15 86       	std	Z+13, r1	; 0x0d
    1914:	14 86       	std	Z+12, r1	; 0x0c
    1916:	9c 91       	ld	r25, X
    1918:	91 50       	subi	r25, 0x01	; 1
    191a:	9c 93       	st	X, r25
    191c:	a0 8d       	ldd	r26, Z+24	; 0x18
    191e:	b1 8d       	ldd	r27, Z+25	; 0x19
    1920:	10 97       	sbiw	r26, 0x00	; 0
    1922:	09 f1       	breq	.+66     	; 0x1966 <xTaskIncrementTick+0x186>
    1924:	c2 89       	ldd	r28, Z+18	; 0x12
    1926:	d3 89       	ldd	r29, Z+19	; 0x13
    1928:	44 89       	ldd	r20, Z+20	; 0x14
    192a:	55 89       	ldd	r21, Z+21	; 0x15
    192c:	5f 83       	std	Y+7, r21	; 0x07
    192e:	4e 83       	std	Y+6, r20	; 0x06
    1930:	c4 89       	ldd	r28, Z+20	; 0x14
    1932:	d5 89       	ldd	r29, Z+21	; 0x15
    1934:	42 89       	ldd	r20, Z+18	; 0x12
    1936:	53 89       	ldd	r21, Z+19	; 0x13
    1938:	5d 83       	std	Y+5, r21	; 0x05
    193a:	4c 83       	std	Y+4, r20	; 0x04
    193c:	11 96       	adiw	r26, 0x01	; 1
    193e:	6d 91       	ld	r22, X+
    1940:	7c 91       	ld	r23, X
    1942:	12 97       	sbiw	r26, 0x02	; 2
    1944:	af 01       	movw	r20, r30
    1946:	42 5f       	subi	r20, 0xF2	; 242
    1948:	5f 4f       	sbci	r21, 0xFF	; 255
    194a:	64 17       	cp	r22, r20
    194c:	75 07       	cpc	r23, r21
    194e:	31 f4       	brne	.+12     	; 0x195c <xTaskIncrementTick+0x17c>
    1950:	44 89       	ldd	r20, Z+20	; 0x14
    1952:	55 89       	ldd	r21, Z+21	; 0x15
    1954:	12 96       	adiw	r26, 0x02	; 2
    1956:	5c 93       	st	X, r21
    1958:	4e 93       	st	-X, r20
    195a:	11 97       	sbiw	r26, 0x01	; 1
    195c:	11 8e       	std	Z+25, r1	; 0x19
    195e:	10 8e       	std	Z+24, r1	; 0x18
    1960:	9c 91       	ld	r25, X
    1962:	91 50       	subi	r25, 0x01	; 1
    1964:	9c 93       	st	X, r25
    1966:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1968:	90 91 0f 11 	lds	r25, 0x110F	; 0x80110f <uxTopReadyPriority>
    196c:	9a 17       	cp	r25, r26
    196e:	10 f4       	brcc	.+4      	; 0x1974 <xTaskIncrementTick+0x194>
    1970:	a0 93 0f 11 	sts	0x110F, r26	; 0x80110f <uxTopReadyPriority>
    1974:	9b e0       	ldi	r25, 0x0B	; 11
    1976:	9a 9f       	mul	r25, r26
    1978:	d0 01       	movw	r26, r0
    197a:	11 24       	eor	r1, r1
    197c:	af 5a       	subi	r26, 0xAF	; 175
    197e:	be 4e       	sbci	r27, 0xEE	; 238
    1980:	11 96       	adiw	r26, 0x01	; 1
    1982:	0d 90       	ld	r0, X+
    1984:	bc 91       	ld	r27, X
    1986:	a0 2d       	mov	r26, r0
    1988:	b7 83       	std	Z+7, r27	; 0x07
    198a:	a6 83       	std	Z+6, r26	; 0x06
    198c:	16 96       	adiw	r26, 0x06	; 6
    198e:	4d 91       	ld	r20, X+
    1990:	5c 91       	ld	r21, X
    1992:	17 97       	sbiw	r26, 0x07	; 7
    1994:	51 87       	std	Z+9, r21	; 0x09
    1996:	40 87       	std	Z+8, r20	; 0x08
    1998:	16 96       	adiw	r26, 0x06	; 6
    199a:	cd 91       	ld	r28, X+
    199c:	dc 91       	ld	r29, X
    199e:	17 97       	sbiw	r26, 0x07	; 7
    19a0:	3d 83       	std	Y+5, r19	; 0x05
    19a2:	2c 83       	std	Y+4, r18	; 0x04
    19a4:	17 96       	adiw	r26, 0x07	; 7
    19a6:	3c 93       	st	X, r19
    19a8:	2e 93       	st	-X, r18
    19aa:	16 97       	sbiw	r26, 0x06	; 6
    19ac:	a2 8d       	ldd	r26, Z+26	; 0x1a
    19ae:	9a 9f       	mul	r25, r26
    19b0:	d0 01       	movw	r26, r0
    19b2:	11 24       	eor	r1, r1
    19b4:	af 5a       	subi	r26, 0xAF	; 175
    19b6:	be 4e       	sbci	r27, 0xEE	; 238
    19b8:	b5 87       	std	Z+13, r27	; 0x0d
    19ba:	a4 87       	std	Z+12, r26	; 0x0c
    19bc:	9c 91       	ld	r25, X
    19be:	9f 5f       	subi	r25, 0xFF	; 255
    19c0:	9c 93       	st	X, r25
    19c2:	22 8d       	ldd	r18, Z+26	; 0x1a
    19c4:	e0 91 bf 11 	lds	r30, 0x11BF	; 0x8011bf <pxCurrentTCB>
    19c8:	f0 91 c0 11 	lds	r31, 0x11C0	; 0x8011c0 <pxCurrentTCB+0x1>
    19cc:	92 8d       	ldd	r25, Z+26	; 0x1a
    19ce:	29 17       	cp	r18, r25
    19d0:	08 f0       	brcs	.+2      	; 0x19d4 <xTaskIncrementTick+0x1f4>
    19d2:	4f cf       	rjmp	.-354    	; 0x1872 <xTaskIncrementTick+0x92>
    19d4:	51 cf       	rjmp	.-350    	; 0x1878 <xTaskIncrementTick+0x98>
    19d6:	e0 91 bf 11 	lds	r30, 0x11BF	; 0x8011bf <pxCurrentTCB>
    19da:	f0 91 c0 11 	lds	r31, 0x11C0	; 0x8011c0 <pxCurrentTCB+0x1>
    19de:	e2 8d       	ldd	r30, Z+26	; 0x1a
    19e0:	9b e0       	ldi	r25, 0x0B	; 11
    19e2:	e9 9f       	mul	r30, r25
    19e4:	f0 01       	movw	r30, r0
    19e6:	11 24       	eor	r1, r1
    19e8:	ef 5a       	subi	r30, 0xAF	; 175
    19ea:	fe 4e       	sbci	r31, 0xEE	; 238
    19ec:	90 81       	ld	r25, Z
    19ee:	92 30       	cpi	r25, 0x02	; 2
    19f0:	08 f0       	brcs	.+2      	; 0x19f4 <xTaskIncrementTick+0x214>
    19f2:	81 e0       	ldi	r24, 0x01	; 1
    19f4:	90 91 09 11 	lds	r25, 0x1109	; 0x801109 <xYieldPending>
    19f8:	91 11       	cpse	r25, r1
    19fa:	16 c0       	rjmp	.+44     	; 0x1a28 <xTaskIncrementTick+0x248>
    19fc:	16 c0       	rjmp	.+44     	; 0x1a2a <xTaskIncrementTick+0x24a>
    19fe:	80 91 0a 11 	lds	r24, 0x110A	; 0x80110a <xPendedTicks>
    1a02:	90 91 0b 11 	lds	r25, 0x110B	; 0x80110b <xPendedTicks+0x1>
    1a06:	a0 91 0c 11 	lds	r26, 0x110C	; 0x80110c <xPendedTicks+0x2>
    1a0a:	b0 91 0d 11 	lds	r27, 0x110D	; 0x80110d <xPendedTicks+0x3>
    1a0e:	01 96       	adiw	r24, 0x01	; 1
    1a10:	a1 1d       	adc	r26, r1
    1a12:	b1 1d       	adc	r27, r1
    1a14:	80 93 0a 11 	sts	0x110A, r24	; 0x80110a <xPendedTicks>
    1a18:	90 93 0b 11 	sts	0x110B, r25	; 0x80110b <xPendedTicks+0x1>
    1a1c:	a0 93 0c 11 	sts	0x110C, r26	; 0x80110c <xPendedTicks+0x2>
    1a20:	b0 93 0d 11 	sts	0x110D, r27	; 0x80110d <xPendedTicks+0x3>
    1a24:	80 e0       	ldi	r24, 0x00	; 0
    1a26:	01 c0       	rjmp	.+2      	; 0x1a2a <xTaskIncrementTick+0x24a>
    1a28:	81 e0       	ldi	r24, 0x01	; 1
    1a2a:	df 91       	pop	r29
    1a2c:	cf 91       	pop	r28
    1a2e:	ff 90       	pop	r15
    1a30:	ef 90       	pop	r14
    1a32:	df 90       	pop	r13
    1a34:	cf 90       	pop	r12
    1a36:	08 95       	ret

00001a38 <xTaskResumeAll>:
    1a38:	cf 92       	push	r12
    1a3a:	df 92       	push	r13
    1a3c:	ef 92       	push	r14
    1a3e:	ff 92       	push	r15
    1a40:	cf 93       	push	r28
    1a42:	df 93       	push	r29
    1a44:	0f b6       	in	r0, 0x3f	; 63
    1a46:	f8 94       	cli
    1a48:	0f 92       	push	r0
    1a4a:	80 91 00 11 	lds	r24, 0x1100	; 0x801100 <uxSchedulerSuspended>
    1a4e:	81 50       	subi	r24, 0x01	; 1
    1a50:	80 93 00 11 	sts	0x1100, r24	; 0x801100 <uxSchedulerSuspended>
    1a54:	80 91 00 11 	lds	r24, 0x1100	; 0x801100 <uxSchedulerSuspended>
    1a58:	81 11       	cpse	r24, r1
    1a5a:	be c0       	rjmp	.+380    	; 0x1bd8 <xTaskResumeAll+0x1a0>
    1a5c:	80 91 14 11 	lds	r24, 0x1114	; 0x801114 <uxCurrentNumberOfTasks>
    1a60:	81 11       	cpse	r24, r1
    1a62:	88 c0       	rjmp	.+272    	; 0x1b74 <xTaskResumeAll+0x13c>
    1a64:	bc c0       	rjmp	.+376    	; 0x1bde <xTaskResumeAll+0x1a6>
    1a66:	e0 91 33 11 	lds	r30, 0x1133	; 0x801133 <xPendingReadyList+0x7>
    1a6a:	f0 91 34 11 	lds	r31, 0x1134	; 0x801134 <xPendingReadyList+0x8>
    1a6e:	00 84       	ldd	r0, Z+8	; 0x08
    1a70:	f1 85       	ldd	r31, Z+9	; 0x09
    1a72:	e0 2d       	mov	r30, r0
    1a74:	a0 8d       	ldd	r26, Z+24	; 0x18
    1a76:	b1 8d       	ldd	r27, Z+25	; 0x19
    1a78:	c2 89       	ldd	r28, Z+18	; 0x12
    1a7a:	d3 89       	ldd	r29, Z+19	; 0x13
    1a7c:	84 89       	ldd	r24, Z+20	; 0x14
    1a7e:	95 89       	ldd	r25, Z+21	; 0x15
    1a80:	9f 83       	std	Y+7, r25	; 0x07
    1a82:	8e 83       	std	Y+6, r24	; 0x06
    1a84:	c4 89       	ldd	r28, Z+20	; 0x14
    1a86:	d5 89       	ldd	r29, Z+21	; 0x15
    1a88:	82 89       	ldd	r24, Z+18	; 0x12
    1a8a:	93 89       	ldd	r25, Z+19	; 0x13
    1a8c:	9d 83       	std	Y+5, r25	; 0x05
    1a8e:	8c 83       	std	Y+4, r24	; 0x04
    1a90:	11 96       	adiw	r26, 0x01	; 1
    1a92:	2d 91       	ld	r18, X+
    1a94:	3c 91       	ld	r19, X
    1a96:	12 97       	sbiw	r26, 0x02	; 2
    1a98:	cf 01       	movw	r24, r30
    1a9a:	0e 96       	adiw	r24, 0x0e	; 14
    1a9c:	28 17       	cp	r18, r24
    1a9e:	39 07       	cpc	r19, r25
    1aa0:	31 f4       	brne	.+12     	; 0x1aae <xTaskResumeAll+0x76>
    1aa2:	84 89       	ldd	r24, Z+20	; 0x14
    1aa4:	95 89       	ldd	r25, Z+21	; 0x15
    1aa6:	12 96       	adiw	r26, 0x02	; 2
    1aa8:	9c 93       	st	X, r25
    1aaa:	8e 93       	st	-X, r24
    1aac:	11 97       	sbiw	r26, 0x01	; 1
    1aae:	11 8e       	std	Z+25, r1	; 0x19
    1ab0:	10 8e       	std	Z+24, r1	; 0x18
    1ab2:	8c 91       	ld	r24, X
    1ab4:	81 50       	subi	r24, 0x01	; 1
    1ab6:	8c 93       	st	X, r24
    1ab8:	a4 85       	ldd	r26, Z+12	; 0x0c
    1aba:	b5 85       	ldd	r27, Z+13	; 0x0d
    1abc:	c6 81       	ldd	r28, Z+6	; 0x06
    1abe:	d7 81       	ldd	r29, Z+7	; 0x07
    1ac0:	80 85       	ldd	r24, Z+8	; 0x08
    1ac2:	91 85       	ldd	r25, Z+9	; 0x09
    1ac4:	9f 83       	std	Y+7, r25	; 0x07
    1ac6:	8e 83       	std	Y+6, r24	; 0x06
    1ac8:	c0 85       	ldd	r28, Z+8	; 0x08
    1aca:	d1 85       	ldd	r29, Z+9	; 0x09
    1acc:	86 81       	ldd	r24, Z+6	; 0x06
    1ace:	97 81       	ldd	r25, Z+7	; 0x07
    1ad0:	9d 83       	std	Y+5, r25	; 0x05
    1ad2:	8c 83       	std	Y+4, r24	; 0x04
    1ad4:	11 96       	adiw	r26, 0x01	; 1
    1ad6:	8d 91       	ld	r24, X+
    1ad8:	9c 91       	ld	r25, X
    1ada:	12 97       	sbiw	r26, 0x02	; 2
    1adc:	9f 01       	movw	r18, r30
    1ade:	2e 5f       	subi	r18, 0xFE	; 254
    1ae0:	3f 4f       	sbci	r19, 0xFF	; 255
    1ae2:	82 17       	cp	r24, r18
    1ae4:	93 07       	cpc	r25, r19
    1ae6:	31 f4       	brne	.+12     	; 0x1af4 <xTaskResumeAll+0xbc>
    1ae8:	80 85       	ldd	r24, Z+8	; 0x08
    1aea:	91 85       	ldd	r25, Z+9	; 0x09
    1aec:	12 96       	adiw	r26, 0x02	; 2
    1aee:	9c 93       	st	X, r25
    1af0:	8e 93       	st	-X, r24
    1af2:	11 97       	sbiw	r26, 0x01	; 1
    1af4:	15 86       	std	Z+13, r1	; 0x0d
    1af6:	14 86       	std	Z+12, r1	; 0x0c
    1af8:	8c 91       	ld	r24, X
    1afa:	81 50       	subi	r24, 0x01	; 1
    1afc:	8c 93       	st	X, r24
    1afe:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1b00:	80 91 0f 11 	lds	r24, 0x110F	; 0x80110f <uxTopReadyPriority>
    1b04:	8a 17       	cp	r24, r26
    1b06:	10 f4       	brcc	.+4      	; 0x1b0c <xTaskResumeAll+0xd4>
    1b08:	a0 93 0f 11 	sts	0x110F, r26	; 0x80110f <uxTopReadyPriority>
    1b0c:	8b e0       	ldi	r24, 0x0B	; 11
    1b0e:	8a 9f       	mul	r24, r26
    1b10:	d0 01       	movw	r26, r0
    1b12:	11 24       	eor	r1, r1
    1b14:	af 5a       	subi	r26, 0xAF	; 175
    1b16:	be 4e       	sbci	r27, 0xEE	; 238
    1b18:	11 96       	adiw	r26, 0x01	; 1
    1b1a:	0d 90       	ld	r0, X+
    1b1c:	bc 91       	ld	r27, X
    1b1e:	a0 2d       	mov	r26, r0
    1b20:	b7 83       	std	Z+7, r27	; 0x07
    1b22:	a6 83       	std	Z+6, r26	; 0x06
    1b24:	16 96       	adiw	r26, 0x06	; 6
    1b26:	4d 91       	ld	r20, X+
    1b28:	5c 91       	ld	r21, X
    1b2a:	17 97       	sbiw	r26, 0x07	; 7
    1b2c:	51 87       	std	Z+9, r21	; 0x09
    1b2e:	40 87       	std	Z+8, r20	; 0x08
    1b30:	16 96       	adiw	r26, 0x06	; 6
    1b32:	cd 91       	ld	r28, X+
    1b34:	dc 91       	ld	r29, X
    1b36:	17 97       	sbiw	r26, 0x07	; 7
    1b38:	3d 83       	std	Y+5, r19	; 0x05
    1b3a:	2c 83       	std	Y+4, r18	; 0x04
    1b3c:	17 96       	adiw	r26, 0x07	; 7
    1b3e:	3c 93       	st	X, r19
    1b40:	2e 93       	st	-X, r18
    1b42:	16 97       	sbiw	r26, 0x06	; 6
    1b44:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1b46:	8a 9f       	mul	r24, r26
    1b48:	d0 01       	movw	r26, r0
    1b4a:	11 24       	eor	r1, r1
    1b4c:	af 5a       	subi	r26, 0xAF	; 175
    1b4e:	be 4e       	sbci	r27, 0xEE	; 238
    1b50:	b5 87       	std	Z+13, r27	; 0x0d
    1b52:	a4 87       	std	Z+12, r26	; 0x0c
    1b54:	8c 91       	ld	r24, X
    1b56:	8f 5f       	subi	r24, 0xFF	; 255
    1b58:	8c 93       	st	X, r24
    1b5a:	92 8d       	ldd	r25, Z+26	; 0x1a
    1b5c:	a0 91 bf 11 	lds	r26, 0x11BF	; 0x8011bf <pxCurrentTCB>
    1b60:	b0 91 c0 11 	lds	r27, 0x11C0	; 0x8011c0 <pxCurrentTCB+0x1>
    1b64:	5a 96       	adiw	r26, 0x1a	; 26
    1b66:	8c 91       	ld	r24, X
    1b68:	98 17       	cp	r25, r24
    1b6a:	30 f0       	brcs	.+12     	; 0x1b78 <xTaskResumeAll+0x140>
    1b6c:	81 e0       	ldi	r24, 0x01	; 1
    1b6e:	80 93 09 11 	sts	0x1109, r24	; 0x801109 <xYieldPending>
    1b72:	02 c0       	rjmp	.+4      	; 0x1b78 <xTaskResumeAll+0x140>
    1b74:	e0 e0       	ldi	r30, 0x00	; 0
    1b76:	f0 e0       	ldi	r31, 0x00	; 0
    1b78:	80 91 2c 11 	lds	r24, 0x112C	; 0x80112c <xPendingReadyList>
    1b7c:	81 11       	cpse	r24, r1
    1b7e:	73 cf       	rjmp	.-282    	; 0x1a66 <xTaskResumeAll+0x2e>
    1b80:	ef 2b       	or	r30, r31
    1b82:	09 f0       	breq	.+2      	; 0x1b86 <xTaskResumeAll+0x14e>
    1b84:	87 db       	rcall	.-2290   	; 0x1294 <prvResetNextTaskUnblockTime>
    1b86:	c0 90 0a 11 	lds	r12, 0x110A	; 0x80110a <xPendedTicks>
    1b8a:	d0 90 0b 11 	lds	r13, 0x110B	; 0x80110b <xPendedTicks+0x1>
    1b8e:	e0 90 0c 11 	lds	r14, 0x110C	; 0x80110c <xPendedTicks+0x2>
    1b92:	f0 90 0d 11 	lds	r15, 0x110D	; 0x80110d <xPendedTicks+0x3>
    1b96:	c1 14       	cp	r12, r1
    1b98:	d1 04       	cpc	r13, r1
    1b9a:	e1 04       	cpc	r14, r1
    1b9c:	f1 04       	cpc	r15, r1
    1b9e:	a1 f0       	breq	.+40     	; 0x1bc8 <xTaskResumeAll+0x190>
    1ba0:	1f de       	rcall	.-962    	; 0x17e0 <xTaskIncrementTick>
    1ba2:	88 23       	and	r24, r24
    1ba4:	19 f0       	breq	.+6      	; 0x1bac <xTaskResumeAll+0x174>
    1ba6:	81 e0       	ldi	r24, 0x01	; 1
    1ba8:	80 93 09 11 	sts	0x1109, r24	; 0x801109 <xYieldPending>
    1bac:	81 e0       	ldi	r24, 0x01	; 1
    1bae:	c8 1a       	sub	r12, r24
    1bb0:	d1 08       	sbc	r13, r1
    1bb2:	e1 08       	sbc	r14, r1
    1bb4:	f1 08       	sbc	r15, r1
    1bb6:	a1 f7       	brne	.-24     	; 0x1ba0 <xTaskResumeAll+0x168>
    1bb8:	10 92 0a 11 	sts	0x110A, r1	; 0x80110a <xPendedTicks>
    1bbc:	10 92 0b 11 	sts	0x110B, r1	; 0x80110b <xPendedTicks+0x1>
    1bc0:	10 92 0c 11 	sts	0x110C, r1	; 0x80110c <xPendedTicks+0x2>
    1bc4:	10 92 0d 11 	sts	0x110D, r1	; 0x80110d <xPendedTicks+0x3>
    1bc8:	80 91 09 11 	lds	r24, 0x1109	; 0x801109 <xYieldPending>
    1bcc:	88 23       	and	r24, r24
    1bce:	31 f0       	breq	.+12     	; 0x1bdc <xTaskResumeAll+0x1a4>
    1bd0:	0e 94 fd 04 	call	0x9fa	; 0x9fa <vPortYield>
    1bd4:	81 e0       	ldi	r24, 0x01	; 1
    1bd6:	03 c0       	rjmp	.+6      	; 0x1bde <xTaskResumeAll+0x1a6>
    1bd8:	80 e0       	ldi	r24, 0x00	; 0
    1bda:	01 c0       	rjmp	.+2      	; 0x1bde <xTaskResumeAll+0x1a6>
    1bdc:	80 e0       	ldi	r24, 0x00	; 0
    1bde:	0f 90       	pop	r0
    1be0:	0f be       	out	0x3f, r0	; 63
    1be2:	df 91       	pop	r29
    1be4:	cf 91       	pop	r28
    1be6:	ff 90       	pop	r15
    1be8:	ef 90       	pop	r14
    1bea:	df 90       	pop	r13
    1bec:	cf 90       	pop	r12
    1bee:	08 95       	ret

00001bf0 <vTaskDelay>:
    1bf0:	cf 92       	push	r12
    1bf2:	df 92       	push	r13
    1bf4:	ef 92       	push	r14
    1bf6:	ff 92       	push	r15
    1bf8:	6b 01       	movw	r12, r22
    1bfa:	7c 01       	movw	r14, r24
    1bfc:	67 2b       	or	r22, r23
    1bfe:	68 2b       	or	r22, r24
    1c00:	69 2b       	or	r22, r25
    1c02:	39 f0       	breq	.+14     	; 0x1c12 <vTaskDelay+0x22>
    1c04:	d9 dd       	rcall	.-1102   	; 0x17b8 <vTaskSuspendAll>
    1c06:	40 e0       	ldi	r20, 0x00	; 0
    1c08:	c7 01       	movw	r24, r14
    1c0a:	b6 01       	movw	r22, r12
    1c0c:	ae dc       	rcall	.-1700   	; 0x156a <prvAddCurrentTaskToDelayedList>
    1c0e:	14 df       	rcall	.-472    	; 0x1a38 <xTaskResumeAll>
    1c10:	01 c0       	rjmp	.+2      	; 0x1c14 <vTaskDelay+0x24>
    1c12:	80 e0       	ldi	r24, 0x00	; 0
    1c14:	81 11       	cpse	r24, r1
    1c16:	02 c0       	rjmp	.+4      	; 0x1c1c <vTaskDelay+0x2c>
    1c18:	0e 94 fd 04 	call	0x9fa	; 0x9fa <vPortYield>
    1c1c:	ff 90       	pop	r15
    1c1e:	ef 90       	pop	r14
    1c20:	df 90       	pop	r13
    1c22:	cf 90       	pop	r12
    1c24:	08 95       	ret

00001c26 <vTaskSetApplicationTaskTag>:
    1c26:	00 97       	sbiw	r24, 0x00	; 0
    1c28:	21 f4       	brne	.+8      	; 0x1c32 <vTaskSetApplicationTaskTag+0xc>
    1c2a:	80 91 bf 11 	lds	r24, 0x11BF	; 0x8011bf <pxCurrentTCB>
    1c2e:	90 91 c0 11 	lds	r25, 0x11C0	; 0x8011c0 <pxCurrentTCB+0x1>
    1c32:	0f b6       	in	r0, 0x3f	; 63
    1c34:	f8 94       	cli
    1c36:	0f 92       	push	r0
    1c38:	fc 01       	movw	r30, r24
    1c3a:	70 ab       	std	Z+48, r23	; 0x30
    1c3c:	67 a7       	std	Z+47, r22	; 0x2f
    1c3e:	0f 90       	pop	r0
    1c40:	0f be       	out	0x3f, r0	; 63
    1c42:	08 95       	ret

00001c44 <vTaskSwitchContext>:
    1c44:	80 91 00 11 	lds	r24, 0x1100	; 0x801100 <uxSchedulerSuspended>
    1c48:	88 23       	and	r24, r24
    1c4a:	21 f0       	breq	.+8      	; 0x1c54 <vTaskSwitchContext+0x10>
    1c4c:	81 e0       	ldi	r24, 0x01	; 1
    1c4e:	80 93 09 11 	sts	0x1109, r24	; 0x801109 <xYieldPending>
    1c52:	08 95       	ret
    1c54:	10 92 09 11 	sts	0x1109, r1	; 0x801109 <xYieldPending>
    1c58:	e0 91 bf 11 	lds	r30, 0x11BF	; 0x8011bf <pxCurrentTCB>
    1c5c:	f0 91 c0 11 	lds	r31, 0x11C0	; 0x8011c0 <pxCurrentTCB+0x1>
    1c60:	87 a5       	ldd	r24, Z+47	; 0x2f
    1c62:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <task_switch_out>
    1c66:	e0 91 bf 11 	lds	r30, 0x11BF	; 0x8011bf <pxCurrentTCB>
    1c6a:	f0 91 c0 11 	lds	r31, 0x11C0	; 0x8011c0 <pxCurrentTCB+0x1>
    1c6e:	20 81       	ld	r18, Z
    1c70:	31 81       	ldd	r19, Z+1	; 0x01
    1c72:	e0 91 bf 11 	lds	r30, 0x11BF	; 0x8011bf <pxCurrentTCB>
    1c76:	f0 91 c0 11 	lds	r31, 0x11C0	; 0x8011c0 <pxCurrentTCB+0x1>
    1c7a:	83 8d       	ldd	r24, Z+27	; 0x1b
    1c7c:	94 8d       	ldd	r25, Z+28	; 0x1c
    1c7e:	82 17       	cp	r24, r18
    1c80:	93 07       	cpc	r25, r19
    1c82:	58 f0       	brcs	.+22     	; 0x1c9a <vTaskSwitchContext+0x56>
    1c84:	60 91 bf 11 	lds	r22, 0x11BF	; 0x8011bf <pxCurrentTCB>
    1c88:	70 91 c0 11 	lds	r23, 0x11C0	; 0x8011c0 <pxCurrentTCB+0x1>
    1c8c:	63 5e       	subi	r22, 0xE3	; 227
    1c8e:	7f 4f       	sbci	r23, 0xFF	; 255
    1c90:	80 91 bf 11 	lds	r24, 0x11BF	; 0x8011bf <pxCurrentTCB>
    1c94:	90 91 c0 11 	lds	r25, 0x11C0	; 0x8011c0 <pxCurrentTCB+0x1>
    1c98:	44 d6       	rcall	.+3208   	; 0x2922 <vApplicationStackOverflowHook>
    1c9a:	80 91 0f 11 	lds	r24, 0x110F	; 0x80110f <uxTopReadyPriority>
    1c9e:	01 c0       	rjmp	.+2      	; 0x1ca2 <vTaskSwitchContext+0x5e>
    1ca0:	81 50       	subi	r24, 0x01	; 1
    1ca2:	28 2f       	mov	r18, r24
    1ca4:	30 e0       	ldi	r19, 0x00	; 0
    1ca6:	9b e0       	ldi	r25, 0x0B	; 11
    1ca8:	92 9f       	mul	r25, r18
    1caa:	f0 01       	movw	r30, r0
    1cac:	93 9f       	mul	r25, r19
    1cae:	f0 0d       	add	r31, r0
    1cb0:	11 24       	eor	r1, r1
    1cb2:	ef 5a       	subi	r30, 0xAF	; 175
    1cb4:	fe 4e       	sbci	r31, 0xEE	; 238
    1cb6:	90 81       	ld	r25, Z
    1cb8:	99 23       	and	r25, r25
    1cba:	91 f3       	breq	.-28     	; 0x1ca0 <vTaskSwitchContext+0x5c>
    1cbc:	9b e0       	ldi	r25, 0x0B	; 11
    1cbe:	92 9f       	mul	r25, r18
    1cc0:	a0 01       	movw	r20, r0
    1cc2:	93 9f       	mul	r25, r19
    1cc4:	50 0d       	add	r21, r0
    1cc6:	11 24       	eor	r1, r1
    1cc8:	df 01       	movw	r26, r30
    1cca:	01 80       	ldd	r0, Z+1	; 0x01
    1ccc:	f2 81       	ldd	r31, Z+2	; 0x02
    1cce:	e0 2d       	mov	r30, r0
    1cd0:	04 80       	ldd	r0, Z+4	; 0x04
    1cd2:	f5 81       	ldd	r31, Z+5	; 0x05
    1cd4:	e0 2d       	mov	r30, r0
    1cd6:	12 96       	adiw	r26, 0x02	; 2
    1cd8:	fc 93       	st	X, r31
    1cda:	ee 93       	st	-X, r30
    1cdc:	11 97       	sbiw	r26, 0x01	; 1
    1cde:	4c 5a       	subi	r20, 0xAC	; 172
    1ce0:	5e 4e       	sbci	r21, 0xEE	; 238
    1ce2:	e4 17       	cp	r30, r20
    1ce4:	f5 07       	cpc	r31, r21
    1ce6:	29 f4       	brne	.+10     	; 0x1cf2 <vTaskSwitchContext+0xae>
    1ce8:	44 81       	ldd	r20, Z+4	; 0x04
    1cea:	55 81       	ldd	r21, Z+5	; 0x05
    1cec:	fd 01       	movw	r30, r26
    1cee:	52 83       	std	Z+2, r21	; 0x02
    1cf0:	41 83       	std	Z+1, r20	; 0x01
    1cf2:	9b e0       	ldi	r25, 0x0B	; 11
    1cf4:	92 9f       	mul	r25, r18
    1cf6:	f0 01       	movw	r30, r0
    1cf8:	93 9f       	mul	r25, r19
    1cfa:	f0 0d       	add	r31, r0
    1cfc:	11 24       	eor	r1, r1
    1cfe:	ef 5a       	subi	r30, 0xAF	; 175
    1d00:	fe 4e       	sbci	r31, 0xEE	; 238
    1d02:	01 80       	ldd	r0, Z+1	; 0x01
    1d04:	f2 81       	ldd	r31, Z+2	; 0x02
    1d06:	e0 2d       	mov	r30, r0
    1d08:	20 85       	ldd	r18, Z+8	; 0x08
    1d0a:	31 85       	ldd	r19, Z+9	; 0x09
    1d0c:	30 93 c0 11 	sts	0x11C0, r19	; 0x8011c0 <pxCurrentTCB+0x1>
    1d10:	20 93 bf 11 	sts	0x11BF, r18	; 0x8011bf <pxCurrentTCB>
    1d14:	80 93 0f 11 	sts	0x110F, r24	; 0x80110f <uxTopReadyPriority>
    1d18:	e0 91 bf 11 	lds	r30, 0x11BF	; 0x8011bf <pxCurrentTCB>
    1d1c:	f0 91 c0 11 	lds	r31, 0x11C0	; 0x8011c0 <pxCurrentTCB+0x1>
    1d20:	87 a5       	ldd	r24, Z+47	; 0x2f
    1d22:	0c 94 c7 02 	jmp	0x58e	; 0x58e <task_switch_in>
    1d26:	08 95       	ret

00001d28 <vTaskPlaceOnEventList>:
    1d28:	cf 92       	push	r12
    1d2a:	df 92       	push	r13
    1d2c:	ef 92       	push	r14
    1d2e:	ff 92       	push	r15
    1d30:	6a 01       	movw	r12, r20
    1d32:	7b 01       	movw	r14, r22
    1d34:	60 91 bf 11 	lds	r22, 0x11BF	; 0x8011bf <pxCurrentTCB>
    1d38:	70 91 c0 11 	lds	r23, 0x11C0	; 0x8011c0 <pxCurrentTCB+0x1>
    1d3c:	62 5f       	subi	r22, 0xF2	; 242
    1d3e:	7f 4f       	sbci	r23, 0xFF	; 255
    1d40:	0e 94 44 04 	call	0x888	; 0x888 <vListInsert>
    1d44:	41 e0       	ldi	r20, 0x01	; 1
    1d46:	c7 01       	movw	r24, r14
    1d48:	b6 01       	movw	r22, r12
    1d4a:	0f dc       	rcall	.-2018   	; 0x156a <prvAddCurrentTaskToDelayedList>
    1d4c:	ff 90       	pop	r15
    1d4e:	ef 90       	pop	r14
    1d50:	df 90       	pop	r13
    1d52:	cf 90       	pop	r12
    1d54:	08 95       	ret

00001d56 <vTaskPlaceOnEventListRestricted>:
    1d56:	cf 93       	push	r28
    1d58:	df 93       	push	r29
    1d5a:	fc 01       	movw	r30, r24
    1d5c:	cb 01       	movw	r24, r22
    1d5e:	ba 01       	movw	r22, r20
    1d60:	a1 81       	ldd	r26, Z+1	; 0x01
    1d62:	b2 81       	ldd	r27, Z+2	; 0x02
    1d64:	c0 91 bf 11 	lds	r28, 0x11BF	; 0x8011bf <pxCurrentTCB>
    1d68:	d0 91 c0 11 	lds	r29, 0x11C0	; 0x8011c0 <pxCurrentTCB+0x1>
    1d6c:	bb 8b       	std	Y+19, r27	; 0x13
    1d6e:	aa 8b       	std	Y+18, r26	; 0x12
    1d70:	c0 91 bf 11 	lds	r28, 0x11BF	; 0x8011bf <pxCurrentTCB>
    1d74:	d0 91 c0 11 	lds	r29, 0x11C0	; 0x8011c0 <pxCurrentTCB+0x1>
    1d78:	16 96       	adiw	r26, 0x06	; 6
    1d7a:	4d 91       	ld	r20, X+
    1d7c:	5c 91       	ld	r21, X
    1d7e:	17 97       	sbiw	r26, 0x07	; 7
    1d80:	5d 8b       	std	Y+21, r21	; 0x15
    1d82:	4c 8b       	std	Y+20, r20	; 0x14
    1d84:	16 96       	adiw	r26, 0x06	; 6
    1d86:	cd 91       	ld	r28, X+
    1d88:	dc 91       	ld	r29, X
    1d8a:	17 97       	sbiw	r26, 0x07	; 7
    1d8c:	40 91 bf 11 	lds	r20, 0x11BF	; 0x8011bf <pxCurrentTCB>
    1d90:	50 91 c0 11 	lds	r21, 0x11C0	; 0x8011c0 <pxCurrentTCB+0x1>
    1d94:	42 5f       	subi	r20, 0xF2	; 242
    1d96:	5f 4f       	sbci	r21, 0xFF	; 255
    1d98:	5d 83       	std	Y+5, r21	; 0x05
    1d9a:	4c 83       	std	Y+4, r20	; 0x04
    1d9c:	40 91 bf 11 	lds	r20, 0x11BF	; 0x8011bf <pxCurrentTCB>
    1da0:	50 91 c0 11 	lds	r21, 0x11C0	; 0x8011c0 <pxCurrentTCB+0x1>
    1da4:	42 5f       	subi	r20, 0xF2	; 242
    1da6:	5f 4f       	sbci	r21, 0xFF	; 255
    1da8:	17 96       	adiw	r26, 0x07	; 7
    1daa:	5c 93       	st	X, r21
    1dac:	4e 93       	st	-X, r20
    1dae:	16 97       	sbiw	r26, 0x06	; 6
    1db0:	a0 91 bf 11 	lds	r26, 0x11BF	; 0x8011bf <pxCurrentTCB>
    1db4:	b0 91 c0 11 	lds	r27, 0x11C0	; 0x8011c0 <pxCurrentTCB+0x1>
    1db8:	59 96       	adiw	r26, 0x19	; 25
    1dba:	fc 93       	st	X, r31
    1dbc:	ee 93       	st	-X, r30
    1dbe:	58 97       	sbiw	r26, 0x18	; 24
    1dc0:	30 81       	ld	r19, Z
    1dc2:	3f 5f       	subi	r19, 0xFF	; 255
    1dc4:	30 83       	st	Z, r19
    1dc6:	22 23       	and	r18, r18
    1dc8:	19 f0       	breq	.+6      	; 0x1dd0 <vTaskPlaceOnEventListRestricted+0x7a>
    1dca:	6f ef       	ldi	r22, 0xFF	; 255
    1dcc:	7f ef       	ldi	r23, 0xFF	; 255
    1dce:	cb 01       	movw	r24, r22
    1dd0:	42 2f       	mov	r20, r18
    1dd2:	cb db       	rcall	.-2154   	; 0x156a <prvAddCurrentTaskToDelayedList>
    1dd4:	df 91       	pop	r29
    1dd6:	cf 91       	pop	r28
    1dd8:	08 95       	ret

00001dda <xTaskRemoveFromEventList>:
    1dda:	cf 93       	push	r28
    1ddc:	df 93       	push	r29
    1dde:	dc 01       	movw	r26, r24
    1de0:	17 96       	adiw	r26, 0x07	; 7
    1de2:	ed 91       	ld	r30, X+
    1de4:	fc 91       	ld	r31, X
    1de6:	18 97       	sbiw	r26, 0x08	; 8
    1de8:	00 84       	ldd	r0, Z+8	; 0x08
    1dea:	f1 85       	ldd	r31, Z+9	; 0x09
    1dec:	e0 2d       	mov	r30, r0
    1dee:	a0 8d       	ldd	r26, Z+24	; 0x18
    1df0:	b1 8d       	ldd	r27, Z+25	; 0x19
    1df2:	c2 89       	ldd	r28, Z+18	; 0x12
    1df4:	d3 89       	ldd	r29, Z+19	; 0x13
    1df6:	84 89       	ldd	r24, Z+20	; 0x14
    1df8:	95 89       	ldd	r25, Z+21	; 0x15
    1dfa:	9f 83       	std	Y+7, r25	; 0x07
    1dfc:	8e 83       	std	Y+6, r24	; 0x06
    1dfe:	c4 89       	ldd	r28, Z+20	; 0x14
    1e00:	d5 89       	ldd	r29, Z+21	; 0x15
    1e02:	82 89       	ldd	r24, Z+18	; 0x12
    1e04:	93 89       	ldd	r25, Z+19	; 0x13
    1e06:	9d 83       	std	Y+5, r25	; 0x05
    1e08:	8c 83       	std	Y+4, r24	; 0x04
    1e0a:	11 96       	adiw	r26, 0x01	; 1
    1e0c:	8d 91       	ld	r24, X+
    1e0e:	9c 91       	ld	r25, X
    1e10:	12 97       	sbiw	r26, 0x02	; 2
    1e12:	9f 01       	movw	r18, r30
    1e14:	22 5f       	subi	r18, 0xF2	; 242
    1e16:	3f 4f       	sbci	r19, 0xFF	; 255
    1e18:	82 17       	cp	r24, r18
    1e1a:	93 07       	cpc	r25, r19
    1e1c:	31 f4       	brne	.+12     	; 0x1e2a <xTaskRemoveFromEventList+0x50>
    1e1e:	84 89       	ldd	r24, Z+20	; 0x14
    1e20:	95 89       	ldd	r25, Z+21	; 0x15
    1e22:	12 96       	adiw	r26, 0x02	; 2
    1e24:	9c 93       	st	X, r25
    1e26:	8e 93       	st	-X, r24
    1e28:	11 97       	sbiw	r26, 0x01	; 1
    1e2a:	11 8e       	std	Z+25, r1	; 0x19
    1e2c:	10 8e       	std	Z+24, r1	; 0x18
    1e2e:	8c 91       	ld	r24, X
    1e30:	81 50       	subi	r24, 0x01	; 1
    1e32:	8c 93       	st	X, r24
    1e34:	80 91 00 11 	lds	r24, 0x1100	; 0x801100 <uxSchedulerSuspended>
    1e38:	81 11       	cpse	r24, r1
    1e3a:	52 c0       	rjmp	.+164    	; 0x1ee0 <xTaskRemoveFromEventList+0x106>
    1e3c:	a4 85       	ldd	r26, Z+12	; 0x0c
    1e3e:	b5 85       	ldd	r27, Z+13	; 0x0d
    1e40:	c6 81       	ldd	r28, Z+6	; 0x06
    1e42:	d7 81       	ldd	r29, Z+7	; 0x07
    1e44:	80 85       	ldd	r24, Z+8	; 0x08
    1e46:	91 85       	ldd	r25, Z+9	; 0x09
    1e48:	9f 83       	std	Y+7, r25	; 0x07
    1e4a:	8e 83       	std	Y+6, r24	; 0x06
    1e4c:	c0 85       	ldd	r28, Z+8	; 0x08
    1e4e:	d1 85       	ldd	r29, Z+9	; 0x09
    1e50:	86 81       	ldd	r24, Z+6	; 0x06
    1e52:	97 81       	ldd	r25, Z+7	; 0x07
    1e54:	9d 83       	std	Y+5, r25	; 0x05
    1e56:	8c 83       	std	Y+4, r24	; 0x04
    1e58:	11 96       	adiw	r26, 0x01	; 1
    1e5a:	8d 91       	ld	r24, X+
    1e5c:	9c 91       	ld	r25, X
    1e5e:	12 97       	sbiw	r26, 0x02	; 2
    1e60:	9f 01       	movw	r18, r30
    1e62:	2e 5f       	subi	r18, 0xFE	; 254
    1e64:	3f 4f       	sbci	r19, 0xFF	; 255
    1e66:	82 17       	cp	r24, r18
    1e68:	93 07       	cpc	r25, r19
    1e6a:	31 f4       	brne	.+12     	; 0x1e78 <xTaskRemoveFromEventList+0x9e>
    1e6c:	80 85       	ldd	r24, Z+8	; 0x08
    1e6e:	91 85       	ldd	r25, Z+9	; 0x09
    1e70:	12 96       	adiw	r26, 0x02	; 2
    1e72:	9c 93       	st	X, r25
    1e74:	8e 93       	st	-X, r24
    1e76:	11 97       	sbiw	r26, 0x01	; 1
    1e78:	15 86       	std	Z+13, r1	; 0x0d
    1e7a:	14 86       	std	Z+12, r1	; 0x0c
    1e7c:	8c 91       	ld	r24, X
    1e7e:	81 50       	subi	r24, 0x01	; 1
    1e80:	8c 93       	st	X, r24
    1e82:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1e84:	80 91 0f 11 	lds	r24, 0x110F	; 0x80110f <uxTopReadyPriority>
    1e88:	8a 17       	cp	r24, r26
    1e8a:	10 f4       	brcc	.+4      	; 0x1e90 <xTaskRemoveFromEventList+0xb6>
    1e8c:	a0 93 0f 11 	sts	0x110F, r26	; 0x80110f <uxTopReadyPriority>
    1e90:	8b e0       	ldi	r24, 0x0B	; 11
    1e92:	8a 9f       	mul	r24, r26
    1e94:	d0 01       	movw	r26, r0
    1e96:	11 24       	eor	r1, r1
    1e98:	af 5a       	subi	r26, 0xAF	; 175
    1e9a:	be 4e       	sbci	r27, 0xEE	; 238
    1e9c:	11 96       	adiw	r26, 0x01	; 1
    1e9e:	0d 90       	ld	r0, X+
    1ea0:	bc 91       	ld	r27, X
    1ea2:	a0 2d       	mov	r26, r0
    1ea4:	b7 83       	std	Z+7, r27	; 0x07
    1ea6:	a6 83       	std	Z+6, r26	; 0x06
    1ea8:	16 96       	adiw	r26, 0x06	; 6
    1eaa:	4d 91       	ld	r20, X+
    1eac:	5c 91       	ld	r21, X
    1eae:	17 97       	sbiw	r26, 0x07	; 7
    1eb0:	51 87       	std	Z+9, r21	; 0x09
    1eb2:	40 87       	std	Z+8, r20	; 0x08
    1eb4:	16 96       	adiw	r26, 0x06	; 6
    1eb6:	cd 91       	ld	r28, X+
    1eb8:	dc 91       	ld	r29, X
    1eba:	17 97       	sbiw	r26, 0x07	; 7
    1ebc:	3d 83       	std	Y+5, r19	; 0x05
    1ebe:	2c 83       	std	Y+4, r18	; 0x04
    1ec0:	17 96       	adiw	r26, 0x07	; 7
    1ec2:	3c 93       	st	X, r19
    1ec4:	2e 93       	st	-X, r18
    1ec6:	16 97       	sbiw	r26, 0x06	; 6
    1ec8:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1eca:	8a 9f       	mul	r24, r26
    1ecc:	d0 01       	movw	r26, r0
    1ece:	11 24       	eor	r1, r1
    1ed0:	af 5a       	subi	r26, 0xAF	; 175
    1ed2:	be 4e       	sbci	r27, 0xEE	; 238
    1ed4:	b5 87       	std	Z+13, r27	; 0x0d
    1ed6:	a4 87       	std	Z+12, r26	; 0x0c
    1ed8:	8c 91       	ld	r24, X
    1eda:	8f 5f       	subi	r24, 0xFF	; 255
    1edc:	8c 93       	st	X, r24
    1ede:	1c c0       	rjmp	.+56     	; 0x1f18 <xTaskRemoveFromEventList+0x13e>
    1ee0:	4c e2       	ldi	r20, 0x2C	; 44
    1ee2:	51 e1       	ldi	r21, 0x11	; 17
    1ee4:	da 01       	movw	r26, r20
    1ee6:	11 96       	adiw	r26, 0x01	; 1
    1ee8:	cd 91       	ld	r28, X+
    1eea:	dc 91       	ld	r29, X
    1eec:	12 97       	sbiw	r26, 0x02	; 2
    1eee:	d3 8b       	std	Z+19, r29	; 0x13
    1ef0:	c2 8b       	std	Z+18, r28	; 0x12
    1ef2:	8e 81       	ldd	r24, Y+6	; 0x06
    1ef4:	9f 81       	ldd	r25, Y+7	; 0x07
    1ef6:	95 8b       	std	Z+21, r25	; 0x15
    1ef8:	84 8b       	std	Z+20, r24	; 0x14
    1efa:	8e 81       	ldd	r24, Y+6	; 0x06
    1efc:	9f 81       	ldd	r25, Y+7	; 0x07
    1efe:	dc 01       	movw	r26, r24
    1f00:	15 96       	adiw	r26, 0x05	; 5
    1f02:	3c 93       	st	X, r19
    1f04:	2e 93       	st	-X, r18
    1f06:	14 97       	sbiw	r26, 0x04	; 4
    1f08:	3f 83       	std	Y+7, r19	; 0x07
    1f0a:	2e 83       	std	Y+6, r18	; 0x06
    1f0c:	51 8f       	std	Z+25, r21	; 0x19
    1f0e:	40 8f       	std	Z+24, r20	; 0x18
    1f10:	da 01       	movw	r26, r20
    1f12:	8c 91       	ld	r24, X
    1f14:	8f 5f       	subi	r24, 0xFF	; 255
    1f16:	8c 93       	st	X, r24
    1f18:	92 8d       	ldd	r25, Z+26	; 0x1a
    1f1a:	e0 91 bf 11 	lds	r30, 0x11BF	; 0x8011bf <pxCurrentTCB>
    1f1e:	f0 91 c0 11 	lds	r31, 0x11C0	; 0x8011c0 <pxCurrentTCB+0x1>
    1f22:	82 8d       	ldd	r24, Z+26	; 0x1a
    1f24:	89 17       	cp	r24, r25
    1f26:	20 f4       	brcc	.+8      	; 0x1f30 <xTaskRemoveFromEventList+0x156>
    1f28:	81 e0       	ldi	r24, 0x01	; 1
    1f2a:	80 93 09 11 	sts	0x1109, r24	; 0x801109 <xYieldPending>
    1f2e:	01 c0       	rjmp	.+2      	; 0x1f32 <xTaskRemoveFromEventList+0x158>
    1f30:	80 e0       	ldi	r24, 0x00	; 0
    1f32:	df 91       	pop	r29
    1f34:	cf 91       	pop	r28
    1f36:	08 95       	ret

00001f38 <vTaskInternalSetTimeOutState>:
    1f38:	20 91 08 11 	lds	r18, 0x1108	; 0x801108 <xNumOfOverflows>
    1f3c:	fc 01       	movw	r30, r24
    1f3e:	20 83       	st	Z, r18
    1f40:	40 91 10 11 	lds	r20, 0x1110	; 0x801110 <xTickCount>
    1f44:	50 91 11 11 	lds	r21, 0x1111	; 0x801111 <xTickCount+0x1>
    1f48:	60 91 12 11 	lds	r22, 0x1112	; 0x801112 <xTickCount+0x2>
    1f4c:	70 91 13 11 	lds	r23, 0x1113	; 0x801113 <xTickCount+0x3>
    1f50:	41 83       	std	Z+1, r20	; 0x01
    1f52:	52 83       	std	Z+2, r21	; 0x02
    1f54:	63 83       	std	Z+3, r22	; 0x03
    1f56:	74 83       	std	Z+4, r23	; 0x04
    1f58:	08 95       	ret

00001f5a <xTaskCheckForTimeOut>:
    1f5a:	8f 92       	push	r8
    1f5c:	9f 92       	push	r9
    1f5e:	af 92       	push	r10
    1f60:	bf 92       	push	r11
    1f62:	cf 92       	push	r12
    1f64:	df 92       	push	r13
    1f66:	ef 92       	push	r14
    1f68:	ff 92       	push	r15
    1f6a:	0f 93       	push	r16
    1f6c:	1f 93       	push	r17
    1f6e:	cf 93       	push	r28
    1f70:	df 93       	push	r29
    1f72:	fb 01       	movw	r30, r22
    1f74:	0f b6       	in	r0, 0x3f	; 63
    1f76:	f8 94       	cli
    1f78:	0f 92       	push	r0
    1f7a:	c0 90 10 11 	lds	r12, 0x1110	; 0x801110 <xTickCount>
    1f7e:	d0 90 11 11 	lds	r13, 0x1111	; 0x801111 <xTickCount+0x1>
    1f82:	e0 90 12 11 	lds	r14, 0x1112	; 0x801112 <xTickCount+0x2>
    1f86:	f0 90 13 11 	lds	r15, 0x1113	; 0x801113 <xTickCount+0x3>
    1f8a:	dc 01       	movw	r26, r24
    1f8c:	11 96       	adiw	r26, 0x01	; 1
    1f8e:	0d 91       	ld	r16, X+
    1f90:	1d 91       	ld	r17, X+
    1f92:	2d 91       	ld	r18, X+
    1f94:	3c 91       	ld	r19, X
    1f96:	14 97       	sbiw	r26, 0x04	; 4
    1f98:	46 01       	movw	r8, r12
    1f9a:	57 01       	movw	r10, r14
    1f9c:	80 1a       	sub	r8, r16
    1f9e:	91 0a       	sbc	r9, r17
    1fa0:	a2 0a       	sbc	r10, r18
    1fa2:	b3 0a       	sbc	r11, r19
    1fa4:	40 81       	ld	r20, Z
    1fa6:	51 81       	ldd	r21, Z+1	; 0x01
    1fa8:	62 81       	ldd	r22, Z+2	; 0x02
    1faa:	73 81       	ldd	r23, Z+3	; 0x03
    1fac:	4f 3f       	cpi	r20, 0xFF	; 255
    1fae:	bf ef       	ldi	r27, 0xFF	; 255
    1fb0:	5b 07       	cpc	r21, r27
    1fb2:	6b 07       	cpc	r22, r27
    1fb4:	7b 07       	cpc	r23, r27
    1fb6:	39 f1       	breq	.+78     	; 0x2006 <__DATA_REGION_LENGTH__+0x6>
    1fb8:	ec 01       	movw	r28, r24
    1fba:	b8 81       	ld	r27, Y
    1fbc:	a0 91 08 11 	lds	r26, 0x1108	; 0x801108 <xNumOfOverflows>
    1fc0:	ba 17       	cp	r27, r26
    1fc2:	59 f0       	breq	.+22     	; 0x1fda <xTaskCheckForTimeOut+0x80>
    1fc4:	c0 16       	cp	r12, r16
    1fc6:	d1 06       	cpc	r13, r17
    1fc8:	e2 06       	cpc	r14, r18
    1fca:	f3 06       	cpc	r15, r19
    1fcc:	30 f0       	brcs	.+12     	; 0x1fda <xTaskCheckForTimeOut+0x80>
    1fce:	10 82       	st	Z, r1
    1fd0:	11 82       	std	Z+1, r1	; 0x01
    1fd2:	12 82       	std	Z+2, r1	; 0x02
    1fd4:	13 82       	std	Z+3, r1	; 0x03
    1fd6:	81 e0       	ldi	r24, 0x01	; 1
    1fd8:	17 c0       	rjmp	.+46     	; 0x2008 <__DATA_REGION_LENGTH__+0x8>
    1fda:	84 16       	cp	r8, r20
    1fdc:	95 06       	cpc	r9, r21
    1fde:	a6 06       	cpc	r10, r22
    1fe0:	b7 06       	cpc	r11, r23
    1fe2:	58 f4       	brcc	.+22     	; 0x1ffa <xTaskCheckForTimeOut+0xa0>
    1fe4:	48 19       	sub	r20, r8
    1fe6:	59 09       	sbc	r21, r9
    1fe8:	6a 09       	sbc	r22, r10
    1fea:	7b 09       	sbc	r23, r11
    1fec:	40 83       	st	Z, r20
    1fee:	51 83       	std	Z+1, r21	; 0x01
    1ff0:	62 83       	std	Z+2, r22	; 0x02
    1ff2:	73 83       	std	Z+3, r23	; 0x03
    1ff4:	a1 df       	rcall	.-190    	; 0x1f38 <vTaskInternalSetTimeOutState>
    1ff6:	80 e0       	ldi	r24, 0x00	; 0
    1ff8:	07 c0       	rjmp	.+14     	; 0x2008 <__DATA_REGION_LENGTH__+0x8>
    1ffa:	10 82       	st	Z, r1
    1ffc:	11 82       	std	Z+1, r1	; 0x01
    1ffe:	12 82       	std	Z+2, r1	; 0x02
    2000:	13 82       	std	Z+3, r1	; 0x03
    2002:	81 e0       	ldi	r24, 0x01	; 1
    2004:	01 c0       	rjmp	.+2      	; 0x2008 <__DATA_REGION_LENGTH__+0x8>
    2006:	80 e0       	ldi	r24, 0x00	; 0
    2008:	0f 90       	pop	r0
    200a:	0f be       	out	0x3f, r0	; 63
    200c:	df 91       	pop	r29
    200e:	cf 91       	pop	r28
    2010:	1f 91       	pop	r17
    2012:	0f 91       	pop	r16
    2014:	ff 90       	pop	r15
    2016:	ef 90       	pop	r14
    2018:	df 90       	pop	r13
    201a:	cf 90       	pop	r12
    201c:	bf 90       	pop	r11
    201e:	af 90       	pop	r10
    2020:	9f 90       	pop	r9
    2022:	8f 90       	pop	r8
    2024:	08 95       	ret

00002026 <vTaskMissedYield>:
    2026:	81 e0       	ldi	r24, 0x01	; 1
    2028:	80 93 09 11 	sts	0x1109, r24	; 0x801109 <xYieldPending>
    202c:	08 95       	ret

0000202e <xTaskGetSchedulerState>:
    202e:	80 91 0e 11 	lds	r24, 0x110E	; 0x80110e <xSchedulerRunning>
    2032:	88 23       	and	r24, r24
    2034:	31 f0       	breq	.+12     	; 0x2042 <xTaskGetSchedulerState+0x14>
    2036:	80 91 00 11 	lds	r24, 0x1100	; 0x801100 <uxSchedulerSuspended>
    203a:	81 11       	cpse	r24, r1
    203c:	04 c0       	rjmp	.+8      	; 0x2046 <xTaskGetSchedulerState+0x18>
    203e:	82 e0       	ldi	r24, 0x02	; 2
    2040:	08 95       	ret
    2042:	81 e0       	ldi	r24, 0x01	; 1
    2044:	08 95       	ret
    2046:	80 e0       	ldi	r24, 0x00	; 0
    2048:	08 95       	ret

0000204a <xTaskPriorityInherit>:
    204a:	0f 93       	push	r16
    204c:	1f 93       	push	r17
    204e:	cf 93       	push	r28
    2050:	df 93       	push	r29
    2052:	fc 01       	movw	r30, r24
    2054:	89 2b       	or	r24, r25
    2056:	09 f4       	brne	.+2      	; 0x205a <xTaskPriorityInherit+0x10>
    2058:	77 c0       	rjmp	.+238    	; 0x2148 <xTaskPriorityInherit+0xfe>
    205a:	82 8d       	ldd	r24, Z+26	; 0x1a
    205c:	a0 91 bf 11 	lds	r26, 0x11BF	; 0x8011bf <pxCurrentTCB>
    2060:	b0 91 c0 11 	lds	r27, 0x11C0	; 0x8011c0 <pxCurrentTCB+0x1>
    2064:	5a 96       	adiw	r26, 0x1a	; 26
    2066:	9c 91       	ld	r25, X
    2068:	89 17       	cp	r24, r25
    206a:	08 f0       	brcs	.+2      	; 0x206e <xTaskPriorityInherit+0x24>
    206c:	63 c0       	rjmp	.+198    	; 0x2134 <xTaskPriorityInherit+0xea>
    206e:	46 85       	ldd	r20, Z+14	; 0x0e
    2070:	57 85       	ldd	r21, Z+15	; 0x0f
    2072:	60 89       	ldd	r22, Z+16	; 0x10
    2074:	71 89       	ldd	r23, Z+17	; 0x11
    2076:	77 23       	and	r23, r23
    2078:	94 f0       	brlt	.+36     	; 0x209e <xTaskPriorityInherit+0x54>
    207a:	a0 91 bf 11 	lds	r26, 0x11BF	; 0x8011bf <pxCurrentTCB>
    207e:	b0 91 c0 11 	lds	r27, 0x11C0	; 0x8011c0 <pxCurrentTCB+0x1>
    2082:	5a 96       	adiw	r26, 0x1a	; 26
    2084:	9c 91       	ld	r25, X
    2086:	4a e0       	ldi	r20, 0x0A	; 10
    2088:	50 e0       	ldi	r21, 0x00	; 0
    208a:	60 e0       	ldi	r22, 0x00	; 0
    208c:	70 e0       	ldi	r23, 0x00	; 0
    208e:	49 1b       	sub	r20, r25
    2090:	51 09       	sbc	r21, r1
    2092:	61 09       	sbc	r22, r1
    2094:	71 09       	sbc	r23, r1
    2096:	46 87       	std	Z+14, r20	; 0x0e
    2098:	57 87       	std	Z+15, r21	; 0x0f
    209a:	60 8b       	std	Z+16, r22	; 0x10
    209c:	71 8b       	std	Z+17, r23	; 0x11
    209e:	24 85       	ldd	r18, Z+12	; 0x0c
    20a0:	35 85       	ldd	r19, Z+13	; 0x0d
    20a2:	4b e0       	ldi	r20, 0x0B	; 11
    20a4:	84 9f       	mul	r24, r20
    20a6:	c0 01       	movw	r24, r0
    20a8:	11 24       	eor	r1, r1
    20aa:	8f 5a       	subi	r24, 0xAF	; 175
    20ac:	9e 4e       	sbci	r25, 0xEE	; 238
    20ae:	28 17       	cp	r18, r24
    20b0:	39 07       	cpc	r19, r25
    20b2:	b9 f5       	brne	.+110    	; 0x2122 <xTaskPriorityInherit+0xd8>
    20b4:	ef 01       	movw	r28, r30
    20b6:	8f 01       	movw	r16, r30
    20b8:	0e 5f       	subi	r16, 0xFE	; 254
    20ba:	1f 4f       	sbci	r17, 0xFF	; 255
    20bc:	c8 01       	movw	r24, r16
    20be:	0e 94 81 04 	call	0x902	; 0x902 <uxListRemove>
    20c2:	e0 91 bf 11 	lds	r30, 0x11BF	; 0x8011bf <pxCurrentTCB>
    20c6:	f0 91 c0 11 	lds	r31, 0x11C0	; 0x8011c0 <pxCurrentTCB+0x1>
    20ca:	e2 8d       	ldd	r30, Z+26	; 0x1a
    20cc:	ea 8f       	std	Y+26, r30	; 0x1a
    20ce:	80 91 0f 11 	lds	r24, 0x110F	; 0x80110f <uxTopReadyPriority>
    20d2:	8e 17       	cp	r24, r30
    20d4:	10 f4       	brcc	.+4      	; 0x20da <xTaskPriorityInherit+0x90>
    20d6:	e0 93 0f 11 	sts	0x110F, r30	; 0x80110f <uxTopReadyPriority>
    20da:	8b e0       	ldi	r24, 0x0B	; 11
    20dc:	8e 9f       	mul	r24, r30
    20de:	f0 01       	movw	r30, r0
    20e0:	11 24       	eor	r1, r1
    20e2:	ef 5a       	subi	r30, 0xAF	; 175
    20e4:	fe 4e       	sbci	r31, 0xEE	; 238
    20e6:	01 80       	ldd	r0, Z+1	; 0x01
    20e8:	f2 81       	ldd	r31, Z+2	; 0x02
    20ea:	e0 2d       	mov	r30, r0
    20ec:	ff 83       	std	Y+7, r31	; 0x07
    20ee:	ee 83       	std	Y+6, r30	; 0x06
    20f0:	26 81       	ldd	r18, Z+6	; 0x06
    20f2:	37 81       	ldd	r19, Z+7	; 0x07
    20f4:	39 87       	std	Y+9, r19	; 0x09
    20f6:	28 87       	std	Y+8, r18	; 0x08
    20f8:	a6 81       	ldd	r26, Z+6	; 0x06
    20fa:	b7 81       	ldd	r27, Z+7	; 0x07
    20fc:	15 96       	adiw	r26, 0x05	; 5
    20fe:	1c 93       	st	X, r17
    2100:	0e 93       	st	-X, r16
    2102:	14 97       	sbiw	r26, 0x04	; 4
    2104:	17 83       	std	Z+7, r17	; 0x07
    2106:	06 83       	std	Z+6, r16	; 0x06
    2108:	ea 8d       	ldd	r30, Y+26	; 0x1a
    210a:	8e 9f       	mul	r24, r30
    210c:	f0 01       	movw	r30, r0
    210e:	11 24       	eor	r1, r1
    2110:	ef 5a       	subi	r30, 0xAF	; 175
    2112:	fe 4e       	sbci	r31, 0xEE	; 238
    2114:	fd 87       	std	Y+13, r31	; 0x0d
    2116:	ec 87       	std	Y+12, r30	; 0x0c
    2118:	80 81       	ld	r24, Z
    211a:	8f 5f       	subi	r24, 0xFF	; 255
    211c:	80 83       	st	Z, r24
    211e:	81 e0       	ldi	r24, 0x01	; 1
    2120:	16 c0       	rjmp	.+44     	; 0x214e <xTaskPriorityInherit+0x104>
    2122:	a0 91 bf 11 	lds	r26, 0x11BF	; 0x8011bf <pxCurrentTCB>
    2126:	b0 91 c0 11 	lds	r27, 0x11C0	; 0x8011c0 <pxCurrentTCB+0x1>
    212a:	5a 96       	adiw	r26, 0x1a	; 26
    212c:	8c 91       	ld	r24, X
    212e:	82 8f       	std	Z+26, r24	; 0x1a
    2130:	81 e0       	ldi	r24, 0x01	; 1
    2132:	0d c0       	rjmp	.+26     	; 0x214e <xTaskPriorityInherit+0x104>
    2134:	95 a5       	ldd	r25, Z+45	; 0x2d
    2136:	e0 91 bf 11 	lds	r30, 0x11BF	; 0x8011bf <pxCurrentTCB>
    213a:	f0 91 c0 11 	lds	r31, 0x11C0	; 0x8011c0 <pxCurrentTCB+0x1>
    213e:	82 8d       	ldd	r24, Z+26	; 0x1a
    2140:	98 17       	cp	r25, r24
    2142:	20 f0       	brcs	.+8      	; 0x214c <xTaskPriorityInherit+0x102>
    2144:	80 e0       	ldi	r24, 0x00	; 0
    2146:	03 c0       	rjmp	.+6      	; 0x214e <xTaskPriorityInherit+0x104>
    2148:	80 e0       	ldi	r24, 0x00	; 0
    214a:	01 c0       	rjmp	.+2      	; 0x214e <xTaskPriorityInherit+0x104>
    214c:	81 e0       	ldi	r24, 0x01	; 1
    214e:	df 91       	pop	r29
    2150:	cf 91       	pop	r28
    2152:	1f 91       	pop	r17
    2154:	0f 91       	pop	r16
    2156:	08 95       	ret

00002158 <xTaskPriorityDisinherit>:
    2158:	0f 93       	push	r16
    215a:	1f 93       	push	r17
    215c:	cf 93       	push	r28
    215e:	df 93       	push	r29
    2160:	fc 01       	movw	r30, r24
    2162:	89 2b       	or	r24, r25
    2164:	09 f4       	brne	.+2      	; 0x2168 <xTaskPriorityDisinherit+0x10>
    2166:	49 c0       	rjmp	.+146    	; 0x21fa <xTaskPriorityDisinherit+0xa2>
    2168:	86 a5       	ldd	r24, Z+46	; 0x2e
    216a:	81 50       	subi	r24, 0x01	; 1
    216c:	86 a7       	std	Z+46, r24	; 0x2e
    216e:	22 8d       	ldd	r18, Z+26	; 0x1a
    2170:	95 a5       	ldd	r25, Z+45	; 0x2d
    2172:	29 17       	cp	r18, r25
    2174:	09 f4       	brne	.+2      	; 0x2178 <xTaskPriorityDisinherit+0x20>
    2176:	43 c0       	rjmp	.+134    	; 0x21fe <xTaskPriorityDisinherit+0xa6>
    2178:	81 11       	cpse	r24, r1
    217a:	43 c0       	rjmp	.+134    	; 0x2202 <__stack+0x3>
    217c:	ef 01       	movw	r28, r30
    217e:	8f 01       	movw	r16, r30
    2180:	0e 5f       	subi	r16, 0xFE	; 254
    2182:	1f 4f       	sbci	r17, 0xFF	; 255
    2184:	c8 01       	movw	r24, r16
    2186:	0e 94 81 04 	call	0x902	; 0x902 <uxListRemove>
    218a:	ed a5       	ldd	r30, Y+45	; 0x2d
    218c:	ea 8f       	std	Y+26, r30	; 0x1a
    218e:	8a e0       	ldi	r24, 0x0A	; 10
    2190:	90 e0       	ldi	r25, 0x00	; 0
    2192:	a0 e0       	ldi	r26, 0x00	; 0
    2194:	b0 e0       	ldi	r27, 0x00	; 0
    2196:	8e 1b       	sub	r24, r30
    2198:	91 09       	sbc	r25, r1
    219a:	a1 09       	sbc	r26, r1
    219c:	b1 09       	sbc	r27, r1
    219e:	8e 87       	std	Y+14, r24	; 0x0e
    21a0:	9f 87       	std	Y+15, r25	; 0x0f
    21a2:	a8 8b       	std	Y+16, r26	; 0x10
    21a4:	b9 8b       	std	Y+17, r27	; 0x11
    21a6:	80 91 0f 11 	lds	r24, 0x110F	; 0x80110f <uxTopReadyPriority>
    21aa:	8e 17       	cp	r24, r30
    21ac:	10 f4       	brcc	.+4      	; 0x21b2 <xTaskPriorityDisinherit+0x5a>
    21ae:	e0 93 0f 11 	sts	0x110F, r30	; 0x80110f <uxTopReadyPriority>
    21b2:	8b e0       	ldi	r24, 0x0B	; 11
    21b4:	8e 9f       	mul	r24, r30
    21b6:	f0 01       	movw	r30, r0
    21b8:	11 24       	eor	r1, r1
    21ba:	ef 5a       	subi	r30, 0xAF	; 175
    21bc:	fe 4e       	sbci	r31, 0xEE	; 238
    21be:	01 80       	ldd	r0, Z+1	; 0x01
    21c0:	f2 81       	ldd	r31, Z+2	; 0x02
    21c2:	e0 2d       	mov	r30, r0
    21c4:	ff 83       	std	Y+7, r31	; 0x07
    21c6:	ee 83       	std	Y+6, r30	; 0x06
    21c8:	26 81       	ldd	r18, Z+6	; 0x06
    21ca:	37 81       	ldd	r19, Z+7	; 0x07
    21cc:	39 87       	std	Y+9, r19	; 0x09
    21ce:	28 87       	std	Y+8, r18	; 0x08
    21d0:	a6 81       	ldd	r26, Z+6	; 0x06
    21d2:	b7 81       	ldd	r27, Z+7	; 0x07
    21d4:	15 96       	adiw	r26, 0x05	; 5
    21d6:	1c 93       	st	X, r17
    21d8:	0e 93       	st	-X, r16
    21da:	14 97       	sbiw	r26, 0x04	; 4
    21dc:	17 83       	std	Z+7, r17	; 0x07
    21de:	06 83       	std	Z+6, r16	; 0x06
    21e0:	ea 8d       	ldd	r30, Y+26	; 0x1a
    21e2:	8e 9f       	mul	r24, r30
    21e4:	f0 01       	movw	r30, r0
    21e6:	11 24       	eor	r1, r1
    21e8:	ef 5a       	subi	r30, 0xAF	; 175
    21ea:	fe 4e       	sbci	r31, 0xEE	; 238
    21ec:	fd 87       	std	Y+13, r31	; 0x0d
    21ee:	ec 87       	std	Y+12, r30	; 0x0c
    21f0:	80 81       	ld	r24, Z
    21f2:	8f 5f       	subi	r24, 0xFF	; 255
    21f4:	80 83       	st	Z, r24
    21f6:	81 e0       	ldi	r24, 0x01	; 1
    21f8:	05 c0       	rjmp	.+10     	; 0x2204 <__stack+0x5>
    21fa:	80 e0       	ldi	r24, 0x00	; 0
    21fc:	03 c0       	rjmp	.+6      	; 0x2204 <__stack+0x5>
    21fe:	80 e0       	ldi	r24, 0x00	; 0
    2200:	01 c0       	rjmp	.+2      	; 0x2204 <__stack+0x5>
    2202:	80 e0       	ldi	r24, 0x00	; 0
    2204:	df 91       	pop	r29
    2206:	cf 91       	pop	r28
    2208:	1f 91       	pop	r17
    220a:	0f 91       	pop	r16
    220c:	08 95       	ret

0000220e <vTaskPriorityDisinheritAfterTimeout>:
    220e:	0f 93       	push	r16
    2210:	1f 93       	push	r17
    2212:	cf 93       	push	r28
    2214:	df 93       	push	r29
    2216:	fc 01       	movw	r30, r24
    2218:	89 2b       	or	r24, r25
    221a:	09 f4       	brne	.+2      	; 0x221e <vTaskPriorityDisinheritAfterTimeout+0x10>
    221c:	5a c0       	rjmp	.+180    	; 0x22d2 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    221e:	85 a5       	ldd	r24, Z+45	; 0x2d
    2220:	86 17       	cp	r24, r22
    2222:	08 f4       	brcc	.+2      	; 0x2226 <vTaskPriorityDisinheritAfterTimeout+0x18>
    2224:	86 2f       	mov	r24, r22
    2226:	92 8d       	ldd	r25, Z+26	; 0x1a
    2228:	89 17       	cp	r24, r25
    222a:	09 f4       	brne	.+2      	; 0x222e <vTaskPriorityDisinheritAfterTimeout+0x20>
    222c:	52 c0       	rjmp	.+164    	; 0x22d2 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    222e:	26 a5       	ldd	r18, Z+46	; 0x2e
    2230:	21 30       	cpi	r18, 0x01	; 1
    2232:	09 f0       	breq	.+2      	; 0x2236 <vTaskPriorityDisinheritAfterTimeout+0x28>
    2234:	4e c0       	rjmp	.+156    	; 0x22d2 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    2236:	82 8f       	std	Z+26, r24	; 0x1a
    2238:	46 85       	ldd	r20, Z+14	; 0x0e
    223a:	57 85       	ldd	r21, Z+15	; 0x0f
    223c:	60 89       	ldd	r22, Z+16	; 0x10
    223e:	71 89       	ldd	r23, Z+17	; 0x11
    2240:	77 23       	and	r23, r23
    2242:	64 f0       	brlt	.+24     	; 0x225c <vTaskPriorityDisinheritAfterTimeout+0x4e>
    2244:	4a e0       	ldi	r20, 0x0A	; 10
    2246:	50 e0       	ldi	r21, 0x00	; 0
    2248:	60 e0       	ldi	r22, 0x00	; 0
    224a:	70 e0       	ldi	r23, 0x00	; 0
    224c:	48 1b       	sub	r20, r24
    224e:	51 09       	sbc	r21, r1
    2250:	61 09       	sbc	r22, r1
    2252:	71 09       	sbc	r23, r1
    2254:	46 87       	std	Z+14, r20	; 0x0e
    2256:	57 87       	std	Z+15, r21	; 0x0f
    2258:	60 8b       	std	Z+16, r22	; 0x10
    225a:	71 8b       	std	Z+17, r23	; 0x11
    225c:	24 85       	ldd	r18, Z+12	; 0x0c
    225e:	35 85       	ldd	r19, Z+13	; 0x0d
    2260:	4b e0       	ldi	r20, 0x0B	; 11
    2262:	94 9f       	mul	r25, r20
    2264:	c0 01       	movw	r24, r0
    2266:	11 24       	eor	r1, r1
    2268:	8f 5a       	subi	r24, 0xAF	; 175
    226a:	9e 4e       	sbci	r25, 0xEE	; 238
    226c:	28 17       	cp	r18, r24
    226e:	39 07       	cpc	r19, r25
    2270:	81 f5       	brne	.+96     	; 0x22d2 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    2272:	ef 01       	movw	r28, r30
    2274:	8f 01       	movw	r16, r30
    2276:	0e 5f       	subi	r16, 0xFE	; 254
    2278:	1f 4f       	sbci	r17, 0xFF	; 255
    227a:	c8 01       	movw	r24, r16
    227c:	0e 94 81 04 	call	0x902	; 0x902 <uxListRemove>
    2280:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2282:	80 91 0f 11 	lds	r24, 0x110F	; 0x80110f <uxTopReadyPriority>
    2286:	8e 17       	cp	r24, r30
    2288:	10 f4       	brcc	.+4      	; 0x228e <vTaskPriorityDisinheritAfterTimeout+0x80>
    228a:	e0 93 0f 11 	sts	0x110F, r30	; 0x80110f <uxTopReadyPriority>
    228e:	8b e0       	ldi	r24, 0x0B	; 11
    2290:	8e 9f       	mul	r24, r30
    2292:	f0 01       	movw	r30, r0
    2294:	11 24       	eor	r1, r1
    2296:	ef 5a       	subi	r30, 0xAF	; 175
    2298:	fe 4e       	sbci	r31, 0xEE	; 238
    229a:	01 80       	ldd	r0, Z+1	; 0x01
    229c:	f2 81       	ldd	r31, Z+2	; 0x02
    229e:	e0 2d       	mov	r30, r0
    22a0:	ff 83       	std	Y+7, r31	; 0x07
    22a2:	ee 83       	std	Y+6, r30	; 0x06
    22a4:	26 81       	ldd	r18, Z+6	; 0x06
    22a6:	37 81       	ldd	r19, Z+7	; 0x07
    22a8:	39 87       	std	Y+9, r19	; 0x09
    22aa:	28 87       	std	Y+8, r18	; 0x08
    22ac:	a6 81       	ldd	r26, Z+6	; 0x06
    22ae:	b7 81       	ldd	r27, Z+7	; 0x07
    22b0:	15 96       	adiw	r26, 0x05	; 5
    22b2:	1c 93       	st	X, r17
    22b4:	0e 93       	st	-X, r16
    22b6:	14 97       	sbiw	r26, 0x04	; 4
    22b8:	17 83       	std	Z+7, r17	; 0x07
    22ba:	06 83       	std	Z+6, r16	; 0x06
    22bc:	ea 8d       	ldd	r30, Y+26	; 0x1a
    22be:	8e 9f       	mul	r24, r30
    22c0:	f0 01       	movw	r30, r0
    22c2:	11 24       	eor	r1, r1
    22c4:	ef 5a       	subi	r30, 0xAF	; 175
    22c6:	fe 4e       	sbci	r31, 0xEE	; 238
    22c8:	fd 87       	std	Y+13, r31	; 0x0d
    22ca:	ec 87       	std	Y+12, r30	; 0x0c
    22cc:	80 81       	ld	r24, Z
    22ce:	8f 5f       	subi	r24, 0xFF	; 255
    22d0:	80 83       	st	Z, r24
    22d2:	df 91       	pop	r29
    22d4:	cf 91       	pop	r28
    22d6:	1f 91       	pop	r17
    22d8:	0f 91       	pop	r16
    22da:	08 95       	ret

000022dc <pvTaskIncrementMutexHeldCount>:

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
    22dc:	80 91 bf 11 	lds	r24, 0x11BF	; 0x8011bf <pxCurrentTCB>
    22e0:	90 91 c0 11 	lds	r25, 0x11C0	; 0x8011c0 <pxCurrentTCB+0x1>
    22e4:	89 2b       	or	r24, r25
    22e6:	39 f0       	breq	.+14     	; 0x22f6 <pvTaskIncrementMutexHeldCount+0x1a>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
    22e8:	e0 91 bf 11 	lds	r30, 0x11BF	; 0x8011bf <pxCurrentTCB>
    22ec:	f0 91 c0 11 	lds	r31, 0x11C0	; 0x8011c0 <pxCurrentTCB+0x1>
    22f0:	86 a5       	ldd	r24, Z+46	; 0x2e
    22f2:	8f 5f       	subi	r24, 0xFF	; 255
    22f4:	86 a7       	std	Z+46, r24	; 0x2e
        }

        return ( TaskHandle_t ) pxCurrentTCB;
    22f6:	80 91 bf 11 	lds	r24, 0x11BF	; 0x8011bf <pxCurrentTCB>
    22fa:	90 91 c0 11 	lds	r25, 0x11C0	; 0x8011c0 <pxCurrentTCB+0x1>
    }
    22fe:	08 95       	ret

00002300 <prvGetNextExpireTime>:
    2300:	dc 01       	movw	r26, r24
    2302:	e0 91 cb 11 	lds	r30, 0x11CB	; 0x8011cb <pxCurrentTimerList>
    2306:	f0 91 cc 11 	lds	r31, 0x11CC	; 0x8011cc <pxCurrentTimerList+0x1>
    230a:	80 81       	ld	r24, Z
    230c:	91 e0       	ldi	r25, 0x01	; 1
    230e:	81 11       	cpse	r24, r1
    2310:	90 e0       	ldi	r25, 0x00	; 0
    2312:	9c 93       	st	X, r25
    2314:	91 11       	cpse	r25, r1
    2316:	08 c0       	rjmp	.+16     	; 0x2328 <prvGetNextExpireTime+0x28>
    2318:	07 80       	ldd	r0, Z+7	; 0x07
    231a:	f0 85       	ldd	r31, Z+8	; 0x08
    231c:	e0 2d       	mov	r30, r0
    231e:	60 81       	ld	r22, Z
    2320:	71 81       	ldd	r23, Z+1	; 0x01
    2322:	82 81       	ldd	r24, Z+2	; 0x02
    2324:	93 81       	ldd	r25, Z+3	; 0x03
    2326:	08 95       	ret
    2328:	60 e0       	ldi	r22, 0x00	; 0
    232a:	70 e0       	ldi	r23, 0x00	; 0
    232c:	cb 01       	movw	r24, r22
    232e:	08 95       	ret

00002330 <prvInsertTimerInActiveList>:
    2330:	cf 92       	push	r12
    2332:	df 92       	push	r13
    2334:	ef 92       	push	r14
    2336:	ff 92       	push	r15
    2338:	0f 93       	push	r16
    233a:	1f 93       	push	r17
    233c:	fc 01       	movw	r30, r24
    233e:	42 83       	std	Z+2, r20	; 0x02
    2340:	53 83       	std	Z+3, r21	; 0x03
    2342:	64 83       	std	Z+4, r22	; 0x04
    2344:	75 83       	std	Z+5, r23	; 0x05
    2346:	93 87       	std	Z+11, r25	; 0x0b
    2348:	82 87       	std	Z+10, r24	; 0x0a
    234a:	04 17       	cp	r16, r20
    234c:	15 07       	cpc	r17, r21
    234e:	26 07       	cpc	r18, r22
    2350:	37 07       	cpc	r19, r23
    2352:	c0 f0       	brcs	.+48     	; 0x2384 <prvInsertTimerInActiveList+0x54>
    2354:	0c 19       	sub	r16, r12
    2356:	1d 09       	sbc	r17, r13
    2358:	2e 09       	sbc	r18, r14
    235a:	3f 09       	sbc	r19, r15
    235c:	86 85       	ldd	r24, Z+14	; 0x0e
    235e:	97 85       	ldd	r25, Z+15	; 0x0f
    2360:	a0 89       	ldd	r26, Z+16	; 0x10
    2362:	b1 89       	ldd	r27, Z+17	; 0x11
    2364:	08 17       	cp	r16, r24
    2366:	19 07       	cpc	r17, r25
    2368:	2a 07       	cpc	r18, r26
    236a:	3b 07       	cpc	r19, r27
    236c:	00 f5       	brcc	.+64     	; 0x23ae <prvInsertTimerInActiveList+0x7e>
    236e:	bf 01       	movw	r22, r30
    2370:	6e 5f       	subi	r22, 0xFE	; 254
    2372:	7f 4f       	sbci	r23, 0xFF	; 255
    2374:	80 91 c9 11 	lds	r24, 0x11C9	; 0x8011c9 <pxOverflowTimerList>
    2378:	90 91 ca 11 	lds	r25, 0x11CA	; 0x8011ca <pxOverflowTimerList+0x1>
    237c:	0e 94 44 04 	call	0x888	; 0x888 <vListInsert>
    2380:	80 e0       	ldi	r24, 0x00	; 0
    2382:	18 c0       	rjmp	.+48     	; 0x23b4 <prvInsertTimerInActiveList+0x84>
    2384:	0c 15       	cp	r16, r12
    2386:	1d 05       	cpc	r17, r13
    2388:	2e 05       	cpc	r18, r14
    238a:	3f 05       	cpc	r19, r15
    238c:	28 f4       	brcc	.+10     	; 0x2398 <prvInsertTimerInActiveList+0x68>
    238e:	4c 15       	cp	r20, r12
    2390:	5d 05       	cpc	r21, r13
    2392:	6e 05       	cpc	r22, r14
    2394:	7f 05       	cpc	r23, r15
    2396:	68 f4       	brcc	.+26     	; 0x23b2 <prvInsertTimerInActiveList+0x82>
    2398:	bf 01       	movw	r22, r30
    239a:	6e 5f       	subi	r22, 0xFE	; 254
    239c:	7f 4f       	sbci	r23, 0xFF	; 255
    239e:	80 91 cb 11 	lds	r24, 0x11CB	; 0x8011cb <pxCurrentTimerList>
    23a2:	90 91 cc 11 	lds	r25, 0x11CC	; 0x8011cc <pxCurrentTimerList+0x1>
    23a6:	0e 94 44 04 	call	0x888	; 0x888 <vListInsert>
    23aa:	80 e0       	ldi	r24, 0x00	; 0
    23ac:	03 c0       	rjmp	.+6      	; 0x23b4 <prvInsertTimerInActiveList+0x84>
    23ae:	81 e0       	ldi	r24, 0x01	; 1
    23b0:	01 c0       	rjmp	.+2      	; 0x23b4 <prvInsertTimerInActiveList+0x84>
    23b2:	81 e0       	ldi	r24, 0x01	; 1
    23b4:	1f 91       	pop	r17
    23b6:	0f 91       	pop	r16
    23b8:	ff 90       	pop	r15
    23ba:	ef 90       	pop	r14
    23bc:	df 90       	pop	r13
    23be:	cf 90       	pop	r12
    23c0:	08 95       	ret

000023c2 <prvCheckForValidListAndQueue>:
    23c2:	0f b6       	in	r0, 0x3f	; 63
    23c4:	f8 94       	cli
    23c6:	0f 92       	push	r0
    23c8:	80 91 c7 11 	lds	r24, 0x11C7	; 0x8011c7 <xTimerQueue>
    23cc:	90 91 c8 11 	lds	r25, 0x11C8	; 0x8011c8 <xTimerQueue+0x1>
    23d0:	89 2b       	or	r24, r25
    23d2:	e9 f4       	brne	.+58     	; 0x240e <prvCheckForValidListAndQueue+0x4c>
    23d4:	88 ed       	ldi	r24, 0xD8	; 216
    23d6:	91 e1       	ldi	r25, 0x11	; 17
    23d8:	0e 94 2f 04 	call	0x85e	; 0x85e <vListInitialise>
    23dc:	8d ec       	ldi	r24, 0xCD	; 205
    23de:	91 e1       	ldi	r25, 0x11	; 17
    23e0:	0e 94 2f 04 	call	0x85e	; 0x85e <vListInitialise>
    23e4:	88 ed       	ldi	r24, 0xD8	; 216
    23e6:	91 e1       	ldi	r25, 0x11	; 17
    23e8:	90 93 cc 11 	sts	0x11CC, r25	; 0x8011cc <pxCurrentTimerList+0x1>
    23ec:	80 93 cb 11 	sts	0x11CB, r24	; 0x8011cb <pxCurrentTimerList>
    23f0:	8d ec       	ldi	r24, 0xCD	; 205
    23f2:	91 e1       	ldi	r25, 0x11	; 17
    23f4:	90 93 ca 11 	sts	0x11CA, r25	; 0x8011ca <pxOverflowTimerList+0x1>
    23f8:	80 93 c9 11 	sts	0x11C9, r24	; 0x8011c9 <pxOverflowTimerList>
    23fc:	40 e0       	ldi	r20, 0x00	; 0
    23fe:	67 e0       	ldi	r22, 0x07	; 7
    2400:	8a e0       	ldi	r24, 0x0A	; 10
    2402:	0e 94 f1 06 	call	0xde2	; 0xde2 <xQueueGenericCreate>
    2406:	90 93 c8 11 	sts	0x11C8, r25	; 0x8011c8 <xTimerQueue+0x1>
    240a:	80 93 c7 11 	sts	0x11C7, r24	; 0x8011c7 <xTimerQueue>
    240e:	0f 90       	pop	r0
    2410:	0f be       	out	0x3f, r0	; 63
    2412:	08 95       	ret

00002414 <xTimerCreateTimerTask>:
    2414:	ef 92       	push	r14
    2416:	ff 92       	push	r15
    2418:	0f 93       	push	r16
    241a:	d3 df       	rcall	.-90     	; 0x23c2 <prvCheckForValidListAndQueue>
    241c:	80 91 c7 11 	lds	r24, 0x11C7	; 0x8011c7 <xTimerQueue>
    2420:	90 91 c8 11 	lds	r25, 0x11C8	; 0x8011c8 <xTimerQueue+0x1>
    2424:	89 2b       	or	r24, r25
    2426:	89 f0       	breq	.+34     	; 0x244a <xTimerCreateTimerTask+0x36>
    2428:	0f 2e       	mov	r0, r31
    242a:	f5 ec       	ldi	r31, 0xC5	; 197
    242c:	ef 2e       	mov	r14, r31
    242e:	f1 e1       	ldi	r31, 0x11	; 17
    2430:	ff 2e       	mov	r15, r31
    2432:	f0 2d       	mov	r31, r0
    2434:	03 e0       	ldi	r16, 0x03	; 3
    2436:	20 e0       	ldi	r18, 0x00	; 0
    2438:	30 e0       	ldi	r19, 0x00	; 0
    243a:	40 ec       	ldi	r20, 0xC0	; 192
    243c:	50 e0       	ldi	r21, 0x00	; 0
    243e:	61 e1       	ldi	r22, 0x11	; 17
    2440:	73 e0       	ldi	r23, 0x03	; 3
    2442:	86 e8       	ldi	r24, 0x86	; 134
    2444:	90 e0       	ldi	r25, 0x00	; 0
    2446:	30 d9       	rcall	.-3488   	; 0x16a8 <xTaskCreate>
    2448:	01 c0       	rjmp	.+2      	; 0x244c <xTimerCreateTimerTask+0x38>
    244a:	80 e0       	ldi	r24, 0x00	; 0
    244c:	0f 91       	pop	r16
    244e:	ff 90       	pop	r15
    2450:	ef 90       	pop	r14
    2452:	08 95       	ret

00002454 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    2454:	8f 92       	push	r8
    2456:	9f 92       	push	r9
    2458:	af 92       	push	r10
    245a:	bf 92       	push	r11
    245c:	cf 92       	push	r12
    245e:	df 92       	push	r13
    2460:	ef 92       	push	r14
    2462:	ff 92       	push	r15
    2464:	0f 93       	push	r16
    2466:	1f 93       	push	r17
    2468:	cf 93       	push	r28
    246a:	df 93       	push	r29
    246c:	cd b7       	in	r28, 0x3d	; 61
    246e:	de b7       	in	r29, 0x3e	; 62
    2470:	27 97       	sbiw	r28, 0x07	; 7
    2472:	0f b6       	in	r0, 0x3f	; 63
    2474:	f8 94       	cli
    2476:	de bf       	out	0x3e, r29	; 62
    2478:	0f be       	out	0x3f, r0	; 63
    247a:	cd bf       	out	0x3d, r28	; 61

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    247c:	e0 91 c7 11 	lds	r30, 0x11C7	; 0x8011c7 <xTimerQueue>
    2480:	f0 91 c8 11 	lds	r31, 0x11C8	; 0x8011c8 <xTimerQueue+0x1>
    2484:	30 97       	sbiw	r30, 0x00	; 0
    2486:	81 f1       	breq	.+96     	; 0x24e8 <xTimerGenericCommand+0x94>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    2488:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    248a:	2a 83       	std	Y+2, r18	; 0x02
    248c:	3b 83       	std	Y+3, r19	; 0x03
    248e:	4c 83       	std	Y+4, r20	; 0x04
    2490:	5d 83       	std	Y+5, r21	; 0x05
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    2492:	9f 83       	std	Y+7, r25	; 0x07
    2494:	8e 83       	std	Y+6, r24	; 0x06

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    2496:	66 30       	cpi	r22, 0x06	; 6
    2498:	f4 f4       	brge	.+60     	; 0x24d6 <xTimerGenericCommand+0x82>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    249a:	c9 dd       	rcall	.-1134   	; 0x202e <xTaskGetSchedulerState>
    249c:	82 30       	cpi	r24, 0x02	; 2
    249e:	69 f4       	brne	.+26     	; 0x24ba <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    24a0:	00 e0       	ldi	r16, 0x00	; 0
    24a2:	a7 01       	movw	r20, r14
    24a4:	96 01       	movw	r18, r12
    24a6:	be 01       	movw	r22, r28
    24a8:	6f 5f       	subi	r22, 0xFF	; 255
    24aa:	7f 4f       	sbci	r23, 0xFF	; 255
    24ac:	80 91 c7 11 	lds	r24, 0x11C7	; 0x8011c7 <xTimerQueue>
    24b0:	90 91 c8 11 	lds	r25, 0x11C8	; 0x8011c8 <xTimerQueue+0x1>
    24b4:	0e 94 14 07 	call	0xe28	; 0xe28 <xQueueGenericSend>
    24b8:	18 c0       	rjmp	.+48     	; 0x24ea <xTimerGenericCommand+0x96>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    24ba:	00 e0       	ldi	r16, 0x00	; 0
    24bc:	20 e0       	ldi	r18, 0x00	; 0
    24be:	30 e0       	ldi	r19, 0x00	; 0
    24c0:	a9 01       	movw	r20, r18
    24c2:	be 01       	movw	r22, r28
    24c4:	6f 5f       	subi	r22, 0xFF	; 255
    24c6:	7f 4f       	sbci	r23, 0xFF	; 255
    24c8:	80 91 c7 11 	lds	r24, 0x11C7	; 0x8011c7 <xTimerQueue>
    24cc:	90 91 c8 11 	lds	r25, 0x11C8	; 0x8011c8 <xTimerQueue+0x1>
    24d0:	0e 94 14 07 	call	0xe28	; 0xe28 <xQueueGenericSend>
    24d4:	0a c0       	rjmp	.+20     	; 0x24ea <xTimerGenericCommand+0x96>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    24d6:	20 e0       	ldi	r18, 0x00	; 0
    24d8:	a8 01       	movw	r20, r16
    24da:	be 01       	movw	r22, r28
    24dc:	6f 5f       	subi	r22, 0xFF	; 255
    24de:	7f 4f       	sbci	r23, 0xFF	; 255
    24e0:	cf 01       	movw	r24, r30
    24e2:	0e 94 bf 07 	call	0xf7e	; 0xf7e <xQueueGenericSendFromISR>
    24e6:	01 c0       	rjmp	.+2      	; 0x24ea <xTimerGenericCommand+0x96>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    24e8:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    24ea:	27 96       	adiw	r28, 0x07	; 7
    24ec:	0f b6       	in	r0, 0x3f	; 63
    24ee:	f8 94       	cli
    24f0:	de bf       	out	0x3e, r29	; 62
    24f2:	0f be       	out	0x3f, r0	; 63
    24f4:	cd bf       	out	0x3d, r28	; 61
    24f6:	df 91       	pop	r29
    24f8:	cf 91       	pop	r28
    24fa:	1f 91       	pop	r17
    24fc:	0f 91       	pop	r16
    24fe:	ff 90       	pop	r15
    2500:	ef 90       	pop	r14
    2502:	df 90       	pop	r13
    2504:	cf 90       	pop	r12
    2506:	bf 90       	pop	r11
    2508:	af 90       	pop	r10
    250a:	9f 90       	pop	r9
    250c:	8f 90       	pop	r8
    250e:	08 95       	ret

00002510 <prvSwitchTimerLists>:
        }
    }
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
    2510:	8f 92       	push	r8
    2512:	9f 92       	push	r9
    2514:	af 92       	push	r10
    2516:	bf 92       	push	r11
    2518:	cf 92       	push	r12
    251a:	df 92       	push	r13
    251c:	ef 92       	push	r14
    251e:	ff 92       	push	r15
    2520:	0f 93       	push	r16
    2522:	1f 93       	push	r17
    2524:	cf 93       	push	r28
    2526:	df 93       	push	r29

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2528:	3b c0       	rjmp	.+118    	; 0x25a0 <prvSwitchTimerLists+0x90>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    252a:	07 80       	ldd	r0, Z+7	; 0x07
    252c:	f0 85       	ldd	r31, Z+8	; 0x08
    252e:	e0 2d       	mov	r30, r0
    2530:	80 80       	ld	r8, Z
    2532:	91 80       	ldd	r9, Z+1	; 0x01
    2534:	a2 80       	ldd	r10, Z+2	; 0x02
    2536:	b3 80       	ldd	r11, Z+3	; 0x03

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    2538:	c0 85       	ldd	r28, Z+8	; 0x08
    253a:	d1 85       	ldd	r29, Z+9	; 0x09
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    253c:	8e 01       	movw	r16, r28
    253e:	0e 5f       	subi	r16, 0xFE	; 254
    2540:	1f 4f       	sbci	r17, 0xFF	; 255
    2542:	c8 01       	movw	r24, r16
    2544:	0e 94 81 04 	call	0x902	; 0x902 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2548:	ec 89       	ldd	r30, Y+20	; 0x14
    254a:	fd 89       	ldd	r31, Y+21	; 0x15
    254c:	ce 01       	movw	r24, r28
    254e:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2550:	8e 89       	ldd	r24, Y+22	; 0x16
    2552:	82 ff       	sbrs	r24, 2
    2554:	25 c0       	rjmp	.+74     	; 0x25a0 <prvSwitchTimerLists+0x90>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    2556:	8e 85       	ldd	r24, Y+14	; 0x0e
    2558:	9f 85       	ldd	r25, Y+15	; 0x0f
    255a:	a8 89       	ldd	r26, Y+16	; 0x10
    255c:	b9 89       	ldd	r27, Y+17	; 0x11
    255e:	88 0d       	add	r24, r8
    2560:	99 1d       	adc	r25, r9
    2562:	aa 1d       	adc	r26, r10
    2564:	bb 1d       	adc	r27, r11

                if( xReloadTime > xNextExpireTime )
    2566:	88 16       	cp	r8, r24
    2568:	99 06       	cpc	r9, r25
    256a:	aa 06       	cpc	r10, r26
    256c:	bb 06       	cpc	r11, r27
    256e:	70 f4       	brcc	.+28     	; 0x258c <prvSwitchTimerLists+0x7c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    2570:	8a 83       	std	Y+2, r24	; 0x02
    2572:	9b 83       	std	Y+3, r25	; 0x03
    2574:	ac 83       	std	Y+4, r26	; 0x04
    2576:	bd 83       	std	Y+5, r27	; 0x05
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    2578:	db 87       	std	Y+11, r29	; 0x0b
    257a:	ca 87       	std	Y+10, r28	; 0x0a
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    257c:	b8 01       	movw	r22, r16
    257e:	80 91 cb 11 	lds	r24, 0x11CB	; 0x8011cb <pxCurrentTimerList>
    2582:	90 91 cc 11 	lds	r25, 0x11CC	; 0x8011cc <pxCurrentTimerList+0x1>
    2586:	0e 94 44 04 	call	0x888	; 0x888 <vListInsert>
    258a:	0a c0       	rjmp	.+20     	; 0x25a0 <prvSwitchTimerLists+0x90>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    258c:	c1 2c       	mov	r12, r1
    258e:	d1 2c       	mov	r13, r1
    2590:	76 01       	movw	r14, r12
    2592:	00 e0       	ldi	r16, 0x00	; 0
    2594:	10 e0       	ldi	r17, 0x00	; 0
    2596:	a5 01       	movw	r20, r10
    2598:	94 01       	movw	r18, r8
    259a:	60 e0       	ldi	r22, 0x00	; 0
    259c:	ce 01       	movw	r24, r28
    259e:	5a df       	rcall	.-332    	; 0x2454 <xTimerGenericCommand>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    25a0:	e0 91 cb 11 	lds	r30, 0x11CB	; 0x8011cb <pxCurrentTimerList>
    25a4:	f0 91 cc 11 	lds	r31, 0x11CC	; 0x8011cc <pxCurrentTimerList+0x1>
    25a8:	80 81       	ld	r24, Z
    25aa:	81 11       	cpse	r24, r1
    25ac:	be cf       	rjmp	.-132    	; 0x252a <prvSwitchTimerLists+0x1a>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    25ae:	80 91 c9 11 	lds	r24, 0x11C9	; 0x8011c9 <pxOverflowTimerList>
    25b2:	90 91 ca 11 	lds	r25, 0x11CA	; 0x8011ca <pxOverflowTimerList+0x1>
    25b6:	90 93 cc 11 	sts	0x11CC, r25	; 0x8011cc <pxCurrentTimerList+0x1>
    25ba:	80 93 cb 11 	sts	0x11CB, r24	; 0x8011cb <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    25be:	f0 93 ca 11 	sts	0x11CA, r31	; 0x8011ca <pxOverflowTimerList+0x1>
    25c2:	e0 93 c9 11 	sts	0x11C9, r30	; 0x8011c9 <pxOverflowTimerList>
    }
    25c6:	df 91       	pop	r29
    25c8:	cf 91       	pop	r28
    25ca:	1f 91       	pop	r17
    25cc:	0f 91       	pop	r16
    25ce:	ff 90       	pop	r15
    25d0:	ef 90       	pop	r14
    25d2:	df 90       	pop	r13
    25d4:	cf 90       	pop	r12
    25d6:	bf 90       	pop	r11
    25d8:	af 90       	pop	r10
    25da:	9f 90       	pop	r9
    25dc:	8f 90       	pop	r8
    25de:	08 95       	ret

000025e0 <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    25e0:	cf 92       	push	r12
    25e2:	df 92       	push	r13
    25e4:	ef 92       	push	r14
    25e6:	ff 92       	push	r15
    25e8:	cf 93       	push	r28
    25ea:	df 93       	push	r29
    25ec:	ec 01       	movw	r28, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    25ee:	ea d8       	rcall	.-3628   	; 0x17c4 <xTaskGetTickCount>
    25f0:	6b 01       	movw	r12, r22
    25f2:	7c 01       	movw	r14, r24

        if( xTimeNow < xLastTime )
    25f4:	80 91 c1 11 	lds	r24, 0x11C1	; 0x8011c1 <xLastTime.2448>
    25f8:	90 91 c2 11 	lds	r25, 0x11C2	; 0x8011c2 <xLastTime.2448+0x1>
    25fc:	a0 91 c3 11 	lds	r26, 0x11C3	; 0x8011c3 <xLastTime.2448+0x2>
    2600:	b0 91 c4 11 	lds	r27, 0x11C4	; 0x8011c4 <xLastTime.2448+0x3>
    2604:	c8 16       	cp	r12, r24
    2606:	d9 06       	cpc	r13, r25
    2608:	ea 06       	cpc	r14, r26
    260a:	fb 06       	cpc	r15, r27
        {
            prvSwitchTimerLists();
    260c:	20 f4       	brcc	.+8      	; 0x2616 <prvSampleTimeNow+0x36>
    260e:	80 df       	rcall	.-256    	; 0x2510 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
    2610:	81 e0       	ldi	r24, 0x01	; 1
    2612:	88 83       	st	Y, r24
    2614:	01 c0       	rjmp	.+2      	; 0x2618 <prvSampleTimeNow+0x38>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    2616:	18 82       	st	Y, r1
        }

        xLastTime = xTimeNow;
    2618:	c0 92 c1 11 	sts	0x11C1, r12	; 0x8011c1 <xLastTime.2448>
    261c:	d0 92 c2 11 	sts	0x11C2, r13	; 0x8011c2 <xLastTime.2448+0x1>
    2620:	e0 92 c3 11 	sts	0x11C3, r14	; 0x8011c3 <xLastTime.2448+0x2>
    2624:	f0 92 c4 11 	sts	0x11C4, r15	; 0x8011c4 <xLastTime.2448+0x3>

        return xTimeNow;
    }
    2628:	c7 01       	movw	r24, r14
    262a:	b6 01       	movw	r22, r12
    262c:	df 91       	pop	r29
    262e:	cf 91       	pop	r28
    2630:	ff 90       	pop	r15
    2632:	ef 90       	pop	r14
    2634:	df 90       	pop	r13
    2636:	cf 90       	pop	r12
    2638:	08 95       	ret

0000263a <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    263a:	4f 92       	push	r4
    263c:	5f 92       	push	r5
    263e:	6f 92       	push	r6
    2640:	7f 92       	push	r7
    2642:	8f 92       	push	r8
    2644:	9f 92       	push	r9
    2646:	af 92       	push	r10
    2648:	bf 92       	push	r11
    264a:	cf 92       	push	r12
    264c:	df 92       	push	r13
    264e:	ef 92       	push	r14
    2650:	ff 92       	push	r15
    2652:	0f 93       	push	r16
    2654:	1f 93       	push	r17
    2656:	cf 93       	push	r28
    2658:	df 93       	push	r29
    265a:	4b 01       	movw	r8, r22
    265c:	5c 01       	movw	r10, r24
    265e:	29 01       	movw	r4, r18
    2660:	3a 01       	movw	r6, r20
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    2662:	e0 91 cb 11 	lds	r30, 0x11CB	; 0x8011cb <pxCurrentTimerList>
    2666:	f0 91 cc 11 	lds	r31, 0x11CC	; 0x8011cc <pxCurrentTimerList+0x1>
    266a:	07 80       	ldd	r0, Z+7	; 0x07
    266c:	f0 85       	ldd	r31, Z+8	; 0x08
    266e:	e0 2d       	mov	r30, r0
    2670:	c0 85       	ldd	r28, Z+8	; 0x08
    2672:	d1 85       	ldd	r29, Z+9	; 0x09

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2674:	ce 01       	movw	r24, r28
    2676:	02 96       	adiw	r24, 0x02	; 2
    2678:	0e 94 81 04 	call	0x902	; 0x902 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    267c:	8e 89       	ldd	r24, Y+22	; 0x16
    267e:	82 ff       	sbrs	r24, 2
    2680:	1b c0       	rjmp	.+54     	; 0x26b8 <prvProcessExpiredTimer+0x7e>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    2682:	4e 85       	ldd	r20, Y+14	; 0x0e
    2684:	5f 85       	ldd	r21, Y+15	; 0x0f
    2686:	68 89       	ldd	r22, Y+16	; 0x10
    2688:	79 89       	ldd	r23, Y+17	; 0x11
    268a:	48 0d       	add	r20, r8
    268c:	59 1d       	adc	r21, r9
    268e:	6a 1d       	adc	r22, r10
    2690:	7b 1d       	adc	r23, r11
    2692:	75 01       	movw	r14, r10
    2694:	64 01       	movw	r12, r8
    2696:	93 01       	movw	r18, r6
    2698:	82 01       	movw	r16, r4
    269a:	ce 01       	movw	r24, r28
    269c:	49 de       	rcall	.-878    	; 0x2330 <prvInsertTimerInActiveList>
    269e:	88 23       	and	r24, r24
    26a0:	69 f0       	breq	.+26     	; 0x26bc <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    26a2:	c1 2c       	mov	r12, r1
    26a4:	d1 2c       	mov	r13, r1
    26a6:	76 01       	movw	r14, r12
    26a8:	00 e0       	ldi	r16, 0x00	; 0
    26aa:	10 e0       	ldi	r17, 0x00	; 0
    26ac:	a5 01       	movw	r20, r10
    26ae:	94 01       	movw	r18, r8
    26b0:	60 e0       	ldi	r22, 0x00	; 0
    26b2:	ce 01       	movw	r24, r28
    26b4:	cf de       	rcall	.-610    	; 0x2454 <xTimerGenericCommand>
    26b6:	02 c0       	rjmp	.+4      	; 0x26bc <prvProcessExpiredTimer+0x82>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    26b8:	8e 7f       	andi	r24, 0xFE	; 254
    26ba:	8e 8b       	std	Y+22, r24	; 0x16
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    26bc:	ec 89       	ldd	r30, Y+20	; 0x14
    26be:	fd 89       	ldd	r31, Y+21	; 0x15
    26c0:	ce 01       	movw	r24, r28
    26c2:	19 95       	eicall
    }
    26c4:	df 91       	pop	r29
    26c6:	cf 91       	pop	r28
    26c8:	1f 91       	pop	r17
    26ca:	0f 91       	pop	r16
    26cc:	ff 90       	pop	r15
    26ce:	ef 90       	pop	r14
    26d0:	df 90       	pop	r13
    26d2:	cf 90       	pop	r12
    26d4:	bf 90       	pop	r11
    26d6:	af 90       	pop	r10
    26d8:	9f 90       	pop	r9
    26da:	8f 90       	pop	r8
    26dc:	7f 90       	pop	r7
    26de:	6f 90       	pop	r6
    26e0:	5f 90       	pop	r5
    26e2:	4f 90       	pop	r4
    26e4:	08 95       	ret

000026e6 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
    26e6:	8f 92       	push	r8
    26e8:	9f 92       	push	r9
    26ea:	af 92       	push	r10
    26ec:	bf 92       	push	r11
    26ee:	cf 92       	push	r12
    26f0:	df 92       	push	r13
    26f2:	ef 92       	push	r14
    26f4:	ff 92       	push	r15
    26f6:	1f 93       	push	r17
    26f8:	cf 93       	push	r28
    26fa:	df 93       	push	r29
    26fc:	1f 92       	push	r1
    26fe:	cd b7       	in	r28, 0x3d	; 61
    2700:	de b7       	in	r29, 0x3e	; 62
    2702:	6b 01       	movw	r12, r22
    2704:	7c 01       	movw	r14, r24
    2706:	14 2f       	mov	r17, r20
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    2708:	57 d8       	rcall	.-3922   	; 0x17b8 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    270a:	ce 01       	movw	r24, r28
    270c:	01 96       	adiw	r24, 0x01	; 1
    270e:	68 df       	rcall	.-304    	; 0x25e0 <prvSampleTimeNow>
    2710:	4b 01       	movw	r8, r22
    2712:	5c 01       	movw	r10, r24

            if( xTimerListsWereSwitched == pdFALSE )
    2714:	89 81       	ldd	r24, Y+1	; 0x01
    2716:	81 11       	cpse	r24, r1
    2718:	2b c0       	rjmp	.+86     	; 0x2770 <prvProcessTimerOrBlockTask+0x8a>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    271a:	11 11       	cpse	r17, r1
    271c:	0c c0       	rjmp	.+24     	; 0x2736 <prvProcessTimerOrBlockTask+0x50>
    271e:	8c 14       	cp	r8, r12
    2720:	9d 04       	cpc	r9, r13
    2722:	ae 04       	cpc	r10, r14
    2724:	bf 04       	cpc	r11, r15
                {
                    ( void ) xTaskResumeAll();
    2726:	38 f0       	brcs	.+14     	; 0x2736 <prvProcessTimerOrBlockTask+0x50>
    2728:	87 d9       	rcall	.-3314   	; 0x1a38 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    272a:	a5 01       	movw	r20, r10
    272c:	94 01       	movw	r18, r8
    272e:	c7 01       	movw	r24, r14
    2730:	b6 01       	movw	r22, r12
    2732:	83 df       	rcall	.-250    	; 0x263a <prvProcessExpiredTimer>
    2734:	1e c0       	rjmp	.+60     	; 0x2772 <prvProcessTimerOrBlockTask+0x8c>
                     * time has not been reached yet.  This task should therefore
                     * block to wait for the next expire time or a command to be
                     * received - whichever comes first.  The following line cannot
                     * be reached unless xNextExpireTime > xTimeNow, except in the
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
    2736:	11 23       	and	r17, r17
    2738:	41 f0       	breq	.+16     	; 0x274a <prvProcessTimerOrBlockTask+0x64>
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    273a:	e0 91 c9 11 	lds	r30, 0x11C9	; 0x8011c9 <pxOverflowTimerList>
    273e:	f0 91 ca 11 	lds	r31, 0x11CA	; 0x8011ca <pxOverflowTimerList+0x1>
    2742:	80 81       	ld	r24, Z
    2744:	11 e0       	ldi	r17, 0x01	; 1
    2746:	81 11       	cpse	r24, r1
    2748:	10 e0       	ldi	r17, 0x00	; 0
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    274a:	b7 01       	movw	r22, r14
    274c:	a6 01       	movw	r20, r12
    274e:	48 19       	sub	r20, r8
    2750:	59 09       	sbc	r21, r9
    2752:	6a 09       	sbc	r22, r10
    2754:	7b 09       	sbc	r23, r11
    2756:	21 2f       	mov	r18, r17
    2758:	80 91 c7 11 	lds	r24, 0x11C7	; 0x8011c7 <xTimerQueue>
    275c:	90 91 c8 11 	lds	r25, 0x11C8	; 0x8011c8 <xTimerQueue+0x1>
    2760:	0e 94 2f 09 	call	0x125e	; 0x125e <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
    2764:	69 d9       	rcall	.-3374   	; 0x1a38 <xTaskResumeAll>
    2766:	81 11       	cpse	r24, r1
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
    2768:	04 c0       	rjmp	.+8      	; 0x2772 <prvProcessTimerOrBlockTask+0x8c>
    276a:	0e 94 fd 04 	call	0x9fa	; 0x9fa <vPortYield>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    276e:	01 c0       	rjmp	.+2      	; 0x2772 <prvProcessTimerOrBlockTask+0x8c>
    2770:	63 d9       	rcall	.-3386   	; 0x1a38 <xTaskResumeAll>
            }
        }
    }
    2772:	0f 90       	pop	r0
    2774:	df 91       	pop	r29
    2776:	cf 91       	pop	r28
    2778:	1f 91       	pop	r17
    277a:	ff 90       	pop	r15
    277c:	ef 90       	pop	r14
    277e:	df 90       	pop	r13
    2780:	cf 90       	pop	r12
    2782:	bf 90       	pop	r11
    2784:	af 90       	pop	r10
    2786:	9f 90       	pop	r9
    2788:	8f 90       	pop	r8
    278a:	08 95       	ret

0000278c <prvProcessReceivedCommands>:
        return xProcessTimerNow;
    }
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
    278c:	af 92       	push	r10
    278e:	bf 92       	push	r11
    2790:	cf 92       	push	r12
    2792:	df 92       	push	r13
    2794:	ef 92       	push	r14
    2796:	ff 92       	push	r15
    2798:	0f 93       	push	r16
    279a:	1f 93       	push	r17
    279c:	cf 93       	push	r28
    279e:	df 93       	push	r29
    27a0:	cd b7       	in	r28, 0x3d	; 61
    27a2:	de b7       	in	r29, 0x3e	; 62
    27a4:	28 97       	sbiw	r28, 0x08	; 8
    27a6:	0f b6       	in	r0, 0x3f	; 63
    27a8:	f8 94       	cli
    27aa:	de bf       	out	0x3e, r29	; 62
    27ac:	0f be       	out	0x3f, r0	; 63
    27ae:	cd bf       	out	0x3d, r28	; 61
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    27b0:	81 c0       	rjmp	.+258    	; 0x28b4 <prvProcessReceivedCommands+0x128>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    27b2:	89 81       	ldd	r24, Y+1	; 0x01
    27b4:	88 23       	and	r24, r24
    27b6:	0c f4       	brge	.+2      	; 0x27ba <prvProcessReceivedCommands+0x2e>
    27b8:	7d c0       	rjmp	.+250    	; 0x28b4 <prvProcessReceivedCommands+0x128>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    27ba:	ae 80       	ldd	r10, Y+6	; 0x06
    27bc:	bf 80       	ldd	r11, Y+7	; 0x07

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    27be:	d5 01       	movw	r26, r10
    27c0:	1c 96       	adiw	r26, 0x0c	; 12
    27c2:	8d 91       	ld	r24, X+
    27c4:	9c 91       	ld	r25, X
    27c6:	1d 97       	sbiw	r26, 0x0d	; 13
    27c8:	89 2b       	or	r24, r25
    27ca:	21 f0       	breq	.+8      	; 0x27d4 <prvProcessReceivedCommands+0x48>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    27cc:	c5 01       	movw	r24, r10
    27ce:	02 96       	adiw	r24, 0x02	; 2
    27d0:	0e 94 81 04 	call	0x902	; 0x902 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    27d4:	ce 01       	movw	r24, r28
    27d6:	08 96       	adiw	r24, 0x08	; 8
    27d8:	03 df       	rcall	.-506    	; 0x25e0 <prvSampleTimeNow>
    27da:	8b 01       	movw	r16, r22
    27dc:	9c 01       	movw	r18, r24

                switch( xMessage.xMessageID )
    27de:	e9 81       	ldd	r30, Y+1	; 0x01
    27e0:	0e 2e       	mov	r0, r30
    27e2:	00 0c       	add	r0, r0
    27e4:	ff 0b       	sbc	r31, r31
    27e6:	ea 30       	cpi	r30, 0x0A	; 10
    27e8:	f1 05       	cpc	r31, r1
    27ea:	08 f0       	brcs	.+2      	; 0x27ee <prvProcessReceivedCommands+0x62>
    27ec:	63 c0       	rjmp	.+198    	; 0x28b4 <prvProcessReceivedCommands+0x128>
    27ee:	88 27       	eor	r24, r24
    27f0:	ee 58       	subi	r30, 0x8E	; 142
    27f2:	ff 4f       	sbci	r31, 0xFF	; 255
    27f4:	8f 4f       	sbci	r24, 0xFF	; 255
    27f6:	c3 c7       	rjmp	.+3974   	; 0x377e <__tablejump2__>
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    27f8:	f5 01       	movw	r30, r10
    27fa:	86 89       	ldd	r24, Z+22	; 0x16
    27fc:	81 60       	ori	r24, 0x01	; 1
    27fe:	86 8b       	std	Z+22, r24	; 0x16

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    2800:	ca 80       	ldd	r12, Y+2	; 0x02
    2802:	db 80       	ldd	r13, Y+3	; 0x03
    2804:	ec 80       	ldd	r14, Y+4	; 0x04
    2806:	fd 80       	ldd	r15, Y+5	; 0x05
    2808:	46 85       	ldd	r20, Z+14	; 0x0e
    280a:	57 85       	ldd	r21, Z+15	; 0x0f
    280c:	60 89       	ldd	r22, Z+16	; 0x10
    280e:	71 89       	ldd	r23, Z+17	; 0x11
    2810:	4c 0d       	add	r20, r12
    2812:	5d 1d       	adc	r21, r13
    2814:	6e 1d       	adc	r22, r14
    2816:	7f 1d       	adc	r23, r15
    2818:	c5 01       	movw	r24, r10
    281a:	8a dd       	rcall	.-1260   	; 0x2330 <prvInsertTimerInActiveList>
    281c:	88 23       	and	r24, r24
    281e:	09 f4       	brne	.+2      	; 0x2822 <prvProcessReceivedCommands+0x96>
    2820:	49 c0       	rjmp	.+146    	; 0x28b4 <prvProcessReceivedCommands+0x128>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2822:	d5 01       	movw	r26, r10
    2824:	54 96       	adiw	r26, 0x14	; 20
    2826:	ed 91       	ld	r30, X+
    2828:	fc 91       	ld	r31, X
    282a:	55 97       	sbiw	r26, 0x15	; 21
    282c:	c5 01       	movw	r24, r10
    282e:	19 95       	eicall
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2830:	f5 01       	movw	r30, r10
    2832:	86 89       	ldd	r24, Z+22	; 0x16
    2834:	82 ff       	sbrs	r24, 2
    2836:	3e c0       	rjmp	.+124    	; 0x28b4 <prvProcessReceivedCommands+0x128>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    2838:	4a 81       	ldd	r20, Y+2	; 0x02
    283a:	5b 81       	ldd	r21, Y+3	; 0x03
    283c:	6c 81       	ldd	r22, Y+4	; 0x04
    283e:	7d 81       	ldd	r23, Y+5	; 0x05
    2840:	86 85       	ldd	r24, Z+14	; 0x0e
    2842:	97 85       	ldd	r25, Z+15	; 0x0f
    2844:	a0 89       	ldd	r26, Z+16	; 0x10
    2846:	b1 89       	ldd	r27, Z+17	; 0x11
    2848:	9a 01       	movw	r18, r20
    284a:	ab 01       	movw	r20, r22
    284c:	28 0f       	add	r18, r24
    284e:	39 1f       	adc	r19, r25
    2850:	4a 1f       	adc	r20, r26
    2852:	5b 1f       	adc	r21, r27
    2854:	c1 2c       	mov	r12, r1
    2856:	d1 2c       	mov	r13, r1
    2858:	76 01       	movw	r14, r12
    285a:	00 e0       	ldi	r16, 0x00	; 0
    285c:	10 e0       	ldi	r17, 0x00	; 0
    285e:	60 e0       	ldi	r22, 0x00	; 0
    2860:	c5 01       	movw	r24, r10
    2862:	f8 dd       	rcall	.-1040   	; 0x2454 <xTimerGenericCommand>
    2864:	27 c0       	rjmp	.+78     	; 0x28b4 <prvProcessReceivedCommands+0x128>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    2866:	d5 01       	movw	r26, r10
    2868:	56 96       	adiw	r26, 0x16	; 22
    286a:	8c 91       	ld	r24, X
    286c:	56 97       	sbiw	r26, 0x16	; 22
    286e:	8e 7f       	andi	r24, 0xFE	; 254
    2870:	56 96       	adiw	r26, 0x16	; 22
    2872:	8c 93       	st	X, r24
                        break;
    2874:	1f c0       	rjmp	.+62     	; 0x28b4 <prvProcessReceivedCommands+0x128>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    2876:	f5 01       	movw	r30, r10
    2878:	86 89       	ldd	r24, Z+22	; 0x16
    287a:	81 60       	ori	r24, 0x01	; 1
    287c:	86 8b       	std	Z+22, r24	; 0x16
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    287e:	4a 81       	ldd	r20, Y+2	; 0x02
    2880:	5b 81       	ldd	r21, Y+3	; 0x03
    2882:	6c 81       	ldd	r22, Y+4	; 0x04
    2884:	7d 81       	ldd	r23, Y+5	; 0x05
    2886:	46 87       	std	Z+14, r20	; 0x0e
    2888:	57 87       	std	Z+15, r21	; 0x0f
    288a:	60 8b       	std	Z+16, r22	; 0x10
    288c:	71 8b       	std	Z+17, r23	; 0x11
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    288e:	40 0f       	add	r20, r16
    2890:	51 1f       	adc	r21, r17
    2892:	62 1f       	adc	r22, r18
    2894:	73 1f       	adc	r23, r19
    2896:	68 01       	movw	r12, r16
    2898:	79 01       	movw	r14, r18
    289a:	c5 01       	movw	r24, r10
    289c:	49 dd       	rcall	.-1390   	; 0x2330 <prvInsertTimerInActiveList>
                        break;
    289e:	0a c0       	rjmp	.+20     	; 0x28b4 <prvProcessReceivedCommands+0x128>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    28a0:	f5 01       	movw	r30, r10
    28a2:	86 89       	ldd	r24, Z+22	; 0x16
    28a4:	81 fd       	sbrc	r24, 1
    28a6:	04 c0       	rjmp	.+8      	; 0x28b0 <prvProcessReceivedCommands+0x124>
                                {
                                    vPortFree( pxTimer );
    28a8:	c5 01       	movw	r24, r10
    28aa:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <vPortFree>
    28ae:	02 c0       	rjmp	.+4      	; 0x28b4 <prvProcessReceivedCommands+0x128>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    28b0:	8e 7f       	andi	r24, 0xFE	; 254
    28b2:	86 8b       	std	Z+22, r24	; 0x16
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    28b4:	20 e0       	ldi	r18, 0x00	; 0
    28b6:	30 e0       	ldi	r19, 0x00	; 0
    28b8:	a9 01       	movw	r20, r18
    28ba:	be 01       	movw	r22, r28
    28bc:	6f 5f       	subi	r22, 0xFF	; 255
    28be:	7f 4f       	sbci	r23, 0xFF	; 255
    28c0:	80 91 c7 11 	lds	r24, 0x11C7	; 0x8011c7 <xTimerQueue>
    28c4:	90 91 c8 11 	lds	r25, 0x11C8	; 0x8011c8 <xTimerQueue+0x1>
    28c8:	0e 94 f9 07 	call	0xff2	; 0xff2 <xQueueReceive>
    28cc:	81 11       	cpse	r24, r1
    28ce:	71 cf       	rjmp	.-286    	; 0x27b2 <prvProcessReceivedCommands+0x26>
                        /* Don't expect to get here. */
                        break;
                }
            }
        }
    }
    28d0:	28 96       	adiw	r28, 0x08	; 8
    28d2:	0f b6       	in	r0, 0x3f	; 63
    28d4:	f8 94       	cli
    28d6:	de bf       	out	0x3e, r29	; 62
    28d8:	0f be       	out	0x3f, r0	; 63
    28da:	cd bf       	out	0x3d, r28	; 61
    28dc:	df 91       	pop	r29
    28de:	cf 91       	pop	r28
    28e0:	1f 91       	pop	r17
    28e2:	0f 91       	pop	r16
    28e4:	ff 90       	pop	r15
    28e6:	ef 90       	pop	r14
    28e8:	df 90       	pop	r13
    28ea:	cf 90       	pop	r12
    28ec:	bf 90       	pop	r11
    28ee:	af 90       	pop	r10
    28f0:	08 95       	ret

000028f2 <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    28f2:	08 95       	ret

000028f4 <prvSetMainLedOn>:
 * Private function to enable board led to use it in application hooks
 */
void prvSetMainLedOn( void ) 
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    28f4:	84 b1       	in	r24, 0x04	; 4
    28f6:	80 68       	ori	r24, 0x80	; 128
    28f8:	84 b9       	out	0x04, r24	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    28fa:	85 b1       	in	r24, 0x05	; 5
    28fc:	80 68       	ori	r24, 0x80	; 128
    28fe:	85 b9       	out	0x05, r24	; 5
    2900:	08 95       	ret

00002902 <prvBlinkMainLed>:
 */
void prvBlinkMainLed( void ) 
{

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    2902:	83 b1       	in	r24, 0x03	; 3
    2904:	80 68       	ori	r24, 0x80	; 128
    2906:	83 b9       	out	0x03, r24	; 3
    2908:	08 95       	ret

0000290a <vApplicationMallocFailedHook>:
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    prvSetMainLedOn(); // Main LED on.
    290a:	f4 df       	rcall	.-24     	; 0x28f4 <prvSetMainLedOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    290c:	2f ef       	ldi	r18, 0xFF	; 255
    290e:	80 e7       	ldi	r24, 0x70	; 112
    2910:	92 e0       	ldi	r25, 0x02	; 2
    2912:	21 50       	subi	r18, 0x01	; 1
    2914:	80 40       	sbci	r24, 0x00	; 0
    2916:	90 40       	sbci	r25, 0x00	; 0
    2918:	e1 f7       	brne	.-8      	; 0x2912 <vApplicationMallocFailedHook+0x8>
    291a:	00 c0       	rjmp	.+0      	; 0x291c <vApplicationMallocFailedHook+0x12>
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    291c:	00 00       	nop
    291e:	f1 df       	rcall	.-30     	; 0x2902 <prvBlinkMainLed>
    2920:	f5 cf       	rjmp	.-22     	; 0x290c <vApplicationMallocFailedHook+0x2>

00002922 <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)),
                                    char * pcTaskName __attribute__((unused)) )
{

    prvSetMainLedOn(); // Main LED on.
    2922:	e8 df       	rcall	.-48     	; 0x28f4 <prvSetMainLedOn>
    2924:	2f ef       	ldi	r18, 0xFF	; 255
    2926:	87 ea       	ldi	r24, 0xA7	; 167
    2928:	91 e6       	ldi	r25, 0x61	; 97
    292a:	21 50       	subi	r18, 0x01	; 1
    292c:	80 40       	sbci	r24, 0x00	; 0
    292e:	90 40       	sbci	r25, 0x00	; 0
    2930:	e1 f7       	brne	.-8      	; 0x292a <vApplicationStackOverflowHook+0x8>
    2932:	00 c0       	rjmp	.+0      	; 0x2934 <vApplicationStackOverflowHook+0x12>

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    2934:	00 00       	nop
    2936:	e5 df       	rcall	.-54     	; 0x2902 <prvBlinkMainLed>
    2938:	f5 cf       	rjmp	.-22     	; 0x2924 <vApplicationStackOverflowHook+0x2>

0000293a <initializeSystem>:
	return 0;
}

void initializeSystem(void)
{
	trace_init();
    293a:	0e 94 c1 02 	call	0x582	; 0x582 <trace_init>
	stdio_initialise(ser_USART0);
    293e:	80 e0       	ldi	r24, 0x00	; 0
    2940:	9f d0       	rcall	.+318    	; 0x2a80 <stdio_initialise>
	status_leds_initialise(5);
    2942:	85 e0       	ldi	r24, 0x05	; 5
    2944:	90 e0       	ldi	r25, 0x00	; 0
    2946:	a3 d1       	rcall	.+838    	; 0x2c8e <status_leds_initialise>
	DDRC |= (1 << P_LIGHT_PIN_Front);
    2948:	87 b1       	in	r24, 0x07	; 7
    294a:	81 60       	ori	r24, 0x01	; 1
    294c:	87 b9       	out	0x07, r24	; 7
	PORTC &= ~(1 << P_LIGHT_PIN_Front);
    294e:	88 b1       	in	r24, 0x08	; 8
    2950:	8e 7f       	andi	r24, 0xFE	; 254
    2952:	88 b9       	out	0x08, r24	; 8
	DDRC |= (1 << P_LIGHT_PIN_Back);
    2954:	87 b1       	in	r24, 0x07	; 7
    2956:	80 64       	ori	r24, 0x40	; 64
    2958:	87 b9       	out	0x07, r24	; 7
	PORTC &= ~(1 << P_LIGHT_PIN_Back);
    295a:	88 b1       	in	r24, 0x08	; 8
    295c:	8f 7b       	andi	r24, 0xBF	; 191
    295e:	88 b9       	out	0x08, r24	; 8
	hc_sr04_init();
    2960:	0e 94 2f 02 	call	0x45e	; 0x45e <hc_sr04_init>

	printf("System Initialization Complete\n");
    2964:	89 e1       	ldi	r24, 0x19	; 25
    2966:	93 e0       	ldi	r25, 0x03	; 3
    2968:	0c 94 1e 1d 	jmp	0x3a3c	; 0x3a3c <puts>
    296c:	08 95       	ret

0000296e <main>:
void initializeSystem(void);
#include "application.h"

int main(void)
{
	initializeSystem();  // Initialize system configurations
    296e:	e5 df       	rcall	.-54     	; 0x293a <initializeSystem>

	create_all_application_tasks();  // Create all tasks from application.c
    2970:	0e 94 31 01 	call	0x262	; 0x262 <create_all_application_tasks>
	vTaskStartScheduler();  // Start the scheduler
    2974:	0e 94 9f 0b 	call	0x173e	; 0x173e <vTaskStartScheduler>
    2978:	ff cf       	rjmp	.-2      	; 0x2978 <main+0xa>

0000297a <__floatunsisf>:
    297a:	e8 94       	clt
    297c:	09 c0       	rjmp	.+18     	; 0x2990 <__floatsisf+0x12>

0000297e <__floatsisf>:
    297e:	97 fb       	bst	r25, 7
    2980:	3e f4       	brtc	.+14     	; 0x2990 <__floatsisf+0x12>
    2982:	90 95       	com	r25
    2984:	80 95       	com	r24
    2986:	70 95       	com	r23
    2988:	61 95       	neg	r22
    298a:	7f 4f       	sbci	r23, 0xFF	; 255
    298c:	8f 4f       	sbci	r24, 0xFF	; 255
    298e:	9f 4f       	sbci	r25, 0xFF	; 255
    2990:	99 23       	and	r25, r25
    2992:	a9 f0       	breq	.+42     	; 0x29be <__floatsisf+0x40>
    2994:	f9 2f       	mov	r31, r25
    2996:	96 e9       	ldi	r25, 0x96	; 150
    2998:	bb 27       	eor	r27, r27
    299a:	93 95       	inc	r25
    299c:	f6 95       	lsr	r31
    299e:	87 95       	ror	r24
    29a0:	77 95       	ror	r23
    29a2:	67 95       	ror	r22
    29a4:	b7 95       	ror	r27
    29a6:	f1 11       	cpse	r31, r1
    29a8:	f8 cf       	rjmp	.-16     	; 0x299a <__floatsisf+0x1c>
    29aa:	fa f4       	brpl	.+62     	; 0x29ea <__floatsisf+0x6c>
    29ac:	bb 0f       	add	r27, r27
    29ae:	11 f4       	brne	.+4      	; 0x29b4 <__floatsisf+0x36>
    29b0:	60 ff       	sbrs	r22, 0
    29b2:	1b c0       	rjmp	.+54     	; 0x29ea <__floatsisf+0x6c>
    29b4:	6f 5f       	subi	r22, 0xFF	; 255
    29b6:	7f 4f       	sbci	r23, 0xFF	; 255
    29b8:	8f 4f       	sbci	r24, 0xFF	; 255
    29ba:	9f 4f       	sbci	r25, 0xFF	; 255
    29bc:	16 c0       	rjmp	.+44     	; 0x29ea <__floatsisf+0x6c>
    29be:	88 23       	and	r24, r24
    29c0:	11 f0       	breq	.+4      	; 0x29c6 <__floatsisf+0x48>
    29c2:	96 e9       	ldi	r25, 0x96	; 150
    29c4:	11 c0       	rjmp	.+34     	; 0x29e8 <__floatsisf+0x6a>
    29c6:	77 23       	and	r23, r23
    29c8:	21 f0       	breq	.+8      	; 0x29d2 <__floatsisf+0x54>
    29ca:	9e e8       	ldi	r25, 0x8E	; 142
    29cc:	87 2f       	mov	r24, r23
    29ce:	76 2f       	mov	r23, r22
    29d0:	05 c0       	rjmp	.+10     	; 0x29dc <__floatsisf+0x5e>
    29d2:	66 23       	and	r22, r22
    29d4:	71 f0       	breq	.+28     	; 0x29f2 <__floatsisf+0x74>
    29d6:	96 e8       	ldi	r25, 0x86	; 134
    29d8:	86 2f       	mov	r24, r22
    29da:	70 e0       	ldi	r23, 0x00	; 0
    29dc:	60 e0       	ldi	r22, 0x00	; 0
    29de:	2a f0       	brmi	.+10     	; 0x29ea <__floatsisf+0x6c>
    29e0:	9a 95       	dec	r25
    29e2:	66 0f       	add	r22, r22
    29e4:	77 1f       	adc	r23, r23
    29e6:	88 1f       	adc	r24, r24
    29e8:	da f7       	brpl	.-10     	; 0x29e0 <__floatsisf+0x62>
    29ea:	88 0f       	add	r24, r24
    29ec:	96 95       	lsr	r25
    29ee:	87 95       	ror	r24
    29f0:	97 f9       	bld	r25, 7
    29f2:	08 95       	ret

000029f4 <__gesf2>:
    29f4:	03 d0       	rcall	.+6      	; 0x29fc <__fp_cmp>
    29f6:	08 f4       	brcc	.+2      	; 0x29fa <__gesf2+0x6>
    29f8:	8f ef       	ldi	r24, 0xFF	; 255
    29fa:	08 95       	ret

000029fc <__fp_cmp>:
    29fc:	99 0f       	add	r25, r25
    29fe:	00 08       	sbc	r0, r0
    2a00:	55 0f       	add	r21, r21
    2a02:	aa 0b       	sbc	r26, r26
    2a04:	e0 e8       	ldi	r30, 0x80	; 128
    2a06:	fe ef       	ldi	r31, 0xFE	; 254
    2a08:	16 16       	cp	r1, r22
    2a0a:	17 06       	cpc	r1, r23
    2a0c:	e8 07       	cpc	r30, r24
    2a0e:	f9 07       	cpc	r31, r25
    2a10:	c0 f0       	brcs	.+48     	; 0x2a42 <__fp_cmp+0x46>
    2a12:	12 16       	cp	r1, r18
    2a14:	13 06       	cpc	r1, r19
    2a16:	e4 07       	cpc	r30, r20
    2a18:	f5 07       	cpc	r31, r21
    2a1a:	98 f0       	brcs	.+38     	; 0x2a42 <__fp_cmp+0x46>
    2a1c:	62 1b       	sub	r22, r18
    2a1e:	73 0b       	sbc	r23, r19
    2a20:	84 0b       	sbc	r24, r20
    2a22:	95 0b       	sbc	r25, r21
    2a24:	39 f4       	brne	.+14     	; 0x2a34 <__fp_cmp+0x38>
    2a26:	0a 26       	eor	r0, r26
    2a28:	61 f0       	breq	.+24     	; 0x2a42 <__fp_cmp+0x46>
    2a2a:	23 2b       	or	r18, r19
    2a2c:	24 2b       	or	r18, r20
    2a2e:	25 2b       	or	r18, r21
    2a30:	21 f4       	brne	.+8      	; 0x2a3a <__fp_cmp+0x3e>
    2a32:	08 95       	ret
    2a34:	0a 26       	eor	r0, r26
    2a36:	09 f4       	brne	.+2      	; 0x2a3a <__fp_cmp+0x3e>
    2a38:	a1 40       	sbci	r26, 0x01	; 1
    2a3a:	a6 95       	lsr	r26
    2a3c:	8f ef       	ldi	r24, 0xFF	; 255
    2a3e:	81 1d       	adc	r24, r1
    2a40:	81 1d       	adc	r24, r1
    2a42:	08 95       	ret

00002a44 <usart_getchar>:
    2a44:	cf 93       	push	r28
    2a46:	df 93       	push	r29
    2a48:	1f 92       	push	r1
    2a4a:	cd b7       	in	r28, 0x3d	; 61
    2a4c:	de b7       	in	r29, 0x3e	; 62
    2a4e:	be 01       	movw	r22, r28
    2a50:	6f 5f       	subi	r22, 0xFF	; 255
    2a52:	7f 4f       	sbci	r23, 0xFF	; 255
    2a54:	80 91 e3 11 	lds	r24, 0x11E3	; 0x8011e3 <_com_serial_instance>
    2a58:	90 91 e4 11 	lds	r25, 0x11E4	; 0x8011e4 <_com_serial_instance+0x1>
    2a5c:	2d d2       	rcall	.+1114   	; 0x2eb8 <serial_getByte>
    2a5e:	81 11       	cpse	r24, r1
    2a60:	f6 cf       	rjmp	.-20     	; 0x2a4e <usart_getchar+0xa>
    2a62:	89 81       	ldd	r24, Y+1	; 0x01
    2a64:	90 e0       	ldi	r25, 0x00	; 0
    2a66:	0f 90       	pop	r0
    2a68:	df 91       	pop	r29
    2a6a:	cf 91       	pop	r28
    2a6c:	08 95       	ret

00002a6e <usart_putchar>:
    2a6e:	68 2f       	mov	r22, r24
    2a70:	80 91 e3 11 	lds	r24, 0x11E3	; 0x8011e3 <_com_serial_instance>
    2a74:	90 91 e4 11 	lds	r25, 0x11E4	; 0x8011e4 <_com_serial_instance+0x1>
    2a78:	f4 d1       	rcall	.+1000   	; 0x2e62 <serial_sendByte>
    2a7a:	80 e0       	ldi	r24, 0x00	; 0
    2a7c:	90 e0       	ldi	r25, 0x00	; 0
    2a7e:	08 95       	ret

00002a80 <stdio_initialise>:
    2a80:	8f 92       	push	r8
    2a82:	9f 92       	push	r9
    2a84:	af 92       	push	r10
    2a86:	cf 92       	push	r12
    2a88:	ef 92       	push	r14
    2a8a:	0f 93       	push	r16
    2a8c:	81 2c       	mov	r8, r1
    2a8e:	91 2c       	mov	r9, r1
    2a90:	68 94       	set
    2a92:	aa 24       	eor	r10, r10
    2a94:	a7 f8       	bld	r10, 7
    2a96:	68 94       	set
    2a98:	cc 24       	eor	r12, r12
    2a9a:	c7 f8       	bld	r12, 7
    2a9c:	e1 2c       	mov	r14, r1
    2a9e:	00 e0       	ldi	r16, 0x00	; 0
    2aa0:	23 e0       	ldi	r18, 0x03	; 3
    2aa2:	40 e0       	ldi	r20, 0x00	; 0
    2aa4:	51 ee       	ldi	r21, 0xE1	; 225
    2aa6:	60 e0       	ldi	r22, 0x00	; 0
    2aa8:	70 e0       	ldi	r23, 0x00	; 0
    2aaa:	3f d1       	rcall	.+638    	; 0x2d2a <serial_create>
    2aac:	90 93 e4 11 	sts	0x11E4, r25	; 0x8011e4 <_com_serial_instance+0x1>
    2ab0:	80 93 e3 11 	sts	0x11E3, r24	; 0x8011e3 <_com_serial_instance>
    2ab4:	ed e0       	ldi	r30, 0x0D	; 13
    2ab6:	f2 e1       	ldi	r31, 0x12	; 18
    2ab8:	87 e0       	ldi	r24, 0x07	; 7
    2aba:	92 e0       	ldi	r25, 0x02	; 2
    2abc:	91 83       	std	Z+1, r25	; 0x01
    2abe:	80 83       	st	Z, r24
    2ac0:	93 83       	std	Z+3, r25	; 0x03
    2ac2:	82 83       	std	Z+2, r24	; 0x02
    2ac4:	0f 91       	pop	r16
    2ac6:	ef 90       	pop	r14
    2ac8:	cf 90       	pop	r12
    2aca:	af 90       	pop	r10
    2acc:	9f 90       	pop	r9
    2ace:	8f 90       	pop	r8
    2ad0:	08 95       	ret

00002ad2 <_turn_off>:
    2ad2:	90 e0       	ldi	r25, 0x00	; 0
    2ad4:	fc 01       	movw	r30, r24
    2ad6:	ee 0f       	add	r30, r30
    2ad8:	ff 1f       	adc	r31, r31
    2ada:	e8 0f       	add	r30, r24
    2adc:	f9 1f       	adc	r31, r25
    2ade:	ee 0f       	add	r30, r30
    2ae0:	ff 1f       	adc	r31, r31
    2ae2:	eb 51       	subi	r30, 0x1B	; 27
    2ae4:	fe 4e       	sbci	r31, 0xEE	; 238
    2ae6:	23 81       	ldd	r18, Z+3	; 0x03
    2ae8:	21 11       	cpse	r18, r1
    2aea:	1f c0       	rjmp	.+62     	; 0x2b2a <_turn_off+0x58>
    2aec:	9c 01       	movw	r18, r24
    2aee:	22 0f       	add	r18, r18
    2af0:	33 1f       	adc	r19, r19
    2af2:	f9 01       	movw	r30, r18
    2af4:	e8 0f       	add	r30, r24
    2af6:	f9 1f       	adc	r31, r25
    2af8:	ee 0f       	add	r30, r30
    2afa:	ff 1f       	adc	r31, r31
    2afc:	eb 51       	subi	r30, 0x1B	; 27
    2afe:	fe 4e       	sbci	r31, 0xEE	; 238
    2b00:	a0 81       	ld	r26, Z
    2b02:	b1 81       	ldd	r27, Z+1	; 0x01
    2b04:	4c 91       	ld	r20, X
    2b06:	f9 01       	movw	r30, r18
    2b08:	e8 0f       	add	r30, r24
    2b0a:	f9 1f       	adc	r31, r25
    2b0c:	ee 0f       	add	r30, r30
    2b0e:	ff 1f       	adc	r31, r31
    2b10:	eb 51       	subi	r30, 0x1B	; 27
    2b12:	fe 4e       	sbci	r31, 0xEE	; 238
    2b14:	81 e0       	ldi	r24, 0x01	; 1
    2b16:	90 e0       	ldi	r25, 0x00	; 0
    2b18:	02 80       	ldd	r0, Z+2	; 0x02
    2b1a:	02 c0       	rjmp	.+4      	; 0x2b20 <_turn_off+0x4e>
    2b1c:	88 0f       	add	r24, r24
    2b1e:	99 1f       	adc	r25, r25
    2b20:	0a 94       	dec	r0
    2b22:	e2 f7       	brpl	.-8      	; 0x2b1c <_turn_off+0x4a>
    2b24:	84 2b       	or	r24, r20
    2b26:	8c 93       	st	X, r24
    2b28:	08 95       	ret
    2b2a:	fc 01       	movw	r30, r24
    2b2c:	ee 0f       	add	r30, r30
    2b2e:	ff 1f       	adc	r31, r31
    2b30:	df 01       	movw	r26, r30
    2b32:	a8 0f       	add	r26, r24
    2b34:	b9 1f       	adc	r27, r25
    2b36:	aa 0f       	add	r26, r26
    2b38:	bb 1f       	adc	r27, r27
    2b3a:	ab 51       	subi	r26, 0x1B	; 27
    2b3c:	be 4e       	sbci	r27, 0xEE	; 238
    2b3e:	0d 90       	ld	r0, X+
    2b40:	bc 91       	ld	r27, X
    2b42:	a0 2d       	mov	r26, r0
    2b44:	2c 91       	ld	r18, X
    2b46:	e8 0f       	add	r30, r24
    2b48:	f9 1f       	adc	r31, r25
    2b4a:	ee 0f       	add	r30, r30
    2b4c:	ff 1f       	adc	r31, r31
    2b4e:	eb 51       	subi	r30, 0x1B	; 27
    2b50:	fe 4e       	sbci	r31, 0xEE	; 238
    2b52:	81 e0       	ldi	r24, 0x01	; 1
    2b54:	90 e0       	ldi	r25, 0x00	; 0
    2b56:	02 80       	ldd	r0, Z+2	; 0x02
    2b58:	02 c0       	rjmp	.+4      	; 0x2b5e <_turn_off+0x8c>
    2b5a:	88 0f       	add	r24, r24
    2b5c:	99 1f       	adc	r25, r25
    2b5e:	0a 94       	dec	r0
    2b60:	e2 f7       	brpl	.-8      	; 0x2b5a <_turn_off+0x88>
    2b62:	80 95       	com	r24
    2b64:	82 23       	and	r24, r18
    2b66:	8c 93       	st	X, r24
    2b68:	08 95       	ret

00002b6a <_turn_on>:
    2b6a:	90 e0       	ldi	r25, 0x00	; 0
    2b6c:	fc 01       	movw	r30, r24
    2b6e:	ee 0f       	add	r30, r30
    2b70:	ff 1f       	adc	r31, r31
    2b72:	e8 0f       	add	r30, r24
    2b74:	f9 1f       	adc	r31, r25
    2b76:	ee 0f       	add	r30, r30
    2b78:	ff 1f       	adc	r31, r31
    2b7a:	eb 51       	subi	r30, 0x1B	; 27
    2b7c:	fe 4e       	sbci	r31, 0xEE	; 238
    2b7e:	23 81       	ldd	r18, Z+3	; 0x03
    2b80:	21 11       	cpse	r18, r1
    2b82:	20 c0       	rjmp	.+64     	; 0x2bc4 <_turn_on+0x5a>
    2b84:	9c 01       	movw	r18, r24
    2b86:	22 0f       	add	r18, r18
    2b88:	33 1f       	adc	r19, r19
    2b8a:	f9 01       	movw	r30, r18
    2b8c:	e8 0f       	add	r30, r24
    2b8e:	f9 1f       	adc	r31, r25
    2b90:	ee 0f       	add	r30, r30
    2b92:	ff 1f       	adc	r31, r31
    2b94:	eb 51       	subi	r30, 0x1B	; 27
    2b96:	fe 4e       	sbci	r31, 0xEE	; 238
    2b98:	a0 81       	ld	r26, Z
    2b9a:	b1 81       	ldd	r27, Z+1	; 0x01
    2b9c:	4c 91       	ld	r20, X
    2b9e:	f9 01       	movw	r30, r18
    2ba0:	e8 0f       	add	r30, r24
    2ba2:	f9 1f       	adc	r31, r25
    2ba4:	ee 0f       	add	r30, r30
    2ba6:	ff 1f       	adc	r31, r31
    2ba8:	eb 51       	subi	r30, 0x1B	; 27
    2baa:	fe 4e       	sbci	r31, 0xEE	; 238
    2bac:	81 e0       	ldi	r24, 0x01	; 1
    2bae:	90 e0       	ldi	r25, 0x00	; 0
    2bb0:	02 80       	ldd	r0, Z+2	; 0x02
    2bb2:	02 c0       	rjmp	.+4      	; 0x2bb8 <_turn_on+0x4e>
    2bb4:	88 0f       	add	r24, r24
    2bb6:	99 1f       	adc	r25, r25
    2bb8:	0a 94       	dec	r0
    2bba:	e2 f7       	brpl	.-8      	; 0x2bb4 <_turn_on+0x4a>
    2bbc:	80 95       	com	r24
    2bbe:	84 23       	and	r24, r20
    2bc0:	8c 93       	st	X, r24
    2bc2:	08 95       	ret
    2bc4:	fc 01       	movw	r30, r24
    2bc6:	ee 0f       	add	r30, r30
    2bc8:	ff 1f       	adc	r31, r31
    2bca:	df 01       	movw	r26, r30
    2bcc:	a8 0f       	add	r26, r24
    2bce:	b9 1f       	adc	r27, r25
    2bd0:	aa 0f       	add	r26, r26
    2bd2:	bb 1f       	adc	r27, r27
    2bd4:	ab 51       	subi	r26, 0x1B	; 27
    2bd6:	be 4e       	sbci	r27, 0xEE	; 238
    2bd8:	0d 90       	ld	r0, X+
    2bda:	bc 91       	ld	r27, X
    2bdc:	a0 2d       	mov	r26, r0
    2bde:	2c 91       	ld	r18, X
    2be0:	e8 0f       	add	r30, r24
    2be2:	f9 1f       	adc	r31, r25
    2be4:	ee 0f       	add	r30, r30
    2be6:	ff 1f       	adc	r31, r31
    2be8:	eb 51       	subi	r30, 0x1B	; 27
    2bea:	fe 4e       	sbci	r31, 0xEE	; 238
    2bec:	81 e0       	ldi	r24, 0x01	; 1
    2bee:	90 e0       	ldi	r25, 0x00	; 0
    2bf0:	02 80       	ldd	r0, Z+2	; 0x02
    2bf2:	02 c0       	rjmp	.+4      	; 0x2bf8 <_turn_on+0x8e>
    2bf4:	88 0f       	add	r24, r24
    2bf6:	99 1f       	adc	r25, r25
    2bf8:	0a 94       	dec	r0
    2bfa:	e2 f7       	brpl	.-8      	; 0x2bf4 <_turn_on+0x8a>
    2bfc:	82 2b       	or	r24, r18
    2bfe:	8c 93       	st	X, r24
    2c00:	08 95       	ret

00002c02 <_hal_led_task>:
    2c02:	cc 24       	eor	r12, r12
    2c04:	c3 94       	inc	r12
    2c06:	d1 2c       	mov	r13, r1
    2c08:	68 94       	set
    2c0a:	bb 24       	eor	r11, r11
    2c0c:	b2 f8       	bld	r11, 2
    2c0e:	c5 ee       	ldi	r28, 0xE5	; 229
    2c10:	d1 e1       	ldi	r29, 0x11	; 17
    2c12:	10 e0       	ldi	r17, 0x00	; 0
    2c14:	8c 81       	ldd	r24, Y+4	; 0x04
    2c16:	81 30       	cpi	r24, 0x01	; 1
    2c18:	81 f0       	breq	.+32     	; 0x2c3a <_hal_led_task+0x38>
    2c1a:	18 f1       	brcs	.+70     	; 0x2c62 <_hal_led_task+0x60>
    2c1c:	82 30       	cpi	r24, 0x02	; 2
    2c1e:	61 f5       	brne	.+88     	; 0x2c78 <_hal_led_task+0x76>
    2c20:	e8 81       	ld	r30, Y
    2c22:	f9 81       	ldd	r31, Y+1	; 0x01
    2c24:	20 81       	ld	r18, Z
    2c26:	c6 01       	movw	r24, r12
    2c28:	0a 80       	ldd	r0, Y+2	; 0x02
    2c2a:	02 c0       	rjmp	.+4      	; 0x2c30 <_hal_led_task+0x2e>
    2c2c:	88 0f       	add	r24, r24
    2c2e:	99 1f       	adc	r25, r25
    2c30:	0a 94       	dec	r0
    2c32:	e2 f7       	brpl	.-8      	; 0x2c2c <_hal_led_task+0x2a>
    2c34:	82 27       	eor	r24, r18
    2c36:	80 83       	st	Z, r24
    2c38:	1f c0       	rjmp	.+62     	; 0x2c78 <_hal_led_task+0x76>
    2c3a:	8d 81       	ldd	r24, Y+5	; 0x05
    2c3c:	8f 5f       	subi	r24, 0xFF	; 255
    2c3e:	86 30       	cpi	r24, 0x06	; 6
    2c40:	10 f4       	brcc	.+4      	; 0x2c46 <_hal_led_task+0x44>
    2c42:	8d 83       	std	Y+5, r24	; 0x05
    2c44:	19 c0       	rjmp	.+50     	; 0x2c78 <_hal_led_task+0x76>
    2c46:	1d 82       	std	Y+5, r1	; 0x05
    2c48:	e8 81       	ld	r30, Y
    2c4a:	f9 81       	ldd	r31, Y+1	; 0x01
    2c4c:	20 81       	ld	r18, Z
    2c4e:	c6 01       	movw	r24, r12
    2c50:	0a 80       	ldd	r0, Y+2	; 0x02
    2c52:	02 c0       	rjmp	.+4      	; 0x2c58 <_hal_led_task+0x56>
    2c54:	88 0f       	add	r24, r24
    2c56:	99 1f       	adc	r25, r25
    2c58:	0a 94       	dec	r0
    2c5a:	e2 f7       	brpl	.-8      	; 0x2c54 <_hal_led_task+0x52>
    2c5c:	82 27       	eor	r24, r18
    2c5e:	80 83       	st	Z, r24
    2c60:	0b c0       	rjmp	.+22     	; 0x2c78 <_hal_led_task+0x76>
    2c62:	0d 81       	ldd	r16, Y+5	; 0x05
    2c64:	00 23       	and	r16, r16
    2c66:	29 f0       	breq	.+10     	; 0x2c72 <_hal_led_task+0x70>
    2c68:	81 2f       	mov	r24, r17
    2c6a:	7f df       	rcall	.-258    	; 0x2b6a <_turn_on>
    2c6c:	01 50       	subi	r16, 0x01	; 1
    2c6e:	0d 83       	std	Y+5, r16	; 0x05
    2c70:	03 c0       	rjmp	.+6      	; 0x2c78 <_hal_led_task+0x76>
    2c72:	bc 82       	std	Y+4, r11	; 0x04
    2c74:	81 2f       	mov	r24, r17
    2c76:	2d df       	rcall	.-422    	; 0x2ad2 <_turn_off>
    2c78:	1f 5f       	subi	r17, 0xFF	; 255
    2c7a:	26 96       	adiw	r28, 0x06	; 6
    2c7c:	14 30       	cpi	r17, 0x04	; 4
    2c7e:	51 f6       	brne	.-108    	; 0x2c14 <_hal_led_task+0x12>
    2c80:	6c e0       	ldi	r22, 0x0C	; 12
    2c82:	70 e0       	ldi	r23, 0x00	; 0
    2c84:	80 e0       	ldi	r24, 0x00	; 0
    2c86:	90 e0       	ldi	r25, 0x00	; 0
    2c88:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <vTaskDelay>
    2c8c:	c0 cf       	rjmp	.-128    	; 0x2c0e <_hal_led_task+0xc>

00002c8e <status_leds_initialise>:
    2c8e:	ef 92       	push	r14
    2c90:	ff 92       	push	r15
    2c92:	0f 93       	push	r16
    2c94:	1f 93       	push	r17
    2c96:	cf 93       	push	r28
    2c98:	df 93       	push	r29
    2c9a:	08 2f       	mov	r16, r24
    2c9c:	80 e4       	ldi	r24, 0x40	; 64
    2c9e:	87 b9       	out	0x07, r24	; 7
    2ca0:	c5 ee       	ldi	r28, 0xE5	; 229
    2ca2:	d1 e1       	ldi	r29, 0x11	; 17
    2ca4:	0f 2e       	mov	r0, r31
    2ca6:	f8 e2       	ldi	r31, 0x28	; 40
    2ca8:	ef 2e       	mov	r14, r31
    2caa:	f1 2c       	mov	r15, r1
    2cac:	f0 2d       	mov	r31, r0
    2cae:	f9 82       	std	Y+1, r15	; 0x01
    2cb0:	e8 82       	st	Y, r14
    2cb2:	86 e0       	ldi	r24, 0x06	; 6
    2cb4:	8a 83       	std	Y+2, r24	; 0x02
    2cb6:	1b 82       	std	Y+3, r1	; 0x03
    2cb8:	14 e0       	ldi	r17, 0x04	; 4
    2cba:	1c 83       	std	Y+4, r17	; 0x04
    2cbc:	80 e0       	ldi	r24, 0x00	; 0
    2cbe:	09 df       	rcall	.-494    	; 0x2ad2 <_turn_off>
    2cc0:	80 e8       	ldi	r24, 0x80	; 128
    2cc2:	87 b9       	out	0x07, r24	; 7
    2cc4:	ff 82       	std	Y+7, r15	; 0x07
    2cc6:	ee 82       	std	Y+6, r14	; 0x06
    2cc8:	87 e0       	ldi	r24, 0x07	; 7
    2cca:	88 87       	std	Y+8, r24	; 0x08
    2ccc:	19 86       	std	Y+9, r1	; 0x09
    2cce:	1a 87       	std	Y+10, r17	; 0x0a
    2cd0:	81 e0       	ldi	r24, 0x01	; 1
    2cd2:	ff de       	rcall	.-514    	; 0x2ad2 <_turn_off>
    2cd4:	80 e2       	ldi	r24, 0x20	; 32
    2cd6:	83 bb       	out	0x13, r24	; 19
    2cd8:	84 e3       	ldi	r24, 0x34	; 52
    2cda:	90 e0       	ldi	r25, 0x00	; 0
    2cdc:	9d 87       	std	Y+13, r25	; 0x0d
    2cde:	8c 87       	std	Y+12, r24	; 0x0c
    2ce0:	85 e0       	ldi	r24, 0x05	; 5
    2ce2:	8e 87       	std	Y+14, r24	; 0x0e
    2ce4:	1f 86       	std	Y+15, r1	; 0x0f
    2ce6:	18 8b       	std	Y+16, r17	; 0x10
    2ce8:	82 e0       	ldi	r24, 0x02	; 2
    2cea:	f3 de       	rcall	.-538    	; 0x2ad2 <_turn_off>
    2cec:	80 e1       	ldi	r24, 0x10	; 16
    2cee:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x7c0101>
    2cf2:	82 e0       	ldi	r24, 0x02	; 2
    2cf4:	91 e0       	ldi	r25, 0x01	; 1
    2cf6:	9b 8b       	std	Y+19, r25	; 0x13
    2cf8:	8a 8b       	std	Y+18, r24	; 0x12
    2cfa:	1c 8b       	std	Y+20, r17	; 0x14
    2cfc:	1d 8a       	std	Y+21, r1	; 0x15
    2cfe:	1e 8b       	std	Y+22, r17	; 0x16
    2d00:	83 e0       	ldi	r24, 0x03	; 3
    2d02:	e7 de       	rcall	.-562    	; 0x2ad2 <_turn_off>
    2d04:	e1 2c       	mov	r14, r1
    2d06:	f1 2c       	mov	r15, r1
    2d08:	20 e0       	ldi	r18, 0x00	; 0
    2d0a:	30 e0       	ldi	r19, 0x00	; 0
    2d0c:	40 ec       	ldi	r20, 0xC0	; 192
    2d0e:	50 e0       	ldi	r21, 0x00	; 0
    2d10:	68 e3       	ldi	r22, 0x38	; 56
    2d12:	73 e0       	ldi	r23, 0x03	; 3
    2d14:	81 e0       	ldi	r24, 0x01	; 1
    2d16:	96 e1       	ldi	r25, 0x16	; 22
    2d18:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <xTaskCreate>
    2d1c:	df 91       	pop	r29
    2d1e:	cf 91       	pop	r28
    2d20:	1f 91       	pop	r17
    2d22:	0f 91       	pop	r16
    2d24:	ff 90       	pop	r15
    2d26:	ef 90       	pop	r14
    2d28:	08 95       	ret

00002d2a <serial_create>:
    2d2a:	2f 92       	push	r2
    2d2c:	3f 92       	push	r3
    2d2e:	4f 92       	push	r4
    2d30:	5f 92       	push	r5
    2d32:	6f 92       	push	r6
    2d34:	7f 92       	push	r7
    2d36:	8f 92       	push	r8
    2d38:	9f 92       	push	r9
    2d3a:	af 92       	push	r10
    2d3c:	cf 92       	push	r12
    2d3e:	ef 92       	push	r14
    2d40:	ff 92       	push	r15
    2d42:	0f 93       	push	r16
    2d44:	1f 93       	push	r17
    2d46:	cf 93       	push	r28
    2d48:	df 93       	push	r29
    2d4a:	cd b7       	in	r28, 0x3d	; 61
    2d4c:	de b7       	in	r29, 0x3e	; 62
    2d4e:	f8 2e       	mov	r15, r24
    2d50:	2a 01       	movw	r4, r20
    2d52:	3b 01       	movw	r6, r22
    2d54:	88 e0       	ldi	r24, 0x08	; 8
    2d56:	90 e0       	ldi	r25, 0x00	; 0
    2d58:	29 d5       	rcall	.+2642   	; 0x37ac <malloc>
    2d5a:	8c 01       	movw	r16, r24
    2d5c:	8f 2d       	mov	r24, r15
    2d5e:	90 e0       	ldi	r25, 0x00	; 0
    2d60:	fc 01       	movw	r30, r24
    2d62:	ee 0f       	add	r30, r30
    2d64:	ff 1f       	adc	r31, r31
    2d66:	e3 50       	subi	r30, 0x03	; 3
    2d68:	fe 4e       	sbci	r31, 0xEE	; 238
    2d6a:	11 83       	std	Z+1, r17	; 0x01
    2d6c:	00 83       	st	Z, r16
    2d6e:	01 15       	cp	r16, r1
    2d70:	11 05       	cpc	r17, r1
    2d72:	09 f4       	brne	.+2      	; 0x2d76 <serial_create+0x4c>
    2d74:	64 c0       	rjmp	.+200    	; 0x2e3e <serial_create+0x114>
    2d76:	88 0f       	add	r24, r24
    2d78:	99 1f       	adc	r25, r25
    2d7a:	fc 01       	movw	r30, r24
    2d7c:	eb 5e       	subi	r30, 0xEB	; 235
    2d7e:	fd 4f       	sbci	r31, 0xFD	; 253
    2d80:	80 81       	ld	r24, Z
    2d82:	91 81       	ldd	r25, Z+1	; 0x01
    2d84:	d8 01       	movw	r26, r16
    2d86:	8d 93       	st	X+, r24
    2d88:	9c 93       	st	X, r25
    2d8a:	8c 2d       	mov	r24, r12
    2d8c:	90 e0       	ldi	r25, 0x00	; 0
    2d8e:	88 0f       	add	r24, r24
    2d90:	99 1f       	adc	r25, r25
    2d92:	88 0f       	add	r24, r24
    2d94:	99 1f       	adc	r25, r25
    2d96:	0a d5       	rcall	.+2580   	; 0x37ac <malloc>
    2d98:	1c 01       	movw	r2, r24
    2d9a:	86 e0       	ldi	r24, 0x06	; 6
    2d9c:	90 e0       	ldi	r25, 0x00	; 0
    2d9e:	06 d5       	rcall	.+2572   	; 0x37ac <malloc>
    2da0:	7c 01       	movw	r14, r24
    2da2:	4c 2d       	mov	r20, r12
    2da4:	b1 01       	movw	r22, r2
    2da6:	00 d3       	rcall	.+1536   	; 0x33a8 <fifo_init>
    2da8:	f8 01       	movw	r30, r16
    2daa:	f5 82       	std	Z+5, r15	; 0x05
    2dac:	e4 82       	std	Z+4, r14	; 0x04
    2dae:	8a 2d       	mov	r24, r10
    2db0:	90 e0       	ldi	r25, 0x00	; 0
    2db2:	88 0f       	add	r24, r24
    2db4:	99 1f       	adc	r25, r25
    2db6:	88 0f       	add	r24, r24
    2db8:	99 1f       	adc	r25, r25
    2dba:	f8 d4       	rcall	.+2544   	; 0x37ac <malloc>
    2dbc:	1c 01       	movw	r2, r24
    2dbe:	86 e0       	ldi	r24, 0x06	; 6
    2dc0:	90 e0       	ldi	r25, 0x00	; 0
    2dc2:	f4 d4       	rcall	.+2536   	; 0x37ac <malloc>
    2dc4:	7c 01       	movw	r14, r24
    2dc6:	4a 2d       	mov	r20, r10
    2dc8:	b1 01       	movw	r22, r2
    2dca:	ee d2       	rcall	.+1500   	; 0x33a8 <fifo_init>
    2dcc:	d8 01       	movw	r26, r16
    2dce:	13 96       	adiw	r26, 0x03	; 3
    2dd0:	fc 92       	st	X, r15
    2dd2:	ee 92       	st	-X, r14
    2dd4:	12 97       	sbiw	r26, 0x02	; 2
    2dd6:	17 96       	adiw	r26, 0x07	; 7
    2dd8:	9c 92       	st	X, r9
    2dda:	8e 92       	st	-X, r8
    2ddc:	16 97       	sbiw	r26, 0x06	; 6
    2dde:	ff b6       	in	r15, 0x3f	; 63
    2de0:	f8 94       	cli
    2de2:	ed 91       	ld	r30, X+
    2de4:	fc 91       	ld	r31, X
    2de6:	11 97       	sbiw	r26, 0x01	; 1
    2de8:	36 97       	sbiw	r30, 0x06	; 6
    2dea:	80 81       	ld	r24, Z
    2dec:	82 60       	ori	r24, 0x02	; 2
    2dee:	80 83       	st	Z, r24
    2df0:	8d 90       	ld	r8, X+
    2df2:	9c 90       	ld	r9, X
    2df4:	c3 01       	movw	r24, r6
    2df6:	b2 01       	movw	r22, r4
    2df8:	c0 dd       	rcall	.-1152   	; 0x297a <__floatunsisf>
    2dfa:	20 e0       	ldi	r18, 0x00	; 0
    2dfc:	30 e0       	ldi	r19, 0x00	; 0
    2dfe:	40 e0       	ldi	r20, 0x00	; 0
    2e00:	51 e4       	ldi	r21, 0x41	; 65
    2e02:	38 d4       	rcall	.+2160   	; 0x3674 <__mulsf3>
    2e04:	9b 01       	movw	r18, r22
    2e06:	ac 01       	movw	r20, r24
    2e08:	60 e0       	ldi	r22, 0x00	; 0
    2e0a:	74 e2       	ldi	r23, 0x24	; 36
    2e0c:	84 e7       	ldi	r24, 0x74	; 116
    2e0e:	9b e4       	ldi	r25, 0x4B	; 75
    2e10:	4c d3       	rcall	.+1688   	; 0x34aa <__divsf3>
    2e12:	20 e0       	ldi	r18, 0x00	; 0
    2e14:	30 e0       	ldi	r19, 0x00	; 0
    2e16:	40 e8       	ldi	r20, 0x80	; 128
    2e18:	5f e3       	ldi	r21, 0x3F	; 63
    2e1a:	e2 d2       	rcall	.+1476   	; 0x33e0 <__subsf3>
    2e1c:	ae d3       	rcall	.+1884   	; 0x357a <__fixunssfsi>
    2e1e:	f4 01       	movw	r30, r8
    2e20:	32 97       	sbiw	r30, 0x02	; 2
    2e22:	60 83       	st	Z, r22
    2e24:	d8 01       	movw	r26, r16
    2e26:	ed 91       	ld	r30, X+
    2e28:	fc 91       	ld	r31, X
    2e2a:	11 97       	sbiw	r26, 0x01	; 1
    2e2c:	35 97       	sbiw	r30, 0x05	; 5
    2e2e:	88 e9       	ldi	r24, 0x98	; 152
    2e30:	80 83       	st	Z, r24
    2e32:	ed 91       	ld	r30, X+
    2e34:	fc 91       	ld	r31, X
    2e36:	34 97       	sbiw	r30, 0x04	; 4
    2e38:	86 e0       	ldi	r24, 0x06	; 6
    2e3a:	80 83       	st	Z, r24
    2e3c:	ff be       	out	0x3f, r15	; 63
    2e3e:	c8 01       	movw	r24, r16
    2e40:	df 91       	pop	r29
    2e42:	cf 91       	pop	r28
    2e44:	1f 91       	pop	r17
    2e46:	0f 91       	pop	r16
    2e48:	ff 90       	pop	r15
    2e4a:	ef 90       	pop	r14
    2e4c:	cf 90       	pop	r12
    2e4e:	af 90       	pop	r10
    2e50:	9f 90       	pop	r9
    2e52:	8f 90       	pop	r8
    2e54:	7f 90       	pop	r7
    2e56:	6f 90       	pop	r6
    2e58:	5f 90       	pop	r5
    2e5a:	4f 90       	pop	r4
    2e5c:	3f 90       	pop	r3
    2e5e:	2f 90       	pop	r2
    2e60:	08 95       	ret

00002e62 <serial_sendByte>:
    2e62:	cf 93       	push	r28
    2e64:	df 93       	push	r29
    2e66:	dc 01       	movw	r26, r24
    2e68:	89 2b       	or	r24, r25
    2e6a:	01 f1       	breq	.+64     	; 0x2eac <serial_sendByte+0x4a>
    2e6c:	12 96       	adiw	r26, 0x02	; 2
    2e6e:	ed 91       	ld	r30, X+
    2e70:	fc 91       	ld	r31, X
    2e72:	13 97       	sbiw	r26, 0x03	; 3
    2e74:	93 81       	ldd	r25, Z+3	; 0x03
    2e76:	82 81       	ldd	r24, Z+2	; 0x02
    2e78:	25 81       	ldd	r18, Z+5	; 0x05
    2e7a:	98 1b       	sub	r25, r24
    2e7c:	92 23       	and	r25, r18
    2e7e:	84 81       	ldd	r24, Z+4	; 0x04
    2e80:	98 17       	cp	r25, r24
    2e82:	b1 f0       	breq	.+44     	; 0x2eb0 <serial_sendByte+0x4e>
    2e84:	83 81       	ldd	r24, Z+3	; 0x03
    2e86:	26 95       	lsr	r18
    2e88:	28 23       	and	r18, r24
    2e8a:	c0 81       	ld	r28, Z
    2e8c:	d1 81       	ldd	r29, Z+1	; 0x01
    2e8e:	c2 0f       	add	r28, r18
    2e90:	d1 1d       	adc	r29, r1
    2e92:	68 83       	st	Y, r22
    2e94:	8f 5f       	subi	r24, 0xFF	; 255
    2e96:	95 81       	ldd	r25, Z+5	; 0x05
    2e98:	89 23       	and	r24, r25
    2e9a:	83 83       	std	Z+3, r24	; 0x03
    2e9c:	ed 91       	ld	r30, X+
    2e9e:	fc 91       	ld	r31, X
    2ea0:	35 97       	sbiw	r30, 0x05	; 5
    2ea2:	80 81       	ld	r24, Z
    2ea4:	80 62       	ori	r24, 0x20	; 32
    2ea6:	80 83       	st	Z, r24
    2ea8:	80 e0       	ldi	r24, 0x00	; 0
    2eaa:	03 c0       	rjmp	.+6      	; 0x2eb2 <serial_sendByte+0x50>
    2eac:	81 e0       	ldi	r24, 0x01	; 1
    2eae:	01 c0       	rjmp	.+2      	; 0x2eb2 <serial_sendByte+0x50>
    2eb0:	82 e0       	ldi	r24, 0x02	; 2
    2eb2:	df 91       	pop	r29
    2eb4:	cf 91       	pop	r28
    2eb6:	08 95       	ret

00002eb8 <serial_getByte>:
    2eb8:	00 97       	sbiw	r24, 0x00	; 0
    2eba:	d1 f0       	breq	.+52     	; 0x2ef0 <serial_getByte+0x38>
    2ebc:	dc 01       	movw	r26, r24
    2ebe:	14 96       	adiw	r26, 0x04	; 4
    2ec0:	ed 91       	ld	r30, X+
    2ec2:	fc 91       	ld	r31, X
    2ec4:	15 97       	sbiw	r26, 0x05	; 5
    2ec6:	93 81       	ldd	r25, Z+3	; 0x03
    2ec8:	82 81       	ldd	r24, Z+2	; 0x02
    2eca:	98 17       	cp	r25, r24
    2ecc:	99 f0       	breq	.+38     	; 0x2ef4 <serial_getByte+0x3c>
    2ece:	92 81       	ldd	r25, Z+2	; 0x02
    2ed0:	85 81       	ldd	r24, Z+5	; 0x05
    2ed2:	86 95       	lsr	r24
    2ed4:	89 23       	and	r24, r25
    2ed6:	a0 81       	ld	r26, Z
    2ed8:	b1 81       	ldd	r27, Z+1	; 0x01
    2eda:	a8 0f       	add	r26, r24
    2edc:	b1 1d       	adc	r27, r1
    2ede:	8c 91       	ld	r24, X
    2ee0:	db 01       	movw	r26, r22
    2ee2:	8c 93       	st	X, r24
    2ee4:	9f 5f       	subi	r25, 0xFF	; 255
    2ee6:	85 81       	ldd	r24, Z+5	; 0x05
    2ee8:	98 23       	and	r25, r24
    2eea:	92 83       	std	Z+2, r25	; 0x02
    2eec:	80 e0       	ldi	r24, 0x00	; 0
    2eee:	08 95       	ret
    2ef0:	81 e0       	ldi	r24, 0x01	; 1
    2ef2:	08 95       	ret
    2ef4:	83 e0       	ldi	r24, 0x03	; 3
    2ef6:	08 95       	ret

00002ef8 <__vector_25>:
    2ef8:	1f 92       	push	r1
    2efa:	0f 92       	push	r0
    2efc:	0f b6       	in	r0, 0x3f	; 63
    2efe:	0f 92       	push	r0
    2f00:	11 24       	eor	r1, r1
    2f02:	0b b6       	in	r0, 0x3b	; 59
    2f04:	0f 92       	push	r0
    2f06:	2f 93       	push	r18
    2f08:	3f 93       	push	r19
    2f0a:	4f 93       	push	r20
    2f0c:	5f 93       	push	r21
    2f0e:	6f 93       	push	r22
    2f10:	7f 93       	push	r23
    2f12:	8f 93       	push	r24
    2f14:	9f 93       	push	r25
    2f16:	af 93       	push	r26
    2f18:	bf 93       	push	r27
    2f1a:	cf 93       	push	r28
    2f1c:	df 93       	push	r29
    2f1e:	ef 93       	push	r30
    2f20:	ff 93       	push	r31
    2f22:	a0 91 fd 11 	lds	r26, 0x11FD	; 0x8011fd <_ser_handle>
    2f26:	b0 91 fe 11 	lds	r27, 0x11FE	; 0x8011fe <_ser_handle+0x1>
    2f2a:	10 97       	sbiw	r26, 0x00	; 0
    2f2c:	11 f1       	breq	.+68     	; 0x2f72 <__vector_25+0x7a>
    2f2e:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    2f32:	14 96       	adiw	r26, 0x04	; 4
    2f34:	ed 91       	ld	r30, X+
    2f36:	fc 91       	ld	r31, X
    2f38:	15 97       	sbiw	r26, 0x05	; 5
    2f3a:	93 81       	ldd	r25, Z+3	; 0x03
    2f3c:	82 81       	ldd	r24, Z+2	; 0x02
    2f3e:	25 81       	ldd	r18, Z+5	; 0x05
    2f40:	98 1b       	sub	r25, r24
    2f42:	92 23       	and	r25, r18
    2f44:	84 81       	ldd	r24, Z+4	; 0x04
    2f46:	98 17       	cp	r25, r24
    2f48:	61 f0       	breq	.+24     	; 0x2f62 <__vector_25+0x6a>
    2f4a:	83 81       	ldd	r24, Z+3	; 0x03
    2f4c:	26 95       	lsr	r18
    2f4e:	28 23       	and	r18, r24
    2f50:	c0 81       	ld	r28, Z
    2f52:	d1 81       	ldd	r29, Z+1	; 0x01
    2f54:	c2 0f       	add	r28, r18
    2f56:	d1 1d       	adc	r29, r1
    2f58:	68 83       	st	Y, r22
    2f5a:	8f 5f       	subi	r24, 0xFF	; 255
    2f5c:	95 81       	ldd	r25, Z+5	; 0x05
    2f5e:	89 23       	and	r24, r25
    2f60:	83 83       	std	Z+3, r24	; 0x03
    2f62:	16 96       	adiw	r26, 0x06	; 6
    2f64:	ed 91       	ld	r30, X+
    2f66:	fc 91       	ld	r31, X
    2f68:	17 97       	sbiw	r26, 0x07	; 7
    2f6a:	30 97       	sbiw	r30, 0x00	; 0
    2f6c:	11 f0       	breq	.+4      	; 0x2f72 <__vector_25+0x7a>
    2f6e:	cd 01       	movw	r24, r26
    2f70:	19 95       	eicall
    2f72:	ff 91       	pop	r31
    2f74:	ef 91       	pop	r30
    2f76:	df 91       	pop	r29
    2f78:	cf 91       	pop	r28
    2f7a:	bf 91       	pop	r27
    2f7c:	af 91       	pop	r26
    2f7e:	9f 91       	pop	r25
    2f80:	8f 91       	pop	r24
    2f82:	7f 91       	pop	r23
    2f84:	6f 91       	pop	r22
    2f86:	5f 91       	pop	r21
    2f88:	4f 91       	pop	r20
    2f8a:	3f 91       	pop	r19
    2f8c:	2f 91       	pop	r18
    2f8e:	0f 90       	pop	r0
    2f90:	0b be       	out	0x3b, r0	; 59
    2f92:	0f 90       	pop	r0
    2f94:	0f be       	out	0x3f, r0	; 63
    2f96:	0f 90       	pop	r0
    2f98:	1f 90       	pop	r1
    2f9a:	18 95       	reti

00002f9c <__vector_26>:
    2f9c:	1f 92       	push	r1
    2f9e:	0f 92       	push	r0
    2fa0:	0f b6       	in	r0, 0x3f	; 63
    2fa2:	0f 92       	push	r0
    2fa4:	11 24       	eor	r1, r1
    2fa6:	0b b6       	in	r0, 0x3b	; 59
    2fa8:	0f 92       	push	r0
    2faa:	2f 93       	push	r18
    2fac:	8f 93       	push	r24
    2fae:	9f 93       	push	r25
    2fb0:	af 93       	push	r26
    2fb2:	bf 93       	push	r27
    2fb4:	ef 93       	push	r30
    2fb6:	ff 93       	push	r31
    2fb8:	e0 91 fd 11 	lds	r30, 0x11FD	; 0x8011fd <_ser_handle>
    2fbc:	f0 91 fe 11 	lds	r31, 0x11FE	; 0x8011fe <_ser_handle+0x1>
    2fc0:	30 97       	sbiw	r30, 0x00	; 0
    2fc2:	b9 f0       	breq	.+46     	; 0x2ff2 <__vector_26+0x56>
    2fc4:	02 80       	ldd	r0, Z+2	; 0x02
    2fc6:	f3 81       	ldd	r31, Z+3	; 0x03
    2fc8:	e0 2d       	mov	r30, r0
    2fca:	93 81       	ldd	r25, Z+3	; 0x03
    2fcc:	82 81       	ldd	r24, Z+2	; 0x02
    2fce:	98 17       	cp	r25, r24
    2fd0:	b1 f0       	breq	.+44     	; 0x2ffe <__vector_26+0x62>
    2fd2:	92 81       	ldd	r25, Z+2	; 0x02
    2fd4:	85 81       	ldd	r24, Z+5	; 0x05
    2fd6:	28 2f       	mov	r18, r24
    2fd8:	26 95       	lsr	r18
    2fda:	29 23       	and	r18, r25
    2fdc:	a0 81       	ld	r26, Z
    2fde:	b1 81       	ldd	r27, Z+1	; 0x01
    2fe0:	a2 0f       	add	r26, r18
    2fe2:	b1 1d       	adc	r27, r1
    2fe4:	2c 91       	ld	r18, X
    2fe6:	9f 5f       	subi	r25, 0xFF	; 255
    2fe8:	89 23       	and	r24, r25
    2fea:	82 83       	std	Z+2, r24	; 0x02
    2fec:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    2ff0:	0b c0       	rjmp	.+22     	; 0x3008 <__vector_26+0x6c>
    2ff2:	e1 ec       	ldi	r30, 0xC1	; 193
    2ff4:	f0 e0       	ldi	r31, 0x00	; 0
    2ff6:	80 81       	ld	r24, Z
    2ff8:	8f 7d       	andi	r24, 0xDF	; 223
    2ffa:	80 83       	st	Z, r24
    2ffc:	05 c0       	rjmp	.+10     	; 0x3008 <__vector_26+0x6c>
    2ffe:	e1 ec       	ldi	r30, 0xC1	; 193
    3000:	f0 e0       	ldi	r31, 0x00	; 0
    3002:	80 81       	ld	r24, Z
    3004:	8f 7d       	andi	r24, 0xDF	; 223
    3006:	80 83       	st	Z, r24
    3008:	ff 91       	pop	r31
    300a:	ef 91       	pop	r30
    300c:	bf 91       	pop	r27
    300e:	af 91       	pop	r26
    3010:	9f 91       	pop	r25
    3012:	8f 91       	pop	r24
    3014:	2f 91       	pop	r18
    3016:	0f 90       	pop	r0
    3018:	0b be       	out	0x3b, r0	; 59
    301a:	0f 90       	pop	r0
    301c:	0f be       	out	0x3f, r0	; 63
    301e:	0f 90       	pop	r0
    3020:	1f 90       	pop	r1
    3022:	18 95       	reti

00003024 <__vector_36>:
    3024:	1f 92       	push	r1
    3026:	0f 92       	push	r0
    3028:	0f b6       	in	r0, 0x3f	; 63
    302a:	0f 92       	push	r0
    302c:	11 24       	eor	r1, r1
    302e:	0b b6       	in	r0, 0x3b	; 59
    3030:	0f 92       	push	r0
    3032:	2f 93       	push	r18
    3034:	3f 93       	push	r19
    3036:	4f 93       	push	r20
    3038:	5f 93       	push	r21
    303a:	6f 93       	push	r22
    303c:	7f 93       	push	r23
    303e:	8f 93       	push	r24
    3040:	9f 93       	push	r25
    3042:	af 93       	push	r26
    3044:	bf 93       	push	r27
    3046:	cf 93       	push	r28
    3048:	df 93       	push	r29
    304a:	ef 93       	push	r30
    304c:	ff 93       	push	r31
    304e:	a0 91 ff 11 	lds	r26, 0x11FF	; 0x8011ff <_ser_handle+0x2>
    3052:	b0 91 00 12 	lds	r27, 0x1200	; 0x801200 <_ser_handle+0x3>
    3056:	10 97       	sbiw	r26, 0x00	; 0
    3058:	11 f1       	breq	.+68     	; 0x309e <__vector_36+0x7a>
    305a:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    305e:	14 96       	adiw	r26, 0x04	; 4
    3060:	ed 91       	ld	r30, X+
    3062:	fc 91       	ld	r31, X
    3064:	15 97       	sbiw	r26, 0x05	; 5
    3066:	93 81       	ldd	r25, Z+3	; 0x03
    3068:	82 81       	ldd	r24, Z+2	; 0x02
    306a:	25 81       	ldd	r18, Z+5	; 0x05
    306c:	98 1b       	sub	r25, r24
    306e:	92 23       	and	r25, r18
    3070:	84 81       	ldd	r24, Z+4	; 0x04
    3072:	98 17       	cp	r25, r24
    3074:	61 f0       	breq	.+24     	; 0x308e <__vector_36+0x6a>
    3076:	83 81       	ldd	r24, Z+3	; 0x03
    3078:	26 95       	lsr	r18
    307a:	28 23       	and	r18, r24
    307c:	c0 81       	ld	r28, Z
    307e:	d1 81       	ldd	r29, Z+1	; 0x01
    3080:	c2 0f       	add	r28, r18
    3082:	d1 1d       	adc	r29, r1
    3084:	68 83       	st	Y, r22
    3086:	8f 5f       	subi	r24, 0xFF	; 255
    3088:	95 81       	ldd	r25, Z+5	; 0x05
    308a:	89 23       	and	r24, r25
    308c:	83 83       	std	Z+3, r24	; 0x03
    308e:	16 96       	adiw	r26, 0x06	; 6
    3090:	ed 91       	ld	r30, X+
    3092:	fc 91       	ld	r31, X
    3094:	17 97       	sbiw	r26, 0x07	; 7
    3096:	30 97       	sbiw	r30, 0x00	; 0
    3098:	11 f0       	breq	.+4      	; 0x309e <__vector_36+0x7a>
    309a:	cd 01       	movw	r24, r26
    309c:	19 95       	eicall
    309e:	ff 91       	pop	r31
    30a0:	ef 91       	pop	r30
    30a2:	df 91       	pop	r29
    30a4:	cf 91       	pop	r28
    30a6:	bf 91       	pop	r27
    30a8:	af 91       	pop	r26
    30aa:	9f 91       	pop	r25
    30ac:	8f 91       	pop	r24
    30ae:	7f 91       	pop	r23
    30b0:	6f 91       	pop	r22
    30b2:	5f 91       	pop	r21
    30b4:	4f 91       	pop	r20
    30b6:	3f 91       	pop	r19
    30b8:	2f 91       	pop	r18
    30ba:	0f 90       	pop	r0
    30bc:	0b be       	out	0x3b, r0	; 59
    30be:	0f 90       	pop	r0
    30c0:	0f be       	out	0x3f, r0	; 63
    30c2:	0f 90       	pop	r0
    30c4:	1f 90       	pop	r1
    30c6:	18 95       	reti

000030c8 <__vector_37>:
    30c8:	1f 92       	push	r1
    30ca:	0f 92       	push	r0
    30cc:	0f b6       	in	r0, 0x3f	; 63
    30ce:	0f 92       	push	r0
    30d0:	11 24       	eor	r1, r1
    30d2:	0b b6       	in	r0, 0x3b	; 59
    30d4:	0f 92       	push	r0
    30d6:	2f 93       	push	r18
    30d8:	8f 93       	push	r24
    30da:	9f 93       	push	r25
    30dc:	af 93       	push	r26
    30de:	bf 93       	push	r27
    30e0:	ef 93       	push	r30
    30e2:	ff 93       	push	r31
    30e4:	e0 91 ff 11 	lds	r30, 0x11FF	; 0x8011ff <_ser_handle+0x2>
    30e8:	f0 91 00 12 	lds	r31, 0x1200	; 0x801200 <_ser_handle+0x3>
    30ec:	30 97       	sbiw	r30, 0x00	; 0
    30ee:	b9 f0       	breq	.+46     	; 0x311e <__vector_37+0x56>
    30f0:	02 80       	ldd	r0, Z+2	; 0x02
    30f2:	f3 81       	ldd	r31, Z+3	; 0x03
    30f4:	e0 2d       	mov	r30, r0
    30f6:	93 81       	ldd	r25, Z+3	; 0x03
    30f8:	82 81       	ldd	r24, Z+2	; 0x02
    30fa:	98 17       	cp	r25, r24
    30fc:	b1 f0       	breq	.+44     	; 0x312a <__vector_37+0x62>
    30fe:	92 81       	ldd	r25, Z+2	; 0x02
    3100:	85 81       	ldd	r24, Z+5	; 0x05
    3102:	28 2f       	mov	r18, r24
    3104:	26 95       	lsr	r18
    3106:	29 23       	and	r18, r25
    3108:	a0 81       	ld	r26, Z
    310a:	b1 81       	ldd	r27, Z+1	; 0x01
    310c:	a2 0f       	add	r26, r18
    310e:	b1 1d       	adc	r27, r1
    3110:	2c 91       	ld	r18, X
    3112:	9f 5f       	subi	r25, 0xFF	; 255
    3114:	89 23       	and	r24, r25
    3116:	82 83       	std	Z+2, r24	; 0x02
    3118:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    311c:	0b c0       	rjmp	.+22     	; 0x3134 <__vector_37+0x6c>
    311e:	e9 ec       	ldi	r30, 0xC9	; 201
    3120:	f0 e0       	ldi	r31, 0x00	; 0
    3122:	80 81       	ld	r24, Z
    3124:	8f 7d       	andi	r24, 0xDF	; 223
    3126:	80 83       	st	Z, r24
    3128:	05 c0       	rjmp	.+10     	; 0x3134 <__vector_37+0x6c>
    312a:	e9 ec       	ldi	r30, 0xC9	; 201
    312c:	f0 e0       	ldi	r31, 0x00	; 0
    312e:	80 81       	ld	r24, Z
    3130:	8f 7d       	andi	r24, 0xDF	; 223
    3132:	80 83       	st	Z, r24
    3134:	ff 91       	pop	r31
    3136:	ef 91       	pop	r30
    3138:	bf 91       	pop	r27
    313a:	af 91       	pop	r26
    313c:	9f 91       	pop	r25
    313e:	8f 91       	pop	r24
    3140:	2f 91       	pop	r18
    3142:	0f 90       	pop	r0
    3144:	0b be       	out	0x3b, r0	; 59
    3146:	0f 90       	pop	r0
    3148:	0f be       	out	0x3f, r0	; 63
    314a:	0f 90       	pop	r0
    314c:	1f 90       	pop	r1
    314e:	18 95       	reti

00003150 <__vector_51>:
    3150:	1f 92       	push	r1
    3152:	0f 92       	push	r0
    3154:	0f b6       	in	r0, 0x3f	; 63
    3156:	0f 92       	push	r0
    3158:	11 24       	eor	r1, r1
    315a:	0b b6       	in	r0, 0x3b	; 59
    315c:	0f 92       	push	r0
    315e:	2f 93       	push	r18
    3160:	3f 93       	push	r19
    3162:	4f 93       	push	r20
    3164:	5f 93       	push	r21
    3166:	6f 93       	push	r22
    3168:	7f 93       	push	r23
    316a:	8f 93       	push	r24
    316c:	9f 93       	push	r25
    316e:	af 93       	push	r26
    3170:	bf 93       	push	r27
    3172:	cf 93       	push	r28
    3174:	df 93       	push	r29
    3176:	ef 93       	push	r30
    3178:	ff 93       	push	r31
    317a:	a0 91 01 12 	lds	r26, 0x1201	; 0x801201 <_ser_handle+0x4>
    317e:	b0 91 02 12 	lds	r27, 0x1202	; 0x801202 <_ser_handle+0x5>
    3182:	10 97       	sbiw	r26, 0x00	; 0
    3184:	11 f1       	breq	.+68     	; 0x31ca <__vector_51+0x7a>
    3186:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    318a:	14 96       	adiw	r26, 0x04	; 4
    318c:	ed 91       	ld	r30, X+
    318e:	fc 91       	ld	r31, X
    3190:	15 97       	sbiw	r26, 0x05	; 5
    3192:	93 81       	ldd	r25, Z+3	; 0x03
    3194:	82 81       	ldd	r24, Z+2	; 0x02
    3196:	25 81       	ldd	r18, Z+5	; 0x05
    3198:	98 1b       	sub	r25, r24
    319a:	92 23       	and	r25, r18
    319c:	84 81       	ldd	r24, Z+4	; 0x04
    319e:	98 17       	cp	r25, r24
    31a0:	61 f0       	breq	.+24     	; 0x31ba <__vector_51+0x6a>
    31a2:	83 81       	ldd	r24, Z+3	; 0x03
    31a4:	26 95       	lsr	r18
    31a6:	28 23       	and	r18, r24
    31a8:	c0 81       	ld	r28, Z
    31aa:	d1 81       	ldd	r29, Z+1	; 0x01
    31ac:	c2 0f       	add	r28, r18
    31ae:	d1 1d       	adc	r29, r1
    31b0:	68 83       	st	Y, r22
    31b2:	8f 5f       	subi	r24, 0xFF	; 255
    31b4:	95 81       	ldd	r25, Z+5	; 0x05
    31b6:	89 23       	and	r24, r25
    31b8:	83 83       	std	Z+3, r24	; 0x03
    31ba:	16 96       	adiw	r26, 0x06	; 6
    31bc:	ed 91       	ld	r30, X+
    31be:	fc 91       	ld	r31, X
    31c0:	17 97       	sbiw	r26, 0x07	; 7
    31c2:	30 97       	sbiw	r30, 0x00	; 0
    31c4:	11 f0       	breq	.+4      	; 0x31ca <__vector_51+0x7a>
    31c6:	cd 01       	movw	r24, r26
    31c8:	19 95       	eicall
    31ca:	ff 91       	pop	r31
    31cc:	ef 91       	pop	r30
    31ce:	df 91       	pop	r29
    31d0:	cf 91       	pop	r28
    31d2:	bf 91       	pop	r27
    31d4:	af 91       	pop	r26
    31d6:	9f 91       	pop	r25
    31d8:	8f 91       	pop	r24
    31da:	7f 91       	pop	r23
    31dc:	6f 91       	pop	r22
    31de:	5f 91       	pop	r21
    31e0:	4f 91       	pop	r20
    31e2:	3f 91       	pop	r19
    31e4:	2f 91       	pop	r18
    31e6:	0f 90       	pop	r0
    31e8:	0b be       	out	0x3b, r0	; 59
    31ea:	0f 90       	pop	r0
    31ec:	0f be       	out	0x3f, r0	; 63
    31ee:	0f 90       	pop	r0
    31f0:	1f 90       	pop	r1
    31f2:	18 95       	reti

000031f4 <__vector_52>:
    31f4:	1f 92       	push	r1
    31f6:	0f 92       	push	r0
    31f8:	0f b6       	in	r0, 0x3f	; 63
    31fa:	0f 92       	push	r0
    31fc:	11 24       	eor	r1, r1
    31fe:	0b b6       	in	r0, 0x3b	; 59
    3200:	0f 92       	push	r0
    3202:	2f 93       	push	r18
    3204:	8f 93       	push	r24
    3206:	9f 93       	push	r25
    3208:	af 93       	push	r26
    320a:	bf 93       	push	r27
    320c:	ef 93       	push	r30
    320e:	ff 93       	push	r31
    3210:	e0 91 01 12 	lds	r30, 0x1201	; 0x801201 <_ser_handle+0x4>
    3214:	f0 91 02 12 	lds	r31, 0x1202	; 0x801202 <_ser_handle+0x5>
    3218:	30 97       	sbiw	r30, 0x00	; 0
    321a:	b9 f0       	breq	.+46     	; 0x324a <__vector_52+0x56>
    321c:	02 80       	ldd	r0, Z+2	; 0x02
    321e:	f3 81       	ldd	r31, Z+3	; 0x03
    3220:	e0 2d       	mov	r30, r0
    3222:	93 81       	ldd	r25, Z+3	; 0x03
    3224:	82 81       	ldd	r24, Z+2	; 0x02
    3226:	98 17       	cp	r25, r24
    3228:	b1 f0       	breq	.+44     	; 0x3256 <__vector_52+0x62>
    322a:	92 81       	ldd	r25, Z+2	; 0x02
    322c:	85 81       	ldd	r24, Z+5	; 0x05
    322e:	28 2f       	mov	r18, r24
    3230:	26 95       	lsr	r18
    3232:	29 23       	and	r18, r25
    3234:	a0 81       	ld	r26, Z
    3236:	b1 81       	ldd	r27, Z+1	; 0x01
    3238:	a2 0f       	add	r26, r18
    323a:	b1 1d       	adc	r27, r1
    323c:	2c 91       	ld	r18, X
    323e:	9f 5f       	subi	r25, 0xFF	; 255
    3240:	89 23       	and	r24, r25
    3242:	82 83       	std	Z+2, r24	; 0x02
    3244:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    3248:	0b c0       	rjmp	.+22     	; 0x3260 <__vector_52+0x6c>
    324a:	e1 ed       	ldi	r30, 0xD1	; 209
    324c:	f0 e0       	ldi	r31, 0x00	; 0
    324e:	80 81       	ld	r24, Z
    3250:	8f 7d       	andi	r24, 0xDF	; 223
    3252:	80 83       	st	Z, r24
    3254:	05 c0       	rjmp	.+10     	; 0x3260 <__vector_52+0x6c>
    3256:	e1 ed       	ldi	r30, 0xD1	; 209
    3258:	f0 e0       	ldi	r31, 0x00	; 0
    325a:	80 81       	ld	r24, Z
    325c:	8f 7d       	andi	r24, 0xDF	; 223
    325e:	80 83       	st	Z, r24
    3260:	ff 91       	pop	r31
    3262:	ef 91       	pop	r30
    3264:	bf 91       	pop	r27
    3266:	af 91       	pop	r26
    3268:	9f 91       	pop	r25
    326a:	8f 91       	pop	r24
    326c:	2f 91       	pop	r18
    326e:	0f 90       	pop	r0
    3270:	0b be       	out	0x3b, r0	; 59
    3272:	0f 90       	pop	r0
    3274:	0f be       	out	0x3f, r0	; 63
    3276:	0f 90       	pop	r0
    3278:	1f 90       	pop	r1
    327a:	18 95       	reti

0000327c <__vector_54>:
    327c:	1f 92       	push	r1
    327e:	0f 92       	push	r0
    3280:	0f b6       	in	r0, 0x3f	; 63
    3282:	0f 92       	push	r0
    3284:	11 24       	eor	r1, r1
    3286:	0b b6       	in	r0, 0x3b	; 59
    3288:	0f 92       	push	r0
    328a:	2f 93       	push	r18
    328c:	3f 93       	push	r19
    328e:	4f 93       	push	r20
    3290:	5f 93       	push	r21
    3292:	6f 93       	push	r22
    3294:	7f 93       	push	r23
    3296:	8f 93       	push	r24
    3298:	9f 93       	push	r25
    329a:	af 93       	push	r26
    329c:	bf 93       	push	r27
    329e:	cf 93       	push	r28
    32a0:	df 93       	push	r29
    32a2:	ef 93       	push	r30
    32a4:	ff 93       	push	r31
    32a6:	a0 91 03 12 	lds	r26, 0x1203	; 0x801203 <_ser_handle+0x6>
    32aa:	b0 91 04 12 	lds	r27, 0x1204	; 0x801204 <_ser_handle+0x7>
    32ae:	10 97       	sbiw	r26, 0x00	; 0
    32b0:	11 f1       	breq	.+68     	; 0x32f6 <__vector_54+0x7a>
    32b2:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    32b6:	14 96       	adiw	r26, 0x04	; 4
    32b8:	ed 91       	ld	r30, X+
    32ba:	fc 91       	ld	r31, X
    32bc:	15 97       	sbiw	r26, 0x05	; 5
    32be:	93 81       	ldd	r25, Z+3	; 0x03
    32c0:	82 81       	ldd	r24, Z+2	; 0x02
    32c2:	25 81       	ldd	r18, Z+5	; 0x05
    32c4:	98 1b       	sub	r25, r24
    32c6:	92 23       	and	r25, r18
    32c8:	84 81       	ldd	r24, Z+4	; 0x04
    32ca:	98 17       	cp	r25, r24
    32cc:	61 f0       	breq	.+24     	; 0x32e6 <__vector_54+0x6a>
    32ce:	83 81       	ldd	r24, Z+3	; 0x03
    32d0:	26 95       	lsr	r18
    32d2:	28 23       	and	r18, r24
    32d4:	c0 81       	ld	r28, Z
    32d6:	d1 81       	ldd	r29, Z+1	; 0x01
    32d8:	c2 0f       	add	r28, r18
    32da:	d1 1d       	adc	r29, r1
    32dc:	68 83       	st	Y, r22
    32de:	8f 5f       	subi	r24, 0xFF	; 255
    32e0:	95 81       	ldd	r25, Z+5	; 0x05
    32e2:	89 23       	and	r24, r25
    32e4:	83 83       	std	Z+3, r24	; 0x03
    32e6:	16 96       	adiw	r26, 0x06	; 6
    32e8:	ed 91       	ld	r30, X+
    32ea:	fc 91       	ld	r31, X
    32ec:	17 97       	sbiw	r26, 0x07	; 7
    32ee:	30 97       	sbiw	r30, 0x00	; 0
    32f0:	11 f0       	breq	.+4      	; 0x32f6 <__vector_54+0x7a>
    32f2:	cd 01       	movw	r24, r26
    32f4:	19 95       	eicall
    32f6:	ff 91       	pop	r31
    32f8:	ef 91       	pop	r30
    32fa:	df 91       	pop	r29
    32fc:	cf 91       	pop	r28
    32fe:	bf 91       	pop	r27
    3300:	af 91       	pop	r26
    3302:	9f 91       	pop	r25
    3304:	8f 91       	pop	r24
    3306:	7f 91       	pop	r23
    3308:	6f 91       	pop	r22
    330a:	5f 91       	pop	r21
    330c:	4f 91       	pop	r20
    330e:	3f 91       	pop	r19
    3310:	2f 91       	pop	r18
    3312:	0f 90       	pop	r0
    3314:	0b be       	out	0x3b, r0	; 59
    3316:	0f 90       	pop	r0
    3318:	0f be       	out	0x3f, r0	; 63
    331a:	0f 90       	pop	r0
    331c:	1f 90       	pop	r1
    331e:	18 95       	reti

00003320 <__vector_55>:
    3320:	1f 92       	push	r1
    3322:	0f 92       	push	r0
    3324:	0f b6       	in	r0, 0x3f	; 63
    3326:	0f 92       	push	r0
    3328:	11 24       	eor	r1, r1
    332a:	0b b6       	in	r0, 0x3b	; 59
    332c:	0f 92       	push	r0
    332e:	2f 93       	push	r18
    3330:	8f 93       	push	r24
    3332:	9f 93       	push	r25
    3334:	af 93       	push	r26
    3336:	bf 93       	push	r27
    3338:	ef 93       	push	r30
    333a:	ff 93       	push	r31
    333c:	e0 91 03 12 	lds	r30, 0x1203	; 0x801203 <_ser_handle+0x6>
    3340:	f0 91 04 12 	lds	r31, 0x1204	; 0x801204 <_ser_handle+0x7>
    3344:	30 97       	sbiw	r30, 0x00	; 0
    3346:	b9 f0       	breq	.+46     	; 0x3376 <__vector_55+0x56>
    3348:	02 80       	ldd	r0, Z+2	; 0x02
    334a:	f3 81       	ldd	r31, Z+3	; 0x03
    334c:	e0 2d       	mov	r30, r0
    334e:	93 81       	ldd	r25, Z+3	; 0x03
    3350:	82 81       	ldd	r24, Z+2	; 0x02
    3352:	98 17       	cp	r25, r24
    3354:	b1 f0       	breq	.+44     	; 0x3382 <__vector_55+0x62>
    3356:	92 81       	ldd	r25, Z+2	; 0x02
    3358:	85 81       	ldd	r24, Z+5	; 0x05
    335a:	28 2f       	mov	r18, r24
    335c:	26 95       	lsr	r18
    335e:	29 23       	and	r18, r25
    3360:	a0 81       	ld	r26, Z
    3362:	b1 81       	ldd	r27, Z+1	; 0x01
    3364:	a2 0f       	add	r26, r18
    3366:	b1 1d       	adc	r27, r1
    3368:	2c 91       	ld	r18, X
    336a:	9f 5f       	subi	r25, 0xFF	; 255
    336c:	89 23       	and	r24, r25
    336e:	82 83       	std	Z+2, r24	; 0x02
    3370:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    3374:	0b c0       	rjmp	.+22     	; 0x338c <__vector_55+0x6c>
    3376:	e1 e3       	ldi	r30, 0x31	; 49
    3378:	f1 e0       	ldi	r31, 0x01	; 1
    337a:	80 81       	ld	r24, Z
    337c:	8f 7d       	andi	r24, 0xDF	; 223
    337e:	80 83       	st	Z, r24
    3380:	05 c0       	rjmp	.+10     	; 0x338c <__vector_55+0x6c>
    3382:	e1 e3       	ldi	r30, 0x31	; 49
    3384:	f1 e0       	ldi	r31, 0x01	; 1
    3386:	80 81       	ld	r24, Z
    3388:	8f 7d       	andi	r24, 0xDF	; 223
    338a:	80 83       	st	Z, r24
    338c:	ff 91       	pop	r31
    338e:	ef 91       	pop	r30
    3390:	bf 91       	pop	r27
    3392:	af 91       	pop	r26
    3394:	9f 91       	pop	r25
    3396:	8f 91       	pop	r24
    3398:	2f 91       	pop	r18
    339a:	0f 90       	pop	r0
    339c:	0b be       	out	0x3b, r0	; 59
    339e:	0f 90       	pop	r0
    33a0:	0f be       	out	0x3f, r0	; 63
    33a2:	0f 90       	pop	r0
    33a4:	1f 90       	pop	r1
    33a6:	18 95       	reti

000033a8 <fifo_init>:
    33a8:	fc 01       	movw	r30, r24
    33aa:	41 11       	cpse	r20, r1
    33ac:	01 c0       	rjmp	.+2      	; 0x33b0 <fifo_init+0x8>
    33ae:	1f d3       	rcall	.+1598   	; 0x39ee <abort>
    33b0:	84 2f       	mov	r24, r20
    33b2:	90 e0       	ldi	r25, 0x00	; 0
    33b4:	9c 01       	movw	r18, r24
    33b6:	21 50       	subi	r18, 0x01	; 1
    33b8:	31 09       	sbc	r19, r1
    33ba:	82 23       	and	r24, r18
    33bc:	93 23       	and	r25, r19
    33be:	89 2b       	or	r24, r25
    33c0:	09 f0       	breq	.+2      	; 0x33c4 <fifo_init+0x1c>
    33c2:	15 d3       	rcall	.+1578   	; 0x39ee <abort>
    33c4:	41 38       	cpi	r20, 0x81	; 129
    33c6:	08 f0       	brcs	.+2      	; 0x33ca <fifo_init+0x22>
    33c8:	12 d3       	rcall	.+1572   	; 0x39ee <abort>
    33ca:	12 82       	std	Z+2, r1	; 0x02
    33cc:	13 82       	std	Z+3, r1	; 0x03
    33ce:	44 83       	std	Z+4, r20	; 0x04
    33d0:	44 0f       	add	r20, r20
    33d2:	41 50       	subi	r20, 0x01	; 1
    33d4:	45 83       	std	Z+5, r20	; 0x05
    33d6:	71 83       	std	Z+1, r23	; 0x01
    33d8:	60 83       	st	Z, r22
    33da:	80 e0       	ldi	r24, 0x00	; 0
    33dc:	90 e0       	ldi	r25, 0x00	; 0
    33de:	08 95       	ret

000033e0 <__subsf3>:
    33e0:	50 58       	subi	r21, 0x80	; 128

000033e2 <__addsf3>:
    33e2:	bb 27       	eor	r27, r27
    33e4:	aa 27       	eor	r26, r26
    33e6:	0e d0       	rcall	.+28     	; 0x3404 <__addsf3x>
    33e8:	0b c1       	rjmp	.+534    	; 0x3600 <__fp_round>
    33ea:	fc d0       	rcall	.+504    	; 0x35e4 <__fp_pscA>
    33ec:	30 f0       	brcs	.+12     	; 0x33fa <__addsf3+0x18>
    33ee:	01 d1       	rcall	.+514    	; 0x35f2 <__fp_pscB>
    33f0:	20 f0       	brcs	.+8      	; 0x33fa <__addsf3+0x18>
    33f2:	31 f4       	brne	.+12     	; 0x3400 <__addsf3+0x1e>
    33f4:	9f 3f       	cpi	r25, 0xFF	; 255
    33f6:	11 f4       	brne	.+4      	; 0x33fc <__addsf3+0x1a>
    33f8:	1e f4       	brtc	.+6      	; 0x3400 <__addsf3+0x1e>
    33fa:	f1 c0       	rjmp	.+482    	; 0x35de <__fp_nan>
    33fc:	0e f4       	brtc	.+2      	; 0x3400 <__addsf3+0x1e>
    33fe:	e0 95       	com	r30
    3400:	e7 fb       	bst	r30, 7
    3402:	e7 c0       	rjmp	.+462    	; 0x35d2 <__fp_inf>

00003404 <__addsf3x>:
    3404:	e9 2f       	mov	r30, r25
    3406:	0d d1       	rcall	.+538    	; 0x3622 <__fp_split3>
    3408:	80 f3       	brcs	.-32     	; 0x33ea <__addsf3+0x8>
    340a:	ba 17       	cp	r27, r26
    340c:	62 07       	cpc	r22, r18
    340e:	73 07       	cpc	r23, r19
    3410:	84 07       	cpc	r24, r20
    3412:	95 07       	cpc	r25, r21
    3414:	18 f0       	brcs	.+6      	; 0x341c <__addsf3x+0x18>
    3416:	71 f4       	brne	.+28     	; 0x3434 <__addsf3x+0x30>
    3418:	9e f5       	brtc	.+102    	; 0x3480 <__addsf3x+0x7c>
    341a:	25 c1       	rjmp	.+586    	; 0x3666 <__fp_zero>
    341c:	0e f4       	brtc	.+2      	; 0x3420 <__addsf3x+0x1c>
    341e:	e0 95       	com	r30
    3420:	0b 2e       	mov	r0, r27
    3422:	ba 2f       	mov	r27, r26
    3424:	a0 2d       	mov	r26, r0
    3426:	0b 01       	movw	r0, r22
    3428:	b9 01       	movw	r22, r18
    342a:	90 01       	movw	r18, r0
    342c:	0c 01       	movw	r0, r24
    342e:	ca 01       	movw	r24, r20
    3430:	a0 01       	movw	r20, r0
    3432:	11 24       	eor	r1, r1
    3434:	ff 27       	eor	r31, r31
    3436:	59 1b       	sub	r21, r25
    3438:	99 f0       	breq	.+38     	; 0x3460 <__addsf3x+0x5c>
    343a:	59 3f       	cpi	r21, 0xF9	; 249
    343c:	50 f4       	brcc	.+20     	; 0x3452 <__addsf3x+0x4e>
    343e:	50 3e       	cpi	r21, 0xE0	; 224
    3440:	68 f1       	brcs	.+90     	; 0x349c <__addsf3x+0x98>
    3442:	1a 16       	cp	r1, r26
    3444:	f0 40       	sbci	r31, 0x00	; 0
    3446:	a2 2f       	mov	r26, r18
    3448:	23 2f       	mov	r18, r19
    344a:	34 2f       	mov	r19, r20
    344c:	44 27       	eor	r20, r20
    344e:	58 5f       	subi	r21, 0xF8	; 248
    3450:	f3 cf       	rjmp	.-26     	; 0x3438 <__addsf3x+0x34>
    3452:	46 95       	lsr	r20
    3454:	37 95       	ror	r19
    3456:	27 95       	ror	r18
    3458:	a7 95       	ror	r26
    345a:	f0 40       	sbci	r31, 0x00	; 0
    345c:	53 95       	inc	r21
    345e:	c9 f7       	brne	.-14     	; 0x3452 <__addsf3x+0x4e>
    3460:	7e f4       	brtc	.+30     	; 0x3480 <__addsf3x+0x7c>
    3462:	1f 16       	cp	r1, r31
    3464:	ba 0b       	sbc	r27, r26
    3466:	62 0b       	sbc	r22, r18
    3468:	73 0b       	sbc	r23, r19
    346a:	84 0b       	sbc	r24, r20
    346c:	ba f0       	brmi	.+46     	; 0x349c <__addsf3x+0x98>
    346e:	91 50       	subi	r25, 0x01	; 1
    3470:	a1 f0       	breq	.+40     	; 0x349a <__addsf3x+0x96>
    3472:	ff 0f       	add	r31, r31
    3474:	bb 1f       	adc	r27, r27
    3476:	66 1f       	adc	r22, r22
    3478:	77 1f       	adc	r23, r23
    347a:	88 1f       	adc	r24, r24
    347c:	c2 f7       	brpl	.-16     	; 0x346e <__addsf3x+0x6a>
    347e:	0e c0       	rjmp	.+28     	; 0x349c <__addsf3x+0x98>
    3480:	ba 0f       	add	r27, r26
    3482:	62 1f       	adc	r22, r18
    3484:	73 1f       	adc	r23, r19
    3486:	84 1f       	adc	r24, r20
    3488:	48 f4       	brcc	.+18     	; 0x349c <__addsf3x+0x98>
    348a:	87 95       	ror	r24
    348c:	77 95       	ror	r23
    348e:	67 95       	ror	r22
    3490:	b7 95       	ror	r27
    3492:	f7 95       	ror	r31
    3494:	9e 3f       	cpi	r25, 0xFE	; 254
    3496:	08 f0       	brcs	.+2      	; 0x349a <__addsf3x+0x96>
    3498:	b3 cf       	rjmp	.-154    	; 0x3400 <__addsf3+0x1e>
    349a:	93 95       	inc	r25
    349c:	88 0f       	add	r24, r24
    349e:	08 f0       	brcs	.+2      	; 0x34a2 <__addsf3x+0x9e>
    34a0:	99 27       	eor	r25, r25
    34a2:	ee 0f       	add	r30, r30
    34a4:	97 95       	ror	r25
    34a6:	87 95       	ror	r24
    34a8:	08 95       	ret

000034aa <__divsf3>:
    34aa:	0c d0       	rcall	.+24     	; 0x34c4 <__divsf3x>
    34ac:	a9 c0       	rjmp	.+338    	; 0x3600 <__fp_round>
    34ae:	a1 d0       	rcall	.+322    	; 0x35f2 <__fp_pscB>
    34b0:	40 f0       	brcs	.+16     	; 0x34c2 <__divsf3+0x18>
    34b2:	98 d0       	rcall	.+304    	; 0x35e4 <__fp_pscA>
    34b4:	30 f0       	brcs	.+12     	; 0x34c2 <__divsf3+0x18>
    34b6:	21 f4       	brne	.+8      	; 0x34c0 <__divsf3+0x16>
    34b8:	5f 3f       	cpi	r21, 0xFF	; 255
    34ba:	19 f0       	breq	.+6      	; 0x34c2 <__divsf3+0x18>
    34bc:	8a c0       	rjmp	.+276    	; 0x35d2 <__fp_inf>
    34be:	51 11       	cpse	r21, r1
    34c0:	d3 c0       	rjmp	.+422    	; 0x3668 <__fp_szero>
    34c2:	8d c0       	rjmp	.+282    	; 0x35de <__fp_nan>

000034c4 <__divsf3x>:
    34c4:	ae d0       	rcall	.+348    	; 0x3622 <__fp_split3>
    34c6:	98 f3       	brcs	.-26     	; 0x34ae <__divsf3+0x4>

000034c8 <__divsf3_pse>:
    34c8:	99 23       	and	r25, r25
    34ca:	c9 f3       	breq	.-14     	; 0x34be <__divsf3+0x14>
    34cc:	55 23       	and	r21, r21
    34ce:	b1 f3       	breq	.-20     	; 0x34bc <__divsf3+0x12>
    34d0:	95 1b       	sub	r25, r21
    34d2:	55 0b       	sbc	r21, r21
    34d4:	bb 27       	eor	r27, r27
    34d6:	aa 27       	eor	r26, r26
    34d8:	62 17       	cp	r22, r18
    34da:	73 07       	cpc	r23, r19
    34dc:	84 07       	cpc	r24, r20
    34de:	38 f0       	brcs	.+14     	; 0x34ee <__divsf3_pse+0x26>
    34e0:	9f 5f       	subi	r25, 0xFF	; 255
    34e2:	5f 4f       	sbci	r21, 0xFF	; 255
    34e4:	22 0f       	add	r18, r18
    34e6:	33 1f       	adc	r19, r19
    34e8:	44 1f       	adc	r20, r20
    34ea:	aa 1f       	adc	r26, r26
    34ec:	a9 f3       	breq	.-22     	; 0x34d8 <__divsf3_pse+0x10>
    34ee:	33 d0       	rcall	.+102    	; 0x3556 <__divsf3_pse+0x8e>
    34f0:	0e 2e       	mov	r0, r30
    34f2:	3a f0       	brmi	.+14     	; 0x3502 <__divsf3_pse+0x3a>
    34f4:	e0 e8       	ldi	r30, 0x80	; 128
    34f6:	30 d0       	rcall	.+96     	; 0x3558 <__divsf3_pse+0x90>
    34f8:	91 50       	subi	r25, 0x01	; 1
    34fa:	50 40       	sbci	r21, 0x00	; 0
    34fc:	e6 95       	lsr	r30
    34fe:	00 1c       	adc	r0, r0
    3500:	ca f7       	brpl	.-14     	; 0x34f4 <__divsf3_pse+0x2c>
    3502:	29 d0       	rcall	.+82     	; 0x3556 <__divsf3_pse+0x8e>
    3504:	fe 2f       	mov	r31, r30
    3506:	27 d0       	rcall	.+78     	; 0x3556 <__divsf3_pse+0x8e>
    3508:	66 0f       	add	r22, r22
    350a:	77 1f       	adc	r23, r23
    350c:	88 1f       	adc	r24, r24
    350e:	bb 1f       	adc	r27, r27
    3510:	26 17       	cp	r18, r22
    3512:	37 07       	cpc	r19, r23
    3514:	48 07       	cpc	r20, r24
    3516:	ab 07       	cpc	r26, r27
    3518:	b0 e8       	ldi	r27, 0x80	; 128
    351a:	09 f0       	breq	.+2      	; 0x351e <__divsf3_pse+0x56>
    351c:	bb 0b       	sbc	r27, r27
    351e:	80 2d       	mov	r24, r0
    3520:	bf 01       	movw	r22, r30
    3522:	ff 27       	eor	r31, r31
    3524:	93 58       	subi	r25, 0x83	; 131
    3526:	5f 4f       	sbci	r21, 0xFF	; 255
    3528:	2a f0       	brmi	.+10     	; 0x3534 <__divsf3_pse+0x6c>
    352a:	9e 3f       	cpi	r25, 0xFE	; 254
    352c:	51 05       	cpc	r21, r1
    352e:	68 f0       	brcs	.+26     	; 0x354a <__divsf3_pse+0x82>
    3530:	50 c0       	rjmp	.+160    	; 0x35d2 <__fp_inf>
    3532:	9a c0       	rjmp	.+308    	; 0x3668 <__fp_szero>
    3534:	5f 3f       	cpi	r21, 0xFF	; 255
    3536:	ec f3       	brlt	.-6      	; 0x3532 <__divsf3_pse+0x6a>
    3538:	98 3e       	cpi	r25, 0xE8	; 232
    353a:	dc f3       	brlt	.-10     	; 0x3532 <__divsf3_pse+0x6a>
    353c:	86 95       	lsr	r24
    353e:	77 95       	ror	r23
    3540:	67 95       	ror	r22
    3542:	b7 95       	ror	r27
    3544:	f7 95       	ror	r31
    3546:	9f 5f       	subi	r25, 0xFF	; 255
    3548:	c9 f7       	brne	.-14     	; 0x353c <__divsf3_pse+0x74>
    354a:	88 0f       	add	r24, r24
    354c:	91 1d       	adc	r25, r1
    354e:	96 95       	lsr	r25
    3550:	87 95       	ror	r24
    3552:	97 f9       	bld	r25, 7
    3554:	08 95       	ret
    3556:	e1 e0       	ldi	r30, 0x01	; 1
    3558:	66 0f       	add	r22, r22
    355a:	77 1f       	adc	r23, r23
    355c:	88 1f       	adc	r24, r24
    355e:	bb 1f       	adc	r27, r27
    3560:	62 17       	cp	r22, r18
    3562:	73 07       	cpc	r23, r19
    3564:	84 07       	cpc	r24, r20
    3566:	ba 07       	cpc	r27, r26
    3568:	20 f0       	brcs	.+8      	; 0x3572 <__divsf3_pse+0xaa>
    356a:	62 1b       	sub	r22, r18
    356c:	73 0b       	sbc	r23, r19
    356e:	84 0b       	sbc	r24, r20
    3570:	ba 0b       	sbc	r27, r26
    3572:	ee 1f       	adc	r30, r30
    3574:	88 f7       	brcc	.-30     	; 0x3558 <__divsf3_pse+0x90>
    3576:	e0 95       	com	r30
    3578:	08 95       	ret

0000357a <__fixunssfsi>:
    357a:	5b d0       	rcall	.+182    	; 0x3632 <__fp_splitA>
    357c:	88 f0       	brcs	.+34     	; 0x35a0 <__fixunssfsi+0x26>
    357e:	9f 57       	subi	r25, 0x7F	; 127
    3580:	90 f0       	brcs	.+36     	; 0x35a6 <__fixunssfsi+0x2c>
    3582:	b9 2f       	mov	r27, r25
    3584:	99 27       	eor	r25, r25
    3586:	b7 51       	subi	r27, 0x17	; 23
    3588:	a0 f0       	brcs	.+40     	; 0x35b2 <__fixunssfsi+0x38>
    358a:	d1 f0       	breq	.+52     	; 0x35c0 <__fixunssfsi+0x46>
    358c:	66 0f       	add	r22, r22
    358e:	77 1f       	adc	r23, r23
    3590:	88 1f       	adc	r24, r24
    3592:	99 1f       	adc	r25, r25
    3594:	1a f0       	brmi	.+6      	; 0x359c <__fixunssfsi+0x22>
    3596:	ba 95       	dec	r27
    3598:	c9 f7       	brne	.-14     	; 0x358c <__fixunssfsi+0x12>
    359a:	12 c0       	rjmp	.+36     	; 0x35c0 <__fixunssfsi+0x46>
    359c:	b1 30       	cpi	r27, 0x01	; 1
    359e:	81 f0       	breq	.+32     	; 0x35c0 <__fixunssfsi+0x46>
    35a0:	62 d0       	rcall	.+196    	; 0x3666 <__fp_zero>
    35a2:	b1 e0       	ldi	r27, 0x01	; 1
    35a4:	08 95       	ret
    35a6:	5f c0       	rjmp	.+190    	; 0x3666 <__fp_zero>
    35a8:	67 2f       	mov	r22, r23
    35aa:	78 2f       	mov	r23, r24
    35ac:	88 27       	eor	r24, r24
    35ae:	b8 5f       	subi	r27, 0xF8	; 248
    35b0:	39 f0       	breq	.+14     	; 0x35c0 <__fixunssfsi+0x46>
    35b2:	b9 3f       	cpi	r27, 0xF9	; 249
    35b4:	cc f3       	brlt	.-14     	; 0x35a8 <__fixunssfsi+0x2e>
    35b6:	86 95       	lsr	r24
    35b8:	77 95       	ror	r23
    35ba:	67 95       	ror	r22
    35bc:	b3 95       	inc	r27
    35be:	d9 f7       	brne	.-10     	; 0x35b6 <__fixunssfsi+0x3c>
    35c0:	3e f4       	brtc	.+14     	; 0x35d0 <__fixunssfsi+0x56>
    35c2:	90 95       	com	r25
    35c4:	80 95       	com	r24
    35c6:	70 95       	com	r23
    35c8:	61 95       	neg	r22
    35ca:	7f 4f       	sbci	r23, 0xFF	; 255
    35cc:	8f 4f       	sbci	r24, 0xFF	; 255
    35ce:	9f 4f       	sbci	r25, 0xFF	; 255
    35d0:	08 95       	ret

000035d2 <__fp_inf>:
    35d2:	97 f9       	bld	r25, 7
    35d4:	9f 67       	ori	r25, 0x7F	; 127
    35d6:	80 e8       	ldi	r24, 0x80	; 128
    35d8:	70 e0       	ldi	r23, 0x00	; 0
    35da:	60 e0       	ldi	r22, 0x00	; 0
    35dc:	08 95       	ret

000035de <__fp_nan>:
    35de:	9f ef       	ldi	r25, 0xFF	; 255
    35e0:	80 ec       	ldi	r24, 0xC0	; 192
    35e2:	08 95       	ret

000035e4 <__fp_pscA>:
    35e4:	00 24       	eor	r0, r0
    35e6:	0a 94       	dec	r0
    35e8:	16 16       	cp	r1, r22
    35ea:	17 06       	cpc	r1, r23
    35ec:	18 06       	cpc	r1, r24
    35ee:	09 06       	cpc	r0, r25
    35f0:	08 95       	ret

000035f2 <__fp_pscB>:
    35f2:	00 24       	eor	r0, r0
    35f4:	0a 94       	dec	r0
    35f6:	12 16       	cp	r1, r18
    35f8:	13 06       	cpc	r1, r19
    35fa:	14 06       	cpc	r1, r20
    35fc:	05 06       	cpc	r0, r21
    35fe:	08 95       	ret

00003600 <__fp_round>:
    3600:	09 2e       	mov	r0, r25
    3602:	03 94       	inc	r0
    3604:	00 0c       	add	r0, r0
    3606:	11 f4       	brne	.+4      	; 0x360c <__fp_round+0xc>
    3608:	88 23       	and	r24, r24
    360a:	52 f0       	brmi	.+20     	; 0x3620 <__fp_round+0x20>
    360c:	bb 0f       	add	r27, r27
    360e:	40 f4       	brcc	.+16     	; 0x3620 <__fp_round+0x20>
    3610:	bf 2b       	or	r27, r31
    3612:	11 f4       	brne	.+4      	; 0x3618 <__fp_round+0x18>
    3614:	60 ff       	sbrs	r22, 0
    3616:	04 c0       	rjmp	.+8      	; 0x3620 <__fp_round+0x20>
    3618:	6f 5f       	subi	r22, 0xFF	; 255
    361a:	7f 4f       	sbci	r23, 0xFF	; 255
    361c:	8f 4f       	sbci	r24, 0xFF	; 255
    361e:	9f 4f       	sbci	r25, 0xFF	; 255
    3620:	08 95       	ret

00003622 <__fp_split3>:
    3622:	57 fd       	sbrc	r21, 7
    3624:	90 58       	subi	r25, 0x80	; 128
    3626:	44 0f       	add	r20, r20
    3628:	55 1f       	adc	r21, r21
    362a:	59 f0       	breq	.+22     	; 0x3642 <__fp_splitA+0x10>
    362c:	5f 3f       	cpi	r21, 0xFF	; 255
    362e:	71 f0       	breq	.+28     	; 0x364c <__fp_splitA+0x1a>
    3630:	47 95       	ror	r20

00003632 <__fp_splitA>:
    3632:	88 0f       	add	r24, r24
    3634:	97 fb       	bst	r25, 7
    3636:	99 1f       	adc	r25, r25
    3638:	61 f0       	breq	.+24     	; 0x3652 <__fp_splitA+0x20>
    363a:	9f 3f       	cpi	r25, 0xFF	; 255
    363c:	79 f0       	breq	.+30     	; 0x365c <__fp_splitA+0x2a>
    363e:	87 95       	ror	r24
    3640:	08 95       	ret
    3642:	12 16       	cp	r1, r18
    3644:	13 06       	cpc	r1, r19
    3646:	14 06       	cpc	r1, r20
    3648:	55 1f       	adc	r21, r21
    364a:	f2 cf       	rjmp	.-28     	; 0x3630 <__fp_split3+0xe>
    364c:	46 95       	lsr	r20
    364e:	f1 df       	rcall	.-30     	; 0x3632 <__fp_splitA>
    3650:	08 c0       	rjmp	.+16     	; 0x3662 <__fp_splitA+0x30>
    3652:	16 16       	cp	r1, r22
    3654:	17 06       	cpc	r1, r23
    3656:	18 06       	cpc	r1, r24
    3658:	99 1f       	adc	r25, r25
    365a:	f1 cf       	rjmp	.-30     	; 0x363e <__fp_splitA+0xc>
    365c:	86 95       	lsr	r24
    365e:	71 05       	cpc	r23, r1
    3660:	61 05       	cpc	r22, r1
    3662:	08 94       	sec
    3664:	08 95       	ret

00003666 <__fp_zero>:
    3666:	e8 94       	clt

00003668 <__fp_szero>:
    3668:	bb 27       	eor	r27, r27
    366a:	66 27       	eor	r22, r22
    366c:	77 27       	eor	r23, r23
    366e:	cb 01       	movw	r24, r22
    3670:	97 f9       	bld	r25, 7
    3672:	08 95       	ret

00003674 <__mulsf3>:
    3674:	0b d0       	rcall	.+22     	; 0x368c <__mulsf3x>
    3676:	c4 cf       	rjmp	.-120    	; 0x3600 <__fp_round>
    3678:	b5 df       	rcall	.-150    	; 0x35e4 <__fp_pscA>
    367a:	28 f0       	brcs	.+10     	; 0x3686 <__mulsf3+0x12>
    367c:	ba df       	rcall	.-140    	; 0x35f2 <__fp_pscB>
    367e:	18 f0       	brcs	.+6      	; 0x3686 <__mulsf3+0x12>
    3680:	95 23       	and	r25, r21
    3682:	09 f0       	breq	.+2      	; 0x3686 <__mulsf3+0x12>
    3684:	a6 cf       	rjmp	.-180    	; 0x35d2 <__fp_inf>
    3686:	ab cf       	rjmp	.-170    	; 0x35de <__fp_nan>
    3688:	11 24       	eor	r1, r1
    368a:	ee cf       	rjmp	.-36     	; 0x3668 <__fp_szero>

0000368c <__mulsf3x>:
    368c:	ca df       	rcall	.-108    	; 0x3622 <__fp_split3>
    368e:	a0 f3       	brcs	.-24     	; 0x3678 <__mulsf3+0x4>

00003690 <__mulsf3_pse>:
    3690:	95 9f       	mul	r25, r21
    3692:	d1 f3       	breq	.-12     	; 0x3688 <__mulsf3+0x14>
    3694:	95 0f       	add	r25, r21
    3696:	50 e0       	ldi	r21, 0x00	; 0
    3698:	55 1f       	adc	r21, r21
    369a:	62 9f       	mul	r22, r18
    369c:	f0 01       	movw	r30, r0
    369e:	72 9f       	mul	r23, r18
    36a0:	bb 27       	eor	r27, r27
    36a2:	f0 0d       	add	r31, r0
    36a4:	b1 1d       	adc	r27, r1
    36a6:	63 9f       	mul	r22, r19
    36a8:	aa 27       	eor	r26, r26
    36aa:	f0 0d       	add	r31, r0
    36ac:	b1 1d       	adc	r27, r1
    36ae:	aa 1f       	adc	r26, r26
    36b0:	64 9f       	mul	r22, r20
    36b2:	66 27       	eor	r22, r22
    36b4:	b0 0d       	add	r27, r0
    36b6:	a1 1d       	adc	r26, r1
    36b8:	66 1f       	adc	r22, r22
    36ba:	82 9f       	mul	r24, r18
    36bc:	22 27       	eor	r18, r18
    36be:	b0 0d       	add	r27, r0
    36c0:	a1 1d       	adc	r26, r1
    36c2:	62 1f       	adc	r22, r18
    36c4:	73 9f       	mul	r23, r19
    36c6:	b0 0d       	add	r27, r0
    36c8:	a1 1d       	adc	r26, r1
    36ca:	62 1f       	adc	r22, r18
    36cc:	83 9f       	mul	r24, r19
    36ce:	a0 0d       	add	r26, r0
    36d0:	61 1d       	adc	r22, r1
    36d2:	22 1f       	adc	r18, r18
    36d4:	74 9f       	mul	r23, r20
    36d6:	33 27       	eor	r19, r19
    36d8:	a0 0d       	add	r26, r0
    36da:	61 1d       	adc	r22, r1
    36dc:	23 1f       	adc	r18, r19
    36de:	84 9f       	mul	r24, r20
    36e0:	60 0d       	add	r22, r0
    36e2:	21 1d       	adc	r18, r1
    36e4:	82 2f       	mov	r24, r18
    36e6:	76 2f       	mov	r23, r22
    36e8:	6a 2f       	mov	r22, r26
    36ea:	11 24       	eor	r1, r1
    36ec:	9f 57       	subi	r25, 0x7F	; 127
    36ee:	50 40       	sbci	r21, 0x00	; 0
    36f0:	8a f0       	brmi	.+34     	; 0x3714 <__mulsf3_pse+0x84>
    36f2:	e1 f0       	breq	.+56     	; 0x372c <__mulsf3_pse+0x9c>
    36f4:	88 23       	and	r24, r24
    36f6:	4a f0       	brmi	.+18     	; 0x370a <__mulsf3_pse+0x7a>
    36f8:	ee 0f       	add	r30, r30
    36fa:	ff 1f       	adc	r31, r31
    36fc:	bb 1f       	adc	r27, r27
    36fe:	66 1f       	adc	r22, r22
    3700:	77 1f       	adc	r23, r23
    3702:	88 1f       	adc	r24, r24
    3704:	91 50       	subi	r25, 0x01	; 1
    3706:	50 40       	sbci	r21, 0x00	; 0
    3708:	a9 f7       	brne	.-22     	; 0x36f4 <__mulsf3_pse+0x64>
    370a:	9e 3f       	cpi	r25, 0xFE	; 254
    370c:	51 05       	cpc	r21, r1
    370e:	70 f0       	brcs	.+28     	; 0x372c <__mulsf3_pse+0x9c>
    3710:	60 cf       	rjmp	.-320    	; 0x35d2 <__fp_inf>
    3712:	aa cf       	rjmp	.-172    	; 0x3668 <__fp_szero>
    3714:	5f 3f       	cpi	r21, 0xFF	; 255
    3716:	ec f3       	brlt	.-6      	; 0x3712 <__mulsf3_pse+0x82>
    3718:	98 3e       	cpi	r25, 0xE8	; 232
    371a:	dc f3       	brlt	.-10     	; 0x3712 <__mulsf3_pse+0x82>
    371c:	86 95       	lsr	r24
    371e:	77 95       	ror	r23
    3720:	67 95       	ror	r22
    3722:	b7 95       	ror	r27
    3724:	f7 95       	ror	r31
    3726:	e7 95       	ror	r30
    3728:	9f 5f       	subi	r25, 0xFF	; 255
    372a:	c1 f7       	brne	.-16     	; 0x371c <__mulsf3_pse+0x8c>
    372c:	fe 2b       	or	r31, r30
    372e:	88 0f       	add	r24, r24
    3730:	91 1d       	adc	r25, r1
    3732:	96 95       	lsr	r25
    3734:	87 95       	ror	r24
    3736:	97 f9       	bld	r25, 7
    3738:	08 95       	ret

0000373a <__udivmodsi4>:
    373a:	a1 e2       	ldi	r26, 0x21	; 33
    373c:	1a 2e       	mov	r1, r26
    373e:	aa 1b       	sub	r26, r26
    3740:	bb 1b       	sub	r27, r27
    3742:	fd 01       	movw	r30, r26
    3744:	0d c0       	rjmp	.+26     	; 0x3760 <__udivmodsi4_ep>

00003746 <__udivmodsi4_loop>:
    3746:	aa 1f       	adc	r26, r26
    3748:	bb 1f       	adc	r27, r27
    374a:	ee 1f       	adc	r30, r30
    374c:	ff 1f       	adc	r31, r31
    374e:	a2 17       	cp	r26, r18
    3750:	b3 07       	cpc	r27, r19
    3752:	e4 07       	cpc	r30, r20
    3754:	f5 07       	cpc	r31, r21
    3756:	20 f0       	brcs	.+8      	; 0x3760 <__udivmodsi4_ep>
    3758:	a2 1b       	sub	r26, r18
    375a:	b3 0b       	sbc	r27, r19
    375c:	e4 0b       	sbc	r30, r20
    375e:	f5 0b       	sbc	r31, r21

00003760 <__udivmodsi4_ep>:
    3760:	66 1f       	adc	r22, r22
    3762:	77 1f       	adc	r23, r23
    3764:	88 1f       	adc	r24, r24
    3766:	99 1f       	adc	r25, r25
    3768:	1a 94       	dec	r1
    376a:	69 f7       	brne	.-38     	; 0x3746 <__udivmodsi4_loop>
    376c:	60 95       	com	r22
    376e:	70 95       	com	r23
    3770:	80 95       	com	r24
    3772:	90 95       	com	r25
    3774:	9b 01       	movw	r18, r22
    3776:	ac 01       	movw	r20, r24
    3778:	bd 01       	movw	r22, r26
    377a:	cf 01       	movw	r24, r30
    377c:	08 95       	ret

0000377e <__tablejump2__>:
    377e:	ee 0f       	add	r30, r30
    3780:	ff 1f       	adc	r31, r31
    3782:	88 1f       	adc	r24, r24
    3784:	8b bf       	out	0x3b, r24	; 59
    3786:	07 90       	elpm	r0, Z+
    3788:	f6 91       	elpm	r31, Z
    378a:	e0 2d       	mov	r30, r0
    378c:	19 94       	eijmp

0000378e <__umulhisi3>:
    378e:	a2 9f       	mul	r26, r18
    3790:	b0 01       	movw	r22, r0
    3792:	b3 9f       	mul	r27, r19
    3794:	c0 01       	movw	r24, r0
    3796:	a3 9f       	mul	r26, r19
    3798:	70 0d       	add	r23, r0
    379a:	81 1d       	adc	r24, r1
    379c:	11 24       	eor	r1, r1
    379e:	91 1d       	adc	r25, r1
    37a0:	b2 9f       	mul	r27, r18
    37a2:	70 0d       	add	r23, r0
    37a4:	81 1d       	adc	r24, r1
    37a6:	11 24       	eor	r1, r1
    37a8:	91 1d       	adc	r25, r1
    37aa:	08 95       	ret

000037ac <malloc>:
    37ac:	0f 93       	push	r16
    37ae:	1f 93       	push	r17
    37b0:	cf 93       	push	r28
    37b2:	df 93       	push	r29
    37b4:	82 30       	cpi	r24, 0x02	; 2
    37b6:	91 05       	cpc	r25, r1
    37b8:	10 f4       	brcc	.+4      	; 0x37be <malloc+0x12>
    37ba:	82 e0       	ldi	r24, 0x02	; 2
    37bc:	90 e0       	ldi	r25, 0x00	; 0
    37be:	e0 91 0b 12 	lds	r30, 0x120B	; 0x80120b <__flp>
    37c2:	f0 91 0c 12 	lds	r31, 0x120C	; 0x80120c <__flp+0x1>
    37c6:	20 e0       	ldi	r18, 0x00	; 0
    37c8:	30 e0       	ldi	r19, 0x00	; 0
    37ca:	a0 e0       	ldi	r26, 0x00	; 0
    37cc:	b0 e0       	ldi	r27, 0x00	; 0
    37ce:	30 97       	sbiw	r30, 0x00	; 0
    37d0:	19 f1       	breq	.+70     	; 0x3818 <malloc+0x6c>
    37d2:	40 81       	ld	r20, Z
    37d4:	51 81       	ldd	r21, Z+1	; 0x01
    37d6:	02 81       	ldd	r16, Z+2	; 0x02
    37d8:	13 81       	ldd	r17, Z+3	; 0x03
    37da:	48 17       	cp	r20, r24
    37dc:	59 07       	cpc	r21, r25
    37de:	c8 f0       	brcs	.+50     	; 0x3812 <malloc+0x66>
    37e0:	84 17       	cp	r24, r20
    37e2:	95 07       	cpc	r25, r21
    37e4:	69 f4       	brne	.+26     	; 0x3800 <malloc+0x54>
    37e6:	10 97       	sbiw	r26, 0x00	; 0
    37e8:	31 f0       	breq	.+12     	; 0x37f6 <malloc+0x4a>
    37ea:	12 96       	adiw	r26, 0x02	; 2
    37ec:	0c 93       	st	X, r16
    37ee:	12 97       	sbiw	r26, 0x02	; 2
    37f0:	13 96       	adiw	r26, 0x03	; 3
    37f2:	1c 93       	st	X, r17
    37f4:	27 c0       	rjmp	.+78     	; 0x3844 <malloc+0x98>
    37f6:	00 93 0b 12 	sts	0x120B, r16	; 0x80120b <__flp>
    37fa:	10 93 0c 12 	sts	0x120C, r17	; 0x80120c <__flp+0x1>
    37fe:	22 c0       	rjmp	.+68     	; 0x3844 <malloc+0x98>
    3800:	21 15       	cp	r18, r1
    3802:	31 05       	cpc	r19, r1
    3804:	19 f0       	breq	.+6      	; 0x380c <malloc+0x60>
    3806:	42 17       	cp	r20, r18
    3808:	53 07       	cpc	r21, r19
    380a:	18 f4       	brcc	.+6      	; 0x3812 <malloc+0x66>
    380c:	9a 01       	movw	r18, r20
    380e:	bd 01       	movw	r22, r26
    3810:	ef 01       	movw	r28, r30
    3812:	df 01       	movw	r26, r30
    3814:	f8 01       	movw	r30, r16
    3816:	db cf       	rjmp	.-74     	; 0x37ce <malloc+0x22>
    3818:	21 15       	cp	r18, r1
    381a:	31 05       	cpc	r19, r1
    381c:	f9 f0       	breq	.+62     	; 0x385c <malloc+0xb0>
    381e:	28 1b       	sub	r18, r24
    3820:	39 0b       	sbc	r19, r25
    3822:	24 30       	cpi	r18, 0x04	; 4
    3824:	31 05       	cpc	r19, r1
    3826:	80 f4       	brcc	.+32     	; 0x3848 <malloc+0x9c>
    3828:	8a 81       	ldd	r24, Y+2	; 0x02
    382a:	9b 81       	ldd	r25, Y+3	; 0x03
    382c:	61 15       	cp	r22, r1
    382e:	71 05       	cpc	r23, r1
    3830:	21 f0       	breq	.+8      	; 0x383a <malloc+0x8e>
    3832:	fb 01       	movw	r30, r22
    3834:	93 83       	std	Z+3, r25	; 0x03
    3836:	82 83       	std	Z+2, r24	; 0x02
    3838:	04 c0       	rjmp	.+8      	; 0x3842 <malloc+0x96>
    383a:	90 93 0c 12 	sts	0x120C, r25	; 0x80120c <__flp+0x1>
    383e:	80 93 0b 12 	sts	0x120B, r24	; 0x80120b <__flp>
    3842:	fe 01       	movw	r30, r28
    3844:	32 96       	adiw	r30, 0x02	; 2
    3846:	44 c0       	rjmp	.+136    	; 0x38d0 <malloc+0x124>
    3848:	fe 01       	movw	r30, r28
    384a:	e2 0f       	add	r30, r18
    384c:	f3 1f       	adc	r31, r19
    384e:	81 93       	st	Z+, r24
    3850:	91 93       	st	Z+, r25
    3852:	22 50       	subi	r18, 0x02	; 2
    3854:	31 09       	sbc	r19, r1
    3856:	39 83       	std	Y+1, r19	; 0x01
    3858:	28 83       	st	Y, r18
    385a:	3a c0       	rjmp	.+116    	; 0x38d0 <malloc+0x124>
    385c:	20 91 09 12 	lds	r18, 0x1209	; 0x801209 <__brkval>
    3860:	30 91 0a 12 	lds	r19, 0x120A	; 0x80120a <__brkval+0x1>
    3864:	23 2b       	or	r18, r19
    3866:	41 f4       	brne	.+16     	; 0x3878 <malloc+0xcc>
    3868:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    386c:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    3870:	30 93 0a 12 	sts	0x120A, r19	; 0x80120a <__brkval+0x1>
    3874:	20 93 09 12 	sts	0x1209, r18	; 0x801209 <__brkval>
    3878:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    387c:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    3880:	21 15       	cp	r18, r1
    3882:	31 05       	cpc	r19, r1
    3884:	41 f4       	brne	.+16     	; 0x3896 <malloc+0xea>
    3886:	2d b7       	in	r18, 0x3d	; 61
    3888:	3e b7       	in	r19, 0x3e	; 62
    388a:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    388e:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    3892:	24 1b       	sub	r18, r20
    3894:	35 0b       	sbc	r19, r21
    3896:	e0 91 09 12 	lds	r30, 0x1209	; 0x801209 <__brkval>
    389a:	f0 91 0a 12 	lds	r31, 0x120A	; 0x80120a <__brkval+0x1>
    389e:	e2 17       	cp	r30, r18
    38a0:	f3 07       	cpc	r31, r19
    38a2:	a0 f4       	brcc	.+40     	; 0x38cc <malloc+0x120>
    38a4:	2e 1b       	sub	r18, r30
    38a6:	3f 0b       	sbc	r19, r31
    38a8:	28 17       	cp	r18, r24
    38aa:	39 07       	cpc	r19, r25
    38ac:	78 f0       	brcs	.+30     	; 0x38cc <malloc+0x120>
    38ae:	ac 01       	movw	r20, r24
    38b0:	4e 5f       	subi	r20, 0xFE	; 254
    38b2:	5f 4f       	sbci	r21, 0xFF	; 255
    38b4:	24 17       	cp	r18, r20
    38b6:	35 07       	cpc	r19, r21
    38b8:	48 f0       	brcs	.+18     	; 0x38cc <malloc+0x120>
    38ba:	4e 0f       	add	r20, r30
    38bc:	5f 1f       	adc	r21, r31
    38be:	50 93 0a 12 	sts	0x120A, r21	; 0x80120a <__brkval+0x1>
    38c2:	40 93 09 12 	sts	0x1209, r20	; 0x801209 <__brkval>
    38c6:	81 93       	st	Z+, r24
    38c8:	91 93       	st	Z+, r25
    38ca:	02 c0       	rjmp	.+4      	; 0x38d0 <malloc+0x124>
    38cc:	e0 e0       	ldi	r30, 0x00	; 0
    38ce:	f0 e0       	ldi	r31, 0x00	; 0
    38d0:	cf 01       	movw	r24, r30
    38d2:	df 91       	pop	r29
    38d4:	cf 91       	pop	r28
    38d6:	1f 91       	pop	r17
    38d8:	0f 91       	pop	r16
    38da:	08 95       	ret

000038dc <free>:
    38dc:	cf 93       	push	r28
    38de:	df 93       	push	r29
    38e0:	00 97       	sbiw	r24, 0x00	; 0
    38e2:	09 f4       	brne	.+2      	; 0x38e6 <free+0xa>
    38e4:	81 c0       	rjmp	.+258    	; 0x39e8 <free+0x10c>
    38e6:	fc 01       	movw	r30, r24
    38e8:	32 97       	sbiw	r30, 0x02	; 2
    38ea:	13 82       	std	Z+3, r1	; 0x03
    38ec:	12 82       	std	Z+2, r1	; 0x02
    38ee:	a0 91 0b 12 	lds	r26, 0x120B	; 0x80120b <__flp>
    38f2:	b0 91 0c 12 	lds	r27, 0x120C	; 0x80120c <__flp+0x1>
    38f6:	10 97       	sbiw	r26, 0x00	; 0
    38f8:	81 f4       	brne	.+32     	; 0x391a <free+0x3e>
    38fa:	20 81       	ld	r18, Z
    38fc:	31 81       	ldd	r19, Z+1	; 0x01
    38fe:	82 0f       	add	r24, r18
    3900:	93 1f       	adc	r25, r19
    3902:	20 91 09 12 	lds	r18, 0x1209	; 0x801209 <__brkval>
    3906:	30 91 0a 12 	lds	r19, 0x120A	; 0x80120a <__brkval+0x1>
    390a:	28 17       	cp	r18, r24
    390c:	39 07       	cpc	r19, r25
    390e:	51 f5       	brne	.+84     	; 0x3964 <free+0x88>
    3910:	f0 93 0a 12 	sts	0x120A, r31	; 0x80120a <__brkval+0x1>
    3914:	e0 93 09 12 	sts	0x1209, r30	; 0x801209 <__brkval>
    3918:	67 c0       	rjmp	.+206    	; 0x39e8 <free+0x10c>
    391a:	ed 01       	movw	r28, r26
    391c:	20 e0       	ldi	r18, 0x00	; 0
    391e:	30 e0       	ldi	r19, 0x00	; 0
    3920:	ce 17       	cp	r28, r30
    3922:	df 07       	cpc	r29, r31
    3924:	40 f4       	brcc	.+16     	; 0x3936 <free+0x5a>
    3926:	4a 81       	ldd	r20, Y+2	; 0x02
    3928:	5b 81       	ldd	r21, Y+3	; 0x03
    392a:	9e 01       	movw	r18, r28
    392c:	41 15       	cp	r20, r1
    392e:	51 05       	cpc	r21, r1
    3930:	f1 f0       	breq	.+60     	; 0x396e <free+0x92>
    3932:	ea 01       	movw	r28, r20
    3934:	f5 cf       	rjmp	.-22     	; 0x3920 <free+0x44>
    3936:	d3 83       	std	Z+3, r29	; 0x03
    3938:	c2 83       	std	Z+2, r28	; 0x02
    393a:	40 81       	ld	r20, Z
    393c:	51 81       	ldd	r21, Z+1	; 0x01
    393e:	84 0f       	add	r24, r20
    3940:	95 1f       	adc	r25, r21
    3942:	c8 17       	cp	r28, r24
    3944:	d9 07       	cpc	r29, r25
    3946:	59 f4       	brne	.+22     	; 0x395e <free+0x82>
    3948:	88 81       	ld	r24, Y
    394a:	99 81       	ldd	r25, Y+1	; 0x01
    394c:	84 0f       	add	r24, r20
    394e:	95 1f       	adc	r25, r21
    3950:	02 96       	adiw	r24, 0x02	; 2
    3952:	91 83       	std	Z+1, r25	; 0x01
    3954:	80 83       	st	Z, r24
    3956:	8a 81       	ldd	r24, Y+2	; 0x02
    3958:	9b 81       	ldd	r25, Y+3	; 0x03
    395a:	93 83       	std	Z+3, r25	; 0x03
    395c:	82 83       	std	Z+2, r24	; 0x02
    395e:	21 15       	cp	r18, r1
    3960:	31 05       	cpc	r19, r1
    3962:	29 f4       	brne	.+10     	; 0x396e <free+0x92>
    3964:	f0 93 0c 12 	sts	0x120C, r31	; 0x80120c <__flp+0x1>
    3968:	e0 93 0b 12 	sts	0x120B, r30	; 0x80120b <__flp>
    396c:	3d c0       	rjmp	.+122    	; 0x39e8 <free+0x10c>
    396e:	e9 01       	movw	r28, r18
    3970:	fb 83       	std	Y+3, r31	; 0x03
    3972:	ea 83       	std	Y+2, r30	; 0x02
    3974:	49 91       	ld	r20, Y+
    3976:	59 91       	ld	r21, Y+
    3978:	c4 0f       	add	r28, r20
    397a:	d5 1f       	adc	r29, r21
    397c:	ec 17       	cp	r30, r28
    397e:	fd 07       	cpc	r31, r29
    3980:	61 f4       	brne	.+24     	; 0x399a <free+0xbe>
    3982:	80 81       	ld	r24, Z
    3984:	91 81       	ldd	r25, Z+1	; 0x01
    3986:	84 0f       	add	r24, r20
    3988:	95 1f       	adc	r25, r21
    398a:	02 96       	adiw	r24, 0x02	; 2
    398c:	e9 01       	movw	r28, r18
    398e:	99 83       	std	Y+1, r25	; 0x01
    3990:	88 83       	st	Y, r24
    3992:	82 81       	ldd	r24, Z+2	; 0x02
    3994:	93 81       	ldd	r25, Z+3	; 0x03
    3996:	9b 83       	std	Y+3, r25	; 0x03
    3998:	8a 83       	std	Y+2, r24	; 0x02
    399a:	e0 e0       	ldi	r30, 0x00	; 0
    399c:	f0 e0       	ldi	r31, 0x00	; 0
    399e:	12 96       	adiw	r26, 0x02	; 2
    39a0:	8d 91       	ld	r24, X+
    39a2:	9c 91       	ld	r25, X
    39a4:	13 97       	sbiw	r26, 0x03	; 3
    39a6:	00 97       	sbiw	r24, 0x00	; 0
    39a8:	19 f0       	breq	.+6      	; 0x39b0 <free+0xd4>
    39aa:	fd 01       	movw	r30, r26
    39ac:	dc 01       	movw	r26, r24
    39ae:	f7 cf       	rjmp	.-18     	; 0x399e <free+0xc2>
    39b0:	8d 91       	ld	r24, X+
    39b2:	9c 91       	ld	r25, X
    39b4:	11 97       	sbiw	r26, 0x01	; 1
    39b6:	9d 01       	movw	r18, r26
    39b8:	2e 5f       	subi	r18, 0xFE	; 254
    39ba:	3f 4f       	sbci	r19, 0xFF	; 255
    39bc:	82 0f       	add	r24, r18
    39be:	93 1f       	adc	r25, r19
    39c0:	20 91 09 12 	lds	r18, 0x1209	; 0x801209 <__brkval>
    39c4:	30 91 0a 12 	lds	r19, 0x120A	; 0x80120a <__brkval+0x1>
    39c8:	28 17       	cp	r18, r24
    39ca:	39 07       	cpc	r19, r25
    39cc:	69 f4       	brne	.+26     	; 0x39e8 <free+0x10c>
    39ce:	30 97       	sbiw	r30, 0x00	; 0
    39d0:	29 f4       	brne	.+10     	; 0x39dc <free+0x100>
    39d2:	10 92 0c 12 	sts	0x120C, r1	; 0x80120c <__flp+0x1>
    39d6:	10 92 0b 12 	sts	0x120B, r1	; 0x80120b <__flp>
    39da:	02 c0       	rjmp	.+4      	; 0x39e0 <free+0x104>
    39dc:	13 82       	std	Z+3, r1	; 0x03
    39de:	12 82       	std	Z+2, r1	; 0x02
    39e0:	b0 93 0a 12 	sts	0x120A, r27	; 0x80120a <__brkval+0x1>
    39e4:	a0 93 09 12 	sts	0x1209, r26	; 0x801209 <__brkval>
    39e8:	df 91       	pop	r29
    39ea:	cf 91       	pop	r28
    39ec:	08 95       	ret

000039ee <abort>:
    39ee:	81 e0       	ldi	r24, 0x01	; 1
    39f0:	90 e0       	ldi	r25, 0x00	; 0
    39f2:	f8 94       	cli
    39f4:	00 c3       	rjmp	.+1536   	; 0x3ff6 <_exit>

000039f6 <memcpy>:
    39f6:	fb 01       	movw	r30, r22
    39f8:	dc 01       	movw	r26, r24
    39fa:	02 c0       	rjmp	.+4      	; 0x3a00 <memcpy+0xa>
    39fc:	01 90       	ld	r0, Z+
    39fe:	0d 92       	st	X+, r0
    3a00:	41 50       	subi	r20, 0x01	; 1
    3a02:	50 40       	sbci	r21, 0x00	; 0
    3a04:	d8 f7       	brcc	.-10     	; 0x39fc <memcpy+0x6>
    3a06:	08 95       	ret

00003a08 <memset>:
    3a08:	dc 01       	movw	r26, r24
    3a0a:	01 c0       	rjmp	.+2      	; 0x3a0e <memset+0x6>
    3a0c:	6d 93       	st	X+, r22
    3a0e:	41 50       	subi	r20, 0x01	; 1
    3a10:	50 40       	sbci	r21, 0x00	; 0
    3a12:	e0 f7       	brcc	.-8      	; 0x3a0c <memset+0x4>
    3a14:	08 95       	ret

00003a16 <printf>:
    3a16:	cf 93       	push	r28
    3a18:	df 93       	push	r29
    3a1a:	cd b7       	in	r28, 0x3d	; 61
    3a1c:	de b7       	in	r29, 0x3e	; 62
    3a1e:	ae 01       	movw	r20, r28
    3a20:	4a 5f       	subi	r20, 0xFA	; 250
    3a22:	5f 4f       	sbci	r21, 0xFF	; 255
    3a24:	fa 01       	movw	r30, r20
    3a26:	61 91       	ld	r22, Z+
    3a28:	71 91       	ld	r23, Z+
    3a2a:	af 01       	movw	r20, r30
    3a2c:	80 91 0f 12 	lds	r24, 0x120F	; 0x80120f <__iob+0x2>
    3a30:	90 91 10 12 	lds	r25, 0x1210	; 0x801210 <__iob+0x3>
    3a34:	33 d0       	rcall	.+102    	; 0x3a9c <vfprintf>
    3a36:	df 91       	pop	r29
    3a38:	cf 91       	pop	r28
    3a3a:	08 95       	ret

00003a3c <puts>:
    3a3c:	0f 93       	push	r16
    3a3e:	1f 93       	push	r17
    3a40:	cf 93       	push	r28
    3a42:	df 93       	push	r29
    3a44:	e0 91 0f 12 	lds	r30, 0x120F	; 0x80120f <__iob+0x2>
    3a48:	f0 91 10 12 	lds	r31, 0x1210	; 0x801210 <__iob+0x3>
    3a4c:	23 81       	ldd	r18, Z+3	; 0x03
    3a4e:	21 ff       	sbrs	r18, 1
    3a50:	1b c0       	rjmp	.+54     	; 0x3a88 <puts+0x4c>
    3a52:	8c 01       	movw	r16, r24
    3a54:	d0 e0       	ldi	r29, 0x00	; 0
    3a56:	c0 e0       	ldi	r28, 0x00	; 0
    3a58:	f8 01       	movw	r30, r16
    3a5a:	81 91       	ld	r24, Z+
    3a5c:	8f 01       	movw	r16, r30
    3a5e:	60 91 0f 12 	lds	r22, 0x120F	; 0x80120f <__iob+0x2>
    3a62:	70 91 10 12 	lds	r23, 0x1210	; 0x801210 <__iob+0x3>
    3a66:	db 01       	movw	r26, r22
    3a68:	18 96       	adiw	r26, 0x08	; 8
    3a6a:	ed 91       	ld	r30, X+
    3a6c:	fc 91       	ld	r31, X
    3a6e:	19 97       	sbiw	r26, 0x09	; 9
    3a70:	88 23       	and	r24, r24
    3a72:	31 f0       	breq	.+12     	; 0x3a80 <puts+0x44>
    3a74:	19 95       	eicall
    3a76:	89 2b       	or	r24, r25
    3a78:	79 f3       	breq	.-34     	; 0x3a58 <puts+0x1c>
    3a7a:	df ef       	ldi	r29, 0xFF	; 255
    3a7c:	cf ef       	ldi	r28, 0xFF	; 255
    3a7e:	ec cf       	rjmp	.-40     	; 0x3a58 <puts+0x1c>
    3a80:	8a e0       	ldi	r24, 0x0A	; 10
    3a82:	19 95       	eicall
    3a84:	89 2b       	or	r24, r25
    3a86:	19 f0       	breq	.+6      	; 0x3a8e <puts+0x52>
    3a88:	8f ef       	ldi	r24, 0xFF	; 255
    3a8a:	9f ef       	ldi	r25, 0xFF	; 255
    3a8c:	02 c0       	rjmp	.+4      	; 0x3a92 <puts+0x56>
    3a8e:	8d 2f       	mov	r24, r29
    3a90:	9c 2f       	mov	r25, r28
    3a92:	df 91       	pop	r29
    3a94:	cf 91       	pop	r28
    3a96:	1f 91       	pop	r17
    3a98:	0f 91       	pop	r16
    3a9a:	08 95       	ret

00003a9c <vfprintf>:
    3a9c:	2f 92       	push	r2
    3a9e:	3f 92       	push	r3
    3aa0:	4f 92       	push	r4
    3aa2:	5f 92       	push	r5
    3aa4:	6f 92       	push	r6
    3aa6:	7f 92       	push	r7
    3aa8:	8f 92       	push	r8
    3aaa:	9f 92       	push	r9
    3aac:	af 92       	push	r10
    3aae:	bf 92       	push	r11
    3ab0:	cf 92       	push	r12
    3ab2:	df 92       	push	r13
    3ab4:	ef 92       	push	r14
    3ab6:	ff 92       	push	r15
    3ab8:	0f 93       	push	r16
    3aba:	1f 93       	push	r17
    3abc:	cf 93       	push	r28
    3abe:	df 93       	push	r29
    3ac0:	cd b7       	in	r28, 0x3d	; 61
    3ac2:	de b7       	in	r29, 0x3e	; 62
    3ac4:	2b 97       	sbiw	r28, 0x0b	; 11
    3ac6:	0f b6       	in	r0, 0x3f	; 63
    3ac8:	f8 94       	cli
    3aca:	de bf       	out	0x3e, r29	; 62
    3acc:	0f be       	out	0x3f, r0	; 63
    3ace:	cd bf       	out	0x3d, r28	; 61
    3ad0:	6c 01       	movw	r12, r24
    3ad2:	7b 01       	movw	r14, r22
    3ad4:	8a 01       	movw	r16, r20
    3ad6:	fc 01       	movw	r30, r24
    3ad8:	17 82       	std	Z+7, r1	; 0x07
    3ada:	16 82       	std	Z+6, r1	; 0x06
    3adc:	83 81       	ldd	r24, Z+3	; 0x03
    3ade:	81 ff       	sbrs	r24, 1
    3ae0:	bf c1       	rjmp	.+894    	; 0x3e60 <vfprintf+0x3c4>
    3ae2:	ce 01       	movw	r24, r28
    3ae4:	01 96       	adiw	r24, 0x01	; 1
    3ae6:	3c 01       	movw	r6, r24
    3ae8:	f6 01       	movw	r30, r12
    3aea:	93 81       	ldd	r25, Z+3	; 0x03
    3aec:	f7 01       	movw	r30, r14
    3aee:	93 fd       	sbrc	r25, 3
    3af0:	85 91       	lpm	r24, Z+
    3af2:	93 ff       	sbrs	r25, 3
    3af4:	81 91       	ld	r24, Z+
    3af6:	7f 01       	movw	r14, r30
    3af8:	88 23       	and	r24, r24
    3afa:	09 f4       	brne	.+2      	; 0x3afe <vfprintf+0x62>
    3afc:	ad c1       	rjmp	.+858    	; 0x3e58 <vfprintf+0x3bc>
    3afe:	85 32       	cpi	r24, 0x25	; 37
    3b00:	39 f4       	brne	.+14     	; 0x3b10 <vfprintf+0x74>
    3b02:	93 fd       	sbrc	r25, 3
    3b04:	85 91       	lpm	r24, Z+
    3b06:	93 ff       	sbrs	r25, 3
    3b08:	81 91       	ld	r24, Z+
    3b0a:	7f 01       	movw	r14, r30
    3b0c:	85 32       	cpi	r24, 0x25	; 37
    3b0e:	21 f4       	brne	.+8      	; 0x3b18 <vfprintf+0x7c>
    3b10:	b6 01       	movw	r22, r12
    3b12:	90 e0       	ldi	r25, 0x00	; 0
    3b14:	d6 d1       	rcall	.+940    	; 0x3ec2 <fputc>
    3b16:	e8 cf       	rjmp	.-48     	; 0x3ae8 <vfprintf+0x4c>
    3b18:	91 2c       	mov	r9, r1
    3b1a:	21 2c       	mov	r2, r1
    3b1c:	31 2c       	mov	r3, r1
    3b1e:	ff e1       	ldi	r31, 0x1F	; 31
    3b20:	f3 15       	cp	r31, r3
    3b22:	d8 f0       	brcs	.+54     	; 0x3b5a <vfprintf+0xbe>
    3b24:	8b 32       	cpi	r24, 0x2B	; 43
    3b26:	79 f0       	breq	.+30     	; 0x3b46 <vfprintf+0xaa>
    3b28:	38 f4       	brcc	.+14     	; 0x3b38 <vfprintf+0x9c>
    3b2a:	80 32       	cpi	r24, 0x20	; 32
    3b2c:	79 f0       	breq	.+30     	; 0x3b4c <vfprintf+0xb0>
    3b2e:	83 32       	cpi	r24, 0x23	; 35
    3b30:	a1 f4       	brne	.+40     	; 0x3b5a <vfprintf+0xbe>
    3b32:	23 2d       	mov	r18, r3
    3b34:	20 61       	ori	r18, 0x10	; 16
    3b36:	1d c0       	rjmp	.+58     	; 0x3b72 <vfprintf+0xd6>
    3b38:	8d 32       	cpi	r24, 0x2D	; 45
    3b3a:	61 f0       	breq	.+24     	; 0x3b54 <vfprintf+0xb8>
    3b3c:	80 33       	cpi	r24, 0x30	; 48
    3b3e:	69 f4       	brne	.+26     	; 0x3b5a <vfprintf+0xbe>
    3b40:	23 2d       	mov	r18, r3
    3b42:	21 60       	ori	r18, 0x01	; 1
    3b44:	16 c0       	rjmp	.+44     	; 0x3b72 <vfprintf+0xd6>
    3b46:	83 2d       	mov	r24, r3
    3b48:	82 60       	ori	r24, 0x02	; 2
    3b4a:	38 2e       	mov	r3, r24
    3b4c:	e3 2d       	mov	r30, r3
    3b4e:	e4 60       	ori	r30, 0x04	; 4
    3b50:	3e 2e       	mov	r3, r30
    3b52:	2a c0       	rjmp	.+84     	; 0x3ba8 <vfprintf+0x10c>
    3b54:	f3 2d       	mov	r31, r3
    3b56:	f8 60       	ori	r31, 0x08	; 8
    3b58:	1d c0       	rjmp	.+58     	; 0x3b94 <vfprintf+0xf8>
    3b5a:	37 fc       	sbrc	r3, 7
    3b5c:	2d c0       	rjmp	.+90     	; 0x3bb8 <vfprintf+0x11c>
    3b5e:	20 ed       	ldi	r18, 0xD0	; 208
    3b60:	28 0f       	add	r18, r24
    3b62:	2a 30       	cpi	r18, 0x0A	; 10
    3b64:	40 f0       	brcs	.+16     	; 0x3b76 <vfprintf+0xda>
    3b66:	8e 32       	cpi	r24, 0x2E	; 46
    3b68:	b9 f4       	brne	.+46     	; 0x3b98 <vfprintf+0xfc>
    3b6a:	36 fc       	sbrc	r3, 6
    3b6c:	75 c1       	rjmp	.+746    	; 0x3e58 <vfprintf+0x3bc>
    3b6e:	23 2d       	mov	r18, r3
    3b70:	20 64       	ori	r18, 0x40	; 64
    3b72:	32 2e       	mov	r3, r18
    3b74:	19 c0       	rjmp	.+50     	; 0x3ba8 <vfprintf+0x10c>
    3b76:	36 fe       	sbrs	r3, 6
    3b78:	06 c0       	rjmp	.+12     	; 0x3b86 <vfprintf+0xea>
    3b7a:	8a e0       	ldi	r24, 0x0A	; 10
    3b7c:	98 9e       	mul	r9, r24
    3b7e:	20 0d       	add	r18, r0
    3b80:	11 24       	eor	r1, r1
    3b82:	92 2e       	mov	r9, r18
    3b84:	11 c0       	rjmp	.+34     	; 0x3ba8 <vfprintf+0x10c>
    3b86:	ea e0       	ldi	r30, 0x0A	; 10
    3b88:	2e 9e       	mul	r2, r30
    3b8a:	20 0d       	add	r18, r0
    3b8c:	11 24       	eor	r1, r1
    3b8e:	22 2e       	mov	r2, r18
    3b90:	f3 2d       	mov	r31, r3
    3b92:	f0 62       	ori	r31, 0x20	; 32
    3b94:	3f 2e       	mov	r3, r31
    3b96:	08 c0       	rjmp	.+16     	; 0x3ba8 <vfprintf+0x10c>
    3b98:	8c 36       	cpi	r24, 0x6C	; 108
    3b9a:	21 f4       	brne	.+8      	; 0x3ba4 <vfprintf+0x108>
    3b9c:	83 2d       	mov	r24, r3
    3b9e:	80 68       	ori	r24, 0x80	; 128
    3ba0:	38 2e       	mov	r3, r24
    3ba2:	02 c0       	rjmp	.+4      	; 0x3ba8 <vfprintf+0x10c>
    3ba4:	88 36       	cpi	r24, 0x68	; 104
    3ba6:	41 f4       	brne	.+16     	; 0x3bb8 <vfprintf+0x11c>
    3ba8:	f7 01       	movw	r30, r14
    3baa:	93 fd       	sbrc	r25, 3
    3bac:	85 91       	lpm	r24, Z+
    3bae:	93 ff       	sbrs	r25, 3
    3bb0:	81 91       	ld	r24, Z+
    3bb2:	7f 01       	movw	r14, r30
    3bb4:	81 11       	cpse	r24, r1
    3bb6:	b3 cf       	rjmp	.-154    	; 0x3b1e <vfprintf+0x82>
    3bb8:	98 2f       	mov	r25, r24
    3bba:	9f 7d       	andi	r25, 0xDF	; 223
    3bbc:	95 54       	subi	r25, 0x45	; 69
    3bbe:	93 30       	cpi	r25, 0x03	; 3
    3bc0:	28 f4       	brcc	.+10     	; 0x3bcc <vfprintf+0x130>
    3bc2:	0c 5f       	subi	r16, 0xFC	; 252
    3bc4:	1f 4f       	sbci	r17, 0xFF	; 255
    3bc6:	9f e3       	ldi	r25, 0x3F	; 63
    3bc8:	99 83       	std	Y+1, r25	; 0x01
    3bca:	0d c0       	rjmp	.+26     	; 0x3be6 <vfprintf+0x14a>
    3bcc:	83 36       	cpi	r24, 0x63	; 99
    3bce:	31 f0       	breq	.+12     	; 0x3bdc <vfprintf+0x140>
    3bd0:	83 37       	cpi	r24, 0x73	; 115
    3bd2:	71 f0       	breq	.+28     	; 0x3bf0 <vfprintf+0x154>
    3bd4:	83 35       	cpi	r24, 0x53	; 83
    3bd6:	09 f0       	breq	.+2      	; 0x3bda <vfprintf+0x13e>
    3bd8:	55 c0       	rjmp	.+170    	; 0x3c84 <vfprintf+0x1e8>
    3bda:	20 c0       	rjmp	.+64     	; 0x3c1c <vfprintf+0x180>
    3bdc:	f8 01       	movw	r30, r16
    3bde:	80 81       	ld	r24, Z
    3be0:	89 83       	std	Y+1, r24	; 0x01
    3be2:	0e 5f       	subi	r16, 0xFE	; 254
    3be4:	1f 4f       	sbci	r17, 0xFF	; 255
    3be6:	88 24       	eor	r8, r8
    3be8:	83 94       	inc	r8
    3bea:	91 2c       	mov	r9, r1
    3bec:	53 01       	movw	r10, r6
    3bee:	12 c0       	rjmp	.+36     	; 0x3c14 <vfprintf+0x178>
    3bf0:	28 01       	movw	r4, r16
    3bf2:	f2 e0       	ldi	r31, 0x02	; 2
    3bf4:	4f 0e       	add	r4, r31
    3bf6:	51 1c       	adc	r5, r1
    3bf8:	f8 01       	movw	r30, r16
    3bfa:	a0 80       	ld	r10, Z
    3bfc:	b1 80       	ldd	r11, Z+1	; 0x01
    3bfe:	36 fe       	sbrs	r3, 6
    3c00:	03 c0       	rjmp	.+6      	; 0x3c08 <vfprintf+0x16c>
    3c02:	69 2d       	mov	r22, r9
    3c04:	70 e0       	ldi	r23, 0x00	; 0
    3c06:	02 c0       	rjmp	.+4      	; 0x3c0c <vfprintf+0x170>
    3c08:	6f ef       	ldi	r22, 0xFF	; 255
    3c0a:	7f ef       	ldi	r23, 0xFF	; 255
    3c0c:	c5 01       	movw	r24, r10
    3c0e:	4e d1       	rcall	.+668    	; 0x3eac <strnlen>
    3c10:	4c 01       	movw	r8, r24
    3c12:	82 01       	movw	r16, r4
    3c14:	f3 2d       	mov	r31, r3
    3c16:	ff 77       	andi	r31, 0x7F	; 127
    3c18:	3f 2e       	mov	r3, r31
    3c1a:	15 c0       	rjmp	.+42     	; 0x3c46 <vfprintf+0x1aa>
    3c1c:	28 01       	movw	r4, r16
    3c1e:	22 e0       	ldi	r18, 0x02	; 2
    3c20:	42 0e       	add	r4, r18
    3c22:	51 1c       	adc	r5, r1
    3c24:	f8 01       	movw	r30, r16
    3c26:	a0 80       	ld	r10, Z
    3c28:	b1 80       	ldd	r11, Z+1	; 0x01
    3c2a:	36 fe       	sbrs	r3, 6
    3c2c:	03 c0       	rjmp	.+6      	; 0x3c34 <vfprintf+0x198>
    3c2e:	69 2d       	mov	r22, r9
    3c30:	70 e0       	ldi	r23, 0x00	; 0
    3c32:	02 c0       	rjmp	.+4      	; 0x3c38 <vfprintf+0x19c>
    3c34:	6f ef       	ldi	r22, 0xFF	; 255
    3c36:	7f ef       	ldi	r23, 0xFF	; 255
    3c38:	c5 01       	movw	r24, r10
    3c3a:	2d d1       	rcall	.+602    	; 0x3e96 <strnlen_P>
    3c3c:	4c 01       	movw	r8, r24
    3c3e:	f3 2d       	mov	r31, r3
    3c40:	f0 68       	ori	r31, 0x80	; 128
    3c42:	3f 2e       	mov	r3, r31
    3c44:	82 01       	movw	r16, r4
    3c46:	33 fc       	sbrc	r3, 3
    3c48:	19 c0       	rjmp	.+50     	; 0x3c7c <vfprintf+0x1e0>
    3c4a:	82 2d       	mov	r24, r2
    3c4c:	90 e0       	ldi	r25, 0x00	; 0
    3c4e:	88 16       	cp	r8, r24
    3c50:	99 06       	cpc	r9, r25
    3c52:	a0 f4       	brcc	.+40     	; 0x3c7c <vfprintf+0x1e0>
    3c54:	b6 01       	movw	r22, r12
    3c56:	80 e2       	ldi	r24, 0x20	; 32
    3c58:	90 e0       	ldi	r25, 0x00	; 0
    3c5a:	33 d1       	rcall	.+614    	; 0x3ec2 <fputc>
    3c5c:	2a 94       	dec	r2
    3c5e:	f5 cf       	rjmp	.-22     	; 0x3c4a <vfprintf+0x1ae>
    3c60:	f5 01       	movw	r30, r10
    3c62:	37 fc       	sbrc	r3, 7
    3c64:	85 91       	lpm	r24, Z+
    3c66:	37 fe       	sbrs	r3, 7
    3c68:	81 91       	ld	r24, Z+
    3c6a:	5f 01       	movw	r10, r30
    3c6c:	b6 01       	movw	r22, r12
    3c6e:	90 e0       	ldi	r25, 0x00	; 0
    3c70:	28 d1       	rcall	.+592    	; 0x3ec2 <fputc>
    3c72:	21 10       	cpse	r2, r1
    3c74:	2a 94       	dec	r2
    3c76:	21 e0       	ldi	r18, 0x01	; 1
    3c78:	82 1a       	sub	r8, r18
    3c7a:	91 08       	sbc	r9, r1
    3c7c:	81 14       	cp	r8, r1
    3c7e:	91 04       	cpc	r9, r1
    3c80:	79 f7       	brne	.-34     	; 0x3c60 <vfprintf+0x1c4>
    3c82:	e1 c0       	rjmp	.+450    	; 0x3e46 <vfprintf+0x3aa>
    3c84:	84 36       	cpi	r24, 0x64	; 100
    3c86:	11 f0       	breq	.+4      	; 0x3c8c <vfprintf+0x1f0>
    3c88:	89 36       	cpi	r24, 0x69	; 105
    3c8a:	39 f5       	brne	.+78     	; 0x3cda <vfprintf+0x23e>
    3c8c:	f8 01       	movw	r30, r16
    3c8e:	37 fe       	sbrs	r3, 7
    3c90:	07 c0       	rjmp	.+14     	; 0x3ca0 <vfprintf+0x204>
    3c92:	60 81       	ld	r22, Z
    3c94:	71 81       	ldd	r23, Z+1	; 0x01
    3c96:	82 81       	ldd	r24, Z+2	; 0x02
    3c98:	93 81       	ldd	r25, Z+3	; 0x03
    3c9a:	0c 5f       	subi	r16, 0xFC	; 252
    3c9c:	1f 4f       	sbci	r17, 0xFF	; 255
    3c9e:	08 c0       	rjmp	.+16     	; 0x3cb0 <vfprintf+0x214>
    3ca0:	60 81       	ld	r22, Z
    3ca2:	71 81       	ldd	r23, Z+1	; 0x01
    3ca4:	07 2e       	mov	r0, r23
    3ca6:	00 0c       	add	r0, r0
    3ca8:	88 0b       	sbc	r24, r24
    3caa:	99 0b       	sbc	r25, r25
    3cac:	0e 5f       	subi	r16, 0xFE	; 254
    3cae:	1f 4f       	sbci	r17, 0xFF	; 255
    3cb0:	f3 2d       	mov	r31, r3
    3cb2:	ff 76       	andi	r31, 0x6F	; 111
    3cb4:	3f 2e       	mov	r3, r31
    3cb6:	97 ff       	sbrs	r25, 7
    3cb8:	09 c0       	rjmp	.+18     	; 0x3ccc <vfprintf+0x230>
    3cba:	90 95       	com	r25
    3cbc:	80 95       	com	r24
    3cbe:	70 95       	com	r23
    3cc0:	61 95       	neg	r22
    3cc2:	7f 4f       	sbci	r23, 0xFF	; 255
    3cc4:	8f 4f       	sbci	r24, 0xFF	; 255
    3cc6:	9f 4f       	sbci	r25, 0xFF	; 255
    3cc8:	f0 68       	ori	r31, 0x80	; 128
    3cca:	3f 2e       	mov	r3, r31
    3ccc:	2a e0       	ldi	r18, 0x0A	; 10
    3cce:	30 e0       	ldi	r19, 0x00	; 0
    3cd0:	a3 01       	movw	r20, r6
    3cd2:	33 d1       	rcall	.+614    	; 0x3f3a <__ultoa_invert>
    3cd4:	88 2e       	mov	r8, r24
    3cd6:	86 18       	sub	r8, r6
    3cd8:	44 c0       	rjmp	.+136    	; 0x3d62 <vfprintf+0x2c6>
    3cda:	85 37       	cpi	r24, 0x75	; 117
    3cdc:	31 f4       	brne	.+12     	; 0x3cea <vfprintf+0x24e>
    3cde:	23 2d       	mov	r18, r3
    3ce0:	2f 7e       	andi	r18, 0xEF	; 239
    3ce2:	b2 2e       	mov	r11, r18
    3ce4:	2a e0       	ldi	r18, 0x0A	; 10
    3ce6:	30 e0       	ldi	r19, 0x00	; 0
    3ce8:	25 c0       	rjmp	.+74     	; 0x3d34 <vfprintf+0x298>
    3cea:	93 2d       	mov	r25, r3
    3cec:	99 7f       	andi	r25, 0xF9	; 249
    3cee:	b9 2e       	mov	r11, r25
    3cf0:	8f 36       	cpi	r24, 0x6F	; 111
    3cf2:	c1 f0       	breq	.+48     	; 0x3d24 <vfprintf+0x288>
    3cf4:	18 f4       	brcc	.+6      	; 0x3cfc <vfprintf+0x260>
    3cf6:	88 35       	cpi	r24, 0x58	; 88
    3cf8:	79 f0       	breq	.+30     	; 0x3d18 <vfprintf+0x27c>
    3cfa:	ae c0       	rjmp	.+348    	; 0x3e58 <vfprintf+0x3bc>
    3cfc:	80 37       	cpi	r24, 0x70	; 112
    3cfe:	19 f0       	breq	.+6      	; 0x3d06 <vfprintf+0x26a>
    3d00:	88 37       	cpi	r24, 0x78	; 120
    3d02:	21 f0       	breq	.+8      	; 0x3d0c <vfprintf+0x270>
    3d04:	a9 c0       	rjmp	.+338    	; 0x3e58 <vfprintf+0x3bc>
    3d06:	e9 2f       	mov	r30, r25
    3d08:	e0 61       	ori	r30, 0x10	; 16
    3d0a:	be 2e       	mov	r11, r30
    3d0c:	b4 fe       	sbrs	r11, 4
    3d0e:	0d c0       	rjmp	.+26     	; 0x3d2a <vfprintf+0x28e>
    3d10:	fb 2d       	mov	r31, r11
    3d12:	f4 60       	ori	r31, 0x04	; 4
    3d14:	bf 2e       	mov	r11, r31
    3d16:	09 c0       	rjmp	.+18     	; 0x3d2a <vfprintf+0x28e>
    3d18:	34 fe       	sbrs	r3, 4
    3d1a:	0a c0       	rjmp	.+20     	; 0x3d30 <vfprintf+0x294>
    3d1c:	29 2f       	mov	r18, r25
    3d1e:	26 60       	ori	r18, 0x06	; 6
    3d20:	b2 2e       	mov	r11, r18
    3d22:	06 c0       	rjmp	.+12     	; 0x3d30 <vfprintf+0x294>
    3d24:	28 e0       	ldi	r18, 0x08	; 8
    3d26:	30 e0       	ldi	r19, 0x00	; 0
    3d28:	05 c0       	rjmp	.+10     	; 0x3d34 <vfprintf+0x298>
    3d2a:	20 e1       	ldi	r18, 0x10	; 16
    3d2c:	30 e0       	ldi	r19, 0x00	; 0
    3d2e:	02 c0       	rjmp	.+4      	; 0x3d34 <vfprintf+0x298>
    3d30:	20 e1       	ldi	r18, 0x10	; 16
    3d32:	32 e0       	ldi	r19, 0x02	; 2
    3d34:	f8 01       	movw	r30, r16
    3d36:	b7 fe       	sbrs	r11, 7
    3d38:	07 c0       	rjmp	.+14     	; 0x3d48 <vfprintf+0x2ac>
    3d3a:	60 81       	ld	r22, Z
    3d3c:	71 81       	ldd	r23, Z+1	; 0x01
    3d3e:	82 81       	ldd	r24, Z+2	; 0x02
    3d40:	93 81       	ldd	r25, Z+3	; 0x03
    3d42:	0c 5f       	subi	r16, 0xFC	; 252
    3d44:	1f 4f       	sbci	r17, 0xFF	; 255
    3d46:	06 c0       	rjmp	.+12     	; 0x3d54 <vfprintf+0x2b8>
    3d48:	60 81       	ld	r22, Z
    3d4a:	71 81       	ldd	r23, Z+1	; 0x01
    3d4c:	80 e0       	ldi	r24, 0x00	; 0
    3d4e:	90 e0       	ldi	r25, 0x00	; 0
    3d50:	0e 5f       	subi	r16, 0xFE	; 254
    3d52:	1f 4f       	sbci	r17, 0xFF	; 255
    3d54:	a3 01       	movw	r20, r6
    3d56:	f1 d0       	rcall	.+482    	; 0x3f3a <__ultoa_invert>
    3d58:	88 2e       	mov	r8, r24
    3d5a:	86 18       	sub	r8, r6
    3d5c:	fb 2d       	mov	r31, r11
    3d5e:	ff 77       	andi	r31, 0x7F	; 127
    3d60:	3f 2e       	mov	r3, r31
    3d62:	36 fe       	sbrs	r3, 6
    3d64:	0d c0       	rjmp	.+26     	; 0x3d80 <vfprintf+0x2e4>
    3d66:	23 2d       	mov	r18, r3
    3d68:	2e 7f       	andi	r18, 0xFE	; 254
    3d6a:	a2 2e       	mov	r10, r18
    3d6c:	89 14       	cp	r8, r9
    3d6e:	58 f4       	brcc	.+22     	; 0x3d86 <vfprintf+0x2ea>
    3d70:	34 fe       	sbrs	r3, 4
    3d72:	0b c0       	rjmp	.+22     	; 0x3d8a <vfprintf+0x2ee>
    3d74:	32 fc       	sbrc	r3, 2
    3d76:	09 c0       	rjmp	.+18     	; 0x3d8a <vfprintf+0x2ee>
    3d78:	83 2d       	mov	r24, r3
    3d7a:	8e 7e       	andi	r24, 0xEE	; 238
    3d7c:	a8 2e       	mov	r10, r24
    3d7e:	05 c0       	rjmp	.+10     	; 0x3d8a <vfprintf+0x2ee>
    3d80:	b8 2c       	mov	r11, r8
    3d82:	a3 2c       	mov	r10, r3
    3d84:	03 c0       	rjmp	.+6      	; 0x3d8c <vfprintf+0x2f0>
    3d86:	b8 2c       	mov	r11, r8
    3d88:	01 c0       	rjmp	.+2      	; 0x3d8c <vfprintf+0x2f0>
    3d8a:	b9 2c       	mov	r11, r9
    3d8c:	a4 fe       	sbrs	r10, 4
    3d8e:	0f c0       	rjmp	.+30     	; 0x3dae <vfprintf+0x312>
    3d90:	fe 01       	movw	r30, r28
    3d92:	e8 0d       	add	r30, r8
    3d94:	f1 1d       	adc	r31, r1
    3d96:	80 81       	ld	r24, Z
    3d98:	80 33       	cpi	r24, 0x30	; 48
    3d9a:	21 f4       	brne	.+8      	; 0x3da4 <vfprintf+0x308>
    3d9c:	9a 2d       	mov	r25, r10
    3d9e:	99 7e       	andi	r25, 0xE9	; 233
    3da0:	a9 2e       	mov	r10, r25
    3da2:	09 c0       	rjmp	.+18     	; 0x3db6 <vfprintf+0x31a>
    3da4:	a2 fe       	sbrs	r10, 2
    3da6:	06 c0       	rjmp	.+12     	; 0x3db4 <vfprintf+0x318>
    3da8:	b3 94       	inc	r11
    3daa:	b3 94       	inc	r11
    3dac:	04 c0       	rjmp	.+8      	; 0x3db6 <vfprintf+0x31a>
    3dae:	8a 2d       	mov	r24, r10
    3db0:	86 78       	andi	r24, 0x86	; 134
    3db2:	09 f0       	breq	.+2      	; 0x3db6 <vfprintf+0x31a>
    3db4:	b3 94       	inc	r11
    3db6:	a3 fc       	sbrc	r10, 3
    3db8:	10 c0       	rjmp	.+32     	; 0x3dda <vfprintf+0x33e>
    3dba:	a0 fe       	sbrs	r10, 0
    3dbc:	06 c0       	rjmp	.+12     	; 0x3dca <vfprintf+0x32e>
    3dbe:	b2 14       	cp	r11, r2
    3dc0:	80 f4       	brcc	.+32     	; 0x3de2 <vfprintf+0x346>
    3dc2:	28 0c       	add	r2, r8
    3dc4:	92 2c       	mov	r9, r2
    3dc6:	9b 18       	sub	r9, r11
    3dc8:	0d c0       	rjmp	.+26     	; 0x3de4 <vfprintf+0x348>
    3dca:	b2 14       	cp	r11, r2
    3dcc:	58 f4       	brcc	.+22     	; 0x3de4 <vfprintf+0x348>
    3dce:	b6 01       	movw	r22, r12
    3dd0:	80 e2       	ldi	r24, 0x20	; 32
    3dd2:	90 e0       	ldi	r25, 0x00	; 0
    3dd4:	76 d0       	rcall	.+236    	; 0x3ec2 <fputc>
    3dd6:	b3 94       	inc	r11
    3dd8:	f8 cf       	rjmp	.-16     	; 0x3dca <vfprintf+0x32e>
    3dda:	b2 14       	cp	r11, r2
    3ddc:	18 f4       	brcc	.+6      	; 0x3de4 <vfprintf+0x348>
    3dde:	2b 18       	sub	r2, r11
    3de0:	02 c0       	rjmp	.+4      	; 0x3de6 <vfprintf+0x34a>
    3de2:	98 2c       	mov	r9, r8
    3de4:	21 2c       	mov	r2, r1
    3de6:	a4 fe       	sbrs	r10, 4
    3de8:	0f c0       	rjmp	.+30     	; 0x3e08 <vfprintf+0x36c>
    3dea:	b6 01       	movw	r22, r12
    3dec:	80 e3       	ldi	r24, 0x30	; 48
    3dee:	90 e0       	ldi	r25, 0x00	; 0
    3df0:	68 d0       	rcall	.+208    	; 0x3ec2 <fputc>
    3df2:	a2 fe       	sbrs	r10, 2
    3df4:	16 c0       	rjmp	.+44     	; 0x3e22 <vfprintf+0x386>
    3df6:	a1 fc       	sbrc	r10, 1
    3df8:	03 c0       	rjmp	.+6      	; 0x3e00 <vfprintf+0x364>
    3dfa:	88 e7       	ldi	r24, 0x78	; 120
    3dfc:	90 e0       	ldi	r25, 0x00	; 0
    3dfe:	02 c0       	rjmp	.+4      	; 0x3e04 <vfprintf+0x368>
    3e00:	88 e5       	ldi	r24, 0x58	; 88
    3e02:	90 e0       	ldi	r25, 0x00	; 0
    3e04:	b6 01       	movw	r22, r12
    3e06:	0c c0       	rjmp	.+24     	; 0x3e20 <vfprintf+0x384>
    3e08:	8a 2d       	mov	r24, r10
    3e0a:	86 78       	andi	r24, 0x86	; 134
    3e0c:	51 f0       	breq	.+20     	; 0x3e22 <vfprintf+0x386>
    3e0e:	a1 fe       	sbrs	r10, 1
    3e10:	02 c0       	rjmp	.+4      	; 0x3e16 <vfprintf+0x37a>
    3e12:	8b e2       	ldi	r24, 0x2B	; 43
    3e14:	01 c0       	rjmp	.+2      	; 0x3e18 <vfprintf+0x37c>
    3e16:	80 e2       	ldi	r24, 0x20	; 32
    3e18:	a7 fc       	sbrc	r10, 7
    3e1a:	8d e2       	ldi	r24, 0x2D	; 45
    3e1c:	b6 01       	movw	r22, r12
    3e1e:	90 e0       	ldi	r25, 0x00	; 0
    3e20:	50 d0       	rcall	.+160    	; 0x3ec2 <fputc>
    3e22:	89 14       	cp	r8, r9
    3e24:	30 f4       	brcc	.+12     	; 0x3e32 <vfprintf+0x396>
    3e26:	b6 01       	movw	r22, r12
    3e28:	80 e3       	ldi	r24, 0x30	; 48
    3e2a:	90 e0       	ldi	r25, 0x00	; 0
    3e2c:	4a d0       	rcall	.+148    	; 0x3ec2 <fputc>
    3e2e:	9a 94       	dec	r9
    3e30:	f8 cf       	rjmp	.-16     	; 0x3e22 <vfprintf+0x386>
    3e32:	8a 94       	dec	r8
    3e34:	f3 01       	movw	r30, r6
    3e36:	e8 0d       	add	r30, r8
    3e38:	f1 1d       	adc	r31, r1
    3e3a:	80 81       	ld	r24, Z
    3e3c:	b6 01       	movw	r22, r12
    3e3e:	90 e0       	ldi	r25, 0x00	; 0
    3e40:	40 d0       	rcall	.+128    	; 0x3ec2 <fputc>
    3e42:	81 10       	cpse	r8, r1
    3e44:	f6 cf       	rjmp	.-20     	; 0x3e32 <vfprintf+0x396>
    3e46:	22 20       	and	r2, r2
    3e48:	09 f4       	brne	.+2      	; 0x3e4c <vfprintf+0x3b0>
    3e4a:	4e ce       	rjmp	.-868    	; 0x3ae8 <vfprintf+0x4c>
    3e4c:	b6 01       	movw	r22, r12
    3e4e:	80 e2       	ldi	r24, 0x20	; 32
    3e50:	90 e0       	ldi	r25, 0x00	; 0
    3e52:	37 d0       	rcall	.+110    	; 0x3ec2 <fputc>
    3e54:	2a 94       	dec	r2
    3e56:	f7 cf       	rjmp	.-18     	; 0x3e46 <vfprintf+0x3aa>
    3e58:	f6 01       	movw	r30, r12
    3e5a:	86 81       	ldd	r24, Z+6	; 0x06
    3e5c:	97 81       	ldd	r25, Z+7	; 0x07
    3e5e:	02 c0       	rjmp	.+4      	; 0x3e64 <vfprintf+0x3c8>
    3e60:	8f ef       	ldi	r24, 0xFF	; 255
    3e62:	9f ef       	ldi	r25, 0xFF	; 255
    3e64:	2b 96       	adiw	r28, 0x0b	; 11
    3e66:	0f b6       	in	r0, 0x3f	; 63
    3e68:	f8 94       	cli
    3e6a:	de bf       	out	0x3e, r29	; 62
    3e6c:	0f be       	out	0x3f, r0	; 63
    3e6e:	cd bf       	out	0x3d, r28	; 61
    3e70:	df 91       	pop	r29
    3e72:	cf 91       	pop	r28
    3e74:	1f 91       	pop	r17
    3e76:	0f 91       	pop	r16
    3e78:	ff 90       	pop	r15
    3e7a:	ef 90       	pop	r14
    3e7c:	df 90       	pop	r13
    3e7e:	cf 90       	pop	r12
    3e80:	bf 90       	pop	r11
    3e82:	af 90       	pop	r10
    3e84:	9f 90       	pop	r9
    3e86:	8f 90       	pop	r8
    3e88:	7f 90       	pop	r7
    3e8a:	6f 90       	pop	r6
    3e8c:	5f 90       	pop	r5
    3e8e:	4f 90       	pop	r4
    3e90:	3f 90       	pop	r3
    3e92:	2f 90       	pop	r2
    3e94:	08 95       	ret

00003e96 <strnlen_P>:
    3e96:	fc 01       	movw	r30, r24
    3e98:	05 90       	lpm	r0, Z+
    3e9a:	61 50       	subi	r22, 0x01	; 1
    3e9c:	70 40       	sbci	r23, 0x00	; 0
    3e9e:	01 10       	cpse	r0, r1
    3ea0:	d8 f7       	brcc	.-10     	; 0x3e98 <strnlen_P+0x2>
    3ea2:	80 95       	com	r24
    3ea4:	90 95       	com	r25
    3ea6:	8e 0f       	add	r24, r30
    3ea8:	9f 1f       	adc	r25, r31
    3eaa:	08 95       	ret

00003eac <strnlen>:
    3eac:	fc 01       	movw	r30, r24
    3eae:	61 50       	subi	r22, 0x01	; 1
    3eb0:	70 40       	sbci	r23, 0x00	; 0
    3eb2:	01 90       	ld	r0, Z+
    3eb4:	01 10       	cpse	r0, r1
    3eb6:	d8 f7       	brcc	.-10     	; 0x3eae <strnlen+0x2>
    3eb8:	80 95       	com	r24
    3eba:	90 95       	com	r25
    3ebc:	8e 0f       	add	r24, r30
    3ebe:	9f 1f       	adc	r25, r31
    3ec0:	08 95       	ret

00003ec2 <fputc>:
    3ec2:	0f 93       	push	r16
    3ec4:	1f 93       	push	r17
    3ec6:	cf 93       	push	r28
    3ec8:	df 93       	push	r29
    3eca:	fb 01       	movw	r30, r22
    3ecc:	23 81       	ldd	r18, Z+3	; 0x03
    3ece:	21 fd       	sbrc	r18, 1
    3ed0:	03 c0       	rjmp	.+6      	; 0x3ed8 <fputc+0x16>
    3ed2:	8f ef       	ldi	r24, 0xFF	; 255
    3ed4:	9f ef       	ldi	r25, 0xFF	; 255
    3ed6:	2c c0       	rjmp	.+88     	; 0x3f30 <fputc+0x6e>
    3ed8:	22 ff       	sbrs	r18, 2
    3eda:	16 c0       	rjmp	.+44     	; 0x3f08 <fputc+0x46>
    3edc:	46 81       	ldd	r20, Z+6	; 0x06
    3ede:	57 81       	ldd	r21, Z+7	; 0x07
    3ee0:	24 81       	ldd	r18, Z+4	; 0x04
    3ee2:	35 81       	ldd	r19, Z+5	; 0x05
    3ee4:	42 17       	cp	r20, r18
    3ee6:	53 07       	cpc	r21, r19
    3ee8:	44 f4       	brge	.+16     	; 0x3efa <fputc+0x38>
    3eea:	a0 81       	ld	r26, Z
    3eec:	b1 81       	ldd	r27, Z+1	; 0x01
    3eee:	9d 01       	movw	r18, r26
    3ef0:	2f 5f       	subi	r18, 0xFF	; 255
    3ef2:	3f 4f       	sbci	r19, 0xFF	; 255
    3ef4:	31 83       	std	Z+1, r19	; 0x01
    3ef6:	20 83       	st	Z, r18
    3ef8:	8c 93       	st	X, r24
    3efa:	26 81       	ldd	r18, Z+6	; 0x06
    3efc:	37 81       	ldd	r19, Z+7	; 0x07
    3efe:	2f 5f       	subi	r18, 0xFF	; 255
    3f00:	3f 4f       	sbci	r19, 0xFF	; 255
    3f02:	37 83       	std	Z+7, r19	; 0x07
    3f04:	26 83       	std	Z+6, r18	; 0x06
    3f06:	14 c0       	rjmp	.+40     	; 0x3f30 <fputc+0x6e>
    3f08:	8b 01       	movw	r16, r22
    3f0a:	ec 01       	movw	r28, r24
    3f0c:	fb 01       	movw	r30, r22
    3f0e:	00 84       	ldd	r0, Z+8	; 0x08
    3f10:	f1 85       	ldd	r31, Z+9	; 0x09
    3f12:	e0 2d       	mov	r30, r0
    3f14:	19 95       	eicall
    3f16:	89 2b       	or	r24, r25
    3f18:	e1 f6       	brne	.-72     	; 0x3ed2 <fputc+0x10>
    3f1a:	d8 01       	movw	r26, r16
    3f1c:	16 96       	adiw	r26, 0x06	; 6
    3f1e:	8d 91       	ld	r24, X+
    3f20:	9c 91       	ld	r25, X
    3f22:	17 97       	sbiw	r26, 0x07	; 7
    3f24:	01 96       	adiw	r24, 0x01	; 1
    3f26:	17 96       	adiw	r26, 0x07	; 7
    3f28:	9c 93       	st	X, r25
    3f2a:	8e 93       	st	-X, r24
    3f2c:	16 97       	sbiw	r26, 0x06	; 6
    3f2e:	ce 01       	movw	r24, r28
    3f30:	df 91       	pop	r29
    3f32:	cf 91       	pop	r28
    3f34:	1f 91       	pop	r17
    3f36:	0f 91       	pop	r16
    3f38:	08 95       	ret

00003f3a <__ultoa_invert>:
    3f3a:	fa 01       	movw	r30, r20
    3f3c:	aa 27       	eor	r26, r26
    3f3e:	28 30       	cpi	r18, 0x08	; 8
    3f40:	51 f1       	breq	.+84     	; 0x3f96 <__ultoa_invert+0x5c>
    3f42:	20 31       	cpi	r18, 0x10	; 16
    3f44:	81 f1       	breq	.+96     	; 0x3fa6 <__ultoa_invert+0x6c>
    3f46:	e8 94       	clt
    3f48:	6f 93       	push	r22
    3f4a:	6e 7f       	andi	r22, 0xFE	; 254
    3f4c:	6e 5f       	subi	r22, 0xFE	; 254
    3f4e:	7f 4f       	sbci	r23, 0xFF	; 255
    3f50:	8f 4f       	sbci	r24, 0xFF	; 255
    3f52:	9f 4f       	sbci	r25, 0xFF	; 255
    3f54:	af 4f       	sbci	r26, 0xFF	; 255
    3f56:	b1 e0       	ldi	r27, 0x01	; 1
    3f58:	3e d0       	rcall	.+124    	; 0x3fd6 <__ultoa_invert+0x9c>
    3f5a:	b4 e0       	ldi	r27, 0x04	; 4
    3f5c:	3c d0       	rcall	.+120    	; 0x3fd6 <__ultoa_invert+0x9c>
    3f5e:	67 0f       	add	r22, r23
    3f60:	78 1f       	adc	r23, r24
    3f62:	89 1f       	adc	r24, r25
    3f64:	9a 1f       	adc	r25, r26
    3f66:	a1 1d       	adc	r26, r1
    3f68:	68 0f       	add	r22, r24
    3f6a:	79 1f       	adc	r23, r25
    3f6c:	8a 1f       	adc	r24, r26
    3f6e:	91 1d       	adc	r25, r1
    3f70:	a1 1d       	adc	r26, r1
    3f72:	6a 0f       	add	r22, r26
    3f74:	71 1d       	adc	r23, r1
    3f76:	81 1d       	adc	r24, r1
    3f78:	91 1d       	adc	r25, r1
    3f7a:	a1 1d       	adc	r26, r1
    3f7c:	20 d0       	rcall	.+64     	; 0x3fbe <__ultoa_invert+0x84>
    3f7e:	09 f4       	brne	.+2      	; 0x3f82 <__ultoa_invert+0x48>
    3f80:	68 94       	set
    3f82:	3f 91       	pop	r19
    3f84:	2a e0       	ldi	r18, 0x0A	; 10
    3f86:	26 9f       	mul	r18, r22
    3f88:	11 24       	eor	r1, r1
    3f8a:	30 19       	sub	r19, r0
    3f8c:	30 5d       	subi	r19, 0xD0	; 208
    3f8e:	31 93       	st	Z+, r19
    3f90:	de f6       	brtc	.-74     	; 0x3f48 <__ultoa_invert+0xe>
    3f92:	cf 01       	movw	r24, r30
    3f94:	08 95       	ret
    3f96:	46 2f       	mov	r20, r22
    3f98:	47 70       	andi	r20, 0x07	; 7
    3f9a:	40 5d       	subi	r20, 0xD0	; 208
    3f9c:	41 93       	st	Z+, r20
    3f9e:	b3 e0       	ldi	r27, 0x03	; 3
    3fa0:	0f d0       	rcall	.+30     	; 0x3fc0 <__ultoa_invert+0x86>
    3fa2:	c9 f7       	brne	.-14     	; 0x3f96 <__ultoa_invert+0x5c>
    3fa4:	f6 cf       	rjmp	.-20     	; 0x3f92 <__ultoa_invert+0x58>
    3fa6:	46 2f       	mov	r20, r22
    3fa8:	4f 70       	andi	r20, 0x0F	; 15
    3faa:	40 5d       	subi	r20, 0xD0	; 208
    3fac:	4a 33       	cpi	r20, 0x3A	; 58
    3fae:	18 f0       	brcs	.+6      	; 0x3fb6 <__ultoa_invert+0x7c>
    3fb0:	49 5d       	subi	r20, 0xD9	; 217
    3fb2:	31 fd       	sbrc	r19, 1
    3fb4:	40 52       	subi	r20, 0x20	; 32
    3fb6:	41 93       	st	Z+, r20
    3fb8:	02 d0       	rcall	.+4      	; 0x3fbe <__ultoa_invert+0x84>
    3fba:	a9 f7       	brne	.-22     	; 0x3fa6 <__ultoa_invert+0x6c>
    3fbc:	ea cf       	rjmp	.-44     	; 0x3f92 <__ultoa_invert+0x58>
    3fbe:	b4 e0       	ldi	r27, 0x04	; 4
    3fc0:	a6 95       	lsr	r26
    3fc2:	97 95       	ror	r25
    3fc4:	87 95       	ror	r24
    3fc6:	77 95       	ror	r23
    3fc8:	67 95       	ror	r22
    3fca:	ba 95       	dec	r27
    3fcc:	c9 f7       	brne	.-14     	; 0x3fc0 <__ultoa_invert+0x86>
    3fce:	00 97       	sbiw	r24, 0x00	; 0
    3fd0:	61 05       	cpc	r22, r1
    3fd2:	71 05       	cpc	r23, r1
    3fd4:	08 95       	ret
    3fd6:	9b 01       	movw	r18, r22
    3fd8:	ac 01       	movw	r20, r24
    3fda:	0a 2e       	mov	r0, r26
    3fdc:	06 94       	lsr	r0
    3fde:	57 95       	ror	r21
    3fe0:	47 95       	ror	r20
    3fe2:	37 95       	ror	r19
    3fe4:	27 95       	ror	r18
    3fe6:	ba 95       	dec	r27
    3fe8:	c9 f7       	brne	.-14     	; 0x3fdc <__ultoa_invert+0xa2>
    3fea:	62 0f       	add	r22, r18
    3fec:	73 1f       	adc	r23, r19
    3fee:	84 1f       	adc	r24, r20
    3ff0:	95 1f       	adc	r25, r21
    3ff2:	a0 1d       	adc	r26, r0
    3ff4:	08 95       	ret

00003ff6 <_exit>:
    3ff6:	f8 94       	cli

00003ff8 <__stop_program>:
    3ff8:	ff cf       	rjmp	.-2      	; 0x3ff8 <__stop_program>
