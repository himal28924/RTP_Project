
RTP_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000128  00800200  00003f06  00003f9a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003f06  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000ed3  00800328  00800328  000040c2  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000040c2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004120  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000006f8  00000000  00000000  00004160  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00008822  00000000  00000000  00004858  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002406  00000000  00000000  0000d07a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000047b4  00000000  00000000  0000f480  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000186c  00000000  00000000  00013c34  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002ab3  00000000  00000000  000154a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00007a2f  00000000  00000000  00017f53  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000006a8  00000000  00000000  0001f982  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	94 c0       	rjmp	.+296    	; 0x12a <__ctors_end>
       2:	00 00       	nop
       4:	b3 c0       	rjmp	.+358    	; 0x16c <__bad_interrupt>
       6:	00 00       	nop
       8:	b1 c0       	rjmp	.+354    	; 0x16c <__bad_interrupt>
       a:	00 00       	nop
       c:	af c0       	rjmp	.+350    	; 0x16c <__bad_interrupt>
       e:	00 00       	nop
      10:	ad c0       	rjmp	.+346    	; 0x16c <__bad_interrupt>
      12:	00 00       	nop
      14:	ab c0       	rjmp	.+342    	; 0x16c <__bad_interrupt>
      16:	00 00       	nop
      18:	a9 c0       	rjmp	.+338    	; 0x16c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	a7 c0       	rjmp	.+334    	; 0x16c <__bad_interrupt>
      1e:	00 00       	nop
      20:	a5 c0       	rjmp	.+330    	; 0x16c <__bad_interrupt>
      22:	00 00       	nop
      24:	a3 c0       	rjmp	.+326    	; 0x16c <__bad_interrupt>
      26:	00 00       	nop
      28:	a1 c0       	rjmp	.+322    	; 0x16c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	9f c0       	rjmp	.+318    	; 0x16c <__bad_interrupt>
      2e:	00 00       	nop
      30:	35 c5       	rjmp	.+2666   	; 0xa9c <__vector_12>
      32:	00 00       	nop
      34:	9b c0       	rjmp	.+310    	; 0x16c <__bad_interrupt>
      36:	00 00       	nop
      38:	99 c0       	rjmp	.+306    	; 0x16c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	97 c0       	rjmp	.+302    	; 0x16c <__bad_interrupt>
      3e:	00 00       	nop
      40:	95 c0       	rjmp	.+298    	; 0x16c <__bad_interrupt>
      42:	00 00       	nop
      44:	93 c0       	rjmp	.+294    	; 0x16c <__bad_interrupt>
      46:	00 00       	nop
      48:	91 c0       	rjmp	.+290    	; 0x16c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	8f c0       	rjmp	.+286    	; 0x16c <__bad_interrupt>
      4e:	00 00       	nop
      50:	8d c0       	rjmp	.+282    	; 0x16c <__bad_interrupt>
      52:	00 00       	nop
      54:	8b c0       	rjmp	.+278    	; 0x16c <__bad_interrupt>
      56:	00 00       	nop
      58:	89 c0       	rjmp	.+274    	; 0x16c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	87 c0       	rjmp	.+270    	; 0x16c <__bad_interrupt>
      5e:	00 00       	nop
      60:	85 c0       	rjmp	.+266    	; 0x16c <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 02 17 	jmp	0x2e04	; 0x2e04 <__vector_25>
      68:	0c 94 54 17 	jmp	0x2ea8	; 0x2ea8 <__vector_26>
      6c:	7f c0       	rjmp	.+254    	; 0x16c <__bad_interrupt>
      6e:	00 00       	nop
      70:	7d c0       	rjmp	.+250    	; 0x16c <__bad_interrupt>
      72:	00 00       	nop
      74:	7b c0       	rjmp	.+246    	; 0x16c <__bad_interrupt>
      76:	00 00       	nop
      78:	79 c0       	rjmp	.+242    	; 0x16c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	77 c0       	rjmp	.+238    	; 0x16c <__bad_interrupt>
      7e:	00 00       	nop
      80:	75 c0       	rjmp	.+234    	; 0x16c <__bad_interrupt>
      82:	00 00       	nop
      84:	73 c0       	rjmp	.+230    	; 0x16c <__bad_interrupt>
      86:	00 00       	nop
      88:	71 c0       	rjmp	.+226    	; 0x16c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	6f c0       	rjmp	.+222    	; 0x16c <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 98 17 	jmp	0x2f30	; 0x2f30 <__vector_36>
      94:	0c 94 ea 17 	jmp	0x2fd4	; 0x2fd4 <__vector_37>
      98:	69 c0       	rjmp	.+210    	; 0x16c <__bad_interrupt>
      9a:	00 00       	nop
      9c:	67 c0       	rjmp	.+206    	; 0x16c <__bad_interrupt>
      9e:	00 00       	nop
      a0:	65 c0       	rjmp	.+202    	; 0x16c <__bad_interrupt>
      a2:	00 00       	nop
      a4:	63 c0       	rjmp	.+198    	; 0x16c <__bad_interrupt>
      a6:	00 00       	nop
      a8:	61 c0       	rjmp	.+194    	; 0x16c <__bad_interrupt>
      aa:	00 00       	nop
      ac:	5f c0       	rjmp	.+190    	; 0x16c <__bad_interrupt>
      ae:	00 00       	nop
      b0:	5d c0       	rjmp	.+186    	; 0x16c <__bad_interrupt>
      b2:	00 00       	nop
      b4:	5b c0       	rjmp	.+182    	; 0x16c <__bad_interrupt>
      b6:	00 00       	nop
      b8:	59 c0       	rjmp	.+178    	; 0x16c <__bad_interrupt>
      ba:	00 00       	nop
      bc:	57 c0       	rjmp	.+174    	; 0x16c <__bad_interrupt>
      be:	00 00       	nop
      c0:	55 c0       	rjmp	.+170    	; 0x16c <__bad_interrupt>
      c2:	00 00       	nop
      c4:	53 c0       	rjmp	.+166    	; 0x16c <__bad_interrupt>
      c6:	00 00       	nop
      c8:	51 c0       	rjmp	.+162    	; 0x16c <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 2e 18 	jmp	0x305c	; 0x305c <__vector_51>
      d0:	0c 94 80 18 	jmp	0x3100	; 0x3100 <__vector_52>
      d4:	4b c0       	rjmp	.+150    	; 0x16c <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 c4 18 	jmp	0x3188	; 0x3188 <__vector_54>
      dc:	0c 94 16 19 	jmp	0x322c	; 0x322c <__vector_55>
      e0:	45 c0       	rjmp	.+138    	; 0x16c <__bad_interrupt>
      e2:	00 00       	nop
      e4:	88 13       	cpse	r24, r24
      e6:	88 13       	cpse	r24, r24
      e8:	88 13       	cpse	r24, r24
      ea:	bf 13       	cpse	r27, r31
      ec:	c7 13       	cpse	r28, r23
      ee:	dc 13       	cpse	r29, r28
      f0:	88 13       	cpse	r24, r24
      f2:	88 13       	cpse	r24, r24
      f4:	bf 13       	cpse	r27, r31
      f6:	c7 13       	cpse	r28, r23

000000f8 <prvIdleTask>:
    /* Reset the event list item to its normal value - so it can be used with
     * queues and semaphores. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */

    return uxReturn;
}
      f8:	0e 94 1d 0a 	call	0x143a	; 0x143a <prvCheckTasksWaitingTermination>
      fc:	80 91 39 11 	lds	r24, 0x1139	; 0x801139 <pxReadyTasksLists>
     100:	82 30       	cpi	r24, 0x02	; 2
     102:	08 f0       	brcs	.+2      	; 0x106 <prvIdleTask+0xe>
     104:	06 d4       	rcall	.+2060   	; 0x912 <vPortYield>
     106:	0e 94 05 14 	call	0x280a	; 0x280a <vApplicationIdleHook>
     10a:	f6 cf       	rjmp	.-20     	; 0xf8 <prvIdleTask>

0000010c <prvTimerTask>:
                pxNewTimer->ucStatus = 0x00;
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
     10c:	cf 93       	push	r28
     10e:	df 93       	push	r29
     110:	1f 92       	push	r1
     112:	cd b7       	in	r28, 0x3d	; 61
     114:	de b7       	in	r29, 0x3e	; 62
     116:	ce 01       	movw	r24, r28
     118:	01 96       	adiw	r24, 0x01	; 1
     11a:	0e 94 0c 11 	call	0x2218	; 0x2218 <prvGetNextExpireTime>
     11e:	49 81       	ldd	r20, Y+1	; 0x01
     120:	0e 94 ff 12 	call	0x25fe	; 0x25fe <prvProcessTimerOrBlockTask>
     124:	0e 94 52 13 	call	0x26a4	; 0x26a4 <prvProcessReceivedCommands>
     128:	f6 cf       	rjmp	.-20     	; 0x116 <prvTimerTask+0xa>

0000012a <__ctors_end>:
     12a:	11 24       	eor	r1, r1
     12c:	1f be       	out	0x3f, r1	; 63
     12e:	cf ef       	ldi	r28, 0xFF	; 255
     130:	d1 e2       	ldi	r29, 0x21	; 33
     132:	de bf       	out	0x3e, r29	; 62
     134:	cd bf       	out	0x3d, r28	; 61
     136:	00 e0       	ldi	r16, 0x00	; 0
     138:	0c bf       	out	0x3c, r16	; 60

0000013a <__do_copy_data>:
     13a:	13 e0       	ldi	r17, 0x03	; 3
     13c:	a0 e0       	ldi	r26, 0x00	; 0
     13e:	b2 e0       	ldi	r27, 0x02	; 2
     140:	e6 e0       	ldi	r30, 0x06	; 6
     142:	ff e3       	ldi	r31, 0x3F	; 63
     144:	00 e0       	ldi	r16, 0x00	; 0
     146:	0b bf       	out	0x3b, r16	; 59
     148:	02 c0       	rjmp	.+4      	; 0x14e <__do_copy_data+0x14>
     14a:	07 90       	elpm	r0, Z+
     14c:	0d 92       	st	X+, r0
     14e:	a8 32       	cpi	r26, 0x28	; 40
     150:	b1 07       	cpc	r27, r17
     152:	d9 f7       	brne	.-10     	; 0x14a <__do_copy_data+0x10>

00000154 <__do_clear_bss>:
     154:	21 e1       	ldi	r18, 0x11	; 17
     156:	a8 e2       	ldi	r26, 0x28	; 40
     158:	b3 e0       	ldi	r27, 0x03	; 3
     15a:	01 c0       	rjmp	.+2      	; 0x15e <.do_clear_bss_start>

0000015c <.do_clear_bss_loop>:
     15c:	1d 92       	st	X+, r1

0000015e <.do_clear_bss_start>:
     15e:	ab 3f       	cpi	r26, 0xFB	; 251
     160:	b2 07       	cpc	r27, r18
     162:	e1 f7       	brne	.-8      	; 0x15c <.do_clear_bss_loop>
     164:	0e 94 3d 14 	call	0x287a	; 0x287a <main>
     168:	0c 94 81 1f 	jmp	0x3f02	; 0x3f02 <_exit>

0000016c <__bad_interrupt>:
     16c:	49 cf       	rjmp	.-366    	; 0x0 <__vectors>

0000016e <distanceMeasurementFrontTask>:

// Implementations of distanceMeasurementTask and obstacleDetectionTask...

void distanceMeasurementFrontTask(void *pvParameters)
{
	printf("Distance measurement task ");
     16e:	8d e1       	ldi	r24, 0x1D	; 29
     170:	92 e0       	ldi	r25, 0x02	; 2
     172:	9f 93       	push	r25
     174:	8f 93       	push	r24
     176:	0e 94 91 1c 	call	0x3922	; 0x3922 <printf>
	// In every task before loop:
	#if (configUSE_APPLICATION_TASK_TAG == 1)
	// Set taskTag
	vTaskSetApplicationTaskTag(NULL, (void *)5 /*task id*/);
     17a:	65 e0       	ldi	r22, 0x05	; 5
     17c:	70 e0       	ldi	r23, 0x00	; 0
     17e:	80 e0       	ldi	r24, 0x00	; 0
     180:	90 e0       	ldi	r25, 0x00	; 0
     182:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <vTaskSetApplicationTaskTag>
     186:	0f 90       	pop	r0
     188:	0f 90       	pop	r0

	const TickType_t xDelay = 1000 / portTICK_PERIOD_MS; // Delay for 500 ms

	while (1)
	{
		vTaskDelay(1000 / portTICK_PERIOD_MS);
     18a:	6e e3       	ldi	r22, 0x3E	; 62
     18c:	70 e0       	ldi	r23, 0x00	; 0
     18e:	80 e0       	ldi	r24, 0x00	; 0
     190:	90 e0       	ldi	r25, 0x00	; 0
     192:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <vTaskDelay>

		uint16_t distance = hc_sr04_takeMeasurement(true);
     196:	81 e0       	ldi	r24, 0x01	; 1
     198:	fe d0       	rcall	.+508    	; 0x396 <hc_sr04_takeMeasurement>
     19a:	ec 01       	movw	r28, r24

		// Acquire the semaphore before updating the shared variable
		if (xSemaphoreTake(xFrontDistanceSemaphore, portMAX_DELAY) == pdTRUE)
     19c:	4f ef       	ldi	r20, 0xFF	; 255
     19e:	5f ef       	ldi	r21, 0xFF	; 255
     1a0:	ba 01       	movw	r22, r20
     1a2:	80 91 ef 11 	lds	r24, 0x11EF	; 0x8011ef <xFrontDistanceSemaphore>
     1a6:	90 91 f0 11 	lds	r25, 0x11F0	; 0x8011f0 <xFrontDistanceSemaphore+0x1>
     1aa:	3a d7       	rcall	.+3700   	; 0x1020 <xQueueSemaphoreTake>
     1ac:	81 30       	cpi	r24, 0x01	; 1
     1ae:	79 f4       	brne	.+30     	; 0x1ce <distanceMeasurementFrontTask+0x60>
		{
			frontMeasuredDistance = distance;
     1b0:	d0 93 2b 03 	sts	0x032B, r29	; 0x80032b <frontMeasuredDistance+0x1>
     1b4:	c0 93 2a 03 	sts	0x032A, r28	; 0x80032a <frontMeasuredDistance>
			xSemaphoreGive(xFrontDistanceSemaphore); // Release the semaphore
     1b8:	00 e0       	ldi	r16, 0x00	; 0
     1ba:	20 e0       	ldi	r18, 0x00	; 0
     1bc:	30 e0       	ldi	r19, 0x00	; 0
     1be:	a9 01       	movw	r20, r18
     1c0:	60 e0       	ldi	r22, 0x00	; 0
     1c2:	70 e0       	ldi	r23, 0x00	; 0
     1c4:	80 91 ef 11 	lds	r24, 0x11EF	; 0x8011ef <xFrontDistanceSemaphore>
     1c8:	90 91 f0 11 	lds	r25, 0x11F0	; 0x8011f0 <xFrontDistanceSemaphore+0x1>
     1cc:	b9 d5       	rcall	.+2930   	; 0xd40 <xQueueGenericSend>
		}

		vTaskDelay(xDelay); // Wait for the next cycle
     1ce:	6e e3       	ldi	r22, 0x3E	; 62
     1d0:	70 e0       	ldi	r23, 0x00	; 0
     1d2:	80 e0       	ldi	r24, 0x00	; 0
     1d4:	90 e0       	ldi	r25, 0x00	; 0
     1d6:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <vTaskDelay>
	}
     1da:	d7 cf       	rjmp	.-82     	; 0x18a <distanceMeasurementFrontTask+0x1c>

000001dc <distanceMeasurementBackTask>:
	}
}

void distanceMeasurementBackTask(void *pvParameters)
{
	printf("Distance measurement back task ");
     1dc:	88 e3       	ldi	r24, 0x38	; 56
     1de:	92 e0       	ldi	r25, 0x02	; 2
     1e0:	9f 93       	push	r25
     1e2:	8f 93       	push	r24
     1e4:	0e 94 91 1c 	call	0x3922	; 0x3922 <printf>
	// In every task before loop:
	#if (configUSE_APPLICATION_TASK_TAG == 1)
	// Set taskTag
	vTaskSetApplicationTaskTag(NULL, (void *)3 /*task id*/);
     1e8:	63 e0       	ldi	r22, 0x03	; 3
     1ea:	70 e0       	ldi	r23, 0x00	; 0
     1ec:	80 e0       	ldi	r24, 0x00	; 0
     1ee:	90 e0       	ldi	r25, 0x00	; 0
     1f0:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <vTaskSetApplicationTaskTag>
     1f4:	0f 90       	pop	r0
     1f6:	0f 90       	pop	r0

	const TickType_t xDelay = 1000 / portTICK_PERIOD_MS; // Delay for 500 ms

	while (1)
	{
		vTaskDelay(1000 / portTICK_PERIOD_MS);
     1f8:	6e e3       	ldi	r22, 0x3E	; 62
     1fa:	70 e0       	ldi	r23, 0x00	; 0
     1fc:	80 e0       	ldi	r24, 0x00	; 0
     1fe:	90 e0       	ldi	r25, 0x00	; 0
     200:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <vTaskDelay>

		uint16_t distance = hc_sr04_takeMeasurement(false);
     204:	80 e0       	ldi	r24, 0x00	; 0
     206:	c7 d0       	rcall	.+398    	; 0x396 <hc_sr04_takeMeasurement>
     208:	ec 01       	movw	r28, r24

		// Acquire the semaphore before updating the shared variable
		if (xSemaphoreTake(xBackDistanceSemaphore, portMAX_DELAY) == pdTRUE)
     20a:	4f ef       	ldi	r20, 0xFF	; 255
     20c:	5f ef       	ldi	r21, 0xFF	; 255
     20e:	ba 01       	movw	r22, r20
     210:	80 91 ed 11 	lds	r24, 0x11ED	; 0x8011ed <xBackDistanceSemaphore>
     214:	90 91 ee 11 	lds	r25, 0x11EE	; 0x8011ee <xBackDistanceSemaphore+0x1>
     218:	03 d7       	rcall	.+3590   	; 0x1020 <xQueueSemaphoreTake>
     21a:	81 30       	cpi	r24, 0x01	; 1
     21c:	d9 f4       	brne	.+54     	; 0x254 <distanceMeasurementBackTask+0x78>
		{
			backMeasuredDistance = distance;
     21e:	d0 93 29 03 	sts	0x0329, r29	; 0x800329 <__data_end+0x1>
     222:	c0 93 28 03 	sts	0x0328, r28	; 0x800328 <__data_end>
			printf("Measurement!! ,%d \n" , distance);
     226:	df 93       	push	r29
     228:	cf 93       	push	r28
     22a:	88 e5       	ldi	r24, 0x58	; 88
     22c:	92 e0       	ldi	r25, 0x02	; 2
     22e:	9f 93       	push	r25
     230:	8f 93       	push	r24
     232:	0e 94 91 1c 	call	0x3922	; 0x3922 <printf>
			xSemaphoreGive(xBackDistanceSemaphore); // Release the semaphore
     236:	00 e0       	ldi	r16, 0x00	; 0
     238:	20 e0       	ldi	r18, 0x00	; 0
     23a:	30 e0       	ldi	r19, 0x00	; 0
     23c:	a9 01       	movw	r20, r18
     23e:	60 e0       	ldi	r22, 0x00	; 0
     240:	70 e0       	ldi	r23, 0x00	; 0
     242:	80 91 ed 11 	lds	r24, 0x11ED	; 0x8011ed <xBackDistanceSemaphore>
     246:	90 91 ee 11 	lds	r25, 0x11EE	; 0x8011ee <xBackDistanceSemaphore+0x1>
     24a:	7a d5       	rcall	.+2804   	; 0xd40 <xQueueGenericSend>
     24c:	0f 90       	pop	r0
     24e:	0f 90       	pop	r0
     250:	0f 90       	pop	r0
     252:	0f 90       	pop	r0
		}

		vTaskDelay(xDelay); // Wait for the next cycle
     254:	6e e3       	ldi	r22, 0x3E	; 62
     256:	70 e0       	ldi	r23, 0x00	; 0
     258:	80 e0       	ldi	r24, 0x00	; 0
     25a:	90 e0       	ldi	r25, 0x00	; 0
     25c:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <vTaskDelay>
	}
     260:	cb cf       	rjmp	.-106    	; 0x1f8 <distanceMeasurementBackTask+0x1c>

00000262 <create_all_application_tasks>:
SemaphoreHandle_t xFrontDistanceSemaphore;
SemaphoreHandle_t xBackDistanceSemaphore;


void create_all_application_tasks(void)
{
     262:	ef 92       	push	r14
     264:	ff 92       	push	r15
     266:	0f 93       	push	r16
	
    // Initialize semaphores
    xFrontDistanceSemaphore = xSemaphoreCreateMutex();
     268:	81 e0       	ldi	r24, 0x01	; 1
     26a:	09 d6       	rcall	.+3090   	; 0xe7e <xQueueCreateMutex>
     26c:	90 93 f0 11 	sts	0x11F0, r25	; 0x8011f0 <xFrontDistanceSemaphore+0x1>
     270:	80 93 ef 11 	sts	0x11EF, r24	; 0x8011ef <xFrontDistanceSemaphore>
    xBackDistanceSemaphore = xSemaphoreCreateMutex();
     274:	81 e0       	ldi	r24, 0x01	; 1
     276:	03 d6       	rcall	.+3078   	; 0xe7e <xQueueCreateMutex>
     278:	90 93 ee 11 	sts	0x11EE, r25	; 0x8011ee <xBackDistanceSemaphore+0x1>
     27c:	80 93 ed 11 	sts	0x11ED, r24	; 0x8011ed <xBackDistanceSemaphore>

    // Create front distance measurement task
    xTaskCreate(
     280:	e1 2c       	mov	r14, r1
     282:	f1 2c       	mov	r15, r1
     284:	03 e0       	ldi	r16, 0x03	; 3
     286:	20 e0       	ldi	r18, 0x00	; 0
     288:	30 e0       	ldi	r19, 0x00	; 0
     28a:	40 ec       	ldi	r20, 0xC0	; 192
     28c:	50 e0       	ldi	r21, 0x00	; 0
     28e:	6c e6       	ldi	r22, 0x6C	; 108
     290:	72 e0       	ldi	r23, 0x02	; 2
     292:	87 eb       	ldi	r24, 0xB7	; 183
     294:	90 e0       	ldi	r25, 0x00	; 0
     296:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <xTaskCreate>
    NULL,
    3, // Priority
    NULL);

    // Create back distance measurement task
    xTaskCreate(
     29a:	20 e0       	ldi	r18, 0x00	; 0
     29c:	30 e0       	ldi	r19, 0x00	; 0
     29e:	40 ec       	ldi	r20, 0xC0	; 192
     2a0:	50 e0       	ldi	r21, 0x00	; 0
     2a2:	6e e7       	ldi	r22, 0x7E	; 126
     2a4:	72 e0       	ldi	r23, 0x02	; 2
     2a6:	8e ee       	ldi	r24, 0xEE	; 238
     2a8:	90 e0       	ldi	r25, 0x00	; 0
     2aa:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <xTaskCreate>
    NULL,
    3, // Priority
    NULL);

    // Create obstacle detection task
    xTaskCreate(
     2ae:	01 e0       	ldi	r16, 0x01	; 1
     2b0:	20 e0       	ldi	r18, 0x00	; 0
     2b2:	30 e0       	ldi	r19, 0x00	; 0
     2b4:	40 ec       	ldi	r20, 0xC0	; 192
     2b6:	50 e0       	ldi	r21, 0x00	; 0
     2b8:	6f e8       	ldi	r22, 0x8F	; 143
     2ba:	72 e0       	ldi	r23, 0x02	; 2
     2bc:	8e e6       	ldi	r24, 0x6E	; 110
     2be:	91 e0       	ldi	r25, 0x01	; 1
     2c0:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <xTaskCreate>
    "ObstacleDetect",
    configMINIMAL_STACK_SIZE,
    NULL,
    1, // Priority
    NULL);
}
     2c4:	0f 91       	pop	r16
     2c6:	ff 90       	pop	r15
     2c8:	ef 90       	pop	r14
     2ca:	08 95       	ret

000002cc <turnOnLight>:

// Function to turn on the light
void turnOnLight(void)
{
	// Set LIGHT_PIN high
	PORTC |= (1 << LIGHT_PIN);
     2cc:	88 b1       	in	r24, 0x08	; 8
     2ce:	81 60       	ori	r24, 0x01	; 1
     2d0:	88 b9       	out	0x08, r24	; 8
     2d2:	08 95       	ret

000002d4 <turnOffLight>:

// Function to turn off the light
void turnOffLight(void)
{
	// Set LIGHT_PIN low
	PORTC &= ~(1 << LIGHT_PIN);
     2d4:	88 b1       	in	r24, 0x08	; 8
     2d6:	8e 7f       	andi	r24, 0xFE	; 254
     2d8:	88 b9       	out	0x08, r24	; 8
     2da:	08 95       	ret

000002dc <obstacleDetectionTask>:
	}
}

void obstacleDetectionTask(void *pvParameters)
{
			printf("Obstacle detection task");
     2dc:	8e e9       	ldi	r24, 0x9E	; 158
     2de:	92 e0       	ldi	r25, 0x02	; 2
     2e0:	9f 93       	push	r25
     2e2:	8f 93       	push	r24
     2e4:	0e 94 91 1c 	call	0x3922	; 0x3922 <printf>

	// In every task before loop:
	#if (configUSE_APPLICATION_TASK_TAG == 1)
	// Set taskTag
	vTaskSetApplicationTaskTag(NULL, (void *)1 /*task id*/);
     2e8:	61 e0       	ldi	r22, 0x01	; 1
     2ea:	70 e0       	ldi	r23, 0x00	; 0
     2ec:	80 e0       	ldi	r24, 0x00	; 0
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <vTaskSetApplicationTaskTag>
     2f4:	0f 90       	pop	r0
     2f6:	0f 90       	pop	r0
	uint16_t distance;

	while (1)
	{
		// Acquire the semaphore before reading the shared variable
		if (xSemaphoreTake(xFrontDistanceSemaphore, portMAX_DELAY) == pdTRUE)
     2f8:	4f ef       	ldi	r20, 0xFF	; 255
     2fa:	5f ef       	ldi	r21, 0xFF	; 255
     2fc:	ba 01       	movw	r22, r20
     2fe:	80 91 ef 11 	lds	r24, 0x11EF	; 0x8011ef <xFrontDistanceSemaphore>
     302:	90 91 f0 11 	lds	r25, 0x11F0	; 0x8011f0 <xFrontDistanceSemaphore+0x1>
     306:	8c d6       	rcall	.+3352   	; 0x1020 <xQueueSemaphoreTake>
     308:	81 30       	cpi	r24, 0x01	; 1
     30a:	79 f4       	brne	.+30     	; 0x32a <obstacleDetectionTask+0x4e>
		{
			distance = frontMeasuredDistance;
     30c:	c0 91 2a 03 	lds	r28, 0x032A	; 0x80032a <frontMeasuredDistance>
     310:	d0 91 2b 03 	lds	r29, 0x032B	; 0x80032b <frontMeasuredDistance+0x1>
			xSemaphoreGive(xFrontDistanceSemaphore); // Release the semaphore
     314:	00 e0       	ldi	r16, 0x00	; 0
     316:	20 e0       	ldi	r18, 0x00	; 0
     318:	30 e0       	ldi	r19, 0x00	; 0
     31a:	a9 01       	movw	r20, r18
     31c:	60 e0       	ldi	r22, 0x00	; 0
     31e:	70 e0       	ldi	r23, 0x00	; 0
     320:	80 91 ef 11 	lds	r24, 0x11EF	; 0x8011ef <xFrontDistanceSemaphore>
     324:	90 91 f0 11 	lds	r25, 0x11F0	; 0x8011f0 <xFrontDistanceSemaphore+0x1>
     328:	0b d5       	rcall	.+2582   	; 0xd40 <xQueueGenericSend>
		}
		// Check if distance is below a certain threshold
		if (distance < 500) // Assuming 20 cm as a constraint
     32a:	c4 3f       	cpi	r28, 0xF4	; 244
     32c:	81 e0       	ldi	r24, 0x01	; 1
     32e:	d8 07       	cpc	r29, r24
     330:	70 f4       	brcc	.+28     	; 0x34e <obstacleDetectionTask+0x72>
		{
			printf("Obstacle too close! ,%d \n" , distance);
     332:	df 93       	push	r29
     334:	cf 93       	push	r28
     336:	86 eb       	ldi	r24, 0xB6	; 182
     338:	92 e0       	ldi	r25, 0x02	; 2
     33a:	9f 93       	push	r25
     33c:	8f 93       	push	r24
     33e:	0e 94 91 1c 	call	0x3922	; 0x3922 <printf>
			turnOnLight(); // Turn on the light
     342:	c4 df       	rcall	.-120    	; 0x2cc <turnOnLight>
     344:	0f 90       	pop	r0
     346:	0f 90       	pop	r0
     348:	0f 90       	pop	r0
     34a:	0f 90       	pop	r0
     34c:	0d c0       	rjmp	.+26     	; 0x368 <obstacleDetectionTask+0x8c>

		}
		else{
			printf("Obstacle is far away from us ,%d \n" , distance);
     34e:	df 93       	push	r29
     350:	cf 93       	push	r28
     352:	80 ed       	ldi	r24, 0xD0	; 208
     354:	92 e0       	ldi	r25, 0x02	; 2
     356:	9f 93       	push	r25
     358:	8f 93       	push	r24
     35a:	0e 94 91 1c 	call	0x3922	; 0x3922 <printf>
			turnOffLight();
     35e:	ba df       	rcall	.-140    	; 0x2d4 <turnOffLight>
     360:	0f 90       	pop	r0
     362:	0f 90       	pop	r0
     364:	0f 90       	pop	r0
     366:	0f 90       	pop	r0
		}

		
		vTaskDelay(2000 / portTICK_PERIOD_MS);
     368:	6d e7       	ldi	r22, 0x7D	; 125
     36a:	70 e0       	ldi	r23, 0x00	; 0
     36c:	80 e0       	ldi	r24, 0x00	; 0
     36e:	90 e0       	ldi	r25, 0x00	; 0
     370:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <vTaskDelay>
	}
     374:	c1 cf       	rjmp	.-126    	; 0x2f8 <obstacleDetectionTask+0x1c>

00000376 <hc_sr04_init>:
#define P_EchoFront PC4
#define P_EchoBack PC3
void hc_sr04_init()
{
    //Vcc
    DDR_Vcc|=(1 << P_Vcc);
     376:	87 b1       	in	r24, 0x07	; 7
     378:	81 60       	ori	r24, 0x01	; 1
     37a:	87 b9       	out	0x07, r24	; 7
    PORT_Vcc|=(1 << P_Vcc);
     37c:	88 b1       	in	r24, 0x08	; 8
     37e:	81 60       	ori	r24, 0x01	; 1
     380:	88 b9       	out	0x08, r24	; 8

    //GND
    DDR_Gnd|=(1 << P_Gnd);
     382:	87 b1       	in	r24, 0x07	; 7
     384:	80 64       	ori	r24, 0x40	; 64
     386:	87 b9       	out	0x07, r24	; 7

    //Trigger
    DDR_Trig|=(1 << P_TrigFront);
     388:	87 b1       	in	r24, 0x07	; 7
     38a:	84 60       	ori	r24, 0x04	; 4
     38c:	87 b9       	out	0x07, r24	; 7
	DDR_Trig|=(1<< P_TrigBack);
     38e:	87 b1       	in	r24, 0x07	; 7
     390:	82 60       	ori	r24, 0x02	; 2
     392:	87 b9       	out	0x07, r24	; 7
     394:	08 95       	ret

00000396 <hc_sr04_takeMeasurement>:
//     */
//     cnt = cnt * 343UL / 125UL;
// 
//     return cnt;
// }
uint16_t hc_sr04_takeMeasurement(bool isFrontSensor) {
     396:	0f 93       	push	r16
     398:	1f 93       	push	r17
     39a:	cf 93       	push	r28
     39c:	df 93       	push	r29
	uint16_t cnt = 0;
	uint8_t trigPin = isFrontSensor ? P_TrigFront : P_TrigBack; // Choose the correct pin based on the sensor
     39e:	88 23       	and	r24, r24
     3a0:	11 f0       	breq	.+4      	; 0x3a6 <hc_sr04_takeMeasurement+0x10>
     3a2:	32 e0       	ldi	r19, 0x02	; 2
     3a4:	01 c0       	rjmp	.+2      	; 0x3a8 <hc_sr04_takeMeasurement+0x12>
     3a6:	31 e0       	ldi	r19, 0x01	; 1
	uint8_t echoPin = isFrontSensor ? P_EchoFront : P_EchoBack; // Choose the correct pin based on the sensor
     3a8:	88 23       	and	r24, r24
     3aa:	11 f0       	breq	.+4      	; 0x3b0 <hc_sr04_takeMeasurement+0x1a>
     3ac:	04 e0       	ldi	r16, 0x04	; 4
     3ae:	01 c0       	rjmp	.+2      	; 0x3b2 <hc_sr04_takeMeasurement+0x1c>
     3b0:	03 e0       	ldi	r16, 0x03	; 3
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3b2:	25 e3       	ldi	r18, 0x35	; 53
     3b4:	2a 95       	dec	r18
     3b6:	f1 f7       	brne	.-4      	; 0x3b4 <hc_sr04_takeMeasurement+0x1e>
     3b8:	00 00       	nop

	_delay_us(10);
	PORT_trig |= (1 << trigPin); // Trigger the measurement
     3ba:	28 b1       	in	r18, 0x08	; 8
     3bc:	81 e0       	ldi	r24, 0x01	; 1
     3be:	90 e0       	ldi	r25, 0x00	; 0
     3c0:	02 c0       	rjmp	.+4      	; 0x3c6 <hc_sr04_takeMeasurement+0x30>
     3c2:	88 0f       	add	r24, r24
     3c4:	99 1f       	adc	r25, r25
     3c6:	3a 95       	dec	r19
     3c8:	e2 f7       	brpl	.-8      	; 0x3c2 <hc_sr04_takeMeasurement+0x2c>
     3ca:	92 2f       	mov	r25, r18
     3cc:	98 2b       	or	r25, r24
     3ce:	98 b9       	out	0x08, r25	; 8
     3d0:	25 e3       	ldi	r18, 0x35	; 53
     3d2:	2a 95       	dec	r18
     3d4:	f1 f7       	brne	.-4      	; 0x3d2 <hc_sr04_takeMeasurement+0x3c>
     3d6:	00 00       	nop
	_delay_us(10);
	PORT_trig &= ~(1 << trigPin);
     3d8:	98 b1       	in	r25, 0x08	; 8
     3da:	80 95       	com	r24
     3dc:	89 23       	and	r24, r25
     3de:	88 b9       	out	0x08, r24	; 8

	uint8_t TCCR1B_state = TCCR1B; // Save the current state of TCCR1B
     3e0:	e1 e8       	ldi	r30, 0x81	; 129
     3e2:	f0 e0       	ldi	r31, 0x00	; 0
     3e4:	10 81       	ld	r17, Z

	// Set the Timer/Counter1 prescaler to 256
	TCCR1B = (1 << CS12);
     3e6:	84 e0       	ldi	r24, 0x04	; 4
     3e8:	80 83       	st	Z, r24
	
	TCNT1 = 0; // Reset the timer
     3ea:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
     3ee:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
	while (!(PIN_Echo & (1 << echoPin))) {
     3f2:	10 c0       	rjmp	.+32     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
		// Check for timeout (100ms)
		if (TCNT1 >= (F_CPU / 256) * 0.1) {
     3f4:	60 91 84 00 	lds	r22, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
     3f8:	70 91 85 00 	lds	r23, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
     3fc:	80 e0       	ldi	r24, 0x00	; 0
     3fe:	90 e0       	ldi	r25, 0x00	; 0
     400:	0e 94 43 14 	call	0x2886	; 0x2886 <__floatunsisf>
     404:	20 e0       	ldi	r18, 0x00	; 0
     406:	30 e5       	ldi	r19, 0x50	; 80
     408:	43 ec       	ldi	r20, 0xC3	; 195
     40a:	55 e4       	ldi	r21, 0x45	; 69
     40c:	0e 94 80 14 	call	0x2900	; 0x2900 <__gesf2>
     410:	88 23       	and	r24, r24
     412:	e4 f5       	brge	.+120    	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>

	// Set the Timer/Counter1 prescaler to 256
	TCCR1B = (1 << CS12);
	
	TCNT1 = 0; // Reset the timer
	while (!(PIN_Echo & (1 << echoPin))) {
     414:	86 b1       	in	r24, 0x06	; 6
     416:	c0 2f       	mov	r28, r16
     418:	90 e0       	ldi	r25, 0x00	; 0
     41a:	00 2e       	mov	r0, r16
     41c:	02 c0       	rjmp	.+4      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
     41e:	95 95       	asr	r25
     420:	87 95       	ror	r24
     422:	0a 94       	dec	r0
     424:	e2 f7       	brpl	.-8      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
     426:	80 ff       	sbrs	r24, 0
     428:	e5 cf       	rjmp	.-54     	; 0x3f4 <hc_sr04_takeMeasurement+0x5e>
			return 0; // Sensor is not working
		}
	}

	// Wait for the echo pin to go high
	TCNT1 = 0; // Reset the timer for the high signal duration
     42a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
     42e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
	while (PIN_Echo & (1 << echoPin)) {
     432:	10 c0       	rjmp	.+32     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
		// Check for timer overflow (24ms)
		if (TCNT1 >= (F_CPU / 256) * 0.024) {
     434:	60 91 84 00 	lds	r22, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
     438:	70 91 85 00 	lds	r23, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
     43c:	80 e0       	ldi	r24, 0x00	; 0
     43e:	90 e0       	ldi	r25, 0x00	; 0
     440:	0e 94 43 14 	call	0x2886	; 0x2886 <__floatunsisf>
     444:	20 e0       	ldi	r18, 0x00	; 0
     446:	30 e8       	ldi	r19, 0x80	; 128
     448:	4b eb       	ldi	r20, 0xBB	; 187
     44a:	54 e4       	ldi	r21, 0x44	; 68
     44c:	0e 94 80 14 	call	0x2900	; 0x2900 <__gesf2>
     450:	88 23       	and	r24, r24
     452:	54 f4       	brge	.+20     	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
		}
	}

	// Wait for the echo pin to go high
	TCNT1 = 0; // Reset the timer for the high signal duration
	while (PIN_Echo & (1 << echoPin)) {
     454:	86 b1       	in	r24, 0x06	; 6
     456:	90 e0       	ldi	r25, 0x00	; 0
     458:	0c 2e       	mov	r0, r28
     45a:	02 c0       	rjmp	.+4      	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
     45c:	95 95       	asr	r25
     45e:	87 95       	ror	r24
     460:	0a 94       	dec	r0
     462:	e2 f7       	brpl	.-8      	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
     464:	80 fd       	sbrc	r24, 0
     466:	e6 cf       	rjmp	.-52     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
		// Check for timer overflow (24ms)
		if (TCNT1 >= (F_CPU / 256) * 0.024) {
			break; // Timer overflowed
		}
	}
	cnt = TCNT1; // Save the duration of the high signal
     468:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
     46c:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>

	TCCR1B = TCCR1B_state; // Restore TCCR1B state
     470:	10 93 81 00 	sts	0x0081, r17	; 0x800081 <__TEXT_REGION_LENGTH__+0x7c0081>

	// Distance calculation based on the duration of the high signal
	cnt = cnt * 343UL / 125UL;
     474:	a7 e5       	ldi	r26, 0x57	; 87
     476:	b1 e0       	ldi	r27, 0x01	; 1
     478:	0e 94 4d 1b 	call	0x369a	; 0x369a <__umulhisi3>
     47c:	2d e7       	ldi	r18, 0x7D	; 125
     47e:	30 e0       	ldi	r19, 0x00	; 0
     480:	40 e0       	ldi	r20, 0x00	; 0
     482:	50 e0       	ldi	r21, 0x00	; 0
     484:	0e 94 23 1b 	call	0x3646	; 0x3646 <__udivmodsi4>

	return cnt;
     488:	c9 01       	movw	r24, r18
     48a:	02 c0       	rjmp	.+4      	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
	
	TCNT1 = 0; // Reset the timer
	while (!(PIN_Echo & (1 << echoPin))) {
		// Check for timeout (100ms)
		if (TCNT1 >= (F_CPU / 256) * 0.1) {
			return 0; // Sensor is not working
     48c:	80 e0       	ldi	r24, 0x00	; 0
     48e:	90 e0       	ldi	r25, 0x00	; 0

	// Distance calculation based on the duration of the high signal
	cnt = cnt * 343UL / 125UL;

	return cnt;
}
     490:	df 91       	pop	r29
     492:	cf 91       	pop	r28
     494:	1f 91       	pop	r17
     496:	0f 91       	pop	r16
     498:	08 95       	ret

0000049a <trace_init>:
	 #if (configUseR2RTrace == 1)
	 #ifdef HAL_DEFS_H_

	 #else
		// Used on VIA MEGA Shield rev. 2.0.0
		DDRK |= _BV(DDK0) | _BV(DDK1) | _BV(DDK2) | _BV(DDK3);
     49a:	e7 e0       	ldi	r30, 0x07	; 7
     49c:	f1 e0       	ldi	r31, 0x01	; 1
     49e:	80 81       	ld	r24, Z
     4a0:	8f 60       	ori	r24, 0x0F	; 15
     4a2:	80 83       	st	Z, r24
     4a4:	08 95       	ret

000004a6 <task_switch_in>:
	void task_switch_in(uint8_t task_no) {
		 #ifdef HAL_DEFS_H_

		 #else
		 // Used on VIA MEGA Shield rev. 2.0.0
		 PORTK &= 0b11110000;
     4a6:	e8 e0       	ldi	r30, 0x08	; 8
     4a8:	f1 e0       	ldi	r31, 0x01	; 1
     4aa:	90 81       	ld	r25, Z
     4ac:	90 7f       	andi	r25, 0xF0	; 240
     4ae:	90 83       	st	Z, r25
		 PORTK |= (task_no & 0b00001111);
     4b0:	90 81       	ld	r25, Z
     4b2:	8f 70       	andi	r24, 0x0F	; 15
     4b4:	98 2b       	or	r25, r24
     4b6:	90 83       	st	Z, r25
     4b8:	08 95       	ret

000004ba <task_switch_out>:
	void task_switch_out(uint8_t task_no) {
		#ifdef HAL_DEFS_H_

		#else
		// Used on VIA MEGA Shield rev. 2.0.0
		PORTK &= 0b11110000;
     4ba:	e8 e0       	ldi	r30, 0x08	; 8
     4bc:	f1 e0       	ldi	r31, 0x01	; 1
     4be:	80 81       	ld	r24, Z
     4c0:	80 7f       	andi	r24, 0xF0	; 240
     4c2:	80 83       	st	Z, r24
     4c4:	08 95       	ret

000004c6 <prvHeapInit>:

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     4c6:	e8 e3       	ldi	r30, 0x38	; 56
     4c8:	f3 e0       	ldi	r31, 0x03	; 3
     4ca:	ac e3       	ldi	r26, 0x3C	; 60
     4cc:	b3 e0       	ldi	r27, 0x03	; 3
     4ce:	b1 83       	std	Z+1, r27	; 0x01
     4d0:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
     4d2:	13 82       	std	Z+3, r1	; 0x03
     4d4:	12 82       	std	Z+2, r1	; 0x02

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
     4d6:	e4 ee       	ldi	r30, 0xE4	; 228
     4d8:	f0 e1       	ldi	r31, 0x10	; 16
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
     4da:	f0 93 37 03 	sts	0x0337, r31	; 0x800337 <pxEnd+0x1>
     4de:	e0 93 36 03 	sts	0x0336, r30	; 0x800336 <pxEnd>
    pxEnd->xBlockSize = 0;
     4e2:	13 82       	std	Z+3, r1	; 0x03
     4e4:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
     4e6:	11 82       	std	Z+1, r1	; 0x01
     4e8:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     4ea:	88 ea       	ldi	r24, 0xA8	; 168
     4ec:	9d e0       	ldi	r25, 0x0D	; 13
     4ee:	13 96       	adiw	r26, 0x03	; 3
     4f0:	9c 93       	st	X, r25
     4f2:	8e 93       	st	-X, r24
     4f4:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     4f6:	ed 93       	st	X+, r30
     4f8:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     4fa:	90 93 33 03 	sts	0x0333, r25	; 0x800333 <xMinimumEverFreeBytesRemaining+0x1>
     4fe:	80 93 32 03 	sts	0x0332, r24	; 0x800332 <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     502:	90 93 35 03 	sts	0x0335, r25	; 0x800335 <xFreeBytesRemaining+0x1>
     506:	80 93 34 03 	sts	0x0334, r24	; 0x800334 <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     50a:	80 e0       	ldi	r24, 0x00	; 0
     50c:	90 e8       	ldi	r25, 0x80	; 128
     50e:	90 93 2d 03 	sts	0x032D, r25	; 0x80032d <xBlockAllocatedBit+0x1>
     512:	80 93 2c 03 	sts	0x032C, r24	; 0x80032c <xBlockAllocatedBit>
     516:	08 95       	ret

00000518 <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
     518:	cf 93       	push	r28
     51a:	df 93       	push	r29
     51c:	ec 01       	movw	r28, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     51e:	a8 e3       	ldi	r26, 0x38	; 56
     520:	b3 e0       	ldi	r27, 0x03	; 3
     522:	01 c0       	rjmp	.+2      	; 0x526 <prvInsertBlockIntoFreeList+0xe>
     524:	df 01       	movw	r26, r30
     526:	ed 91       	ld	r30, X+
     528:	fc 91       	ld	r31, X
     52a:	11 97       	sbiw	r26, 0x01	; 1
     52c:	ec 17       	cp	r30, r28
     52e:	fd 07       	cpc	r31, r29
     530:	c8 f3       	brcs	.-14     	; 0x524 <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     532:	12 96       	adiw	r26, 0x02	; 2
     534:	8d 91       	ld	r24, X+
     536:	9c 91       	ld	r25, X
     538:	13 97       	sbiw	r26, 0x03	; 3
     53a:	9d 01       	movw	r18, r26
     53c:	28 0f       	add	r18, r24
     53e:	39 1f       	adc	r19, r25
     540:	c2 17       	cp	r28, r18
     542:	d3 07       	cpc	r29, r19
     544:	49 f4       	brne	.+18     	; 0x558 <prvInsertBlockIntoFreeList+0x40>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     546:	2a 81       	ldd	r18, Y+2	; 0x02
     548:	3b 81       	ldd	r19, Y+3	; 0x03
     54a:	82 0f       	add	r24, r18
     54c:	93 1f       	adc	r25, r19
     54e:	13 96       	adiw	r26, 0x03	; 3
     550:	9c 93       	st	X, r25
     552:	8e 93       	st	-X, r24
     554:	12 97       	sbiw	r26, 0x02	; 2
        pxBlockToInsert = pxIterator;
     556:	ed 01       	movw	r28, r26

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     558:	8a 81       	ldd	r24, Y+2	; 0x02
     55a:	9b 81       	ldd	r25, Y+3	; 0x03
     55c:	9e 01       	movw	r18, r28
     55e:	28 0f       	add	r18, r24
     560:	39 1f       	adc	r19, r25
     562:	e2 17       	cp	r30, r18
     564:	f3 07       	cpc	r31, r19
     566:	c1 f4       	brne	.+48     	; 0x598 <prvInsertBlockIntoFreeList+0x80>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
     568:	20 91 36 03 	lds	r18, 0x0336	; 0x800336 <pxEnd>
     56c:	30 91 37 03 	lds	r19, 0x0337	; 0x800337 <pxEnd+0x1>
     570:	e2 17       	cp	r30, r18
     572:	f3 07       	cpc	r31, r19
     574:	71 f0       	breq	.+28     	; 0x592 <prvInsertBlockIntoFreeList+0x7a>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     576:	22 81       	ldd	r18, Z+2	; 0x02
     578:	33 81       	ldd	r19, Z+3	; 0x03
     57a:	82 0f       	add	r24, r18
     57c:	93 1f       	adc	r25, r19
     57e:	9b 83       	std	Y+3, r25	; 0x03
     580:	8a 83       	std	Y+2, r24	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     582:	ed 91       	ld	r30, X+
     584:	fc 91       	ld	r31, X
     586:	11 97       	sbiw	r26, 0x01	; 1
     588:	80 81       	ld	r24, Z
     58a:	91 81       	ldd	r25, Z+1	; 0x01
     58c:	99 83       	std	Y+1, r25	; 0x01
     58e:	88 83       	st	Y, r24
     590:	05 c0       	rjmp	.+10     	; 0x59c <prvInsertBlockIntoFreeList+0x84>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
     592:	39 83       	std	Y+1, r19	; 0x01
     594:	28 83       	st	Y, r18
     596:	02 c0       	rjmp	.+4      	; 0x59c <prvInsertBlockIntoFreeList+0x84>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     598:	f9 83       	std	Y+1, r31	; 0x01
     59a:	e8 83       	st	Y, r30

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
     59c:	ca 17       	cp	r28, r26
     59e:	db 07       	cpc	r29, r27
     5a0:	11 f0       	breq	.+4      	; 0x5a6 <prvInsertBlockIntoFreeList+0x8e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
     5a2:	cd 93       	st	X+, r28
     5a4:	dc 93       	st	X, r29
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
     5a6:	df 91       	pop	r29
     5a8:	cf 91       	pop	r28
     5aa:	08 95       	ret

000005ac <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     5ac:	ef 92       	push	r14
     5ae:	ff 92       	push	r15
     5b0:	0f 93       	push	r16
     5b2:	1f 93       	push	r17
     5b4:	cf 93       	push	r28
     5b6:	df 93       	push	r29
     5b8:	8c 01       	movw	r16, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     5ba:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
     5be:	80 91 36 03 	lds	r24, 0x0336	; 0x800336 <pxEnd>
     5c2:	90 91 37 03 	lds	r25, 0x0337	; 0x800337 <pxEnd+0x1>
     5c6:	89 2b       	or	r24, r25
     5c8:	09 f4       	brne	.+2      	; 0x5cc <pvPortMalloc+0x20>
        {
            prvHeapInit();
     5ca:	7d df       	rcall	.-262    	; 0x4c6 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     5cc:	80 91 2c 03 	lds	r24, 0x032C	; 0x80032c <xBlockAllocatedBit>
     5d0:	90 91 2d 03 	lds	r25, 0x032D	; 0x80032d <xBlockAllocatedBit+0x1>
     5d4:	80 23       	and	r24, r16
     5d6:	91 23       	and	r25, r17
     5d8:	89 2b       	or	r24, r25
     5da:	09 f0       	breq	.+2      	; 0x5de <pvPortMalloc+0x32>
     5dc:	76 c0       	rjmp	.+236    	; 0x6ca <pvPortMalloc+0x11e>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     5de:	01 15       	cp	r16, r1
     5e0:	11 05       	cpc	r17, r1
     5e2:	49 f0       	breq	.+18     	; 0x5f6 <pvPortMalloc+0x4a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
     5e4:	c8 01       	movw	r24, r16
     5e6:	04 96       	adiw	r24, 0x04	; 4
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     5e8:	08 17       	cp	r16, r24
     5ea:	19 07       	cpc	r17, r25
     5ec:	18 f0       	brcs	.+6      	; 0x5f4 <pvPortMalloc+0x48>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
     5ee:	00 e0       	ldi	r16, 0x00	; 0
     5f0:	10 e0       	ldi	r17, 0x00	; 0
     5f2:	01 c0       	rjmp	.+2      	; 0x5f6 <pvPortMalloc+0x4a>
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
            {
                xWantedSize += xHeapStructSize;
     5f4:	8c 01       	movw	r16, r24
            else 
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     5f6:	01 15       	cp	r16, r1
     5f8:	11 05       	cpc	r17, r1
     5fa:	09 f4       	brne	.+2      	; 0x5fe <pvPortMalloc+0x52>
     5fc:	69 c0       	rjmp	.+210    	; 0x6d0 <pvPortMalloc+0x124>
     5fe:	80 91 34 03 	lds	r24, 0x0334	; 0x800334 <xFreeBytesRemaining>
     602:	90 91 35 03 	lds	r25, 0x0335	; 0x800335 <xFreeBytesRemaining+0x1>
     606:	80 17       	cp	r24, r16
     608:	91 07       	cpc	r25, r17
     60a:	08 f4       	brcc	.+2      	; 0x60e <pvPortMalloc+0x62>
     60c:	64 c0       	rjmp	.+200    	; 0x6d6 <pvPortMalloc+0x12a>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
     60e:	c0 91 38 03 	lds	r28, 0x0338	; 0x800338 <xStart>
     612:	d0 91 39 03 	lds	r29, 0x0339	; 0x800339 <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
     616:	e8 e3       	ldi	r30, 0x38	; 56
     618:	f3 e0       	ldi	r31, 0x03	; 3
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     61a:	02 c0       	rjmp	.+4      	; 0x620 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
     61c:	fe 01       	movw	r30, r28
                    pxBlock = pxBlock->pxNextFreeBlock;
     61e:	ec 01       	movw	r28, r24
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     620:	8a 81       	ldd	r24, Y+2	; 0x02
     622:	9b 81       	ldd	r25, Y+3	; 0x03
     624:	80 17       	cp	r24, r16
     626:	91 07       	cpc	r25, r17
     628:	20 f4       	brcc	.+8      	; 0x632 <pvPortMalloc+0x86>
     62a:	88 81       	ld	r24, Y
     62c:	99 81       	ldd	r25, Y+1	; 0x01
     62e:	00 97       	sbiw	r24, 0x00	; 0
     630:	a9 f7       	brne	.-22     	; 0x61c <pvPortMalloc+0x70>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
     632:	80 91 36 03 	lds	r24, 0x0336	; 0x800336 <pxEnd>
     636:	90 91 37 03 	lds	r25, 0x0337	; 0x800337 <pxEnd+0x1>
     63a:	c8 17       	cp	r28, r24
     63c:	d9 07       	cpc	r29, r25
     63e:	09 f4       	brne	.+2      	; 0x642 <pvPortMalloc+0x96>
     640:	4d c0       	rjmp	.+154    	; 0x6dc <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     642:	e0 80       	ld	r14, Z
     644:	f1 80       	ldd	r15, Z+1	; 0x01
     646:	84 e0       	ldi	r24, 0x04	; 4
     648:	e8 0e       	add	r14, r24
     64a:	f1 1c       	adc	r15, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     64c:	88 81       	ld	r24, Y
     64e:	99 81       	ldd	r25, Y+1	; 0x01
     650:	91 83       	std	Z+1, r25	; 0x01
     652:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     654:	2a 81       	ldd	r18, Y+2	; 0x02
     656:	3b 81       	ldd	r19, Y+3	; 0x03
     658:	20 1b       	sub	r18, r16
     65a:	31 0b       	sbc	r19, r17
     65c:	29 30       	cpi	r18, 0x09	; 9
     65e:	31 05       	cpc	r19, r1
     660:	48 f0       	brcs	.+18     	; 0x674 <pvPortMalloc+0xc8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     662:	ce 01       	movw	r24, r28
     664:	80 0f       	add	r24, r16
     666:	91 1f       	adc	r25, r17
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     668:	fc 01       	movw	r30, r24
     66a:	33 83       	std	Z+3, r19	; 0x03
     66c:	22 83       	std	Z+2, r18	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
     66e:	1b 83       	std	Y+3, r17	; 0x03

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
     670:	0a 83       	std	Y+2, r16	; 0x02
     672:	52 df       	rcall	.-348    	; 0x518 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
     674:	2a 81       	ldd	r18, Y+2	; 0x02
     676:	3b 81       	ldd	r19, Y+3	; 0x03
     678:	80 91 34 03 	lds	r24, 0x0334	; 0x800334 <xFreeBytesRemaining>
     67c:	90 91 35 03 	lds	r25, 0x0335	; 0x800335 <xFreeBytesRemaining+0x1>
     680:	82 1b       	sub	r24, r18
     682:	93 0b       	sbc	r25, r19
     684:	90 93 35 03 	sts	0x0335, r25	; 0x800335 <xFreeBytesRemaining+0x1>
     688:	80 93 34 03 	sts	0x0334, r24	; 0x800334 <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     68c:	40 91 32 03 	lds	r20, 0x0332	; 0x800332 <xMinimumEverFreeBytesRemaining>
     690:	50 91 33 03 	lds	r21, 0x0333	; 0x800333 <xMinimumEverFreeBytesRemaining+0x1>
     694:	84 17       	cp	r24, r20
     696:	95 07       	cpc	r25, r21
     698:	20 f4       	brcc	.+8      	; 0x6a2 <pvPortMalloc+0xf6>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     69a:	90 93 33 03 	sts	0x0333, r25	; 0x800333 <xMinimumEverFreeBytesRemaining+0x1>
     69e:	80 93 32 03 	sts	0x0332, r24	; 0x800332 <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
     6a2:	80 91 2c 03 	lds	r24, 0x032C	; 0x80032c <xBlockAllocatedBit>
     6a6:	90 91 2d 03 	lds	r25, 0x032D	; 0x80032d <xBlockAllocatedBit+0x1>
     6aa:	28 2b       	or	r18, r24
     6ac:	39 2b       	or	r19, r25
     6ae:	3b 83       	std	Y+3, r19	; 0x03
     6b0:	2a 83       	std	Y+2, r18	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
     6b2:	19 82       	std	Y+1, r1	; 0x01
     6b4:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
     6b6:	80 91 30 03 	lds	r24, 0x0330	; 0x800330 <xNumberOfSuccessfulAllocations>
     6ba:	90 91 31 03 	lds	r25, 0x0331	; 0x800331 <xNumberOfSuccessfulAllocations+0x1>
     6be:	01 96       	adiw	r24, 0x01	; 1
     6c0:	90 93 31 03 	sts	0x0331, r25	; 0x800331 <xNumberOfSuccessfulAllocations+0x1>
     6c4:	80 93 30 03 	sts	0x0330, r24	; 0x800330 <xNumberOfSuccessfulAllocations>
     6c8:	0b c0       	rjmp	.+22     	; 0x6e0 <pvPortMalloc+0x134>
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
     6ca:	e1 2c       	mov	r14, r1
     6cc:	f1 2c       	mov	r15, r1
     6ce:	08 c0       	rjmp	.+16     	; 0x6e0 <pvPortMalloc+0x134>
     6d0:	e1 2c       	mov	r14, r1
     6d2:	f1 2c       	mov	r15, r1
     6d4:	05 c0       	rjmp	.+10     	; 0x6e0 <pvPortMalloc+0x134>
     6d6:	e1 2c       	mov	r14, r1
     6d8:	f1 2c       	mov	r15, r1
     6da:	02 c0       	rjmp	.+4      	; 0x6e0 <pvPortMalloc+0x134>
     6dc:	e1 2c       	mov	r14, r1
     6de:	f1 2c       	mov	r15, r1
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     6e0:	0e 94 a8 0c 	call	0x1950	; 0x1950 <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
     6e4:	e1 14       	cp	r14, r1
     6e6:	f1 04       	cpc	r15, r1
     6e8:	11 f4       	brne	.+4      	; 0x6ee <pvPortMalloc+0x142>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
     6ea:	0e 94 11 14 	call	0x2822	; 0x2822 <vApplicationMallocFailedHook>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
     6ee:	c7 01       	movw	r24, r14
     6f0:	df 91       	pop	r29
     6f2:	cf 91       	pop	r28
     6f4:	1f 91       	pop	r17
     6f6:	0f 91       	pop	r16
     6f8:	ff 90       	pop	r15
     6fa:	ef 90       	pop	r14
     6fc:	08 95       	ret

000006fe <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     6fe:	0f 93       	push	r16
     700:	1f 93       	push	r17
     702:	cf 93       	push	r28
     704:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     706:	00 97       	sbiw	r24, 0x00	; 0
     708:	89 f1       	breq	.+98     	; 0x76c <vPortFree+0x6e>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
     70a:	ec 01       	movw	r28, r24
     70c:	24 97       	sbiw	r28, 0x04	; 4

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     70e:	4a 81       	ldd	r20, Y+2	; 0x02
     710:	5b 81       	ldd	r21, Y+3	; 0x03
     712:	20 91 2c 03 	lds	r18, 0x032C	; 0x80032c <xBlockAllocatedBit>
     716:	30 91 2d 03 	lds	r19, 0x032D	; 0x80032d <xBlockAllocatedBit+0x1>
     71a:	ba 01       	movw	r22, r20
     71c:	62 23       	and	r22, r18
     71e:	73 23       	and	r23, r19
     720:	67 2b       	or	r22, r23
     722:	21 f1       	breq	.+72     	; 0x76c <vPortFree+0x6e>
        {
            if( pxLink->pxNextFreeBlock == NULL )
     724:	68 81       	ld	r22, Y
     726:	79 81       	ldd	r23, Y+1	; 0x01
     728:	67 2b       	or	r22, r23
     72a:	01 f5       	brne	.+64     	; 0x76c <vPortFree+0x6e>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
     72c:	20 95       	com	r18
     72e:	30 95       	com	r19
     730:	24 23       	and	r18, r20
     732:	35 23       	and	r19, r21
     734:	3b 83       	std	Y+3, r19	; 0x03
     736:	2a 83       	std	Y+2, r18	; 0x02

                vTaskSuspendAll();
     738:	cb d7       	rcall	.+3990   	; 0x16d0 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
     73a:	8a 81       	ldd	r24, Y+2	; 0x02
     73c:	9b 81       	ldd	r25, Y+3	; 0x03
     73e:	20 91 34 03 	lds	r18, 0x0334	; 0x800334 <xFreeBytesRemaining>
     742:	30 91 35 03 	lds	r19, 0x0335	; 0x800335 <xFreeBytesRemaining+0x1>
     746:	82 0f       	add	r24, r18
     748:	93 1f       	adc	r25, r19
     74a:	90 93 35 03 	sts	0x0335, r25	; 0x800335 <xFreeBytesRemaining+0x1>
     74e:	80 93 34 03 	sts	0x0334, r24	; 0x800334 <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     752:	ce 01       	movw	r24, r28
     754:	e1 de       	rcall	.-574    	; 0x518 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
     756:	80 91 2e 03 	lds	r24, 0x032E	; 0x80032e <xNumberOfSuccessfulFrees>
     75a:	90 91 2f 03 	lds	r25, 0x032F	; 0x80032f <xNumberOfSuccessfulFrees+0x1>
     75e:	01 96       	adiw	r24, 0x01	; 1
     760:	90 93 2f 03 	sts	0x032F, r25	; 0x80032f <xNumberOfSuccessfulFrees+0x1>
     764:	80 93 2e 03 	sts	0x032E, r24	; 0x80032e <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
     768:	0e 94 a8 0c 	call	0x1950	; 0x1950 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
     76c:	df 91       	pop	r29
     76e:	cf 91       	pop	r28
     770:	1f 91       	pop	r17
     772:	0f 91       	pop	r16
     774:	08 95       	ret

00000776 <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     776:	fc 01       	movw	r30, r24
     778:	03 96       	adiw	r24, 0x03	; 3
     77a:	92 83       	std	Z+2, r25	; 0x02
     77c:	81 83       	std	Z+1, r24	; 0x01
     77e:	4f ef       	ldi	r20, 0xFF	; 255
     780:	5f ef       	ldi	r21, 0xFF	; 255
     782:	ba 01       	movw	r22, r20
     784:	43 83       	std	Z+3, r20	; 0x03
     786:	54 83       	std	Z+4, r21	; 0x04
     788:	65 83       	std	Z+5, r22	; 0x05
     78a:	76 83       	std	Z+6, r23	; 0x06
     78c:	90 87       	std	Z+8, r25	; 0x08
     78e:	87 83       	std	Z+7, r24	; 0x07
     790:	92 87       	std	Z+10, r25	; 0x0a
     792:	81 87       	std	Z+9, r24	; 0x09
     794:	10 82       	st	Z, r1
     796:	08 95       	ret

00000798 <vListInitialiseItem>:
     798:	fc 01       	movw	r30, r24
     79a:	13 86       	std	Z+11, r1	; 0x0b
     79c:	12 86       	std	Z+10, r1	; 0x0a
     79e:	08 95       	ret

000007a0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     7a0:	0f 93       	push	r16
     7a2:	1f 93       	push	r17
     7a4:	cf 93       	push	r28
     7a6:	df 93       	push	r29
     7a8:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     7aa:	08 81       	ld	r16, Y
     7ac:	19 81       	ldd	r17, Y+1	; 0x01
     7ae:	2a 81       	ldd	r18, Y+2	; 0x02
     7b0:	3b 81       	ldd	r19, Y+3	; 0x03
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     7b2:	0f 3f       	cpi	r16, 0xFF	; 255
     7b4:	4f ef       	ldi	r20, 0xFF	; 255
     7b6:	14 07       	cpc	r17, r20
     7b8:	24 07       	cpc	r18, r20
     7ba:	34 07       	cpc	r19, r20
     7bc:	21 f4       	brne	.+8      	; 0x7c6 <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     7be:	fc 01       	movw	r30, r24
     7c0:	a1 85       	ldd	r26, Z+9	; 0x09
     7c2:	b2 85       	ldd	r27, Z+10	; 0x0a
     7c4:	11 c0       	rjmp	.+34     	; 0x7e8 <vListInsert+0x48>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     7c6:	dc 01       	movw	r26, r24
     7c8:	13 96       	adiw	r26, 0x03	; 3
     7ca:	01 c0       	rjmp	.+2      	; 0x7ce <vListInsert+0x2e>
     7cc:	df 01       	movw	r26, r30
     7ce:	14 96       	adiw	r26, 0x04	; 4
     7d0:	ed 91       	ld	r30, X+
     7d2:	fc 91       	ld	r31, X
     7d4:	15 97       	sbiw	r26, 0x05	; 5
     7d6:	40 81       	ld	r20, Z
     7d8:	51 81       	ldd	r21, Z+1	; 0x01
     7da:	62 81       	ldd	r22, Z+2	; 0x02
     7dc:	73 81       	ldd	r23, Z+3	; 0x03
     7de:	04 17       	cp	r16, r20
     7e0:	15 07       	cpc	r17, r21
     7e2:	26 07       	cpc	r18, r22
     7e4:	37 07       	cpc	r19, r23
     7e6:	90 f7       	brcc	.-28     	; 0x7cc <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     7e8:	14 96       	adiw	r26, 0x04	; 4
     7ea:	ed 91       	ld	r30, X+
     7ec:	fc 91       	ld	r31, X
     7ee:	15 97       	sbiw	r26, 0x05	; 5
     7f0:	fd 83       	std	Y+5, r31	; 0x05
     7f2:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     7f4:	d7 83       	std	Z+7, r29	; 0x07
     7f6:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
     7f8:	bf 83       	std	Y+7, r27	; 0x07
     7fa:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
     7fc:	15 96       	adiw	r26, 0x05	; 5
     7fe:	dc 93       	st	X, r29
     800:	ce 93       	st	-X, r28
     802:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     804:	9b 87       	std	Y+11, r25	; 0x0b
     806:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
     808:	fc 01       	movw	r30, r24
     80a:	20 81       	ld	r18, Z
     80c:	2f 5f       	subi	r18, 0xFF	; 255
     80e:	20 83       	st	Z, r18
}
     810:	df 91       	pop	r29
     812:	cf 91       	pop	r28
     814:	1f 91       	pop	r17
     816:	0f 91       	pop	r16
     818:	08 95       	ret

0000081a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     81a:	cf 93       	push	r28
     81c:	df 93       	push	r29
     81e:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     820:	a2 85       	ldd	r26, Z+10	; 0x0a
     822:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     824:	c4 81       	ldd	r28, Z+4	; 0x04
     826:	d5 81       	ldd	r29, Z+5	; 0x05
     828:	86 81       	ldd	r24, Z+6	; 0x06
     82a:	97 81       	ldd	r25, Z+7	; 0x07
     82c:	9f 83       	std	Y+7, r25	; 0x07
     82e:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     830:	c6 81       	ldd	r28, Z+6	; 0x06
     832:	d7 81       	ldd	r29, Z+7	; 0x07
     834:	84 81       	ldd	r24, Z+4	; 0x04
     836:	95 81       	ldd	r25, Z+5	; 0x05
     838:	9d 83       	std	Y+5, r25	; 0x05
     83a:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     83c:	11 96       	adiw	r26, 0x01	; 1
     83e:	8d 91       	ld	r24, X+
     840:	9c 91       	ld	r25, X
     842:	12 97       	sbiw	r26, 0x02	; 2
     844:	e8 17       	cp	r30, r24
     846:	f9 07       	cpc	r31, r25
     848:	31 f4       	brne	.+12     	; 0x856 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     84a:	86 81       	ldd	r24, Z+6	; 0x06
     84c:	97 81       	ldd	r25, Z+7	; 0x07
     84e:	12 96       	adiw	r26, 0x02	; 2
     850:	9c 93       	st	X, r25
     852:	8e 93       	st	-X, r24
     854:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     856:	13 86       	std	Z+11, r1	; 0x0b
     858:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
     85a:	8c 91       	ld	r24, X
     85c:	81 50       	subi	r24, 0x01	; 1
     85e:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     860:	8c 91       	ld	r24, X
}
     862:	df 91       	pop	r29
     864:	cf 91       	pop	r28
     866:	08 95       	ret

00000868 <prvSetupTimerInterrupt>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
     868:	a8 95       	wdr
     86a:	90 ec       	ldi	r25, 0xC0	; 192
     86c:	88 e1       	ldi	r24, 0x18	; 24
     86e:	0f b6       	in	r0, 0x3f	; 63
     870:	f8 94       	cli
     872:	a8 95       	wdr
     874:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     878:	0f be       	out	0x3f, r0	; 63
     87a:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     87e:	08 95       	ret

00000880 <pxPortInitialiseStack>:
     880:	fc 01       	movw	r30, r24
     882:	60 83       	st	Z, r22
     884:	31 97       	sbiw	r30, 0x01	; 1
     886:	70 83       	st	Z, r23
     888:	31 97       	sbiw	r30, 0x01	; 1
     88a:	10 82       	st	Z, r1
     88c:	31 97       	sbiw	r30, 0x01	; 1
     88e:	10 82       	st	Z, r1
     890:	31 97       	sbiw	r30, 0x01	; 1
     892:	20 e8       	ldi	r18, 0x80	; 128
     894:	20 83       	st	Z, r18
     896:	31 97       	sbiw	r30, 0x01	; 1
     898:	10 82       	st	Z, r1
     89a:	31 97       	sbiw	r30, 0x01	; 1
     89c:	10 82       	st	Z, r1
     89e:	31 97       	sbiw	r30, 0x01	; 1
     8a0:	10 82       	st	Z, r1
     8a2:	77 97       	sbiw	r30, 0x17	; 23
     8a4:	40 83       	st	Z, r20
     8a6:	31 97       	sbiw	r30, 0x01	; 1
     8a8:	50 83       	st	Z, r21
     8aa:	86 97       	sbiw	r24, 0x26	; 38
     8ac:	08 95       	ret

000008ae <xPortStartScheduler>:
     8ae:	dc df       	rcall	.-72     	; 0x868 <prvSetupTimerInterrupt>
     8b0:	a0 91 a7 11 	lds	r26, 0x11A7	; 0x8011a7 <pxCurrentTCB>
     8b4:	b0 91 a8 11 	lds	r27, 0x11A8	; 0x8011a8 <pxCurrentTCB+0x1>
     8b8:	cd 91       	ld	r28, X+
     8ba:	cd bf       	out	0x3d, r28	; 61
     8bc:	dd 91       	ld	r29, X+
     8be:	de bf       	out	0x3e, r29	; 62
     8c0:	ff 91       	pop	r31
     8c2:	ef 91       	pop	r30
     8c4:	df 91       	pop	r29
     8c6:	cf 91       	pop	r28
     8c8:	bf 91       	pop	r27
     8ca:	af 91       	pop	r26
     8cc:	9f 91       	pop	r25
     8ce:	8f 91       	pop	r24
     8d0:	7f 91       	pop	r23
     8d2:	6f 91       	pop	r22
     8d4:	5f 91       	pop	r21
     8d6:	4f 91       	pop	r20
     8d8:	3f 91       	pop	r19
     8da:	2f 91       	pop	r18
     8dc:	1f 91       	pop	r17
     8de:	0f 91       	pop	r16
     8e0:	ff 90       	pop	r15
     8e2:	ef 90       	pop	r14
     8e4:	df 90       	pop	r13
     8e6:	cf 90       	pop	r12
     8e8:	bf 90       	pop	r11
     8ea:	af 90       	pop	r10
     8ec:	9f 90       	pop	r9
     8ee:	8f 90       	pop	r8
     8f0:	7f 90       	pop	r7
     8f2:	6f 90       	pop	r6
     8f4:	5f 90       	pop	r5
     8f6:	4f 90       	pop	r4
     8f8:	3f 90       	pop	r3
     8fa:	2f 90       	pop	r2
     8fc:	1f 90       	pop	r1
     8fe:	0f 90       	pop	r0
     900:	0c be       	out	0x3c, r0	; 60
     902:	0f 90       	pop	r0
     904:	0b be       	out	0x3b, r0	; 59
     906:	0f 90       	pop	r0
     908:	0f be       	out	0x3f, r0	; 63
     90a:	0f 90       	pop	r0
     90c:	08 95       	ret
     90e:	81 e0       	ldi	r24, 0x01	; 1
     910:	08 95       	ret

00000912 <vPortYield>:
     912:	0f 92       	push	r0
     914:	0f b6       	in	r0, 0x3f	; 63
     916:	f8 94       	cli
     918:	0f 92       	push	r0
     91a:	0b b6       	in	r0, 0x3b	; 59
     91c:	0f 92       	push	r0
     91e:	0c b6       	in	r0, 0x3c	; 60
     920:	0f 92       	push	r0
     922:	1f 92       	push	r1
     924:	11 24       	eor	r1, r1
     926:	2f 92       	push	r2
     928:	3f 92       	push	r3
     92a:	4f 92       	push	r4
     92c:	5f 92       	push	r5
     92e:	6f 92       	push	r6
     930:	7f 92       	push	r7
     932:	8f 92       	push	r8
     934:	9f 92       	push	r9
     936:	af 92       	push	r10
     938:	bf 92       	push	r11
     93a:	cf 92       	push	r12
     93c:	df 92       	push	r13
     93e:	ef 92       	push	r14
     940:	ff 92       	push	r15
     942:	0f 93       	push	r16
     944:	1f 93       	push	r17
     946:	2f 93       	push	r18
     948:	3f 93       	push	r19
     94a:	4f 93       	push	r20
     94c:	5f 93       	push	r21
     94e:	6f 93       	push	r22
     950:	7f 93       	push	r23
     952:	8f 93       	push	r24
     954:	9f 93       	push	r25
     956:	af 93       	push	r26
     958:	bf 93       	push	r27
     95a:	cf 93       	push	r28
     95c:	df 93       	push	r29
     95e:	ef 93       	push	r30
     960:	ff 93       	push	r31
     962:	a0 91 a7 11 	lds	r26, 0x11A7	; 0x8011a7 <pxCurrentTCB>
     966:	b0 91 a8 11 	lds	r27, 0x11A8	; 0x8011a8 <pxCurrentTCB+0x1>
     96a:	0d b6       	in	r0, 0x3d	; 61
     96c:	0d 92       	st	X+, r0
     96e:	0e b6       	in	r0, 0x3e	; 62
     970:	0d 92       	st	X+, r0
     972:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <vTaskSwitchContext>
     976:	a0 91 a7 11 	lds	r26, 0x11A7	; 0x8011a7 <pxCurrentTCB>
     97a:	b0 91 a8 11 	lds	r27, 0x11A8	; 0x8011a8 <pxCurrentTCB+0x1>
     97e:	cd 91       	ld	r28, X+
     980:	cd bf       	out	0x3d, r28	; 61
     982:	dd 91       	ld	r29, X+
     984:	de bf       	out	0x3e, r29	; 62
     986:	ff 91       	pop	r31
     988:	ef 91       	pop	r30
     98a:	df 91       	pop	r29
     98c:	cf 91       	pop	r28
     98e:	bf 91       	pop	r27
     990:	af 91       	pop	r26
     992:	9f 91       	pop	r25
     994:	8f 91       	pop	r24
     996:	7f 91       	pop	r23
     998:	6f 91       	pop	r22
     99a:	5f 91       	pop	r21
     99c:	4f 91       	pop	r20
     99e:	3f 91       	pop	r19
     9a0:	2f 91       	pop	r18
     9a2:	1f 91       	pop	r17
     9a4:	0f 91       	pop	r16
     9a6:	ff 90       	pop	r15
     9a8:	ef 90       	pop	r14
     9aa:	df 90       	pop	r13
     9ac:	cf 90       	pop	r12
     9ae:	bf 90       	pop	r11
     9b0:	af 90       	pop	r10
     9b2:	9f 90       	pop	r9
     9b4:	8f 90       	pop	r8
     9b6:	7f 90       	pop	r7
     9b8:	6f 90       	pop	r6
     9ba:	5f 90       	pop	r5
     9bc:	4f 90       	pop	r4
     9be:	3f 90       	pop	r3
     9c0:	2f 90       	pop	r2
     9c2:	1f 90       	pop	r1
     9c4:	0f 90       	pop	r0
     9c6:	0c be       	out	0x3c, r0	; 60
     9c8:	0f 90       	pop	r0
     9ca:	0b be       	out	0x3b, r0	; 59
     9cc:	0f 90       	pop	r0
     9ce:	0f be       	out	0x3f, r0	; 63
     9d0:	0f 90       	pop	r0
     9d2:	08 95       	ret

000009d4 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     9d4:	0f 92       	push	r0
     9d6:	0f b6       	in	r0, 0x3f	; 63
     9d8:	f8 94       	cli
     9da:	0f 92       	push	r0
     9dc:	0b b6       	in	r0, 0x3b	; 59
     9de:	0f 92       	push	r0
     9e0:	0c b6       	in	r0, 0x3c	; 60
     9e2:	0f 92       	push	r0
     9e4:	1f 92       	push	r1
     9e6:	11 24       	eor	r1, r1
     9e8:	2f 92       	push	r2
     9ea:	3f 92       	push	r3
     9ec:	4f 92       	push	r4
     9ee:	5f 92       	push	r5
     9f0:	6f 92       	push	r6
     9f2:	7f 92       	push	r7
     9f4:	8f 92       	push	r8
     9f6:	9f 92       	push	r9
     9f8:	af 92       	push	r10
     9fa:	bf 92       	push	r11
     9fc:	cf 92       	push	r12
     9fe:	df 92       	push	r13
     a00:	ef 92       	push	r14
     a02:	ff 92       	push	r15
     a04:	0f 93       	push	r16
     a06:	1f 93       	push	r17
     a08:	2f 93       	push	r18
     a0a:	3f 93       	push	r19
     a0c:	4f 93       	push	r20
     a0e:	5f 93       	push	r21
     a10:	6f 93       	push	r22
     a12:	7f 93       	push	r23
     a14:	8f 93       	push	r24
     a16:	9f 93       	push	r25
     a18:	af 93       	push	r26
     a1a:	bf 93       	push	r27
     a1c:	cf 93       	push	r28
     a1e:	df 93       	push	r29
     a20:	ef 93       	push	r30
     a22:	ff 93       	push	r31
     a24:	a0 91 a7 11 	lds	r26, 0x11A7	; 0x8011a7 <pxCurrentTCB>
     a28:	b0 91 a8 11 	lds	r27, 0x11A8	; 0x8011a8 <pxCurrentTCB+0x1>
     a2c:	0d b6       	in	r0, 0x3d	; 61
     a2e:	0d 92       	st	X+, r0
     a30:	0e b6       	in	r0, 0x3e	; 62
     a32:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
     a34:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
     a36:	60 d6       	rcall	.+3264   	; 0x16f8 <xTaskIncrementTick>
     a38:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     a3a:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
     a3e:	a0 91 a7 11 	lds	r26, 0x11A7	; 0x8011a7 <pxCurrentTCB>
     a42:	b0 91 a8 11 	lds	r27, 0x11A8	; 0x8011a8 <pxCurrentTCB+0x1>
     a46:	cd 91       	ld	r28, X+
     a48:	cd bf       	out	0x3d, r28	; 61
     a4a:	dd 91       	ld	r29, X+
     a4c:	de bf       	out	0x3e, r29	; 62
     a4e:	ff 91       	pop	r31
     a50:	ef 91       	pop	r30
     a52:	df 91       	pop	r29
     a54:	cf 91       	pop	r28
     a56:	bf 91       	pop	r27
     a58:	af 91       	pop	r26
     a5a:	9f 91       	pop	r25
     a5c:	8f 91       	pop	r24
     a5e:	7f 91       	pop	r23
     a60:	6f 91       	pop	r22
     a62:	5f 91       	pop	r21
     a64:	4f 91       	pop	r20
     a66:	3f 91       	pop	r19
     a68:	2f 91       	pop	r18
     a6a:	1f 91       	pop	r17
     a6c:	0f 91       	pop	r16
     a6e:	ff 90       	pop	r15
     a70:	ef 90       	pop	r14
     a72:	df 90       	pop	r13
     a74:	cf 90       	pop	r12
     a76:	bf 90       	pop	r11
     a78:	af 90       	pop	r10
     a7a:	9f 90       	pop	r9
     a7c:	8f 90       	pop	r8
     a7e:	7f 90       	pop	r7
     a80:	6f 90       	pop	r6
     a82:	5f 90       	pop	r5
     a84:	4f 90       	pop	r4
     a86:	3f 90       	pop	r3
     a88:	2f 90       	pop	r2
     a8a:	1f 90       	pop	r1
     a8c:	0f 90       	pop	r0
     a8e:	0c be       	out	0x3c, r0	; 60
     a90:	0f 90       	pop	r0
     a92:	0b be       	out	0x3b, r0	; 59
     a94:	0f 90       	pop	r0
     a96:	0f be       	out	0x3f, r0	; 63
     a98:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     a9a:	08 95       	ret

00000a9c <__vector_12>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
     a9c:	9b df       	rcall	.-202    	; 0x9d4 <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
     a9e:	18 95       	reti

00000aa0 <prvGetDisinheritPriorityAfterTimeout>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     aa0:	dc 01       	movw	r26, r24
     aa2:	53 96       	adiw	r26, 0x13	; 19
     aa4:	2c 91       	ld	r18, X
     aa6:	53 97       	sbiw	r26, 0x13	; 19
     aa8:	22 23       	and	r18, r18
     aaa:	41 f0       	breq	.+16     	; 0xabc <prvGetDisinheritPriorityAfterTimeout+0x1c>
     aac:	5a 96       	adiw	r26, 0x1a	; 26
     aae:	ed 91       	ld	r30, X+
     ab0:	fc 91       	ld	r31, X
     ab2:	5b 97       	sbiw	r26, 0x1b	; 27
     ab4:	90 81       	ld	r25, Z
     ab6:	8a e0       	ldi	r24, 0x0A	; 10
     ab8:	89 1b       	sub	r24, r25
     aba:	08 95       	ret
     abc:	80 e0       	ldi	r24, 0x00	; 0
     abe:	08 95       	ret

00000ac0 <prvIsQueueEmpty>:
     ac0:	0f b6       	in	r0, 0x3f	; 63
     ac2:	f8 94       	cli
     ac4:	0f 92       	push	r0
     ac6:	fc 01       	movw	r30, r24
     ac8:	86 8d       	ldd	r24, Z+30	; 0x1e
     aca:	81 11       	cpse	r24, r1
     acc:	02 c0       	rjmp	.+4      	; 0xad2 <prvIsQueueEmpty+0x12>
     ace:	81 e0       	ldi	r24, 0x01	; 1
     ad0:	01 c0       	rjmp	.+2      	; 0xad4 <prvIsQueueEmpty+0x14>
     ad2:	80 e0       	ldi	r24, 0x00	; 0
     ad4:	0f 90       	pop	r0
     ad6:	0f be       	out	0x3f, r0	; 63
     ad8:	08 95       	ret

00000ada <prvIsQueueFull>:
     ada:	0f b6       	in	r0, 0x3f	; 63
     adc:	f8 94       	cli
     ade:	0f 92       	push	r0
     ae0:	fc 01       	movw	r30, r24
     ae2:	26 8d       	ldd	r18, Z+30	; 0x1e
     ae4:	87 8d       	ldd	r24, Z+31	; 0x1f
     ae6:	28 13       	cpse	r18, r24
     ae8:	02 c0       	rjmp	.+4      	; 0xaee <prvIsQueueFull+0x14>
     aea:	81 e0       	ldi	r24, 0x01	; 1
     aec:	01 c0       	rjmp	.+2      	; 0xaf0 <prvIsQueueFull+0x16>
     aee:	80 e0       	ldi	r24, 0x00	; 0
     af0:	0f 90       	pop	r0
     af2:	0f be       	out	0x3f, r0	; 63
     af4:	08 95       	ret

00000af6 <prvCopyDataToQueue>:
     af6:	0f 93       	push	r16
     af8:	1f 93       	push	r17
     afa:	cf 93       	push	r28
     afc:	df 93       	push	r29
     afe:	ec 01       	movw	r28, r24
     b00:	04 2f       	mov	r16, r20
     b02:	1e 8d       	ldd	r17, Y+30	; 0x1e
     b04:	48 a1       	ldd	r20, Y+32	; 0x20
     b06:	41 11       	cpse	r20, r1
     b08:	0c c0       	rjmp	.+24     	; 0xb22 <prvCopyDataToQueue+0x2c>
     b0a:	88 81       	ld	r24, Y
     b0c:	99 81       	ldd	r25, Y+1	; 0x01
     b0e:	89 2b       	or	r24, r25
     b10:	09 f0       	breq	.+2      	; 0xb14 <prvCopyDataToQueue+0x1e>
     b12:	42 c0       	rjmp	.+132    	; 0xb98 <prvCopyDataToQueue+0xa2>
     b14:	8c 81       	ldd	r24, Y+4	; 0x04
     b16:	9d 81       	ldd	r25, Y+5	; 0x05
     b18:	0e 94 38 10 	call	0x2070	; 0x2070 <xTaskPriorityDisinherit>
     b1c:	1d 82       	std	Y+5, r1	; 0x05
     b1e:	1c 82       	std	Y+4, r1	; 0x04
     b20:	42 c0       	rjmp	.+132    	; 0xba6 <prvCopyDataToQueue+0xb0>
     b22:	01 11       	cpse	r16, r1
     b24:	17 c0       	rjmp	.+46     	; 0xb54 <prvCopyDataToQueue+0x5e>
     b26:	50 e0       	ldi	r21, 0x00	; 0
     b28:	8a 81       	ldd	r24, Y+2	; 0x02
     b2a:	9b 81       	ldd	r25, Y+3	; 0x03
     b2c:	0e 94 81 1c 	call	0x3902	; 0x3902 <memcpy>
     b30:	28 a1       	ldd	r18, Y+32	; 0x20
     b32:	8a 81       	ldd	r24, Y+2	; 0x02
     b34:	9b 81       	ldd	r25, Y+3	; 0x03
     b36:	82 0f       	add	r24, r18
     b38:	91 1d       	adc	r25, r1
     b3a:	9b 83       	std	Y+3, r25	; 0x03
     b3c:	8a 83       	std	Y+2, r24	; 0x02
     b3e:	2c 81       	ldd	r18, Y+4	; 0x04
     b40:	3d 81       	ldd	r19, Y+5	; 0x05
     b42:	82 17       	cp	r24, r18
     b44:	93 07       	cpc	r25, r19
     b46:	50 f1       	brcs	.+84     	; 0xb9c <prvCopyDataToQueue+0xa6>
     b48:	88 81       	ld	r24, Y
     b4a:	99 81       	ldd	r25, Y+1	; 0x01
     b4c:	9b 83       	std	Y+3, r25	; 0x03
     b4e:	8a 83       	std	Y+2, r24	; 0x02
     b50:	80 e0       	ldi	r24, 0x00	; 0
     b52:	29 c0       	rjmp	.+82     	; 0xba6 <prvCopyDataToQueue+0xb0>
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	8e 81       	ldd	r24, Y+6	; 0x06
     b58:	9f 81       	ldd	r25, Y+7	; 0x07
     b5a:	0e 94 81 1c 	call	0x3902	; 0x3902 <memcpy>
     b5e:	88 a1       	ldd	r24, Y+32	; 0x20
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	91 95       	neg	r25
     b64:	81 95       	neg	r24
     b66:	91 09       	sbc	r25, r1
     b68:	2e 81       	ldd	r18, Y+6	; 0x06
     b6a:	3f 81       	ldd	r19, Y+7	; 0x07
     b6c:	28 0f       	add	r18, r24
     b6e:	39 1f       	adc	r19, r25
     b70:	3f 83       	std	Y+7, r19	; 0x07
     b72:	2e 83       	std	Y+6, r18	; 0x06
     b74:	48 81       	ld	r20, Y
     b76:	59 81       	ldd	r21, Y+1	; 0x01
     b78:	24 17       	cp	r18, r20
     b7a:	35 07       	cpc	r19, r21
     b7c:	30 f4       	brcc	.+12     	; 0xb8a <prvCopyDataToQueue+0x94>
     b7e:	2c 81       	ldd	r18, Y+4	; 0x04
     b80:	3d 81       	ldd	r19, Y+5	; 0x05
     b82:	82 0f       	add	r24, r18
     b84:	93 1f       	adc	r25, r19
     b86:	9f 83       	std	Y+7, r25	; 0x07
     b88:	8e 83       	std	Y+6, r24	; 0x06
     b8a:	02 30       	cpi	r16, 0x02	; 2
     b8c:	49 f4       	brne	.+18     	; 0xba0 <prvCopyDataToQueue+0xaa>
     b8e:	11 23       	and	r17, r17
     b90:	49 f0       	breq	.+18     	; 0xba4 <prvCopyDataToQueue+0xae>
     b92:	11 50       	subi	r17, 0x01	; 1
     b94:	80 e0       	ldi	r24, 0x00	; 0
     b96:	07 c0       	rjmp	.+14     	; 0xba6 <prvCopyDataToQueue+0xb0>
     b98:	80 e0       	ldi	r24, 0x00	; 0
     b9a:	05 c0       	rjmp	.+10     	; 0xba6 <prvCopyDataToQueue+0xb0>
     b9c:	80 e0       	ldi	r24, 0x00	; 0
     b9e:	03 c0       	rjmp	.+6      	; 0xba6 <prvCopyDataToQueue+0xb0>
     ba0:	80 e0       	ldi	r24, 0x00	; 0
     ba2:	01 c0       	rjmp	.+2      	; 0xba6 <prvCopyDataToQueue+0xb0>
     ba4:	80 e0       	ldi	r24, 0x00	; 0
     ba6:	1f 5f       	subi	r17, 0xFF	; 255
     ba8:	1e 8f       	std	Y+30, r17	; 0x1e
     baa:	df 91       	pop	r29
     bac:	cf 91       	pop	r28
     bae:	1f 91       	pop	r17
     bb0:	0f 91       	pop	r16
     bb2:	08 95       	ret

00000bb4 <prvCopyDataFromQueue>:
     bb4:	fc 01       	movw	r30, r24
     bb6:	40 a1       	ldd	r20, Z+32	; 0x20
     bb8:	44 23       	and	r20, r20
     bba:	a9 f0       	breq	.+42     	; 0xbe6 <prvCopyDataFromQueue+0x32>
     bbc:	50 e0       	ldi	r21, 0x00	; 0
     bbe:	26 81       	ldd	r18, Z+6	; 0x06
     bc0:	37 81       	ldd	r19, Z+7	; 0x07
     bc2:	24 0f       	add	r18, r20
     bc4:	35 1f       	adc	r19, r21
     bc6:	37 83       	std	Z+7, r19	; 0x07
     bc8:	26 83       	std	Z+6, r18	; 0x06
     bca:	84 81       	ldd	r24, Z+4	; 0x04
     bcc:	95 81       	ldd	r25, Z+5	; 0x05
     bce:	28 17       	cp	r18, r24
     bd0:	39 07       	cpc	r19, r25
     bd2:	20 f0       	brcs	.+8      	; 0xbdc <prvCopyDataFromQueue+0x28>
     bd4:	80 81       	ld	r24, Z
     bd6:	91 81       	ldd	r25, Z+1	; 0x01
     bd8:	97 83       	std	Z+7, r25	; 0x07
     bda:	86 83       	std	Z+6, r24	; 0x06
     bdc:	cb 01       	movw	r24, r22
     bde:	66 81       	ldd	r22, Z+6	; 0x06
     be0:	77 81       	ldd	r23, Z+7	; 0x07
     be2:	0c 94 81 1c 	jmp	0x3902	; 0x3902 <memcpy>
     be6:	08 95       	ret

00000be8 <prvUnlockQueue>:
     be8:	1f 93       	push	r17
     bea:	cf 93       	push	r28
     bec:	df 93       	push	r29
     bee:	ec 01       	movw	r28, r24
     bf0:	0f b6       	in	r0, 0x3f	; 63
     bf2:	f8 94       	cli
     bf4:	0f 92       	push	r0
     bf6:	1a a1       	ldd	r17, Y+34	; 0x22
     bf8:	0b c0       	rjmp	.+22     	; 0xc10 <prvUnlockQueue+0x28>
     bfa:	8b 89       	ldd	r24, Y+19	; 0x13
     bfc:	88 23       	and	r24, r24
     bfe:	51 f0       	breq	.+20     	; 0xc14 <prvUnlockQueue+0x2c>
     c00:	ce 01       	movw	r24, r28
     c02:	43 96       	adiw	r24, 0x13	; 19
     c04:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <xTaskRemoveFromEventList>
     c08:	81 11       	cpse	r24, r1
     c0a:	0e 94 9f 0f 	call	0x1f3e	; 0x1f3e <vTaskMissedYield>
     c0e:	11 50       	subi	r17, 0x01	; 1
     c10:	11 16       	cp	r1, r17
     c12:	9c f3       	brlt	.-26     	; 0xbfa <prvUnlockQueue+0x12>
     c14:	8f ef       	ldi	r24, 0xFF	; 255
     c16:	8a a3       	std	Y+34, r24	; 0x22
     c18:	0f 90       	pop	r0
     c1a:	0f be       	out	0x3f, r0	; 63
     c1c:	0f b6       	in	r0, 0x3f	; 63
     c1e:	f8 94       	cli
     c20:	0f 92       	push	r0
     c22:	19 a1       	ldd	r17, Y+33	; 0x21
     c24:	0b c0       	rjmp	.+22     	; 0xc3c <prvUnlockQueue+0x54>
     c26:	88 85       	ldd	r24, Y+8	; 0x08
     c28:	88 23       	and	r24, r24
     c2a:	51 f0       	breq	.+20     	; 0xc40 <prvUnlockQueue+0x58>
     c2c:	ce 01       	movw	r24, r28
     c2e:	08 96       	adiw	r24, 0x08	; 8
     c30:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <xTaskRemoveFromEventList>
     c34:	81 11       	cpse	r24, r1
     c36:	0e 94 9f 0f 	call	0x1f3e	; 0x1f3e <vTaskMissedYield>
     c3a:	11 50       	subi	r17, 0x01	; 1
     c3c:	11 16       	cp	r1, r17
     c3e:	9c f3       	brlt	.-26     	; 0xc26 <prvUnlockQueue+0x3e>
     c40:	8f ef       	ldi	r24, 0xFF	; 255
     c42:	89 a3       	std	Y+33, r24	; 0x21
     c44:	0f 90       	pop	r0
     c46:	0f be       	out	0x3f, r0	; 63
     c48:	df 91       	pop	r29
     c4a:	cf 91       	pop	r28
     c4c:	1f 91       	pop	r17
     c4e:	08 95       	ret

00000c50 <xQueueGenericReset>:
     c50:	cf 93       	push	r28
     c52:	df 93       	push	r29
     c54:	ec 01       	movw	r28, r24
     c56:	0f b6       	in	r0, 0x3f	; 63
     c58:	f8 94       	cli
     c5a:	0f 92       	push	r0
     c5c:	e8 81       	ld	r30, Y
     c5e:	f9 81       	ldd	r31, Y+1	; 0x01
     c60:	8f 8d       	ldd	r24, Y+31	; 0x1f
     c62:	28 a1       	ldd	r18, Y+32	; 0x20
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	30 e0       	ldi	r19, 0x00	; 0
     c68:	82 9f       	mul	r24, r18
     c6a:	a0 01       	movw	r20, r0
     c6c:	83 9f       	mul	r24, r19
     c6e:	50 0d       	add	r21, r0
     c70:	92 9f       	mul	r25, r18
     c72:	50 0d       	add	r21, r0
     c74:	11 24       	eor	r1, r1
     c76:	4e 0f       	add	r20, r30
     c78:	5f 1f       	adc	r21, r31
     c7a:	5d 83       	std	Y+5, r21	; 0x05
     c7c:	4c 83       	std	Y+4, r20	; 0x04
     c7e:	1e 8e       	std	Y+30, r1	; 0x1e
     c80:	fb 83       	std	Y+3, r31	; 0x03
     c82:	ea 83       	std	Y+2, r30	; 0x02
     c84:	01 97       	sbiw	r24, 0x01	; 1
     c86:	28 9f       	mul	r18, r24
     c88:	a0 01       	movw	r20, r0
     c8a:	29 9f       	mul	r18, r25
     c8c:	50 0d       	add	r21, r0
     c8e:	38 9f       	mul	r19, r24
     c90:	50 0d       	add	r21, r0
     c92:	11 24       	eor	r1, r1
     c94:	cf 01       	movw	r24, r30
     c96:	84 0f       	add	r24, r20
     c98:	95 1f       	adc	r25, r21
     c9a:	9f 83       	std	Y+7, r25	; 0x07
     c9c:	8e 83       	std	Y+6, r24	; 0x06
     c9e:	8f ef       	ldi	r24, 0xFF	; 255
     ca0:	89 a3       	std	Y+33, r24	; 0x21
     ca2:	8a a3       	std	Y+34, r24	; 0x22
     ca4:	61 11       	cpse	r22, r1
     ca6:	0b c0       	rjmp	.+22     	; 0xcbe <xQueueGenericReset+0x6e>
     ca8:	88 85       	ldd	r24, Y+8	; 0x08
     caa:	88 23       	and	r24, r24
     cac:	71 f0       	breq	.+28     	; 0xcca <xQueueGenericReset+0x7a>
     cae:	ce 01       	movw	r24, r28
     cb0:	08 96       	adiw	r24, 0x08	; 8
     cb2:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <xTaskRemoveFromEventList>
     cb6:	88 23       	and	r24, r24
     cb8:	41 f0       	breq	.+16     	; 0xcca <xQueueGenericReset+0x7a>
     cba:	2b de       	rcall	.-938    	; 0x912 <vPortYield>
     cbc:	06 c0       	rjmp	.+12     	; 0xcca <xQueueGenericReset+0x7a>
     cbe:	ce 01       	movw	r24, r28
     cc0:	08 96       	adiw	r24, 0x08	; 8
     cc2:	59 dd       	rcall	.-1358   	; 0x776 <vListInitialise>
     cc4:	ce 01       	movw	r24, r28
     cc6:	43 96       	adiw	r24, 0x13	; 19
     cc8:	56 dd       	rcall	.-1364   	; 0x776 <vListInitialise>
     cca:	0f 90       	pop	r0
     ccc:	0f be       	out	0x3f, r0	; 63
     cce:	81 e0       	ldi	r24, 0x01	; 1
     cd0:	df 91       	pop	r29
     cd2:	cf 91       	pop	r28
     cd4:	08 95       	ret

00000cd6 <prvInitialiseNewQueue>:
     cd6:	0f 93       	push	r16
     cd8:	1f 93       	push	r17
     cda:	f8 01       	movw	r30, r16
     cdc:	61 11       	cpse	r22, r1
     cde:	03 c0       	rjmp	.+6      	; 0xce6 <prvInitialiseNewQueue+0x10>
     ce0:	11 83       	std	Z+1, r17	; 0x01
     ce2:	00 83       	st	Z, r16
     ce4:	02 c0       	rjmp	.+4      	; 0xcea <prvInitialiseNewQueue+0x14>
     ce6:	51 83       	std	Z+1, r21	; 0x01
     ce8:	40 83       	st	Z, r20
     cea:	87 8f       	std	Z+31, r24	; 0x1f
     cec:	60 a3       	std	Z+32, r22	; 0x20
     cee:	61 e0       	ldi	r22, 0x01	; 1
     cf0:	cf 01       	movw	r24, r30
     cf2:	ae df       	rcall	.-164    	; 0xc50 <xQueueGenericReset>
     cf4:	1f 91       	pop	r17
     cf6:	0f 91       	pop	r16
     cf8:	08 95       	ret

00000cfa <xQueueGenericCreate>:
     cfa:	df 92       	push	r13
     cfc:	ef 92       	push	r14
     cfe:	ff 92       	push	r15
     d00:	0f 93       	push	r16
     d02:	1f 93       	push	r17
     d04:	cf 93       	push	r28
     d06:	df 93       	push	r29
     d08:	f8 2e       	mov	r15, r24
     d0a:	e6 2e       	mov	r14, r22
     d0c:	d4 2e       	mov	r13, r20
     d0e:	86 9f       	mul	r24, r22
     d10:	c0 01       	movw	r24, r0
     d12:	11 24       	eor	r1, r1
     d14:	83 96       	adiw	r24, 0x23	; 35
     d16:	4a dc       	rcall	.-1900   	; 0x5ac <pvPortMalloc>
     d18:	ec 01       	movw	r28, r24
     d1a:	00 97       	sbiw	r24, 0x00	; 0
     d1c:	41 f0       	breq	.+16     	; 0xd2e <xQueueGenericCreate+0x34>
     d1e:	8c 01       	movw	r16, r24
     d20:	2d 2d       	mov	r18, r13
     d22:	ac 01       	movw	r20, r24
     d24:	4d 5d       	subi	r20, 0xDD	; 221
     d26:	5f 4f       	sbci	r21, 0xFF	; 255
     d28:	6e 2d       	mov	r22, r14
     d2a:	8f 2d       	mov	r24, r15
     d2c:	d4 df       	rcall	.-88     	; 0xcd6 <prvInitialiseNewQueue>
     d2e:	ce 01       	movw	r24, r28
     d30:	df 91       	pop	r29
     d32:	cf 91       	pop	r28
     d34:	1f 91       	pop	r17
     d36:	0f 91       	pop	r16
     d38:	ff 90       	pop	r15
     d3a:	ef 90       	pop	r14
     d3c:	df 90       	pop	r13
     d3e:	08 95       	ret

00000d40 <xQueueGenericSend>:
     d40:	cf 92       	push	r12
     d42:	df 92       	push	r13
     d44:	ef 92       	push	r14
     d46:	ff 92       	push	r15
     d48:	0f 93       	push	r16
     d4a:	1f 93       	push	r17
     d4c:	cf 93       	push	r28
     d4e:	df 93       	push	r29
     d50:	cd b7       	in	r28, 0x3d	; 61
     d52:	de b7       	in	r29, 0x3e	; 62
     d54:	29 97       	sbiw	r28, 0x09	; 9
     d56:	0f b6       	in	r0, 0x3f	; 63
     d58:	f8 94       	cli
     d5a:	de bf       	out	0x3e, r29	; 62
     d5c:	0f be       	out	0x3f, r0	; 63
     d5e:	cd bf       	out	0x3d, r28	; 61
     d60:	7c 01       	movw	r14, r24
     d62:	6b 01       	movw	r12, r22
     d64:	2e 83       	std	Y+6, r18	; 0x06
     d66:	3f 83       	std	Y+7, r19	; 0x07
     d68:	48 87       	std	Y+8, r20	; 0x08
     d6a:	59 87       	std	Y+9, r21	; 0x09
     d6c:	10 e0       	ldi	r17, 0x00	; 0
     d6e:	0f b6       	in	r0, 0x3f	; 63
     d70:	f8 94       	cli
     d72:	0f 92       	push	r0
     d74:	f7 01       	movw	r30, r14
     d76:	96 8d       	ldd	r25, Z+30	; 0x1e
     d78:	87 8d       	ldd	r24, Z+31	; 0x1f
     d7a:	98 17       	cp	r25, r24
     d7c:	10 f0       	brcs	.+4      	; 0xd82 <xQueueGenericSend+0x42>
     d7e:	02 30       	cpi	r16, 0x02	; 2
     d80:	a9 f4       	brne	.+42     	; 0xdac <xQueueGenericSend+0x6c>
     d82:	40 2f       	mov	r20, r16
     d84:	b6 01       	movw	r22, r12
     d86:	c7 01       	movw	r24, r14
     d88:	b6 de       	rcall	.-660    	; 0xaf6 <prvCopyDataToQueue>
     d8a:	f7 01       	movw	r30, r14
     d8c:	93 89       	ldd	r25, Z+19	; 0x13
     d8e:	99 23       	and	r25, r25
     d90:	39 f0       	breq	.+14     	; 0xda0 <xQueueGenericSend+0x60>
     d92:	c7 01       	movw	r24, r14
     d94:	43 96       	adiw	r24, 0x13	; 19
     d96:	ad d7       	rcall	.+3930   	; 0x1cf2 <xTaskRemoveFromEventList>
     d98:	88 23       	and	r24, r24
     d9a:	21 f0       	breq	.+8      	; 0xda4 <xQueueGenericSend+0x64>
     d9c:	ba dd       	rcall	.-1164   	; 0x912 <vPortYield>
     d9e:	02 c0       	rjmp	.+4      	; 0xda4 <xQueueGenericSend+0x64>
     da0:	81 11       	cpse	r24, r1
     da2:	b7 dd       	rcall	.-1170   	; 0x912 <vPortYield>
     da4:	0f 90       	pop	r0
     da6:	0f be       	out	0x3f, r0	; 63
     da8:	81 e0       	ldi	r24, 0x01	; 1
     daa:	48 c0       	rjmp	.+144    	; 0xe3c <xQueueGenericSend+0xfc>
     dac:	8e 81       	ldd	r24, Y+6	; 0x06
     dae:	9f 81       	ldd	r25, Y+7	; 0x07
     db0:	a8 85       	ldd	r26, Y+8	; 0x08
     db2:	b9 85       	ldd	r27, Y+9	; 0x09
     db4:	89 2b       	or	r24, r25
     db6:	8a 2b       	or	r24, r26
     db8:	8b 2b       	or	r24, r27
     dba:	21 f4       	brne	.+8      	; 0xdc4 <xQueueGenericSend+0x84>
     dbc:	0f 90       	pop	r0
     dbe:	0f be       	out	0x3f, r0	; 63
     dc0:	80 e0       	ldi	r24, 0x00	; 0
     dc2:	3c c0       	rjmp	.+120    	; 0xe3c <xQueueGenericSend+0xfc>
     dc4:	11 11       	cpse	r17, r1
     dc6:	05 c0       	rjmp	.+10     	; 0xdd2 <xQueueGenericSend+0x92>
     dc8:	ce 01       	movw	r24, r28
     dca:	01 96       	adiw	r24, 0x01	; 1
     dcc:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <vTaskInternalSetTimeOutState>
     dd0:	11 e0       	ldi	r17, 0x01	; 1
     dd2:	0f 90       	pop	r0
     dd4:	0f be       	out	0x3f, r0	; 63
     dd6:	7c d4       	rcall	.+2296   	; 0x16d0 <vTaskSuspendAll>
     dd8:	0f b6       	in	r0, 0x3f	; 63
     dda:	f8 94       	cli
     ddc:	0f 92       	push	r0
     dde:	f7 01       	movw	r30, r14
     de0:	81 a1       	ldd	r24, Z+33	; 0x21
     de2:	8f 3f       	cpi	r24, 0xFF	; 255
     de4:	09 f4       	brne	.+2      	; 0xde8 <xQueueGenericSend+0xa8>
     de6:	11 a2       	std	Z+33, r1	; 0x21
     de8:	f7 01       	movw	r30, r14
     dea:	82 a1       	ldd	r24, Z+34	; 0x22
     dec:	8f 3f       	cpi	r24, 0xFF	; 255
     dee:	09 f4       	brne	.+2      	; 0xdf2 <xQueueGenericSend+0xb2>
     df0:	12 a2       	std	Z+34, r1	; 0x22
     df2:	0f 90       	pop	r0
     df4:	0f be       	out	0x3f, r0	; 63
     df6:	be 01       	movw	r22, r28
     df8:	6a 5f       	subi	r22, 0xFA	; 250
     dfa:	7f 4f       	sbci	r23, 0xFF	; 255
     dfc:	ce 01       	movw	r24, r28
     dfe:	01 96       	adiw	r24, 0x01	; 1
     e00:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <xTaskCheckForTimeOut>
     e04:	81 11       	cpse	r24, r1
     e06:	16 c0       	rjmp	.+44     	; 0xe34 <xQueueGenericSend+0xf4>
     e08:	c7 01       	movw	r24, r14
     e0a:	67 de       	rcall	.-818    	; 0xada <prvIsQueueFull>
     e0c:	88 23       	and	r24, r24
     e0e:	71 f0       	breq	.+28     	; 0xe2c <xQueueGenericSend+0xec>
     e10:	4e 81       	ldd	r20, Y+6	; 0x06
     e12:	5f 81       	ldd	r21, Y+7	; 0x07
     e14:	68 85       	ldd	r22, Y+8	; 0x08
     e16:	79 85       	ldd	r23, Y+9	; 0x09
     e18:	c7 01       	movw	r24, r14
     e1a:	08 96       	adiw	r24, 0x08	; 8
     e1c:	11 d7       	rcall	.+3618   	; 0x1c40 <vTaskPlaceOnEventList>
     e1e:	c7 01       	movw	r24, r14
     e20:	e3 de       	rcall	.-570    	; 0xbe8 <prvUnlockQueue>
     e22:	96 d5       	rcall	.+2860   	; 0x1950 <xTaskResumeAll>
     e24:	81 11       	cpse	r24, r1
     e26:	a3 cf       	rjmp	.-186    	; 0xd6e <xQueueGenericSend+0x2e>
     e28:	74 dd       	rcall	.-1304   	; 0x912 <vPortYield>
     e2a:	a1 cf       	rjmp	.-190    	; 0xd6e <xQueueGenericSend+0x2e>
     e2c:	c7 01       	movw	r24, r14
     e2e:	dc de       	rcall	.-584    	; 0xbe8 <prvUnlockQueue>
     e30:	8f d5       	rcall	.+2846   	; 0x1950 <xTaskResumeAll>
     e32:	9d cf       	rjmp	.-198    	; 0xd6e <xQueueGenericSend+0x2e>
     e34:	c7 01       	movw	r24, r14
     e36:	d8 de       	rcall	.-592    	; 0xbe8 <prvUnlockQueue>
     e38:	8b d5       	rcall	.+2838   	; 0x1950 <xTaskResumeAll>
     e3a:	80 e0       	ldi	r24, 0x00	; 0
     e3c:	29 96       	adiw	r28, 0x09	; 9
     e3e:	0f b6       	in	r0, 0x3f	; 63
     e40:	f8 94       	cli
     e42:	de bf       	out	0x3e, r29	; 62
     e44:	0f be       	out	0x3f, r0	; 63
     e46:	cd bf       	out	0x3d, r28	; 61
     e48:	df 91       	pop	r29
     e4a:	cf 91       	pop	r28
     e4c:	1f 91       	pop	r17
     e4e:	0f 91       	pop	r16
     e50:	ff 90       	pop	r15
     e52:	ef 90       	pop	r14
     e54:	df 90       	pop	r13
     e56:	cf 90       	pop	r12
     e58:	08 95       	ret

00000e5a <prvInitialiseMutex>:
     e5a:	0f 93       	push	r16
     e5c:	00 97       	sbiw	r24, 0x00	; 0
     e5e:	69 f0       	breq	.+26     	; 0xe7a <prvInitialiseMutex+0x20>
     e60:	fc 01       	movw	r30, r24
     e62:	15 82       	std	Z+5, r1	; 0x05
     e64:	14 82       	std	Z+4, r1	; 0x04
     e66:	11 82       	std	Z+1, r1	; 0x01
     e68:	10 82       	st	Z, r1
     e6a:	16 82       	std	Z+6, r1	; 0x06
     e6c:	00 e0       	ldi	r16, 0x00	; 0
     e6e:	20 e0       	ldi	r18, 0x00	; 0
     e70:	30 e0       	ldi	r19, 0x00	; 0
     e72:	a9 01       	movw	r20, r18
     e74:	60 e0       	ldi	r22, 0x00	; 0
     e76:	70 e0       	ldi	r23, 0x00	; 0
     e78:	63 df       	rcall	.-314    	; 0xd40 <xQueueGenericSend>
     e7a:	0f 91       	pop	r16
     e7c:	08 95       	ret

00000e7e <xQueueCreateMutex>:
     e7e:	cf 93       	push	r28
     e80:	df 93       	push	r29
     e82:	48 2f       	mov	r20, r24
     e84:	60 e0       	ldi	r22, 0x00	; 0
     e86:	81 e0       	ldi	r24, 0x01	; 1
     e88:	38 df       	rcall	.-400    	; 0xcfa <xQueueGenericCreate>
     e8a:	ec 01       	movw	r28, r24
     e8c:	e6 df       	rcall	.-52     	; 0xe5a <prvInitialiseMutex>
     e8e:	ce 01       	movw	r24, r28
     e90:	df 91       	pop	r29
     e92:	cf 91       	pop	r28
     e94:	08 95       	ret

00000e96 <xQueueGenericSendFromISR>:
     e96:	ef 92       	push	r14
     e98:	ff 92       	push	r15
     e9a:	0f 93       	push	r16
     e9c:	1f 93       	push	r17
     e9e:	cf 93       	push	r28
     ea0:	df 93       	push	r29
     ea2:	8a 01       	movw	r16, r20
     ea4:	fc 01       	movw	r30, r24
     ea6:	56 8d       	ldd	r21, Z+30	; 0x1e
     ea8:	37 8d       	ldd	r19, Z+31	; 0x1f
     eaa:	53 17       	cp	r21, r19
     eac:	10 f0       	brcs	.+4      	; 0xeb2 <xQueueGenericSendFromISR+0x1c>
     eae:	22 30       	cpi	r18, 0x02	; 2
     eb0:	f1 f4       	brne	.+60     	; 0xeee <xQueueGenericSendFromISR+0x58>
     eb2:	42 2f       	mov	r20, r18
     eb4:	78 01       	movw	r14, r16
     eb6:	ec 01       	movw	r28, r24
     eb8:	1a a1       	ldd	r17, Y+34	; 0x22
     eba:	8e 8d       	ldd	r24, Y+30	; 0x1e
     ebc:	ce 01       	movw	r24, r28
     ebe:	1b de       	rcall	.-970    	; 0xaf6 <prvCopyDataToQueue>
     ec0:	1f 3f       	cpi	r17, 0xFF	; 255
     ec2:	79 f4       	brne	.+30     	; 0xee2 <xQueueGenericSendFromISR+0x4c>
     ec4:	8b 89       	ldd	r24, Y+19	; 0x13
     ec6:	88 23       	and	r24, r24
     ec8:	a1 f0       	breq	.+40     	; 0xef2 <xQueueGenericSendFromISR+0x5c>
     eca:	ce 01       	movw	r24, r28
     ecc:	43 96       	adiw	r24, 0x13	; 19
     ece:	11 d7       	rcall	.+3618   	; 0x1cf2 <xTaskRemoveFromEventList>
     ed0:	88 23       	and	r24, r24
     ed2:	89 f0       	breq	.+34     	; 0xef6 <xQueueGenericSendFromISR+0x60>
     ed4:	e1 14       	cp	r14, r1
     ed6:	f1 04       	cpc	r15, r1
     ed8:	81 f0       	breq	.+32     	; 0xefa <xQueueGenericSendFromISR+0x64>
     eda:	81 e0       	ldi	r24, 0x01	; 1
     edc:	f7 01       	movw	r30, r14
     ede:	80 83       	st	Z, r24
     ee0:	0d c0       	rjmp	.+26     	; 0xefc <xQueueGenericSendFromISR+0x66>
     ee2:	ff 24       	eor	r15, r15
     ee4:	f3 94       	inc	r15
     ee6:	f1 0e       	add	r15, r17
     ee8:	fa a2       	std	Y+34, r15	; 0x22
     eea:	81 e0       	ldi	r24, 0x01	; 1
     eec:	07 c0       	rjmp	.+14     	; 0xefc <xQueueGenericSendFromISR+0x66>
     eee:	80 e0       	ldi	r24, 0x00	; 0
     ef0:	05 c0       	rjmp	.+10     	; 0xefc <xQueueGenericSendFromISR+0x66>
     ef2:	81 e0       	ldi	r24, 0x01	; 1
     ef4:	03 c0       	rjmp	.+6      	; 0xefc <xQueueGenericSendFromISR+0x66>
     ef6:	81 e0       	ldi	r24, 0x01	; 1
     ef8:	01 c0       	rjmp	.+2      	; 0xefc <xQueueGenericSendFromISR+0x66>
     efa:	81 e0       	ldi	r24, 0x01	; 1
     efc:	df 91       	pop	r29
     efe:	cf 91       	pop	r28
     f00:	1f 91       	pop	r17
     f02:	0f 91       	pop	r16
     f04:	ff 90       	pop	r15
     f06:	ef 90       	pop	r14
     f08:	08 95       	ret

00000f0a <xQueueReceive>:
     f0a:	cf 92       	push	r12
     f0c:	df 92       	push	r13
     f0e:	ef 92       	push	r14
     f10:	ff 92       	push	r15
     f12:	0f 93       	push	r16
     f14:	1f 93       	push	r17
     f16:	cf 93       	push	r28
     f18:	df 93       	push	r29
     f1a:	cd b7       	in	r28, 0x3d	; 61
     f1c:	de b7       	in	r29, 0x3e	; 62
     f1e:	29 97       	sbiw	r28, 0x09	; 9
     f20:	0f b6       	in	r0, 0x3f	; 63
     f22:	f8 94       	cli
     f24:	de bf       	out	0x3e, r29	; 62
     f26:	0f be       	out	0x3f, r0	; 63
     f28:	cd bf       	out	0x3d, r28	; 61
     f2a:	8c 01       	movw	r16, r24
     f2c:	6b 01       	movw	r12, r22
     f2e:	2e 83       	std	Y+6, r18	; 0x06
     f30:	3f 83       	std	Y+7, r19	; 0x07
     f32:	48 87       	std	Y+8, r20	; 0x08
     f34:	59 87       	std	Y+9, r21	; 0x09
     f36:	e1 2c       	mov	r14, r1
     f38:	0f b6       	in	r0, 0x3f	; 63
     f3a:	f8 94       	cli
     f3c:	0f 92       	push	r0
     f3e:	f8 01       	movw	r30, r16
     f40:	f6 8c       	ldd	r15, Z+30	; 0x1e
     f42:	ff 20       	and	r15, r15
     f44:	91 f0       	breq	.+36     	; 0xf6a <xQueueReceive+0x60>
     f46:	b6 01       	movw	r22, r12
     f48:	c8 01       	movw	r24, r16
     f4a:	34 de       	rcall	.-920    	; 0xbb4 <prvCopyDataFromQueue>
     f4c:	fa 94       	dec	r15
     f4e:	f8 01       	movw	r30, r16
     f50:	f6 8e       	std	Z+30, r15	; 0x1e
     f52:	80 85       	ldd	r24, Z+8	; 0x08
     f54:	88 23       	and	r24, r24
     f56:	29 f0       	breq	.+10     	; 0xf62 <xQueueReceive+0x58>
     f58:	c8 01       	movw	r24, r16
     f5a:	08 96       	adiw	r24, 0x08	; 8
     f5c:	ca d6       	rcall	.+3476   	; 0x1cf2 <xTaskRemoveFromEventList>
     f5e:	81 11       	cpse	r24, r1
     f60:	d8 dc       	rcall	.-1616   	; 0x912 <vPortYield>
     f62:	0f 90       	pop	r0
     f64:	0f be       	out	0x3f, r0	; 63
     f66:	81 e0       	ldi	r24, 0x01	; 1
     f68:	4c c0       	rjmp	.+152    	; 0x1002 <__EEPROM_REGION_LENGTH__+0x2>
     f6a:	8e 81       	ldd	r24, Y+6	; 0x06
     f6c:	9f 81       	ldd	r25, Y+7	; 0x07
     f6e:	a8 85       	ldd	r26, Y+8	; 0x08
     f70:	b9 85       	ldd	r27, Y+9	; 0x09
     f72:	89 2b       	or	r24, r25
     f74:	8a 2b       	or	r24, r26
     f76:	8b 2b       	or	r24, r27
     f78:	21 f4       	brne	.+8      	; 0xf82 <xQueueReceive+0x78>
     f7a:	0f 90       	pop	r0
     f7c:	0f be       	out	0x3f, r0	; 63
     f7e:	80 e0       	ldi	r24, 0x00	; 0
     f80:	40 c0       	rjmp	.+128    	; 0x1002 <__EEPROM_REGION_LENGTH__+0x2>
     f82:	e1 10       	cpse	r14, r1
     f84:	05 c0       	rjmp	.+10     	; 0xf90 <xQueueReceive+0x86>
     f86:	ce 01       	movw	r24, r28
     f88:	01 96       	adiw	r24, 0x01	; 1
     f8a:	62 d7       	rcall	.+3780   	; 0x1e50 <vTaskInternalSetTimeOutState>
     f8c:	ee 24       	eor	r14, r14
     f8e:	e3 94       	inc	r14
     f90:	0f 90       	pop	r0
     f92:	0f be       	out	0x3f, r0	; 63
     f94:	9d d3       	rcall	.+1850   	; 0x16d0 <vTaskSuspendAll>
     f96:	0f b6       	in	r0, 0x3f	; 63
     f98:	f8 94       	cli
     f9a:	0f 92       	push	r0
     f9c:	f8 01       	movw	r30, r16
     f9e:	81 a1       	ldd	r24, Z+33	; 0x21
     fa0:	8f 3f       	cpi	r24, 0xFF	; 255
     fa2:	09 f4       	brne	.+2      	; 0xfa6 <xQueueReceive+0x9c>
     fa4:	11 a2       	std	Z+33, r1	; 0x21
     fa6:	f8 01       	movw	r30, r16
     fa8:	82 a1       	ldd	r24, Z+34	; 0x22
     faa:	8f 3f       	cpi	r24, 0xFF	; 255
     fac:	09 f4       	brne	.+2      	; 0xfb0 <xQueueReceive+0xa6>
     fae:	12 a2       	std	Z+34, r1	; 0x22
     fb0:	0f 90       	pop	r0
     fb2:	0f be       	out	0x3f, r0	; 63
     fb4:	be 01       	movw	r22, r28
     fb6:	6a 5f       	subi	r22, 0xFA	; 250
     fb8:	7f 4f       	sbci	r23, 0xFF	; 255
     fba:	ce 01       	movw	r24, r28
     fbc:	01 96       	adiw	r24, 0x01	; 1
     fbe:	59 d7       	rcall	.+3762   	; 0x1e72 <xTaskCheckForTimeOut>
     fc0:	81 11       	cpse	r24, r1
     fc2:	16 c0       	rjmp	.+44     	; 0xff0 <xQueueReceive+0xe6>
     fc4:	c8 01       	movw	r24, r16
     fc6:	7c dd       	rcall	.-1288   	; 0xac0 <prvIsQueueEmpty>
     fc8:	88 23       	and	r24, r24
     fca:	71 f0       	breq	.+28     	; 0xfe8 <xQueueReceive+0xde>
     fcc:	4e 81       	ldd	r20, Y+6	; 0x06
     fce:	5f 81       	ldd	r21, Y+7	; 0x07
     fd0:	68 85       	ldd	r22, Y+8	; 0x08
     fd2:	79 85       	ldd	r23, Y+9	; 0x09
     fd4:	c8 01       	movw	r24, r16
     fd6:	43 96       	adiw	r24, 0x13	; 19
     fd8:	33 d6       	rcall	.+3174   	; 0x1c40 <vTaskPlaceOnEventList>
     fda:	c8 01       	movw	r24, r16
     fdc:	05 de       	rcall	.-1014   	; 0xbe8 <prvUnlockQueue>
     fde:	b8 d4       	rcall	.+2416   	; 0x1950 <xTaskResumeAll>
     fe0:	81 11       	cpse	r24, r1
     fe2:	aa cf       	rjmp	.-172    	; 0xf38 <xQueueReceive+0x2e>
     fe4:	96 dc       	rcall	.-1748   	; 0x912 <vPortYield>
     fe6:	a8 cf       	rjmp	.-176    	; 0xf38 <xQueueReceive+0x2e>
     fe8:	c8 01       	movw	r24, r16
     fea:	fe dd       	rcall	.-1028   	; 0xbe8 <prvUnlockQueue>
     fec:	b1 d4       	rcall	.+2402   	; 0x1950 <xTaskResumeAll>
     fee:	a4 cf       	rjmp	.-184    	; 0xf38 <xQueueReceive+0x2e>
     ff0:	c8 01       	movw	r24, r16
     ff2:	fa dd       	rcall	.-1036   	; 0xbe8 <prvUnlockQueue>
     ff4:	ad d4       	rcall	.+2394   	; 0x1950 <xTaskResumeAll>
     ff6:	c8 01       	movw	r24, r16
     ff8:	63 dd       	rcall	.-1338   	; 0xac0 <prvIsQueueEmpty>
     ffa:	88 23       	and	r24, r24
     ffc:	09 f4       	brne	.+2      	; 0x1000 <__EEPROM_REGION_LENGTH__>
     ffe:	9c cf       	rjmp	.-200    	; 0xf38 <xQueueReceive+0x2e>
    1000:	80 e0       	ldi	r24, 0x00	; 0
    1002:	29 96       	adiw	r28, 0x09	; 9
    1004:	0f b6       	in	r0, 0x3f	; 63
    1006:	f8 94       	cli
    1008:	de bf       	out	0x3e, r29	; 62
    100a:	0f be       	out	0x3f, r0	; 63
    100c:	cd bf       	out	0x3d, r28	; 61
    100e:	df 91       	pop	r29
    1010:	cf 91       	pop	r28
    1012:	1f 91       	pop	r17
    1014:	0f 91       	pop	r16
    1016:	ff 90       	pop	r15
    1018:	ef 90       	pop	r14
    101a:	df 90       	pop	r13
    101c:	cf 90       	pop	r12
    101e:	08 95       	ret

00001020 <xQueueSemaphoreTake>:
    1020:	ef 92       	push	r14
    1022:	ff 92       	push	r15
    1024:	0f 93       	push	r16
    1026:	1f 93       	push	r17
    1028:	cf 93       	push	r28
    102a:	df 93       	push	r29
    102c:	cd b7       	in	r28, 0x3d	; 61
    102e:	de b7       	in	r29, 0x3e	; 62
    1030:	29 97       	sbiw	r28, 0x09	; 9
    1032:	0f b6       	in	r0, 0x3f	; 63
    1034:	f8 94       	cli
    1036:	de bf       	out	0x3e, r29	; 62
    1038:	0f be       	out	0x3f, r0	; 63
    103a:	cd bf       	out	0x3d, r28	; 61
    103c:	8c 01       	movw	r16, r24
    103e:	4e 83       	std	Y+6, r20	; 0x06
    1040:	5f 83       	std	Y+7, r21	; 0x07
    1042:	68 87       	std	Y+8, r22	; 0x08
    1044:	79 87       	std	Y+9, r23	; 0x09
    1046:	e1 2c       	mov	r14, r1
    1048:	f1 2c       	mov	r15, r1
    104a:	0f b6       	in	r0, 0x3f	; 63
    104c:	f8 94       	cli
    104e:	0f 92       	push	r0
    1050:	f8 01       	movw	r30, r16
    1052:	86 8d       	ldd	r24, Z+30	; 0x1e
    1054:	88 23       	and	r24, r24
    1056:	c1 f0       	breq	.+48     	; 0x1088 <xQueueSemaphoreTake+0x68>
    1058:	81 50       	subi	r24, 0x01	; 1
    105a:	86 8f       	std	Z+30, r24	; 0x1e
    105c:	80 81       	ld	r24, Z
    105e:	91 81       	ldd	r25, Z+1	; 0x01
    1060:	89 2b       	or	r24, r25
    1062:	29 f4       	brne	.+10     	; 0x106e <xQueueSemaphoreTake+0x4e>
    1064:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <pvTaskIncrementMutexHeldCount>
    1068:	f8 01       	movw	r30, r16
    106a:	95 83       	std	Z+5, r25	; 0x05
    106c:	84 83       	std	Z+4, r24	; 0x04
    106e:	f8 01       	movw	r30, r16
    1070:	80 85       	ldd	r24, Z+8	; 0x08
    1072:	88 23       	and	r24, r24
    1074:	29 f0       	breq	.+10     	; 0x1080 <xQueueSemaphoreTake+0x60>
    1076:	c8 01       	movw	r24, r16
    1078:	08 96       	adiw	r24, 0x08	; 8
    107a:	3b d6       	rcall	.+3190   	; 0x1cf2 <xTaskRemoveFromEventList>
    107c:	81 11       	cpse	r24, r1
    107e:	49 dc       	rcall	.-1902   	; 0x912 <vPortYield>
    1080:	0f 90       	pop	r0
    1082:	0f be       	out	0x3f, r0	; 63
    1084:	81 e0       	ldi	r24, 0x01	; 1
    1086:	6a c0       	rjmp	.+212    	; 0x115c <xQueueSemaphoreTake+0x13c>
    1088:	8e 81       	ldd	r24, Y+6	; 0x06
    108a:	9f 81       	ldd	r25, Y+7	; 0x07
    108c:	a8 85       	ldd	r26, Y+8	; 0x08
    108e:	b9 85       	ldd	r27, Y+9	; 0x09
    1090:	89 2b       	or	r24, r25
    1092:	8a 2b       	or	r24, r26
    1094:	8b 2b       	or	r24, r27
    1096:	21 f4       	brne	.+8      	; 0x10a0 <xQueueSemaphoreTake+0x80>
    1098:	0f 90       	pop	r0
    109a:	0f be       	out	0x3f, r0	; 63
    109c:	80 e0       	ldi	r24, 0x00	; 0
    109e:	5e c0       	rjmp	.+188    	; 0x115c <xQueueSemaphoreTake+0x13c>
    10a0:	f1 10       	cpse	r15, r1
    10a2:	05 c0       	rjmp	.+10     	; 0x10ae <xQueueSemaphoreTake+0x8e>
    10a4:	ce 01       	movw	r24, r28
    10a6:	01 96       	adiw	r24, 0x01	; 1
    10a8:	d3 d6       	rcall	.+3494   	; 0x1e50 <vTaskInternalSetTimeOutState>
    10aa:	ff 24       	eor	r15, r15
    10ac:	f3 94       	inc	r15
    10ae:	0f 90       	pop	r0
    10b0:	0f be       	out	0x3f, r0	; 63
    10b2:	0e d3       	rcall	.+1564   	; 0x16d0 <vTaskSuspendAll>
    10b4:	0f b6       	in	r0, 0x3f	; 63
    10b6:	f8 94       	cli
    10b8:	0f 92       	push	r0
    10ba:	f8 01       	movw	r30, r16
    10bc:	81 a1       	ldd	r24, Z+33	; 0x21
    10be:	8f 3f       	cpi	r24, 0xFF	; 255
    10c0:	09 f4       	brne	.+2      	; 0x10c4 <xQueueSemaphoreTake+0xa4>
    10c2:	11 a2       	std	Z+33, r1	; 0x21
    10c4:	f8 01       	movw	r30, r16
    10c6:	82 a1       	ldd	r24, Z+34	; 0x22
    10c8:	8f 3f       	cpi	r24, 0xFF	; 255
    10ca:	09 f4       	brne	.+2      	; 0x10ce <xQueueSemaphoreTake+0xae>
    10cc:	12 a2       	std	Z+34, r1	; 0x22
    10ce:	0f 90       	pop	r0
    10d0:	0f be       	out	0x3f, r0	; 63
    10d2:	be 01       	movw	r22, r28
    10d4:	6a 5f       	subi	r22, 0xFA	; 250
    10d6:	7f 4f       	sbci	r23, 0xFF	; 255
    10d8:	ce 01       	movw	r24, r28
    10da:	01 96       	adiw	r24, 0x01	; 1
    10dc:	ca d6       	rcall	.+3476   	; 0x1e72 <xTaskCheckForTimeOut>
    10de:	81 11       	cpse	r24, r1
    10e0:	24 c0       	rjmp	.+72     	; 0x112a <xQueueSemaphoreTake+0x10a>
    10e2:	c8 01       	movw	r24, r16
    10e4:	ed dc       	rcall	.-1574   	; 0xac0 <prvIsQueueEmpty>
    10e6:	88 23       	and	r24, r24
    10e8:	e1 f0       	breq	.+56     	; 0x1122 <xQueueSemaphoreTake+0x102>
    10ea:	f8 01       	movw	r30, r16
    10ec:	80 81       	ld	r24, Z
    10ee:	91 81       	ldd	r25, Z+1	; 0x01
    10f0:	89 2b       	or	r24, r25
    10f2:	49 f4       	brne	.+18     	; 0x1106 <xQueueSemaphoreTake+0xe6>
    10f4:	0f b6       	in	r0, 0x3f	; 63
    10f6:	f8 94       	cli
    10f8:	0f 92       	push	r0
    10fa:	84 81       	ldd	r24, Z+4	; 0x04
    10fc:	95 81       	ldd	r25, Z+5	; 0x05
    10fe:	31 d7       	rcall	.+3682   	; 0x1f62 <xTaskPriorityInherit>
    1100:	e8 2e       	mov	r14, r24
    1102:	0f 90       	pop	r0
    1104:	0f be       	out	0x3f, r0	; 63
    1106:	4e 81       	ldd	r20, Y+6	; 0x06
    1108:	5f 81       	ldd	r21, Y+7	; 0x07
    110a:	68 85       	ldd	r22, Y+8	; 0x08
    110c:	79 85       	ldd	r23, Y+9	; 0x09
    110e:	c8 01       	movw	r24, r16
    1110:	43 96       	adiw	r24, 0x13	; 19
    1112:	96 d5       	rcall	.+2860   	; 0x1c40 <vTaskPlaceOnEventList>
    1114:	c8 01       	movw	r24, r16
    1116:	68 dd       	rcall	.-1328   	; 0xbe8 <prvUnlockQueue>
    1118:	1b d4       	rcall	.+2102   	; 0x1950 <xTaskResumeAll>
    111a:	81 11       	cpse	r24, r1
    111c:	96 cf       	rjmp	.-212    	; 0x104a <xQueueSemaphoreTake+0x2a>
    111e:	f9 db       	rcall	.-2062   	; 0x912 <vPortYield>
    1120:	94 cf       	rjmp	.-216    	; 0x104a <xQueueSemaphoreTake+0x2a>
    1122:	c8 01       	movw	r24, r16
    1124:	61 dd       	rcall	.-1342   	; 0xbe8 <prvUnlockQueue>
    1126:	14 d4       	rcall	.+2088   	; 0x1950 <xTaskResumeAll>
    1128:	90 cf       	rjmp	.-224    	; 0x104a <xQueueSemaphoreTake+0x2a>
    112a:	c8 01       	movw	r24, r16
    112c:	5d dd       	rcall	.-1350   	; 0xbe8 <prvUnlockQueue>
    112e:	10 d4       	rcall	.+2080   	; 0x1950 <xTaskResumeAll>
    1130:	c8 01       	movw	r24, r16
    1132:	c6 dc       	rcall	.-1652   	; 0xac0 <prvIsQueueEmpty>
    1134:	88 23       	and	r24, r24
    1136:	09 f4       	brne	.+2      	; 0x113a <xQueueSemaphoreTake+0x11a>
    1138:	88 cf       	rjmp	.-240    	; 0x104a <xQueueSemaphoreTake+0x2a>
    113a:	ee 20       	and	r14, r14
    113c:	71 f0       	breq	.+28     	; 0x115a <xQueueSemaphoreTake+0x13a>
    113e:	0f b6       	in	r0, 0x3f	; 63
    1140:	f8 94       	cli
    1142:	0f 92       	push	r0
    1144:	c8 01       	movw	r24, r16
    1146:	ac dc       	rcall	.-1704   	; 0xaa0 <prvGetDisinheritPriorityAfterTimeout>
    1148:	68 2f       	mov	r22, r24
    114a:	f8 01       	movw	r30, r16
    114c:	84 81       	ldd	r24, Z+4	; 0x04
    114e:	95 81       	ldd	r25, Z+5	; 0x05
    1150:	ea d7       	rcall	.+4052   	; 0x2126 <vTaskPriorityDisinheritAfterTimeout>
    1152:	0f 90       	pop	r0
    1154:	0f be       	out	0x3f, r0	; 63
    1156:	80 e0       	ldi	r24, 0x00	; 0
    1158:	01 c0       	rjmp	.+2      	; 0x115c <xQueueSemaphoreTake+0x13c>
    115a:	80 e0       	ldi	r24, 0x00	; 0
    115c:	29 96       	adiw	r28, 0x09	; 9
    115e:	0f b6       	in	r0, 0x3f	; 63
    1160:	f8 94       	cli
    1162:	de bf       	out	0x3e, r29	; 62
    1164:	0f be       	out	0x3f, r0	; 63
    1166:	cd bf       	out	0x3d, r28	; 61
    1168:	df 91       	pop	r29
    116a:	cf 91       	pop	r28
    116c:	1f 91       	pop	r17
    116e:	0f 91       	pop	r16
    1170:	ff 90       	pop	r15
    1172:	ef 90       	pop	r14
    1174:	08 95       	ret

00001176 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
    1176:	cf 93       	push	r28
    1178:	df 93       	push	r29
    117a:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    117c:	0f b6       	in	r0, 0x3f	; 63
    117e:	f8 94       	cli
    1180:	0f 92       	push	r0
    1182:	89 a1       	ldd	r24, Y+33	; 0x21
    1184:	8f 3f       	cpi	r24, 0xFF	; 255
    1186:	09 f4       	brne	.+2      	; 0x118a <vQueueWaitForMessageRestricted+0x14>
    1188:	19 a2       	std	Y+33, r1	; 0x21
    118a:	8a a1       	ldd	r24, Y+34	; 0x22
    118c:	8f 3f       	cpi	r24, 0xFF	; 255
    118e:	09 f4       	brne	.+2      	; 0x1192 <vQueueWaitForMessageRestricted+0x1c>
    1190:	1a a2       	std	Y+34, r1	; 0x22
    1192:	0f 90       	pop	r0
    1194:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    1196:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1198:	81 11       	cpse	r24, r1
    119a:	03 c0       	rjmp	.+6      	; 0x11a2 <vQueueWaitForMessageRestricted+0x2c>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    119c:	ce 01       	movw	r24, r28
    119e:	43 96       	adiw	r24, 0x13	; 19
    11a0:	66 d5       	rcall	.+2764   	; 0x1c6e <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
    11a2:	ce 01       	movw	r24, r28
    11a4:	21 dd       	rcall	.-1470   	; 0xbe8 <prvUnlockQueue>
    }
    11a6:	df 91       	pop	r29
    11a8:	cf 91       	pop	r28
    11aa:	08 95       	ret

000011ac <prvResetNextTaskUnblockTime>:
    11ac:	e0 91 21 11 	lds	r30, 0x1121	; 0x801121 <pxDelayedTaskList>
    11b0:	f0 91 22 11 	lds	r31, 0x1122	; 0x801122 <pxDelayedTaskList+0x1>
    11b4:	80 81       	ld	r24, Z
    11b6:	81 11       	cpse	r24, r1
    11b8:	0c c0       	rjmp	.+24     	; 0x11d2 <prvResetNextTaskUnblockTime+0x26>
    11ba:	8f ef       	ldi	r24, 0xFF	; 255
    11bc:	9f ef       	ldi	r25, 0xFF	; 255
    11be:	dc 01       	movw	r26, r24
    11c0:	80 93 eb 10 	sts	0x10EB, r24	; 0x8010eb <xNextTaskUnblockTime>
    11c4:	90 93 ec 10 	sts	0x10EC, r25	; 0x8010ec <xNextTaskUnblockTime+0x1>
    11c8:	a0 93 ed 10 	sts	0x10ED, r26	; 0x8010ed <xNextTaskUnblockTime+0x2>
    11cc:	b0 93 ee 10 	sts	0x10EE, r27	; 0x8010ee <xNextTaskUnblockTime+0x3>
    11d0:	08 95       	ret
    11d2:	e0 91 21 11 	lds	r30, 0x1121	; 0x801121 <pxDelayedTaskList>
    11d6:	f0 91 22 11 	lds	r31, 0x1122	; 0x801122 <pxDelayedTaskList+0x1>
    11da:	07 80       	ldd	r0, Z+7	; 0x07
    11dc:	f0 85       	ldd	r31, Z+8	; 0x08
    11de:	e0 2d       	mov	r30, r0
    11e0:	80 81       	ld	r24, Z
    11e2:	91 81       	ldd	r25, Z+1	; 0x01
    11e4:	a2 81       	ldd	r26, Z+2	; 0x02
    11e6:	b3 81       	ldd	r27, Z+3	; 0x03
    11e8:	80 93 eb 10 	sts	0x10EB, r24	; 0x8010eb <xNextTaskUnblockTime>
    11ec:	90 93 ec 10 	sts	0x10EC, r25	; 0x8010ec <xNextTaskUnblockTime+0x1>
    11f0:	a0 93 ed 10 	sts	0x10ED, r26	; 0x8010ed <xNextTaskUnblockTime+0x2>
    11f4:	b0 93 ee 10 	sts	0x10EE, r27	; 0x8010ee <xNextTaskUnblockTime+0x3>
    11f8:	08 95       	ret

000011fa <prvDeleteTCB>:
    11fa:	cf 93       	push	r28
    11fc:	df 93       	push	r29
    11fe:	ec 01       	movw	r28, r24
    1200:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1202:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1204:	7c da       	rcall	.-2824   	; 0x6fe <vPortFree>
    1206:	ce 01       	movw	r24, r28
    1208:	7a da       	rcall	.-2828   	; 0x6fe <vPortFree>
    120a:	df 91       	pop	r29
    120c:	cf 91       	pop	r28
    120e:	08 95       	ret

00001210 <prvInitialiseNewTask>:
    1210:	4f 92       	push	r4
    1212:	5f 92       	push	r5
    1214:	6f 92       	push	r6
    1216:	7f 92       	push	r7
    1218:	8f 92       	push	r8
    121a:	9f 92       	push	r9
    121c:	af 92       	push	r10
    121e:	bf 92       	push	r11
    1220:	cf 92       	push	r12
    1222:	df 92       	push	r13
    1224:	ef 92       	push	r14
    1226:	ff 92       	push	r15
    1228:	0f 93       	push	r16
    122a:	cf 93       	push	r28
    122c:	df 93       	push	r29
    122e:	2c 01       	movw	r4, r24
    1230:	5b 01       	movw	r10, r22
    1232:	4a 01       	movw	r8, r20
    1234:	39 01       	movw	r6, r18
    1236:	e6 01       	movw	r28, r12
    1238:	65 ea       	ldi	r22, 0xA5	; 165
    123a:	70 e0       	ldi	r23, 0x00	; 0
    123c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    123e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1240:	0e 94 8a 1c 	call	0x3914	; 0x3914 <memset>
    1244:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1246:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1248:	21 e0       	ldi	r18, 0x01	; 1
    124a:	82 1a       	sub	r8, r18
    124c:	91 08       	sbc	r9, r1
    124e:	88 0e       	add	r8, r24
    1250:	99 1e       	adc	r9, r25
    1252:	a1 14       	cp	r10, r1
    1254:	b1 04       	cpc	r11, r1
    1256:	89 f4       	brne	.+34     	; 0x127a <prvInitialiseNewTask+0x6a>
    1258:	15 c0       	rjmp	.+42     	; 0x1284 <prvInitialiseNewTask+0x74>
    125a:	82 2f       	mov	r24, r18
    125c:	90 e0       	ldi	r25, 0x00	; 0
    125e:	f5 01       	movw	r30, r10
    1260:	e8 0f       	add	r30, r24
    1262:	f9 1f       	adc	r31, r25
    1264:	30 81       	ld	r19, Z
    1266:	de 01       	movw	r26, r28
    1268:	a8 0f       	add	r26, r24
    126a:	b9 1f       	adc	r27, r25
    126c:	5d 96       	adiw	r26, 0x1d	; 29
    126e:	3c 93       	st	X, r19
    1270:	80 81       	ld	r24, Z
    1272:	88 23       	and	r24, r24
    1274:	29 f0       	breq	.+10     	; 0x1280 <prvInitialiseNewTask+0x70>
    1276:	2f 5f       	subi	r18, 0xFF	; 255
    1278:	01 c0       	rjmp	.+2      	; 0x127c <prvInitialiseNewTask+0x6c>
    127a:	20 e0       	ldi	r18, 0x00	; 0
    127c:	20 31       	cpi	r18, 0x10	; 16
    127e:	68 f3       	brcs	.-38     	; 0x125a <prvInitialiseNewTask+0x4a>
    1280:	1c a6       	std	Y+44, r1	; 0x2c
    1282:	01 c0       	rjmp	.+2      	; 0x1286 <prvInitialiseNewTask+0x76>
    1284:	1d 8e       	std	Y+29, r1	; 0x1d
    1286:	0a 30       	cpi	r16, 0x0A	; 10
    1288:	08 f0       	brcs	.+2      	; 0x128c <prvInitialiseNewTask+0x7c>
    128a:	09 e0       	ldi	r16, 0x09	; 9
    128c:	0a 8f       	std	Y+26, r16	; 0x1a
    128e:	0d a7       	std	Y+45, r16	; 0x2d
    1290:	1e a6       	std	Y+46, r1	; 0x2e
    1292:	ce 01       	movw	r24, r28
    1294:	02 96       	adiw	r24, 0x02	; 2
    1296:	80 da       	rcall	.-2816   	; 0x798 <vListInitialiseItem>
    1298:	ce 01       	movw	r24, r28
    129a:	0e 96       	adiw	r24, 0x0e	; 14
    129c:	7d da       	rcall	.-2822   	; 0x798 <vListInitialiseItem>
    129e:	db 87       	std	Y+11, r29	; 0x0b
    12a0:	ca 87       	std	Y+10, r28	; 0x0a
    12a2:	8a e0       	ldi	r24, 0x0A	; 10
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	a0 e0       	ldi	r26, 0x00	; 0
    12a8:	b0 e0       	ldi	r27, 0x00	; 0
    12aa:	80 1b       	sub	r24, r16
    12ac:	91 09       	sbc	r25, r1
    12ae:	a1 09       	sbc	r26, r1
    12b0:	b1 09       	sbc	r27, r1
    12b2:	8e 87       	std	Y+14, r24	; 0x0e
    12b4:	9f 87       	std	Y+15, r25	; 0x0f
    12b6:	a8 8b       	std	Y+16, r26	; 0x10
    12b8:	b9 8b       	std	Y+17, r27	; 0x11
    12ba:	df 8b       	std	Y+23, r29	; 0x17
    12bc:	ce 8b       	std	Y+22, r28	; 0x16
    12be:	18 aa       	std	Y+48, r1	; 0x30
    12c0:	1f a6       	std	Y+47, r1	; 0x2f
    12c2:	84 e0       	ldi	r24, 0x04	; 4
    12c4:	fe 01       	movw	r30, r28
    12c6:	f1 96       	adiw	r30, 0x31	; 49
    12c8:	df 01       	movw	r26, r30
    12ca:	1d 92       	st	X+, r1
    12cc:	8a 95       	dec	r24
    12ce:	e9 f7       	brne	.-6      	; 0x12ca <prvInitialiseNewTask+0xba>
    12d0:	1d aa       	std	Y+53, r1	; 0x35
    12d2:	a3 01       	movw	r20, r6
    12d4:	b2 01       	movw	r22, r4
    12d6:	c4 01       	movw	r24, r8
    12d8:	d3 da       	rcall	.-2650   	; 0x880 <pxPortInitialiseStack>
    12da:	99 83       	std	Y+1, r25	; 0x01
    12dc:	88 83       	st	Y, r24
    12de:	e1 14       	cp	r14, r1
    12e0:	f1 04       	cpc	r15, r1
    12e2:	19 f0       	breq	.+6      	; 0x12ea <prvInitialiseNewTask+0xda>
    12e4:	f7 01       	movw	r30, r14
    12e6:	d1 83       	std	Z+1, r29	; 0x01
    12e8:	c0 83       	st	Z, r28
    12ea:	df 91       	pop	r29
    12ec:	cf 91       	pop	r28
    12ee:	0f 91       	pop	r16
    12f0:	ff 90       	pop	r15
    12f2:	ef 90       	pop	r14
    12f4:	df 90       	pop	r13
    12f6:	cf 90       	pop	r12
    12f8:	bf 90       	pop	r11
    12fa:	af 90       	pop	r10
    12fc:	9f 90       	pop	r9
    12fe:	8f 90       	pop	r8
    1300:	7f 90       	pop	r7
    1302:	6f 90       	pop	r6
    1304:	5f 90       	pop	r5
    1306:	4f 90       	pop	r4
    1308:	08 95       	ret

0000130a <prvInitialiseTaskLists>:
    130a:	cf 93       	push	r28
    130c:	c0 e0       	ldi	r28, 0x00	; 0
    130e:	08 c0       	rjmp	.+16     	; 0x1320 <prvInitialiseTaskLists+0x16>
    1310:	2b e0       	ldi	r18, 0x0B	; 11
    1312:	c2 9f       	mul	r28, r18
    1314:	c0 01       	movw	r24, r0
    1316:	11 24       	eor	r1, r1
    1318:	87 5c       	subi	r24, 0xC7	; 199
    131a:	9e 4e       	sbci	r25, 0xEE	; 238
    131c:	2c da       	rcall	.-2984   	; 0x776 <vListInitialise>
    131e:	cf 5f       	subi	r28, 0xFF	; 255
    1320:	ca 30       	cpi	r28, 0x0A	; 10
    1322:	b0 f3       	brcs	.-20     	; 0x1310 <prvInitialiseTaskLists+0x6>
    1324:	8e e2       	ldi	r24, 0x2E	; 46
    1326:	91 e1       	ldi	r25, 0x11	; 17
    1328:	26 da       	rcall	.-2996   	; 0x776 <vListInitialise>
    132a:	83 e2       	ldi	r24, 0x23	; 35
    132c:	91 e1       	ldi	r25, 0x11	; 17
    132e:	23 da       	rcall	.-3002   	; 0x776 <vListInitialise>
    1330:	84 e1       	ldi	r24, 0x14	; 20
    1332:	91 e1       	ldi	r25, 0x11	; 17
    1334:	20 da       	rcall	.-3008   	; 0x776 <vListInitialise>
    1336:	89 e0       	ldi	r24, 0x09	; 9
    1338:	91 e1       	ldi	r25, 0x11	; 17
    133a:	1d da       	rcall	.-3014   	; 0x776 <vListInitialise>
    133c:	8d ef       	ldi	r24, 0xFD	; 253
    133e:	90 e1       	ldi	r25, 0x10	; 16
    1340:	1a da       	rcall	.-3020   	; 0x776 <vListInitialise>
    1342:	8e e2       	ldi	r24, 0x2E	; 46
    1344:	91 e1       	ldi	r25, 0x11	; 17
    1346:	90 93 22 11 	sts	0x1122, r25	; 0x801122 <pxDelayedTaskList+0x1>
    134a:	80 93 21 11 	sts	0x1121, r24	; 0x801121 <pxDelayedTaskList>
    134e:	83 e2       	ldi	r24, 0x23	; 35
    1350:	91 e1       	ldi	r25, 0x11	; 17
    1352:	90 93 20 11 	sts	0x1120, r25	; 0x801120 <pxOverflowDelayedTaskList+0x1>
    1356:	80 93 1f 11 	sts	0x111F, r24	; 0x80111f <pxOverflowDelayedTaskList>
    135a:	cf 91       	pop	r28
    135c:	08 95       	ret

0000135e <prvAddNewTaskToReadyList>:
    135e:	cf 93       	push	r28
    1360:	df 93       	push	r29
    1362:	ec 01       	movw	r28, r24
    1364:	0f b6       	in	r0, 0x3f	; 63
    1366:	f8 94       	cli
    1368:	0f 92       	push	r0
    136a:	80 91 fc 10 	lds	r24, 0x10FC	; 0x8010fc <uxCurrentNumberOfTasks>
    136e:	8f 5f       	subi	r24, 0xFF	; 255
    1370:	80 93 fc 10 	sts	0x10FC, r24	; 0x8010fc <uxCurrentNumberOfTasks>
    1374:	80 91 a7 11 	lds	r24, 0x11A7	; 0x8011a7 <pxCurrentTCB>
    1378:	90 91 a8 11 	lds	r25, 0x11A8	; 0x8011a8 <pxCurrentTCB+0x1>
    137c:	89 2b       	or	r24, r25
    137e:	51 f4       	brne	.+20     	; 0x1394 <prvAddNewTaskToReadyList+0x36>
    1380:	d0 93 a8 11 	sts	0x11A8, r29	; 0x8011a8 <pxCurrentTCB+0x1>
    1384:	c0 93 a7 11 	sts	0x11A7, r28	; 0x8011a7 <pxCurrentTCB>
    1388:	80 91 fc 10 	lds	r24, 0x10FC	; 0x8010fc <uxCurrentNumberOfTasks>
    138c:	81 30       	cpi	r24, 0x01	; 1
    138e:	91 f4       	brne	.+36     	; 0x13b4 <prvAddNewTaskToReadyList+0x56>
    1390:	bc df       	rcall	.-136    	; 0x130a <prvInitialiseTaskLists>
    1392:	10 c0       	rjmp	.+32     	; 0x13b4 <prvAddNewTaskToReadyList+0x56>
    1394:	80 91 f6 10 	lds	r24, 0x10F6	; 0x8010f6 <xSchedulerRunning>
    1398:	81 11       	cpse	r24, r1
    139a:	0c c0       	rjmp	.+24     	; 0x13b4 <prvAddNewTaskToReadyList+0x56>
    139c:	e0 91 a7 11 	lds	r30, 0x11A7	; 0x8011a7 <pxCurrentTCB>
    13a0:	f0 91 a8 11 	lds	r31, 0x11A8	; 0x8011a8 <pxCurrentTCB+0x1>
    13a4:	92 8d       	ldd	r25, Z+26	; 0x1a
    13a6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    13a8:	89 17       	cp	r24, r25
    13aa:	20 f0       	brcs	.+8      	; 0x13b4 <prvAddNewTaskToReadyList+0x56>
    13ac:	d0 93 a8 11 	sts	0x11A8, r29	; 0x8011a8 <pxCurrentTCB+0x1>
    13b0:	c0 93 a7 11 	sts	0x11A7, r28	; 0x8011a7 <pxCurrentTCB>
    13b4:	80 91 ef 10 	lds	r24, 0x10EF	; 0x8010ef <uxTaskNumber>
    13b8:	8f 5f       	subi	r24, 0xFF	; 255
    13ba:	80 93 ef 10 	sts	0x10EF, r24	; 0x8010ef <uxTaskNumber>
    13be:	ea 8d       	ldd	r30, Y+26	; 0x1a
    13c0:	80 91 f7 10 	lds	r24, 0x10F7	; 0x8010f7 <uxTopReadyPriority>
    13c4:	8e 17       	cp	r24, r30
    13c6:	10 f4       	brcc	.+4      	; 0x13cc <prvAddNewTaskToReadyList+0x6e>
    13c8:	e0 93 f7 10 	sts	0x10F7, r30	; 0x8010f7 <uxTopReadyPriority>
    13cc:	8b e0       	ldi	r24, 0x0B	; 11
    13ce:	8e 9f       	mul	r24, r30
    13d0:	f0 01       	movw	r30, r0
    13d2:	11 24       	eor	r1, r1
    13d4:	e7 5c       	subi	r30, 0xC7	; 199
    13d6:	fe 4e       	sbci	r31, 0xEE	; 238
    13d8:	01 80       	ldd	r0, Z+1	; 0x01
    13da:	f2 81       	ldd	r31, Z+2	; 0x02
    13dc:	e0 2d       	mov	r30, r0
    13de:	ff 83       	std	Y+7, r31	; 0x07
    13e0:	ee 83       	std	Y+6, r30	; 0x06
    13e2:	26 81       	ldd	r18, Z+6	; 0x06
    13e4:	37 81       	ldd	r19, Z+7	; 0x07
    13e6:	39 87       	std	Y+9, r19	; 0x09
    13e8:	28 87       	std	Y+8, r18	; 0x08
    13ea:	a6 81       	ldd	r26, Z+6	; 0x06
    13ec:	b7 81       	ldd	r27, Z+7	; 0x07
    13ee:	9e 01       	movw	r18, r28
    13f0:	2e 5f       	subi	r18, 0xFE	; 254
    13f2:	3f 4f       	sbci	r19, 0xFF	; 255
    13f4:	15 96       	adiw	r26, 0x05	; 5
    13f6:	3c 93       	st	X, r19
    13f8:	2e 93       	st	-X, r18
    13fa:	14 97       	sbiw	r26, 0x04	; 4
    13fc:	37 83       	std	Z+7, r19	; 0x07
    13fe:	26 83       	std	Z+6, r18	; 0x06
    1400:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1402:	8e 9f       	mul	r24, r30
    1404:	f0 01       	movw	r30, r0
    1406:	11 24       	eor	r1, r1
    1408:	e7 5c       	subi	r30, 0xC7	; 199
    140a:	fe 4e       	sbci	r31, 0xEE	; 238
    140c:	fd 87       	std	Y+13, r31	; 0x0d
    140e:	ec 87       	std	Y+12, r30	; 0x0c
    1410:	80 81       	ld	r24, Z
    1412:	8f 5f       	subi	r24, 0xFF	; 255
    1414:	80 83       	st	Z, r24
    1416:	0f 90       	pop	r0
    1418:	0f be       	out	0x3f, r0	; 63
    141a:	80 91 f6 10 	lds	r24, 0x10F6	; 0x8010f6 <xSchedulerRunning>
    141e:	88 23       	and	r24, r24
    1420:	49 f0       	breq	.+18     	; 0x1434 <prvAddNewTaskToReadyList+0xd6>
    1422:	e0 91 a7 11 	lds	r30, 0x11A7	; 0x8011a7 <pxCurrentTCB>
    1426:	f0 91 a8 11 	lds	r31, 0x11A8	; 0x8011a8 <pxCurrentTCB+0x1>
    142a:	92 8d       	ldd	r25, Z+26	; 0x1a
    142c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    142e:	98 17       	cp	r25, r24
    1430:	08 f4       	brcc	.+2      	; 0x1434 <prvAddNewTaskToReadyList+0xd6>
    1432:	6f da       	rcall	.-2850   	; 0x912 <vPortYield>
    1434:	df 91       	pop	r29
    1436:	cf 91       	pop	r28
    1438:	08 95       	ret

0000143a <prvCheckTasksWaitingTermination>:
    143a:	cf 93       	push	r28
    143c:	df 93       	push	r29
    143e:	1a c0       	rjmp	.+52     	; 0x1474 <prvCheckTasksWaitingTermination+0x3a>
    1440:	0f b6       	in	r0, 0x3f	; 63
    1442:	f8 94       	cli
    1444:	0f 92       	push	r0
    1446:	e0 91 10 11 	lds	r30, 0x1110	; 0x801110 <xTasksWaitingTermination+0x7>
    144a:	f0 91 11 11 	lds	r31, 0x1111	; 0x801111 <xTasksWaitingTermination+0x8>
    144e:	c0 85       	ldd	r28, Z+8	; 0x08
    1450:	d1 85       	ldd	r29, Z+9	; 0x09
    1452:	ce 01       	movw	r24, r28
    1454:	02 96       	adiw	r24, 0x02	; 2
    1456:	e1 d9       	rcall	.-3134   	; 0x81a <uxListRemove>
    1458:	80 91 fc 10 	lds	r24, 0x10FC	; 0x8010fc <uxCurrentNumberOfTasks>
    145c:	81 50       	subi	r24, 0x01	; 1
    145e:	80 93 fc 10 	sts	0x10FC, r24	; 0x8010fc <uxCurrentNumberOfTasks>
    1462:	80 91 08 11 	lds	r24, 0x1108	; 0x801108 <uxDeletedTasksWaitingCleanUp>
    1466:	81 50       	subi	r24, 0x01	; 1
    1468:	80 93 08 11 	sts	0x1108, r24	; 0x801108 <uxDeletedTasksWaitingCleanUp>
    146c:	0f 90       	pop	r0
    146e:	0f be       	out	0x3f, r0	; 63
    1470:	ce 01       	movw	r24, r28
    1472:	c3 de       	rcall	.-634    	; 0x11fa <prvDeleteTCB>
    1474:	80 91 08 11 	lds	r24, 0x1108	; 0x801108 <uxDeletedTasksWaitingCleanUp>
    1478:	81 11       	cpse	r24, r1
    147a:	e2 cf       	rjmp	.-60     	; 0x1440 <prvCheckTasksWaitingTermination+0x6>
    147c:	df 91       	pop	r29
    147e:	cf 91       	pop	r28
    1480:	08 95       	ret

00001482 <prvAddCurrentTaskToDelayedList>:
    1482:	8f 92       	push	r8
    1484:	9f 92       	push	r9
    1486:	af 92       	push	r10
    1488:	bf 92       	push	r11
    148a:	cf 92       	push	r12
    148c:	df 92       	push	r13
    148e:	ef 92       	push	r14
    1490:	ff 92       	push	r15
    1492:	cf 93       	push	r28
    1494:	df 93       	push	r29
    1496:	6b 01       	movw	r12, r22
    1498:	7c 01       	movw	r14, r24
    149a:	c4 2f       	mov	r28, r20
    149c:	80 90 f8 10 	lds	r8, 0x10F8	; 0x8010f8 <xTickCount>
    14a0:	90 90 f9 10 	lds	r9, 0x10F9	; 0x8010f9 <xTickCount+0x1>
    14a4:	a0 90 fa 10 	lds	r10, 0x10FA	; 0x8010fa <xTickCount+0x2>
    14a8:	b0 90 fb 10 	lds	r11, 0x10FB	; 0x8010fb <xTickCount+0x3>
    14ac:	80 91 a7 11 	lds	r24, 0x11A7	; 0x8011a7 <pxCurrentTCB>
    14b0:	90 91 a8 11 	lds	r25, 0x11A8	; 0x8011a8 <pxCurrentTCB+0x1>
    14b4:	02 96       	adiw	r24, 0x02	; 2
    14b6:	b1 d9       	rcall	.-3230   	; 0x81a <uxListRemove>
    14b8:	8f ef       	ldi	r24, 0xFF	; 255
    14ba:	c8 16       	cp	r12, r24
    14bc:	d8 06       	cpc	r13, r24
    14be:	e8 06       	cpc	r14, r24
    14c0:	f8 06       	cpc	r15, r24
    14c2:	b1 f5       	brne	.+108    	; 0x1530 <prvAddCurrentTaskToDelayedList+0xae>
    14c4:	cc 23       	and	r28, r28
    14c6:	a1 f1       	breq	.+104    	; 0x1530 <prvAddCurrentTaskToDelayedList+0xae>
    14c8:	ed ef       	ldi	r30, 0xFD	; 253
    14ca:	f0 e1       	ldi	r31, 0x10	; 16
    14cc:	a1 81       	ldd	r26, Z+1	; 0x01
    14ce:	b2 81       	ldd	r27, Z+2	; 0x02
    14d0:	c0 91 a7 11 	lds	r28, 0x11A7	; 0x8011a7 <pxCurrentTCB>
    14d4:	d0 91 a8 11 	lds	r29, 0x11A8	; 0x8011a8 <pxCurrentTCB+0x1>
    14d8:	bf 83       	std	Y+7, r27	; 0x07
    14da:	ae 83       	std	Y+6, r26	; 0x06
    14dc:	c0 91 a7 11 	lds	r28, 0x11A7	; 0x8011a7 <pxCurrentTCB>
    14e0:	d0 91 a8 11 	lds	r29, 0x11A8	; 0x8011a8 <pxCurrentTCB+0x1>
    14e4:	16 96       	adiw	r26, 0x06	; 6
    14e6:	8d 91       	ld	r24, X+
    14e8:	9c 91       	ld	r25, X
    14ea:	17 97       	sbiw	r26, 0x07	; 7
    14ec:	99 87       	std	Y+9, r25	; 0x09
    14ee:	88 87       	std	Y+8, r24	; 0x08
    14f0:	16 96       	adiw	r26, 0x06	; 6
    14f2:	cd 91       	ld	r28, X+
    14f4:	dc 91       	ld	r29, X
    14f6:	17 97       	sbiw	r26, 0x07	; 7
    14f8:	80 91 a7 11 	lds	r24, 0x11A7	; 0x8011a7 <pxCurrentTCB>
    14fc:	90 91 a8 11 	lds	r25, 0x11A8	; 0x8011a8 <pxCurrentTCB+0x1>
    1500:	02 96       	adiw	r24, 0x02	; 2
    1502:	9d 83       	std	Y+5, r25	; 0x05
    1504:	8c 83       	std	Y+4, r24	; 0x04
    1506:	80 91 a7 11 	lds	r24, 0x11A7	; 0x8011a7 <pxCurrentTCB>
    150a:	90 91 a8 11 	lds	r25, 0x11A8	; 0x8011a8 <pxCurrentTCB+0x1>
    150e:	02 96       	adiw	r24, 0x02	; 2
    1510:	17 96       	adiw	r26, 0x07	; 7
    1512:	9c 93       	st	X, r25
    1514:	8e 93       	st	-X, r24
    1516:	16 97       	sbiw	r26, 0x06	; 6
    1518:	a0 91 a7 11 	lds	r26, 0x11A7	; 0x8011a7 <pxCurrentTCB>
    151c:	b0 91 a8 11 	lds	r27, 0x11A8	; 0x8011a8 <pxCurrentTCB+0x1>
    1520:	1d 96       	adiw	r26, 0x0d	; 13
    1522:	fc 93       	st	X, r31
    1524:	ee 93       	st	-X, r30
    1526:	1c 97       	sbiw	r26, 0x0c	; 12
    1528:	80 81       	ld	r24, Z
    152a:	8f 5f       	subi	r24, 0xFF	; 255
    152c:	80 83       	st	Z, r24
    152e:	3d c0       	rjmp	.+122    	; 0x15aa <prvAddCurrentTaskToDelayedList+0x128>
    1530:	c8 0c       	add	r12, r8
    1532:	d9 1c       	adc	r13, r9
    1534:	ea 1c       	adc	r14, r10
    1536:	fb 1c       	adc	r15, r11
    1538:	e0 91 a7 11 	lds	r30, 0x11A7	; 0x8011a7 <pxCurrentTCB>
    153c:	f0 91 a8 11 	lds	r31, 0x11A8	; 0x8011a8 <pxCurrentTCB+0x1>
    1540:	c2 82       	std	Z+2, r12	; 0x02
    1542:	d3 82       	std	Z+3, r13	; 0x03
    1544:	e4 82       	std	Z+4, r14	; 0x04
    1546:	f5 82       	std	Z+5, r15	; 0x05
    1548:	c8 14       	cp	r12, r8
    154a:	d9 04       	cpc	r13, r9
    154c:	ea 04       	cpc	r14, r10
    154e:	fb 04       	cpc	r15, r11
    1550:	60 f4       	brcc	.+24     	; 0x156a <prvAddCurrentTaskToDelayedList+0xe8>
    1552:	60 91 a7 11 	lds	r22, 0x11A7	; 0x8011a7 <pxCurrentTCB>
    1556:	70 91 a8 11 	lds	r23, 0x11A8	; 0x8011a8 <pxCurrentTCB+0x1>
    155a:	80 91 1f 11 	lds	r24, 0x111F	; 0x80111f <pxOverflowDelayedTaskList>
    155e:	90 91 20 11 	lds	r25, 0x1120	; 0x801120 <pxOverflowDelayedTaskList+0x1>
    1562:	6e 5f       	subi	r22, 0xFE	; 254
    1564:	7f 4f       	sbci	r23, 0xFF	; 255
    1566:	1c d9       	rcall	.-3528   	; 0x7a0 <vListInsert>
    1568:	20 c0       	rjmp	.+64     	; 0x15aa <prvAddCurrentTaskToDelayedList+0x128>
    156a:	60 91 a7 11 	lds	r22, 0x11A7	; 0x8011a7 <pxCurrentTCB>
    156e:	70 91 a8 11 	lds	r23, 0x11A8	; 0x8011a8 <pxCurrentTCB+0x1>
    1572:	80 91 21 11 	lds	r24, 0x1121	; 0x801121 <pxDelayedTaskList>
    1576:	90 91 22 11 	lds	r25, 0x1122	; 0x801122 <pxDelayedTaskList+0x1>
    157a:	6e 5f       	subi	r22, 0xFE	; 254
    157c:	7f 4f       	sbci	r23, 0xFF	; 255
    157e:	10 d9       	rcall	.-3552   	; 0x7a0 <vListInsert>
    1580:	80 91 eb 10 	lds	r24, 0x10EB	; 0x8010eb <xNextTaskUnblockTime>
    1584:	90 91 ec 10 	lds	r25, 0x10EC	; 0x8010ec <xNextTaskUnblockTime+0x1>
    1588:	a0 91 ed 10 	lds	r26, 0x10ED	; 0x8010ed <xNextTaskUnblockTime+0x2>
    158c:	b0 91 ee 10 	lds	r27, 0x10EE	; 0x8010ee <xNextTaskUnblockTime+0x3>
    1590:	c8 16       	cp	r12, r24
    1592:	d9 06       	cpc	r13, r25
    1594:	ea 06       	cpc	r14, r26
    1596:	fb 06       	cpc	r15, r27
    1598:	40 f4       	brcc	.+16     	; 0x15aa <prvAddCurrentTaskToDelayedList+0x128>
    159a:	c0 92 eb 10 	sts	0x10EB, r12	; 0x8010eb <xNextTaskUnblockTime>
    159e:	d0 92 ec 10 	sts	0x10EC, r13	; 0x8010ec <xNextTaskUnblockTime+0x1>
    15a2:	e0 92 ed 10 	sts	0x10ED, r14	; 0x8010ed <xNextTaskUnblockTime+0x2>
    15a6:	f0 92 ee 10 	sts	0x10EE, r15	; 0x8010ee <xNextTaskUnblockTime+0x3>
    15aa:	df 91       	pop	r29
    15ac:	cf 91       	pop	r28
    15ae:	ff 90       	pop	r15
    15b0:	ef 90       	pop	r14
    15b2:	df 90       	pop	r13
    15b4:	cf 90       	pop	r12
    15b6:	bf 90       	pop	r11
    15b8:	af 90       	pop	r10
    15ba:	9f 90       	pop	r9
    15bc:	8f 90       	pop	r8
    15be:	08 95       	ret

000015c0 <xTaskCreate>:
    15c0:	2f 92       	push	r2
    15c2:	3f 92       	push	r3
    15c4:	4f 92       	push	r4
    15c6:	5f 92       	push	r5
    15c8:	6f 92       	push	r6
    15ca:	7f 92       	push	r7
    15cc:	8f 92       	push	r8
    15ce:	9f 92       	push	r9
    15d0:	af 92       	push	r10
    15d2:	bf 92       	push	r11
    15d4:	cf 92       	push	r12
    15d6:	df 92       	push	r13
    15d8:	ef 92       	push	r14
    15da:	ff 92       	push	r15
    15dc:	0f 93       	push	r16
    15de:	cf 93       	push	r28
    15e0:	df 93       	push	r29
    15e2:	3c 01       	movw	r6, r24
    15e4:	1b 01       	movw	r2, r22
    15e6:	4a 01       	movw	r8, r20
    15e8:	29 01       	movw	r4, r18
    15ea:	ca 01       	movw	r24, r20
    15ec:	0e 94 d6 02 	call	0x5ac	; 0x5ac <pvPortMalloc>
    15f0:	6c 01       	movw	r12, r24
    15f2:	89 2b       	or	r24, r25
    15f4:	69 f0       	breq	.+26     	; 0x1610 <xTaskCreate+0x50>
    15f6:	86 e3       	ldi	r24, 0x36	; 54
    15f8:	90 e0       	ldi	r25, 0x00	; 0
    15fa:	0e 94 d6 02 	call	0x5ac	; 0x5ac <pvPortMalloc>
    15fe:	ec 01       	movw	r28, r24
    1600:	89 2b       	or	r24, r25
    1602:	19 f0       	breq	.+6      	; 0x160a <xTaskCreate+0x4a>
    1604:	dc 8e       	std	Y+28, r13	; 0x1c
    1606:	cb 8e       	std	Y+27, r12	; 0x1b
    1608:	05 c0       	rjmp	.+10     	; 0x1614 <xTaskCreate+0x54>
    160a:	c6 01       	movw	r24, r12
    160c:	78 d8       	rcall	.-3856   	; 0x6fe <vPortFree>
    160e:	02 c0       	rjmp	.+4      	; 0x1614 <xTaskCreate+0x54>
    1610:	c0 e0       	ldi	r28, 0x00	; 0
    1612:	d0 e0       	ldi	r29, 0x00	; 0
    1614:	20 97       	sbiw	r28, 0x00	; 0
    1616:	61 f0       	breq	.+24     	; 0x1630 <xTaskCreate+0x70>
    1618:	a1 2c       	mov	r10, r1
    161a:	b1 2c       	mov	r11, r1
    161c:	6e 01       	movw	r12, r28
    161e:	92 01       	movw	r18, r4
    1620:	a4 01       	movw	r20, r8
    1622:	b1 01       	movw	r22, r2
    1624:	c3 01       	movw	r24, r6
    1626:	f4 dd       	rcall	.-1048   	; 0x1210 <prvInitialiseNewTask>
    1628:	ce 01       	movw	r24, r28
    162a:	99 de       	rcall	.-718    	; 0x135e <prvAddNewTaskToReadyList>
    162c:	81 e0       	ldi	r24, 0x01	; 1
    162e:	01 c0       	rjmp	.+2      	; 0x1632 <xTaskCreate+0x72>
    1630:	8f ef       	ldi	r24, 0xFF	; 255
    1632:	df 91       	pop	r29
    1634:	cf 91       	pop	r28
    1636:	0f 91       	pop	r16
    1638:	ff 90       	pop	r15
    163a:	ef 90       	pop	r14
    163c:	df 90       	pop	r13
    163e:	cf 90       	pop	r12
    1640:	bf 90       	pop	r11
    1642:	af 90       	pop	r10
    1644:	9f 90       	pop	r9
    1646:	8f 90       	pop	r8
    1648:	7f 90       	pop	r7
    164a:	6f 90       	pop	r6
    164c:	5f 90       	pop	r5
    164e:	4f 90       	pop	r4
    1650:	3f 90       	pop	r3
    1652:	2f 90       	pop	r2
    1654:	08 95       	ret

00001656 <vTaskStartScheduler>:
    1656:	ef 92       	push	r14
    1658:	ff 92       	push	r15
    165a:	0f 93       	push	r16
    165c:	0f 2e       	mov	r0, r31
    165e:	f9 ee       	ldi	r31, 0xE9	; 233
    1660:	ef 2e       	mov	r14, r31
    1662:	f0 e1       	ldi	r31, 0x10	; 16
    1664:	ff 2e       	mov	r15, r31
    1666:	f0 2d       	mov	r31, r0
    1668:	00 e0       	ldi	r16, 0x00	; 0
    166a:	20 e0       	ldi	r18, 0x00	; 0
    166c:	30 e0       	ldi	r19, 0x00	; 0
    166e:	40 ec       	ldi	r20, 0xC0	; 192
    1670:	50 e0       	ldi	r21, 0x00	; 0
    1672:	63 ef       	ldi	r22, 0xF3	; 243
    1674:	72 e0       	ldi	r23, 0x02	; 2
    1676:	8c e7       	ldi	r24, 0x7C	; 124
    1678:	90 e0       	ldi	r25, 0x00	; 0
    167a:	a2 df       	rcall	.-188    	; 0x15c0 <xTaskCreate>
    167c:	81 30       	cpi	r24, 0x01	; 1
    167e:	09 f4       	brne	.+2      	; 0x1682 <vTaskStartScheduler+0x2c>
    1680:	55 d6       	rcall	.+3242   	; 0x232c <xTimerCreateTimerTask>
    1682:	81 30       	cpi	r24, 0x01	; 1
    1684:	f9 f4       	brne	.+62     	; 0x16c4 <vTaskStartScheduler+0x6e>
    1686:	f8 94       	cli
    1688:	8f ef       	ldi	r24, 0xFF	; 255
    168a:	9f ef       	ldi	r25, 0xFF	; 255
    168c:	dc 01       	movw	r26, r24
    168e:	80 93 eb 10 	sts	0x10EB, r24	; 0x8010eb <xNextTaskUnblockTime>
    1692:	90 93 ec 10 	sts	0x10EC, r25	; 0x8010ec <xNextTaskUnblockTime+0x1>
    1696:	a0 93 ed 10 	sts	0x10ED, r26	; 0x8010ed <xNextTaskUnblockTime+0x2>
    169a:	b0 93 ee 10 	sts	0x10EE, r27	; 0x8010ee <xNextTaskUnblockTime+0x3>
    169e:	81 e0       	ldi	r24, 0x01	; 1
    16a0:	80 93 f6 10 	sts	0x10F6, r24	; 0x8010f6 <xSchedulerRunning>
    16a4:	10 92 f8 10 	sts	0x10F8, r1	; 0x8010f8 <xTickCount>
    16a8:	10 92 f9 10 	sts	0x10F9, r1	; 0x8010f9 <xTickCount+0x1>
    16ac:	10 92 fa 10 	sts	0x10FA, r1	; 0x8010fa <xTickCount+0x2>
    16b0:	10 92 fb 10 	sts	0x10FB, r1	; 0x8010fb <xTickCount+0x3>
    16b4:	e0 91 a7 11 	lds	r30, 0x11A7	; 0x8011a7 <pxCurrentTCB>
    16b8:	f0 91 a8 11 	lds	r31, 0x11A8	; 0x8011a8 <pxCurrentTCB+0x1>
    16bc:	87 a5       	ldd	r24, Z+47	; 0x2f
    16be:	0e 94 53 02 	call	0x4a6	; 0x4a6 <task_switch_in>
    16c2:	f5 d8       	rcall	.-3606   	; 0x8ae <xPortStartScheduler>
    16c4:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <uxTopUsedPriority>
    16c8:	0f 91       	pop	r16
    16ca:	ff 90       	pop	r15
    16cc:	ef 90       	pop	r14
    16ce:	08 95       	ret

000016d0 <vTaskSuspendAll>:
    16d0:	80 91 e8 10 	lds	r24, 0x10E8	; 0x8010e8 <uxSchedulerSuspended>
    16d4:	8f 5f       	subi	r24, 0xFF	; 255
    16d6:	80 93 e8 10 	sts	0x10E8, r24	; 0x8010e8 <uxSchedulerSuspended>
    16da:	08 95       	ret

000016dc <xTaskGetTickCount>:
    16dc:	0f b6       	in	r0, 0x3f	; 63
    16de:	f8 94       	cli
    16e0:	0f 92       	push	r0
    16e2:	60 91 f8 10 	lds	r22, 0x10F8	; 0x8010f8 <xTickCount>
    16e6:	70 91 f9 10 	lds	r23, 0x10F9	; 0x8010f9 <xTickCount+0x1>
    16ea:	80 91 fa 10 	lds	r24, 0x10FA	; 0x8010fa <xTickCount+0x2>
    16ee:	90 91 fb 10 	lds	r25, 0x10FB	; 0x8010fb <xTickCount+0x3>
    16f2:	0f 90       	pop	r0
    16f4:	0f be       	out	0x3f, r0	; 63
    16f6:	08 95       	ret

000016f8 <xTaskIncrementTick>:
    16f8:	cf 92       	push	r12
    16fa:	df 92       	push	r13
    16fc:	ef 92       	push	r14
    16fe:	ff 92       	push	r15
    1700:	cf 93       	push	r28
    1702:	df 93       	push	r29
    1704:	80 91 e8 10 	lds	r24, 0x10E8	; 0x8010e8 <uxSchedulerSuspended>
    1708:	81 11       	cpse	r24, r1
    170a:	05 c1       	rjmp	.+522    	; 0x1916 <xTaskIncrementTick+0x21e>
    170c:	c0 90 f8 10 	lds	r12, 0x10F8	; 0x8010f8 <xTickCount>
    1710:	d0 90 f9 10 	lds	r13, 0x10F9	; 0x8010f9 <xTickCount+0x1>
    1714:	e0 90 fa 10 	lds	r14, 0x10FA	; 0x8010fa <xTickCount+0x2>
    1718:	f0 90 fb 10 	lds	r15, 0x10FB	; 0x8010fb <xTickCount+0x3>
    171c:	8f ef       	ldi	r24, 0xFF	; 255
    171e:	c8 1a       	sub	r12, r24
    1720:	d8 0a       	sbc	r13, r24
    1722:	e8 0a       	sbc	r14, r24
    1724:	f8 0a       	sbc	r15, r24
    1726:	c0 92 f8 10 	sts	0x10F8, r12	; 0x8010f8 <xTickCount>
    172a:	d0 92 f9 10 	sts	0x10F9, r13	; 0x8010f9 <xTickCount+0x1>
    172e:	e0 92 fa 10 	sts	0x10FA, r14	; 0x8010fa <xTickCount+0x2>
    1732:	f0 92 fb 10 	sts	0x10FB, r15	; 0x8010fb <xTickCount+0x3>
    1736:	c1 14       	cp	r12, r1
    1738:	d1 04       	cpc	r13, r1
    173a:	e1 04       	cpc	r14, r1
    173c:	f1 04       	cpc	r15, r1
    173e:	b1 f4       	brne	.+44     	; 0x176c <xTaskIncrementTick+0x74>
    1740:	80 91 21 11 	lds	r24, 0x1121	; 0x801121 <pxDelayedTaskList>
    1744:	90 91 22 11 	lds	r25, 0x1122	; 0x801122 <pxDelayedTaskList+0x1>
    1748:	20 91 1f 11 	lds	r18, 0x111F	; 0x80111f <pxOverflowDelayedTaskList>
    174c:	30 91 20 11 	lds	r19, 0x1120	; 0x801120 <pxOverflowDelayedTaskList+0x1>
    1750:	30 93 22 11 	sts	0x1122, r19	; 0x801122 <pxDelayedTaskList+0x1>
    1754:	20 93 21 11 	sts	0x1121, r18	; 0x801121 <pxDelayedTaskList>
    1758:	90 93 20 11 	sts	0x1120, r25	; 0x801120 <pxOverflowDelayedTaskList+0x1>
    175c:	80 93 1f 11 	sts	0x111F, r24	; 0x80111f <pxOverflowDelayedTaskList>
    1760:	80 91 f0 10 	lds	r24, 0x10F0	; 0x8010f0 <xNumOfOverflows>
    1764:	8f 5f       	subi	r24, 0xFF	; 255
    1766:	80 93 f0 10 	sts	0x10F0, r24	; 0x8010f0 <xNumOfOverflows>
    176a:	20 dd       	rcall	.-1472   	; 0x11ac <prvResetNextTaskUnblockTime>
    176c:	80 91 eb 10 	lds	r24, 0x10EB	; 0x8010eb <xNextTaskUnblockTime>
    1770:	90 91 ec 10 	lds	r25, 0x10EC	; 0x8010ec <xNextTaskUnblockTime+0x1>
    1774:	a0 91 ed 10 	lds	r26, 0x10ED	; 0x8010ed <xNextTaskUnblockTime+0x2>
    1778:	b0 91 ee 10 	lds	r27, 0x10EE	; 0x8010ee <xNextTaskUnblockTime+0x3>
    177c:	c8 16       	cp	r12, r24
    177e:	d9 06       	cpc	r13, r25
    1780:	ea 06       	cpc	r14, r26
    1782:	fb 06       	cpc	r15, r27
    1784:	20 f4       	brcc	.+8      	; 0x178e <xTaskIncrementTick+0x96>
    1786:	80 e0       	ldi	r24, 0x00	; 0
    1788:	b2 c0       	rjmp	.+356    	; 0x18ee <xTaskIncrementTick+0x1f6>
    178a:	81 e0       	ldi	r24, 0x01	; 1
    178c:	01 c0       	rjmp	.+2      	; 0x1790 <xTaskIncrementTick+0x98>
    178e:	80 e0       	ldi	r24, 0x00	; 0
    1790:	e0 91 21 11 	lds	r30, 0x1121	; 0x801121 <pxDelayedTaskList>
    1794:	f0 91 22 11 	lds	r31, 0x1122	; 0x801122 <pxDelayedTaskList+0x1>
    1798:	90 81       	ld	r25, Z
    179a:	91 11       	cpse	r25, r1
    179c:	0c c0       	rjmp	.+24     	; 0x17b6 <xTaskIncrementTick+0xbe>
    179e:	4f ef       	ldi	r20, 0xFF	; 255
    17a0:	5f ef       	ldi	r21, 0xFF	; 255
    17a2:	ba 01       	movw	r22, r20
    17a4:	40 93 eb 10 	sts	0x10EB, r20	; 0x8010eb <xNextTaskUnblockTime>
    17a8:	50 93 ec 10 	sts	0x10EC, r21	; 0x8010ec <xNextTaskUnblockTime+0x1>
    17ac:	60 93 ed 10 	sts	0x10ED, r22	; 0x8010ed <xNextTaskUnblockTime+0x2>
    17b0:	70 93 ee 10 	sts	0x10EE, r23	; 0x8010ee <xNextTaskUnblockTime+0x3>
    17b4:	9c c0       	rjmp	.+312    	; 0x18ee <xTaskIncrementTick+0x1f6>
    17b6:	e0 91 21 11 	lds	r30, 0x1121	; 0x801121 <pxDelayedTaskList>
    17ba:	f0 91 22 11 	lds	r31, 0x1122	; 0x801122 <pxDelayedTaskList+0x1>
    17be:	07 80       	ldd	r0, Z+7	; 0x07
    17c0:	f0 85       	ldd	r31, Z+8	; 0x08
    17c2:	e0 2d       	mov	r30, r0
    17c4:	00 84       	ldd	r0, Z+8	; 0x08
    17c6:	f1 85       	ldd	r31, Z+9	; 0x09
    17c8:	e0 2d       	mov	r30, r0
    17ca:	42 81       	ldd	r20, Z+2	; 0x02
    17cc:	53 81       	ldd	r21, Z+3	; 0x03
    17ce:	64 81       	ldd	r22, Z+4	; 0x04
    17d0:	75 81       	ldd	r23, Z+5	; 0x05
    17d2:	c4 16       	cp	r12, r20
    17d4:	d5 06       	cpc	r13, r21
    17d6:	e6 06       	cpc	r14, r22
    17d8:	f7 06       	cpc	r15, r23
    17da:	48 f4       	brcc	.+18     	; 0x17ee <xTaskIncrementTick+0xf6>
    17dc:	40 93 eb 10 	sts	0x10EB, r20	; 0x8010eb <xNextTaskUnblockTime>
    17e0:	50 93 ec 10 	sts	0x10EC, r21	; 0x8010ec <xNextTaskUnblockTime+0x1>
    17e4:	60 93 ed 10 	sts	0x10ED, r22	; 0x8010ed <xNextTaskUnblockTime+0x2>
    17e8:	70 93 ee 10 	sts	0x10EE, r23	; 0x8010ee <xNextTaskUnblockTime+0x3>
    17ec:	80 c0       	rjmp	.+256    	; 0x18ee <xTaskIncrementTick+0x1f6>
    17ee:	a4 85       	ldd	r26, Z+12	; 0x0c
    17f0:	b5 85       	ldd	r27, Z+13	; 0x0d
    17f2:	c6 81       	ldd	r28, Z+6	; 0x06
    17f4:	d7 81       	ldd	r29, Z+7	; 0x07
    17f6:	20 85       	ldd	r18, Z+8	; 0x08
    17f8:	31 85       	ldd	r19, Z+9	; 0x09
    17fa:	3f 83       	std	Y+7, r19	; 0x07
    17fc:	2e 83       	std	Y+6, r18	; 0x06
    17fe:	c0 85       	ldd	r28, Z+8	; 0x08
    1800:	d1 85       	ldd	r29, Z+9	; 0x09
    1802:	26 81       	ldd	r18, Z+6	; 0x06
    1804:	37 81       	ldd	r19, Z+7	; 0x07
    1806:	3d 83       	std	Y+5, r19	; 0x05
    1808:	2c 83       	std	Y+4, r18	; 0x04
    180a:	11 96       	adiw	r26, 0x01	; 1
    180c:	4d 91       	ld	r20, X+
    180e:	5c 91       	ld	r21, X
    1810:	12 97       	sbiw	r26, 0x02	; 2
    1812:	9f 01       	movw	r18, r30
    1814:	2e 5f       	subi	r18, 0xFE	; 254
    1816:	3f 4f       	sbci	r19, 0xFF	; 255
    1818:	42 17       	cp	r20, r18
    181a:	53 07       	cpc	r21, r19
    181c:	31 f4       	brne	.+12     	; 0x182a <xTaskIncrementTick+0x132>
    181e:	40 85       	ldd	r20, Z+8	; 0x08
    1820:	51 85       	ldd	r21, Z+9	; 0x09
    1822:	12 96       	adiw	r26, 0x02	; 2
    1824:	5c 93       	st	X, r21
    1826:	4e 93       	st	-X, r20
    1828:	11 97       	sbiw	r26, 0x01	; 1
    182a:	15 86       	std	Z+13, r1	; 0x0d
    182c:	14 86       	std	Z+12, r1	; 0x0c
    182e:	9c 91       	ld	r25, X
    1830:	91 50       	subi	r25, 0x01	; 1
    1832:	9c 93       	st	X, r25
    1834:	a0 8d       	ldd	r26, Z+24	; 0x18
    1836:	b1 8d       	ldd	r27, Z+25	; 0x19
    1838:	10 97       	sbiw	r26, 0x00	; 0
    183a:	09 f1       	breq	.+66     	; 0x187e <xTaskIncrementTick+0x186>
    183c:	c2 89       	ldd	r28, Z+18	; 0x12
    183e:	d3 89       	ldd	r29, Z+19	; 0x13
    1840:	44 89       	ldd	r20, Z+20	; 0x14
    1842:	55 89       	ldd	r21, Z+21	; 0x15
    1844:	5f 83       	std	Y+7, r21	; 0x07
    1846:	4e 83       	std	Y+6, r20	; 0x06
    1848:	c4 89       	ldd	r28, Z+20	; 0x14
    184a:	d5 89       	ldd	r29, Z+21	; 0x15
    184c:	42 89       	ldd	r20, Z+18	; 0x12
    184e:	53 89       	ldd	r21, Z+19	; 0x13
    1850:	5d 83       	std	Y+5, r21	; 0x05
    1852:	4c 83       	std	Y+4, r20	; 0x04
    1854:	11 96       	adiw	r26, 0x01	; 1
    1856:	6d 91       	ld	r22, X+
    1858:	7c 91       	ld	r23, X
    185a:	12 97       	sbiw	r26, 0x02	; 2
    185c:	af 01       	movw	r20, r30
    185e:	42 5f       	subi	r20, 0xF2	; 242
    1860:	5f 4f       	sbci	r21, 0xFF	; 255
    1862:	64 17       	cp	r22, r20
    1864:	75 07       	cpc	r23, r21
    1866:	31 f4       	brne	.+12     	; 0x1874 <xTaskIncrementTick+0x17c>
    1868:	44 89       	ldd	r20, Z+20	; 0x14
    186a:	55 89       	ldd	r21, Z+21	; 0x15
    186c:	12 96       	adiw	r26, 0x02	; 2
    186e:	5c 93       	st	X, r21
    1870:	4e 93       	st	-X, r20
    1872:	11 97       	sbiw	r26, 0x01	; 1
    1874:	11 8e       	std	Z+25, r1	; 0x19
    1876:	10 8e       	std	Z+24, r1	; 0x18
    1878:	9c 91       	ld	r25, X
    187a:	91 50       	subi	r25, 0x01	; 1
    187c:	9c 93       	st	X, r25
    187e:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1880:	90 91 f7 10 	lds	r25, 0x10F7	; 0x8010f7 <uxTopReadyPriority>
    1884:	9a 17       	cp	r25, r26
    1886:	10 f4       	brcc	.+4      	; 0x188c <xTaskIncrementTick+0x194>
    1888:	a0 93 f7 10 	sts	0x10F7, r26	; 0x8010f7 <uxTopReadyPriority>
    188c:	9b e0       	ldi	r25, 0x0B	; 11
    188e:	9a 9f       	mul	r25, r26
    1890:	d0 01       	movw	r26, r0
    1892:	11 24       	eor	r1, r1
    1894:	a7 5c       	subi	r26, 0xC7	; 199
    1896:	be 4e       	sbci	r27, 0xEE	; 238
    1898:	11 96       	adiw	r26, 0x01	; 1
    189a:	0d 90       	ld	r0, X+
    189c:	bc 91       	ld	r27, X
    189e:	a0 2d       	mov	r26, r0
    18a0:	b7 83       	std	Z+7, r27	; 0x07
    18a2:	a6 83       	std	Z+6, r26	; 0x06
    18a4:	16 96       	adiw	r26, 0x06	; 6
    18a6:	4d 91       	ld	r20, X+
    18a8:	5c 91       	ld	r21, X
    18aa:	17 97       	sbiw	r26, 0x07	; 7
    18ac:	51 87       	std	Z+9, r21	; 0x09
    18ae:	40 87       	std	Z+8, r20	; 0x08
    18b0:	16 96       	adiw	r26, 0x06	; 6
    18b2:	cd 91       	ld	r28, X+
    18b4:	dc 91       	ld	r29, X
    18b6:	17 97       	sbiw	r26, 0x07	; 7
    18b8:	3d 83       	std	Y+5, r19	; 0x05
    18ba:	2c 83       	std	Y+4, r18	; 0x04
    18bc:	17 96       	adiw	r26, 0x07	; 7
    18be:	3c 93       	st	X, r19
    18c0:	2e 93       	st	-X, r18
    18c2:	16 97       	sbiw	r26, 0x06	; 6
    18c4:	a2 8d       	ldd	r26, Z+26	; 0x1a
    18c6:	9a 9f       	mul	r25, r26
    18c8:	d0 01       	movw	r26, r0
    18ca:	11 24       	eor	r1, r1
    18cc:	a7 5c       	subi	r26, 0xC7	; 199
    18ce:	be 4e       	sbci	r27, 0xEE	; 238
    18d0:	b5 87       	std	Z+13, r27	; 0x0d
    18d2:	a4 87       	std	Z+12, r26	; 0x0c
    18d4:	9c 91       	ld	r25, X
    18d6:	9f 5f       	subi	r25, 0xFF	; 255
    18d8:	9c 93       	st	X, r25
    18da:	22 8d       	ldd	r18, Z+26	; 0x1a
    18dc:	e0 91 a7 11 	lds	r30, 0x11A7	; 0x8011a7 <pxCurrentTCB>
    18e0:	f0 91 a8 11 	lds	r31, 0x11A8	; 0x8011a8 <pxCurrentTCB+0x1>
    18e4:	92 8d       	ldd	r25, Z+26	; 0x1a
    18e6:	29 17       	cp	r18, r25
    18e8:	08 f0       	brcs	.+2      	; 0x18ec <xTaskIncrementTick+0x1f4>
    18ea:	4f cf       	rjmp	.-354    	; 0x178a <xTaskIncrementTick+0x92>
    18ec:	51 cf       	rjmp	.-350    	; 0x1790 <xTaskIncrementTick+0x98>
    18ee:	e0 91 a7 11 	lds	r30, 0x11A7	; 0x8011a7 <pxCurrentTCB>
    18f2:	f0 91 a8 11 	lds	r31, 0x11A8	; 0x8011a8 <pxCurrentTCB+0x1>
    18f6:	e2 8d       	ldd	r30, Z+26	; 0x1a
    18f8:	9b e0       	ldi	r25, 0x0B	; 11
    18fa:	e9 9f       	mul	r30, r25
    18fc:	f0 01       	movw	r30, r0
    18fe:	11 24       	eor	r1, r1
    1900:	e7 5c       	subi	r30, 0xC7	; 199
    1902:	fe 4e       	sbci	r31, 0xEE	; 238
    1904:	90 81       	ld	r25, Z
    1906:	92 30       	cpi	r25, 0x02	; 2
    1908:	08 f0       	brcs	.+2      	; 0x190c <xTaskIncrementTick+0x214>
    190a:	81 e0       	ldi	r24, 0x01	; 1
    190c:	90 91 f1 10 	lds	r25, 0x10F1	; 0x8010f1 <xYieldPending>
    1910:	91 11       	cpse	r25, r1
    1912:	16 c0       	rjmp	.+44     	; 0x1940 <xTaskIncrementTick+0x248>
    1914:	16 c0       	rjmp	.+44     	; 0x1942 <xTaskIncrementTick+0x24a>
    1916:	80 91 f2 10 	lds	r24, 0x10F2	; 0x8010f2 <xPendedTicks>
    191a:	90 91 f3 10 	lds	r25, 0x10F3	; 0x8010f3 <xPendedTicks+0x1>
    191e:	a0 91 f4 10 	lds	r26, 0x10F4	; 0x8010f4 <xPendedTicks+0x2>
    1922:	b0 91 f5 10 	lds	r27, 0x10F5	; 0x8010f5 <xPendedTicks+0x3>
    1926:	01 96       	adiw	r24, 0x01	; 1
    1928:	a1 1d       	adc	r26, r1
    192a:	b1 1d       	adc	r27, r1
    192c:	80 93 f2 10 	sts	0x10F2, r24	; 0x8010f2 <xPendedTicks>
    1930:	90 93 f3 10 	sts	0x10F3, r25	; 0x8010f3 <xPendedTicks+0x1>
    1934:	a0 93 f4 10 	sts	0x10F4, r26	; 0x8010f4 <xPendedTicks+0x2>
    1938:	b0 93 f5 10 	sts	0x10F5, r27	; 0x8010f5 <xPendedTicks+0x3>
    193c:	80 e0       	ldi	r24, 0x00	; 0
    193e:	01 c0       	rjmp	.+2      	; 0x1942 <xTaskIncrementTick+0x24a>
    1940:	81 e0       	ldi	r24, 0x01	; 1
    1942:	df 91       	pop	r29
    1944:	cf 91       	pop	r28
    1946:	ff 90       	pop	r15
    1948:	ef 90       	pop	r14
    194a:	df 90       	pop	r13
    194c:	cf 90       	pop	r12
    194e:	08 95       	ret

00001950 <xTaskResumeAll>:
    1950:	cf 92       	push	r12
    1952:	df 92       	push	r13
    1954:	ef 92       	push	r14
    1956:	ff 92       	push	r15
    1958:	cf 93       	push	r28
    195a:	df 93       	push	r29
    195c:	0f b6       	in	r0, 0x3f	; 63
    195e:	f8 94       	cli
    1960:	0f 92       	push	r0
    1962:	80 91 e8 10 	lds	r24, 0x10E8	; 0x8010e8 <uxSchedulerSuspended>
    1966:	81 50       	subi	r24, 0x01	; 1
    1968:	80 93 e8 10 	sts	0x10E8, r24	; 0x8010e8 <uxSchedulerSuspended>
    196c:	80 91 e8 10 	lds	r24, 0x10E8	; 0x8010e8 <uxSchedulerSuspended>
    1970:	81 11       	cpse	r24, r1
    1972:	be c0       	rjmp	.+380    	; 0x1af0 <xTaskResumeAll+0x1a0>
    1974:	80 91 fc 10 	lds	r24, 0x10FC	; 0x8010fc <uxCurrentNumberOfTasks>
    1978:	81 11       	cpse	r24, r1
    197a:	88 c0       	rjmp	.+272    	; 0x1a8c <xTaskResumeAll+0x13c>
    197c:	bc c0       	rjmp	.+376    	; 0x1af6 <xTaskResumeAll+0x1a6>
    197e:	e0 91 1b 11 	lds	r30, 0x111B	; 0x80111b <xPendingReadyList+0x7>
    1982:	f0 91 1c 11 	lds	r31, 0x111C	; 0x80111c <xPendingReadyList+0x8>
    1986:	00 84       	ldd	r0, Z+8	; 0x08
    1988:	f1 85       	ldd	r31, Z+9	; 0x09
    198a:	e0 2d       	mov	r30, r0
    198c:	a0 8d       	ldd	r26, Z+24	; 0x18
    198e:	b1 8d       	ldd	r27, Z+25	; 0x19
    1990:	c2 89       	ldd	r28, Z+18	; 0x12
    1992:	d3 89       	ldd	r29, Z+19	; 0x13
    1994:	84 89       	ldd	r24, Z+20	; 0x14
    1996:	95 89       	ldd	r25, Z+21	; 0x15
    1998:	9f 83       	std	Y+7, r25	; 0x07
    199a:	8e 83       	std	Y+6, r24	; 0x06
    199c:	c4 89       	ldd	r28, Z+20	; 0x14
    199e:	d5 89       	ldd	r29, Z+21	; 0x15
    19a0:	82 89       	ldd	r24, Z+18	; 0x12
    19a2:	93 89       	ldd	r25, Z+19	; 0x13
    19a4:	9d 83       	std	Y+5, r25	; 0x05
    19a6:	8c 83       	std	Y+4, r24	; 0x04
    19a8:	11 96       	adiw	r26, 0x01	; 1
    19aa:	2d 91       	ld	r18, X+
    19ac:	3c 91       	ld	r19, X
    19ae:	12 97       	sbiw	r26, 0x02	; 2
    19b0:	cf 01       	movw	r24, r30
    19b2:	0e 96       	adiw	r24, 0x0e	; 14
    19b4:	28 17       	cp	r18, r24
    19b6:	39 07       	cpc	r19, r25
    19b8:	31 f4       	brne	.+12     	; 0x19c6 <xTaskResumeAll+0x76>
    19ba:	84 89       	ldd	r24, Z+20	; 0x14
    19bc:	95 89       	ldd	r25, Z+21	; 0x15
    19be:	12 96       	adiw	r26, 0x02	; 2
    19c0:	9c 93       	st	X, r25
    19c2:	8e 93       	st	-X, r24
    19c4:	11 97       	sbiw	r26, 0x01	; 1
    19c6:	11 8e       	std	Z+25, r1	; 0x19
    19c8:	10 8e       	std	Z+24, r1	; 0x18
    19ca:	8c 91       	ld	r24, X
    19cc:	81 50       	subi	r24, 0x01	; 1
    19ce:	8c 93       	st	X, r24
    19d0:	a4 85       	ldd	r26, Z+12	; 0x0c
    19d2:	b5 85       	ldd	r27, Z+13	; 0x0d
    19d4:	c6 81       	ldd	r28, Z+6	; 0x06
    19d6:	d7 81       	ldd	r29, Z+7	; 0x07
    19d8:	80 85       	ldd	r24, Z+8	; 0x08
    19da:	91 85       	ldd	r25, Z+9	; 0x09
    19dc:	9f 83       	std	Y+7, r25	; 0x07
    19de:	8e 83       	std	Y+6, r24	; 0x06
    19e0:	c0 85       	ldd	r28, Z+8	; 0x08
    19e2:	d1 85       	ldd	r29, Z+9	; 0x09
    19e4:	86 81       	ldd	r24, Z+6	; 0x06
    19e6:	97 81       	ldd	r25, Z+7	; 0x07
    19e8:	9d 83       	std	Y+5, r25	; 0x05
    19ea:	8c 83       	std	Y+4, r24	; 0x04
    19ec:	11 96       	adiw	r26, 0x01	; 1
    19ee:	8d 91       	ld	r24, X+
    19f0:	9c 91       	ld	r25, X
    19f2:	12 97       	sbiw	r26, 0x02	; 2
    19f4:	9f 01       	movw	r18, r30
    19f6:	2e 5f       	subi	r18, 0xFE	; 254
    19f8:	3f 4f       	sbci	r19, 0xFF	; 255
    19fa:	82 17       	cp	r24, r18
    19fc:	93 07       	cpc	r25, r19
    19fe:	31 f4       	brne	.+12     	; 0x1a0c <xTaskResumeAll+0xbc>
    1a00:	80 85       	ldd	r24, Z+8	; 0x08
    1a02:	91 85       	ldd	r25, Z+9	; 0x09
    1a04:	12 96       	adiw	r26, 0x02	; 2
    1a06:	9c 93       	st	X, r25
    1a08:	8e 93       	st	-X, r24
    1a0a:	11 97       	sbiw	r26, 0x01	; 1
    1a0c:	15 86       	std	Z+13, r1	; 0x0d
    1a0e:	14 86       	std	Z+12, r1	; 0x0c
    1a10:	8c 91       	ld	r24, X
    1a12:	81 50       	subi	r24, 0x01	; 1
    1a14:	8c 93       	st	X, r24
    1a16:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1a18:	80 91 f7 10 	lds	r24, 0x10F7	; 0x8010f7 <uxTopReadyPriority>
    1a1c:	8a 17       	cp	r24, r26
    1a1e:	10 f4       	brcc	.+4      	; 0x1a24 <xTaskResumeAll+0xd4>
    1a20:	a0 93 f7 10 	sts	0x10F7, r26	; 0x8010f7 <uxTopReadyPriority>
    1a24:	8b e0       	ldi	r24, 0x0B	; 11
    1a26:	8a 9f       	mul	r24, r26
    1a28:	d0 01       	movw	r26, r0
    1a2a:	11 24       	eor	r1, r1
    1a2c:	a7 5c       	subi	r26, 0xC7	; 199
    1a2e:	be 4e       	sbci	r27, 0xEE	; 238
    1a30:	11 96       	adiw	r26, 0x01	; 1
    1a32:	0d 90       	ld	r0, X+
    1a34:	bc 91       	ld	r27, X
    1a36:	a0 2d       	mov	r26, r0
    1a38:	b7 83       	std	Z+7, r27	; 0x07
    1a3a:	a6 83       	std	Z+6, r26	; 0x06
    1a3c:	16 96       	adiw	r26, 0x06	; 6
    1a3e:	4d 91       	ld	r20, X+
    1a40:	5c 91       	ld	r21, X
    1a42:	17 97       	sbiw	r26, 0x07	; 7
    1a44:	51 87       	std	Z+9, r21	; 0x09
    1a46:	40 87       	std	Z+8, r20	; 0x08
    1a48:	16 96       	adiw	r26, 0x06	; 6
    1a4a:	cd 91       	ld	r28, X+
    1a4c:	dc 91       	ld	r29, X
    1a4e:	17 97       	sbiw	r26, 0x07	; 7
    1a50:	3d 83       	std	Y+5, r19	; 0x05
    1a52:	2c 83       	std	Y+4, r18	; 0x04
    1a54:	17 96       	adiw	r26, 0x07	; 7
    1a56:	3c 93       	st	X, r19
    1a58:	2e 93       	st	-X, r18
    1a5a:	16 97       	sbiw	r26, 0x06	; 6
    1a5c:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1a5e:	8a 9f       	mul	r24, r26
    1a60:	d0 01       	movw	r26, r0
    1a62:	11 24       	eor	r1, r1
    1a64:	a7 5c       	subi	r26, 0xC7	; 199
    1a66:	be 4e       	sbci	r27, 0xEE	; 238
    1a68:	b5 87       	std	Z+13, r27	; 0x0d
    1a6a:	a4 87       	std	Z+12, r26	; 0x0c
    1a6c:	8c 91       	ld	r24, X
    1a6e:	8f 5f       	subi	r24, 0xFF	; 255
    1a70:	8c 93       	st	X, r24
    1a72:	92 8d       	ldd	r25, Z+26	; 0x1a
    1a74:	a0 91 a7 11 	lds	r26, 0x11A7	; 0x8011a7 <pxCurrentTCB>
    1a78:	b0 91 a8 11 	lds	r27, 0x11A8	; 0x8011a8 <pxCurrentTCB+0x1>
    1a7c:	5a 96       	adiw	r26, 0x1a	; 26
    1a7e:	8c 91       	ld	r24, X
    1a80:	98 17       	cp	r25, r24
    1a82:	30 f0       	brcs	.+12     	; 0x1a90 <xTaskResumeAll+0x140>
    1a84:	81 e0       	ldi	r24, 0x01	; 1
    1a86:	80 93 f1 10 	sts	0x10F1, r24	; 0x8010f1 <xYieldPending>
    1a8a:	02 c0       	rjmp	.+4      	; 0x1a90 <xTaskResumeAll+0x140>
    1a8c:	e0 e0       	ldi	r30, 0x00	; 0
    1a8e:	f0 e0       	ldi	r31, 0x00	; 0
    1a90:	80 91 14 11 	lds	r24, 0x1114	; 0x801114 <xPendingReadyList>
    1a94:	81 11       	cpse	r24, r1
    1a96:	73 cf       	rjmp	.-282    	; 0x197e <xTaskResumeAll+0x2e>
    1a98:	ef 2b       	or	r30, r31
    1a9a:	09 f0       	breq	.+2      	; 0x1a9e <xTaskResumeAll+0x14e>
    1a9c:	87 db       	rcall	.-2290   	; 0x11ac <prvResetNextTaskUnblockTime>
    1a9e:	c0 90 f2 10 	lds	r12, 0x10F2	; 0x8010f2 <xPendedTicks>
    1aa2:	d0 90 f3 10 	lds	r13, 0x10F3	; 0x8010f3 <xPendedTicks+0x1>
    1aa6:	e0 90 f4 10 	lds	r14, 0x10F4	; 0x8010f4 <xPendedTicks+0x2>
    1aaa:	f0 90 f5 10 	lds	r15, 0x10F5	; 0x8010f5 <xPendedTicks+0x3>
    1aae:	c1 14       	cp	r12, r1
    1ab0:	d1 04       	cpc	r13, r1
    1ab2:	e1 04       	cpc	r14, r1
    1ab4:	f1 04       	cpc	r15, r1
    1ab6:	a1 f0       	breq	.+40     	; 0x1ae0 <xTaskResumeAll+0x190>
    1ab8:	1f de       	rcall	.-962    	; 0x16f8 <xTaskIncrementTick>
    1aba:	88 23       	and	r24, r24
    1abc:	19 f0       	breq	.+6      	; 0x1ac4 <xTaskResumeAll+0x174>
    1abe:	81 e0       	ldi	r24, 0x01	; 1
    1ac0:	80 93 f1 10 	sts	0x10F1, r24	; 0x8010f1 <xYieldPending>
    1ac4:	81 e0       	ldi	r24, 0x01	; 1
    1ac6:	c8 1a       	sub	r12, r24
    1ac8:	d1 08       	sbc	r13, r1
    1aca:	e1 08       	sbc	r14, r1
    1acc:	f1 08       	sbc	r15, r1
    1ace:	a1 f7       	brne	.-24     	; 0x1ab8 <xTaskResumeAll+0x168>
    1ad0:	10 92 f2 10 	sts	0x10F2, r1	; 0x8010f2 <xPendedTicks>
    1ad4:	10 92 f3 10 	sts	0x10F3, r1	; 0x8010f3 <xPendedTicks+0x1>
    1ad8:	10 92 f4 10 	sts	0x10F4, r1	; 0x8010f4 <xPendedTicks+0x2>
    1adc:	10 92 f5 10 	sts	0x10F5, r1	; 0x8010f5 <xPendedTicks+0x3>
    1ae0:	80 91 f1 10 	lds	r24, 0x10F1	; 0x8010f1 <xYieldPending>
    1ae4:	88 23       	and	r24, r24
    1ae6:	31 f0       	breq	.+12     	; 0x1af4 <xTaskResumeAll+0x1a4>
    1ae8:	0e 94 89 04 	call	0x912	; 0x912 <vPortYield>
    1aec:	81 e0       	ldi	r24, 0x01	; 1
    1aee:	03 c0       	rjmp	.+6      	; 0x1af6 <xTaskResumeAll+0x1a6>
    1af0:	80 e0       	ldi	r24, 0x00	; 0
    1af2:	01 c0       	rjmp	.+2      	; 0x1af6 <xTaskResumeAll+0x1a6>
    1af4:	80 e0       	ldi	r24, 0x00	; 0
    1af6:	0f 90       	pop	r0
    1af8:	0f be       	out	0x3f, r0	; 63
    1afa:	df 91       	pop	r29
    1afc:	cf 91       	pop	r28
    1afe:	ff 90       	pop	r15
    1b00:	ef 90       	pop	r14
    1b02:	df 90       	pop	r13
    1b04:	cf 90       	pop	r12
    1b06:	08 95       	ret

00001b08 <vTaskDelay>:
    1b08:	cf 92       	push	r12
    1b0a:	df 92       	push	r13
    1b0c:	ef 92       	push	r14
    1b0e:	ff 92       	push	r15
    1b10:	6b 01       	movw	r12, r22
    1b12:	7c 01       	movw	r14, r24
    1b14:	67 2b       	or	r22, r23
    1b16:	68 2b       	or	r22, r24
    1b18:	69 2b       	or	r22, r25
    1b1a:	39 f0       	breq	.+14     	; 0x1b2a <vTaskDelay+0x22>
    1b1c:	d9 dd       	rcall	.-1102   	; 0x16d0 <vTaskSuspendAll>
    1b1e:	40 e0       	ldi	r20, 0x00	; 0
    1b20:	c7 01       	movw	r24, r14
    1b22:	b6 01       	movw	r22, r12
    1b24:	ae dc       	rcall	.-1700   	; 0x1482 <prvAddCurrentTaskToDelayedList>
    1b26:	14 df       	rcall	.-472    	; 0x1950 <xTaskResumeAll>
    1b28:	01 c0       	rjmp	.+2      	; 0x1b2c <vTaskDelay+0x24>
    1b2a:	80 e0       	ldi	r24, 0x00	; 0
    1b2c:	81 11       	cpse	r24, r1
    1b2e:	02 c0       	rjmp	.+4      	; 0x1b34 <vTaskDelay+0x2c>
    1b30:	0e 94 89 04 	call	0x912	; 0x912 <vPortYield>
    1b34:	ff 90       	pop	r15
    1b36:	ef 90       	pop	r14
    1b38:	df 90       	pop	r13
    1b3a:	cf 90       	pop	r12
    1b3c:	08 95       	ret

00001b3e <vTaskSetApplicationTaskTag>:
    1b3e:	00 97       	sbiw	r24, 0x00	; 0
    1b40:	21 f4       	brne	.+8      	; 0x1b4a <vTaskSetApplicationTaskTag+0xc>
    1b42:	80 91 a7 11 	lds	r24, 0x11A7	; 0x8011a7 <pxCurrentTCB>
    1b46:	90 91 a8 11 	lds	r25, 0x11A8	; 0x8011a8 <pxCurrentTCB+0x1>
    1b4a:	0f b6       	in	r0, 0x3f	; 63
    1b4c:	f8 94       	cli
    1b4e:	0f 92       	push	r0
    1b50:	fc 01       	movw	r30, r24
    1b52:	70 ab       	std	Z+48, r23	; 0x30
    1b54:	67 a7       	std	Z+47, r22	; 0x2f
    1b56:	0f 90       	pop	r0
    1b58:	0f be       	out	0x3f, r0	; 63
    1b5a:	08 95       	ret

00001b5c <vTaskSwitchContext>:
    1b5c:	80 91 e8 10 	lds	r24, 0x10E8	; 0x8010e8 <uxSchedulerSuspended>
    1b60:	88 23       	and	r24, r24
    1b62:	21 f0       	breq	.+8      	; 0x1b6c <vTaskSwitchContext+0x10>
    1b64:	81 e0       	ldi	r24, 0x01	; 1
    1b66:	80 93 f1 10 	sts	0x10F1, r24	; 0x8010f1 <xYieldPending>
    1b6a:	08 95       	ret
    1b6c:	10 92 f1 10 	sts	0x10F1, r1	; 0x8010f1 <xYieldPending>
    1b70:	e0 91 a7 11 	lds	r30, 0x11A7	; 0x8011a7 <pxCurrentTCB>
    1b74:	f0 91 a8 11 	lds	r31, 0x11A8	; 0x8011a8 <pxCurrentTCB+0x1>
    1b78:	87 a5       	ldd	r24, Z+47	; 0x2f
    1b7a:	0e 94 5d 02 	call	0x4ba	; 0x4ba <task_switch_out>
    1b7e:	e0 91 a7 11 	lds	r30, 0x11A7	; 0x8011a7 <pxCurrentTCB>
    1b82:	f0 91 a8 11 	lds	r31, 0x11A8	; 0x8011a8 <pxCurrentTCB+0x1>
    1b86:	20 81       	ld	r18, Z
    1b88:	31 81       	ldd	r19, Z+1	; 0x01
    1b8a:	e0 91 a7 11 	lds	r30, 0x11A7	; 0x8011a7 <pxCurrentTCB>
    1b8e:	f0 91 a8 11 	lds	r31, 0x11A8	; 0x8011a8 <pxCurrentTCB+0x1>
    1b92:	83 8d       	ldd	r24, Z+27	; 0x1b
    1b94:	94 8d       	ldd	r25, Z+28	; 0x1c
    1b96:	82 17       	cp	r24, r18
    1b98:	93 07       	cpc	r25, r19
    1b9a:	58 f0       	brcs	.+22     	; 0x1bb2 <vTaskSwitchContext+0x56>
    1b9c:	60 91 a7 11 	lds	r22, 0x11A7	; 0x8011a7 <pxCurrentTCB>
    1ba0:	70 91 a8 11 	lds	r23, 0x11A8	; 0x8011a8 <pxCurrentTCB+0x1>
    1ba4:	63 5e       	subi	r22, 0xE3	; 227
    1ba6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ba8:	80 91 a7 11 	lds	r24, 0x11A7	; 0x8011a7 <pxCurrentTCB>
    1bac:	90 91 a8 11 	lds	r25, 0x11A8	; 0x8011a8 <pxCurrentTCB+0x1>
    1bb0:	44 d6       	rcall	.+3208   	; 0x283a <vApplicationStackOverflowHook>
    1bb2:	80 91 f7 10 	lds	r24, 0x10F7	; 0x8010f7 <uxTopReadyPriority>
    1bb6:	01 c0       	rjmp	.+2      	; 0x1bba <vTaskSwitchContext+0x5e>
    1bb8:	81 50       	subi	r24, 0x01	; 1
    1bba:	28 2f       	mov	r18, r24
    1bbc:	30 e0       	ldi	r19, 0x00	; 0
    1bbe:	9b e0       	ldi	r25, 0x0B	; 11
    1bc0:	92 9f       	mul	r25, r18
    1bc2:	f0 01       	movw	r30, r0
    1bc4:	93 9f       	mul	r25, r19
    1bc6:	f0 0d       	add	r31, r0
    1bc8:	11 24       	eor	r1, r1
    1bca:	e7 5c       	subi	r30, 0xC7	; 199
    1bcc:	fe 4e       	sbci	r31, 0xEE	; 238
    1bce:	90 81       	ld	r25, Z
    1bd0:	99 23       	and	r25, r25
    1bd2:	91 f3       	breq	.-28     	; 0x1bb8 <vTaskSwitchContext+0x5c>
    1bd4:	9b e0       	ldi	r25, 0x0B	; 11
    1bd6:	92 9f       	mul	r25, r18
    1bd8:	a0 01       	movw	r20, r0
    1bda:	93 9f       	mul	r25, r19
    1bdc:	50 0d       	add	r21, r0
    1bde:	11 24       	eor	r1, r1
    1be0:	df 01       	movw	r26, r30
    1be2:	01 80       	ldd	r0, Z+1	; 0x01
    1be4:	f2 81       	ldd	r31, Z+2	; 0x02
    1be6:	e0 2d       	mov	r30, r0
    1be8:	04 80       	ldd	r0, Z+4	; 0x04
    1bea:	f5 81       	ldd	r31, Z+5	; 0x05
    1bec:	e0 2d       	mov	r30, r0
    1bee:	12 96       	adiw	r26, 0x02	; 2
    1bf0:	fc 93       	st	X, r31
    1bf2:	ee 93       	st	-X, r30
    1bf4:	11 97       	sbiw	r26, 0x01	; 1
    1bf6:	44 5c       	subi	r20, 0xC4	; 196
    1bf8:	5e 4e       	sbci	r21, 0xEE	; 238
    1bfa:	e4 17       	cp	r30, r20
    1bfc:	f5 07       	cpc	r31, r21
    1bfe:	29 f4       	brne	.+10     	; 0x1c0a <vTaskSwitchContext+0xae>
    1c00:	44 81       	ldd	r20, Z+4	; 0x04
    1c02:	55 81       	ldd	r21, Z+5	; 0x05
    1c04:	fd 01       	movw	r30, r26
    1c06:	52 83       	std	Z+2, r21	; 0x02
    1c08:	41 83       	std	Z+1, r20	; 0x01
    1c0a:	9b e0       	ldi	r25, 0x0B	; 11
    1c0c:	92 9f       	mul	r25, r18
    1c0e:	f0 01       	movw	r30, r0
    1c10:	93 9f       	mul	r25, r19
    1c12:	f0 0d       	add	r31, r0
    1c14:	11 24       	eor	r1, r1
    1c16:	e7 5c       	subi	r30, 0xC7	; 199
    1c18:	fe 4e       	sbci	r31, 0xEE	; 238
    1c1a:	01 80       	ldd	r0, Z+1	; 0x01
    1c1c:	f2 81       	ldd	r31, Z+2	; 0x02
    1c1e:	e0 2d       	mov	r30, r0
    1c20:	20 85       	ldd	r18, Z+8	; 0x08
    1c22:	31 85       	ldd	r19, Z+9	; 0x09
    1c24:	30 93 a8 11 	sts	0x11A8, r19	; 0x8011a8 <pxCurrentTCB+0x1>
    1c28:	20 93 a7 11 	sts	0x11A7, r18	; 0x8011a7 <pxCurrentTCB>
    1c2c:	80 93 f7 10 	sts	0x10F7, r24	; 0x8010f7 <uxTopReadyPriority>
    1c30:	e0 91 a7 11 	lds	r30, 0x11A7	; 0x8011a7 <pxCurrentTCB>
    1c34:	f0 91 a8 11 	lds	r31, 0x11A8	; 0x8011a8 <pxCurrentTCB+0x1>
    1c38:	87 a5       	ldd	r24, Z+47	; 0x2f
    1c3a:	0c 94 53 02 	jmp	0x4a6	; 0x4a6 <task_switch_in>
    1c3e:	08 95       	ret

00001c40 <vTaskPlaceOnEventList>:
    1c40:	cf 92       	push	r12
    1c42:	df 92       	push	r13
    1c44:	ef 92       	push	r14
    1c46:	ff 92       	push	r15
    1c48:	6a 01       	movw	r12, r20
    1c4a:	7b 01       	movw	r14, r22
    1c4c:	60 91 a7 11 	lds	r22, 0x11A7	; 0x8011a7 <pxCurrentTCB>
    1c50:	70 91 a8 11 	lds	r23, 0x11A8	; 0x8011a8 <pxCurrentTCB+0x1>
    1c54:	62 5f       	subi	r22, 0xF2	; 242
    1c56:	7f 4f       	sbci	r23, 0xFF	; 255
    1c58:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <vListInsert>
    1c5c:	41 e0       	ldi	r20, 0x01	; 1
    1c5e:	c7 01       	movw	r24, r14
    1c60:	b6 01       	movw	r22, r12
    1c62:	0f dc       	rcall	.-2018   	; 0x1482 <prvAddCurrentTaskToDelayedList>
    1c64:	ff 90       	pop	r15
    1c66:	ef 90       	pop	r14
    1c68:	df 90       	pop	r13
    1c6a:	cf 90       	pop	r12
    1c6c:	08 95       	ret

00001c6e <vTaskPlaceOnEventListRestricted>:
    1c6e:	cf 93       	push	r28
    1c70:	df 93       	push	r29
    1c72:	fc 01       	movw	r30, r24
    1c74:	cb 01       	movw	r24, r22
    1c76:	ba 01       	movw	r22, r20
    1c78:	a1 81       	ldd	r26, Z+1	; 0x01
    1c7a:	b2 81       	ldd	r27, Z+2	; 0x02
    1c7c:	c0 91 a7 11 	lds	r28, 0x11A7	; 0x8011a7 <pxCurrentTCB>
    1c80:	d0 91 a8 11 	lds	r29, 0x11A8	; 0x8011a8 <pxCurrentTCB+0x1>
    1c84:	bb 8b       	std	Y+19, r27	; 0x13
    1c86:	aa 8b       	std	Y+18, r26	; 0x12
    1c88:	c0 91 a7 11 	lds	r28, 0x11A7	; 0x8011a7 <pxCurrentTCB>
    1c8c:	d0 91 a8 11 	lds	r29, 0x11A8	; 0x8011a8 <pxCurrentTCB+0x1>
    1c90:	16 96       	adiw	r26, 0x06	; 6
    1c92:	4d 91       	ld	r20, X+
    1c94:	5c 91       	ld	r21, X
    1c96:	17 97       	sbiw	r26, 0x07	; 7
    1c98:	5d 8b       	std	Y+21, r21	; 0x15
    1c9a:	4c 8b       	std	Y+20, r20	; 0x14
    1c9c:	16 96       	adiw	r26, 0x06	; 6
    1c9e:	cd 91       	ld	r28, X+
    1ca0:	dc 91       	ld	r29, X
    1ca2:	17 97       	sbiw	r26, 0x07	; 7
    1ca4:	40 91 a7 11 	lds	r20, 0x11A7	; 0x8011a7 <pxCurrentTCB>
    1ca8:	50 91 a8 11 	lds	r21, 0x11A8	; 0x8011a8 <pxCurrentTCB+0x1>
    1cac:	42 5f       	subi	r20, 0xF2	; 242
    1cae:	5f 4f       	sbci	r21, 0xFF	; 255
    1cb0:	5d 83       	std	Y+5, r21	; 0x05
    1cb2:	4c 83       	std	Y+4, r20	; 0x04
    1cb4:	40 91 a7 11 	lds	r20, 0x11A7	; 0x8011a7 <pxCurrentTCB>
    1cb8:	50 91 a8 11 	lds	r21, 0x11A8	; 0x8011a8 <pxCurrentTCB+0x1>
    1cbc:	42 5f       	subi	r20, 0xF2	; 242
    1cbe:	5f 4f       	sbci	r21, 0xFF	; 255
    1cc0:	17 96       	adiw	r26, 0x07	; 7
    1cc2:	5c 93       	st	X, r21
    1cc4:	4e 93       	st	-X, r20
    1cc6:	16 97       	sbiw	r26, 0x06	; 6
    1cc8:	a0 91 a7 11 	lds	r26, 0x11A7	; 0x8011a7 <pxCurrentTCB>
    1ccc:	b0 91 a8 11 	lds	r27, 0x11A8	; 0x8011a8 <pxCurrentTCB+0x1>
    1cd0:	59 96       	adiw	r26, 0x19	; 25
    1cd2:	fc 93       	st	X, r31
    1cd4:	ee 93       	st	-X, r30
    1cd6:	58 97       	sbiw	r26, 0x18	; 24
    1cd8:	30 81       	ld	r19, Z
    1cda:	3f 5f       	subi	r19, 0xFF	; 255
    1cdc:	30 83       	st	Z, r19
    1cde:	22 23       	and	r18, r18
    1ce0:	19 f0       	breq	.+6      	; 0x1ce8 <vTaskPlaceOnEventListRestricted+0x7a>
    1ce2:	6f ef       	ldi	r22, 0xFF	; 255
    1ce4:	7f ef       	ldi	r23, 0xFF	; 255
    1ce6:	cb 01       	movw	r24, r22
    1ce8:	42 2f       	mov	r20, r18
    1cea:	cb db       	rcall	.-2154   	; 0x1482 <prvAddCurrentTaskToDelayedList>
    1cec:	df 91       	pop	r29
    1cee:	cf 91       	pop	r28
    1cf0:	08 95       	ret

00001cf2 <xTaskRemoveFromEventList>:
    1cf2:	cf 93       	push	r28
    1cf4:	df 93       	push	r29
    1cf6:	dc 01       	movw	r26, r24
    1cf8:	17 96       	adiw	r26, 0x07	; 7
    1cfa:	ed 91       	ld	r30, X+
    1cfc:	fc 91       	ld	r31, X
    1cfe:	18 97       	sbiw	r26, 0x08	; 8
    1d00:	00 84       	ldd	r0, Z+8	; 0x08
    1d02:	f1 85       	ldd	r31, Z+9	; 0x09
    1d04:	e0 2d       	mov	r30, r0
    1d06:	a0 8d       	ldd	r26, Z+24	; 0x18
    1d08:	b1 8d       	ldd	r27, Z+25	; 0x19
    1d0a:	c2 89       	ldd	r28, Z+18	; 0x12
    1d0c:	d3 89       	ldd	r29, Z+19	; 0x13
    1d0e:	84 89       	ldd	r24, Z+20	; 0x14
    1d10:	95 89       	ldd	r25, Z+21	; 0x15
    1d12:	9f 83       	std	Y+7, r25	; 0x07
    1d14:	8e 83       	std	Y+6, r24	; 0x06
    1d16:	c4 89       	ldd	r28, Z+20	; 0x14
    1d18:	d5 89       	ldd	r29, Z+21	; 0x15
    1d1a:	82 89       	ldd	r24, Z+18	; 0x12
    1d1c:	93 89       	ldd	r25, Z+19	; 0x13
    1d1e:	9d 83       	std	Y+5, r25	; 0x05
    1d20:	8c 83       	std	Y+4, r24	; 0x04
    1d22:	11 96       	adiw	r26, 0x01	; 1
    1d24:	8d 91       	ld	r24, X+
    1d26:	9c 91       	ld	r25, X
    1d28:	12 97       	sbiw	r26, 0x02	; 2
    1d2a:	9f 01       	movw	r18, r30
    1d2c:	22 5f       	subi	r18, 0xF2	; 242
    1d2e:	3f 4f       	sbci	r19, 0xFF	; 255
    1d30:	82 17       	cp	r24, r18
    1d32:	93 07       	cpc	r25, r19
    1d34:	31 f4       	brne	.+12     	; 0x1d42 <xTaskRemoveFromEventList+0x50>
    1d36:	84 89       	ldd	r24, Z+20	; 0x14
    1d38:	95 89       	ldd	r25, Z+21	; 0x15
    1d3a:	12 96       	adiw	r26, 0x02	; 2
    1d3c:	9c 93       	st	X, r25
    1d3e:	8e 93       	st	-X, r24
    1d40:	11 97       	sbiw	r26, 0x01	; 1
    1d42:	11 8e       	std	Z+25, r1	; 0x19
    1d44:	10 8e       	std	Z+24, r1	; 0x18
    1d46:	8c 91       	ld	r24, X
    1d48:	81 50       	subi	r24, 0x01	; 1
    1d4a:	8c 93       	st	X, r24
    1d4c:	80 91 e8 10 	lds	r24, 0x10E8	; 0x8010e8 <uxSchedulerSuspended>
    1d50:	81 11       	cpse	r24, r1
    1d52:	52 c0       	rjmp	.+164    	; 0x1df8 <xTaskRemoveFromEventList+0x106>
    1d54:	a4 85       	ldd	r26, Z+12	; 0x0c
    1d56:	b5 85       	ldd	r27, Z+13	; 0x0d
    1d58:	c6 81       	ldd	r28, Z+6	; 0x06
    1d5a:	d7 81       	ldd	r29, Z+7	; 0x07
    1d5c:	80 85       	ldd	r24, Z+8	; 0x08
    1d5e:	91 85       	ldd	r25, Z+9	; 0x09
    1d60:	9f 83       	std	Y+7, r25	; 0x07
    1d62:	8e 83       	std	Y+6, r24	; 0x06
    1d64:	c0 85       	ldd	r28, Z+8	; 0x08
    1d66:	d1 85       	ldd	r29, Z+9	; 0x09
    1d68:	86 81       	ldd	r24, Z+6	; 0x06
    1d6a:	97 81       	ldd	r25, Z+7	; 0x07
    1d6c:	9d 83       	std	Y+5, r25	; 0x05
    1d6e:	8c 83       	std	Y+4, r24	; 0x04
    1d70:	11 96       	adiw	r26, 0x01	; 1
    1d72:	8d 91       	ld	r24, X+
    1d74:	9c 91       	ld	r25, X
    1d76:	12 97       	sbiw	r26, 0x02	; 2
    1d78:	9f 01       	movw	r18, r30
    1d7a:	2e 5f       	subi	r18, 0xFE	; 254
    1d7c:	3f 4f       	sbci	r19, 0xFF	; 255
    1d7e:	82 17       	cp	r24, r18
    1d80:	93 07       	cpc	r25, r19
    1d82:	31 f4       	brne	.+12     	; 0x1d90 <xTaskRemoveFromEventList+0x9e>
    1d84:	80 85       	ldd	r24, Z+8	; 0x08
    1d86:	91 85       	ldd	r25, Z+9	; 0x09
    1d88:	12 96       	adiw	r26, 0x02	; 2
    1d8a:	9c 93       	st	X, r25
    1d8c:	8e 93       	st	-X, r24
    1d8e:	11 97       	sbiw	r26, 0x01	; 1
    1d90:	15 86       	std	Z+13, r1	; 0x0d
    1d92:	14 86       	std	Z+12, r1	; 0x0c
    1d94:	8c 91       	ld	r24, X
    1d96:	81 50       	subi	r24, 0x01	; 1
    1d98:	8c 93       	st	X, r24
    1d9a:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1d9c:	80 91 f7 10 	lds	r24, 0x10F7	; 0x8010f7 <uxTopReadyPriority>
    1da0:	8a 17       	cp	r24, r26
    1da2:	10 f4       	brcc	.+4      	; 0x1da8 <xTaskRemoveFromEventList+0xb6>
    1da4:	a0 93 f7 10 	sts	0x10F7, r26	; 0x8010f7 <uxTopReadyPriority>
    1da8:	8b e0       	ldi	r24, 0x0B	; 11
    1daa:	8a 9f       	mul	r24, r26
    1dac:	d0 01       	movw	r26, r0
    1dae:	11 24       	eor	r1, r1
    1db0:	a7 5c       	subi	r26, 0xC7	; 199
    1db2:	be 4e       	sbci	r27, 0xEE	; 238
    1db4:	11 96       	adiw	r26, 0x01	; 1
    1db6:	0d 90       	ld	r0, X+
    1db8:	bc 91       	ld	r27, X
    1dba:	a0 2d       	mov	r26, r0
    1dbc:	b7 83       	std	Z+7, r27	; 0x07
    1dbe:	a6 83       	std	Z+6, r26	; 0x06
    1dc0:	16 96       	adiw	r26, 0x06	; 6
    1dc2:	4d 91       	ld	r20, X+
    1dc4:	5c 91       	ld	r21, X
    1dc6:	17 97       	sbiw	r26, 0x07	; 7
    1dc8:	51 87       	std	Z+9, r21	; 0x09
    1dca:	40 87       	std	Z+8, r20	; 0x08
    1dcc:	16 96       	adiw	r26, 0x06	; 6
    1dce:	cd 91       	ld	r28, X+
    1dd0:	dc 91       	ld	r29, X
    1dd2:	17 97       	sbiw	r26, 0x07	; 7
    1dd4:	3d 83       	std	Y+5, r19	; 0x05
    1dd6:	2c 83       	std	Y+4, r18	; 0x04
    1dd8:	17 96       	adiw	r26, 0x07	; 7
    1dda:	3c 93       	st	X, r19
    1ddc:	2e 93       	st	-X, r18
    1dde:	16 97       	sbiw	r26, 0x06	; 6
    1de0:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1de2:	8a 9f       	mul	r24, r26
    1de4:	d0 01       	movw	r26, r0
    1de6:	11 24       	eor	r1, r1
    1de8:	a7 5c       	subi	r26, 0xC7	; 199
    1dea:	be 4e       	sbci	r27, 0xEE	; 238
    1dec:	b5 87       	std	Z+13, r27	; 0x0d
    1dee:	a4 87       	std	Z+12, r26	; 0x0c
    1df0:	8c 91       	ld	r24, X
    1df2:	8f 5f       	subi	r24, 0xFF	; 255
    1df4:	8c 93       	st	X, r24
    1df6:	1c c0       	rjmp	.+56     	; 0x1e30 <xTaskRemoveFromEventList+0x13e>
    1df8:	44 e1       	ldi	r20, 0x14	; 20
    1dfa:	51 e1       	ldi	r21, 0x11	; 17
    1dfc:	da 01       	movw	r26, r20
    1dfe:	11 96       	adiw	r26, 0x01	; 1
    1e00:	cd 91       	ld	r28, X+
    1e02:	dc 91       	ld	r29, X
    1e04:	12 97       	sbiw	r26, 0x02	; 2
    1e06:	d3 8b       	std	Z+19, r29	; 0x13
    1e08:	c2 8b       	std	Z+18, r28	; 0x12
    1e0a:	8e 81       	ldd	r24, Y+6	; 0x06
    1e0c:	9f 81       	ldd	r25, Y+7	; 0x07
    1e0e:	95 8b       	std	Z+21, r25	; 0x15
    1e10:	84 8b       	std	Z+20, r24	; 0x14
    1e12:	8e 81       	ldd	r24, Y+6	; 0x06
    1e14:	9f 81       	ldd	r25, Y+7	; 0x07
    1e16:	dc 01       	movw	r26, r24
    1e18:	15 96       	adiw	r26, 0x05	; 5
    1e1a:	3c 93       	st	X, r19
    1e1c:	2e 93       	st	-X, r18
    1e1e:	14 97       	sbiw	r26, 0x04	; 4
    1e20:	3f 83       	std	Y+7, r19	; 0x07
    1e22:	2e 83       	std	Y+6, r18	; 0x06
    1e24:	51 8f       	std	Z+25, r21	; 0x19
    1e26:	40 8f       	std	Z+24, r20	; 0x18
    1e28:	da 01       	movw	r26, r20
    1e2a:	8c 91       	ld	r24, X
    1e2c:	8f 5f       	subi	r24, 0xFF	; 255
    1e2e:	8c 93       	st	X, r24
    1e30:	92 8d       	ldd	r25, Z+26	; 0x1a
    1e32:	e0 91 a7 11 	lds	r30, 0x11A7	; 0x8011a7 <pxCurrentTCB>
    1e36:	f0 91 a8 11 	lds	r31, 0x11A8	; 0x8011a8 <pxCurrentTCB+0x1>
    1e3a:	82 8d       	ldd	r24, Z+26	; 0x1a
    1e3c:	89 17       	cp	r24, r25
    1e3e:	20 f4       	brcc	.+8      	; 0x1e48 <xTaskRemoveFromEventList+0x156>
    1e40:	81 e0       	ldi	r24, 0x01	; 1
    1e42:	80 93 f1 10 	sts	0x10F1, r24	; 0x8010f1 <xYieldPending>
    1e46:	01 c0       	rjmp	.+2      	; 0x1e4a <xTaskRemoveFromEventList+0x158>
    1e48:	80 e0       	ldi	r24, 0x00	; 0
    1e4a:	df 91       	pop	r29
    1e4c:	cf 91       	pop	r28
    1e4e:	08 95       	ret

00001e50 <vTaskInternalSetTimeOutState>:
    1e50:	20 91 f0 10 	lds	r18, 0x10F0	; 0x8010f0 <xNumOfOverflows>
    1e54:	fc 01       	movw	r30, r24
    1e56:	20 83       	st	Z, r18
    1e58:	40 91 f8 10 	lds	r20, 0x10F8	; 0x8010f8 <xTickCount>
    1e5c:	50 91 f9 10 	lds	r21, 0x10F9	; 0x8010f9 <xTickCount+0x1>
    1e60:	60 91 fa 10 	lds	r22, 0x10FA	; 0x8010fa <xTickCount+0x2>
    1e64:	70 91 fb 10 	lds	r23, 0x10FB	; 0x8010fb <xTickCount+0x3>
    1e68:	41 83       	std	Z+1, r20	; 0x01
    1e6a:	52 83       	std	Z+2, r21	; 0x02
    1e6c:	63 83       	std	Z+3, r22	; 0x03
    1e6e:	74 83       	std	Z+4, r23	; 0x04
    1e70:	08 95       	ret

00001e72 <xTaskCheckForTimeOut>:
    1e72:	8f 92       	push	r8
    1e74:	9f 92       	push	r9
    1e76:	af 92       	push	r10
    1e78:	bf 92       	push	r11
    1e7a:	cf 92       	push	r12
    1e7c:	df 92       	push	r13
    1e7e:	ef 92       	push	r14
    1e80:	ff 92       	push	r15
    1e82:	0f 93       	push	r16
    1e84:	1f 93       	push	r17
    1e86:	cf 93       	push	r28
    1e88:	df 93       	push	r29
    1e8a:	fb 01       	movw	r30, r22
    1e8c:	0f b6       	in	r0, 0x3f	; 63
    1e8e:	f8 94       	cli
    1e90:	0f 92       	push	r0
    1e92:	c0 90 f8 10 	lds	r12, 0x10F8	; 0x8010f8 <xTickCount>
    1e96:	d0 90 f9 10 	lds	r13, 0x10F9	; 0x8010f9 <xTickCount+0x1>
    1e9a:	e0 90 fa 10 	lds	r14, 0x10FA	; 0x8010fa <xTickCount+0x2>
    1e9e:	f0 90 fb 10 	lds	r15, 0x10FB	; 0x8010fb <xTickCount+0x3>
    1ea2:	dc 01       	movw	r26, r24
    1ea4:	11 96       	adiw	r26, 0x01	; 1
    1ea6:	0d 91       	ld	r16, X+
    1ea8:	1d 91       	ld	r17, X+
    1eaa:	2d 91       	ld	r18, X+
    1eac:	3c 91       	ld	r19, X
    1eae:	14 97       	sbiw	r26, 0x04	; 4
    1eb0:	46 01       	movw	r8, r12
    1eb2:	57 01       	movw	r10, r14
    1eb4:	80 1a       	sub	r8, r16
    1eb6:	91 0a       	sbc	r9, r17
    1eb8:	a2 0a       	sbc	r10, r18
    1eba:	b3 0a       	sbc	r11, r19
    1ebc:	40 81       	ld	r20, Z
    1ebe:	51 81       	ldd	r21, Z+1	; 0x01
    1ec0:	62 81       	ldd	r22, Z+2	; 0x02
    1ec2:	73 81       	ldd	r23, Z+3	; 0x03
    1ec4:	4f 3f       	cpi	r20, 0xFF	; 255
    1ec6:	bf ef       	ldi	r27, 0xFF	; 255
    1ec8:	5b 07       	cpc	r21, r27
    1eca:	6b 07       	cpc	r22, r27
    1ecc:	7b 07       	cpc	r23, r27
    1ece:	39 f1       	breq	.+78     	; 0x1f1e <xTaskCheckForTimeOut+0xac>
    1ed0:	ec 01       	movw	r28, r24
    1ed2:	b8 81       	ld	r27, Y
    1ed4:	a0 91 f0 10 	lds	r26, 0x10F0	; 0x8010f0 <xNumOfOverflows>
    1ed8:	ba 17       	cp	r27, r26
    1eda:	59 f0       	breq	.+22     	; 0x1ef2 <xTaskCheckForTimeOut+0x80>
    1edc:	c0 16       	cp	r12, r16
    1ede:	d1 06       	cpc	r13, r17
    1ee0:	e2 06       	cpc	r14, r18
    1ee2:	f3 06       	cpc	r15, r19
    1ee4:	30 f0       	brcs	.+12     	; 0x1ef2 <xTaskCheckForTimeOut+0x80>
    1ee6:	10 82       	st	Z, r1
    1ee8:	11 82       	std	Z+1, r1	; 0x01
    1eea:	12 82       	std	Z+2, r1	; 0x02
    1eec:	13 82       	std	Z+3, r1	; 0x03
    1eee:	81 e0       	ldi	r24, 0x01	; 1
    1ef0:	17 c0       	rjmp	.+46     	; 0x1f20 <xTaskCheckForTimeOut+0xae>
    1ef2:	84 16       	cp	r8, r20
    1ef4:	95 06       	cpc	r9, r21
    1ef6:	a6 06       	cpc	r10, r22
    1ef8:	b7 06       	cpc	r11, r23
    1efa:	58 f4       	brcc	.+22     	; 0x1f12 <xTaskCheckForTimeOut+0xa0>
    1efc:	48 19       	sub	r20, r8
    1efe:	59 09       	sbc	r21, r9
    1f00:	6a 09       	sbc	r22, r10
    1f02:	7b 09       	sbc	r23, r11
    1f04:	40 83       	st	Z, r20
    1f06:	51 83       	std	Z+1, r21	; 0x01
    1f08:	62 83       	std	Z+2, r22	; 0x02
    1f0a:	73 83       	std	Z+3, r23	; 0x03
    1f0c:	a1 df       	rcall	.-190    	; 0x1e50 <vTaskInternalSetTimeOutState>
    1f0e:	80 e0       	ldi	r24, 0x00	; 0
    1f10:	07 c0       	rjmp	.+14     	; 0x1f20 <xTaskCheckForTimeOut+0xae>
    1f12:	10 82       	st	Z, r1
    1f14:	11 82       	std	Z+1, r1	; 0x01
    1f16:	12 82       	std	Z+2, r1	; 0x02
    1f18:	13 82       	std	Z+3, r1	; 0x03
    1f1a:	81 e0       	ldi	r24, 0x01	; 1
    1f1c:	01 c0       	rjmp	.+2      	; 0x1f20 <xTaskCheckForTimeOut+0xae>
    1f1e:	80 e0       	ldi	r24, 0x00	; 0
    1f20:	0f 90       	pop	r0
    1f22:	0f be       	out	0x3f, r0	; 63
    1f24:	df 91       	pop	r29
    1f26:	cf 91       	pop	r28
    1f28:	1f 91       	pop	r17
    1f2a:	0f 91       	pop	r16
    1f2c:	ff 90       	pop	r15
    1f2e:	ef 90       	pop	r14
    1f30:	df 90       	pop	r13
    1f32:	cf 90       	pop	r12
    1f34:	bf 90       	pop	r11
    1f36:	af 90       	pop	r10
    1f38:	9f 90       	pop	r9
    1f3a:	8f 90       	pop	r8
    1f3c:	08 95       	ret

00001f3e <vTaskMissedYield>:
    1f3e:	81 e0       	ldi	r24, 0x01	; 1
    1f40:	80 93 f1 10 	sts	0x10F1, r24	; 0x8010f1 <xYieldPending>
    1f44:	08 95       	ret

00001f46 <xTaskGetSchedulerState>:
    1f46:	80 91 f6 10 	lds	r24, 0x10F6	; 0x8010f6 <xSchedulerRunning>
    1f4a:	88 23       	and	r24, r24
    1f4c:	31 f0       	breq	.+12     	; 0x1f5a <xTaskGetSchedulerState+0x14>
    1f4e:	80 91 e8 10 	lds	r24, 0x10E8	; 0x8010e8 <uxSchedulerSuspended>
    1f52:	81 11       	cpse	r24, r1
    1f54:	04 c0       	rjmp	.+8      	; 0x1f5e <xTaskGetSchedulerState+0x18>
    1f56:	82 e0       	ldi	r24, 0x02	; 2
    1f58:	08 95       	ret
    1f5a:	81 e0       	ldi	r24, 0x01	; 1
    1f5c:	08 95       	ret
    1f5e:	80 e0       	ldi	r24, 0x00	; 0
    1f60:	08 95       	ret

00001f62 <xTaskPriorityInherit>:
    1f62:	0f 93       	push	r16
    1f64:	1f 93       	push	r17
    1f66:	cf 93       	push	r28
    1f68:	df 93       	push	r29
    1f6a:	fc 01       	movw	r30, r24
    1f6c:	89 2b       	or	r24, r25
    1f6e:	09 f4       	brne	.+2      	; 0x1f72 <xTaskPriorityInherit+0x10>
    1f70:	77 c0       	rjmp	.+238    	; 0x2060 <__DATA_REGION_LENGTH__+0x60>
    1f72:	82 8d       	ldd	r24, Z+26	; 0x1a
    1f74:	a0 91 a7 11 	lds	r26, 0x11A7	; 0x8011a7 <pxCurrentTCB>
    1f78:	b0 91 a8 11 	lds	r27, 0x11A8	; 0x8011a8 <pxCurrentTCB+0x1>
    1f7c:	5a 96       	adiw	r26, 0x1a	; 26
    1f7e:	9c 91       	ld	r25, X
    1f80:	89 17       	cp	r24, r25
    1f82:	08 f0       	brcs	.+2      	; 0x1f86 <xTaskPriorityInherit+0x24>
    1f84:	63 c0       	rjmp	.+198    	; 0x204c <__DATA_REGION_LENGTH__+0x4c>
    1f86:	46 85       	ldd	r20, Z+14	; 0x0e
    1f88:	57 85       	ldd	r21, Z+15	; 0x0f
    1f8a:	60 89       	ldd	r22, Z+16	; 0x10
    1f8c:	71 89       	ldd	r23, Z+17	; 0x11
    1f8e:	77 23       	and	r23, r23
    1f90:	94 f0       	brlt	.+36     	; 0x1fb6 <xTaskPriorityInherit+0x54>
    1f92:	a0 91 a7 11 	lds	r26, 0x11A7	; 0x8011a7 <pxCurrentTCB>
    1f96:	b0 91 a8 11 	lds	r27, 0x11A8	; 0x8011a8 <pxCurrentTCB+0x1>
    1f9a:	5a 96       	adiw	r26, 0x1a	; 26
    1f9c:	9c 91       	ld	r25, X
    1f9e:	4a e0       	ldi	r20, 0x0A	; 10
    1fa0:	50 e0       	ldi	r21, 0x00	; 0
    1fa2:	60 e0       	ldi	r22, 0x00	; 0
    1fa4:	70 e0       	ldi	r23, 0x00	; 0
    1fa6:	49 1b       	sub	r20, r25
    1fa8:	51 09       	sbc	r21, r1
    1faa:	61 09       	sbc	r22, r1
    1fac:	71 09       	sbc	r23, r1
    1fae:	46 87       	std	Z+14, r20	; 0x0e
    1fb0:	57 87       	std	Z+15, r21	; 0x0f
    1fb2:	60 8b       	std	Z+16, r22	; 0x10
    1fb4:	71 8b       	std	Z+17, r23	; 0x11
    1fb6:	24 85       	ldd	r18, Z+12	; 0x0c
    1fb8:	35 85       	ldd	r19, Z+13	; 0x0d
    1fba:	4b e0       	ldi	r20, 0x0B	; 11
    1fbc:	84 9f       	mul	r24, r20
    1fbe:	c0 01       	movw	r24, r0
    1fc0:	11 24       	eor	r1, r1
    1fc2:	87 5c       	subi	r24, 0xC7	; 199
    1fc4:	9e 4e       	sbci	r25, 0xEE	; 238
    1fc6:	28 17       	cp	r18, r24
    1fc8:	39 07       	cpc	r19, r25
    1fca:	b9 f5       	brne	.+110    	; 0x203a <__DATA_REGION_LENGTH__+0x3a>
    1fcc:	ef 01       	movw	r28, r30
    1fce:	8f 01       	movw	r16, r30
    1fd0:	0e 5f       	subi	r16, 0xFE	; 254
    1fd2:	1f 4f       	sbci	r17, 0xFF	; 255
    1fd4:	c8 01       	movw	r24, r16
    1fd6:	0e 94 0d 04 	call	0x81a	; 0x81a <uxListRemove>
    1fda:	e0 91 a7 11 	lds	r30, 0x11A7	; 0x8011a7 <pxCurrentTCB>
    1fde:	f0 91 a8 11 	lds	r31, 0x11A8	; 0x8011a8 <pxCurrentTCB+0x1>
    1fe2:	e2 8d       	ldd	r30, Z+26	; 0x1a
    1fe4:	ea 8f       	std	Y+26, r30	; 0x1a
    1fe6:	80 91 f7 10 	lds	r24, 0x10F7	; 0x8010f7 <uxTopReadyPriority>
    1fea:	8e 17       	cp	r24, r30
    1fec:	10 f4       	brcc	.+4      	; 0x1ff2 <xTaskPriorityInherit+0x90>
    1fee:	e0 93 f7 10 	sts	0x10F7, r30	; 0x8010f7 <uxTopReadyPriority>
    1ff2:	8b e0       	ldi	r24, 0x0B	; 11
    1ff4:	8e 9f       	mul	r24, r30
    1ff6:	f0 01       	movw	r30, r0
    1ff8:	11 24       	eor	r1, r1
    1ffa:	e7 5c       	subi	r30, 0xC7	; 199
    1ffc:	fe 4e       	sbci	r31, 0xEE	; 238
    1ffe:	01 80       	ldd	r0, Z+1	; 0x01
    2000:	f2 81       	ldd	r31, Z+2	; 0x02
    2002:	e0 2d       	mov	r30, r0
    2004:	ff 83       	std	Y+7, r31	; 0x07
    2006:	ee 83       	std	Y+6, r30	; 0x06
    2008:	26 81       	ldd	r18, Z+6	; 0x06
    200a:	37 81       	ldd	r19, Z+7	; 0x07
    200c:	39 87       	std	Y+9, r19	; 0x09
    200e:	28 87       	std	Y+8, r18	; 0x08
    2010:	a6 81       	ldd	r26, Z+6	; 0x06
    2012:	b7 81       	ldd	r27, Z+7	; 0x07
    2014:	15 96       	adiw	r26, 0x05	; 5
    2016:	1c 93       	st	X, r17
    2018:	0e 93       	st	-X, r16
    201a:	14 97       	sbiw	r26, 0x04	; 4
    201c:	17 83       	std	Z+7, r17	; 0x07
    201e:	06 83       	std	Z+6, r16	; 0x06
    2020:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2022:	8e 9f       	mul	r24, r30
    2024:	f0 01       	movw	r30, r0
    2026:	11 24       	eor	r1, r1
    2028:	e7 5c       	subi	r30, 0xC7	; 199
    202a:	fe 4e       	sbci	r31, 0xEE	; 238
    202c:	fd 87       	std	Y+13, r31	; 0x0d
    202e:	ec 87       	std	Y+12, r30	; 0x0c
    2030:	80 81       	ld	r24, Z
    2032:	8f 5f       	subi	r24, 0xFF	; 255
    2034:	80 83       	st	Z, r24
    2036:	81 e0       	ldi	r24, 0x01	; 1
    2038:	16 c0       	rjmp	.+44     	; 0x2066 <__DATA_REGION_LENGTH__+0x66>
    203a:	a0 91 a7 11 	lds	r26, 0x11A7	; 0x8011a7 <pxCurrentTCB>
    203e:	b0 91 a8 11 	lds	r27, 0x11A8	; 0x8011a8 <pxCurrentTCB+0x1>
    2042:	5a 96       	adiw	r26, 0x1a	; 26
    2044:	8c 91       	ld	r24, X
    2046:	82 8f       	std	Z+26, r24	; 0x1a
    2048:	81 e0       	ldi	r24, 0x01	; 1
    204a:	0d c0       	rjmp	.+26     	; 0x2066 <__DATA_REGION_LENGTH__+0x66>
    204c:	95 a5       	ldd	r25, Z+45	; 0x2d
    204e:	e0 91 a7 11 	lds	r30, 0x11A7	; 0x8011a7 <pxCurrentTCB>
    2052:	f0 91 a8 11 	lds	r31, 0x11A8	; 0x8011a8 <pxCurrentTCB+0x1>
    2056:	82 8d       	ldd	r24, Z+26	; 0x1a
    2058:	98 17       	cp	r25, r24
    205a:	20 f0       	brcs	.+8      	; 0x2064 <__DATA_REGION_LENGTH__+0x64>
    205c:	80 e0       	ldi	r24, 0x00	; 0
    205e:	03 c0       	rjmp	.+6      	; 0x2066 <__DATA_REGION_LENGTH__+0x66>
    2060:	80 e0       	ldi	r24, 0x00	; 0
    2062:	01 c0       	rjmp	.+2      	; 0x2066 <__DATA_REGION_LENGTH__+0x66>
    2064:	81 e0       	ldi	r24, 0x01	; 1
    2066:	df 91       	pop	r29
    2068:	cf 91       	pop	r28
    206a:	1f 91       	pop	r17
    206c:	0f 91       	pop	r16
    206e:	08 95       	ret

00002070 <xTaskPriorityDisinherit>:
    2070:	0f 93       	push	r16
    2072:	1f 93       	push	r17
    2074:	cf 93       	push	r28
    2076:	df 93       	push	r29
    2078:	fc 01       	movw	r30, r24
    207a:	89 2b       	or	r24, r25
    207c:	09 f4       	brne	.+2      	; 0x2080 <xTaskPriorityDisinherit+0x10>
    207e:	49 c0       	rjmp	.+146    	; 0x2112 <xTaskPriorityDisinherit+0xa2>
    2080:	86 a5       	ldd	r24, Z+46	; 0x2e
    2082:	81 50       	subi	r24, 0x01	; 1
    2084:	86 a7       	std	Z+46, r24	; 0x2e
    2086:	22 8d       	ldd	r18, Z+26	; 0x1a
    2088:	95 a5       	ldd	r25, Z+45	; 0x2d
    208a:	29 17       	cp	r18, r25
    208c:	09 f4       	brne	.+2      	; 0x2090 <xTaskPriorityDisinherit+0x20>
    208e:	43 c0       	rjmp	.+134    	; 0x2116 <xTaskPriorityDisinherit+0xa6>
    2090:	81 11       	cpse	r24, r1
    2092:	43 c0       	rjmp	.+134    	; 0x211a <xTaskPriorityDisinherit+0xaa>
    2094:	ef 01       	movw	r28, r30
    2096:	8f 01       	movw	r16, r30
    2098:	0e 5f       	subi	r16, 0xFE	; 254
    209a:	1f 4f       	sbci	r17, 0xFF	; 255
    209c:	c8 01       	movw	r24, r16
    209e:	0e 94 0d 04 	call	0x81a	; 0x81a <uxListRemove>
    20a2:	ed a5       	ldd	r30, Y+45	; 0x2d
    20a4:	ea 8f       	std	Y+26, r30	; 0x1a
    20a6:	8a e0       	ldi	r24, 0x0A	; 10
    20a8:	90 e0       	ldi	r25, 0x00	; 0
    20aa:	a0 e0       	ldi	r26, 0x00	; 0
    20ac:	b0 e0       	ldi	r27, 0x00	; 0
    20ae:	8e 1b       	sub	r24, r30
    20b0:	91 09       	sbc	r25, r1
    20b2:	a1 09       	sbc	r26, r1
    20b4:	b1 09       	sbc	r27, r1
    20b6:	8e 87       	std	Y+14, r24	; 0x0e
    20b8:	9f 87       	std	Y+15, r25	; 0x0f
    20ba:	a8 8b       	std	Y+16, r26	; 0x10
    20bc:	b9 8b       	std	Y+17, r27	; 0x11
    20be:	80 91 f7 10 	lds	r24, 0x10F7	; 0x8010f7 <uxTopReadyPriority>
    20c2:	8e 17       	cp	r24, r30
    20c4:	10 f4       	brcc	.+4      	; 0x20ca <xTaskPriorityDisinherit+0x5a>
    20c6:	e0 93 f7 10 	sts	0x10F7, r30	; 0x8010f7 <uxTopReadyPriority>
    20ca:	8b e0       	ldi	r24, 0x0B	; 11
    20cc:	8e 9f       	mul	r24, r30
    20ce:	f0 01       	movw	r30, r0
    20d0:	11 24       	eor	r1, r1
    20d2:	e7 5c       	subi	r30, 0xC7	; 199
    20d4:	fe 4e       	sbci	r31, 0xEE	; 238
    20d6:	01 80       	ldd	r0, Z+1	; 0x01
    20d8:	f2 81       	ldd	r31, Z+2	; 0x02
    20da:	e0 2d       	mov	r30, r0
    20dc:	ff 83       	std	Y+7, r31	; 0x07
    20de:	ee 83       	std	Y+6, r30	; 0x06
    20e0:	26 81       	ldd	r18, Z+6	; 0x06
    20e2:	37 81       	ldd	r19, Z+7	; 0x07
    20e4:	39 87       	std	Y+9, r19	; 0x09
    20e6:	28 87       	std	Y+8, r18	; 0x08
    20e8:	a6 81       	ldd	r26, Z+6	; 0x06
    20ea:	b7 81       	ldd	r27, Z+7	; 0x07
    20ec:	15 96       	adiw	r26, 0x05	; 5
    20ee:	1c 93       	st	X, r17
    20f0:	0e 93       	st	-X, r16
    20f2:	14 97       	sbiw	r26, 0x04	; 4
    20f4:	17 83       	std	Z+7, r17	; 0x07
    20f6:	06 83       	std	Z+6, r16	; 0x06
    20f8:	ea 8d       	ldd	r30, Y+26	; 0x1a
    20fa:	8e 9f       	mul	r24, r30
    20fc:	f0 01       	movw	r30, r0
    20fe:	11 24       	eor	r1, r1
    2100:	e7 5c       	subi	r30, 0xC7	; 199
    2102:	fe 4e       	sbci	r31, 0xEE	; 238
    2104:	fd 87       	std	Y+13, r31	; 0x0d
    2106:	ec 87       	std	Y+12, r30	; 0x0c
    2108:	80 81       	ld	r24, Z
    210a:	8f 5f       	subi	r24, 0xFF	; 255
    210c:	80 83       	st	Z, r24
    210e:	81 e0       	ldi	r24, 0x01	; 1
    2110:	05 c0       	rjmp	.+10     	; 0x211c <xTaskPriorityDisinherit+0xac>
    2112:	80 e0       	ldi	r24, 0x00	; 0
    2114:	03 c0       	rjmp	.+6      	; 0x211c <xTaskPriorityDisinherit+0xac>
    2116:	80 e0       	ldi	r24, 0x00	; 0
    2118:	01 c0       	rjmp	.+2      	; 0x211c <xTaskPriorityDisinherit+0xac>
    211a:	80 e0       	ldi	r24, 0x00	; 0
    211c:	df 91       	pop	r29
    211e:	cf 91       	pop	r28
    2120:	1f 91       	pop	r17
    2122:	0f 91       	pop	r16
    2124:	08 95       	ret

00002126 <vTaskPriorityDisinheritAfterTimeout>:
    2126:	0f 93       	push	r16
    2128:	1f 93       	push	r17
    212a:	cf 93       	push	r28
    212c:	df 93       	push	r29
    212e:	fc 01       	movw	r30, r24
    2130:	89 2b       	or	r24, r25
    2132:	09 f4       	brne	.+2      	; 0x2136 <vTaskPriorityDisinheritAfterTimeout+0x10>
    2134:	5a c0       	rjmp	.+180    	; 0x21ea <vTaskPriorityDisinheritAfterTimeout+0xc4>
    2136:	85 a5       	ldd	r24, Z+45	; 0x2d
    2138:	86 17       	cp	r24, r22
    213a:	08 f4       	brcc	.+2      	; 0x213e <vTaskPriorityDisinheritAfterTimeout+0x18>
    213c:	86 2f       	mov	r24, r22
    213e:	92 8d       	ldd	r25, Z+26	; 0x1a
    2140:	89 17       	cp	r24, r25
    2142:	09 f4       	brne	.+2      	; 0x2146 <vTaskPriorityDisinheritAfterTimeout+0x20>
    2144:	52 c0       	rjmp	.+164    	; 0x21ea <vTaskPriorityDisinheritAfterTimeout+0xc4>
    2146:	26 a5       	ldd	r18, Z+46	; 0x2e
    2148:	21 30       	cpi	r18, 0x01	; 1
    214a:	09 f0       	breq	.+2      	; 0x214e <vTaskPriorityDisinheritAfterTimeout+0x28>
    214c:	4e c0       	rjmp	.+156    	; 0x21ea <vTaskPriorityDisinheritAfterTimeout+0xc4>
    214e:	82 8f       	std	Z+26, r24	; 0x1a
    2150:	46 85       	ldd	r20, Z+14	; 0x0e
    2152:	57 85       	ldd	r21, Z+15	; 0x0f
    2154:	60 89       	ldd	r22, Z+16	; 0x10
    2156:	71 89       	ldd	r23, Z+17	; 0x11
    2158:	77 23       	and	r23, r23
    215a:	64 f0       	brlt	.+24     	; 0x2174 <vTaskPriorityDisinheritAfterTimeout+0x4e>
    215c:	4a e0       	ldi	r20, 0x0A	; 10
    215e:	50 e0       	ldi	r21, 0x00	; 0
    2160:	60 e0       	ldi	r22, 0x00	; 0
    2162:	70 e0       	ldi	r23, 0x00	; 0
    2164:	48 1b       	sub	r20, r24
    2166:	51 09       	sbc	r21, r1
    2168:	61 09       	sbc	r22, r1
    216a:	71 09       	sbc	r23, r1
    216c:	46 87       	std	Z+14, r20	; 0x0e
    216e:	57 87       	std	Z+15, r21	; 0x0f
    2170:	60 8b       	std	Z+16, r22	; 0x10
    2172:	71 8b       	std	Z+17, r23	; 0x11
    2174:	24 85       	ldd	r18, Z+12	; 0x0c
    2176:	35 85       	ldd	r19, Z+13	; 0x0d
    2178:	4b e0       	ldi	r20, 0x0B	; 11
    217a:	94 9f       	mul	r25, r20
    217c:	c0 01       	movw	r24, r0
    217e:	11 24       	eor	r1, r1
    2180:	87 5c       	subi	r24, 0xC7	; 199
    2182:	9e 4e       	sbci	r25, 0xEE	; 238
    2184:	28 17       	cp	r18, r24
    2186:	39 07       	cpc	r19, r25
    2188:	81 f5       	brne	.+96     	; 0x21ea <vTaskPriorityDisinheritAfterTimeout+0xc4>
    218a:	ef 01       	movw	r28, r30
    218c:	8f 01       	movw	r16, r30
    218e:	0e 5f       	subi	r16, 0xFE	; 254
    2190:	1f 4f       	sbci	r17, 0xFF	; 255
    2192:	c8 01       	movw	r24, r16
    2194:	0e 94 0d 04 	call	0x81a	; 0x81a <uxListRemove>
    2198:	ea 8d       	ldd	r30, Y+26	; 0x1a
    219a:	80 91 f7 10 	lds	r24, 0x10F7	; 0x8010f7 <uxTopReadyPriority>
    219e:	8e 17       	cp	r24, r30
    21a0:	10 f4       	brcc	.+4      	; 0x21a6 <vTaskPriorityDisinheritAfterTimeout+0x80>
    21a2:	e0 93 f7 10 	sts	0x10F7, r30	; 0x8010f7 <uxTopReadyPriority>
    21a6:	8b e0       	ldi	r24, 0x0B	; 11
    21a8:	8e 9f       	mul	r24, r30
    21aa:	f0 01       	movw	r30, r0
    21ac:	11 24       	eor	r1, r1
    21ae:	e7 5c       	subi	r30, 0xC7	; 199
    21b0:	fe 4e       	sbci	r31, 0xEE	; 238
    21b2:	01 80       	ldd	r0, Z+1	; 0x01
    21b4:	f2 81       	ldd	r31, Z+2	; 0x02
    21b6:	e0 2d       	mov	r30, r0
    21b8:	ff 83       	std	Y+7, r31	; 0x07
    21ba:	ee 83       	std	Y+6, r30	; 0x06
    21bc:	26 81       	ldd	r18, Z+6	; 0x06
    21be:	37 81       	ldd	r19, Z+7	; 0x07
    21c0:	39 87       	std	Y+9, r19	; 0x09
    21c2:	28 87       	std	Y+8, r18	; 0x08
    21c4:	a6 81       	ldd	r26, Z+6	; 0x06
    21c6:	b7 81       	ldd	r27, Z+7	; 0x07
    21c8:	15 96       	adiw	r26, 0x05	; 5
    21ca:	1c 93       	st	X, r17
    21cc:	0e 93       	st	-X, r16
    21ce:	14 97       	sbiw	r26, 0x04	; 4
    21d0:	17 83       	std	Z+7, r17	; 0x07
    21d2:	06 83       	std	Z+6, r16	; 0x06
    21d4:	ea 8d       	ldd	r30, Y+26	; 0x1a
    21d6:	8e 9f       	mul	r24, r30
    21d8:	f0 01       	movw	r30, r0
    21da:	11 24       	eor	r1, r1
    21dc:	e7 5c       	subi	r30, 0xC7	; 199
    21de:	fe 4e       	sbci	r31, 0xEE	; 238
    21e0:	fd 87       	std	Y+13, r31	; 0x0d
    21e2:	ec 87       	std	Y+12, r30	; 0x0c
    21e4:	80 81       	ld	r24, Z
    21e6:	8f 5f       	subi	r24, 0xFF	; 255
    21e8:	80 83       	st	Z, r24
    21ea:	df 91       	pop	r29
    21ec:	cf 91       	pop	r28
    21ee:	1f 91       	pop	r17
    21f0:	0f 91       	pop	r16
    21f2:	08 95       	ret

000021f4 <pvTaskIncrementMutexHeldCount>:

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
    21f4:	80 91 a7 11 	lds	r24, 0x11A7	; 0x8011a7 <pxCurrentTCB>
    21f8:	90 91 a8 11 	lds	r25, 0x11A8	; 0x8011a8 <pxCurrentTCB+0x1>
    21fc:	89 2b       	or	r24, r25
    21fe:	39 f0       	breq	.+14     	; 0x220e <__stack+0xf>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
    2200:	e0 91 a7 11 	lds	r30, 0x11A7	; 0x8011a7 <pxCurrentTCB>
    2204:	f0 91 a8 11 	lds	r31, 0x11A8	; 0x8011a8 <pxCurrentTCB+0x1>
    2208:	86 a5       	ldd	r24, Z+46	; 0x2e
    220a:	8f 5f       	subi	r24, 0xFF	; 255
    220c:	86 a7       	std	Z+46, r24	; 0x2e
        }

        return ( TaskHandle_t ) pxCurrentTCB;
    220e:	80 91 a7 11 	lds	r24, 0x11A7	; 0x8011a7 <pxCurrentTCB>
    2212:	90 91 a8 11 	lds	r25, 0x11A8	; 0x8011a8 <pxCurrentTCB+0x1>
    }
    2216:	08 95       	ret

00002218 <prvGetNextExpireTime>:
    2218:	dc 01       	movw	r26, r24
    221a:	e0 91 b3 11 	lds	r30, 0x11B3	; 0x8011b3 <pxCurrentTimerList>
    221e:	f0 91 b4 11 	lds	r31, 0x11B4	; 0x8011b4 <pxCurrentTimerList+0x1>
    2222:	80 81       	ld	r24, Z
    2224:	91 e0       	ldi	r25, 0x01	; 1
    2226:	81 11       	cpse	r24, r1
    2228:	90 e0       	ldi	r25, 0x00	; 0
    222a:	9c 93       	st	X, r25
    222c:	91 11       	cpse	r25, r1
    222e:	08 c0       	rjmp	.+16     	; 0x2240 <prvGetNextExpireTime+0x28>
    2230:	07 80       	ldd	r0, Z+7	; 0x07
    2232:	f0 85       	ldd	r31, Z+8	; 0x08
    2234:	e0 2d       	mov	r30, r0
    2236:	60 81       	ld	r22, Z
    2238:	71 81       	ldd	r23, Z+1	; 0x01
    223a:	82 81       	ldd	r24, Z+2	; 0x02
    223c:	93 81       	ldd	r25, Z+3	; 0x03
    223e:	08 95       	ret
    2240:	60 e0       	ldi	r22, 0x00	; 0
    2242:	70 e0       	ldi	r23, 0x00	; 0
    2244:	cb 01       	movw	r24, r22
    2246:	08 95       	ret

00002248 <prvInsertTimerInActiveList>:
    2248:	cf 92       	push	r12
    224a:	df 92       	push	r13
    224c:	ef 92       	push	r14
    224e:	ff 92       	push	r15
    2250:	0f 93       	push	r16
    2252:	1f 93       	push	r17
    2254:	fc 01       	movw	r30, r24
    2256:	42 83       	std	Z+2, r20	; 0x02
    2258:	53 83       	std	Z+3, r21	; 0x03
    225a:	64 83       	std	Z+4, r22	; 0x04
    225c:	75 83       	std	Z+5, r23	; 0x05
    225e:	93 87       	std	Z+11, r25	; 0x0b
    2260:	82 87       	std	Z+10, r24	; 0x0a
    2262:	04 17       	cp	r16, r20
    2264:	15 07       	cpc	r17, r21
    2266:	26 07       	cpc	r18, r22
    2268:	37 07       	cpc	r19, r23
    226a:	c0 f0       	brcs	.+48     	; 0x229c <prvInsertTimerInActiveList+0x54>
    226c:	0c 19       	sub	r16, r12
    226e:	1d 09       	sbc	r17, r13
    2270:	2e 09       	sbc	r18, r14
    2272:	3f 09       	sbc	r19, r15
    2274:	86 85       	ldd	r24, Z+14	; 0x0e
    2276:	97 85       	ldd	r25, Z+15	; 0x0f
    2278:	a0 89       	ldd	r26, Z+16	; 0x10
    227a:	b1 89       	ldd	r27, Z+17	; 0x11
    227c:	08 17       	cp	r16, r24
    227e:	19 07       	cpc	r17, r25
    2280:	2a 07       	cpc	r18, r26
    2282:	3b 07       	cpc	r19, r27
    2284:	00 f5       	brcc	.+64     	; 0x22c6 <prvInsertTimerInActiveList+0x7e>
    2286:	bf 01       	movw	r22, r30
    2288:	6e 5f       	subi	r22, 0xFE	; 254
    228a:	7f 4f       	sbci	r23, 0xFF	; 255
    228c:	80 91 b1 11 	lds	r24, 0x11B1	; 0x8011b1 <pxOverflowTimerList>
    2290:	90 91 b2 11 	lds	r25, 0x11B2	; 0x8011b2 <pxOverflowTimerList+0x1>
    2294:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <vListInsert>
    2298:	80 e0       	ldi	r24, 0x00	; 0
    229a:	18 c0       	rjmp	.+48     	; 0x22cc <prvInsertTimerInActiveList+0x84>
    229c:	0c 15       	cp	r16, r12
    229e:	1d 05       	cpc	r17, r13
    22a0:	2e 05       	cpc	r18, r14
    22a2:	3f 05       	cpc	r19, r15
    22a4:	28 f4       	brcc	.+10     	; 0x22b0 <prvInsertTimerInActiveList+0x68>
    22a6:	4c 15       	cp	r20, r12
    22a8:	5d 05       	cpc	r21, r13
    22aa:	6e 05       	cpc	r22, r14
    22ac:	7f 05       	cpc	r23, r15
    22ae:	68 f4       	brcc	.+26     	; 0x22ca <prvInsertTimerInActiveList+0x82>
    22b0:	bf 01       	movw	r22, r30
    22b2:	6e 5f       	subi	r22, 0xFE	; 254
    22b4:	7f 4f       	sbci	r23, 0xFF	; 255
    22b6:	80 91 b3 11 	lds	r24, 0x11B3	; 0x8011b3 <pxCurrentTimerList>
    22ba:	90 91 b4 11 	lds	r25, 0x11B4	; 0x8011b4 <pxCurrentTimerList+0x1>
    22be:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <vListInsert>
    22c2:	80 e0       	ldi	r24, 0x00	; 0
    22c4:	03 c0       	rjmp	.+6      	; 0x22cc <prvInsertTimerInActiveList+0x84>
    22c6:	81 e0       	ldi	r24, 0x01	; 1
    22c8:	01 c0       	rjmp	.+2      	; 0x22cc <prvInsertTimerInActiveList+0x84>
    22ca:	81 e0       	ldi	r24, 0x01	; 1
    22cc:	1f 91       	pop	r17
    22ce:	0f 91       	pop	r16
    22d0:	ff 90       	pop	r15
    22d2:	ef 90       	pop	r14
    22d4:	df 90       	pop	r13
    22d6:	cf 90       	pop	r12
    22d8:	08 95       	ret

000022da <prvCheckForValidListAndQueue>:
    22da:	0f b6       	in	r0, 0x3f	; 63
    22dc:	f8 94       	cli
    22de:	0f 92       	push	r0
    22e0:	80 91 af 11 	lds	r24, 0x11AF	; 0x8011af <xTimerQueue>
    22e4:	90 91 b0 11 	lds	r25, 0x11B0	; 0x8011b0 <xTimerQueue+0x1>
    22e8:	89 2b       	or	r24, r25
    22ea:	e9 f4       	brne	.+58     	; 0x2326 <prvCheckForValidListAndQueue+0x4c>
    22ec:	80 ec       	ldi	r24, 0xC0	; 192
    22ee:	91 e1       	ldi	r25, 0x11	; 17
    22f0:	0e 94 bb 03 	call	0x776	; 0x776 <vListInitialise>
    22f4:	85 eb       	ldi	r24, 0xB5	; 181
    22f6:	91 e1       	ldi	r25, 0x11	; 17
    22f8:	0e 94 bb 03 	call	0x776	; 0x776 <vListInitialise>
    22fc:	80 ec       	ldi	r24, 0xC0	; 192
    22fe:	91 e1       	ldi	r25, 0x11	; 17
    2300:	90 93 b4 11 	sts	0x11B4, r25	; 0x8011b4 <pxCurrentTimerList+0x1>
    2304:	80 93 b3 11 	sts	0x11B3, r24	; 0x8011b3 <pxCurrentTimerList>
    2308:	85 eb       	ldi	r24, 0xB5	; 181
    230a:	91 e1       	ldi	r25, 0x11	; 17
    230c:	90 93 b2 11 	sts	0x11B2, r25	; 0x8011b2 <pxOverflowTimerList+0x1>
    2310:	80 93 b1 11 	sts	0x11B1, r24	; 0x8011b1 <pxOverflowTimerList>
    2314:	40 e0       	ldi	r20, 0x00	; 0
    2316:	67 e0       	ldi	r22, 0x07	; 7
    2318:	8a e0       	ldi	r24, 0x0A	; 10
    231a:	0e 94 7d 06 	call	0xcfa	; 0xcfa <xQueueGenericCreate>
    231e:	90 93 b0 11 	sts	0x11B0, r25	; 0x8011b0 <xTimerQueue+0x1>
    2322:	80 93 af 11 	sts	0x11AF, r24	; 0x8011af <xTimerQueue>
    2326:	0f 90       	pop	r0
    2328:	0f be       	out	0x3f, r0	; 63
    232a:	08 95       	ret

0000232c <xTimerCreateTimerTask>:
    232c:	ef 92       	push	r14
    232e:	ff 92       	push	r15
    2330:	0f 93       	push	r16
    2332:	d3 df       	rcall	.-90     	; 0x22da <prvCheckForValidListAndQueue>
    2334:	80 91 af 11 	lds	r24, 0x11AF	; 0x8011af <xTimerQueue>
    2338:	90 91 b0 11 	lds	r25, 0x11B0	; 0x8011b0 <xTimerQueue+0x1>
    233c:	89 2b       	or	r24, r25
    233e:	89 f0       	breq	.+34     	; 0x2362 <xTimerCreateTimerTask+0x36>
    2340:	0f 2e       	mov	r0, r31
    2342:	fd ea       	ldi	r31, 0xAD	; 173
    2344:	ef 2e       	mov	r14, r31
    2346:	f1 e1       	ldi	r31, 0x11	; 17
    2348:	ff 2e       	mov	r15, r31
    234a:	f0 2d       	mov	r31, r0
    234c:	03 e0       	ldi	r16, 0x03	; 3
    234e:	20 e0       	ldi	r18, 0x00	; 0
    2350:	30 e0       	ldi	r19, 0x00	; 0
    2352:	40 ec       	ldi	r20, 0xC0	; 192
    2354:	50 e0       	ldi	r21, 0x00	; 0
    2356:	68 ef       	ldi	r22, 0xF8	; 248
    2358:	72 e0       	ldi	r23, 0x02	; 2
    235a:	86 e8       	ldi	r24, 0x86	; 134
    235c:	90 e0       	ldi	r25, 0x00	; 0
    235e:	30 d9       	rcall	.-3488   	; 0x15c0 <xTaskCreate>
    2360:	01 c0       	rjmp	.+2      	; 0x2364 <xTimerCreateTimerTask+0x38>
    2362:	80 e0       	ldi	r24, 0x00	; 0
    2364:	0f 91       	pop	r16
    2366:	ff 90       	pop	r15
    2368:	ef 90       	pop	r14
    236a:	08 95       	ret

0000236c <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    236c:	8f 92       	push	r8
    236e:	9f 92       	push	r9
    2370:	af 92       	push	r10
    2372:	bf 92       	push	r11
    2374:	cf 92       	push	r12
    2376:	df 92       	push	r13
    2378:	ef 92       	push	r14
    237a:	ff 92       	push	r15
    237c:	0f 93       	push	r16
    237e:	1f 93       	push	r17
    2380:	cf 93       	push	r28
    2382:	df 93       	push	r29
    2384:	cd b7       	in	r28, 0x3d	; 61
    2386:	de b7       	in	r29, 0x3e	; 62
    2388:	27 97       	sbiw	r28, 0x07	; 7
    238a:	0f b6       	in	r0, 0x3f	; 63
    238c:	f8 94       	cli
    238e:	de bf       	out	0x3e, r29	; 62
    2390:	0f be       	out	0x3f, r0	; 63
    2392:	cd bf       	out	0x3d, r28	; 61

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    2394:	e0 91 af 11 	lds	r30, 0x11AF	; 0x8011af <xTimerQueue>
    2398:	f0 91 b0 11 	lds	r31, 0x11B0	; 0x8011b0 <xTimerQueue+0x1>
    239c:	30 97       	sbiw	r30, 0x00	; 0
    239e:	81 f1       	breq	.+96     	; 0x2400 <xTimerGenericCommand+0x94>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    23a0:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    23a2:	2a 83       	std	Y+2, r18	; 0x02
    23a4:	3b 83       	std	Y+3, r19	; 0x03
    23a6:	4c 83       	std	Y+4, r20	; 0x04
    23a8:	5d 83       	std	Y+5, r21	; 0x05
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    23aa:	9f 83       	std	Y+7, r25	; 0x07
    23ac:	8e 83       	std	Y+6, r24	; 0x06

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    23ae:	66 30       	cpi	r22, 0x06	; 6
    23b0:	f4 f4       	brge	.+60     	; 0x23ee <xTimerGenericCommand+0x82>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    23b2:	c9 dd       	rcall	.-1134   	; 0x1f46 <xTaskGetSchedulerState>
    23b4:	82 30       	cpi	r24, 0x02	; 2
    23b6:	69 f4       	brne	.+26     	; 0x23d2 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    23b8:	00 e0       	ldi	r16, 0x00	; 0
    23ba:	a7 01       	movw	r20, r14
    23bc:	96 01       	movw	r18, r12
    23be:	be 01       	movw	r22, r28
    23c0:	6f 5f       	subi	r22, 0xFF	; 255
    23c2:	7f 4f       	sbci	r23, 0xFF	; 255
    23c4:	80 91 af 11 	lds	r24, 0x11AF	; 0x8011af <xTimerQueue>
    23c8:	90 91 b0 11 	lds	r25, 0x11B0	; 0x8011b0 <xTimerQueue+0x1>
    23cc:	0e 94 a0 06 	call	0xd40	; 0xd40 <xQueueGenericSend>
    23d0:	18 c0       	rjmp	.+48     	; 0x2402 <xTimerGenericCommand+0x96>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    23d2:	00 e0       	ldi	r16, 0x00	; 0
    23d4:	20 e0       	ldi	r18, 0x00	; 0
    23d6:	30 e0       	ldi	r19, 0x00	; 0
    23d8:	a9 01       	movw	r20, r18
    23da:	be 01       	movw	r22, r28
    23dc:	6f 5f       	subi	r22, 0xFF	; 255
    23de:	7f 4f       	sbci	r23, 0xFF	; 255
    23e0:	80 91 af 11 	lds	r24, 0x11AF	; 0x8011af <xTimerQueue>
    23e4:	90 91 b0 11 	lds	r25, 0x11B0	; 0x8011b0 <xTimerQueue+0x1>
    23e8:	0e 94 a0 06 	call	0xd40	; 0xd40 <xQueueGenericSend>
    23ec:	0a c0       	rjmp	.+20     	; 0x2402 <xTimerGenericCommand+0x96>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    23ee:	20 e0       	ldi	r18, 0x00	; 0
    23f0:	a8 01       	movw	r20, r16
    23f2:	be 01       	movw	r22, r28
    23f4:	6f 5f       	subi	r22, 0xFF	; 255
    23f6:	7f 4f       	sbci	r23, 0xFF	; 255
    23f8:	cf 01       	movw	r24, r30
    23fa:	0e 94 4b 07 	call	0xe96	; 0xe96 <xQueueGenericSendFromISR>
    23fe:	01 c0       	rjmp	.+2      	; 0x2402 <xTimerGenericCommand+0x96>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    2400:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    2402:	27 96       	adiw	r28, 0x07	; 7
    2404:	0f b6       	in	r0, 0x3f	; 63
    2406:	f8 94       	cli
    2408:	de bf       	out	0x3e, r29	; 62
    240a:	0f be       	out	0x3f, r0	; 63
    240c:	cd bf       	out	0x3d, r28	; 61
    240e:	df 91       	pop	r29
    2410:	cf 91       	pop	r28
    2412:	1f 91       	pop	r17
    2414:	0f 91       	pop	r16
    2416:	ff 90       	pop	r15
    2418:	ef 90       	pop	r14
    241a:	df 90       	pop	r13
    241c:	cf 90       	pop	r12
    241e:	bf 90       	pop	r11
    2420:	af 90       	pop	r10
    2422:	9f 90       	pop	r9
    2424:	8f 90       	pop	r8
    2426:	08 95       	ret

00002428 <prvSwitchTimerLists>:
        }
    }
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
    2428:	8f 92       	push	r8
    242a:	9f 92       	push	r9
    242c:	af 92       	push	r10
    242e:	bf 92       	push	r11
    2430:	cf 92       	push	r12
    2432:	df 92       	push	r13
    2434:	ef 92       	push	r14
    2436:	ff 92       	push	r15
    2438:	0f 93       	push	r16
    243a:	1f 93       	push	r17
    243c:	cf 93       	push	r28
    243e:	df 93       	push	r29

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2440:	3b c0       	rjmp	.+118    	; 0x24b8 <prvSwitchTimerLists+0x90>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    2442:	07 80       	ldd	r0, Z+7	; 0x07
    2444:	f0 85       	ldd	r31, Z+8	; 0x08
    2446:	e0 2d       	mov	r30, r0
    2448:	80 80       	ld	r8, Z
    244a:	91 80       	ldd	r9, Z+1	; 0x01
    244c:	a2 80       	ldd	r10, Z+2	; 0x02
    244e:	b3 80       	ldd	r11, Z+3	; 0x03

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    2450:	c0 85       	ldd	r28, Z+8	; 0x08
    2452:	d1 85       	ldd	r29, Z+9	; 0x09
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2454:	8e 01       	movw	r16, r28
    2456:	0e 5f       	subi	r16, 0xFE	; 254
    2458:	1f 4f       	sbci	r17, 0xFF	; 255
    245a:	c8 01       	movw	r24, r16
    245c:	0e 94 0d 04 	call	0x81a	; 0x81a <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2460:	ec 89       	ldd	r30, Y+20	; 0x14
    2462:	fd 89       	ldd	r31, Y+21	; 0x15
    2464:	ce 01       	movw	r24, r28
    2466:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2468:	8e 89       	ldd	r24, Y+22	; 0x16
    246a:	82 ff       	sbrs	r24, 2
    246c:	25 c0       	rjmp	.+74     	; 0x24b8 <prvSwitchTimerLists+0x90>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    246e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2470:	9f 85       	ldd	r25, Y+15	; 0x0f
    2472:	a8 89       	ldd	r26, Y+16	; 0x10
    2474:	b9 89       	ldd	r27, Y+17	; 0x11
    2476:	88 0d       	add	r24, r8
    2478:	99 1d       	adc	r25, r9
    247a:	aa 1d       	adc	r26, r10
    247c:	bb 1d       	adc	r27, r11

                if( xReloadTime > xNextExpireTime )
    247e:	88 16       	cp	r8, r24
    2480:	99 06       	cpc	r9, r25
    2482:	aa 06       	cpc	r10, r26
    2484:	bb 06       	cpc	r11, r27
    2486:	70 f4       	brcc	.+28     	; 0x24a4 <prvSwitchTimerLists+0x7c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    2488:	8a 83       	std	Y+2, r24	; 0x02
    248a:	9b 83       	std	Y+3, r25	; 0x03
    248c:	ac 83       	std	Y+4, r26	; 0x04
    248e:	bd 83       	std	Y+5, r27	; 0x05
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    2490:	db 87       	std	Y+11, r29	; 0x0b
    2492:	ca 87       	std	Y+10, r28	; 0x0a
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    2494:	b8 01       	movw	r22, r16
    2496:	80 91 b3 11 	lds	r24, 0x11B3	; 0x8011b3 <pxCurrentTimerList>
    249a:	90 91 b4 11 	lds	r25, 0x11B4	; 0x8011b4 <pxCurrentTimerList+0x1>
    249e:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <vListInsert>
    24a2:	0a c0       	rjmp	.+20     	; 0x24b8 <prvSwitchTimerLists+0x90>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    24a4:	c1 2c       	mov	r12, r1
    24a6:	d1 2c       	mov	r13, r1
    24a8:	76 01       	movw	r14, r12
    24aa:	00 e0       	ldi	r16, 0x00	; 0
    24ac:	10 e0       	ldi	r17, 0x00	; 0
    24ae:	a5 01       	movw	r20, r10
    24b0:	94 01       	movw	r18, r8
    24b2:	60 e0       	ldi	r22, 0x00	; 0
    24b4:	ce 01       	movw	r24, r28
    24b6:	5a df       	rcall	.-332    	; 0x236c <xTimerGenericCommand>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    24b8:	e0 91 b3 11 	lds	r30, 0x11B3	; 0x8011b3 <pxCurrentTimerList>
    24bc:	f0 91 b4 11 	lds	r31, 0x11B4	; 0x8011b4 <pxCurrentTimerList+0x1>
    24c0:	80 81       	ld	r24, Z
    24c2:	81 11       	cpse	r24, r1
    24c4:	be cf       	rjmp	.-132    	; 0x2442 <prvSwitchTimerLists+0x1a>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    24c6:	80 91 b1 11 	lds	r24, 0x11B1	; 0x8011b1 <pxOverflowTimerList>
    24ca:	90 91 b2 11 	lds	r25, 0x11B2	; 0x8011b2 <pxOverflowTimerList+0x1>
    24ce:	90 93 b4 11 	sts	0x11B4, r25	; 0x8011b4 <pxCurrentTimerList+0x1>
    24d2:	80 93 b3 11 	sts	0x11B3, r24	; 0x8011b3 <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    24d6:	f0 93 b2 11 	sts	0x11B2, r31	; 0x8011b2 <pxOverflowTimerList+0x1>
    24da:	e0 93 b1 11 	sts	0x11B1, r30	; 0x8011b1 <pxOverflowTimerList>
    }
    24de:	df 91       	pop	r29
    24e0:	cf 91       	pop	r28
    24e2:	1f 91       	pop	r17
    24e4:	0f 91       	pop	r16
    24e6:	ff 90       	pop	r15
    24e8:	ef 90       	pop	r14
    24ea:	df 90       	pop	r13
    24ec:	cf 90       	pop	r12
    24ee:	bf 90       	pop	r11
    24f0:	af 90       	pop	r10
    24f2:	9f 90       	pop	r9
    24f4:	8f 90       	pop	r8
    24f6:	08 95       	ret

000024f8 <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    24f8:	cf 92       	push	r12
    24fa:	df 92       	push	r13
    24fc:	ef 92       	push	r14
    24fe:	ff 92       	push	r15
    2500:	cf 93       	push	r28
    2502:	df 93       	push	r29
    2504:	ec 01       	movw	r28, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    2506:	ea d8       	rcall	.-3628   	; 0x16dc <xTaskGetTickCount>
    2508:	6b 01       	movw	r12, r22
    250a:	7c 01       	movw	r14, r24

        if( xTimeNow < xLastTime )
    250c:	80 91 a9 11 	lds	r24, 0x11A9	; 0x8011a9 <xLastTime.2448>
    2510:	90 91 aa 11 	lds	r25, 0x11AA	; 0x8011aa <xLastTime.2448+0x1>
    2514:	a0 91 ab 11 	lds	r26, 0x11AB	; 0x8011ab <xLastTime.2448+0x2>
    2518:	b0 91 ac 11 	lds	r27, 0x11AC	; 0x8011ac <xLastTime.2448+0x3>
    251c:	c8 16       	cp	r12, r24
    251e:	d9 06       	cpc	r13, r25
    2520:	ea 06       	cpc	r14, r26
    2522:	fb 06       	cpc	r15, r27
        {
            prvSwitchTimerLists();
    2524:	20 f4       	brcc	.+8      	; 0x252e <prvSampleTimeNow+0x36>
    2526:	80 df       	rcall	.-256    	; 0x2428 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
    2528:	81 e0       	ldi	r24, 0x01	; 1
    252a:	88 83       	st	Y, r24
    252c:	01 c0       	rjmp	.+2      	; 0x2530 <prvSampleTimeNow+0x38>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    252e:	18 82       	st	Y, r1
        }

        xLastTime = xTimeNow;
    2530:	c0 92 a9 11 	sts	0x11A9, r12	; 0x8011a9 <xLastTime.2448>
    2534:	d0 92 aa 11 	sts	0x11AA, r13	; 0x8011aa <xLastTime.2448+0x1>
    2538:	e0 92 ab 11 	sts	0x11AB, r14	; 0x8011ab <xLastTime.2448+0x2>
    253c:	f0 92 ac 11 	sts	0x11AC, r15	; 0x8011ac <xLastTime.2448+0x3>

        return xTimeNow;
    }
    2540:	c7 01       	movw	r24, r14
    2542:	b6 01       	movw	r22, r12
    2544:	df 91       	pop	r29
    2546:	cf 91       	pop	r28
    2548:	ff 90       	pop	r15
    254a:	ef 90       	pop	r14
    254c:	df 90       	pop	r13
    254e:	cf 90       	pop	r12
    2550:	08 95       	ret

00002552 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    2552:	4f 92       	push	r4
    2554:	5f 92       	push	r5
    2556:	6f 92       	push	r6
    2558:	7f 92       	push	r7
    255a:	8f 92       	push	r8
    255c:	9f 92       	push	r9
    255e:	af 92       	push	r10
    2560:	bf 92       	push	r11
    2562:	cf 92       	push	r12
    2564:	df 92       	push	r13
    2566:	ef 92       	push	r14
    2568:	ff 92       	push	r15
    256a:	0f 93       	push	r16
    256c:	1f 93       	push	r17
    256e:	cf 93       	push	r28
    2570:	df 93       	push	r29
    2572:	4b 01       	movw	r8, r22
    2574:	5c 01       	movw	r10, r24
    2576:	29 01       	movw	r4, r18
    2578:	3a 01       	movw	r6, r20
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    257a:	e0 91 b3 11 	lds	r30, 0x11B3	; 0x8011b3 <pxCurrentTimerList>
    257e:	f0 91 b4 11 	lds	r31, 0x11B4	; 0x8011b4 <pxCurrentTimerList+0x1>
    2582:	07 80       	ldd	r0, Z+7	; 0x07
    2584:	f0 85       	ldd	r31, Z+8	; 0x08
    2586:	e0 2d       	mov	r30, r0
    2588:	c0 85       	ldd	r28, Z+8	; 0x08
    258a:	d1 85       	ldd	r29, Z+9	; 0x09

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    258c:	ce 01       	movw	r24, r28
    258e:	02 96       	adiw	r24, 0x02	; 2
    2590:	0e 94 0d 04 	call	0x81a	; 0x81a <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2594:	8e 89       	ldd	r24, Y+22	; 0x16
    2596:	82 ff       	sbrs	r24, 2
    2598:	1b c0       	rjmp	.+54     	; 0x25d0 <prvProcessExpiredTimer+0x7e>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    259a:	4e 85       	ldd	r20, Y+14	; 0x0e
    259c:	5f 85       	ldd	r21, Y+15	; 0x0f
    259e:	68 89       	ldd	r22, Y+16	; 0x10
    25a0:	79 89       	ldd	r23, Y+17	; 0x11
    25a2:	48 0d       	add	r20, r8
    25a4:	59 1d       	adc	r21, r9
    25a6:	6a 1d       	adc	r22, r10
    25a8:	7b 1d       	adc	r23, r11
    25aa:	75 01       	movw	r14, r10
    25ac:	64 01       	movw	r12, r8
    25ae:	93 01       	movw	r18, r6
    25b0:	82 01       	movw	r16, r4
    25b2:	ce 01       	movw	r24, r28
    25b4:	49 de       	rcall	.-878    	; 0x2248 <prvInsertTimerInActiveList>
    25b6:	88 23       	and	r24, r24
    25b8:	69 f0       	breq	.+26     	; 0x25d4 <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    25ba:	c1 2c       	mov	r12, r1
    25bc:	d1 2c       	mov	r13, r1
    25be:	76 01       	movw	r14, r12
    25c0:	00 e0       	ldi	r16, 0x00	; 0
    25c2:	10 e0       	ldi	r17, 0x00	; 0
    25c4:	a5 01       	movw	r20, r10
    25c6:	94 01       	movw	r18, r8
    25c8:	60 e0       	ldi	r22, 0x00	; 0
    25ca:	ce 01       	movw	r24, r28
    25cc:	cf de       	rcall	.-610    	; 0x236c <xTimerGenericCommand>
    25ce:	02 c0       	rjmp	.+4      	; 0x25d4 <prvProcessExpiredTimer+0x82>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    25d0:	8e 7f       	andi	r24, 0xFE	; 254
    25d2:	8e 8b       	std	Y+22, r24	; 0x16
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    25d4:	ec 89       	ldd	r30, Y+20	; 0x14
    25d6:	fd 89       	ldd	r31, Y+21	; 0x15
    25d8:	ce 01       	movw	r24, r28
    25da:	19 95       	eicall
    }
    25dc:	df 91       	pop	r29
    25de:	cf 91       	pop	r28
    25e0:	1f 91       	pop	r17
    25e2:	0f 91       	pop	r16
    25e4:	ff 90       	pop	r15
    25e6:	ef 90       	pop	r14
    25e8:	df 90       	pop	r13
    25ea:	cf 90       	pop	r12
    25ec:	bf 90       	pop	r11
    25ee:	af 90       	pop	r10
    25f0:	9f 90       	pop	r9
    25f2:	8f 90       	pop	r8
    25f4:	7f 90       	pop	r7
    25f6:	6f 90       	pop	r6
    25f8:	5f 90       	pop	r5
    25fa:	4f 90       	pop	r4
    25fc:	08 95       	ret

000025fe <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
    25fe:	8f 92       	push	r8
    2600:	9f 92       	push	r9
    2602:	af 92       	push	r10
    2604:	bf 92       	push	r11
    2606:	cf 92       	push	r12
    2608:	df 92       	push	r13
    260a:	ef 92       	push	r14
    260c:	ff 92       	push	r15
    260e:	1f 93       	push	r17
    2610:	cf 93       	push	r28
    2612:	df 93       	push	r29
    2614:	1f 92       	push	r1
    2616:	cd b7       	in	r28, 0x3d	; 61
    2618:	de b7       	in	r29, 0x3e	; 62
    261a:	6b 01       	movw	r12, r22
    261c:	7c 01       	movw	r14, r24
    261e:	14 2f       	mov	r17, r20
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    2620:	57 d8       	rcall	.-3922   	; 0x16d0 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    2622:	ce 01       	movw	r24, r28
    2624:	01 96       	adiw	r24, 0x01	; 1
    2626:	68 df       	rcall	.-304    	; 0x24f8 <prvSampleTimeNow>
    2628:	4b 01       	movw	r8, r22
    262a:	5c 01       	movw	r10, r24

            if( xTimerListsWereSwitched == pdFALSE )
    262c:	89 81       	ldd	r24, Y+1	; 0x01
    262e:	81 11       	cpse	r24, r1
    2630:	2b c0       	rjmp	.+86     	; 0x2688 <prvProcessTimerOrBlockTask+0x8a>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    2632:	11 11       	cpse	r17, r1
    2634:	0c c0       	rjmp	.+24     	; 0x264e <prvProcessTimerOrBlockTask+0x50>
    2636:	8c 14       	cp	r8, r12
    2638:	9d 04       	cpc	r9, r13
    263a:	ae 04       	cpc	r10, r14
    263c:	bf 04       	cpc	r11, r15
                {
                    ( void ) xTaskResumeAll();
    263e:	38 f0       	brcs	.+14     	; 0x264e <prvProcessTimerOrBlockTask+0x50>
    2640:	87 d9       	rcall	.-3314   	; 0x1950 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    2642:	a5 01       	movw	r20, r10
    2644:	94 01       	movw	r18, r8
    2646:	c7 01       	movw	r24, r14
    2648:	b6 01       	movw	r22, r12
    264a:	83 df       	rcall	.-250    	; 0x2552 <prvProcessExpiredTimer>
    264c:	1e c0       	rjmp	.+60     	; 0x268a <prvProcessTimerOrBlockTask+0x8c>
                     * time has not been reached yet.  This task should therefore
                     * block to wait for the next expire time or a command to be
                     * received - whichever comes first.  The following line cannot
                     * be reached unless xNextExpireTime > xTimeNow, except in the
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
    264e:	11 23       	and	r17, r17
    2650:	41 f0       	breq	.+16     	; 0x2662 <prvProcessTimerOrBlockTask+0x64>
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    2652:	e0 91 b1 11 	lds	r30, 0x11B1	; 0x8011b1 <pxOverflowTimerList>
    2656:	f0 91 b2 11 	lds	r31, 0x11B2	; 0x8011b2 <pxOverflowTimerList+0x1>
    265a:	80 81       	ld	r24, Z
    265c:	11 e0       	ldi	r17, 0x01	; 1
    265e:	81 11       	cpse	r24, r1
    2660:	10 e0       	ldi	r17, 0x00	; 0
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    2662:	b7 01       	movw	r22, r14
    2664:	a6 01       	movw	r20, r12
    2666:	48 19       	sub	r20, r8
    2668:	59 09       	sbc	r21, r9
    266a:	6a 09       	sbc	r22, r10
    266c:	7b 09       	sbc	r23, r11
    266e:	21 2f       	mov	r18, r17
    2670:	80 91 af 11 	lds	r24, 0x11AF	; 0x8011af <xTimerQueue>
    2674:	90 91 b0 11 	lds	r25, 0x11B0	; 0x8011b0 <xTimerQueue+0x1>
    2678:	0e 94 bb 08 	call	0x1176	; 0x1176 <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
    267c:	69 d9       	rcall	.-3374   	; 0x1950 <xTaskResumeAll>
    267e:	81 11       	cpse	r24, r1
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
    2680:	04 c0       	rjmp	.+8      	; 0x268a <prvProcessTimerOrBlockTask+0x8c>
    2682:	0e 94 89 04 	call	0x912	; 0x912 <vPortYield>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    2686:	01 c0       	rjmp	.+2      	; 0x268a <prvProcessTimerOrBlockTask+0x8c>
    2688:	63 d9       	rcall	.-3386   	; 0x1950 <xTaskResumeAll>
            }
        }
    }
    268a:	0f 90       	pop	r0
    268c:	df 91       	pop	r29
    268e:	cf 91       	pop	r28
    2690:	1f 91       	pop	r17
    2692:	ff 90       	pop	r15
    2694:	ef 90       	pop	r14
    2696:	df 90       	pop	r13
    2698:	cf 90       	pop	r12
    269a:	bf 90       	pop	r11
    269c:	af 90       	pop	r10
    269e:	9f 90       	pop	r9
    26a0:	8f 90       	pop	r8
    26a2:	08 95       	ret

000026a4 <prvProcessReceivedCommands>:
        return xProcessTimerNow;
    }
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
    26a4:	af 92       	push	r10
    26a6:	bf 92       	push	r11
    26a8:	cf 92       	push	r12
    26aa:	df 92       	push	r13
    26ac:	ef 92       	push	r14
    26ae:	ff 92       	push	r15
    26b0:	0f 93       	push	r16
    26b2:	1f 93       	push	r17
    26b4:	cf 93       	push	r28
    26b6:	df 93       	push	r29
    26b8:	cd b7       	in	r28, 0x3d	; 61
    26ba:	de b7       	in	r29, 0x3e	; 62
    26bc:	28 97       	sbiw	r28, 0x08	; 8
    26be:	0f b6       	in	r0, 0x3f	; 63
    26c0:	f8 94       	cli
    26c2:	de bf       	out	0x3e, r29	; 62
    26c4:	0f be       	out	0x3f, r0	; 63
    26c6:	cd bf       	out	0x3d, r28	; 61
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    26c8:	81 c0       	rjmp	.+258    	; 0x27cc <prvProcessReceivedCommands+0x128>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    26ca:	89 81       	ldd	r24, Y+1	; 0x01
    26cc:	88 23       	and	r24, r24
    26ce:	0c f4       	brge	.+2      	; 0x26d2 <prvProcessReceivedCommands+0x2e>
    26d0:	7d c0       	rjmp	.+250    	; 0x27cc <prvProcessReceivedCommands+0x128>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    26d2:	ae 80       	ldd	r10, Y+6	; 0x06
    26d4:	bf 80       	ldd	r11, Y+7	; 0x07

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    26d6:	d5 01       	movw	r26, r10
    26d8:	1c 96       	adiw	r26, 0x0c	; 12
    26da:	8d 91       	ld	r24, X+
    26dc:	9c 91       	ld	r25, X
    26de:	1d 97       	sbiw	r26, 0x0d	; 13
    26e0:	89 2b       	or	r24, r25
    26e2:	21 f0       	breq	.+8      	; 0x26ec <prvProcessReceivedCommands+0x48>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    26e4:	c5 01       	movw	r24, r10
    26e6:	02 96       	adiw	r24, 0x02	; 2
    26e8:	0e 94 0d 04 	call	0x81a	; 0x81a <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    26ec:	ce 01       	movw	r24, r28
    26ee:	08 96       	adiw	r24, 0x08	; 8
    26f0:	03 df       	rcall	.-506    	; 0x24f8 <prvSampleTimeNow>
    26f2:	8b 01       	movw	r16, r22
    26f4:	9c 01       	movw	r18, r24

                switch( xMessage.xMessageID )
    26f6:	e9 81       	ldd	r30, Y+1	; 0x01
    26f8:	0e 2e       	mov	r0, r30
    26fa:	00 0c       	add	r0, r0
    26fc:	ff 0b       	sbc	r31, r31
    26fe:	ea 30       	cpi	r30, 0x0A	; 10
    2700:	f1 05       	cpc	r31, r1
    2702:	08 f0       	brcs	.+2      	; 0x2706 <prvProcessReceivedCommands+0x62>
    2704:	63 c0       	rjmp	.+198    	; 0x27cc <prvProcessReceivedCommands+0x128>
    2706:	88 27       	eor	r24, r24
    2708:	ee 58       	subi	r30, 0x8E	; 142
    270a:	ff 4f       	sbci	r31, 0xFF	; 255
    270c:	8f 4f       	sbci	r24, 0xFF	; 255
    270e:	bd c7       	rjmp	.+3962   	; 0x368a <__tablejump2__>
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    2710:	f5 01       	movw	r30, r10
    2712:	86 89       	ldd	r24, Z+22	; 0x16
    2714:	81 60       	ori	r24, 0x01	; 1
    2716:	86 8b       	std	Z+22, r24	; 0x16

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    2718:	ca 80       	ldd	r12, Y+2	; 0x02
    271a:	db 80       	ldd	r13, Y+3	; 0x03
    271c:	ec 80       	ldd	r14, Y+4	; 0x04
    271e:	fd 80       	ldd	r15, Y+5	; 0x05
    2720:	46 85       	ldd	r20, Z+14	; 0x0e
    2722:	57 85       	ldd	r21, Z+15	; 0x0f
    2724:	60 89       	ldd	r22, Z+16	; 0x10
    2726:	71 89       	ldd	r23, Z+17	; 0x11
    2728:	4c 0d       	add	r20, r12
    272a:	5d 1d       	adc	r21, r13
    272c:	6e 1d       	adc	r22, r14
    272e:	7f 1d       	adc	r23, r15
    2730:	c5 01       	movw	r24, r10
    2732:	8a dd       	rcall	.-1260   	; 0x2248 <prvInsertTimerInActiveList>
    2734:	88 23       	and	r24, r24
    2736:	09 f4       	brne	.+2      	; 0x273a <prvProcessReceivedCommands+0x96>
    2738:	49 c0       	rjmp	.+146    	; 0x27cc <prvProcessReceivedCommands+0x128>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    273a:	d5 01       	movw	r26, r10
    273c:	54 96       	adiw	r26, 0x14	; 20
    273e:	ed 91       	ld	r30, X+
    2740:	fc 91       	ld	r31, X
    2742:	55 97       	sbiw	r26, 0x15	; 21
    2744:	c5 01       	movw	r24, r10
    2746:	19 95       	eicall
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2748:	f5 01       	movw	r30, r10
    274a:	86 89       	ldd	r24, Z+22	; 0x16
    274c:	82 ff       	sbrs	r24, 2
    274e:	3e c0       	rjmp	.+124    	; 0x27cc <prvProcessReceivedCommands+0x128>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    2750:	4a 81       	ldd	r20, Y+2	; 0x02
    2752:	5b 81       	ldd	r21, Y+3	; 0x03
    2754:	6c 81       	ldd	r22, Y+4	; 0x04
    2756:	7d 81       	ldd	r23, Y+5	; 0x05
    2758:	86 85       	ldd	r24, Z+14	; 0x0e
    275a:	97 85       	ldd	r25, Z+15	; 0x0f
    275c:	a0 89       	ldd	r26, Z+16	; 0x10
    275e:	b1 89       	ldd	r27, Z+17	; 0x11
    2760:	9a 01       	movw	r18, r20
    2762:	ab 01       	movw	r20, r22
    2764:	28 0f       	add	r18, r24
    2766:	39 1f       	adc	r19, r25
    2768:	4a 1f       	adc	r20, r26
    276a:	5b 1f       	adc	r21, r27
    276c:	c1 2c       	mov	r12, r1
    276e:	d1 2c       	mov	r13, r1
    2770:	76 01       	movw	r14, r12
    2772:	00 e0       	ldi	r16, 0x00	; 0
    2774:	10 e0       	ldi	r17, 0x00	; 0
    2776:	60 e0       	ldi	r22, 0x00	; 0
    2778:	c5 01       	movw	r24, r10
    277a:	f8 dd       	rcall	.-1040   	; 0x236c <xTimerGenericCommand>
    277c:	27 c0       	rjmp	.+78     	; 0x27cc <prvProcessReceivedCommands+0x128>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    277e:	d5 01       	movw	r26, r10
    2780:	56 96       	adiw	r26, 0x16	; 22
    2782:	8c 91       	ld	r24, X
    2784:	56 97       	sbiw	r26, 0x16	; 22
    2786:	8e 7f       	andi	r24, 0xFE	; 254
    2788:	56 96       	adiw	r26, 0x16	; 22
    278a:	8c 93       	st	X, r24
                        break;
    278c:	1f c0       	rjmp	.+62     	; 0x27cc <prvProcessReceivedCommands+0x128>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    278e:	f5 01       	movw	r30, r10
    2790:	86 89       	ldd	r24, Z+22	; 0x16
    2792:	81 60       	ori	r24, 0x01	; 1
    2794:	86 8b       	std	Z+22, r24	; 0x16
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    2796:	4a 81       	ldd	r20, Y+2	; 0x02
    2798:	5b 81       	ldd	r21, Y+3	; 0x03
    279a:	6c 81       	ldd	r22, Y+4	; 0x04
    279c:	7d 81       	ldd	r23, Y+5	; 0x05
    279e:	46 87       	std	Z+14, r20	; 0x0e
    27a0:	57 87       	std	Z+15, r21	; 0x0f
    27a2:	60 8b       	std	Z+16, r22	; 0x10
    27a4:	71 8b       	std	Z+17, r23	; 0x11
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    27a6:	40 0f       	add	r20, r16
    27a8:	51 1f       	adc	r21, r17
    27aa:	62 1f       	adc	r22, r18
    27ac:	73 1f       	adc	r23, r19
    27ae:	68 01       	movw	r12, r16
    27b0:	79 01       	movw	r14, r18
    27b2:	c5 01       	movw	r24, r10
    27b4:	49 dd       	rcall	.-1390   	; 0x2248 <prvInsertTimerInActiveList>
                        break;
    27b6:	0a c0       	rjmp	.+20     	; 0x27cc <prvProcessReceivedCommands+0x128>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    27b8:	f5 01       	movw	r30, r10
    27ba:	86 89       	ldd	r24, Z+22	; 0x16
    27bc:	81 fd       	sbrc	r24, 1
    27be:	04 c0       	rjmp	.+8      	; 0x27c8 <prvProcessReceivedCommands+0x124>
                                {
                                    vPortFree( pxTimer );
    27c0:	c5 01       	movw	r24, r10
    27c2:	0e 94 7f 03 	call	0x6fe	; 0x6fe <vPortFree>
    27c6:	02 c0       	rjmp	.+4      	; 0x27cc <prvProcessReceivedCommands+0x128>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    27c8:	8e 7f       	andi	r24, 0xFE	; 254
    27ca:	86 8b       	std	Z+22, r24	; 0x16
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    27cc:	20 e0       	ldi	r18, 0x00	; 0
    27ce:	30 e0       	ldi	r19, 0x00	; 0
    27d0:	a9 01       	movw	r20, r18
    27d2:	be 01       	movw	r22, r28
    27d4:	6f 5f       	subi	r22, 0xFF	; 255
    27d6:	7f 4f       	sbci	r23, 0xFF	; 255
    27d8:	80 91 af 11 	lds	r24, 0x11AF	; 0x8011af <xTimerQueue>
    27dc:	90 91 b0 11 	lds	r25, 0x11B0	; 0x8011b0 <xTimerQueue+0x1>
    27e0:	0e 94 85 07 	call	0xf0a	; 0xf0a <xQueueReceive>
    27e4:	81 11       	cpse	r24, r1
    27e6:	71 cf       	rjmp	.-286    	; 0x26ca <prvProcessReceivedCommands+0x26>
                        /* Don't expect to get here. */
                        break;
                }
            }
        }
    }
    27e8:	28 96       	adiw	r28, 0x08	; 8
    27ea:	0f b6       	in	r0, 0x3f	; 63
    27ec:	f8 94       	cli
    27ee:	de bf       	out	0x3e, r29	; 62
    27f0:	0f be       	out	0x3f, r0	; 63
    27f2:	cd bf       	out	0x3d, r28	; 61
    27f4:	df 91       	pop	r29
    27f6:	cf 91       	pop	r28
    27f8:	1f 91       	pop	r17
    27fa:	0f 91       	pop	r16
    27fc:	ff 90       	pop	r15
    27fe:	ef 90       	pop	r14
    2800:	df 90       	pop	r13
    2802:	cf 90       	pop	r12
    2804:	bf 90       	pop	r11
    2806:	af 90       	pop	r10
    2808:	08 95       	ret

0000280a <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    280a:	08 95       	ret

0000280c <prvSetMainLedOn>:
 * Private function to enable board led to use it in application hooks
 */
void prvSetMainLedOn( void ) 
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    280c:	84 b1       	in	r24, 0x04	; 4
    280e:	80 68       	ori	r24, 0x80	; 128
    2810:	84 b9       	out	0x04, r24	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    2812:	85 b1       	in	r24, 0x05	; 5
    2814:	80 68       	ori	r24, 0x80	; 128
    2816:	85 b9       	out	0x05, r24	; 5
    2818:	08 95       	ret

0000281a <prvBlinkMainLed>:
 */
void prvBlinkMainLed( void ) 
{

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    281a:	83 b1       	in	r24, 0x03	; 3
    281c:	80 68       	ori	r24, 0x80	; 128
    281e:	83 b9       	out	0x03, r24	; 3
    2820:	08 95       	ret

00002822 <vApplicationMallocFailedHook>:
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    prvSetMainLedOn(); // Main LED on.
    2822:	f4 df       	rcall	.-24     	; 0x280c <prvSetMainLedOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2824:	2f ef       	ldi	r18, 0xFF	; 255
    2826:	80 e7       	ldi	r24, 0x70	; 112
    2828:	92 e0       	ldi	r25, 0x02	; 2
    282a:	21 50       	subi	r18, 0x01	; 1
    282c:	80 40       	sbci	r24, 0x00	; 0
    282e:	90 40       	sbci	r25, 0x00	; 0
    2830:	e1 f7       	brne	.-8      	; 0x282a <vApplicationMallocFailedHook+0x8>
    2832:	00 c0       	rjmp	.+0      	; 0x2834 <vApplicationMallocFailedHook+0x12>
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    2834:	00 00       	nop
    2836:	f1 df       	rcall	.-30     	; 0x281a <prvBlinkMainLed>
    2838:	f5 cf       	rjmp	.-22     	; 0x2824 <vApplicationMallocFailedHook+0x2>

0000283a <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)),
                                    char * pcTaskName __attribute__((unused)) )
{

    prvSetMainLedOn(); // Main LED on.
    283a:	e8 df       	rcall	.-48     	; 0x280c <prvSetMainLedOn>
    283c:	2f ef       	ldi	r18, 0xFF	; 255
    283e:	87 ea       	ldi	r24, 0xA7	; 167
    2840:	91 e6       	ldi	r25, 0x61	; 97
    2842:	21 50       	subi	r18, 0x01	; 1
    2844:	80 40       	sbci	r24, 0x00	; 0
    2846:	90 40       	sbci	r25, 0x00	; 0
    2848:	e1 f7       	brne	.-8      	; 0x2842 <vApplicationStackOverflowHook+0x8>
    284a:	00 c0       	rjmp	.+0      	; 0x284c <vApplicationStackOverflowHook+0x12>

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    284c:	00 00       	nop
    284e:	e5 df       	rcall	.-54     	; 0x281a <prvBlinkMainLed>
    2850:	f5 cf       	rjmp	.-22     	; 0x283c <vApplicationStackOverflowHook+0x2>

00002852 <initializeSystem>:
	return 0;
}

void initializeSystem(void)
{
	trace_init();
    2852:	0e 94 4d 02 	call	0x49a	; 0x49a <trace_init>
	stdio_initialise(ser_USART0);
    2856:	80 e0       	ldi	r24, 0x00	; 0
    2858:	99 d0       	rcall	.+306    	; 0x298c <stdio_initialise>
	status_leds_initialise(5);
    285a:	85 e0       	ldi	r24, 0x05	; 5
    285c:	90 e0       	ldi	r25, 0x00	; 0
    285e:	9d d1       	rcall	.+826    	; 0x2b9a <status_leds_initialise>
	DDRC |= (1 << LIGHT_PIN);
    2860:	87 b1       	in	r24, 0x07	; 7
    2862:	81 60       	ori	r24, 0x01	; 1
    2864:	87 b9       	out	0x07, r24	; 7
	PORTC &= ~(1 << LIGHT_PIN);
    2866:	88 b1       	in	r24, 0x08	; 8
    2868:	8e 7f       	andi	r24, 0xFE	; 254
    286a:	88 b9       	out	0x08, r24	; 8
	hc_sr04_init();
    286c:	0e 94 bb 01 	call	0x376	; 0x376 <hc_sr04_init>

	printf("System Initialization Complete\n");
    2870:	80 e0       	ldi	r24, 0x00	; 0
    2872:	93 e0       	ldi	r25, 0x03	; 3
    2874:	0c 94 a4 1c 	jmp	0x3948	; 0x3948 <puts>
    2878:	08 95       	ret

0000287a <main>:
void initializeSystem(void);
#include "application.h"

int main(void)
{
	initializeSystem();  // Initialize system configurations
    287a:	eb df       	rcall	.-42     	; 0x2852 <initializeSystem>

	create_all_application_tasks();  // Create all tasks from application.c
    287c:	0e 94 31 01 	call	0x262	; 0x262 <create_all_application_tasks>
	vTaskStartScheduler();  // Start the scheduler
    2880:	0e 94 2b 0b 	call	0x1656	; 0x1656 <vTaskStartScheduler>
    2884:	ff cf       	rjmp	.-2      	; 0x2884 <main+0xa>

00002886 <__floatunsisf>:
    2886:	e8 94       	clt
    2888:	09 c0       	rjmp	.+18     	; 0x289c <__floatsisf+0x12>

0000288a <__floatsisf>:
    288a:	97 fb       	bst	r25, 7
    288c:	3e f4       	brtc	.+14     	; 0x289c <__floatsisf+0x12>
    288e:	90 95       	com	r25
    2890:	80 95       	com	r24
    2892:	70 95       	com	r23
    2894:	61 95       	neg	r22
    2896:	7f 4f       	sbci	r23, 0xFF	; 255
    2898:	8f 4f       	sbci	r24, 0xFF	; 255
    289a:	9f 4f       	sbci	r25, 0xFF	; 255
    289c:	99 23       	and	r25, r25
    289e:	a9 f0       	breq	.+42     	; 0x28ca <__floatsisf+0x40>
    28a0:	f9 2f       	mov	r31, r25
    28a2:	96 e9       	ldi	r25, 0x96	; 150
    28a4:	bb 27       	eor	r27, r27
    28a6:	93 95       	inc	r25
    28a8:	f6 95       	lsr	r31
    28aa:	87 95       	ror	r24
    28ac:	77 95       	ror	r23
    28ae:	67 95       	ror	r22
    28b0:	b7 95       	ror	r27
    28b2:	f1 11       	cpse	r31, r1
    28b4:	f8 cf       	rjmp	.-16     	; 0x28a6 <__floatsisf+0x1c>
    28b6:	fa f4       	brpl	.+62     	; 0x28f6 <__floatsisf+0x6c>
    28b8:	bb 0f       	add	r27, r27
    28ba:	11 f4       	brne	.+4      	; 0x28c0 <__floatsisf+0x36>
    28bc:	60 ff       	sbrs	r22, 0
    28be:	1b c0       	rjmp	.+54     	; 0x28f6 <__floatsisf+0x6c>
    28c0:	6f 5f       	subi	r22, 0xFF	; 255
    28c2:	7f 4f       	sbci	r23, 0xFF	; 255
    28c4:	8f 4f       	sbci	r24, 0xFF	; 255
    28c6:	9f 4f       	sbci	r25, 0xFF	; 255
    28c8:	16 c0       	rjmp	.+44     	; 0x28f6 <__floatsisf+0x6c>
    28ca:	88 23       	and	r24, r24
    28cc:	11 f0       	breq	.+4      	; 0x28d2 <__floatsisf+0x48>
    28ce:	96 e9       	ldi	r25, 0x96	; 150
    28d0:	11 c0       	rjmp	.+34     	; 0x28f4 <__floatsisf+0x6a>
    28d2:	77 23       	and	r23, r23
    28d4:	21 f0       	breq	.+8      	; 0x28de <__floatsisf+0x54>
    28d6:	9e e8       	ldi	r25, 0x8E	; 142
    28d8:	87 2f       	mov	r24, r23
    28da:	76 2f       	mov	r23, r22
    28dc:	05 c0       	rjmp	.+10     	; 0x28e8 <__floatsisf+0x5e>
    28de:	66 23       	and	r22, r22
    28e0:	71 f0       	breq	.+28     	; 0x28fe <__floatsisf+0x74>
    28e2:	96 e8       	ldi	r25, 0x86	; 134
    28e4:	86 2f       	mov	r24, r22
    28e6:	70 e0       	ldi	r23, 0x00	; 0
    28e8:	60 e0       	ldi	r22, 0x00	; 0
    28ea:	2a f0       	brmi	.+10     	; 0x28f6 <__floatsisf+0x6c>
    28ec:	9a 95       	dec	r25
    28ee:	66 0f       	add	r22, r22
    28f0:	77 1f       	adc	r23, r23
    28f2:	88 1f       	adc	r24, r24
    28f4:	da f7       	brpl	.-10     	; 0x28ec <__floatsisf+0x62>
    28f6:	88 0f       	add	r24, r24
    28f8:	96 95       	lsr	r25
    28fa:	87 95       	ror	r24
    28fc:	97 f9       	bld	r25, 7
    28fe:	08 95       	ret

00002900 <__gesf2>:
    2900:	03 d0       	rcall	.+6      	; 0x2908 <__fp_cmp>
    2902:	08 f4       	brcc	.+2      	; 0x2906 <__gesf2+0x6>
    2904:	8f ef       	ldi	r24, 0xFF	; 255
    2906:	08 95       	ret

00002908 <__fp_cmp>:
    2908:	99 0f       	add	r25, r25
    290a:	00 08       	sbc	r0, r0
    290c:	55 0f       	add	r21, r21
    290e:	aa 0b       	sbc	r26, r26
    2910:	e0 e8       	ldi	r30, 0x80	; 128
    2912:	fe ef       	ldi	r31, 0xFE	; 254
    2914:	16 16       	cp	r1, r22
    2916:	17 06       	cpc	r1, r23
    2918:	e8 07       	cpc	r30, r24
    291a:	f9 07       	cpc	r31, r25
    291c:	c0 f0       	brcs	.+48     	; 0x294e <__fp_cmp+0x46>
    291e:	12 16       	cp	r1, r18
    2920:	13 06       	cpc	r1, r19
    2922:	e4 07       	cpc	r30, r20
    2924:	f5 07       	cpc	r31, r21
    2926:	98 f0       	brcs	.+38     	; 0x294e <__fp_cmp+0x46>
    2928:	62 1b       	sub	r22, r18
    292a:	73 0b       	sbc	r23, r19
    292c:	84 0b       	sbc	r24, r20
    292e:	95 0b       	sbc	r25, r21
    2930:	39 f4       	brne	.+14     	; 0x2940 <__fp_cmp+0x38>
    2932:	0a 26       	eor	r0, r26
    2934:	61 f0       	breq	.+24     	; 0x294e <__fp_cmp+0x46>
    2936:	23 2b       	or	r18, r19
    2938:	24 2b       	or	r18, r20
    293a:	25 2b       	or	r18, r21
    293c:	21 f4       	brne	.+8      	; 0x2946 <__fp_cmp+0x3e>
    293e:	08 95       	ret
    2940:	0a 26       	eor	r0, r26
    2942:	09 f4       	brne	.+2      	; 0x2946 <__fp_cmp+0x3e>
    2944:	a1 40       	sbci	r26, 0x01	; 1
    2946:	a6 95       	lsr	r26
    2948:	8f ef       	ldi	r24, 0xFF	; 255
    294a:	81 1d       	adc	r24, r1
    294c:	81 1d       	adc	r24, r1
    294e:	08 95       	ret

00002950 <usart_getchar>:
    2950:	cf 93       	push	r28
    2952:	df 93       	push	r29
    2954:	1f 92       	push	r1
    2956:	cd b7       	in	r28, 0x3d	; 61
    2958:	de b7       	in	r29, 0x3e	; 62
    295a:	be 01       	movw	r22, r28
    295c:	6f 5f       	subi	r22, 0xFF	; 255
    295e:	7f 4f       	sbci	r23, 0xFF	; 255
    2960:	80 91 cb 11 	lds	r24, 0x11CB	; 0x8011cb <_com_serial_instance>
    2964:	90 91 cc 11 	lds	r25, 0x11CC	; 0x8011cc <_com_serial_instance+0x1>
    2968:	2d d2       	rcall	.+1114   	; 0x2dc4 <serial_getByte>
    296a:	81 11       	cpse	r24, r1
    296c:	f6 cf       	rjmp	.-20     	; 0x295a <usart_getchar+0xa>
    296e:	89 81       	ldd	r24, Y+1	; 0x01
    2970:	90 e0       	ldi	r25, 0x00	; 0
    2972:	0f 90       	pop	r0
    2974:	df 91       	pop	r29
    2976:	cf 91       	pop	r28
    2978:	08 95       	ret

0000297a <usart_putchar>:
    297a:	68 2f       	mov	r22, r24
    297c:	80 91 cb 11 	lds	r24, 0x11CB	; 0x8011cb <_com_serial_instance>
    2980:	90 91 cc 11 	lds	r25, 0x11CC	; 0x8011cc <_com_serial_instance+0x1>
    2984:	f4 d1       	rcall	.+1000   	; 0x2d6e <serial_sendByte>
    2986:	80 e0       	ldi	r24, 0x00	; 0
    2988:	90 e0       	ldi	r25, 0x00	; 0
    298a:	08 95       	ret

0000298c <stdio_initialise>:
    298c:	8f 92       	push	r8
    298e:	9f 92       	push	r9
    2990:	af 92       	push	r10
    2992:	cf 92       	push	r12
    2994:	ef 92       	push	r14
    2996:	0f 93       	push	r16
    2998:	81 2c       	mov	r8, r1
    299a:	91 2c       	mov	r9, r1
    299c:	68 94       	set
    299e:	aa 24       	eor	r10, r10
    29a0:	a7 f8       	bld	r10, 7
    29a2:	68 94       	set
    29a4:	cc 24       	eor	r12, r12
    29a6:	c7 f8       	bld	r12, 7
    29a8:	e1 2c       	mov	r14, r1
    29aa:	00 e0       	ldi	r16, 0x00	; 0
    29ac:	23 e0       	ldi	r18, 0x03	; 3
    29ae:	40 e0       	ldi	r20, 0x00	; 0
    29b0:	51 ee       	ldi	r21, 0xE1	; 225
    29b2:	60 e0       	ldi	r22, 0x00	; 0
    29b4:	70 e0       	ldi	r23, 0x00	; 0
    29b6:	3f d1       	rcall	.+638    	; 0x2c36 <serial_create>
    29b8:	90 93 cc 11 	sts	0x11CC, r25	; 0x8011cc <_com_serial_instance+0x1>
    29bc:	80 93 cb 11 	sts	0x11CB, r24	; 0x8011cb <_com_serial_instance>
    29c0:	e5 ef       	ldi	r30, 0xF5	; 245
    29c2:	f1 e1       	ldi	r31, 0x11	; 17
    29c4:	87 e0       	ldi	r24, 0x07	; 7
    29c6:	92 e0       	ldi	r25, 0x02	; 2
    29c8:	91 83       	std	Z+1, r25	; 0x01
    29ca:	80 83       	st	Z, r24
    29cc:	93 83       	std	Z+3, r25	; 0x03
    29ce:	82 83       	std	Z+2, r24	; 0x02
    29d0:	0f 91       	pop	r16
    29d2:	ef 90       	pop	r14
    29d4:	cf 90       	pop	r12
    29d6:	af 90       	pop	r10
    29d8:	9f 90       	pop	r9
    29da:	8f 90       	pop	r8
    29dc:	08 95       	ret

000029de <_turn_off>:
    29de:	90 e0       	ldi	r25, 0x00	; 0
    29e0:	fc 01       	movw	r30, r24
    29e2:	ee 0f       	add	r30, r30
    29e4:	ff 1f       	adc	r31, r31
    29e6:	e8 0f       	add	r30, r24
    29e8:	f9 1f       	adc	r31, r25
    29ea:	ee 0f       	add	r30, r30
    29ec:	ff 1f       	adc	r31, r31
    29ee:	e3 53       	subi	r30, 0x33	; 51
    29f0:	fe 4e       	sbci	r31, 0xEE	; 238
    29f2:	23 81       	ldd	r18, Z+3	; 0x03
    29f4:	21 11       	cpse	r18, r1
    29f6:	1f c0       	rjmp	.+62     	; 0x2a36 <_turn_off+0x58>
    29f8:	9c 01       	movw	r18, r24
    29fa:	22 0f       	add	r18, r18
    29fc:	33 1f       	adc	r19, r19
    29fe:	f9 01       	movw	r30, r18
    2a00:	e8 0f       	add	r30, r24
    2a02:	f9 1f       	adc	r31, r25
    2a04:	ee 0f       	add	r30, r30
    2a06:	ff 1f       	adc	r31, r31
    2a08:	e3 53       	subi	r30, 0x33	; 51
    2a0a:	fe 4e       	sbci	r31, 0xEE	; 238
    2a0c:	a0 81       	ld	r26, Z
    2a0e:	b1 81       	ldd	r27, Z+1	; 0x01
    2a10:	4c 91       	ld	r20, X
    2a12:	f9 01       	movw	r30, r18
    2a14:	e8 0f       	add	r30, r24
    2a16:	f9 1f       	adc	r31, r25
    2a18:	ee 0f       	add	r30, r30
    2a1a:	ff 1f       	adc	r31, r31
    2a1c:	e3 53       	subi	r30, 0x33	; 51
    2a1e:	fe 4e       	sbci	r31, 0xEE	; 238
    2a20:	81 e0       	ldi	r24, 0x01	; 1
    2a22:	90 e0       	ldi	r25, 0x00	; 0
    2a24:	02 80       	ldd	r0, Z+2	; 0x02
    2a26:	02 c0       	rjmp	.+4      	; 0x2a2c <_turn_off+0x4e>
    2a28:	88 0f       	add	r24, r24
    2a2a:	99 1f       	adc	r25, r25
    2a2c:	0a 94       	dec	r0
    2a2e:	e2 f7       	brpl	.-8      	; 0x2a28 <_turn_off+0x4a>
    2a30:	84 2b       	or	r24, r20
    2a32:	8c 93       	st	X, r24
    2a34:	08 95       	ret
    2a36:	fc 01       	movw	r30, r24
    2a38:	ee 0f       	add	r30, r30
    2a3a:	ff 1f       	adc	r31, r31
    2a3c:	df 01       	movw	r26, r30
    2a3e:	a8 0f       	add	r26, r24
    2a40:	b9 1f       	adc	r27, r25
    2a42:	aa 0f       	add	r26, r26
    2a44:	bb 1f       	adc	r27, r27
    2a46:	a3 53       	subi	r26, 0x33	; 51
    2a48:	be 4e       	sbci	r27, 0xEE	; 238
    2a4a:	0d 90       	ld	r0, X+
    2a4c:	bc 91       	ld	r27, X
    2a4e:	a0 2d       	mov	r26, r0
    2a50:	2c 91       	ld	r18, X
    2a52:	e8 0f       	add	r30, r24
    2a54:	f9 1f       	adc	r31, r25
    2a56:	ee 0f       	add	r30, r30
    2a58:	ff 1f       	adc	r31, r31
    2a5a:	e3 53       	subi	r30, 0x33	; 51
    2a5c:	fe 4e       	sbci	r31, 0xEE	; 238
    2a5e:	81 e0       	ldi	r24, 0x01	; 1
    2a60:	90 e0       	ldi	r25, 0x00	; 0
    2a62:	02 80       	ldd	r0, Z+2	; 0x02
    2a64:	02 c0       	rjmp	.+4      	; 0x2a6a <_turn_off+0x8c>
    2a66:	88 0f       	add	r24, r24
    2a68:	99 1f       	adc	r25, r25
    2a6a:	0a 94       	dec	r0
    2a6c:	e2 f7       	brpl	.-8      	; 0x2a66 <_turn_off+0x88>
    2a6e:	80 95       	com	r24
    2a70:	82 23       	and	r24, r18
    2a72:	8c 93       	st	X, r24
    2a74:	08 95       	ret

00002a76 <_turn_on>:
    2a76:	90 e0       	ldi	r25, 0x00	; 0
    2a78:	fc 01       	movw	r30, r24
    2a7a:	ee 0f       	add	r30, r30
    2a7c:	ff 1f       	adc	r31, r31
    2a7e:	e8 0f       	add	r30, r24
    2a80:	f9 1f       	adc	r31, r25
    2a82:	ee 0f       	add	r30, r30
    2a84:	ff 1f       	adc	r31, r31
    2a86:	e3 53       	subi	r30, 0x33	; 51
    2a88:	fe 4e       	sbci	r31, 0xEE	; 238
    2a8a:	23 81       	ldd	r18, Z+3	; 0x03
    2a8c:	21 11       	cpse	r18, r1
    2a8e:	20 c0       	rjmp	.+64     	; 0x2ad0 <_turn_on+0x5a>
    2a90:	9c 01       	movw	r18, r24
    2a92:	22 0f       	add	r18, r18
    2a94:	33 1f       	adc	r19, r19
    2a96:	f9 01       	movw	r30, r18
    2a98:	e8 0f       	add	r30, r24
    2a9a:	f9 1f       	adc	r31, r25
    2a9c:	ee 0f       	add	r30, r30
    2a9e:	ff 1f       	adc	r31, r31
    2aa0:	e3 53       	subi	r30, 0x33	; 51
    2aa2:	fe 4e       	sbci	r31, 0xEE	; 238
    2aa4:	a0 81       	ld	r26, Z
    2aa6:	b1 81       	ldd	r27, Z+1	; 0x01
    2aa8:	4c 91       	ld	r20, X
    2aaa:	f9 01       	movw	r30, r18
    2aac:	e8 0f       	add	r30, r24
    2aae:	f9 1f       	adc	r31, r25
    2ab0:	ee 0f       	add	r30, r30
    2ab2:	ff 1f       	adc	r31, r31
    2ab4:	e3 53       	subi	r30, 0x33	; 51
    2ab6:	fe 4e       	sbci	r31, 0xEE	; 238
    2ab8:	81 e0       	ldi	r24, 0x01	; 1
    2aba:	90 e0       	ldi	r25, 0x00	; 0
    2abc:	02 80       	ldd	r0, Z+2	; 0x02
    2abe:	02 c0       	rjmp	.+4      	; 0x2ac4 <_turn_on+0x4e>
    2ac0:	88 0f       	add	r24, r24
    2ac2:	99 1f       	adc	r25, r25
    2ac4:	0a 94       	dec	r0
    2ac6:	e2 f7       	brpl	.-8      	; 0x2ac0 <_turn_on+0x4a>
    2ac8:	80 95       	com	r24
    2aca:	84 23       	and	r24, r20
    2acc:	8c 93       	st	X, r24
    2ace:	08 95       	ret
    2ad0:	fc 01       	movw	r30, r24
    2ad2:	ee 0f       	add	r30, r30
    2ad4:	ff 1f       	adc	r31, r31
    2ad6:	df 01       	movw	r26, r30
    2ad8:	a8 0f       	add	r26, r24
    2ada:	b9 1f       	adc	r27, r25
    2adc:	aa 0f       	add	r26, r26
    2ade:	bb 1f       	adc	r27, r27
    2ae0:	a3 53       	subi	r26, 0x33	; 51
    2ae2:	be 4e       	sbci	r27, 0xEE	; 238
    2ae4:	0d 90       	ld	r0, X+
    2ae6:	bc 91       	ld	r27, X
    2ae8:	a0 2d       	mov	r26, r0
    2aea:	2c 91       	ld	r18, X
    2aec:	e8 0f       	add	r30, r24
    2aee:	f9 1f       	adc	r31, r25
    2af0:	ee 0f       	add	r30, r30
    2af2:	ff 1f       	adc	r31, r31
    2af4:	e3 53       	subi	r30, 0x33	; 51
    2af6:	fe 4e       	sbci	r31, 0xEE	; 238
    2af8:	81 e0       	ldi	r24, 0x01	; 1
    2afa:	90 e0       	ldi	r25, 0x00	; 0
    2afc:	02 80       	ldd	r0, Z+2	; 0x02
    2afe:	02 c0       	rjmp	.+4      	; 0x2b04 <_turn_on+0x8e>
    2b00:	88 0f       	add	r24, r24
    2b02:	99 1f       	adc	r25, r25
    2b04:	0a 94       	dec	r0
    2b06:	e2 f7       	brpl	.-8      	; 0x2b00 <_turn_on+0x8a>
    2b08:	82 2b       	or	r24, r18
    2b0a:	8c 93       	st	X, r24
    2b0c:	08 95       	ret

00002b0e <_hal_led_task>:
    2b0e:	cc 24       	eor	r12, r12
    2b10:	c3 94       	inc	r12
    2b12:	d1 2c       	mov	r13, r1
    2b14:	68 94       	set
    2b16:	bb 24       	eor	r11, r11
    2b18:	b2 f8       	bld	r11, 2
    2b1a:	cd ec       	ldi	r28, 0xCD	; 205
    2b1c:	d1 e1       	ldi	r29, 0x11	; 17
    2b1e:	10 e0       	ldi	r17, 0x00	; 0
    2b20:	8c 81       	ldd	r24, Y+4	; 0x04
    2b22:	81 30       	cpi	r24, 0x01	; 1
    2b24:	81 f0       	breq	.+32     	; 0x2b46 <_hal_led_task+0x38>
    2b26:	18 f1       	brcs	.+70     	; 0x2b6e <_hal_led_task+0x60>
    2b28:	82 30       	cpi	r24, 0x02	; 2
    2b2a:	61 f5       	brne	.+88     	; 0x2b84 <_hal_led_task+0x76>
    2b2c:	e8 81       	ld	r30, Y
    2b2e:	f9 81       	ldd	r31, Y+1	; 0x01
    2b30:	20 81       	ld	r18, Z
    2b32:	c6 01       	movw	r24, r12
    2b34:	0a 80       	ldd	r0, Y+2	; 0x02
    2b36:	02 c0       	rjmp	.+4      	; 0x2b3c <_hal_led_task+0x2e>
    2b38:	88 0f       	add	r24, r24
    2b3a:	99 1f       	adc	r25, r25
    2b3c:	0a 94       	dec	r0
    2b3e:	e2 f7       	brpl	.-8      	; 0x2b38 <_hal_led_task+0x2a>
    2b40:	82 27       	eor	r24, r18
    2b42:	80 83       	st	Z, r24
    2b44:	1f c0       	rjmp	.+62     	; 0x2b84 <_hal_led_task+0x76>
    2b46:	8d 81       	ldd	r24, Y+5	; 0x05
    2b48:	8f 5f       	subi	r24, 0xFF	; 255
    2b4a:	86 30       	cpi	r24, 0x06	; 6
    2b4c:	10 f4       	brcc	.+4      	; 0x2b52 <_hal_led_task+0x44>
    2b4e:	8d 83       	std	Y+5, r24	; 0x05
    2b50:	19 c0       	rjmp	.+50     	; 0x2b84 <_hal_led_task+0x76>
    2b52:	1d 82       	std	Y+5, r1	; 0x05
    2b54:	e8 81       	ld	r30, Y
    2b56:	f9 81       	ldd	r31, Y+1	; 0x01
    2b58:	20 81       	ld	r18, Z
    2b5a:	c6 01       	movw	r24, r12
    2b5c:	0a 80       	ldd	r0, Y+2	; 0x02
    2b5e:	02 c0       	rjmp	.+4      	; 0x2b64 <_hal_led_task+0x56>
    2b60:	88 0f       	add	r24, r24
    2b62:	99 1f       	adc	r25, r25
    2b64:	0a 94       	dec	r0
    2b66:	e2 f7       	brpl	.-8      	; 0x2b60 <_hal_led_task+0x52>
    2b68:	82 27       	eor	r24, r18
    2b6a:	80 83       	st	Z, r24
    2b6c:	0b c0       	rjmp	.+22     	; 0x2b84 <_hal_led_task+0x76>
    2b6e:	0d 81       	ldd	r16, Y+5	; 0x05
    2b70:	00 23       	and	r16, r16
    2b72:	29 f0       	breq	.+10     	; 0x2b7e <_hal_led_task+0x70>
    2b74:	81 2f       	mov	r24, r17
    2b76:	7f df       	rcall	.-258    	; 0x2a76 <_turn_on>
    2b78:	01 50       	subi	r16, 0x01	; 1
    2b7a:	0d 83       	std	Y+5, r16	; 0x05
    2b7c:	03 c0       	rjmp	.+6      	; 0x2b84 <_hal_led_task+0x76>
    2b7e:	bc 82       	std	Y+4, r11	; 0x04
    2b80:	81 2f       	mov	r24, r17
    2b82:	2d df       	rcall	.-422    	; 0x29de <_turn_off>
    2b84:	1f 5f       	subi	r17, 0xFF	; 255
    2b86:	26 96       	adiw	r28, 0x06	; 6
    2b88:	14 30       	cpi	r17, 0x04	; 4
    2b8a:	51 f6       	brne	.-108    	; 0x2b20 <_hal_led_task+0x12>
    2b8c:	6c e0       	ldi	r22, 0x0C	; 12
    2b8e:	70 e0       	ldi	r23, 0x00	; 0
    2b90:	80 e0       	ldi	r24, 0x00	; 0
    2b92:	90 e0       	ldi	r25, 0x00	; 0
    2b94:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <vTaskDelay>
    2b98:	c0 cf       	rjmp	.-128    	; 0x2b1a <_hal_led_task+0xc>

00002b9a <status_leds_initialise>:
    2b9a:	ef 92       	push	r14
    2b9c:	ff 92       	push	r15
    2b9e:	0f 93       	push	r16
    2ba0:	1f 93       	push	r17
    2ba2:	cf 93       	push	r28
    2ba4:	df 93       	push	r29
    2ba6:	08 2f       	mov	r16, r24
    2ba8:	80 e4       	ldi	r24, 0x40	; 64
    2baa:	87 b9       	out	0x07, r24	; 7
    2bac:	cd ec       	ldi	r28, 0xCD	; 205
    2bae:	d1 e1       	ldi	r29, 0x11	; 17
    2bb0:	0f 2e       	mov	r0, r31
    2bb2:	f8 e2       	ldi	r31, 0x28	; 40
    2bb4:	ef 2e       	mov	r14, r31
    2bb6:	f1 2c       	mov	r15, r1
    2bb8:	f0 2d       	mov	r31, r0
    2bba:	f9 82       	std	Y+1, r15	; 0x01
    2bbc:	e8 82       	st	Y, r14
    2bbe:	86 e0       	ldi	r24, 0x06	; 6
    2bc0:	8a 83       	std	Y+2, r24	; 0x02
    2bc2:	1b 82       	std	Y+3, r1	; 0x03
    2bc4:	14 e0       	ldi	r17, 0x04	; 4
    2bc6:	1c 83       	std	Y+4, r17	; 0x04
    2bc8:	80 e0       	ldi	r24, 0x00	; 0
    2bca:	09 df       	rcall	.-494    	; 0x29de <_turn_off>
    2bcc:	80 e8       	ldi	r24, 0x80	; 128
    2bce:	87 b9       	out	0x07, r24	; 7
    2bd0:	ff 82       	std	Y+7, r15	; 0x07
    2bd2:	ee 82       	std	Y+6, r14	; 0x06
    2bd4:	87 e0       	ldi	r24, 0x07	; 7
    2bd6:	88 87       	std	Y+8, r24	; 0x08
    2bd8:	19 86       	std	Y+9, r1	; 0x09
    2bda:	1a 87       	std	Y+10, r17	; 0x0a
    2bdc:	81 e0       	ldi	r24, 0x01	; 1
    2bde:	ff de       	rcall	.-514    	; 0x29de <_turn_off>
    2be0:	80 e2       	ldi	r24, 0x20	; 32
    2be2:	83 bb       	out	0x13, r24	; 19
    2be4:	84 e3       	ldi	r24, 0x34	; 52
    2be6:	90 e0       	ldi	r25, 0x00	; 0
    2be8:	9d 87       	std	Y+13, r25	; 0x0d
    2bea:	8c 87       	std	Y+12, r24	; 0x0c
    2bec:	85 e0       	ldi	r24, 0x05	; 5
    2bee:	8e 87       	std	Y+14, r24	; 0x0e
    2bf0:	1f 86       	std	Y+15, r1	; 0x0f
    2bf2:	18 8b       	std	Y+16, r17	; 0x10
    2bf4:	82 e0       	ldi	r24, 0x02	; 2
    2bf6:	f3 de       	rcall	.-538    	; 0x29de <_turn_off>
    2bf8:	80 e1       	ldi	r24, 0x10	; 16
    2bfa:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x7c0101>
    2bfe:	82 e0       	ldi	r24, 0x02	; 2
    2c00:	91 e0       	ldi	r25, 0x01	; 1
    2c02:	9b 8b       	std	Y+19, r25	; 0x13
    2c04:	8a 8b       	std	Y+18, r24	; 0x12
    2c06:	1c 8b       	std	Y+20, r17	; 0x14
    2c08:	1d 8a       	std	Y+21, r1	; 0x15
    2c0a:	1e 8b       	std	Y+22, r17	; 0x16
    2c0c:	83 e0       	ldi	r24, 0x03	; 3
    2c0e:	e7 de       	rcall	.-562    	; 0x29de <_turn_off>
    2c10:	e1 2c       	mov	r14, r1
    2c12:	f1 2c       	mov	r15, r1
    2c14:	20 e0       	ldi	r18, 0x00	; 0
    2c16:	30 e0       	ldi	r19, 0x00	; 0
    2c18:	40 ec       	ldi	r20, 0xC0	; 192
    2c1a:	50 e0       	ldi	r21, 0x00	; 0
    2c1c:	6f e1       	ldi	r22, 0x1F	; 31
    2c1e:	73 e0       	ldi	r23, 0x03	; 3
    2c20:	87 e8       	ldi	r24, 0x87	; 135
    2c22:	95 e1       	ldi	r25, 0x15	; 21
    2c24:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <xTaskCreate>
    2c28:	df 91       	pop	r29
    2c2a:	cf 91       	pop	r28
    2c2c:	1f 91       	pop	r17
    2c2e:	0f 91       	pop	r16
    2c30:	ff 90       	pop	r15
    2c32:	ef 90       	pop	r14
    2c34:	08 95       	ret

00002c36 <serial_create>:
    2c36:	2f 92       	push	r2
    2c38:	3f 92       	push	r3
    2c3a:	4f 92       	push	r4
    2c3c:	5f 92       	push	r5
    2c3e:	6f 92       	push	r6
    2c40:	7f 92       	push	r7
    2c42:	8f 92       	push	r8
    2c44:	9f 92       	push	r9
    2c46:	af 92       	push	r10
    2c48:	cf 92       	push	r12
    2c4a:	ef 92       	push	r14
    2c4c:	ff 92       	push	r15
    2c4e:	0f 93       	push	r16
    2c50:	1f 93       	push	r17
    2c52:	cf 93       	push	r28
    2c54:	df 93       	push	r29
    2c56:	cd b7       	in	r28, 0x3d	; 61
    2c58:	de b7       	in	r29, 0x3e	; 62
    2c5a:	f8 2e       	mov	r15, r24
    2c5c:	2a 01       	movw	r4, r20
    2c5e:	3b 01       	movw	r6, r22
    2c60:	88 e0       	ldi	r24, 0x08	; 8
    2c62:	90 e0       	ldi	r25, 0x00	; 0
    2c64:	29 d5       	rcall	.+2642   	; 0x36b8 <malloc>
    2c66:	8c 01       	movw	r16, r24
    2c68:	8f 2d       	mov	r24, r15
    2c6a:	90 e0       	ldi	r25, 0x00	; 0
    2c6c:	fc 01       	movw	r30, r24
    2c6e:	ee 0f       	add	r30, r30
    2c70:	ff 1f       	adc	r31, r31
    2c72:	eb 51       	subi	r30, 0x1B	; 27
    2c74:	fe 4e       	sbci	r31, 0xEE	; 238
    2c76:	11 83       	std	Z+1, r17	; 0x01
    2c78:	00 83       	st	Z, r16
    2c7a:	01 15       	cp	r16, r1
    2c7c:	11 05       	cpc	r17, r1
    2c7e:	09 f4       	brne	.+2      	; 0x2c82 <serial_create+0x4c>
    2c80:	64 c0       	rjmp	.+200    	; 0x2d4a <serial_create+0x114>
    2c82:	88 0f       	add	r24, r24
    2c84:	99 1f       	adc	r25, r25
    2c86:	fc 01       	movw	r30, r24
    2c88:	eb 5e       	subi	r30, 0xEB	; 235
    2c8a:	fd 4f       	sbci	r31, 0xFD	; 253
    2c8c:	80 81       	ld	r24, Z
    2c8e:	91 81       	ldd	r25, Z+1	; 0x01
    2c90:	d8 01       	movw	r26, r16
    2c92:	8d 93       	st	X+, r24
    2c94:	9c 93       	st	X, r25
    2c96:	8c 2d       	mov	r24, r12
    2c98:	90 e0       	ldi	r25, 0x00	; 0
    2c9a:	88 0f       	add	r24, r24
    2c9c:	99 1f       	adc	r25, r25
    2c9e:	88 0f       	add	r24, r24
    2ca0:	99 1f       	adc	r25, r25
    2ca2:	0a d5       	rcall	.+2580   	; 0x36b8 <malloc>
    2ca4:	1c 01       	movw	r2, r24
    2ca6:	86 e0       	ldi	r24, 0x06	; 6
    2ca8:	90 e0       	ldi	r25, 0x00	; 0
    2caa:	06 d5       	rcall	.+2572   	; 0x36b8 <malloc>
    2cac:	7c 01       	movw	r14, r24
    2cae:	4c 2d       	mov	r20, r12
    2cb0:	b1 01       	movw	r22, r2
    2cb2:	00 d3       	rcall	.+1536   	; 0x32b4 <fifo_init>
    2cb4:	f8 01       	movw	r30, r16
    2cb6:	f5 82       	std	Z+5, r15	; 0x05
    2cb8:	e4 82       	std	Z+4, r14	; 0x04
    2cba:	8a 2d       	mov	r24, r10
    2cbc:	90 e0       	ldi	r25, 0x00	; 0
    2cbe:	88 0f       	add	r24, r24
    2cc0:	99 1f       	adc	r25, r25
    2cc2:	88 0f       	add	r24, r24
    2cc4:	99 1f       	adc	r25, r25
    2cc6:	f8 d4       	rcall	.+2544   	; 0x36b8 <malloc>
    2cc8:	1c 01       	movw	r2, r24
    2cca:	86 e0       	ldi	r24, 0x06	; 6
    2ccc:	90 e0       	ldi	r25, 0x00	; 0
    2cce:	f4 d4       	rcall	.+2536   	; 0x36b8 <malloc>
    2cd0:	7c 01       	movw	r14, r24
    2cd2:	4a 2d       	mov	r20, r10
    2cd4:	b1 01       	movw	r22, r2
    2cd6:	ee d2       	rcall	.+1500   	; 0x32b4 <fifo_init>
    2cd8:	d8 01       	movw	r26, r16
    2cda:	13 96       	adiw	r26, 0x03	; 3
    2cdc:	fc 92       	st	X, r15
    2cde:	ee 92       	st	-X, r14
    2ce0:	12 97       	sbiw	r26, 0x02	; 2
    2ce2:	17 96       	adiw	r26, 0x07	; 7
    2ce4:	9c 92       	st	X, r9
    2ce6:	8e 92       	st	-X, r8
    2ce8:	16 97       	sbiw	r26, 0x06	; 6
    2cea:	ff b6       	in	r15, 0x3f	; 63
    2cec:	f8 94       	cli
    2cee:	ed 91       	ld	r30, X+
    2cf0:	fc 91       	ld	r31, X
    2cf2:	11 97       	sbiw	r26, 0x01	; 1
    2cf4:	36 97       	sbiw	r30, 0x06	; 6
    2cf6:	80 81       	ld	r24, Z
    2cf8:	82 60       	ori	r24, 0x02	; 2
    2cfa:	80 83       	st	Z, r24
    2cfc:	8d 90       	ld	r8, X+
    2cfe:	9c 90       	ld	r9, X
    2d00:	c3 01       	movw	r24, r6
    2d02:	b2 01       	movw	r22, r4
    2d04:	c0 dd       	rcall	.-1152   	; 0x2886 <__floatunsisf>
    2d06:	20 e0       	ldi	r18, 0x00	; 0
    2d08:	30 e0       	ldi	r19, 0x00	; 0
    2d0a:	40 e0       	ldi	r20, 0x00	; 0
    2d0c:	51 e4       	ldi	r21, 0x41	; 65
    2d0e:	38 d4       	rcall	.+2160   	; 0x3580 <__mulsf3>
    2d10:	9b 01       	movw	r18, r22
    2d12:	ac 01       	movw	r20, r24
    2d14:	60 e0       	ldi	r22, 0x00	; 0
    2d16:	74 e2       	ldi	r23, 0x24	; 36
    2d18:	84 e7       	ldi	r24, 0x74	; 116
    2d1a:	9b e4       	ldi	r25, 0x4B	; 75
    2d1c:	4c d3       	rcall	.+1688   	; 0x33b6 <__divsf3>
    2d1e:	20 e0       	ldi	r18, 0x00	; 0
    2d20:	30 e0       	ldi	r19, 0x00	; 0
    2d22:	40 e8       	ldi	r20, 0x80	; 128
    2d24:	5f e3       	ldi	r21, 0x3F	; 63
    2d26:	e2 d2       	rcall	.+1476   	; 0x32ec <__subsf3>
    2d28:	ae d3       	rcall	.+1884   	; 0x3486 <__fixunssfsi>
    2d2a:	f4 01       	movw	r30, r8
    2d2c:	32 97       	sbiw	r30, 0x02	; 2
    2d2e:	60 83       	st	Z, r22
    2d30:	d8 01       	movw	r26, r16
    2d32:	ed 91       	ld	r30, X+
    2d34:	fc 91       	ld	r31, X
    2d36:	11 97       	sbiw	r26, 0x01	; 1
    2d38:	35 97       	sbiw	r30, 0x05	; 5
    2d3a:	88 e9       	ldi	r24, 0x98	; 152
    2d3c:	80 83       	st	Z, r24
    2d3e:	ed 91       	ld	r30, X+
    2d40:	fc 91       	ld	r31, X
    2d42:	34 97       	sbiw	r30, 0x04	; 4
    2d44:	86 e0       	ldi	r24, 0x06	; 6
    2d46:	80 83       	st	Z, r24
    2d48:	ff be       	out	0x3f, r15	; 63
    2d4a:	c8 01       	movw	r24, r16
    2d4c:	df 91       	pop	r29
    2d4e:	cf 91       	pop	r28
    2d50:	1f 91       	pop	r17
    2d52:	0f 91       	pop	r16
    2d54:	ff 90       	pop	r15
    2d56:	ef 90       	pop	r14
    2d58:	cf 90       	pop	r12
    2d5a:	af 90       	pop	r10
    2d5c:	9f 90       	pop	r9
    2d5e:	8f 90       	pop	r8
    2d60:	7f 90       	pop	r7
    2d62:	6f 90       	pop	r6
    2d64:	5f 90       	pop	r5
    2d66:	4f 90       	pop	r4
    2d68:	3f 90       	pop	r3
    2d6a:	2f 90       	pop	r2
    2d6c:	08 95       	ret

00002d6e <serial_sendByte>:
    2d6e:	cf 93       	push	r28
    2d70:	df 93       	push	r29
    2d72:	dc 01       	movw	r26, r24
    2d74:	89 2b       	or	r24, r25
    2d76:	01 f1       	breq	.+64     	; 0x2db8 <serial_sendByte+0x4a>
    2d78:	12 96       	adiw	r26, 0x02	; 2
    2d7a:	ed 91       	ld	r30, X+
    2d7c:	fc 91       	ld	r31, X
    2d7e:	13 97       	sbiw	r26, 0x03	; 3
    2d80:	93 81       	ldd	r25, Z+3	; 0x03
    2d82:	82 81       	ldd	r24, Z+2	; 0x02
    2d84:	25 81       	ldd	r18, Z+5	; 0x05
    2d86:	98 1b       	sub	r25, r24
    2d88:	92 23       	and	r25, r18
    2d8a:	84 81       	ldd	r24, Z+4	; 0x04
    2d8c:	98 17       	cp	r25, r24
    2d8e:	b1 f0       	breq	.+44     	; 0x2dbc <serial_sendByte+0x4e>
    2d90:	83 81       	ldd	r24, Z+3	; 0x03
    2d92:	26 95       	lsr	r18
    2d94:	28 23       	and	r18, r24
    2d96:	c0 81       	ld	r28, Z
    2d98:	d1 81       	ldd	r29, Z+1	; 0x01
    2d9a:	c2 0f       	add	r28, r18
    2d9c:	d1 1d       	adc	r29, r1
    2d9e:	68 83       	st	Y, r22
    2da0:	8f 5f       	subi	r24, 0xFF	; 255
    2da2:	95 81       	ldd	r25, Z+5	; 0x05
    2da4:	89 23       	and	r24, r25
    2da6:	83 83       	std	Z+3, r24	; 0x03
    2da8:	ed 91       	ld	r30, X+
    2daa:	fc 91       	ld	r31, X
    2dac:	35 97       	sbiw	r30, 0x05	; 5
    2dae:	80 81       	ld	r24, Z
    2db0:	80 62       	ori	r24, 0x20	; 32
    2db2:	80 83       	st	Z, r24
    2db4:	80 e0       	ldi	r24, 0x00	; 0
    2db6:	03 c0       	rjmp	.+6      	; 0x2dbe <serial_sendByte+0x50>
    2db8:	81 e0       	ldi	r24, 0x01	; 1
    2dba:	01 c0       	rjmp	.+2      	; 0x2dbe <serial_sendByte+0x50>
    2dbc:	82 e0       	ldi	r24, 0x02	; 2
    2dbe:	df 91       	pop	r29
    2dc0:	cf 91       	pop	r28
    2dc2:	08 95       	ret

00002dc4 <serial_getByte>:
    2dc4:	00 97       	sbiw	r24, 0x00	; 0
    2dc6:	d1 f0       	breq	.+52     	; 0x2dfc <serial_getByte+0x38>
    2dc8:	dc 01       	movw	r26, r24
    2dca:	14 96       	adiw	r26, 0x04	; 4
    2dcc:	ed 91       	ld	r30, X+
    2dce:	fc 91       	ld	r31, X
    2dd0:	15 97       	sbiw	r26, 0x05	; 5
    2dd2:	93 81       	ldd	r25, Z+3	; 0x03
    2dd4:	82 81       	ldd	r24, Z+2	; 0x02
    2dd6:	98 17       	cp	r25, r24
    2dd8:	99 f0       	breq	.+38     	; 0x2e00 <serial_getByte+0x3c>
    2dda:	92 81       	ldd	r25, Z+2	; 0x02
    2ddc:	85 81       	ldd	r24, Z+5	; 0x05
    2dde:	86 95       	lsr	r24
    2de0:	89 23       	and	r24, r25
    2de2:	a0 81       	ld	r26, Z
    2de4:	b1 81       	ldd	r27, Z+1	; 0x01
    2de6:	a8 0f       	add	r26, r24
    2de8:	b1 1d       	adc	r27, r1
    2dea:	8c 91       	ld	r24, X
    2dec:	db 01       	movw	r26, r22
    2dee:	8c 93       	st	X, r24
    2df0:	9f 5f       	subi	r25, 0xFF	; 255
    2df2:	85 81       	ldd	r24, Z+5	; 0x05
    2df4:	98 23       	and	r25, r24
    2df6:	92 83       	std	Z+2, r25	; 0x02
    2df8:	80 e0       	ldi	r24, 0x00	; 0
    2dfa:	08 95       	ret
    2dfc:	81 e0       	ldi	r24, 0x01	; 1
    2dfe:	08 95       	ret
    2e00:	83 e0       	ldi	r24, 0x03	; 3
    2e02:	08 95       	ret

00002e04 <__vector_25>:
    2e04:	1f 92       	push	r1
    2e06:	0f 92       	push	r0
    2e08:	0f b6       	in	r0, 0x3f	; 63
    2e0a:	0f 92       	push	r0
    2e0c:	11 24       	eor	r1, r1
    2e0e:	0b b6       	in	r0, 0x3b	; 59
    2e10:	0f 92       	push	r0
    2e12:	2f 93       	push	r18
    2e14:	3f 93       	push	r19
    2e16:	4f 93       	push	r20
    2e18:	5f 93       	push	r21
    2e1a:	6f 93       	push	r22
    2e1c:	7f 93       	push	r23
    2e1e:	8f 93       	push	r24
    2e20:	9f 93       	push	r25
    2e22:	af 93       	push	r26
    2e24:	bf 93       	push	r27
    2e26:	cf 93       	push	r28
    2e28:	df 93       	push	r29
    2e2a:	ef 93       	push	r30
    2e2c:	ff 93       	push	r31
    2e2e:	a0 91 e5 11 	lds	r26, 0x11E5	; 0x8011e5 <_ser_handle>
    2e32:	b0 91 e6 11 	lds	r27, 0x11E6	; 0x8011e6 <_ser_handle+0x1>
    2e36:	10 97       	sbiw	r26, 0x00	; 0
    2e38:	11 f1       	breq	.+68     	; 0x2e7e <__vector_25+0x7a>
    2e3a:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    2e3e:	14 96       	adiw	r26, 0x04	; 4
    2e40:	ed 91       	ld	r30, X+
    2e42:	fc 91       	ld	r31, X
    2e44:	15 97       	sbiw	r26, 0x05	; 5
    2e46:	93 81       	ldd	r25, Z+3	; 0x03
    2e48:	82 81       	ldd	r24, Z+2	; 0x02
    2e4a:	25 81       	ldd	r18, Z+5	; 0x05
    2e4c:	98 1b       	sub	r25, r24
    2e4e:	92 23       	and	r25, r18
    2e50:	84 81       	ldd	r24, Z+4	; 0x04
    2e52:	98 17       	cp	r25, r24
    2e54:	61 f0       	breq	.+24     	; 0x2e6e <__vector_25+0x6a>
    2e56:	83 81       	ldd	r24, Z+3	; 0x03
    2e58:	26 95       	lsr	r18
    2e5a:	28 23       	and	r18, r24
    2e5c:	c0 81       	ld	r28, Z
    2e5e:	d1 81       	ldd	r29, Z+1	; 0x01
    2e60:	c2 0f       	add	r28, r18
    2e62:	d1 1d       	adc	r29, r1
    2e64:	68 83       	st	Y, r22
    2e66:	8f 5f       	subi	r24, 0xFF	; 255
    2e68:	95 81       	ldd	r25, Z+5	; 0x05
    2e6a:	89 23       	and	r24, r25
    2e6c:	83 83       	std	Z+3, r24	; 0x03
    2e6e:	16 96       	adiw	r26, 0x06	; 6
    2e70:	ed 91       	ld	r30, X+
    2e72:	fc 91       	ld	r31, X
    2e74:	17 97       	sbiw	r26, 0x07	; 7
    2e76:	30 97       	sbiw	r30, 0x00	; 0
    2e78:	11 f0       	breq	.+4      	; 0x2e7e <__vector_25+0x7a>
    2e7a:	cd 01       	movw	r24, r26
    2e7c:	19 95       	eicall
    2e7e:	ff 91       	pop	r31
    2e80:	ef 91       	pop	r30
    2e82:	df 91       	pop	r29
    2e84:	cf 91       	pop	r28
    2e86:	bf 91       	pop	r27
    2e88:	af 91       	pop	r26
    2e8a:	9f 91       	pop	r25
    2e8c:	8f 91       	pop	r24
    2e8e:	7f 91       	pop	r23
    2e90:	6f 91       	pop	r22
    2e92:	5f 91       	pop	r21
    2e94:	4f 91       	pop	r20
    2e96:	3f 91       	pop	r19
    2e98:	2f 91       	pop	r18
    2e9a:	0f 90       	pop	r0
    2e9c:	0b be       	out	0x3b, r0	; 59
    2e9e:	0f 90       	pop	r0
    2ea0:	0f be       	out	0x3f, r0	; 63
    2ea2:	0f 90       	pop	r0
    2ea4:	1f 90       	pop	r1
    2ea6:	18 95       	reti

00002ea8 <__vector_26>:
    2ea8:	1f 92       	push	r1
    2eaa:	0f 92       	push	r0
    2eac:	0f b6       	in	r0, 0x3f	; 63
    2eae:	0f 92       	push	r0
    2eb0:	11 24       	eor	r1, r1
    2eb2:	0b b6       	in	r0, 0x3b	; 59
    2eb4:	0f 92       	push	r0
    2eb6:	2f 93       	push	r18
    2eb8:	8f 93       	push	r24
    2eba:	9f 93       	push	r25
    2ebc:	af 93       	push	r26
    2ebe:	bf 93       	push	r27
    2ec0:	ef 93       	push	r30
    2ec2:	ff 93       	push	r31
    2ec4:	e0 91 e5 11 	lds	r30, 0x11E5	; 0x8011e5 <_ser_handle>
    2ec8:	f0 91 e6 11 	lds	r31, 0x11E6	; 0x8011e6 <_ser_handle+0x1>
    2ecc:	30 97       	sbiw	r30, 0x00	; 0
    2ece:	b9 f0       	breq	.+46     	; 0x2efe <__vector_26+0x56>
    2ed0:	02 80       	ldd	r0, Z+2	; 0x02
    2ed2:	f3 81       	ldd	r31, Z+3	; 0x03
    2ed4:	e0 2d       	mov	r30, r0
    2ed6:	93 81       	ldd	r25, Z+3	; 0x03
    2ed8:	82 81       	ldd	r24, Z+2	; 0x02
    2eda:	98 17       	cp	r25, r24
    2edc:	b1 f0       	breq	.+44     	; 0x2f0a <__vector_26+0x62>
    2ede:	92 81       	ldd	r25, Z+2	; 0x02
    2ee0:	85 81       	ldd	r24, Z+5	; 0x05
    2ee2:	28 2f       	mov	r18, r24
    2ee4:	26 95       	lsr	r18
    2ee6:	29 23       	and	r18, r25
    2ee8:	a0 81       	ld	r26, Z
    2eea:	b1 81       	ldd	r27, Z+1	; 0x01
    2eec:	a2 0f       	add	r26, r18
    2eee:	b1 1d       	adc	r27, r1
    2ef0:	2c 91       	ld	r18, X
    2ef2:	9f 5f       	subi	r25, 0xFF	; 255
    2ef4:	89 23       	and	r24, r25
    2ef6:	82 83       	std	Z+2, r24	; 0x02
    2ef8:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    2efc:	0b c0       	rjmp	.+22     	; 0x2f14 <__vector_26+0x6c>
    2efe:	e1 ec       	ldi	r30, 0xC1	; 193
    2f00:	f0 e0       	ldi	r31, 0x00	; 0
    2f02:	80 81       	ld	r24, Z
    2f04:	8f 7d       	andi	r24, 0xDF	; 223
    2f06:	80 83       	st	Z, r24
    2f08:	05 c0       	rjmp	.+10     	; 0x2f14 <__vector_26+0x6c>
    2f0a:	e1 ec       	ldi	r30, 0xC1	; 193
    2f0c:	f0 e0       	ldi	r31, 0x00	; 0
    2f0e:	80 81       	ld	r24, Z
    2f10:	8f 7d       	andi	r24, 0xDF	; 223
    2f12:	80 83       	st	Z, r24
    2f14:	ff 91       	pop	r31
    2f16:	ef 91       	pop	r30
    2f18:	bf 91       	pop	r27
    2f1a:	af 91       	pop	r26
    2f1c:	9f 91       	pop	r25
    2f1e:	8f 91       	pop	r24
    2f20:	2f 91       	pop	r18
    2f22:	0f 90       	pop	r0
    2f24:	0b be       	out	0x3b, r0	; 59
    2f26:	0f 90       	pop	r0
    2f28:	0f be       	out	0x3f, r0	; 63
    2f2a:	0f 90       	pop	r0
    2f2c:	1f 90       	pop	r1
    2f2e:	18 95       	reti

00002f30 <__vector_36>:
    2f30:	1f 92       	push	r1
    2f32:	0f 92       	push	r0
    2f34:	0f b6       	in	r0, 0x3f	; 63
    2f36:	0f 92       	push	r0
    2f38:	11 24       	eor	r1, r1
    2f3a:	0b b6       	in	r0, 0x3b	; 59
    2f3c:	0f 92       	push	r0
    2f3e:	2f 93       	push	r18
    2f40:	3f 93       	push	r19
    2f42:	4f 93       	push	r20
    2f44:	5f 93       	push	r21
    2f46:	6f 93       	push	r22
    2f48:	7f 93       	push	r23
    2f4a:	8f 93       	push	r24
    2f4c:	9f 93       	push	r25
    2f4e:	af 93       	push	r26
    2f50:	bf 93       	push	r27
    2f52:	cf 93       	push	r28
    2f54:	df 93       	push	r29
    2f56:	ef 93       	push	r30
    2f58:	ff 93       	push	r31
    2f5a:	a0 91 e7 11 	lds	r26, 0x11E7	; 0x8011e7 <_ser_handle+0x2>
    2f5e:	b0 91 e8 11 	lds	r27, 0x11E8	; 0x8011e8 <_ser_handle+0x3>
    2f62:	10 97       	sbiw	r26, 0x00	; 0
    2f64:	11 f1       	breq	.+68     	; 0x2faa <__vector_36+0x7a>
    2f66:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    2f6a:	14 96       	adiw	r26, 0x04	; 4
    2f6c:	ed 91       	ld	r30, X+
    2f6e:	fc 91       	ld	r31, X
    2f70:	15 97       	sbiw	r26, 0x05	; 5
    2f72:	93 81       	ldd	r25, Z+3	; 0x03
    2f74:	82 81       	ldd	r24, Z+2	; 0x02
    2f76:	25 81       	ldd	r18, Z+5	; 0x05
    2f78:	98 1b       	sub	r25, r24
    2f7a:	92 23       	and	r25, r18
    2f7c:	84 81       	ldd	r24, Z+4	; 0x04
    2f7e:	98 17       	cp	r25, r24
    2f80:	61 f0       	breq	.+24     	; 0x2f9a <__vector_36+0x6a>
    2f82:	83 81       	ldd	r24, Z+3	; 0x03
    2f84:	26 95       	lsr	r18
    2f86:	28 23       	and	r18, r24
    2f88:	c0 81       	ld	r28, Z
    2f8a:	d1 81       	ldd	r29, Z+1	; 0x01
    2f8c:	c2 0f       	add	r28, r18
    2f8e:	d1 1d       	adc	r29, r1
    2f90:	68 83       	st	Y, r22
    2f92:	8f 5f       	subi	r24, 0xFF	; 255
    2f94:	95 81       	ldd	r25, Z+5	; 0x05
    2f96:	89 23       	and	r24, r25
    2f98:	83 83       	std	Z+3, r24	; 0x03
    2f9a:	16 96       	adiw	r26, 0x06	; 6
    2f9c:	ed 91       	ld	r30, X+
    2f9e:	fc 91       	ld	r31, X
    2fa0:	17 97       	sbiw	r26, 0x07	; 7
    2fa2:	30 97       	sbiw	r30, 0x00	; 0
    2fa4:	11 f0       	breq	.+4      	; 0x2faa <__vector_36+0x7a>
    2fa6:	cd 01       	movw	r24, r26
    2fa8:	19 95       	eicall
    2faa:	ff 91       	pop	r31
    2fac:	ef 91       	pop	r30
    2fae:	df 91       	pop	r29
    2fb0:	cf 91       	pop	r28
    2fb2:	bf 91       	pop	r27
    2fb4:	af 91       	pop	r26
    2fb6:	9f 91       	pop	r25
    2fb8:	8f 91       	pop	r24
    2fba:	7f 91       	pop	r23
    2fbc:	6f 91       	pop	r22
    2fbe:	5f 91       	pop	r21
    2fc0:	4f 91       	pop	r20
    2fc2:	3f 91       	pop	r19
    2fc4:	2f 91       	pop	r18
    2fc6:	0f 90       	pop	r0
    2fc8:	0b be       	out	0x3b, r0	; 59
    2fca:	0f 90       	pop	r0
    2fcc:	0f be       	out	0x3f, r0	; 63
    2fce:	0f 90       	pop	r0
    2fd0:	1f 90       	pop	r1
    2fd2:	18 95       	reti

00002fd4 <__vector_37>:
    2fd4:	1f 92       	push	r1
    2fd6:	0f 92       	push	r0
    2fd8:	0f b6       	in	r0, 0x3f	; 63
    2fda:	0f 92       	push	r0
    2fdc:	11 24       	eor	r1, r1
    2fde:	0b b6       	in	r0, 0x3b	; 59
    2fe0:	0f 92       	push	r0
    2fe2:	2f 93       	push	r18
    2fe4:	8f 93       	push	r24
    2fe6:	9f 93       	push	r25
    2fe8:	af 93       	push	r26
    2fea:	bf 93       	push	r27
    2fec:	ef 93       	push	r30
    2fee:	ff 93       	push	r31
    2ff0:	e0 91 e7 11 	lds	r30, 0x11E7	; 0x8011e7 <_ser_handle+0x2>
    2ff4:	f0 91 e8 11 	lds	r31, 0x11E8	; 0x8011e8 <_ser_handle+0x3>
    2ff8:	30 97       	sbiw	r30, 0x00	; 0
    2ffa:	b9 f0       	breq	.+46     	; 0x302a <__vector_37+0x56>
    2ffc:	02 80       	ldd	r0, Z+2	; 0x02
    2ffe:	f3 81       	ldd	r31, Z+3	; 0x03
    3000:	e0 2d       	mov	r30, r0
    3002:	93 81       	ldd	r25, Z+3	; 0x03
    3004:	82 81       	ldd	r24, Z+2	; 0x02
    3006:	98 17       	cp	r25, r24
    3008:	b1 f0       	breq	.+44     	; 0x3036 <__vector_37+0x62>
    300a:	92 81       	ldd	r25, Z+2	; 0x02
    300c:	85 81       	ldd	r24, Z+5	; 0x05
    300e:	28 2f       	mov	r18, r24
    3010:	26 95       	lsr	r18
    3012:	29 23       	and	r18, r25
    3014:	a0 81       	ld	r26, Z
    3016:	b1 81       	ldd	r27, Z+1	; 0x01
    3018:	a2 0f       	add	r26, r18
    301a:	b1 1d       	adc	r27, r1
    301c:	2c 91       	ld	r18, X
    301e:	9f 5f       	subi	r25, 0xFF	; 255
    3020:	89 23       	and	r24, r25
    3022:	82 83       	std	Z+2, r24	; 0x02
    3024:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    3028:	0b c0       	rjmp	.+22     	; 0x3040 <__vector_37+0x6c>
    302a:	e9 ec       	ldi	r30, 0xC9	; 201
    302c:	f0 e0       	ldi	r31, 0x00	; 0
    302e:	80 81       	ld	r24, Z
    3030:	8f 7d       	andi	r24, 0xDF	; 223
    3032:	80 83       	st	Z, r24
    3034:	05 c0       	rjmp	.+10     	; 0x3040 <__vector_37+0x6c>
    3036:	e9 ec       	ldi	r30, 0xC9	; 201
    3038:	f0 e0       	ldi	r31, 0x00	; 0
    303a:	80 81       	ld	r24, Z
    303c:	8f 7d       	andi	r24, 0xDF	; 223
    303e:	80 83       	st	Z, r24
    3040:	ff 91       	pop	r31
    3042:	ef 91       	pop	r30
    3044:	bf 91       	pop	r27
    3046:	af 91       	pop	r26
    3048:	9f 91       	pop	r25
    304a:	8f 91       	pop	r24
    304c:	2f 91       	pop	r18
    304e:	0f 90       	pop	r0
    3050:	0b be       	out	0x3b, r0	; 59
    3052:	0f 90       	pop	r0
    3054:	0f be       	out	0x3f, r0	; 63
    3056:	0f 90       	pop	r0
    3058:	1f 90       	pop	r1
    305a:	18 95       	reti

0000305c <__vector_51>:
    305c:	1f 92       	push	r1
    305e:	0f 92       	push	r0
    3060:	0f b6       	in	r0, 0x3f	; 63
    3062:	0f 92       	push	r0
    3064:	11 24       	eor	r1, r1
    3066:	0b b6       	in	r0, 0x3b	; 59
    3068:	0f 92       	push	r0
    306a:	2f 93       	push	r18
    306c:	3f 93       	push	r19
    306e:	4f 93       	push	r20
    3070:	5f 93       	push	r21
    3072:	6f 93       	push	r22
    3074:	7f 93       	push	r23
    3076:	8f 93       	push	r24
    3078:	9f 93       	push	r25
    307a:	af 93       	push	r26
    307c:	bf 93       	push	r27
    307e:	cf 93       	push	r28
    3080:	df 93       	push	r29
    3082:	ef 93       	push	r30
    3084:	ff 93       	push	r31
    3086:	a0 91 e9 11 	lds	r26, 0x11E9	; 0x8011e9 <_ser_handle+0x4>
    308a:	b0 91 ea 11 	lds	r27, 0x11EA	; 0x8011ea <_ser_handle+0x5>
    308e:	10 97       	sbiw	r26, 0x00	; 0
    3090:	11 f1       	breq	.+68     	; 0x30d6 <__vector_51+0x7a>
    3092:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    3096:	14 96       	adiw	r26, 0x04	; 4
    3098:	ed 91       	ld	r30, X+
    309a:	fc 91       	ld	r31, X
    309c:	15 97       	sbiw	r26, 0x05	; 5
    309e:	93 81       	ldd	r25, Z+3	; 0x03
    30a0:	82 81       	ldd	r24, Z+2	; 0x02
    30a2:	25 81       	ldd	r18, Z+5	; 0x05
    30a4:	98 1b       	sub	r25, r24
    30a6:	92 23       	and	r25, r18
    30a8:	84 81       	ldd	r24, Z+4	; 0x04
    30aa:	98 17       	cp	r25, r24
    30ac:	61 f0       	breq	.+24     	; 0x30c6 <__vector_51+0x6a>
    30ae:	83 81       	ldd	r24, Z+3	; 0x03
    30b0:	26 95       	lsr	r18
    30b2:	28 23       	and	r18, r24
    30b4:	c0 81       	ld	r28, Z
    30b6:	d1 81       	ldd	r29, Z+1	; 0x01
    30b8:	c2 0f       	add	r28, r18
    30ba:	d1 1d       	adc	r29, r1
    30bc:	68 83       	st	Y, r22
    30be:	8f 5f       	subi	r24, 0xFF	; 255
    30c0:	95 81       	ldd	r25, Z+5	; 0x05
    30c2:	89 23       	and	r24, r25
    30c4:	83 83       	std	Z+3, r24	; 0x03
    30c6:	16 96       	adiw	r26, 0x06	; 6
    30c8:	ed 91       	ld	r30, X+
    30ca:	fc 91       	ld	r31, X
    30cc:	17 97       	sbiw	r26, 0x07	; 7
    30ce:	30 97       	sbiw	r30, 0x00	; 0
    30d0:	11 f0       	breq	.+4      	; 0x30d6 <__vector_51+0x7a>
    30d2:	cd 01       	movw	r24, r26
    30d4:	19 95       	eicall
    30d6:	ff 91       	pop	r31
    30d8:	ef 91       	pop	r30
    30da:	df 91       	pop	r29
    30dc:	cf 91       	pop	r28
    30de:	bf 91       	pop	r27
    30e0:	af 91       	pop	r26
    30e2:	9f 91       	pop	r25
    30e4:	8f 91       	pop	r24
    30e6:	7f 91       	pop	r23
    30e8:	6f 91       	pop	r22
    30ea:	5f 91       	pop	r21
    30ec:	4f 91       	pop	r20
    30ee:	3f 91       	pop	r19
    30f0:	2f 91       	pop	r18
    30f2:	0f 90       	pop	r0
    30f4:	0b be       	out	0x3b, r0	; 59
    30f6:	0f 90       	pop	r0
    30f8:	0f be       	out	0x3f, r0	; 63
    30fa:	0f 90       	pop	r0
    30fc:	1f 90       	pop	r1
    30fe:	18 95       	reti

00003100 <__vector_52>:
    3100:	1f 92       	push	r1
    3102:	0f 92       	push	r0
    3104:	0f b6       	in	r0, 0x3f	; 63
    3106:	0f 92       	push	r0
    3108:	11 24       	eor	r1, r1
    310a:	0b b6       	in	r0, 0x3b	; 59
    310c:	0f 92       	push	r0
    310e:	2f 93       	push	r18
    3110:	8f 93       	push	r24
    3112:	9f 93       	push	r25
    3114:	af 93       	push	r26
    3116:	bf 93       	push	r27
    3118:	ef 93       	push	r30
    311a:	ff 93       	push	r31
    311c:	e0 91 e9 11 	lds	r30, 0x11E9	; 0x8011e9 <_ser_handle+0x4>
    3120:	f0 91 ea 11 	lds	r31, 0x11EA	; 0x8011ea <_ser_handle+0x5>
    3124:	30 97       	sbiw	r30, 0x00	; 0
    3126:	b9 f0       	breq	.+46     	; 0x3156 <__vector_52+0x56>
    3128:	02 80       	ldd	r0, Z+2	; 0x02
    312a:	f3 81       	ldd	r31, Z+3	; 0x03
    312c:	e0 2d       	mov	r30, r0
    312e:	93 81       	ldd	r25, Z+3	; 0x03
    3130:	82 81       	ldd	r24, Z+2	; 0x02
    3132:	98 17       	cp	r25, r24
    3134:	b1 f0       	breq	.+44     	; 0x3162 <__vector_52+0x62>
    3136:	92 81       	ldd	r25, Z+2	; 0x02
    3138:	85 81       	ldd	r24, Z+5	; 0x05
    313a:	28 2f       	mov	r18, r24
    313c:	26 95       	lsr	r18
    313e:	29 23       	and	r18, r25
    3140:	a0 81       	ld	r26, Z
    3142:	b1 81       	ldd	r27, Z+1	; 0x01
    3144:	a2 0f       	add	r26, r18
    3146:	b1 1d       	adc	r27, r1
    3148:	2c 91       	ld	r18, X
    314a:	9f 5f       	subi	r25, 0xFF	; 255
    314c:	89 23       	and	r24, r25
    314e:	82 83       	std	Z+2, r24	; 0x02
    3150:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    3154:	0b c0       	rjmp	.+22     	; 0x316c <__vector_52+0x6c>
    3156:	e1 ed       	ldi	r30, 0xD1	; 209
    3158:	f0 e0       	ldi	r31, 0x00	; 0
    315a:	80 81       	ld	r24, Z
    315c:	8f 7d       	andi	r24, 0xDF	; 223
    315e:	80 83       	st	Z, r24
    3160:	05 c0       	rjmp	.+10     	; 0x316c <__vector_52+0x6c>
    3162:	e1 ed       	ldi	r30, 0xD1	; 209
    3164:	f0 e0       	ldi	r31, 0x00	; 0
    3166:	80 81       	ld	r24, Z
    3168:	8f 7d       	andi	r24, 0xDF	; 223
    316a:	80 83       	st	Z, r24
    316c:	ff 91       	pop	r31
    316e:	ef 91       	pop	r30
    3170:	bf 91       	pop	r27
    3172:	af 91       	pop	r26
    3174:	9f 91       	pop	r25
    3176:	8f 91       	pop	r24
    3178:	2f 91       	pop	r18
    317a:	0f 90       	pop	r0
    317c:	0b be       	out	0x3b, r0	; 59
    317e:	0f 90       	pop	r0
    3180:	0f be       	out	0x3f, r0	; 63
    3182:	0f 90       	pop	r0
    3184:	1f 90       	pop	r1
    3186:	18 95       	reti

00003188 <__vector_54>:
    3188:	1f 92       	push	r1
    318a:	0f 92       	push	r0
    318c:	0f b6       	in	r0, 0x3f	; 63
    318e:	0f 92       	push	r0
    3190:	11 24       	eor	r1, r1
    3192:	0b b6       	in	r0, 0x3b	; 59
    3194:	0f 92       	push	r0
    3196:	2f 93       	push	r18
    3198:	3f 93       	push	r19
    319a:	4f 93       	push	r20
    319c:	5f 93       	push	r21
    319e:	6f 93       	push	r22
    31a0:	7f 93       	push	r23
    31a2:	8f 93       	push	r24
    31a4:	9f 93       	push	r25
    31a6:	af 93       	push	r26
    31a8:	bf 93       	push	r27
    31aa:	cf 93       	push	r28
    31ac:	df 93       	push	r29
    31ae:	ef 93       	push	r30
    31b0:	ff 93       	push	r31
    31b2:	a0 91 eb 11 	lds	r26, 0x11EB	; 0x8011eb <_ser_handle+0x6>
    31b6:	b0 91 ec 11 	lds	r27, 0x11EC	; 0x8011ec <_ser_handle+0x7>
    31ba:	10 97       	sbiw	r26, 0x00	; 0
    31bc:	11 f1       	breq	.+68     	; 0x3202 <__vector_54+0x7a>
    31be:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    31c2:	14 96       	adiw	r26, 0x04	; 4
    31c4:	ed 91       	ld	r30, X+
    31c6:	fc 91       	ld	r31, X
    31c8:	15 97       	sbiw	r26, 0x05	; 5
    31ca:	93 81       	ldd	r25, Z+3	; 0x03
    31cc:	82 81       	ldd	r24, Z+2	; 0x02
    31ce:	25 81       	ldd	r18, Z+5	; 0x05
    31d0:	98 1b       	sub	r25, r24
    31d2:	92 23       	and	r25, r18
    31d4:	84 81       	ldd	r24, Z+4	; 0x04
    31d6:	98 17       	cp	r25, r24
    31d8:	61 f0       	breq	.+24     	; 0x31f2 <__vector_54+0x6a>
    31da:	83 81       	ldd	r24, Z+3	; 0x03
    31dc:	26 95       	lsr	r18
    31de:	28 23       	and	r18, r24
    31e0:	c0 81       	ld	r28, Z
    31e2:	d1 81       	ldd	r29, Z+1	; 0x01
    31e4:	c2 0f       	add	r28, r18
    31e6:	d1 1d       	adc	r29, r1
    31e8:	68 83       	st	Y, r22
    31ea:	8f 5f       	subi	r24, 0xFF	; 255
    31ec:	95 81       	ldd	r25, Z+5	; 0x05
    31ee:	89 23       	and	r24, r25
    31f0:	83 83       	std	Z+3, r24	; 0x03
    31f2:	16 96       	adiw	r26, 0x06	; 6
    31f4:	ed 91       	ld	r30, X+
    31f6:	fc 91       	ld	r31, X
    31f8:	17 97       	sbiw	r26, 0x07	; 7
    31fa:	30 97       	sbiw	r30, 0x00	; 0
    31fc:	11 f0       	breq	.+4      	; 0x3202 <__vector_54+0x7a>
    31fe:	cd 01       	movw	r24, r26
    3200:	19 95       	eicall
    3202:	ff 91       	pop	r31
    3204:	ef 91       	pop	r30
    3206:	df 91       	pop	r29
    3208:	cf 91       	pop	r28
    320a:	bf 91       	pop	r27
    320c:	af 91       	pop	r26
    320e:	9f 91       	pop	r25
    3210:	8f 91       	pop	r24
    3212:	7f 91       	pop	r23
    3214:	6f 91       	pop	r22
    3216:	5f 91       	pop	r21
    3218:	4f 91       	pop	r20
    321a:	3f 91       	pop	r19
    321c:	2f 91       	pop	r18
    321e:	0f 90       	pop	r0
    3220:	0b be       	out	0x3b, r0	; 59
    3222:	0f 90       	pop	r0
    3224:	0f be       	out	0x3f, r0	; 63
    3226:	0f 90       	pop	r0
    3228:	1f 90       	pop	r1
    322a:	18 95       	reti

0000322c <__vector_55>:
    322c:	1f 92       	push	r1
    322e:	0f 92       	push	r0
    3230:	0f b6       	in	r0, 0x3f	; 63
    3232:	0f 92       	push	r0
    3234:	11 24       	eor	r1, r1
    3236:	0b b6       	in	r0, 0x3b	; 59
    3238:	0f 92       	push	r0
    323a:	2f 93       	push	r18
    323c:	8f 93       	push	r24
    323e:	9f 93       	push	r25
    3240:	af 93       	push	r26
    3242:	bf 93       	push	r27
    3244:	ef 93       	push	r30
    3246:	ff 93       	push	r31
    3248:	e0 91 eb 11 	lds	r30, 0x11EB	; 0x8011eb <_ser_handle+0x6>
    324c:	f0 91 ec 11 	lds	r31, 0x11EC	; 0x8011ec <_ser_handle+0x7>
    3250:	30 97       	sbiw	r30, 0x00	; 0
    3252:	b9 f0       	breq	.+46     	; 0x3282 <__vector_55+0x56>
    3254:	02 80       	ldd	r0, Z+2	; 0x02
    3256:	f3 81       	ldd	r31, Z+3	; 0x03
    3258:	e0 2d       	mov	r30, r0
    325a:	93 81       	ldd	r25, Z+3	; 0x03
    325c:	82 81       	ldd	r24, Z+2	; 0x02
    325e:	98 17       	cp	r25, r24
    3260:	b1 f0       	breq	.+44     	; 0x328e <__vector_55+0x62>
    3262:	92 81       	ldd	r25, Z+2	; 0x02
    3264:	85 81       	ldd	r24, Z+5	; 0x05
    3266:	28 2f       	mov	r18, r24
    3268:	26 95       	lsr	r18
    326a:	29 23       	and	r18, r25
    326c:	a0 81       	ld	r26, Z
    326e:	b1 81       	ldd	r27, Z+1	; 0x01
    3270:	a2 0f       	add	r26, r18
    3272:	b1 1d       	adc	r27, r1
    3274:	2c 91       	ld	r18, X
    3276:	9f 5f       	subi	r25, 0xFF	; 255
    3278:	89 23       	and	r24, r25
    327a:	82 83       	std	Z+2, r24	; 0x02
    327c:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    3280:	0b c0       	rjmp	.+22     	; 0x3298 <__vector_55+0x6c>
    3282:	e1 e3       	ldi	r30, 0x31	; 49
    3284:	f1 e0       	ldi	r31, 0x01	; 1
    3286:	80 81       	ld	r24, Z
    3288:	8f 7d       	andi	r24, 0xDF	; 223
    328a:	80 83       	st	Z, r24
    328c:	05 c0       	rjmp	.+10     	; 0x3298 <__vector_55+0x6c>
    328e:	e1 e3       	ldi	r30, 0x31	; 49
    3290:	f1 e0       	ldi	r31, 0x01	; 1
    3292:	80 81       	ld	r24, Z
    3294:	8f 7d       	andi	r24, 0xDF	; 223
    3296:	80 83       	st	Z, r24
    3298:	ff 91       	pop	r31
    329a:	ef 91       	pop	r30
    329c:	bf 91       	pop	r27
    329e:	af 91       	pop	r26
    32a0:	9f 91       	pop	r25
    32a2:	8f 91       	pop	r24
    32a4:	2f 91       	pop	r18
    32a6:	0f 90       	pop	r0
    32a8:	0b be       	out	0x3b, r0	; 59
    32aa:	0f 90       	pop	r0
    32ac:	0f be       	out	0x3f, r0	; 63
    32ae:	0f 90       	pop	r0
    32b0:	1f 90       	pop	r1
    32b2:	18 95       	reti

000032b4 <fifo_init>:
    32b4:	fc 01       	movw	r30, r24
    32b6:	41 11       	cpse	r20, r1
    32b8:	01 c0       	rjmp	.+2      	; 0x32bc <fifo_init+0x8>
    32ba:	1f d3       	rcall	.+1598   	; 0x38fa <abort>
    32bc:	84 2f       	mov	r24, r20
    32be:	90 e0       	ldi	r25, 0x00	; 0
    32c0:	9c 01       	movw	r18, r24
    32c2:	21 50       	subi	r18, 0x01	; 1
    32c4:	31 09       	sbc	r19, r1
    32c6:	82 23       	and	r24, r18
    32c8:	93 23       	and	r25, r19
    32ca:	89 2b       	or	r24, r25
    32cc:	09 f0       	breq	.+2      	; 0x32d0 <fifo_init+0x1c>
    32ce:	15 d3       	rcall	.+1578   	; 0x38fa <abort>
    32d0:	41 38       	cpi	r20, 0x81	; 129
    32d2:	08 f0       	brcs	.+2      	; 0x32d6 <fifo_init+0x22>
    32d4:	12 d3       	rcall	.+1572   	; 0x38fa <abort>
    32d6:	12 82       	std	Z+2, r1	; 0x02
    32d8:	13 82       	std	Z+3, r1	; 0x03
    32da:	44 83       	std	Z+4, r20	; 0x04
    32dc:	44 0f       	add	r20, r20
    32de:	41 50       	subi	r20, 0x01	; 1
    32e0:	45 83       	std	Z+5, r20	; 0x05
    32e2:	71 83       	std	Z+1, r23	; 0x01
    32e4:	60 83       	st	Z, r22
    32e6:	80 e0       	ldi	r24, 0x00	; 0
    32e8:	90 e0       	ldi	r25, 0x00	; 0
    32ea:	08 95       	ret

000032ec <__subsf3>:
    32ec:	50 58       	subi	r21, 0x80	; 128

000032ee <__addsf3>:
    32ee:	bb 27       	eor	r27, r27
    32f0:	aa 27       	eor	r26, r26
    32f2:	0e d0       	rcall	.+28     	; 0x3310 <__addsf3x>
    32f4:	0b c1       	rjmp	.+534    	; 0x350c <__fp_round>
    32f6:	fc d0       	rcall	.+504    	; 0x34f0 <__fp_pscA>
    32f8:	30 f0       	brcs	.+12     	; 0x3306 <__addsf3+0x18>
    32fa:	01 d1       	rcall	.+514    	; 0x34fe <__fp_pscB>
    32fc:	20 f0       	brcs	.+8      	; 0x3306 <__addsf3+0x18>
    32fe:	31 f4       	brne	.+12     	; 0x330c <__addsf3+0x1e>
    3300:	9f 3f       	cpi	r25, 0xFF	; 255
    3302:	11 f4       	brne	.+4      	; 0x3308 <__addsf3+0x1a>
    3304:	1e f4       	brtc	.+6      	; 0x330c <__addsf3+0x1e>
    3306:	f1 c0       	rjmp	.+482    	; 0x34ea <__fp_nan>
    3308:	0e f4       	brtc	.+2      	; 0x330c <__addsf3+0x1e>
    330a:	e0 95       	com	r30
    330c:	e7 fb       	bst	r30, 7
    330e:	e7 c0       	rjmp	.+462    	; 0x34de <__fp_inf>

00003310 <__addsf3x>:
    3310:	e9 2f       	mov	r30, r25
    3312:	0d d1       	rcall	.+538    	; 0x352e <__fp_split3>
    3314:	80 f3       	brcs	.-32     	; 0x32f6 <__addsf3+0x8>
    3316:	ba 17       	cp	r27, r26
    3318:	62 07       	cpc	r22, r18
    331a:	73 07       	cpc	r23, r19
    331c:	84 07       	cpc	r24, r20
    331e:	95 07       	cpc	r25, r21
    3320:	18 f0       	brcs	.+6      	; 0x3328 <__addsf3x+0x18>
    3322:	71 f4       	brne	.+28     	; 0x3340 <__addsf3x+0x30>
    3324:	9e f5       	brtc	.+102    	; 0x338c <__addsf3x+0x7c>
    3326:	25 c1       	rjmp	.+586    	; 0x3572 <__fp_zero>
    3328:	0e f4       	brtc	.+2      	; 0x332c <__addsf3x+0x1c>
    332a:	e0 95       	com	r30
    332c:	0b 2e       	mov	r0, r27
    332e:	ba 2f       	mov	r27, r26
    3330:	a0 2d       	mov	r26, r0
    3332:	0b 01       	movw	r0, r22
    3334:	b9 01       	movw	r22, r18
    3336:	90 01       	movw	r18, r0
    3338:	0c 01       	movw	r0, r24
    333a:	ca 01       	movw	r24, r20
    333c:	a0 01       	movw	r20, r0
    333e:	11 24       	eor	r1, r1
    3340:	ff 27       	eor	r31, r31
    3342:	59 1b       	sub	r21, r25
    3344:	99 f0       	breq	.+38     	; 0x336c <__addsf3x+0x5c>
    3346:	59 3f       	cpi	r21, 0xF9	; 249
    3348:	50 f4       	brcc	.+20     	; 0x335e <__addsf3x+0x4e>
    334a:	50 3e       	cpi	r21, 0xE0	; 224
    334c:	68 f1       	brcs	.+90     	; 0x33a8 <__addsf3x+0x98>
    334e:	1a 16       	cp	r1, r26
    3350:	f0 40       	sbci	r31, 0x00	; 0
    3352:	a2 2f       	mov	r26, r18
    3354:	23 2f       	mov	r18, r19
    3356:	34 2f       	mov	r19, r20
    3358:	44 27       	eor	r20, r20
    335a:	58 5f       	subi	r21, 0xF8	; 248
    335c:	f3 cf       	rjmp	.-26     	; 0x3344 <__addsf3x+0x34>
    335e:	46 95       	lsr	r20
    3360:	37 95       	ror	r19
    3362:	27 95       	ror	r18
    3364:	a7 95       	ror	r26
    3366:	f0 40       	sbci	r31, 0x00	; 0
    3368:	53 95       	inc	r21
    336a:	c9 f7       	brne	.-14     	; 0x335e <__addsf3x+0x4e>
    336c:	7e f4       	brtc	.+30     	; 0x338c <__addsf3x+0x7c>
    336e:	1f 16       	cp	r1, r31
    3370:	ba 0b       	sbc	r27, r26
    3372:	62 0b       	sbc	r22, r18
    3374:	73 0b       	sbc	r23, r19
    3376:	84 0b       	sbc	r24, r20
    3378:	ba f0       	brmi	.+46     	; 0x33a8 <__addsf3x+0x98>
    337a:	91 50       	subi	r25, 0x01	; 1
    337c:	a1 f0       	breq	.+40     	; 0x33a6 <__addsf3x+0x96>
    337e:	ff 0f       	add	r31, r31
    3380:	bb 1f       	adc	r27, r27
    3382:	66 1f       	adc	r22, r22
    3384:	77 1f       	adc	r23, r23
    3386:	88 1f       	adc	r24, r24
    3388:	c2 f7       	brpl	.-16     	; 0x337a <__addsf3x+0x6a>
    338a:	0e c0       	rjmp	.+28     	; 0x33a8 <__addsf3x+0x98>
    338c:	ba 0f       	add	r27, r26
    338e:	62 1f       	adc	r22, r18
    3390:	73 1f       	adc	r23, r19
    3392:	84 1f       	adc	r24, r20
    3394:	48 f4       	brcc	.+18     	; 0x33a8 <__addsf3x+0x98>
    3396:	87 95       	ror	r24
    3398:	77 95       	ror	r23
    339a:	67 95       	ror	r22
    339c:	b7 95       	ror	r27
    339e:	f7 95       	ror	r31
    33a0:	9e 3f       	cpi	r25, 0xFE	; 254
    33a2:	08 f0       	brcs	.+2      	; 0x33a6 <__addsf3x+0x96>
    33a4:	b3 cf       	rjmp	.-154    	; 0x330c <__addsf3+0x1e>
    33a6:	93 95       	inc	r25
    33a8:	88 0f       	add	r24, r24
    33aa:	08 f0       	brcs	.+2      	; 0x33ae <__addsf3x+0x9e>
    33ac:	99 27       	eor	r25, r25
    33ae:	ee 0f       	add	r30, r30
    33b0:	97 95       	ror	r25
    33b2:	87 95       	ror	r24
    33b4:	08 95       	ret

000033b6 <__divsf3>:
    33b6:	0c d0       	rcall	.+24     	; 0x33d0 <__divsf3x>
    33b8:	a9 c0       	rjmp	.+338    	; 0x350c <__fp_round>
    33ba:	a1 d0       	rcall	.+322    	; 0x34fe <__fp_pscB>
    33bc:	40 f0       	brcs	.+16     	; 0x33ce <__divsf3+0x18>
    33be:	98 d0       	rcall	.+304    	; 0x34f0 <__fp_pscA>
    33c0:	30 f0       	brcs	.+12     	; 0x33ce <__divsf3+0x18>
    33c2:	21 f4       	brne	.+8      	; 0x33cc <__divsf3+0x16>
    33c4:	5f 3f       	cpi	r21, 0xFF	; 255
    33c6:	19 f0       	breq	.+6      	; 0x33ce <__divsf3+0x18>
    33c8:	8a c0       	rjmp	.+276    	; 0x34de <__fp_inf>
    33ca:	51 11       	cpse	r21, r1
    33cc:	d3 c0       	rjmp	.+422    	; 0x3574 <__fp_szero>
    33ce:	8d c0       	rjmp	.+282    	; 0x34ea <__fp_nan>

000033d0 <__divsf3x>:
    33d0:	ae d0       	rcall	.+348    	; 0x352e <__fp_split3>
    33d2:	98 f3       	brcs	.-26     	; 0x33ba <__divsf3+0x4>

000033d4 <__divsf3_pse>:
    33d4:	99 23       	and	r25, r25
    33d6:	c9 f3       	breq	.-14     	; 0x33ca <__divsf3+0x14>
    33d8:	55 23       	and	r21, r21
    33da:	b1 f3       	breq	.-20     	; 0x33c8 <__divsf3+0x12>
    33dc:	95 1b       	sub	r25, r21
    33de:	55 0b       	sbc	r21, r21
    33e0:	bb 27       	eor	r27, r27
    33e2:	aa 27       	eor	r26, r26
    33e4:	62 17       	cp	r22, r18
    33e6:	73 07       	cpc	r23, r19
    33e8:	84 07       	cpc	r24, r20
    33ea:	38 f0       	brcs	.+14     	; 0x33fa <__divsf3_pse+0x26>
    33ec:	9f 5f       	subi	r25, 0xFF	; 255
    33ee:	5f 4f       	sbci	r21, 0xFF	; 255
    33f0:	22 0f       	add	r18, r18
    33f2:	33 1f       	adc	r19, r19
    33f4:	44 1f       	adc	r20, r20
    33f6:	aa 1f       	adc	r26, r26
    33f8:	a9 f3       	breq	.-22     	; 0x33e4 <__divsf3_pse+0x10>
    33fa:	33 d0       	rcall	.+102    	; 0x3462 <__divsf3_pse+0x8e>
    33fc:	0e 2e       	mov	r0, r30
    33fe:	3a f0       	brmi	.+14     	; 0x340e <__divsf3_pse+0x3a>
    3400:	e0 e8       	ldi	r30, 0x80	; 128
    3402:	30 d0       	rcall	.+96     	; 0x3464 <__divsf3_pse+0x90>
    3404:	91 50       	subi	r25, 0x01	; 1
    3406:	50 40       	sbci	r21, 0x00	; 0
    3408:	e6 95       	lsr	r30
    340a:	00 1c       	adc	r0, r0
    340c:	ca f7       	brpl	.-14     	; 0x3400 <__divsf3_pse+0x2c>
    340e:	29 d0       	rcall	.+82     	; 0x3462 <__divsf3_pse+0x8e>
    3410:	fe 2f       	mov	r31, r30
    3412:	27 d0       	rcall	.+78     	; 0x3462 <__divsf3_pse+0x8e>
    3414:	66 0f       	add	r22, r22
    3416:	77 1f       	adc	r23, r23
    3418:	88 1f       	adc	r24, r24
    341a:	bb 1f       	adc	r27, r27
    341c:	26 17       	cp	r18, r22
    341e:	37 07       	cpc	r19, r23
    3420:	48 07       	cpc	r20, r24
    3422:	ab 07       	cpc	r26, r27
    3424:	b0 e8       	ldi	r27, 0x80	; 128
    3426:	09 f0       	breq	.+2      	; 0x342a <__divsf3_pse+0x56>
    3428:	bb 0b       	sbc	r27, r27
    342a:	80 2d       	mov	r24, r0
    342c:	bf 01       	movw	r22, r30
    342e:	ff 27       	eor	r31, r31
    3430:	93 58       	subi	r25, 0x83	; 131
    3432:	5f 4f       	sbci	r21, 0xFF	; 255
    3434:	2a f0       	brmi	.+10     	; 0x3440 <__divsf3_pse+0x6c>
    3436:	9e 3f       	cpi	r25, 0xFE	; 254
    3438:	51 05       	cpc	r21, r1
    343a:	68 f0       	brcs	.+26     	; 0x3456 <__divsf3_pse+0x82>
    343c:	50 c0       	rjmp	.+160    	; 0x34de <__fp_inf>
    343e:	9a c0       	rjmp	.+308    	; 0x3574 <__fp_szero>
    3440:	5f 3f       	cpi	r21, 0xFF	; 255
    3442:	ec f3       	brlt	.-6      	; 0x343e <__divsf3_pse+0x6a>
    3444:	98 3e       	cpi	r25, 0xE8	; 232
    3446:	dc f3       	brlt	.-10     	; 0x343e <__divsf3_pse+0x6a>
    3448:	86 95       	lsr	r24
    344a:	77 95       	ror	r23
    344c:	67 95       	ror	r22
    344e:	b7 95       	ror	r27
    3450:	f7 95       	ror	r31
    3452:	9f 5f       	subi	r25, 0xFF	; 255
    3454:	c9 f7       	brne	.-14     	; 0x3448 <__divsf3_pse+0x74>
    3456:	88 0f       	add	r24, r24
    3458:	91 1d       	adc	r25, r1
    345a:	96 95       	lsr	r25
    345c:	87 95       	ror	r24
    345e:	97 f9       	bld	r25, 7
    3460:	08 95       	ret
    3462:	e1 e0       	ldi	r30, 0x01	; 1
    3464:	66 0f       	add	r22, r22
    3466:	77 1f       	adc	r23, r23
    3468:	88 1f       	adc	r24, r24
    346a:	bb 1f       	adc	r27, r27
    346c:	62 17       	cp	r22, r18
    346e:	73 07       	cpc	r23, r19
    3470:	84 07       	cpc	r24, r20
    3472:	ba 07       	cpc	r27, r26
    3474:	20 f0       	brcs	.+8      	; 0x347e <__divsf3_pse+0xaa>
    3476:	62 1b       	sub	r22, r18
    3478:	73 0b       	sbc	r23, r19
    347a:	84 0b       	sbc	r24, r20
    347c:	ba 0b       	sbc	r27, r26
    347e:	ee 1f       	adc	r30, r30
    3480:	88 f7       	brcc	.-30     	; 0x3464 <__divsf3_pse+0x90>
    3482:	e0 95       	com	r30
    3484:	08 95       	ret

00003486 <__fixunssfsi>:
    3486:	5b d0       	rcall	.+182    	; 0x353e <__fp_splitA>
    3488:	88 f0       	brcs	.+34     	; 0x34ac <__fixunssfsi+0x26>
    348a:	9f 57       	subi	r25, 0x7F	; 127
    348c:	90 f0       	brcs	.+36     	; 0x34b2 <__fixunssfsi+0x2c>
    348e:	b9 2f       	mov	r27, r25
    3490:	99 27       	eor	r25, r25
    3492:	b7 51       	subi	r27, 0x17	; 23
    3494:	a0 f0       	brcs	.+40     	; 0x34be <__fixunssfsi+0x38>
    3496:	d1 f0       	breq	.+52     	; 0x34cc <__fixunssfsi+0x46>
    3498:	66 0f       	add	r22, r22
    349a:	77 1f       	adc	r23, r23
    349c:	88 1f       	adc	r24, r24
    349e:	99 1f       	adc	r25, r25
    34a0:	1a f0       	brmi	.+6      	; 0x34a8 <__fixunssfsi+0x22>
    34a2:	ba 95       	dec	r27
    34a4:	c9 f7       	brne	.-14     	; 0x3498 <__fixunssfsi+0x12>
    34a6:	12 c0       	rjmp	.+36     	; 0x34cc <__fixunssfsi+0x46>
    34a8:	b1 30       	cpi	r27, 0x01	; 1
    34aa:	81 f0       	breq	.+32     	; 0x34cc <__fixunssfsi+0x46>
    34ac:	62 d0       	rcall	.+196    	; 0x3572 <__fp_zero>
    34ae:	b1 e0       	ldi	r27, 0x01	; 1
    34b0:	08 95       	ret
    34b2:	5f c0       	rjmp	.+190    	; 0x3572 <__fp_zero>
    34b4:	67 2f       	mov	r22, r23
    34b6:	78 2f       	mov	r23, r24
    34b8:	88 27       	eor	r24, r24
    34ba:	b8 5f       	subi	r27, 0xF8	; 248
    34bc:	39 f0       	breq	.+14     	; 0x34cc <__fixunssfsi+0x46>
    34be:	b9 3f       	cpi	r27, 0xF9	; 249
    34c0:	cc f3       	brlt	.-14     	; 0x34b4 <__fixunssfsi+0x2e>
    34c2:	86 95       	lsr	r24
    34c4:	77 95       	ror	r23
    34c6:	67 95       	ror	r22
    34c8:	b3 95       	inc	r27
    34ca:	d9 f7       	brne	.-10     	; 0x34c2 <__fixunssfsi+0x3c>
    34cc:	3e f4       	brtc	.+14     	; 0x34dc <__fixunssfsi+0x56>
    34ce:	90 95       	com	r25
    34d0:	80 95       	com	r24
    34d2:	70 95       	com	r23
    34d4:	61 95       	neg	r22
    34d6:	7f 4f       	sbci	r23, 0xFF	; 255
    34d8:	8f 4f       	sbci	r24, 0xFF	; 255
    34da:	9f 4f       	sbci	r25, 0xFF	; 255
    34dc:	08 95       	ret

000034de <__fp_inf>:
    34de:	97 f9       	bld	r25, 7
    34e0:	9f 67       	ori	r25, 0x7F	; 127
    34e2:	80 e8       	ldi	r24, 0x80	; 128
    34e4:	70 e0       	ldi	r23, 0x00	; 0
    34e6:	60 e0       	ldi	r22, 0x00	; 0
    34e8:	08 95       	ret

000034ea <__fp_nan>:
    34ea:	9f ef       	ldi	r25, 0xFF	; 255
    34ec:	80 ec       	ldi	r24, 0xC0	; 192
    34ee:	08 95       	ret

000034f0 <__fp_pscA>:
    34f0:	00 24       	eor	r0, r0
    34f2:	0a 94       	dec	r0
    34f4:	16 16       	cp	r1, r22
    34f6:	17 06       	cpc	r1, r23
    34f8:	18 06       	cpc	r1, r24
    34fa:	09 06       	cpc	r0, r25
    34fc:	08 95       	ret

000034fe <__fp_pscB>:
    34fe:	00 24       	eor	r0, r0
    3500:	0a 94       	dec	r0
    3502:	12 16       	cp	r1, r18
    3504:	13 06       	cpc	r1, r19
    3506:	14 06       	cpc	r1, r20
    3508:	05 06       	cpc	r0, r21
    350a:	08 95       	ret

0000350c <__fp_round>:
    350c:	09 2e       	mov	r0, r25
    350e:	03 94       	inc	r0
    3510:	00 0c       	add	r0, r0
    3512:	11 f4       	brne	.+4      	; 0x3518 <__fp_round+0xc>
    3514:	88 23       	and	r24, r24
    3516:	52 f0       	brmi	.+20     	; 0x352c <__fp_round+0x20>
    3518:	bb 0f       	add	r27, r27
    351a:	40 f4       	brcc	.+16     	; 0x352c <__fp_round+0x20>
    351c:	bf 2b       	or	r27, r31
    351e:	11 f4       	brne	.+4      	; 0x3524 <__fp_round+0x18>
    3520:	60 ff       	sbrs	r22, 0
    3522:	04 c0       	rjmp	.+8      	; 0x352c <__fp_round+0x20>
    3524:	6f 5f       	subi	r22, 0xFF	; 255
    3526:	7f 4f       	sbci	r23, 0xFF	; 255
    3528:	8f 4f       	sbci	r24, 0xFF	; 255
    352a:	9f 4f       	sbci	r25, 0xFF	; 255
    352c:	08 95       	ret

0000352e <__fp_split3>:
    352e:	57 fd       	sbrc	r21, 7
    3530:	90 58       	subi	r25, 0x80	; 128
    3532:	44 0f       	add	r20, r20
    3534:	55 1f       	adc	r21, r21
    3536:	59 f0       	breq	.+22     	; 0x354e <__fp_splitA+0x10>
    3538:	5f 3f       	cpi	r21, 0xFF	; 255
    353a:	71 f0       	breq	.+28     	; 0x3558 <__fp_splitA+0x1a>
    353c:	47 95       	ror	r20

0000353e <__fp_splitA>:
    353e:	88 0f       	add	r24, r24
    3540:	97 fb       	bst	r25, 7
    3542:	99 1f       	adc	r25, r25
    3544:	61 f0       	breq	.+24     	; 0x355e <__fp_splitA+0x20>
    3546:	9f 3f       	cpi	r25, 0xFF	; 255
    3548:	79 f0       	breq	.+30     	; 0x3568 <__fp_splitA+0x2a>
    354a:	87 95       	ror	r24
    354c:	08 95       	ret
    354e:	12 16       	cp	r1, r18
    3550:	13 06       	cpc	r1, r19
    3552:	14 06       	cpc	r1, r20
    3554:	55 1f       	adc	r21, r21
    3556:	f2 cf       	rjmp	.-28     	; 0x353c <__fp_split3+0xe>
    3558:	46 95       	lsr	r20
    355a:	f1 df       	rcall	.-30     	; 0x353e <__fp_splitA>
    355c:	08 c0       	rjmp	.+16     	; 0x356e <__fp_splitA+0x30>
    355e:	16 16       	cp	r1, r22
    3560:	17 06       	cpc	r1, r23
    3562:	18 06       	cpc	r1, r24
    3564:	99 1f       	adc	r25, r25
    3566:	f1 cf       	rjmp	.-30     	; 0x354a <__fp_splitA+0xc>
    3568:	86 95       	lsr	r24
    356a:	71 05       	cpc	r23, r1
    356c:	61 05       	cpc	r22, r1
    356e:	08 94       	sec
    3570:	08 95       	ret

00003572 <__fp_zero>:
    3572:	e8 94       	clt

00003574 <__fp_szero>:
    3574:	bb 27       	eor	r27, r27
    3576:	66 27       	eor	r22, r22
    3578:	77 27       	eor	r23, r23
    357a:	cb 01       	movw	r24, r22
    357c:	97 f9       	bld	r25, 7
    357e:	08 95       	ret

00003580 <__mulsf3>:
    3580:	0b d0       	rcall	.+22     	; 0x3598 <__mulsf3x>
    3582:	c4 cf       	rjmp	.-120    	; 0x350c <__fp_round>
    3584:	b5 df       	rcall	.-150    	; 0x34f0 <__fp_pscA>
    3586:	28 f0       	brcs	.+10     	; 0x3592 <__mulsf3+0x12>
    3588:	ba df       	rcall	.-140    	; 0x34fe <__fp_pscB>
    358a:	18 f0       	brcs	.+6      	; 0x3592 <__mulsf3+0x12>
    358c:	95 23       	and	r25, r21
    358e:	09 f0       	breq	.+2      	; 0x3592 <__mulsf3+0x12>
    3590:	a6 cf       	rjmp	.-180    	; 0x34de <__fp_inf>
    3592:	ab cf       	rjmp	.-170    	; 0x34ea <__fp_nan>
    3594:	11 24       	eor	r1, r1
    3596:	ee cf       	rjmp	.-36     	; 0x3574 <__fp_szero>

00003598 <__mulsf3x>:
    3598:	ca df       	rcall	.-108    	; 0x352e <__fp_split3>
    359a:	a0 f3       	brcs	.-24     	; 0x3584 <__mulsf3+0x4>

0000359c <__mulsf3_pse>:
    359c:	95 9f       	mul	r25, r21
    359e:	d1 f3       	breq	.-12     	; 0x3594 <__mulsf3+0x14>
    35a0:	95 0f       	add	r25, r21
    35a2:	50 e0       	ldi	r21, 0x00	; 0
    35a4:	55 1f       	adc	r21, r21
    35a6:	62 9f       	mul	r22, r18
    35a8:	f0 01       	movw	r30, r0
    35aa:	72 9f       	mul	r23, r18
    35ac:	bb 27       	eor	r27, r27
    35ae:	f0 0d       	add	r31, r0
    35b0:	b1 1d       	adc	r27, r1
    35b2:	63 9f       	mul	r22, r19
    35b4:	aa 27       	eor	r26, r26
    35b6:	f0 0d       	add	r31, r0
    35b8:	b1 1d       	adc	r27, r1
    35ba:	aa 1f       	adc	r26, r26
    35bc:	64 9f       	mul	r22, r20
    35be:	66 27       	eor	r22, r22
    35c0:	b0 0d       	add	r27, r0
    35c2:	a1 1d       	adc	r26, r1
    35c4:	66 1f       	adc	r22, r22
    35c6:	82 9f       	mul	r24, r18
    35c8:	22 27       	eor	r18, r18
    35ca:	b0 0d       	add	r27, r0
    35cc:	a1 1d       	adc	r26, r1
    35ce:	62 1f       	adc	r22, r18
    35d0:	73 9f       	mul	r23, r19
    35d2:	b0 0d       	add	r27, r0
    35d4:	a1 1d       	adc	r26, r1
    35d6:	62 1f       	adc	r22, r18
    35d8:	83 9f       	mul	r24, r19
    35da:	a0 0d       	add	r26, r0
    35dc:	61 1d       	adc	r22, r1
    35de:	22 1f       	adc	r18, r18
    35e0:	74 9f       	mul	r23, r20
    35e2:	33 27       	eor	r19, r19
    35e4:	a0 0d       	add	r26, r0
    35e6:	61 1d       	adc	r22, r1
    35e8:	23 1f       	adc	r18, r19
    35ea:	84 9f       	mul	r24, r20
    35ec:	60 0d       	add	r22, r0
    35ee:	21 1d       	adc	r18, r1
    35f0:	82 2f       	mov	r24, r18
    35f2:	76 2f       	mov	r23, r22
    35f4:	6a 2f       	mov	r22, r26
    35f6:	11 24       	eor	r1, r1
    35f8:	9f 57       	subi	r25, 0x7F	; 127
    35fa:	50 40       	sbci	r21, 0x00	; 0
    35fc:	8a f0       	brmi	.+34     	; 0x3620 <__mulsf3_pse+0x84>
    35fe:	e1 f0       	breq	.+56     	; 0x3638 <__mulsf3_pse+0x9c>
    3600:	88 23       	and	r24, r24
    3602:	4a f0       	brmi	.+18     	; 0x3616 <__mulsf3_pse+0x7a>
    3604:	ee 0f       	add	r30, r30
    3606:	ff 1f       	adc	r31, r31
    3608:	bb 1f       	adc	r27, r27
    360a:	66 1f       	adc	r22, r22
    360c:	77 1f       	adc	r23, r23
    360e:	88 1f       	adc	r24, r24
    3610:	91 50       	subi	r25, 0x01	; 1
    3612:	50 40       	sbci	r21, 0x00	; 0
    3614:	a9 f7       	brne	.-22     	; 0x3600 <__mulsf3_pse+0x64>
    3616:	9e 3f       	cpi	r25, 0xFE	; 254
    3618:	51 05       	cpc	r21, r1
    361a:	70 f0       	brcs	.+28     	; 0x3638 <__mulsf3_pse+0x9c>
    361c:	60 cf       	rjmp	.-320    	; 0x34de <__fp_inf>
    361e:	aa cf       	rjmp	.-172    	; 0x3574 <__fp_szero>
    3620:	5f 3f       	cpi	r21, 0xFF	; 255
    3622:	ec f3       	brlt	.-6      	; 0x361e <__mulsf3_pse+0x82>
    3624:	98 3e       	cpi	r25, 0xE8	; 232
    3626:	dc f3       	brlt	.-10     	; 0x361e <__mulsf3_pse+0x82>
    3628:	86 95       	lsr	r24
    362a:	77 95       	ror	r23
    362c:	67 95       	ror	r22
    362e:	b7 95       	ror	r27
    3630:	f7 95       	ror	r31
    3632:	e7 95       	ror	r30
    3634:	9f 5f       	subi	r25, 0xFF	; 255
    3636:	c1 f7       	brne	.-16     	; 0x3628 <__mulsf3_pse+0x8c>
    3638:	fe 2b       	or	r31, r30
    363a:	88 0f       	add	r24, r24
    363c:	91 1d       	adc	r25, r1
    363e:	96 95       	lsr	r25
    3640:	87 95       	ror	r24
    3642:	97 f9       	bld	r25, 7
    3644:	08 95       	ret

00003646 <__udivmodsi4>:
    3646:	a1 e2       	ldi	r26, 0x21	; 33
    3648:	1a 2e       	mov	r1, r26
    364a:	aa 1b       	sub	r26, r26
    364c:	bb 1b       	sub	r27, r27
    364e:	fd 01       	movw	r30, r26
    3650:	0d c0       	rjmp	.+26     	; 0x366c <__udivmodsi4_ep>

00003652 <__udivmodsi4_loop>:
    3652:	aa 1f       	adc	r26, r26
    3654:	bb 1f       	adc	r27, r27
    3656:	ee 1f       	adc	r30, r30
    3658:	ff 1f       	adc	r31, r31
    365a:	a2 17       	cp	r26, r18
    365c:	b3 07       	cpc	r27, r19
    365e:	e4 07       	cpc	r30, r20
    3660:	f5 07       	cpc	r31, r21
    3662:	20 f0       	brcs	.+8      	; 0x366c <__udivmodsi4_ep>
    3664:	a2 1b       	sub	r26, r18
    3666:	b3 0b       	sbc	r27, r19
    3668:	e4 0b       	sbc	r30, r20
    366a:	f5 0b       	sbc	r31, r21

0000366c <__udivmodsi4_ep>:
    366c:	66 1f       	adc	r22, r22
    366e:	77 1f       	adc	r23, r23
    3670:	88 1f       	adc	r24, r24
    3672:	99 1f       	adc	r25, r25
    3674:	1a 94       	dec	r1
    3676:	69 f7       	brne	.-38     	; 0x3652 <__udivmodsi4_loop>
    3678:	60 95       	com	r22
    367a:	70 95       	com	r23
    367c:	80 95       	com	r24
    367e:	90 95       	com	r25
    3680:	9b 01       	movw	r18, r22
    3682:	ac 01       	movw	r20, r24
    3684:	bd 01       	movw	r22, r26
    3686:	cf 01       	movw	r24, r30
    3688:	08 95       	ret

0000368a <__tablejump2__>:
    368a:	ee 0f       	add	r30, r30
    368c:	ff 1f       	adc	r31, r31
    368e:	88 1f       	adc	r24, r24
    3690:	8b bf       	out	0x3b, r24	; 59
    3692:	07 90       	elpm	r0, Z+
    3694:	f6 91       	elpm	r31, Z
    3696:	e0 2d       	mov	r30, r0
    3698:	19 94       	eijmp

0000369a <__umulhisi3>:
    369a:	a2 9f       	mul	r26, r18
    369c:	b0 01       	movw	r22, r0
    369e:	b3 9f       	mul	r27, r19
    36a0:	c0 01       	movw	r24, r0
    36a2:	a3 9f       	mul	r26, r19
    36a4:	70 0d       	add	r23, r0
    36a6:	81 1d       	adc	r24, r1
    36a8:	11 24       	eor	r1, r1
    36aa:	91 1d       	adc	r25, r1
    36ac:	b2 9f       	mul	r27, r18
    36ae:	70 0d       	add	r23, r0
    36b0:	81 1d       	adc	r24, r1
    36b2:	11 24       	eor	r1, r1
    36b4:	91 1d       	adc	r25, r1
    36b6:	08 95       	ret

000036b8 <malloc>:
    36b8:	0f 93       	push	r16
    36ba:	1f 93       	push	r17
    36bc:	cf 93       	push	r28
    36be:	df 93       	push	r29
    36c0:	82 30       	cpi	r24, 0x02	; 2
    36c2:	91 05       	cpc	r25, r1
    36c4:	10 f4       	brcc	.+4      	; 0x36ca <malloc+0x12>
    36c6:	82 e0       	ldi	r24, 0x02	; 2
    36c8:	90 e0       	ldi	r25, 0x00	; 0
    36ca:	e0 91 f3 11 	lds	r30, 0x11F3	; 0x8011f3 <__flp>
    36ce:	f0 91 f4 11 	lds	r31, 0x11F4	; 0x8011f4 <__flp+0x1>
    36d2:	20 e0       	ldi	r18, 0x00	; 0
    36d4:	30 e0       	ldi	r19, 0x00	; 0
    36d6:	a0 e0       	ldi	r26, 0x00	; 0
    36d8:	b0 e0       	ldi	r27, 0x00	; 0
    36da:	30 97       	sbiw	r30, 0x00	; 0
    36dc:	19 f1       	breq	.+70     	; 0x3724 <malloc+0x6c>
    36de:	40 81       	ld	r20, Z
    36e0:	51 81       	ldd	r21, Z+1	; 0x01
    36e2:	02 81       	ldd	r16, Z+2	; 0x02
    36e4:	13 81       	ldd	r17, Z+3	; 0x03
    36e6:	48 17       	cp	r20, r24
    36e8:	59 07       	cpc	r21, r25
    36ea:	c8 f0       	brcs	.+50     	; 0x371e <malloc+0x66>
    36ec:	84 17       	cp	r24, r20
    36ee:	95 07       	cpc	r25, r21
    36f0:	69 f4       	brne	.+26     	; 0x370c <malloc+0x54>
    36f2:	10 97       	sbiw	r26, 0x00	; 0
    36f4:	31 f0       	breq	.+12     	; 0x3702 <malloc+0x4a>
    36f6:	12 96       	adiw	r26, 0x02	; 2
    36f8:	0c 93       	st	X, r16
    36fa:	12 97       	sbiw	r26, 0x02	; 2
    36fc:	13 96       	adiw	r26, 0x03	; 3
    36fe:	1c 93       	st	X, r17
    3700:	27 c0       	rjmp	.+78     	; 0x3750 <malloc+0x98>
    3702:	00 93 f3 11 	sts	0x11F3, r16	; 0x8011f3 <__flp>
    3706:	10 93 f4 11 	sts	0x11F4, r17	; 0x8011f4 <__flp+0x1>
    370a:	22 c0       	rjmp	.+68     	; 0x3750 <malloc+0x98>
    370c:	21 15       	cp	r18, r1
    370e:	31 05       	cpc	r19, r1
    3710:	19 f0       	breq	.+6      	; 0x3718 <malloc+0x60>
    3712:	42 17       	cp	r20, r18
    3714:	53 07       	cpc	r21, r19
    3716:	18 f4       	brcc	.+6      	; 0x371e <malloc+0x66>
    3718:	9a 01       	movw	r18, r20
    371a:	bd 01       	movw	r22, r26
    371c:	ef 01       	movw	r28, r30
    371e:	df 01       	movw	r26, r30
    3720:	f8 01       	movw	r30, r16
    3722:	db cf       	rjmp	.-74     	; 0x36da <malloc+0x22>
    3724:	21 15       	cp	r18, r1
    3726:	31 05       	cpc	r19, r1
    3728:	f9 f0       	breq	.+62     	; 0x3768 <malloc+0xb0>
    372a:	28 1b       	sub	r18, r24
    372c:	39 0b       	sbc	r19, r25
    372e:	24 30       	cpi	r18, 0x04	; 4
    3730:	31 05       	cpc	r19, r1
    3732:	80 f4       	brcc	.+32     	; 0x3754 <malloc+0x9c>
    3734:	8a 81       	ldd	r24, Y+2	; 0x02
    3736:	9b 81       	ldd	r25, Y+3	; 0x03
    3738:	61 15       	cp	r22, r1
    373a:	71 05       	cpc	r23, r1
    373c:	21 f0       	breq	.+8      	; 0x3746 <malloc+0x8e>
    373e:	fb 01       	movw	r30, r22
    3740:	93 83       	std	Z+3, r25	; 0x03
    3742:	82 83       	std	Z+2, r24	; 0x02
    3744:	04 c0       	rjmp	.+8      	; 0x374e <malloc+0x96>
    3746:	90 93 f4 11 	sts	0x11F4, r25	; 0x8011f4 <__flp+0x1>
    374a:	80 93 f3 11 	sts	0x11F3, r24	; 0x8011f3 <__flp>
    374e:	fe 01       	movw	r30, r28
    3750:	32 96       	adiw	r30, 0x02	; 2
    3752:	44 c0       	rjmp	.+136    	; 0x37dc <malloc+0x124>
    3754:	fe 01       	movw	r30, r28
    3756:	e2 0f       	add	r30, r18
    3758:	f3 1f       	adc	r31, r19
    375a:	81 93       	st	Z+, r24
    375c:	91 93       	st	Z+, r25
    375e:	22 50       	subi	r18, 0x02	; 2
    3760:	31 09       	sbc	r19, r1
    3762:	39 83       	std	Y+1, r19	; 0x01
    3764:	28 83       	st	Y, r18
    3766:	3a c0       	rjmp	.+116    	; 0x37dc <malloc+0x124>
    3768:	20 91 f1 11 	lds	r18, 0x11F1	; 0x8011f1 <__brkval>
    376c:	30 91 f2 11 	lds	r19, 0x11F2	; 0x8011f2 <__brkval+0x1>
    3770:	23 2b       	or	r18, r19
    3772:	41 f4       	brne	.+16     	; 0x3784 <malloc+0xcc>
    3774:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    3778:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    377c:	30 93 f2 11 	sts	0x11F2, r19	; 0x8011f2 <__brkval+0x1>
    3780:	20 93 f1 11 	sts	0x11F1, r18	; 0x8011f1 <__brkval>
    3784:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    3788:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    378c:	21 15       	cp	r18, r1
    378e:	31 05       	cpc	r19, r1
    3790:	41 f4       	brne	.+16     	; 0x37a2 <malloc+0xea>
    3792:	2d b7       	in	r18, 0x3d	; 61
    3794:	3e b7       	in	r19, 0x3e	; 62
    3796:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    379a:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    379e:	24 1b       	sub	r18, r20
    37a0:	35 0b       	sbc	r19, r21
    37a2:	e0 91 f1 11 	lds	r30, 0x11F1	; 0x8011f1 <__brkval>
    37a6:	f0 91 f2 11 	lds	r31, 0x11F2	; 0x8011f2 <__brkval+0x1>
    37aa:	e2 17       	cp	r30, r18
    37ac:	f3 07       	cpc	r31, r19
    37ae:	a0 f4       	brcc	.+40     	; 0x37d8 <malloc+0x120>
    37b0:	2e 1b       	sub	r18, r30
    37b2:	3f 0b       	sbc	r19, r31
    37b4:	28 17       	cp	r18, r24
    37b6:	39 07       	cpc	r19, r25
    37b8:	78 f0       	brcs	.+30     	; 0x37d8 <malloc+0x120>
    37ba:	ac 01       	movw	r20, r24
    37bc:	4e 5f       	subi	r20, 0xFE	; 254
    37be:	5f 4f       	sbci	r21, 0xFF	; 255
    37c0:	24 17       	cp	r18, r20
    37c2:	35 07       	cpc	r19, r21
    37c4:	48 f0       	brcs	.+18     	; 0x37d8 <malloc+0x120>
    37c6:	4e 0f       	add	r20, r30
    37c8:	5f 1f       	adc	r21, r31
    37ca:	50 93 f2 11 	sts	0x11F2, r21	; 0x8011f2 <__brkval+0x1>
    37ce:	40 93 f1 11 	sts	0x11F1, r20	; 0x8011f1 <__brkval>
    37d2:	81 93       	st	Z+, r24
    37d4:	91 93       	st	Z+, r25
    37d6:	02 c0       	rjmp	.+4      	; 0x37dc <malloc+0x124>
    37d8:	e0 e0       	ldi	r30, 0x00	; 0
    37da:	f0 e0       	ldi	r31, 0x00	; 0
    37dc:	cf 01       	movw	r24, r30
    37de:	df 91       	pop	r29
    37e0:	cf 91       	pop	r28
    37e2:	1f 91       	pop	r17
    37e4:	0f 91       	pop	r16
    37e6:	08 95       	ret

000037e8 <free>:
    37e8:	cf 93       	push	r28
    37ea:	df 93       	push	r29
    37ec:	00 97       	sbiw	r24, 0x00	; 0
    37ee:	09 f4       	brne	.+2      	; 0x37f2 <free+0xa>
    37f0:	81 c0       	rjmp	.+258    	; 0x38f4 <free+0x10c>
    37f2:	fc 01       	movw	r30, r24
    37f4:	32 97       	sbiw	r30, 0x02	; 2
    37f6:	13 82       	std	Z+3, r1	; 0x03
    37f8:	12 82       	std	Z+2, r1	; 0x02
    37fa:	a0 91 f3 11 	lds	r26, 0x11F3	; 0x8011f3 <__flp>
    37fe:	b0 91 f4 11 	lds	r27, 0x11F4	; 0x8011f4 <__flp+0x1>
    3802:	10 97       	sbiw	r26, 0x00	; 0
    3804:	81 f4       	brne	.+32     	; 0x3826 <free+0x3e>
    3806:	20 81       	ld	r18, Z
    3808:	31 81       	ldd	r19, Z+1	; 0x01
    380a:	82 0f       	add	r24, r18
    380c:	93 1f       	adc	r25, r19
    380e:	20 91 f1 11 	lds	r18, 0x11F1	; 0x8011f1 <__brkval>
    3812:	30 91 f2 11 	lds	r19, 0x11F2	; 0x8011f2 <__brkval+0x1>
    3816:	28 17       	cp	r18, r24
    3818:	39 07       	cpc	r19, r25
    381a:	51 f5       	brne	.+84     	; 0x3870 <free+0x88>
    381c:	f0 93 f2 11 	sts	0x11F2, r31	; 0x8011f2 <__brkval+0x1>
    3820:	e0 93 f1 11 	sts	0x11F1, r30	; 0x8011f1 <__brkval>
    3824:	67 c0       	rjmp	.+206    	; 0x38f4 <free+0x10c>
    3826:	ed 01       	movw	r28, r26
    3828:	20 e0       	ldi	r18, 0x00	; 0
    382a:	30 e0       	ldi	r19, 0x00	; 0
    382c:	ce 17       	cp	r28, r30
    382e:	df 07       	cpc	r29, r31
    3830:	40 f4       	brcc	.+16     	; 0x3842 <free+0x5a>
    3832:	4a 81       	ldd	r20, Y+2	; 0x02
    3834:	5b 81       	ldd	r21, Y+3	; 0x03
    3836:	9e 01       	movw	r18, r28
    3838:	41 15       	cp	r20, r1
    383a:	51 05       	cpc	r21, r1
    383c:	f1 f0       	breq	.+60     	; 0x387a <free+0x92>
    383e:	ea 01       	movw	r28, r20
    3840:	f5 cf       	rjmp	.-22     	; 0x382c <free+0x44>
    3842:	d3 83       	std	Z+3, r29	; 0x03
    3844:	c2 83       	std	Z+2, r28	; 0x02
    3846:	40 81       	ld	r20, Z
    3848:	51 81       	ldd	r21, Z+1	; 0x01
    384a:	84 0f       	add	r24, r20
    384c:	95 1f       	adc	r25, r21
    384e:	c8 17       	cp	r28, r24
    3850:	d9 07       	cpc	r29, r25
    3852:	59 f4       	brne	.+22     	; 0x386a <free+0x82>
    3854:	88 81       	ld	r24, Y
    3856:	99 81       	ldd	r25, Y+1	; 0x01
    3858:	84 0f       	add	r24, r20
    385a:	95 1f       	adc	r25, r21
    385c:	02 96       	adiw	r24, 0x02	; 2
    385e:	91 83       	std	Z+1, r25	; 0x01
    3860:	80 83       	st	Z, r24
    3862:	8a 81       	ldd	r24, Y+2	; 0x02
    3864:	9b 81       	ldd	r25, Y+3	; 0x03
    3866:	93 83       	std	Z+3, r25	; 0x03
    3868:	82 83       	std	Z+2, r24	; 0x02
    386a:	21 15       	cp	r18, r1
    386c:	31 05       	cpc	r19, r1
    386e:	29 f4       	brne	.+10     	; 0x387a <free+0x92>
    3870:	f0 93 f4 11 	sts	0x11F4, r31	; 0x8011f4 <__flp+0x1>
    3874:	e0 93 f3 11 	sts	0x11F3, r30	; 0x8011f3 <__flp>
    3878:	3d c0       	rjmp	.+122    	; 0x38f4 <free+0x10c>
    387a:	e9 01       	movw	r28, r18
    387c:	fb 83       	std	Y+3, r31	; 0x03
    387e:	ea 83       	std	Y+2, r30	; 0x02
    3880:	49 91       	ld	r20, Y+
    3882:	59 91       	ld	r21, Y+
    3884:	c4 0f       	add	r28, r20
    3886:	d5 1f       	adc	r29, r21
    3888:	ec 17       	cp	r30, r28
    388a:	fd 07       	cpc	r31, r29
    388c:	61 f4       	brne	.+24     	; 0x38a6 <free+0xbe>
    388e:	80 81       	ld	r24, Z
    3890:	91 81       	ldd	r25, Z+1	; 0x01
    3892:	84 0f       	add	r24, r20
    3894:	95 1f       	adc	r25, r21
    3896:	02 96       	adiw	r24, 0x02	; 2
    3898:	e9 01       	movw	r28, r18
    389a:	99 83       	std	Y+1, r25	; 0x01
    389c:	88 83       	st	Y, r24
    389e:	82 81       	ldd	r24, Z+2	; 0x02
    38a0:	93 81       	ldd	r25, Z+3	; 0x03
    38a2:	9b 83       	std	Y+3, r25	; 0x03
    38a4:	8a 83       	std	Y+2, r24	; 0x02
    38a6:	e0 e0       	ldi	r30, 0x00	; 0
    38a8:	f0 e0       	ldi	r31, 0x00	; 0
    38aa:	12 96       	adiw	r26, 0x02	; 2
    38ac:	8d 91       	ld	r24, X+
    38ae:	9c 91       	ld	r25, X
    38b0:	13 97       	sbiw	r26, 0x03	; 3
    38b2:	00 97       	sbiw	r24, 0x00	; 0
    38b4:	19 f0       	breq	.+6      	; 0x38bc <free+0xd4>
    38b6:	fd 01       	movw	r30, r26
    38b8:	dc 01       	movw	r26, r24
    38ba:	f7 cf       	rjmp	.-18     	; 0x38aa <free+0xc2>
    38bc:	8d 91       	ld	r24, X+
    38be:	9c 91       	ld	r25, X
    38c0:	11 97       	sbiw	r26, 0x01	; 1
    38c2:	9d 01       	movw	r18, r26
    38c4:	2e 5f       	subi	r18, 0xFE	; 254
    38c6:	3f 4f       	sbci	r19, 0xFF	; 255
    38c8:	82 0f       	add	r24, r18
    38ca:	93 1f       	adc	r25, r19
    38cc:	20 91 f1 11 	lds	r18, 0x11F1	; 0x8011f1 <__brkval>
    38d0:	30 91 f2 11 	lds	r19, 0x11F2	; 0x8011f2 <__brkval+0x1>
    38d4:	28 17       	cp	r18, r24
    38d6:	39 07       	cpc	r19, r25
    38d8:	69 f4       	brne	.+26     	; 0x38f4 <free+0x10c>
    38da:	30 97       	sbiw	r30, 0x00	; 0
    38dc:	29 f4       	brne	.+10     	; 0x38e8 <free+0x100>
    38de:	10 92 f4 11 	sts	0x11F4, r1	; 0x8011f4 <__flp+0x1>
    38e2:	10 92 f3 11 	sts	0x11F3, r1	; 0x8011f3 <__flp>
    38e6:	02 c0       	rjmp	.+4      	; 0x38ec <free+0x104>
    38e8:	13 82       	std	Z+3, r1	; 0x03
    38ea:	12 82       	std	Z+2, r1	; 0x02
    38ec:	b0 93 f2 11 	sts	0x11F2, r27	; 0x8011f2 <__brkval+0x1>
    38f0:	a0 93 f1 11 	sts	0x11F1, r26	; 0x8011f1 <__brkval>
    38f4:	df 91       	pop	r29
    38f6:	cf 91       	pop	r28
    38f8:	08 95       	ret

000038fa <abort>:
    38fa:	81 e0       	ldi	r24, 0x01	; 1
    38fc:	90 e0       	ldi	r25, 0x00	; 0
    38fe:	f8 94       	cli
    3900:	00 c3       	rjmp	.+1536   	; 0x3f02 <_exit>

00003902 <memcpy>:
    3902:	fb 01       	movw	r30, r22
    3904:	dc 01       	movw	r26, r24
    3906:	02 c0       	rjmp	.+4      	; 0x390c <memcpy+0xa>
    3908:	01 90       	ld	r0, Z+
    390a:	0d 92       	st	X+, r0
    390c:	41 50       	subi	r20, 0x01	; 1
    390e:	50 40       	sbci	r21, 0x00	; 0
    3910:	d8 f7       	brcc	.-10     	; 0x3908 <memcpy+0x6>
    3912:	08 95       	ret

00003914 <memset>:
    3914:	dc 01       	movw	r26, r24
    3916:	01 c0       	rjmp	.+2      	; 0x391a <memset+0x6>
    3918:	6d 93       	st	X+, r22
    391a:	41 50       	subi	r20, 0x01	; 1
    391c:	50 40       	sbci	r21, 0x00	; 0
    391e:	e0 f7       	brcc	.-8      	; 0x3918 <memset+0x4>
    3920:	08 95       	ret

00003922 <printf>:
    3922:	cf 93       	push	r28
    3924:	df 93       	push	r29
    3926:	cd b7       	in	r28, 0x3d	; 61
    3928:	de b7       	in	r29, 0x3e	; 62
    392a:	ae 01       	movw	r20, r28
    392c:	4a 5f       	subi	r20, 0xFA	; 250
    392e:	5f 4f       	sbci	r21, 0xFF	; 255
    3930:	fa 01       	movw	r30, r20
    3932:	61 91       	ld	r22, Z+
    3934:	71 91       	ld	r23, Z+
    3936:	af 01       	movw	r20, r30
    3938:	80 91 f7 11 	lds	r24, 0x11F7	; 0x8011f7 <__iob+0x2>
    393c:	90 91 f8 11 	lds	r25, 0x11F8	; 0x8011f8 <__iob+0x3>
    3940:	33 d0       	rcall	.+102    	; 0x39a8 <vfprintf>
    3942:	df 91       	pop	r29
    3944:	cf 91       	pop	r28
    3946:	08 95       	ret

00003948 <puts>:
    3948:	0f 93       	push	r16
    394a:	1f 93       	push	r17
    394c:	cf 93       	push	r28
    394e:	df 93       	push	r29
    3950:	e0 91 f7 11 	lds	r30, 0x11F7	; 0x8011f7 <__iob+0x2>
    3954:	f0 91 f8 11 	lds	r31, 0x11F8	; 0x8011f8 <__iob+0x3>
    3958:	23 81       	ldd	r18, Z+3	; 0x03
    395a:	21 ff       	sbrs	r18, 1
    395c:	1b c0       	rjmp	.+54     	; 0x3994 <puts+0x4c>
    395e:	8c 01       	movw	r16, r24
    3960:	d0 e0       	ldi	r29, 0x00	; 0
    3962:	c0 e0       	ldi	r28, 0x00	; 0
    3964:	f8 01       	movw	r30, r16
    3966:	81 91       	ld	r24, Z+
    3968:	8f 01       	movw	r16, r30
    396a:	60 91 f7 11 	lds	r22, 0x11F7	; 0x8011f7 <__iob+0x2>
    396e:	70 91 f8 11 	lds	r23, 0x11F8	; 0x8011f8 <__iob+0x3>
    3972:	db 01       	movw	r26, r22
    3974:	18 96       	adiw	r26, 0x08	; 8
    3976:	ed 91       	ld	r30, X+
    3978:	fc 91       	ld	r31, X
    397a:	19 97       	sbiw	r26, 0x09	; 9
    397c:	88 23       	and	r24, r24
    397e:	31 f0       	breq	.+12     	; 0x398c <puts+0x44>
    3980:	19 95       	eicall
    3982:	89 2b       	or	r24, r25
    3984:	79 f3       	breq	.-34     	; 0x3964 <puts+0x1c>
    3986:	df ef       	ldi	r29, 0xFF	; 255
    3988:	cf ef       	ldi	r28, 0xFF	; 255
    398a:	ec cf       	rjmp	.-40     	; 0x3964 <puts+0x1c>
    398c:	8a e0       	ldi	r24, 0x0A	; 10
    398e:	19 95       	eicall
    3990:	89 2b       	or	r24, r25
    3992:	19 f0       	breq	.+6      	; 0x399a <puts+0x52>
    3994:	8f ef       	ldi	r24, 0xFF	; 255
    3996:	9f ef       	ldi	r25, 0xFF	; 255
    3998:	02 c0       	rjmp	.+4      	; 0x399e <puts+0x56>
    399a:	8d 2f       	mov	r24, r29
    399c:	9c 2f       	mov	r25, r28
    399e:	df 91       	pop	r29
    39a0:	cf 91       	pop	r28
    39a2:	1f 91       	pop	r17
    39a4:	0f 91       	pop	r16
    39a6:	08 95       	ret

000039a8 <vfprintf>:
    39a8:	2f 92       	push	r2
    39aa:	3f 92       	push	r3
    39ac:	4f 92       	push	r4
    39ae:	5f 92       	push	r5
    39b0:	6f 92       	push	r6
    39b2:	7f 92       	push	r7
    39b4:	8f 92       	push	r8
    39b6:	9f 92       	push	r9
    39b8:	af 92       	push	r10
    39ba:	bf 92       	push	r11
    39bc:	cf 92       	push	r12
    39be:	df 92       	push	r13
    39c0:	ef 92       	push	r14
    39c2:	ff 92       	push	r15
    39c4:	0f 93       	push	r16
    39c6:	1f 93       	push	r17
    39c8:	cf 93       	push	r28
    39ca:	df 93       	push	r29
    39cc:	cd b7       	in	r28, 0x3d	; 61
    39ce:	de b7       	in	r29, 0x3e	; 62
    39d0:	2b 97       	sbiw	r28, 0x0b	; 11
    39d2:	0f b6       	in	r0, 0x3f	; 63
    39d4:	f8 94       	cli
    39d6:	de bf       	out	0x3e, r29	; 62
    39d8:	0f be       	out	0x3f, r0	; 63
    39da:	cd bf       	out	0x3d, r28	; 61
    39dc:	6c 01       	movw	r12, r24
    39de:	7b 01       	movw	r14, r22
    39e0:	8a 01       	movw	r16, r20
    39e2:	fc 01       	movw	r30, r24
    39e4:	17 82       	std	Z+7, r1	; 0x07
    39e6:	16 82       	std	Z+6, r1	; 0x06
    39e8:	83 81       	ldd	r24, Z+3	; 0x03
    39ea:	81 ff       	sbrs	r24, 1
    39ec:	bf c1       	rjmp	.+894    	; 0x3d6c <vfprintf+0x3c4>
    39ee:	ce 01       	movw	r24, r28
    39f0:	01 96       	adiw	r24, 0x01	; 1
    39f2:	3c 01       	movw	r6, r24
    39f4:	f6 01       	movw	r30, r12
    39f6:	93 81       	ldd	r25, Z+3	; 0x03
    39f8:	f7 01       	movw	r30, r14
    39fa:	93 fd       	sbrc	r25, 3
    39fc:	85 91       	lpm	r24, Z+
    39fe:	93 ff       	sbrs	r25, 3
    3a00:	81 91       	ld	r24, Z+
    3a02:	7f 01       	movw	r14, r30
    3a04:	88 23       	and	r24, r24
    3a06:	09 f4       	brne	.+2      	; 0x3a0a <vfprintf+0x62>
    3a08:	ad c1       	rjmp	.+858    	; 0x3d64 <vfprintf+0x3bc>
    3a0a:	85 32       	cpi	r24, 0x25	; 37
    3a0c:	39 f4       	brne	.+14     	; 0x3a1c <vfprintf+0x74>
    3a0e:	93 fd       	sbrc	r25, 3
    3a10:	85 91       	lpm	r24, Z+
    3a12:	93 ff       	sbrs	r25, 3
    3a14:	81 91       	ld	r24, Z+
    3a16:	7f 01       	movw	r14, r30
    3a18:	85 32       	cpi	r24, 0x25	; 37
    3a1a:	21 f4       	brne	.+8      	; 0x3a24 <vfprintf+0x7c>
    3a1c:	b6 01       	movw	r22, r12
    3a1e:	90 e0       	ldi	r25, 0x00	; 0
    3a20:	d6 d1       	rcall	.+940    	; 0x3dce <fputc>
    3a22:	e8 cf       	rjmp	.-48     	; 0x39f4 <vfprintf+0x4c>
    3a24:	91 2c       	mov	r9, r1
    3a26:	21 2c       	mov	r2, r1
    3a28:	31 2c       	mov	r3, r1
    3a2a:	ff e1       	ldi	r31, 0x1F	; 31
    3a2c:	f3 15       	cp	r31, r3
    3a2e:	d8 f0       	brcs	.+54     	; 0x3a66 <vfprintf+0xbe>
    3a30:	8b 32       	cpi	r24, 0x2B	; 43
    3a32:	79 f0       	breq	.+30     	; 0x3a52 <vfprintf+0xaa>
    3a34:	38 f4       	brcc	.+14     	; 0x3a44 <vfprintf+0x9c>
    3a36:	80 32       	cpi	r24, 0x20	; 32
    3a38:	79 f0       	breq	.+30     	; 0x3a58 <vfprintf+0xb0>
    3a3a:	83 32       	cpi	r24, 0x23	; 35
    3a3c:	a1 f4       	brne	.+40     	; 0x3a66 <vfprintf+0xbe>
    3a3e:	23 2d       	mov	r18, r3
    3a40:	20 61       	ori	r18, 0x10	; 16
    3a42:	1d c0       	rjmp	.+58     	; 0x3a7e <vfprintf+0xd6>
    3a44:	8d 32       	cpi	r24, 0x2D	; 45
    3a46:	61 f0       	breq	.+24     	; 0x3a60 <vfprintf+0xb8>
    3a48:	80 33       	cpi	r24, 0x30	; 48
    3a4a:	69 f4       	brne	.+26     	; 0x3a66 <vfprintf+0xbe>
    3a4c:	23 2d       	mov	r18, r3
    3a4e:	21 60       	ori	r18, 0x01	; 1
    3a50:	16 c0       	rjmp	.+44     	; 0x3a7e <vfprintf+0xd6>
    3a52:	83 2d       	mov	r24, r3
    3a54:	82 60       	ori	r24, 0x02	; 2
    3a56:	38 2e       	mov	r3, r24
    3a58:	e3 2d       	mov	r30, r3
    3a5a:	e4 60       	ori	r30, 0x04	; 4
    3a5c:	3e 2e       	mov	r3, r30
    3a5e:	2a c0       	rjmp	.+84     	; 0x3ab4 <vfprintf+0x10c>
    3a60:	f3 2d       	mov	r31, r3
    3a62:	f8 60       	ori	r31, 0x08	; 8
    3a64:	1d c0       	rjmp	.+58     	; 0x3aa0 <vfprintf+0xf8>
    3a66:	37 fc       	sbrc	r3, 7
    3a68:	2d c0       	rjmp	.+90     	; 0x3ac4 <vfprintf+0x11c>
    3a6a:	20 ed       	ldi	r18, 0xD0	; 208
    3a6c:	28 0f       	add	r18, r24
    3a6e:	2a 30       	cpi	r18, 0x0A	; 10
    3a70:	40 f0       	brcs	.+16     	; 0x3a82 <vfprintf+0xda>
    3a72:	8e 32       	cpi	r24, 0x2E	; 46
    3a74:	b9 f4       	brne	.+46     	; 0x3aa4 <vfprintf+0xfc>
    3a76:	36 fc       	sbrc	r3, 6
    3a78:	75 c1       	rjmp	.+746    	; 0x3d64 <vfprintf+0x3bc>
    3a7a:	23 2d       	mov	r18, r3
    3a7c:	20 64       	ori	r18, 0x40	; 64
    3a7e:	32 2e       	mov	r3, r18
    3a80:	19 c0       	rjmp	.+50     	; 0x3ab4 <vfprintf+0x10c>
    3a82:	36 fe       	sbrs	r3, 6
    3a84:	06 c0       	rjmp	.+12     	; 0x3a92 <vfprintf+0xea>
    3a86:	8a e0       	ldi	r24, 0x0A	; 10
    3a88:	98 9e       	mul	r9, r24
    3a8a:	20 0d       	add	r18, r0
    3a8c:	11 24       	eor	r1, r1
    3a8e:	92 2e       	mov	r9, r18
    3a90:	11 c0       	rjmp	.+34     	; 0x3ab4 <vfprintf+0x10c>
    3a92:	ea e0       	ldi	r30, 0x0A	; 10
    3a94:	2e 9e       	mul	r2, r30
    3a96:	20 0d       	add	r18, r0
    3a98:	11 24       	eor	r1, r1
    3a9a:	22 2e       	mov	r2, r18
    3a9c:	f3 2d       	mov	r31, r3
    3a9e:	f0 62       	ori	r31, 0x20	; 32
    3aa0:	3f 2e       	mov	r3, r31
    3aa2:	08 c0       	rjmp	.+16     	; 0x3ab4 <vfprintf+0x10c>
    3aa4:	8c 36       	cpi	r24, 0x6C	; 108
    3aa6:	21 f4       	brne	.+8      	; 0x3ab0 <vfprintf+0x108>
    3aa8:	83 2d       	mov	r24, r3
    3aaa:	80 68       	ori	r24, 0x80	; 128
    3aac:	38 2e       	mov	r3, r24
    3aae:	02 c0       	rjmp	.+4      	; 0x3ab4 <vfprintf+0x10c>
    3ab0:	88 36       	cpi	r24, 0x68	; 104
    3ab2:	41 f4       	brne	.+16     	; 0x3ac4 <vfprintf+0x11c>
    3ab4:	f7 01       	movw	r30, r14
    3ab6:	93 fd       	sbrc	r25, 3
    3ab8:	85 91       	lpm	r24, Z+
    3aba:	93 ff       	sbrs	r25, 3
    3abc:	81 91       	ld	r24, Z+
    3abe:	7f 01       	movw	r14, r30
    3ac0:	81 11       	cpse	r24, r1
    3ac2:	b3 cf       	rjmp	.-154    	; 0x3a2a <vfprintf+0x82>
    3ac4:	98 2f       	mov	r25, r24
    3ac6:	9f 7d       	andi	r25, 0xDF	; 223
    3ac8:	95 54       	subi	r25, 0x45	; 69
    3aca:	93 30       	cpi	r25, 0x03	; 3
    3acc:	28 f4       	brcc	.+10     	; 0x3ad8 <vfprintf+0x130>
    3ace:	0c 5f       	subi	r16, 0xFC	; 252
    3ad0:	1f 4f       	sbci	r17, 0xFF	; 255
    3ad2:	9f e3       	ldi	r25, 0x3F	; 63
    3ad4:	99 83       	std	Y+1, r25	; 0x01
    3ad6:	0d c0       	rjmp	.+26     	; 0x3af2 <vfprintf+0x14a>
    3ad8:	83 36       	cpi	r24, 0x63	; 99
    3ada:	31 f0       	breq	.+12     	; 0x3ae8 <vfprintf+0x140>
    3adc:	83 37       	cpi	r24, 0x73	; 115
    3ade:	71 f0       	breq	.+28     	; 0x3afc <vfprintf+0x154>
    3ae0:	83 35       	cpi	r24, 0x53	; 83
    3ae2:	09 f0       	breq	.+2      	; 0x3ae6 <vfprintf+0x13e>
    3ae4:	55 c0       	rjmp	.+170    	; 0x3b90 <vfprintf+0x1e8>
    3ae6:	20 c0       	rjmp	.+64     	; 0x3b28 <vfprintf+0x180>
    3ae8:	f8 01       	movw	r30, r16
    3aea:	80 81       	ld	r24, Z
    3aec:	89 83       	std	Y+1, r24	; 0x01
    3aee:	0e 5f       	subi	r16, 0xFE	; 254
    3af0:	1f 4f       	sbci	r17, 0xFF	; 255
    3af2:	88 24       	eor	r8, r8
    3af4:	83 94       	inc	r8
    3af6:	91 2c       	mov	r9, r1
    3af8:	53 01       	movw	r10, r6
    3afa:	12 c0       	rjmp	.+36     	; 0x3b20 <vfprintf+0x178>
    3afc:	28 01       	movw	r4, r16
    3afe:	f2 e0       	ldi	r31, 0x02	; 2
    3b00:	4f 0e       	add	r4, r31
    3b02:	51 1c       	adc	r5, r1
    3b04:	f8 01       	movw	r30, r16
    3b06:	a0 80       	ld	r10, Z
    3b08:	b1 80       	ldd	r11, Z+1	; 0x01
    3b0a:	36 fe       	sbrs	r3, 6
    3b0c:	03 c0       	rjmp	.+6      	; 0x3b14 <vfprintf+0x16c>
    3b0e:	69 2d       	mov	r22, r9
    3b10:	70 e0       	ldi	r23, 0x00	; 0
    3b12:	02 c0       	rjmp	.+4      	; 0x3b18 <vfprintf+0x170>
    3b14:	6f ef       	ldi	r22, 0xFF	; 255
    3b16:	7f ef       	ldi	r23, 0xFF	; 255
    3b18:	c5 01       	movw	r24, r10
    3b1a:	4e d1       	rcall	.+668    	; 0x3db8 <strnlen>
    3b1c:	4c 01       	movw	r8, r24
    3b1e:	82 01       	movw	r16, r4
    3b20:	f3 2d       	mov	r31, r3
    3b22:	ff 77       	andi	r31, 0x7F	; 127
    3b24:	3f 2e       	mov	r3, r31
    3b26:	15 c0       	rjmp	.+42     	; 0x3b52 <vfprintf+0x1aa>
    3b28:	28 01       	movw	r4, r16
    3b2a:	22 e0       	ldi	r18, 0x02	; 2
    3b2c:	42 0e       	add	r4, r18
    3b2e:	51 1c       	adc	r5, r1
    3b30:	f8 01       	movw	r30, r16
    3b32:	a0 80       	ld	r10, Z
    3b34:	b1 80       	ldd	r11, Z+1	; 0x01
    3b36:	36 fe       	sbrs	r3, 6
    3b38:	03 c0       	rjmp	.+6      	; 0x3b40 <vfprintf+0x198>
    3b3a:	69 2d       	mov	r22, r9
    3b3c:	70 e0       	ldi	r23, 0x00	; 0
    3b3e:	02 c0       	rjmp	.+4      	; 0x3b44 <vfprintf+0x19c>
    3b40:	6f ef       	ldi	r22, 0xFF	; 255
    3b42:	7f ef       	ldi	r23, 0xFF	; 255
    3b44:	c5 01       	movw	r24, r10
    3b46:	2d d1       	rcall	.+602    	; 0x3da2 <strnlen_P>
    3b48:	4c 01       	movw	r8, r24
    3b4a:	f3 2d       	mov	r31, r3
    3b4c:	f0 68       	ori	r31, 0x80	; 128
    3b4e:	3f 2e       	mov	r3, r31
    3b50:	82 01       	movw	r16, r4
    3b52:	33 fc       	sbrc	r3, 3
    3b54:	19 c0       	rjmp	.+50     	; 0x3b88 <vfprintf+0x1e0>
    3b56:	82 2d       	mov	r24, r2
    3b58:	90 e0       	ldi	r25, 0x00	; 0
    3b5a:	88 16       	cp	r8, r24
    3b5c:	99 06       	cpc	r9, r25
    3b5e:	a0 f4       	brcc	.+40     	; 0x3b88 <vfprintf+0x1e0>
    3b60:	b6 01       	movw	r22, r12
    3b62:	80 e2       	ldi	r24, 0x20	; 32
    3b64:	90 e0       	ldi	r25, 0x00	; 0
    3b66:	33 d1       	rcall	.+614    	; 0x3dce <fputc>
    3b68:	2a 94       	dec	r2
    3b6a:	f5 cf       	rjmp	.-22     	; 0x3b56 <vfprintf+0x1ae>
    3b6c:	f5 01       	movw	r30, r10
    3b6e:	37 fc       	sbrc	r3, 7
    3b70:	85 91       	lpm	r24, Z+
    3b72:	37 fe       	sbrs	r3, 7
    3b74:	81 91       	ld	r24, Z+
    3b76:	5f 01       	movw	r10, r30
    3b78:	b6 01       	movw	r22, r12
    3b7a:	90 e0       	ldi	r25, 0x00	; 0
    3b7c:	28 d1       	rcall	.+592    	; 0x3dce <fputc>
    3b7e:	21 10       	cpse	r2, r1
    3b80:	2a 94       	dec	r2
    3b82:	21 e0       	ldi	r18, 0x01	; 1
    3b84:	82 1a       	sub	r8, r18
    3b86:	91 08       	sbc	r9, r1
    3b88:	81 14       	cp	r8, r1
    3b8a:	91 04       	cpc	r9, r1
    3b8c:	79 f7       	brne	.-34     	; 0x3b6c <vfprintf+0x1c4>
    3b8e:	e1 c0       	rjmp	.+450    	; 0x3d52 <vfprintf+0x3aa>
    3b90:	84 36       	cpi	r24, 0x64	; 100
    3b92:	11 f0       	breq	.+4      	; 0x3b98 <vfprintf+0x1f0>
    3b94:	89 36       	cpi	r24, 0x69	; 105
    3b96:	39 f5       	brne	.+78     	; 0x3be6 <vfprintf+0x23e>
    3b98:	f8 01       	movw	r30, r16
    3b9a:	37 fe       	sbrs	r3, 7
    3b9c:	07 c0       	rjmp	.+14     	; 0x3bac <vfprintf+0x204>
    3b9e:	60 81       	ld	r22, Z
    3ba0:	71 81       	ldd	r23, Z+1	; 0x01
    3ba2:	82 81       	ldd	r24, Z+2	; 0x02
    3ba4:	93 81       	ldd	r25, Z+3	; 0x03
    3ba6:	0c 5f       	subi	r16, 0xFC	; 252
    3ba8:	1f 4f       	sbci	r17, 0xFF	; 255
    3baa:	08 c0       	rjmp	.+16     	; 0x3bbc <vfprintf+0x214>
    3bac:	60 81       	ld	r22, Z
    3bae:	71 81       	ldd	r23, Z+1	; 0x01
    3bb0:	07 2e       	mov	r0, r23
    3bb2:	00 0c       	add	r0, r0
    3bb4:	88 0b       	sbc	r24, r24
    3bb6:	99 0b       	sbc	r25, r25
    3bb8:	0e 5f       	subi	r16, 0xFE	; 254
    3bba:	1f 4f       	sbci	r17, 0xFF	; 255
    3bbc:	f3 2d       	mov	r31, r3
    3bbe:	ff 76       	andi	r31, 0x6F	; 111
    3bc0:	3f 2e       	mov	r3, r31
    3bc2:	97 ff       	sbrs	r25, 7
    3bc4:	09 c0       	rjmp	.+18     	; 0x3bd8 <vfprintf+0x230>
    3bc6:	90 95       	com	r25
    3bc8:	80 95       	com	r24
    3bca:	70 95       	com	r23
    3bcc:	61 95       	neg	r22
    3bce:	7f 4f       	sbci	r23, 0xFF	; 255
    3bd0:	8f 4f       	sbci	r24, 0xFF	; 255
    3bd2:	9f 4f       	sbci	r25, 0xFF	; 255
    3bd4:	f0 68       	ori	r31, 0x80	; 128
    3bd6:	3f 2e       	mov	r3, r31
    3bd8:	2a e0       	ldi	r18, 0x0A	; 10
    3bda:	30 e0       	ldi	r19, 0x00	; 0
    3bdc:	a3 01       	movw	r20, r6
    3bde:	33 d1       	rcall	.+614    	; 0x3e46 <__ultoa_invert>
    3be0:	88 2e       	mov	r8, r24
    3be2:	86 18       	sub	r8, r6
    3be4:	44 c0       	rjmp	.+136    	; 0x3c6e <vfprintf+0x2c6>
    3be6:	85 37       	cpi	r24, 0x75	; 117
    3be8:	31 f4       	brne	.+12     	; 0x3bf6 <vfprintf+0x24e>
    3bea:	23 2d       	mov	r18, r3
    3bec:	2f 7e       	andi	r18, 0xEF	; 239
    3bee:	b2 2e       	mov	r11, r18
    3bf0:	2a e0       	ldi	r18, 0x0A	; 10
    3bf2:	30 e0       	ldi	r19, 0x00	; 0
    3bf4:	25 c0       	rjmp	.+74     	; 0x3c40 <vfprintf+0x298>
    3bf6:	93 2d       	mov	r25, r3
    3bf8:	99 7f       	andi	r25, 0xF9	; 249
    3bfa:	b9 2e       	mov	r11, r25
    3bfc:	8f 36       	cpi	r24, 0x6F	; 111
    3bfe:	c1 f0       	breq	.+48     	; 0x3c30 <vfprintf+0x288>
    3c00:	18 f4       	brcc	.+6      	; 0x3c08 <vfprintf+0x260>
    3c02:	88 35       	cpi	r24, 0x58	; 88
    3c04:	79 f0       	breq	.+30     	; 0x3c24 <vfprintf+0x27c>
    3c06:	ae c0       	rjmp	.+348    	; 0x3d64 <vfprintf+0x3bc>
    3c08:	80 37       	cpi	r24, 0x70	; 112
    3c0a:	19 f0       	breq	.+6      	; 0x3c12 <vfprintf+0x26a>
    3c0c:	88 37       	cpi	r24, 0x78	; 120
    3c0e:	21 f0       	breq	.+8      	; 0x3c18 <vfprintf+0x270>
    3c10:	a9 c0       	rjmp	.+338    	; 0x3d64 <vfprintf+0x3bc>
    3c12:	e9 2f       	mov	r30, r25
    3c14:	e0 61       	ori	r30, 0x10	; 16
    3c16:	be 2e       	mov	r11, r30
    3c18:	b4 fe       	sbrs	r11, 4
    3c1a:	0d c0       	rjmp	.+26     	; 0x3c36 <vfprintf+0x28e>
    3c1c:	fb 2d       	mov	r31, r11
    3c1e:	f4 60       	ori	r31, 0x04	; 4
    3c20:	bf 2e       	mov	r11, r31
    3c22:	09 c0       	rjmp	.+18     	; 0x3c36 <vfprintf+0x28e>
    3c24:	34 fe       	sbrs	r3, 4
    3c26:	0a c0       	rjmp	.+20     	; 0x3c3c <vfprintf+0x294>
    3c28:	29 2f       	mov	r18, r25
    3c2a:	26 60       	ori	r18, 0x06	; 6
    3c2c:	b2 2e       	mov	r11, r18
    3c2e:	06 c0       	rjmp	.+12     	; 0x3c3c <vfprintf+0x294>
    3c30:	28 e0       	ldi	r18, 0x08	; 8
    3c32:	30 e0       	ldi	r19, 0x00	; 0
    3c34:	05 c0       	rjmp	.+10     	; 0x3c40 <vfprintf+0x298>
    3c36:	20 e1       	ldi	r18, 0x10	; 16
    3c38:	30 e0       	ldi	r19, 0x00	; 0
    3c3a:	02 c0       	rjmp	.+4      	; 0x3c40 <vfprintf+0x298>
    3c3c:	20 e1       	ldi	r18, 0x10	; 16
    3c3e:	32 e0       	ldi	r19, 0x02	; 2
    3c40:	f8 01       	movw	r30, r16
    3c42:	b7 fe       	sbrs	r11, 7
    3c44:	07 c0       	rjmp	.+14     	; 0x3c54 <vfprintf+0x2ac>
    3c46:	60 81       	ld	r22, Z
    3c48:	71 81       	ldd	r23, Z+1	; 0x01
    3c4a:	82 81       	ldd	r24, Z+2	; 0x02
    3c4c:	93 81       	ldd	r25, Z+3	; 0x03
    3c4e:	0c 5f       	subi	r16, 0xFC	; 252
    3c50:	1f 4f       	sbci	r17, 0xFF	; 255
    3c52:	06 c0       	rjmp	.+12     	; 0x3c60 <vfprintf+0x2b8>
    3c54:	60 81       	ld	r22, Z
    3c56:	71 81       	ldd	r23, Z+1	; 0x01
    3c58:	80 e0       	ldi	r24, 0x00	; 0
    3c5a:	90 e0       	ldi	r25, 0x00	; 0
    3c5c:	0e 5f       	subi	r16, 0xFE	; 254
    3c5e:	1f 4f       	sbci	r17, 0xFF	; 255
    3c60:	a3 01       	movw	r20, r6
    3c62:	f1 d0       	rcall	.+482    	; 0x3e46 <__ultoa_invert>
    3c64:	88 2e       	mov	r8, r24
    3c66:	86 18       	sub	r8, r6
    3c68:	fb 2d       	mov	r31, r11
    3c6a:	ff 77       	andi	r31, 0x7F	; 127
    3c6c:	3f 2e       	mov	r3, r31
    3c6e:	36 fe       	sbrs	r3, 6
    3c70:	0d c0       	rjmp	.+26     	; 0x3c8c <vfprintf+0x2e4>
    3c72:	23 2d       	mov	r18, r3
    3c74:	2e 7f       	andi	r18, 0xFE	; 254
    3c76:	a2 2e       	mov	r10, r18
    3c78:	89 14       	cp	r8, r9
    3c7a:	58 f4       	brcc	.+22     	; 0x3c92 <vfprintf+0x2ea>
    3c7c:	34 fe       	sbrs	r3, 4
    3c7e:	0b c0       	rjmp	.+22     	; 0x3c96 <vfprintf+0x2ee>
    3c80:	32 fc       	sbrc	r3, 2
    3c82:	09 c0       	rjmp	.+18     	; 0x3c96 <vfprintf+0x2ee>
    3c84:	83 2d       	mov	r24, r3
    3c86:	8e 7e       	andi	r24, 0xEE	; 238
    3c88:	a8 2e       	mov	r10, r24
    3c8a:	05 c0       	rjmp	.+10     	; 0x3c96 <vfprintf+0x2ee>
    3c8c:	b8 2c       	mov	r11, r8
    3c8e:	a3 2c       	mov	r10, r3
    3c90:	03 c0       	rjmp	.+6      	; 0x3c98 <vfprintf+0x2f0>
    3c92:	b8 2c       	mov	r11, r8
    3c94:	01 c0       	rjmp	.+2      	; 0x3c98 <vfprintf+0x2f0>
    3c96:	b9 2c       	mov	r11, r9
    3c98:	a4 fe       	sbrs	r10, 4
    3c9a:	0f c0       	rjmp	.+30     	; 0x3cba <vfprintf+0x312>
    3c9c:	fe 01       	movw	r30, r28
    3c9e:	e8 0d       	add	r30, r8
    3ca0:	f1 1d       	adc	r31, r1
    3ca2:	80 81       	ld	r24, Z
    3ca4:	80 33       	cpi	r24, 0x30	; 48
    3ca6:	21 f4       	brne	.+8      	; 0x3cb0 <vfprintf+0x308>
    3ca8:	9a 2d       	mov	r25, r10
    3caa:	99 7e       	andi	r25, 0xE9	; 233
    3cac:	a9 2e       	mov	r10, r25
    3cae:	09 c0       	rjmp	.+18     	; 0x3cc2 <vfprintf+0x31a>
    3cb0:	a2 fe       	sbrs	r10, 2
    3cb2:	06 c0       	rjmp	.+12     	; 0x3cc0 <vfprintf+0x318>
    3cb4:	b3 94       	inc	r11
    3cb6:	b3 94       	inc	r11
    3cb8:	04 c0       	rjmp	.+8      	; 0x3cc2 <vfprintf+0x31a>
    3cba:	8a 2d       	mov	r24, r10
    3cbc:	86 78       	andi	r24, 0x86	; 134
    3cbe:	09 f0       	breq	.+2      	; 0x3cc2 <vfprintf+0x31a>
    3cc0:	b3 94       	inc	r11
    3cc2:	a3 fc       	sbrc	r10, 3
    3cc4:	10 c0       	rjmp	.+32     	; 0x3ce6 <vfprintf+0x33e>
    3cc6:	a0 fe       	sbrs	r10, 0
    3cc8:	06 c0       	rjmp	.+12     	; 0x3cd6 <vfprintf+0x32e>
    3cca:	b2 14       	cp	r11, r2
    3ccc:	80 f4       	brcc	.+32     	; 0x3cee <vfprintf+0x346>
    3cce:	28 0c       	add	r2, r8
    3cd0:	92 2c       	mov	r9, r2
    3cd2:	9b 18       	sub	r9, r11
    3cd4:	0d c0       	rjmp	.+26     	; 0x3cf0 <vfprintf+0x348>
    3cd6:	b2 14       	cp	r11, r2
    3cd8:	58 f4       	brcc	.+22     	; 0x3cf0 <vfprintf+0x348>
    3cda:	b6 01       	movw	r22, r12
    3cdc:	80 e2       	ldi	r24, 0x20	; 32
    3cde:	90 e0       	ldi	r25, 0x00	; 0
    3ce0:	76 d0       	rcall	.+236    	; 0x3dce <fputc>
    3ce2:	b3 94       	inc	r11
    3ce4:	f8 cf       	rjmp	.-16     	; 0x3cd6 <vfprintf+0x32e>
    3ce6:	b2 14       	cp	r11, r2
    3ce8:	18 f4       	brcc	.+6      	; 0x3cf0 <vfprintf+0x348>
    3cea:	2b 18       	sub	r2, r11
    3cec:	02 c0       	rjmp	.+4      	; 0x3cf2 <vfprintf+0x34a>
    3cee:	98 2c       	mov	r9, r8
    3cf0:	21 2c       	mov	r2, r1
    3cf2:	a4 fe       	sbrs	r10, 4
    3cf4:	0f c0       	rjmp	.+30     	; 0x3d14 <vfprintf+0x36c>
    3cf6:	b6 01       	movw	r22, r12
    3cf8:	80 e3       	ldi	r24, 0x30	; 48
    3cfa:	90 e0       	ldi	r25, 0x00	; 0
    3cfc:	68 d0       	rcall	.+208    	; 0x3dce <fputc>
    3cfe:	a2 fe       	sbrs	r10, 2
    3d00:	16 c0       	rjmp	.+44     	; 0x3d2e <vfprintf+0x386>
    3d02:	a1 fc       	sbrc	r10, 1
    3d04:	03 c0       	rjmp	.+6      	; 0x3d0c <vfprintf+0x364>
    3d06:	88 e7       	ldi	r24, 0x78	; 120
    3d08:	90 e0       	ldi	r25, 0x00	; 0
    3d0a:	02 c0       	rjmp	.+4      	; 0x3d10 <vfprintf+0x368>
    3d0c:	88 e5       	ldi	r24, 0x58	; 88
    3d0e:	90 e0       	ldi	r25, 0x00	; 0
    3d10:	b6 01       	movw	r22, r12
    3d12:	0c c0       	rjmp	.+24     	; 0x3d2c <vfprintf+0x384>
    3d14:	8a 2d       	mov	r24, r10
    3d16:	86 78       	andi	r24, 0x86	; 134
    3d18:	51 f0       	breq	.+20     	; 0x3d2e <vfprintf+0x386>
    3d1a:	a1 fe       	sbrs	r10, 1
    3d1c:	02 c0       	rjmp	.+4      	; 0x3d22 <vfprintf+0x37a>
    3d1e:	8b e2       	ldi	r24, 0x2B	; 43
    3d20:	01 c0       	rjmp	.+2      	; 0x3d24 <vfprintf+0x37c>
    3d22:	80 e2       	ldi	r24, 0x20	; 32
    3d24:	a7 fc       	sbrc	r10, 7
    3d26:	8d e2       	ldi	r24, 0x2D	; 45
    3d28:	b6 01       	movw	r22, r12
    3d2a:	90 e0       	ldi	r25, 0x00	; 0
    3d2c:	50 d0       	rcall	.+160    	; 0x3dce <fputc>
    3d2e:	89 14       	cp	r8, r9
    3d30:	30 f4       	brcc	.+12     	; 0x3d3e <vfprintf+0x396>
    3d32:	b6 01       	movw	r22, r12
    3d34:	80 e3       	ldi	r24, 0x30	; 48
    3d36:	90 e0       	ldi	r25, 0x00	; 0
    3d38:	4a d0       	rcall	.+148    	; 0x3dce <fputc>
    3d3a:	9a 94       	dec	r9
    3d3c:	f8 cf       	rjmp	.-16     	; 0x3d2e <vfprintf+0x386>
    3d3e:	8a 94       	dec	r8
    3d40:	f3 01       	movw	r30, r6
    3d42:	e8 0d       	add	r30, r8
    3d44:	f1 1d       	adc	r31, r1
    3d46:	80 81       	ld	r24, Z
    3d48:	b6 01       	movw	r22, r12
    3d4a:	90 e0       	ldi	r25, 0x00	; 0
    3d4c:	40 d0       	rcall	.+128    	; 0x3dce <fputc>
    3d4e:	81 10       	cpse	r8, r1
    3d50:	f6 cf       	rjmp	.-20     	; 0x3d3e <vfprintf+0x396>
    3d52:	22 20       	and	r2, r2
    3d54:	09 f4       	brne	.+2      	; 0x3d58 <vfprintf+0x3b0>
    3d56:	4e ce       	rjmp	.-868    	; 0x39f4 <vfprintf+0x4c>
    3d58:	b6 01       	movw	r22, r12
    3d5a:	80 e2       	ldi	r24, 0x20	; 32
    3d5c:	90 e0       	ldi	r25, 0x00	; 0
    3d5e:	37 d0       	rcall	.+110    	; 0x3dce <fputc>
    3d60:	2a 94       	dec	r2
    3d62:	f7 cf       	rjmp	.-18     	; 0x3d52 <vfprintf+0x3aa>
    3d64:	f6 01       	movw	r30, r12
    3d66:	86 81       	ldd	r24, Z+6	; 0x06
    3d68:	97 81       	ldd	r25, Z+7	; 0x07
    3d6a:	02 c0       	rjmp	.+4      	; 0x3d70 <vfprintf+0x3c8>
    3d6c:	8f ef       	ldi	r24, 0xFF	; 255
    3d6e:	9f ef       	ldi	r25, 0xFF	; 255
    3d70:	2b 96       	adiw	r28, 0x0b	; 11
    3d72:	0f b6       	in	r0, 0x3f	; 63
    3d74:	f8 94       	cli
    3d76:	de bf       	out	0x3e, r29	; 62
    3d78:	0f be       	out	0x3f, r0	; 63
    3d7a:	cd bf       	out	0x3d, r28	; 61
    3d7c:	df 91       	pop	r29
    3d7e:	cf 91       	pop	r28
    3d80:	1f 91       	pop	r17
    3d82:	0f 91       	pop	r16
    3d84:	ff 90       	pop	r15
    3d86:	ef 90       	pop	r14
    3d88:	df 90       	pop	r13
    3d8a:	cf 90       	pop	r12
    3d8c:	bf 90       	pop	r11
    3d8e:	af 90       	pop	r10
    3d90:	9f 90       	pop	r9
    3d92:	8f 90       	pop	r8
    3d94:	7f 90       	pop	r7
    3d96:	6f 90       	pop	r6
    3d98:	5f 90       	pop	r5
    3d9a:	4f 90       	pop	r4
    3d9c:	3f 90       	pop	r3
    3d9e:	2f 90       	pop	r2
    3da0:	08 95       	ret

00003da2 <strnlen_P>:
    3da2:	fc 01       	movw	r30, r24
    3da4:	05 90       	lpm	r0, Z+
    3da6:	61 50       	subi	r22, 0x01	; 1
    3da8:	70 40       	sbci	r23, 0x00	; 0
    3daa:	01 10       	cpse	r0, r1
    3dac:	d8 f7       	brcc	.-10     	; 0x3da4 <strnlen_P+0x2>
    3dae:	80 95       	com	r24
    3db0:	90 95       	com	r25
    3db2:	8e 0f       	add	r24, r30
    3db4:	9f 1f       	adc	r25, r31
    3db6:	08 95       	ret

00003db8 <strnlen>:
    3db8:	fc 01       	movw	r30, r24
    3dba:	61 50       	subi	r22, 0x01	; 1
    3dbc:	70 40       	sbci	r23, 0x00	; 0
    3dbe:	01 90       	ld	r0, Z+
    3dc0:	01 10       	cpse	r0, r1
    3dc2:	d8 f7       	brcc	.-10     	; 0x3dba <strnlen+0x2>
    3dc4:	80 95       	com	r24
    3dc6:	90 95       	com	r25
    3dc8:	8e 0f       	add	r24, r30
    3dca:	9f 1f       	adc	r25, r31
    3dcc:	08 95       	ret

00003dce <fputc>:
    3dce:	0f 93       	push	r16
    3dd0:	1f 93       	push	r17
    3dd2:	cf 93       	push	r28
    3dd4:	df 93       	push	r29
    3dd6:	fb 01       	movw	r30, r22
    3dd8:	23 81       	ldd	r18, Z+3	; 0x03
    3dda:	21 fd       	sbrc	r18, 1
    3ddc:	03 c0       	rjmp	.+6      	; 0x3de4 <fputc+0x16>
    3dde:	8f ef       	ldi	r24, 0xFF	; 255
    3de0:	9f ef       	ldi	r25, 0xFF	; 255
    3de2:	2c c0       	rjmp	.+88     	; 0x3e3c <fputc+0x6e>
    3de4:	22 ff       	sbrs	r18, 2
    3de6:	16 c0       	rjmp	.+44     	; 0x3e14 <fputc+0x46>
    3de8:	46 81       	ldd	r20, Z+6	; 0x06
    3dea:	57 81       	ldd	r21, Z+7	; 0x07
    3dec:	24 81       	ldd	r18, Z+4	; 0x04
    3dee:	35 81       	ldd	r19, Z+5	; 0x05
    3df0:	42 17       	cp	r20, r18
    3df2:	53 07       	cpc	r21, r19
    3df4:	44 f4       	brge	.+16     	; 0x3e06 <fputc+0x38>
    3df6:	a0 81       	ld	r26, Z
    3df8:	b1 81       	ldd	r27, Z+1	; 0x01
    3dfa:	9d 01       	movw	r18, r26
    3dfc:	2f 5f       	subi	r18, 0xFF	; 255
    3dfe:	3f 4f       	sbci	r19, 0xFF	; 255
    3e00:	31 83       	std	Z+1, r19	; 0x01
    3e02:	20 83       	st	Z, r18
    3e04:	8c 93       	st	X, r24
    3e06:	26 81       	ldd	r18, Z+6	; 0x06
    3e08:	37 81       	ldd	r19, Z+7	; 0x07
    3e0a:	2f 5f       	subi	r18, 0xFF	; 255
    3e0c:	3f 4f       	sbci	r19, 0xFF	; 255
    3e0e:	37 83       	std	Z+7, r19	; 0x07
    3e10:	26 83       	std	Z+6, r18	; 0x06
    3e12:	14 c0       	rjmp	.+40     	; 0x3e3c <fputc+0x6e>
    3e14:	8b 01       	movw	r16, r22
    3e16:	ec 01       	movw	r28, r24
    3e18:	fb 01       	movw	r30, r22
    3e1a:	00 84       	ldd	r0, Z+8	; 0x08
    3e1c:	f1 85       	ldd	r31, Z+9	; 0x09
    3e1e:	e0 2d       	mov	r30, r0
    3e20:	19 95       	eicall
    3e22:	89 2b       	or	r24, r25
    3e24:	e1 f6       	brne	.-72     	; 0x3dde <fputc+0x10>
    3e26:	d8 01       	movw	r26, r16
    3e28:	16 96       	adiw	r26, 0x06	; 6
    3e2a:	8d 91       	ld	r24, X+
    3e2c:	9c 91       	ld	r25, X
    3e2e:	17 97       	sbiw	r26, 0x07	; 7
    3e30:	01 96       	adiw	r24, 0x01	; 1
    3e32:	17 96       	adiw	r26, 0x07	; 7
    3e34:	9c 93       	st	X, r25
    3e36:	8e 93       	st	-X, r24
    3e38:	16 97       	sbiw	r26, 0x06	; 6
    3e3a:	ce 01       	movw	r24, r28
    3e3c:	df 91       	pop	r29
    3e3e:	cf 91       	pop	r28
    3e40:	1f 91       	pop	r17
    3e42:	0f 91       	pop	r16
    3e44:	08 95       	ret

00003e46 <__ultoa_invert>:
    3e46:	fa 01       	movw	r30, r20
    3e48:	aa 27       	eor	r26, r26
    3e4a:	28 30       	cpi	r18, 0x08	; 8
    3e4c:	51 f1       	breq	.+84     	; 0x3ea2 <__ultoa_invert+0x5c>
    3e4e:	20 31       	cpi	r18, 0x10	; 16
    3e50:	81 f1       	breq	.+96     	; 0x3eb2 <__ultoa_invert+0x6c>
    3e52:	e8 94       	clt
    3e54:	6f 93       	push	r22
    3e56:	6e 7f       	andi	r22, 0xFE	; 254
    3e58:	6e 5f       	subi	r22, 0xFE	; 254
    3e5a:	7f 4f       	sbci	r23, 0xFF	; 255
    3e5c:	8f 4f       	sbci	r24, 0xFF	; 255
    3e5e:	9f 4f       	sbci	r25, 0xFF	; 255
    3e60:	af 4f       	sbci	r26, 0xFF	; 255
    3e62:	b1 e0       	ldi	r27, 0x01	; 1
    3e64:	3e d0       	rcall	.+124    	; 0x3ee2 <__ultoa_invert+0x9c>
    3e66:	b4 e0       	ldi	r27, 0x04	; 4
    3e68:	3c d0       	rcall	.+120    	; 0x3ee2 <__ultoa_invert+0x9c>
    3e6a:	67 0f       	add	r22, r23
    3e6c:	78 1f       	adc	r23, r24
    3e6e:	89 1f       	adc	r24, r25
    3e70:	9a 1f       	adc	r25, r26
    3e72:	a1 1d       	adc	r26, r1
    3e74:	68 0f       	add	r22, r24
    3e76:	79 1f       	adc	r23, r25
    3e78:	8a 1f       	adc	r24, r26
    3e7a:	91 1d       	adc	r25, r1
    3e7c:	a1 1d       	adc	r26, r1
    3e7e:	6a 0f       	add	r22, r26
    3e80:	71 1d       	adc	r23, r1
    3e82:	81 1d       	adc	r24, r1
    3e84:	91 1d       	adc	r25, r1
    3e86:	a1 1d       	adc	r26, r1
    3e88:	20 d0       	rcall	.+64     	; 0x3eca <__ultoa_invert+0x84>
    3e8a:	09 f4       	brne	.+2      	; 0x3e8e <__ultoa_invert+0x48>
    3e8c:	68 94       	set
    3e8e:	3f 91       	pop	r19
    3e90:	2a e0       	ldi	r18, 0x0A	; 10
    3e92:	26 9f       	mul	r18, r22
    3e94:	11 24       	eor	r1, r1
    3e96:	30 19       	sub	r19, r0
    3e98:	30 5d       	subi	r19, 0xD0	; 208
    3e9a:	31 93       	st	Z+, r19
    3e9c:	de f6       	brtc	.-74     	; 0x3e54 <__ultoa_invert+0xe>
    3e9e:	cf 01       	movw	r24, r30
    3ea0:	08 95       	ret
    3ea2:	46 2f       	mov	r20, r22
    3ea4:	47 70       	andi	r20, 0x07	; 7
    3ea6:	40 5d       	subi	r20, 0xD0	; 208
    3ea8:	41 93       	st	Z+, r20
    3eaa:	b3 e0       	ldi	r27, 0x03	; 3
    3eac:	0f d0       	rcall	.+30     	; 0x3ecc <__ultoa_invert+0x86>
    3eae:	c9 f7       	brne	.-14     	; 0x3ea2 <__ultoa_invert+0x5c>
    3eb0:	f6 cf       	rjmp	.-20     	; 0x3e9e <__ultoa_invert+0x58>
    3eb2:	46 2f       	mov	r20, r22
    3eb4:	4f 70       	andi	r20, 0x0F	; 15
    3eb6:	40 5d       	subi	r20, 0xD0	; 208
    3eb8:	4a 33       	cpi	r20, 0x3A	; 58
    3eba:	18 f0       	brcs	.+6      	; 0x3ec2 <__ultoa_invert+0x7c>
    3ebc:	49 5d       	subi	r20, 0xD9	; 217
    3ebe:	31 fd       	sbrc	r19, 1
    3ec0:	40 52       	subi	r20, 0x20	; 32
    3ec2:	41 93       	st	Z+, r20
    3ec4:	02 d0       	rcall	.+4      	; 0x3eca <__ultoa_invert+0x84>
    3ec6:	a9 f7       	brne	.-22     	; 0x3eb2 <__ultoa_invert+0x6c>
    3ec8:	ea cf       	rjmp	.-44     	; 0x3e9e <__ultoa_invert+0x58>
    3eca:	b4 e0       	ldi	r27, 0x04	; 4
    3ecc:	a6 95       	lsr	r26
    3ece:	97 95       	ror	r25
    3ed0:	87 95       	ror	r24
    3ed2:	77 95       	ror	r23
    3ed4:	67 95       	ror	r22
    3ed6:	ba 95       	dec	r27
    3ed8:	c9 f7       	brne	.-14     	; 0x3ecc <__ultoa_invert+0x86>
    3eda:	00 97       	sbiw	r24, 0x00	; 0
    3edc:	61 05       	cpc	r22, r1
    3ede:	71 05       	cpc	r23, r1
    3ee0:	08 95       	ret
    3ee2:	9b 01       	movw	r18, r22
    3ee4:	ac 01       	movw	r20, r24
    3ee6:	0a 2e       	mov	r0, r26
    3ee8:	06 94       	lsr	r0
    3eea:	57 95       	ror	r21
    3eec:	47 95       	ror	r20
    3eee:	37 95       	ror	r19
    3ef0:	27 95       	ror	r18
    3ef2:	ba 95       	dec	r27
    3ef4:	c9 f7       	brne	.-14     	; 0x3ee8 <__ultoa_invert+0xa2>
    3ef6:	62 0f       	add	r22, r18
    3ef8:	73 1f       	adc	r23, r19
    3efa:	84 1f       	adc	r24, r20
    3efc:	95 1f       	adc	r25, r21
    3efe:	a0 1d       	adc	r26, r0
    3f00:	08 95       	ret

00003f02 <_exit>:
    3f02:	f8 94       	cli

00003f04 <__stop_program>:
    3f04:	ff cf       	rjmp	.-2      	; 0x3f04 <__stop_program>
