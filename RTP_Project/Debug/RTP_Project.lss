
RTP_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000132  00800200  000041e8  0000427c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000041e8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000ed5  00800332  00800332  000043ae  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000043ae  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000440c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000780  00000000  00000000  0000444c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000094f4  00000000  00000000  00004bcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002689  00000000  00000000  0000e0c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004d45  00000000  00000000  00010749  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001a9c  00000000  00000000  00015490  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002df1  00000000  00000000  00016f2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000088f3  00000000  00000000  00019d1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000738  00000000  00000000  00022610  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	94 c0       	rjmp	.+296    	; 0x12a <__ctors_end>
       2:	00 00       	nop
       4:	b3 c0       	rjmp	.+358    	; 0x16c <__bad_interrupt>
       6:	00 00       	nop
       8:	b1 c0       	rjmp	.+354    	; 0x16c <__bad_interrupt>
       a:	00 00       	nop
       c:	af c0       	rjmp	.+350    	; 0x16c <__bad_interrupt>
       e:	00 00       	nop
      10:	ad c0       	rjmp	.+346    	; 0x16c <__bad_interrupt>
      12:	00 00       	nop
      14:	ab c0       	rjmp	.+342    	; 0x16c <__bad_interrupt>
      16:	00 00       	nop
      18:	a9 c0       	rjmp	.+338    	; 0x16c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	a7 c0       	rjmp	.+334    	; 0x16c <__bad_interrupt>
      1e:	00 00       	nop
      20:	a5 c0       	rjmp	.+330    	; 0x16c <__bad_interrupt>
      22:	00 00       	nop
      24:	a3 c0       	rjmp	.+326    	; 0x16c <__bad_interrupt>
      26:	00 00       	nop
      28:	a1 c0       	rjmp	.+322    	; 0x16c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	9f c0       	rjmp	.+318    	; 0x16c <__bad_interrupt>
      2e:	00 00       	nop
      30:	f8 c5       	rjmp	.+3056   	; 0xc22 <__vector_12>
      32:	00 00       	nop
      34:	9b c0       	rjmp	.+310    	; 0x16c <__bad_interrupt>
      36:	00 00       	nop
      38:	99 c0       	rjmp	.+306    	; 0x16c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	97 c0       	rjmp	.+302    	; 0x16c <__bad_interrupt>
      3e:	00 00       	nop
      40:	95 c0       	rjmp	.+298    	; 0x16c <__bad_interrupt>
      42:	00 00       	nop
      44:	93 c0       	rjmp	.+294    	; 0x16c <__bad_interrupt>
      46:	00 00       	nop
      48:	91 c0       	rjmp	.+290    	; 0x16c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	8f c0       	rjmp	.+286    	; 0x16c <__bad_interrupt>
      4e:	00 00       	nop
      50:	8d c0       	rjmp	.+282    	; 0x16c <__bad_interrupt>
      52:	00 00       	nop
      54:	8b c0       	rjmp	.+278    	; 0x16c <__bad_interrupt>
      56:	00 00       	nop
      58:	89 c0       	rjmp	.+274    	; 0x16c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	87 c0       	rjmp	.+270    	; 0x16c <__bad_interrupt>
      5e:	00 00       	nop
      60:	85 c0       	rjmp	.+266    	; 0x16c <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 cb 17 	jmp	0x2f96	; 0x2f96 <__vector_25>
      68:	0c 94 1d 18 	jmp	0x303a	; 0x303a <__vector_26>
      6c:	7f c0       	rjmp	.+254    	; 0x16c <__bad_interrupt>
      6e:	00 00       	nop
      70:	7d c0       	rjmp	.+250    	; 0x16c <__bad_interrupt>
      72:	00 00       	nop
      74:	7b c0       	rjmp	.+246    	; 0x16c <__bad_interrupt>
      76:	00 00       	nop
      78:	79 c0       	rjmp	.+242    	; 0x16c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	77 c0       	rjmp	.+238    	; 0x16c <__bad_interrupt>
      7e:	00 00       	nop
      80:	75 c0       	rjmp	.+234    	; 0x16c <__bad_interrupt>
      82:	00 00       	nop
      84:	73 c0       	rjmp	.+230    	; 0x16c <__bad_interrupt>
      86:	00 00       	nop
      88:	71 c0       	rjmp	.+226    	; 0x16c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	6f c0       	rjmp	.+222    	; 0x16c <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 61 18 	jmp	0x30c2	; 0x30c2 <__vector_36>
      94:	0c 94 b3 18 	jmp	0x3166	; 0x3166 <__vector_37>
      98:	69 c0       	rjmp	.+210    	; 0x16c <__bad_interrupt>
      9a:	00 00       	nop
      9c:	67 c0       	rjmp	.+206    	; 0x16c <__bad_interrupt>
      9e:	00 00       	nop
      a0:	65 c0       	rjmp	.+202    	; 0x16c <__bad_interrupt>
      a2:	00 00       	nop
      a4:	63 c0       	rjmp	.+198    	; 0x16c <__bad_interrupt>
      a6:	00 00       	nop
      a8:	61 c0       	rjmp	.+194    	; 0x16c <__bad_interrupt>
      aa:	00 00       	nop
      ac:	5f c0       	rjmp	.+190    	; 0x16c <__bad_interrupt>
      ae:	00 00       	nop
      b0:	5d c0       	rjmp	.+186    	; 0x16c <__bad_interrupt>
      b2:	00 00       	nop
      b4:	5b c0       	rjmp	.+182    	; 0x16c <__bad_interrupt>
      b6:	00 00       	nop
      b8:	59 c0       	rjmp	.+178    	; 0x16c <__bad_interrupt>
      ba:	00 00       	nop
      bc:	57 c0       	rjmp	.+174    	; 0x16c <__bad_interrupt>
      be:	00 00       	nop
      c0:	55 c0       	rjmp	.+170    	; 0x16c <__bad_interrupt>
      c2:	00 00       	nop
      c4:	53 c0       	rjmp	.+166    	; 0x16c <__bad_interrupt>
      c6:	00 00       	nop
      c8:	51 c0       	rjmp	.+162    	; 0x16c <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 f7 18 	jmp	0x31ee	; 0x31ee <__vector_51>
      d0:	0c 94 49 19 	jmp	0x3292	; 0x3292 <__vector_52>
      d4:	4b c0       	rjmp	.+150    	; 0x16c <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 8d 19 	jmp	0x331a	; 0x331a <__vector_54>
      dc:	0c 94 df 19 	jmp	0x33be	; 0x33be <__vector_55>
      e0:	45 c0       	rjmp	.+138    	; 0x16c <__bad_interrupt>
      e2:	00 00       	nop
      e4:	4b 14       	cp	r4, r11
      e6:	4b 14       	cp	r4, r11
      e8:	4b 14       	cp	r4, r11
      ea:	82 14       	cp	r8, r2
      ec:	8a 14       	cp	r8, r10
      ee:	9f 14       	cp	r9, r15
      f0:	4b 14       	cp	r4, r11
      f2:	4b 14       	cp	r4, r11
      f4:	82 14       	cp	r8, r2
      f6:	8a 14       	cp	r8, r10

000000f8 <prvIdleTask>:
    /* Reset the event list item to its normal value - so it can be used with
     * queues and semaphores. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */

    return uxReturn;
}
      f8:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <prvCheckTasksWaitingTermination>
      fc:	80 91 43 11 	lds	r24, 0x1143	; 0x801143 <pxReadyTasksLists>
     100:	82 30       	cpi	r24, 0x02	; 2
     102:	08 f0       	brcs	.+2      	; 0x106 <prvIdleTask+0xe>
     104:	c9 d4       	rcall	.+2450   	; 0xa98 <vPortYield>
     106:	0e 94 c8 14 	call	0x2990	; 0x2990 <vApplicationIdleHook>
     10a:	f6 cf       	rjmp	.-20     	; 0xf8 <prvIdleTask>

0000010c <prvTimerTask>:
                pxNewTimer->ucStatus = 0x00;
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
     10c:	cf 93       	push	r28
     10e:	df 93       	push	r29
     110:	1f 92       	push	r1
     112:	cd b7       	in	r28, 0x3d	; 61
     114:	de b7       	in	r29, 0x3e	; 62
     116:	ce 01       	movw	r24, r28
     118:	01 96       	adiw	r24, 0x01	; 1
     11a:	0e 94 cf 11 	call	0x239e	; 0x239e <prvGetNextExpireTime>
     11e:	49 81       	ldd	r20, Y+1	; 0x01
     120:	0e 94 c2 13 	call	0x2784	; 0x2784 <prvProcessTimerOrBlockTask>
     124:	0e 94 15 14 	call	0x282a	; 0x282a <prvProcessReceivedCommands>
     128:	f6 cf       	rjmp	.-20     	; 0x116 <prvTimerTask+0xa>

0000012a <__ctors_end>:
     12a:	11 24       	eor	r1, r1
     12c:	1f be       	out	0x3f, r1	; 63
     12e:	cf ef       	ldi	r28, 0xFF	; 255
     130:	d1 e2       	ldi	r29, 0x21	; 33
     132:	de bf       	out	0x3e, r29	; 62
     134:	cd bf       	out	0x3d, r28	; 61
     136:	00 e0       	ldi	r16, 0x00	; 0
     138:	0c bf       	out	0x3c, r16	; 60

0000013a <__do_copy_data>:
     13a:	13 e0       	ldi	r17, 0x03	; 3
     13c:	a0 e0       	ldi	r26, 0x00	; 0
     13e:	b2 e0       	ldi	r27, 0x02	; 2
     140:	e8 ee       	ldi	r30, 0xE8	; 232
     142:	f1 e4       	ldi	r31, 0x41	; 65
     144:	00 e0       	ldi	r16, 0x00	; 0
     146:	0b bf       	out	0x3b, r16	; 59
     148:	02 c0       	rjmp	.+4      	; 0x14e <__do_copy_data+0x14>
     14a:	07 90       	elpm	r0, Z+
     14c:	0d 92       	st	X+, r0
     14e:	a2 33       	cpi	r26, 0x32	; 50
     150:	b1 07       	cpc	r27, r17
     152:	d9 f7       	brne	.-10     	; 0x14a <__do_copy_data+0x10>

00000154 <__do_clear_bss>:
     154:	22 e1       	ldi	r18, 0x12	; 18
     156:	a2 e3       	ldi	r26, 0x32	; 50
     158:	b3 e0       	ldi	r27, 0x03	; 3
     15a:	01 c0       	rjmp	.+2      	; 0x15e <.do_clear_bss_start>

0000015c <.do_clear_bss_loop>:
     15c:	1d 92       	st	X+, r1

0000015e <.do_clear_bss_start>:
     15e:	a7 30       	cpi	r26, 0x07	; 7
     160:	b2 07       	cpc	r27, r18
     162:	e1 f7       	brne	.-8      	; 0x15c <.do_clear_bss_loop>
     164:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <main>
     168:	0c 94 f2 20 	jmp	0x41e4	; 0x41e4 <_exit>

0000016c <__bad_interrupt>:
     16c:	49 cf       	rjmp	.-366    	; 0x0 <__vectors>

0000016e <create_all_application_tasks>:
		
		vTaskDelay(xFrequency); // Wait for the next cycle
	}
}

void obstacleDetectionFront(){
     16e:	ef 92       	push	r14
     170:	ff 92       	push	r15
     172:	0f 93       	push	r16
     174:	81 e0       	ldi	r24, 0x01	; 1
     176:	46 d7       	rcall	.+3724   	; 0x1004 <xQueueCreateMutex>
     178:	90 93 fc 11 	sts	0x11FC, r25	; 0x8011fc <xFrontDistanceSemaphore+0x1>
     17c:	80 93 fb 11 	sts	0x11FB, r24	; 0x8011fb <xFrontDistanceSemaphore>
     180:	81 e0       	ldi	r24, 0x01	; 1
     182:	40 d7       	rcall	.+3712   	; 0x1004 <xQueueCreateMutex>
     184:	90 93 f8 11 	sts	0x11F8, r25	; 0x8011f8 <xBackDistanceSemaphore+0x1>
     188:	80 93 f7 11 	sts	0x11F7, r24	; 0x8011f7 <xBackDistanceSemaphore>
     18c:	4c d2       	rcall	.+1176   	; 0x626 <xEventGroupCreate>
     18e:	90 93 fa 11 	sts	0x11FA, r25	; 0x8011fa <xObstacleEventGroup+0x1>
     192:	80 93 f9 11 	sts	0x11F9, r24	; 0x8011f9 <xObstacleEventGroup>
     196:	e1 2c       	mov	r14, r1
     198:	f1 2c       	mov	r15, r1
     19a:	03 e0       	ldi	r16, 0x03	; 3
     19c:	20 e0       	ldi	r18, 0x00	; 0
     19e:	30 e0       	ldi	r19, 0x00	; 0
     1a0:	40 ec       	ldi	r20, 0xC0	; 192
     1a2:	50 e0       	ldi	r21, 0x00	; 0
     1a4:	61 e2       	ldi	r22, 0x21	; 33
     1a6:	72 e0       	ldi	r23, 0x02	; 2
     1a8:	8a eb       	ldi	r24, 0xBA	; 186
     1aa:	91 e0       	ldi	r25, 0x01	; 1
     1ac:	0e 94 a3 0b 	call	0x1746	; 0x1746 <xTaskCreate>
     1b0:	20 e0       	ldi	r18, 0x00	; 0
     1b2:	30 e0       	ldi	r19, 0x00	; 0
     1b4:	40 ec       	ldi	r20, 0xC0	; 192
     1b6:	50 e0       	ldi	r21, 0x00	; 0
     1b8:	63 e3       	ldi	r22, 0x33	; 51
     1ba:	72 e0       	ldi	r23, 0x02	; 2
     1bc:	86 e1       	ldi	r24, 0x16	; 22
     1be:	92 e0       	ldi	r25, 0x02	; 2
     1c0:	0e 94 a3 0b 	call	0x1746	; 0x1746 <xTaskCreate>
     1c4:	05 e0       	ldi	r16, 0x05	; 5
     1c6:	20 e0       	ldi	r18, 0x00	; 0
     1c8:	30 e0       	ldi	r19, 0x00	; 0
     1ca:	40 ec       	ldi	r20, 0xC0	; 192
     1cc:	50 e0       	ldi	r21, 0x00	; 0
     1ce:	64 e4       	ldi	r22, 0x44	; 68
     1d0:	72 e0       	ldi	r23, 0x02	; 2
     1d2:	8c e1       	ldi	r24, 0x1C	; 28
     1d4:	91 e0       	ldi	r25, 0x01	; 1
     1d6:	0e 94 a3 0b 	call	0x1746	; 0x1746 <xTaskCreate>
     1da:	20 e0       	ldi	r18, 0x00	; 0
     1dc:	30 e0       	ldi	r19, 0x00	; 0
     1de:	40 ec       	ldi	r20, 0xC0	; 192
     1e0:	50 e0       	ldi	r21, 0x00	; 0
     1e2:	64 e4       	ldi	r22, 0x44	; 68
     1e4:	72 e0       	ldi	r23, 0x02	; 2
     1e6:	85 e4       	ldi	r24, 0x45	; 69
     1e8:	91 e0       	ldi	r25, 0x01	; 1
     1ea:	0e 94 a3 0b 	call	0x1746	; 0x1746 <xTaskCreate>
     1ee:	0f 91       	pop	r16
     1f0:	ff 90       	pop	r15
     1f2:	ef 90       	pop	r14
     1f4:	08 95       	ret

000001f6 <turnOnLight>:

// Function to turn on the light
void turnOnLight(bool frontLight)
{
	
	uint8_t LIGHT_PIN = frontLight ? P_LIGHT_PIN_Front : P_LIGHT_PIN_Back; // Choose the correct pin based on the sensor
     1f6:	88 23       	and	r24, r24
     1f8:	11 f0       	breq	.+4      	; 0x1fe <turnOnLight+0x8>
     1fa:	30 e0       	ldi	r19, 0x00	; 0
     1fc:	01 c0       	rjmp	.+2      	; 0x200 <turnOnLight+0xa>
     1fe:	36 e0       	ldi	r19, 0x06	; 6
	// Set LIGHT_PIN high
	PORTC |= (1 << LIGHT_PIN);
     200:	28 b1       	in	r18, 0x08	; 8
     202:	81 e0       	ldi	r24, 0x01	; 1
     204:	90 e0       	ldi	r25, 0x00	; 0
     206:	02 c0       	rjmp	.+4      	; 0x20c <turnOnLight+0x16>
     208:	88 0f       	add	r24, r24
     20a:	99 1f       	adc	r25, r25
     20c:	3a 95       	dec	r19
     20e:	e2 f7       	brpl	.-8      	; 0x208 <turnOnLight+0x12>
     210:	82 2b       	or	r24, r18
     212:	88 b9       	out	0x08, r24	; 8
     214:	08 95       	ret

00000216 <turnOffLight>:
}

// Function to turn off the light
void turnOffLight(bool frontLight)
{
	uint8_t LIGHT_PIN = frontLight ? P_LIGHT_PIN_Front : P_LIGHT_PIN_Back; // Choose the correct pin based on the sensor
     216:	88 23       	and	r24, r24
     218:	11 f0       	breq	.+4      	; 0x21e <turnOffLight+0x8>
     21a:	30 e0       	ldi	r19, 0x00	; 0
     21c:	01 c0       	rjmp	.+2      	; 0x220 <turnOffLight+0xa>
     21e:	36 e0       	ldi	r19, 0x06	; 6

	// Set LIGHT_PIN low
	PORTC &= ~(1 << LIGHT_PIN);
     220:	28 b1       	in	r18, 0x08	; 8
     222:	81 e0       	ldi	r24, 0x01	; 1
     224:	90 e0       	ldi	r25, 0x00	; 0
     226:	02 c0       	rjmp	.+4      	; 0x22c <turnOffLight+0x16>
     228:	88 0f       	add	r24, r24
     22a:	99 1f       	adc	r25, r25
     22c:	3a 95       	dec	r19
     22e:	e2 f7       	brpl	.-8      	; 0x228 <turnOffLight+0x12>
     230:	80 95       	com	r24
     232:	82 23       	and	r24, r18
     234:	88 b9       	out	0x08, r24	; 8
     236:	08 95       	ret

00000238 <obstacleDetectionFrontTask>:
	const TickType_t xFrequency = pdMS_TO_TICKS(1000); // Check every 2 seconds
	while (1) {
		uint16_t distance;
		
		// Try to take the front semaphore to read the distance
		if (xSemaphoreTake(xFrontDistanceSemaphore, portMAX_DELAY) == pdTRUE) {
     238:	4f ef       	ldi	r20, 0xFF	; 255
     23a:	5f ef       	ldi	r21, 0xFF	; 255
     23c:	ba 01       	movw	r22, r20
     23e:	80 91 fb 11 	lds	r24, 0x11FB	; 0x8011fb <xFrontDistanceSemaphore>
     242:	90 91 fc 11 	lds	r25, 0x11FC	; 0x8011fc <xFrontDistanceSemaphore+0x1>
     246:	af d7       	rcall	.+3934   	; 0x11a6 <xQueueSemaphoreTake>
     248:	81 30       	cpi	r24, 0x01	; 1
     24a:	79 f4       	brne	.+30     	; 0x26a <obstacleDetectionFrontTask+0x32>
			distance = frontMeasuredDistance;
     24c:	c0 91 34 03 	lds	r28, 0x0334	; 0x800334 <frontMeasuredDistance>
     250:	d0 91 35 03 	lds	r29, 0x0335	; 0x800335 <frontMeasuredDistance+0x1>
			xSemaphoreGive(xFrontDistanceSemaphore); // Release the semaphore immediately after reading
     254:	00 e0       	ldi	r16, 0x00	; 0
     256:	20 e0       	ldi	r18, 0x00	; 0
     258:	30 e0       	ldi	r19, 0x00	; 0
     25a:	a9 01       	movw	r20, r18
     25c:	60 e0       	ldi	r22, 0x00	; 0
     25e:	70 e0       	ldi	r23, 0x00	; 0
     260:	80 91 fb 11 	lds	r24, 0x11FB	; 0x8011fb <xFrontDistanceSemaphore>
     264:	90 91 fc 11 	lds	r25, 0x11FC	; 0x8011fc <xFrontDistanceSemaphore+0x1>
     268:	2e d6       	rcall	.+3164   	; 0xec6 <xQueueGenericSend>
		}
		
		// Now, take action based on the measured distance
		if (distance < THRESHOLD_DISTANCE) {
     26a:	cc 32       	cpi	r28, 0x2C	; 44
     26c:	81 e0       	ldi	r24, 0x01	; 1
     26e:	d8 07       	cpc	r29, r24
			turnOnLight(true); // Front light ON if obstacle is close
     270:	18 f4       	brcc	.+6      	; 0x278 <obstacleDetectionFrontTask+0x40>
     272:	81 e0       	ldi	r24, 0x01	; 1
     274:	c0 df       	rcall	.-128    	; 0x1f6 <turnOnLight>
			} else {
			turnOffLight(true); // Front light OFF if obstacle is far
     276:	02 c0       	rjmp	.+4      	; 0x27c <obstacleDetectionFrontTask+0x44>
     278:	81 e0       	ldi	r24, 0x01	; 1
     27a:	cd df       	rcall	.-102    	; 0x216 <turnOffLight>
		}
		
		vTaskDelay(xFrequency); // Wait for the next cycle
     27c:	6e e3       	ldi	r22, 0x3E	; 62
     27e:	70 e0       	ldi	r23, 0x00	; 0
     280:	80 e0       	ldi	r24, 0x00	; 0
     282:	90 e0       	ldi	r25, 0x00	; 0
     284:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <vTaskDelay>
	}
     288:	d7 cf       	rjmp	.-82     	; 0x238 <obstacleDetectionFrontTask>

0000028a <obstacleDetectionBackTask>:
	const TickType_t xFrequency = pdMS_TO_TICKS(1000); // Check every 2 seconds
	while (1) {
		uint16_t distance;
		
		// Try to take the back semaphore to read the distance
		if (xSemaphoreTake(xBackDistanceSemaphore, portMAX_DELAY) == pdTRUE) {
     28a:	4f ef       	ldi	r20, 0xFF	; 255
     28c:	5f ef       	ldi	r21, 0xFF	; 255
     28e:	ba 01       	movw	r22, r20
     290:	80 91 f7 11 	lds	r24, 0x11F7	; 0x8011f7 <xBackDistanceSemaphore>
     294:	90 91 f8 11 	lds	r25, 0x11F8	; 0x8011f8 <xBackDistanceSemaphore+0x1>
     298:	86 d7       	rcall	.+3852   	; 0x11a6 <xQueueSemaphoreTake>
     29a:	81 30       	cpi	r24, 0x01	; 1
     29c:	79 f4       	brne	.+30     	; 0x2bc <obstacleDetectionBackTask+0x32>
			distance = backMeasuredDistance;
     29e:	c0 91 32 03 	lds	r28, 0x0332	; 0x800332 <__data_end>
     2a2:	d0 91 33 03 	lds	r29, 0x0333	; 0x800333 <__data_end+0x1>
			xSemaphoreGive(xBackDistanceSemaphore); // Release the semaphore immediately after reading
     2a6:	00 e0       	ldi	r16, 0x00	; 0
     2a8:	20 e0       	ldi	r18, 0x00	; 0
     2aa:	30 e0       	ldi	r19, 0x00	; 0
     2ac:	a9 01       	movw	r20, r18
     2ae:	60 e0       	ldi	r22, 0x00	; 0
     2b0:	70 e0       	ldi	r23, 0x00	; 0
     2b2:	80 91 f7 11 	lds	r24, 0x11F7	; 0x8011f7 <xBackDistanceSemaphore>
     2b6:	90 91 f8 11 	lds	r25, 0x11F8	; 0x8011f8 <xBackDistanceSemaphore+0x1>
     2ba:	05 d6       	rcall	.+3082   	; 0xec6 <xQueueGenericSend>
		}
		
		// Now, take action based on the measured distance
		if (distance < THRESHOLD_DISTANCE) {
     2bc:	cc 32       	cpi	r28, 0x2C	; 44
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	d8 07       	cpc	r29, r24
			turnOnLight(false); // Back light ON if obstacle is close
     2c2:	18 f4       	brcc	.+6      	; 0x2ca <obstacleDetectionBackTask+0x40>
     2c4:	80 e0       	ldi	r24, 0x00	; 0
     2c6:	97 df       	rcall	.-210    	; 0x1f6 <turnOnLight>
			} else {
			turnOffLight(false); // Back light OFF if obstacle is far
     2c8:	02 c0       	rjmp	.+4      	; 0x2ce <obstacleDetectionBackTask+0x44>
     2ca:	80 e0       	ldi	r24, 0x00	; 0
     2cc:	a4 df       	rcall	.-184    	; 0x216 <turnOffLight>
		}
		
		vTaskDelay(xFrequency); // Wait for the next cycle
     2ce:	6e e3       	ldi	r22, 0x3E	; 62
     2d0:	70 e0       	ldi	r23, 0x00	; 0
     2d2:	80 e0       	ldi	r24, 0x00	; 0
     2d4:	90 e0       	ldi	r25, 0x00	; 0
     2d6:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <vTaskDelay>
	}
     2da:	d7 cf       	rjmp	.-82     	; 0x28a <obstacleDetectionBackTask>

000002dc <getCarSpeed>:
	PORTC &= ~(1 << LIGHT_PIN);
}

int getCarSpeed() {
	// Assume cars' speed ranges from 30 to 100 units
	return (rand() % 71) + 30;
     2dc:	0e 94 b4 1d 	call	0x3b68	; 0x3b68 <rand>
     2e0:	67 e4       	ldi	r22, 0x47	; 71
     2e2:	70 e0       	ldi	r23, 0x00	; 0
     2e4:	0e 94 ec 1b 	call	0x37d8	; 0x37d8 <__divmodhi4>
}
     2e8:	4e 96       	adiw	r24, 0x1e	; 30
     2ea:	08 95       	ret

000002ec <calculateCollisionRisk>:

// This function calculates the risk of collision
bool calculateCollisionRisk(uint16_t measuredDistance) {
     2ec:	ef 92       	push	r14
     2ee:	ff 92       	push	r15
     2f0:	0f 93       	push	r16
     2f2:	1f 93       	push	r17
     2f4:	cf 93       	push	r28
     2f6:	df 93       	push	r29
     2f8:	8c 01       	movw	r16, r24
	int otherCarSpeed = getCarSpeed(); // Simulate other car's speed
     2fa:	f0 df       	rcall	.-32     	; 0x2dc <getCarSpeed>
     2fc:	7c 01       	movw	r14, r24
	printf("\nOthers speed : %d", otherCarSpeed);
     2fe:	ff 92       	push	r15
     300:	8f 93       	push	r24
     302:	89 e5       	ldi	r24, 0x59	; 89
     304:	92 e0       	ldi	r25, 0x02	; 2
     306:	9f 93       	push	r25
     308:	8f 93       	push	r24
     30a:	0e 94 d6 1d 	call	0x3bac	; 0x3bac <printf>
	int ourCarSpeed = getCarSpeed(); // Get your car's current speed 
     30e:	e6 df       	rcall	.-52     	; 0x2dc <getCarSpeed>
     310:	ec 01       	movw	r28, r24
	printf("our speed : %d", ourCarSpeed);
     312:	df 93       	push	r29
     314:	8f 93       	push	r24
     316:	8c e6       	ldi	r24, 0x6C	; 108
     318:	92 e0       	ldi	r25, 0x02	; 2
     31a:	9f 93       	push	r25
     31c:	8f 93       	push	r24
     31e:	0e 94 d6 1d 	call	0x3bac	; 0x3bac <printf>

	// Calculate safe stopping distance (you would define the logic for this)
	int safeStoppingDistance = (ourCarSpeed + otherCarSpeed) * SAFE_DISTANCE_MULTIPLIER;
     322:	ce 0d       	add	r28, r14
     324:	df 1d       	adc	r29, r15
     326:	cc 0f       	add	r28, r28
     328:	dd 1f       	adc	r29, r29
	printf("safe Stopping Distance : %d", safeStoppingDistance);
     32a:	df 93       	push	r29
     32c:	cf 93       	push	r28
     32e:	8b e7       	ldi	r24, 0x7B	; 123
     330:	92 e0       	ldi	r25, 0x02	; 2
     332:	9f 93       	push	r25
     334:	8f 93       	push	r24
     336:	0e 94 d6 1d 	call	0x3bac	; 0x3bac <printf>
	printf(" measuredDistance  : %d", measuredDistance);
     33a:	1f 93       	push	r17
     33c:	0f 93       	push	r16
     33e:	87 e9       	ldi	r24, 0x97	; 151
     340:	92 e0       	ldi	r25, 0x02	; 2
     342:	9f 93       	push	r25
     344:	8f 93       	push	r24
     346:	0e 94 d6 1d 	call	0x3bac	; 0x3bac <printf>

	// Determine if there is a high risk of collision
	bool isHighRisk = measuredDistance < safeStoppingDistance;
     34a:	81 e0       	ldi	r24, 0x01	; 1
     34c:	2d b7       	in	r18, 0x3d	; 61
     34e:	3e b7       	in	r19, 0x3e	; 62
     350:	20 5f       	subi	r18, 0xF0	; 240
     352:	3f 4f       	sbci	r19, 0xFF	; 255
     354:	0f b6       	in	r0, 0x3f	; 63
     356:	f8 94       	cli
     358:	3e bf       	out	0x3e, r19	; 62
     35a:	0f be       	out	0x3f, r0	; 63
     35c:	2d bf       	out	0x3d, r18	; 61
     35e:	0c 17       	cp	r16, r28
     360:	1d 07       	cpc	r17, r29
     362:	08 f0       	brcs	.+2      	; 0x366 <calculateCollisionRisk+0x7a>
     364:	80 e0       	ldi	r24, 0x00	; 0

	return isHighRisk;
}
     366:	df 91       	pop	r29
     368:	cf 91       	pop	r28
     36a:	1f 91       	pop	r17
     36c:	0f 91       	pop	r16
     36e:	ff 90       	pop	r15
     370:	ef 90       	pop	r14
     372:	08 95       	ret

00000374 <distanceMeasurementFrontTask>:

// Definitions for distanceMeasurementFrontTask, distanceMeasurementBackTask, obstacleEventHandlerTask...

void distanceMeasurementFrontTask(void *pvParameters) {
	
	printf("Distance measurement Front task\n");
     374:	8f ea       	ldi	r24, 0xAF	; 175
     376:	92 e0       	ldi	r25, 0x02	; 2
     378:	0e 94 e9 1d 	call	0x3bd2	; 0x3bd2 <puts>
	// In every task before loop:
	#if (configUSE_APPLICATION_TASK_TAG == 1)
	// Set taskTag
	vTaskSetApplicationTaskTag(NULL, (void *)3 /*task id*/);
     37c:	63 e0       	ldi	r22, 0x03	; 3
     37e:	70 e0       	ldi	r23, 0x00	; 0
     380:	80 e0       	ldi	r24, 0x00	; 0
     382:	90 e0       	ldi	r25, 0x00	; 0
     384:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <vTaskSetApplicationTaskTag>
	
	const TickType_t xFrequency = pdMS_TO_TICKS(2000); // Period of 1 second in ticks

	while (1) {
		// Record the start time of the task.
		TickType_t xStartTime = xTaskGetTickCount();
     388:	0e 94 31 0c 	call	0x1862	; 0x1862 <xTaskGetTickCount>
     38c:	6b 01       	movw	r12, r22
     38e:	7c 01       	movw	r14, r24

		uint16_t distance = 0;

		// Acquire the semaphore before reading the shared variable.
		if (xSemaphoreTake(xFrontDistanceSemaphore, portMAX_DELAY) == pdTRUE) {
     390:	4f ef       	ldi	r20, 0xFF	; 255
     392:	5f ef       	ldi	r21, 0xFF	; 255
     394:	ba 01       	movw	r22, r20
     396:	80 91 fb 11 	lds	r24, 0x11FB	; 0x8011fb <xFrontDistanceSemaphore>
     39a:	90 91 fc 11 	lds	r25, 0x11FC	; 0x8011fc <xFrontDistanceSemaphore+0x1>
     39e:	03 d7       	rcall	.+3590   	; 0x11a6 <xQueueSemaphoreTake>
     3a0:	81 30       	cpi	r24, 0x01	; 1
     3a2:	a9 f4       	brne	.+42     	; 0x3ce <distanceMeasurementFrontTask+0x5a>
			frontMeasuredDistance = hc_sr04_takeMeasurement(true);
     3a4:	a8 d0       	rcall	.+336    	; 0x4f6 <hc_sr04_takeMeasurement>
     3a6:	90 93 35 03 	sts	0x0335, r25	; 0x800335 <frontMeasuredDistance+0x1>
     3aa:	80 93 34 03 	sts	0x0334, r24	; 0x800334 <frontMeasuredDistance>
     3ae:	c0 91 34 03 	lds	r28, 0x0334	; 0x800334 <frontMeasuredDistance>
			distance = frontMeasuredDistance;
     3b2:	d0 91 35 03 	lds	r29, 0x0335	; 0x800335 <frontMeasuredDistance+0x1>
     3b6:	00 e0       	ldi	r16, 0x00	; 0
			// Release the semaphore as soon as the shared variable is read.
			xSemaphoreGive(xFrontDistanceSemaphore);
     3b8:	20 e0       	ldi	r18, 0x00	; 0
     3ba:	30 e0       	ldi	r19, 0x00	; 0
     3bc:	a9 01       	movw	r20, r18
     3be:	60 e0       	ldi	r22, 0x00	; 0
     3c0:	70 e0       	ldi	r23, 0x00	; 0
     3c2:	80 91 fb 11 	lds	r24, 0x11FB	; 0x8011fb <xFrontDistanceSemaphore>
     3c6:	90 91 fc 11 	lds	r25, 0x11FC	; 0x8011fc <xFrontDistanceSemaphore+0x1>
     3ca:	7d d5       	rcall	.+2810   	; 0xec6 <xQueueGenericSend>
     3cc:	02 c0       	rjmp	.+4      	; 0x3d2 <distanceMeasurementFrontTask+0x5e>
     3ce:	c0 e0       	ldi	r28, 0x00	; 0

	while (1) {
		// Record the start time of the task.
		TickType_t xStartTime = xTaskGetTickCount();

		uint16_t distance = 0;
     3d0:	d0 e0       	ldi	r29, 0x00	; 0
			// Release the semaphore as soon as the shared variable is read.
			xSemaphoreGive(xFrontDistanceSemaphore);
		}

		// Calculate the collision risk.
		bool isHighRisk = calculateCollisionRisk(distance);
     3d2:	ce 01       	movw	r24, r28
     3d4:	8b df       	rcall	.-234    	; 0x2ec <calculateCollisionRisk>
     3d6:	88 23       	and	r24, r24
		if (isHighRisk) {
     3d8:	39 f0       	breq	.+14     	; 0x3e8 <distanceMeasurementFrontTask+0x74>
     3da:	8f ec       	ldi	r24, 0xCF	; 207
			printf("RISK!! RISK!!\n");
     3dc:	92 e0       	ldi	r25, 0x02	; 2
     3de:	0e 94 e9 1d 	call	0x3bd2	; 0x3bd2 <puts>
			// Take immediate action, such as notifying for risk.
			turnOnLight(false); // Indicate risk with the back light.
     3e2:	80 e0       	ldi	r24, 0x00	; 0
     3e4:	08 df       	rcall	.-496    	; 0x1f6 <turnOnLight>
     3e6:	02 c0       	rjmp	.+4      	; 0x3ec <distanceMeasurementFrontTask+0x78>
			} else {
			turnOffLight(false); // Turn off the back light if no risk.
     3e8:	80 e0       	ldi	r24, 0x00	; 0
     3ea:	15 df       	rcall	.-470    	; 0x216 <turnOffLight>
     3ec:	0e 94 31 0c 	call	0x1862	; 0x1862 <xTaskGetTickCount>
		}

		// Task code finished execution, now wait until the end of the period.
		// Calculate time spent in task execution.
		TickType_t xTimeSpent = xTaskGetTickCount() - xStartTime;
     3f0:	dc 01       	movw	r26, r24
     3f2:	cb 01       	movw	r24, r22
     3f4:	8c 19       	sub	r24, r12
     3f6:	9d 09       	sbc	r25, r13
     3f8:	ae 09       	sbc	r26, r14
     3fa:	bf 09       	sbc	r27, r15
     3fc:	8c 37       	cpi	r24, 0x7C	; 124

		// Calculate the delay for the task to wait to complete the period.
		TickType_t xDelay = (xTimeSpent < xFrequency) ? (xFrequency - xTimeSpent) : 0;
     3fe:	91 05       	cpc	r25, r1
     400:	a1 05       	cpc	r26, r1
     402:	b1 05       	cpc	r27, r1
     404:	68 f4       	brcc	.+26     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
     406:	0c e7       	ldi	r16, 0x7C	; 124
     408:	10 e0       	ldi	r17, 0x00	; 0
     40a:	20 e0       	ldi	r18, 0x00	; 0
     40c:	30 e0       	ldi	r19, 0x00	; 0
     40e:	68 01       	movw	r12, r16
     410:	79 01       	movw	r14, r18
     412:	c8 1a       	sub	r12, r24
     414:	d9 0a       	sbc	r13, r25
     416:	ea 0a       	sbc	r14, r26
     418:	fb 0a       	sbc	r15, r27
     41a:	c7 01       	movw	r24, r14
     41c:	b6 01       	movw	r22, r12
     41e:	03 c0       	rjmp	.+6      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
     420:	60 e0       	ldi	r22, 0x00	; 0
     422:	70 e0       	ldi	r23, 0x00	; 0
     424:	cb 01       	movw	r24, r22
     426:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <vTaskDelay>

		// Delay the task for the remaining period.
		vTaskDelay(xDelay);
     42a:	ae cf       	rjmp	.-164    	; 0x388 <distanceMeasurementFrontTask+0x14>

0000042c <distanceMeasurementBackTask>:
	}
     42c:	8d ed       	ldi	r24, 0xDD	; 221
}

void distanceMeasurementBackTask(void *pvParameters) {
	
	printf("Distance measurement back task ");
     42e:	92 e0       	ldi	r25, 0x02	; 2
     430:	9f 93       	push	r25
     432:	8f 93       	push	r24
     434:	0e 94 d6 1d 	call	0x3bac	; 0x3bac <printf>
	// In every task before loop:
	#if (configUSE_APPLICATION_TASK_TAG == 1)
	// Set taskTag
	vTaskSetApplicationTaskTag(NULL, (void *)1 /*task id*/);
     438:	61 e0       	ldi	r22, 0x01	; 1
     43a:	70 e0       	ldi	r23, 0x00	; 0
     43c:	80 e0       	ldi	r24, 0x00	; 0
     43e:	90 e0       	ldi	r25, 0x00	; 0
     440:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <vTaskSetApplicationTaskTag>
     444:	0f 90       	pop	r0
     446:	0f 90       	pop	r0
	
	const TickType_t xFrequency = pdMS_TO_TICKS(2000); // Period of 1 second in ticks

	while (1) {
		// Record the start time of the task.
		TickType_t xStartTime = xTaskGetTickCount();
     448:	0e 94 31 0c 	call	0x1862	; 0x1862 <xTaskGetTickCount>
     44c:	6b 01       	movw	r12, r22
     44e:	7c 01       	movw	r14, r24
		uint16_t distance = 0;

		// Acquire the semaphore before updating the shared variable.
		if (xSemaphoreTake(xBackDistanceSemaphore, portMAX_DELAY) == pdTRUE) {
     450:	4f ef       	ldi	r20, 0xFF	; 255
     452:	5f ef       	ldi	r21, 0xFF	; 255
     454:	ba 01       	movw	r22, r20
     456:	80 91 f7 11 	lds	r24, 0x11F7	; 0x8011f7 <xBackDistanceSemaphore>
     45a:	90 91 f8 11 	lds	r25, 0x11F8	; 0x8011f8 <xBackDistanceSemaphore+0x1>
     45e:	a3 d6       	rcall	.+3398   	; 0x11a6 <xQueueSemaphoreTake>
     460:	81 30       	cpi	r24, 0x01	; 1
     462:	59 f4       	brne	.+22     	; 0x47a <distanceMeasurementBackTask+0x4e>
			// Perform the distance measurement.
			backMeasuredDistance  = hc_sr04_takeMeasurement(false);
     464:	80 e0       	ldi	r24, 0x00	; 0
     466:	47 d0       	rcall	.+142    	; 0x4f6 <hc_sr04_takeMeasurement>
     468:	90 93 33 03 	sts	0x0333, r25	; 0x800333 <__data_end+0x1>
     46c:	80 93 32 03 	sts	0x0332, r24	; 0x800332 <__data_end>
			distance = backMeasuredDistance;
     470:	80 91 32 03 	lds	r24, 0x0332	; 0x800332 <__data_end>
     474:	90 91 33 03 	lds	r25, 0x0333	; 0x800333 <__data_end+0x1>
     478:	02 c0       	rjmp	.+4      	; 0x47e <distanceMeasurementBackTask+0x52>
	const TickType_t xFrequency = pdMS_TO_TICKS(2000); // Period of 1 second in ticks

	while (1) {
		// Record the start time of the task.
		TickType_t xStartTime = xTaskGetTickCount();
		uint16_t distance = 0;
     47a:	80 e0       	ldi	r24, 0x00	; 0
			// Perform the distance measurement.
			backMeasuredDistance  = hc_sr04_takeMeasurement(false);
			distance = backMeasuredDistance;
		}
		
		bool isHighRisk = calculateCollisionRisk(distance);
     47c:	90 e0       	ldi	r25, 0x00	; 0
     47e:	36 df       	rcall	.-404    	; 0x2ec <calculateCollisionRisk>
		if (isHighRisk) {
     480:	88 23       	and	r24, r24
     482:	39 f0       	breq	.+14     	; 0x492 <distanceMeasurementBackTask+0x66>
			printf("RISK!! RISK!!\n");
     484:	8f ec       	ldi	r24, 0xCF	; 207
     486:	92 e0       	ldi	r25, 0x02	; 2
     488:	0e 94 e9 1d 	call	0x3bd2	; 0x3bd2 <puts>
			// Take immediate action, such as notifying for risk.
			turnOnLight(true); // Indicate risk with the front light.
     48c:	81 e0       	ldi	r24, 0x01	; 1
     48e:	b3 de       	rcall	.-666    	; 0x1f6 <turnOnLight>
			} else {
			turnOffLight(true); // Turn off the front light if no risk.
     490:	02 c0       	rjmp	.+4      	; 0x496 <distanceMeasurementBackTask+0x6a>
     492:	81 e0       	ldi	r24, 0x01	; 1
     494:	c0 de       	rcall	.-640    	; 0x216 <turnOffLight>
		}
		
		// Task code finished execution, now wait until the end of the period.
		// Calculate time spent in task execution.
		TickType_t xTimeSpent = xTaskGetTickCount() - xStartTime;
     496:	0e 94 31 0c 	call	0x1862	; 0x1862 <xTaskGetTickCount>
     49a:	dc 01       	movw	r26, r24
     49c:	cb 01       	movw	r24, r22
     49e:	8c 19       	sub	r24, r12
     4a0:	9d 09       	sbc	r25, r13
     4a2:	ae 09       	sbc	r26, r14
     4a4:	bf 09       	sbc	r27, r15

		// Calculate the delay for the task to wait to complete the period.
		TickType_t xDelay = (xTimeSpent < xFrequency) ? (xFrequency - xTimeSpent) : 0;
     4a6:	8c 37       	cpi	r24, 0x7C	; 124
     4a8:	91 05       	cpc	r25, r1
     4aa:	a1 05       	cpc	r26, r1
     4ac:	b1 05       	cpc	r27, r1
     4ae:	68 f4       	brcc	.+26     	; 0x4ca <distanceMeasurementBackTask+0x9e>
     4b0:	0c e7       	ldi	r16, 0x7C	; 124
     4b2:	10 e0       	ldi	r17, 0x00	; 0
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	30 e0       	ldi	r19, 0x00	; 0
     4b8:	68 01       	movw	r12, r16
     4ba:	79 01       	movw	r14, r18
     4bc:	c8 1a       	sub	r12, r24
     4be:	d9 0a       	sbc	r13, r25
     4c0:	ea 0a       	sbc	r14, r26
     4c2:	fb 0a       	sbc	r15, r27
     4c4:	c7 01       	movw	r24, r14
     4c6:	b6 01       	movw	r22, r12
     4c8:	03 c0       	rjmp	.+6      	; 0x4d0 <distanceMeasurementBackTask+0xa4>
     4ca:	60 e0       	ldi	r22, 0x00	; 0
     4cc:	70 e0       	ldi	r23, 0x00	; 0
     4ce:	cb 01       	movw	r24, r22

		// Delay the task for the remaining period.
		vTaskDelay(xDelay);
     4d0:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <vTaskDelay>
	}
     4d4:	b9 cf       	rjmp	.-142    	; 0x448 <distanceMeasurementBackTask+0x1c>

000004d6 <hc_sr04_init>:
#define P_EchoFront PC4
#define P_EchoBack PC3
void hc_sr04_init()
{
    //Vcc
    DDR_Vcc|=(1 << P_Vcc);
     4d6:	87 b1       	in	r24, 0x07	; 7
     4d8:	81 60       	ori	r24, 0x01	; 1
     4da:	87 b9       	out	0x07, r24	; 7
    PORT_Vcc|=(1 << P_Vcc);
     4dc:	88 b1       	in	r24, 0x08	; 8
     4de:	81 60       	ori	r24, 0x01	; 1
     4e0:	88 b9       	out	0x08, r24	; 8

    //GND
    DDR_Gnd|=(1 << P_Gnd);
     4e2:	87 b1       	in	r24, 0x07	; 7
     4e4:	80 64       	ori	r24, 0x40	; 64
     4e6:	87 b9       	out	0x07, r24	; 7

    //Trigger
    DDR_Trig|=(1 << P_TrigFront);
     4e8:	87 b1       	in	r24, 0x07	; 7
     4ea:	84 60       	ori	r24, 0x04	; 4
     4ec:	87 b9       	out	0x07, r24	; 7
	DDR_Trig|=(1<< P_TrigBack);
     4ee:	87 b1       	in	r24, 0x07	; 7
     4f0:	82 60       	ori	r24, 0x02	; 2
     4f2:	87 b9       	out	0x07, r24	; 7
     4f4:	08 95       	ret

000004f6 <hc_sr04_takeMeasurement>:
//     */
//     cnt = cnt * 343UL / 125UL;
// 
//     return cnt;
// }
uint16_t hc_sr04_takeMeasurement(bool isFrontSensor) {
     4f6:	0f 93       	push	r16
     4f8:	1f 93       	push	r17
     4fa:	cf 93       	push	r28
     4fc:	df 93       	push	r29
	uint16_t cnt = 0;
	uint8_t trigPin = isFrontSensor ? P_TrigFront : P_TrigBack; // Choose the correct pin based on the sensor
     4fe:	88 23       	and	r24, r24
     500:	11 f0       	breq	.+4      	; 0x506 <hc_sr04_takeMeasurement+0x10>
     502:	32 e0       	ldi	r19, 0x02	; 2
     504:	01 c0       	rjmp	.+2      	; 0x508 <hc_sr04_takeMeasurement+0x12>
     506:	31 e0       	ldi	r19, 0x01	; 1
	uint8_t echoPin = isFrontSensor ? P_EchoFront : P_EchoBack; // Choose the correct pin based on the sensor
     508:	88 23       	and	r24, r24
     50a:	11 f0       	breq	.+4      	; 0x510 <hc_sr04_takeMeasurement+0x1a>
     50c:	04 e0       	ldi	r16, 0x04	; 4
     50e:	01 c0       	rjmp	.+2      	; 0x512 <hc_sr04_takeMeasurement+0x1c>
     510:	03 e0       	ldi	r16, 0x03	; 3
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     512:	25 e3       	ldi	r18, 0x35	; 53
     514:	2a 95       	dec	r18
     516:	f1 f7       	brne	.-4      	; 0x514 <hc_sr04_takeMeasurement+0x1e>
     518:	00 00       	nop

	_delay_us(10);
	PORT_trig |= (1 << trigPin); // Trigger the measurement
     51a:	28 b1       	in	r18, 0x08	; 8
     51c:	81 e0       	ldi	r24, 0x01	; 1
     51e:	90 e0       	ldi	r25, 0x00	; 0
     520:	02 c0       	rjmp	.+4      	; 0x526 <hc_sr04_takeMeasurement+0x30>
     522:	88 0f       	add	r24, r24
     524:	99 1f       	adc	r25, r25
     526:	3a 95       	dec	r19
     528:	e2 f7       	brpl	.-8      	; 0x522 <hc_sr04_takeMeasurement+0x2c>
     52a:	92 2f       	mov	r25, r18
     52c:	98 2b       	or	r25, r24
     52e:	98 b9       	out	0x08, r25	; 8
     530:	25 e3       	ldi	r18, 0x35	; 53
     532:	2a 95       	dec	r18
     534:	f1 f7       	brne	.-4      	; 0x532 <hc_sr04_takeMeasurement+0x3c>
     536:	00 00       	nop
	_delay_us(10);
	PORT_trig &= ~(1 << trigPin);
     538:	98 b1       	in	r25, 0x08	; 8
     53a:	80 95       	com	r24
     53c:	89 23       	and	r24, r25
     53e:	88 b9       	out	0x08, r24	; 8

	uint8_t TCCR1B_state = TCCR1B; // Save the current state of TCCR1B
     540:	e1 e8       	ldi	r30, 0x81	; 129
     542:	f0 e0       	ldi	r31, 0x00	; 0
     544:	10 81       	ld	r17, Z

	// Set the Timer/Counter1 prescaler to 256
	TCCR1B = (1 << CS12);
     546:	84 e0       	ldi	r24, 0x04	; 4
     548:	80 83       	st	Z, r24
	
	TCNT1 = 0; // Reset the timer
     54a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
     54e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
	while (!(PIN_Echo & (1 << echoPin))) {
     552:	10 c0       	rjmp	.+32     	; 0x574 <hc_sr04_takeMeasurement+0x7e>
		// Check for timeout (100ms)
		if (TCNT1 >= (F_CPU / 256) * 0.1) {
     554:	60 91 84 00 	lds	r22, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
     558:	70 91 85 00 	lds	r23, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
     55c:	80 e0       	ldi	r24, 0x00	; 0
     55e:	90 e0       	ldi	r25, 0x00	; 0
     560:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <__floatunsisf>
     564:	20 e0       	ldi	r18, 0x00	; 0
     566:	30 e5       	ldi	r19, 0x50	; 80
     568:	43 ec       	ldi	r20, 0xC3	; 195
     56a:	55 e4       	ldi	r21, 0x45	; 69
     56c:	0e 94 49 15 	call	0x2a92	; 0x2a92 <__gesf2>
     570:	88 23       	and	r24, r24
     572:	e4 f5       	brge	.+120    	; 0x5ec <hc_sr04_takeMeasurement+0xf6>

	// Set the Timer/Counter1 prescaler to 256
	TCCR1B = (1 << CS12);
	
	TCNT1 = 0; // Reset the timer
	while (!(PIN_Echo & (1 << echoPin))) {
     574:	86 b1       	in	r24, 0x06	; 6
     576:	c0 2f       	mov	r28, r16
     578:	90 e0       	ldi	r25, 0x00	; 0
     57a:	00 2e       	mov	r0, r16
     57c:	02 c0       	rjmp	.+4      	; 0x582 <hc_sr04_takeMeasurement+0x8c>
     57e:	95 95       	asr	r25
     580:	87 95       	ror	r24
     582:	0a 94       	dec	r0
     584:	e2 f7       	brpl	.-8      	; 0x57e <hc_sr04_takeMeasurement+0x88>
     586:	80 ff       	sbrs	r24, 0
     588:	e5 cf       	rjmp	.-54     	; 0x554 <hc_sr04_takeMeasurement+0x5e>
			return 0; // Sensor is not working
		}
	}

	// Wait for the echo pin to go high
	TCNT1 = 0; // Reset the timer for the high signal duration
     58a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
     58e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
	while (PIN_Echo & (1 << echoPin)) {
     592:	10 c0       	rjmp	.+32     	; 0x5b4 <hc_sr04_takeMeasurement+0xbe>
		// Check for timer overflow (24ms)
		if (TCNT1 >= (F_CPU / 256) * 0.024) {
     594:	60 91 84 00 	lds	r22, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
     598:	70 91 85 00 	lds	r23, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
     59c:	80 e0       	ldi	r24, 0x00	; 0
     59e:	90 e0       	ldi	r25, 0x00	; 0
     5a0:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <__floatunsisf>
     5a4:	20 e0       	ldi	r18, 0x00	; 0
     5a6:	30 e8       	ldi	r19, 0x80	; 128
     5a8:	4b eb       	ldi	r20, 0xBB	; 187
     5aa:	54 e4       	ldi	r21, 0x44	; 68
     5ac:	0e 94 49 15 	call	0x2a92	; 0x2a92 <__gesf2>
     5b0:	88 23       	and	r24, r24
     5b2:	54 f4       	brge	.+20     	; 0x5c8 <hc_sr04_takeMeasurement+0xd2>
		}
	}

	// Wait for the echo pin to go high
	TCNT1 = 0; // Reset the timer for the high signal duration
	while (PIN_Echo & (1 << echoPin)) {
     5b4:	86 b1       	in	r24, 0x06	; 6
     5b6:	90 e0       	ldi	r25, 0x00	; 0
     5b8:	0c 2e       	mov	r0, r28
     5ba:	02 c0       	rjmp	.+4      	; 0x5c0 <hc_sr04_takeMeasurement+0xca>
     5bc:	95 95       	asr	r25
     5be:	87 95       	ror	r24
     5c0:	0a 94       	dec	r0
     5c2:	e2 f7       	brpl	.-8      	; 0x5bc <hc_sr04_takeMeasurement+0xc6>
     5c4:	80 fd       	sbrc	r24, 0
     5c6:	e6 cf       	rjmp	.-52     	; 0x594 <hc_sr04_takeMeasurement+0x9e>
		// Check for timer overflow (24ms)
		if (TCNT1 >= (F_CPU / 256) * 0.024) {
			break; // Timer overflowed
		}
	}
	cnt = TCNT1; // Save the duration of the high signal
     5c8:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
     5cc:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>

	TCCR1B = TCCR1B_state; // Restore TCCR1B state
     5d0:	10 93 81 00 	sts	0x0081, r17	; 0x800081 <__TEXT_REGION_LENGTH__+0x7c0081>

	// Distance calculation based on the duration of the high signal
	cnt = cnt * 343UL / 125UL;
     5d4:	a7 e5       	ldi	r26, 0x57	; 87
     5d6:	b1 e0       	ldi	r27, 0x01	; 1
     5d8:	0e 94 29 1c 	call	0x3852	; 0x3852 <__umulhisi3>
     5dc:	2d e7       	ldi	r18, 0x7D	; 125
     5de:	30 e0       	ldi	r19, 0x00	; 0
     5e0:	40 e0       	ldi	r20, 0x00	; 0
     5e2:	50 e0       	ldi	r21, 0x00	; 0
     5e4:	0e 94 ff 1b 	call	0x37fe	; 0x37fe <__udivmodsi4>

	return cnt;
     5e8:	c9 01       	movw	r24, r18
     5ea:	02 c0       	rjmp	.+4      	; 0x5f0 <hc_sr04_takeMeasurement+0xfa>
	
	TCNT1 = 0; // Reset the timer
	while (!(PIN_Echo & (1 << echoPin))) {
		// Check for timeout (100ms)
		if (TCNT1 >= (F_CPU / 256) * 0.1) {
			return 0; // Sensor is not working
     5ec:	80 e0       	ldi	r24, 0x00	; 0
     5ee:	90 e0       	ldi	r25, 0x00	; 0

	// Distance calculation based on the duration of the high signal
	cnt = cnt * 343UL / 125UL;

	return cnt;
}
     5f0:	df 91       	pop	r29
     5f2:	cf 91       	pop	r28
     5f4:	1f 91       	pop	r17
     5f6:	0f 91       	pop	r16
     5f8:	08 95       	ret

000005fa <trace_init>:
	 #if (configUseR2RTrace == 1)
	 #ifdef HAL_DEFS_H_

	 #else
		// Used on VIA MEGA Shield rev. 2.0.0
		DDRK |= _BV(DDK0) | _BV(DDK1) | _BV(DDK2) | _BV(DDK3);
     5fa:	e7 e0       	ldi	r30, 0x07	; 7
     5fc:	f1 e0       	ldi	r31, 0x01	; 1
     5fe:	80 81       	ld	r24, Z
     600:	8f 60       	ori	r24, 0x0F	; 15
     602:	80 83       	st	Z, r24
     604:	08 95       	ret

00000606 <task_switch_in>:
	void task_switch_in(uint8_t task_no) {
		 #ifdef HAL_DEFS_H_

		 #else
		 // Used on VIA MEGA Shield rev. 2.0.0
		 PORTK &= 0b11110000;
     606:	e8 e0       	ldi	r30, 0x08	; 8
     608:	f1 e0       	ldi	r31, 0x01	; 1
     60a:	90 81       	ld	r25, Z
     60c:	90 7f       	andi	r25, 0xF0	; 240
     60e:	90 83       	st	Z, r25
		 PORTK |= (task_no & 0b00001111);
     610:	90 81       	ld	r25, Z
     612:	8f 70       	andi	r24, 0x0F	; 15
     614:	98 2b       	or	r25, r24
     616:	90 83       	st	Z, r25
     618:	08 95       	ret

0000061a <task_switch_out>:
	void task_switch_out(uint8_t task_no) {
		#ifdef HAL_DEFS_H_

		#else
		// Used on VIA MEGA Shield rev. 2.0.0
		PORTK &= 0b11110000;
     61a:	e8 e0       	ldi	r30, 0x08	; 8
     61c:	f1 e0       	ldi	r31, 0x01	; 1
     61e:	80 81       	ld	r24, Z
     620:	80 7f       	andi	r24, 0xF0	; 240
     622:	80 83       	st	Z, r24
     624:	08 95       	ret

00000626 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    EventGroupHandle_t xEventGroupCreate( void )
    {
     626:	cf 93       	push	r28
     628:	df 93       	push	r29
         * TickType_t alignment requirements the cast is safe.  In other cases,
         * where the natural word size of the architecture is less than
         * sizeof( TickType_t ), the TickType_t variables will be accessed in two
         * or more reads operations, and the alignment requirements is only that
         * of each individual read. */
        pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
     62a:	8f e0       	ldi	r24, 0x0F	; 15
     62c:	90 e0       	ldi	r25, 0x00	; 0
     62e:	81 d0       	rcall	.+258    	; 0x732 <pvPortMalloc>
     630:	ec 01       	movw	r28, r24

        if( pxEventBits != NULL )
     632:	00 97       	sbiw	r24, 0x00	; 0
     634:	39 f0       	breq	.+14     	; 0x644 <xEventGroupCreate+0x1e>
        {
            pxEventBits->uxEventBits = 0;
     636:	fc 01       	movw	r30, r24
     638:	11 92       	st	Z+, r1
     63a:	11 92       	st	Z+, r1
     63c:	11 92       	st	Z+, r1
     63e:	11 92       	st	Z+, r1
            vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
     640:	cf 01       	movw	r24, r30
     642:	5c d1       	rcall	.+696    	; 0x8fc <vListInitialise>
        {
            traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
        }

        return pxEventBits;
    }
     644:	ce 01       	movw	r24, r28
     646:	df 91       	pop	r29
     648:	cf 91       	pop	r28
     64a:	08 95       	ret

0000064c <prvHeapInit>:

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     64c:	e2 e4       	ldi	r30, 0x42	; 66
     64e:	f3 e0       	ldi	r31, 0x03	; 3
     650:	a6 e4       	ldi	r26, 0x46	; 70
     652:	b3 e0       	ldi	r27, 0x03	; 3
     654:	b1 83       	std	Z+1, r27	; 0x01
     656:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
     658:	13 82       	std	Z+3, r1	; 0x03
     65a:	12 82       	std	Z+2, r1	; 0x02

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
     65c:	ee ee       	ldi	r30, 0xEE	; 238
     65e:	f0 e1       	ldi	r31, 0x10	; 16
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
     660:	f0 93 41 03 	sts	0x0341, r31	; 0x800341 <pxEnd+0x1>
     664:	e0 93 40 03 	sts	0x0340, r30	; 0x800340 <pxEnd>
    pxEnd->xBlockSize = 0;
     668:	13 82       	std	Z+3, r1	; 0x03
     66a:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
     66c:	11 82       	std	Z+1, r1	; 0x01
     66e:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     670:	88 ea       	ldi	r24, 0xA8	; 168
     672:	9d e0       	ldi	r25, 0x0D	; 13
     674:	13 96       	adiw	r26, 0x03	; 3
     676:	9c 93       	st	X, r25
     678:	8e 93       	st	-X, r24
     67a:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     67c:	ed 93       	st	X+, r30
     67e:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     680:	90 93 3d 03 	sts	0x033D, r25	; 0x80033d <xMinimumEverFreeBytesRemaining+0x1>
     684:	80 93 3c 03 	sts	0x033C, r24	; 0x80033c <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     688:	90 93 3f 03 	sts	0x033F, r25	; 0x80033f <xFreeBytesRemaining+0x1>
     68c:	80 93 3e 03 	sts	0x033E, r24	; 0x80033e <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     690:	80 e0       	ldi	r24, 0x00	; 0
     692:	90 e8       	ldi	r25, 0x80	; 128
     694:	90 93 37 03 	sts	0x0337, r25	; 0x800337 <xBlockAllocatedBit+0x1>
     698:	80 93 36 03 	sts	0x0336, r24	; 0x800336 <xBlockAllocatedBit>
     69c:	08 95       	ret

0000069e <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
     69e:	cf 93       	push	r28
     6a0:	df 93       	push	r29
     6a2:	ec 01       	movw	r28, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     6a4:	a2 e4       	ldi	r26, 0x42	; 66
     6a6:	b3 e0       	ldi	r27, 0x03	; 3
     6a8:	01 c0       	rjmp	.+2      	; 0x6ac <prvInsertBlockIntoFreeList+0xe>
     6aa:	df 01       	movw	r26, r30
     6ac:	ed 91       	ld	r30, X+
     6ae:	fc 91       	ld	r31, X
     6b0:	11 97       	sbiw	r26, 0x01	; 1
     6b2:	ec 17       	cp	r30, r28
     6b4:	fd 07       	cpc	r31, r29
     6b6:	c8 f3       	brcs	.-14     	; 0x6aa <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     6b8:	12 96       	adiw	r26, 0x02	; 2
     6ba:	8d 91       	ld	r24, X+
     6bc:	9c 91       	ld	r25, X
     6be:	13 97       	sbiw	r26, 0x03	; 3
     6c0:	9d 01       	movw	r18, r26
     6c2:	28 0f       	add	r18, r24
     6c4:	39 1f       	adc	r19, r25
     6c6:	c2 17       	cp	r28, r18
     6c8:	d3 07       	cpc	r29, r19
     6ca:	49 f4       	brne	.+18     	; 0x6de <prvInsertBlockIntoFreeList+0x40>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     6cc:	2a 81       	ldd	r18, Y+2	; 0x02
     6ce:	3b 81       	ldd	r19, Y+3	; 0x03
     6d0:	82 0f       	add	r24, r18
     6d2:	93 1f       	adc	r25, r19
     6d4:	13 96       	adiw	r26, 0x03	; 3
     6d6:	9c 93       	st	X, r25
     6d8:	8e 93       	st	-X, r24
     6da:	12 97       	sbiw	r26, 0x02	; 2
        pxBlockToInsert = pxIterator;
     6dc:	ed 01       	movw	r28, r26

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     6de:	8a 81       	ldd	r24, Y+2	; 0x02
     6e0:	9b 81       	ldd	r25, Y+3	; 0x03
     6e2:	9e 01       	movw	r18, r28
     6e4:	28 0f       	add	r18, r24
     6e6:	39 1f       	adc	r19, r25
     6e8:	e2 17       	cp	r30, r18
     6ea:	f3 07       	cpc	r31, r19
     6ec:	c1 f4       	brne	.+48     	; 0x71e <prvInsertBlockIntoFreeList+0x80>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
     6ee:	20 91 40 03 	lds	r18, 0x0340	; 0x800340 <pxEnd>
     6f2:	30 91 41 03 	lds	r19, 0x0341	; 0x800341 <pxEnd+0x1>
     6f6:	e2 17       	cp	r30, r18
     6f8:	f3 07       	cpc	r31, r19
     6fa:	71 f0       	breq	.+28     	; 0x718 <prvInsertBlockIntoFreeList+0x7a>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     6fc:	22 81       	ldd	r18, Z+2	; 0x02
     6fe:	33 81       	ldd	r19, Z+3	; 0x03
     700:	82 0f       	add	r24, r18
     702:	93 1f       	adc	r25, r19
     704:	9b 83       	std	Y+3, r25	; 0x03
     706:	8a 83       	std	Y+2, r24	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     708:	ed 91       	ld	r30, X+
     70a:	fc 91       	ld	r31, X
     70c:	11 97       	sbiw	r26, 0x01	; 1
     70e:	80 81       	ld	r24, Z
     710:	91 81       	ldd	r25, Z+1	; 0x01
     712:	99 83       	std	Y+1, r25	; 0x01
     714:	88 83       	st	Y, r24
     716:	05 c0       	rjmp	.+10     	; 0x722 <prvInsertBlockIntoFreeList+0x84>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
     718:	39 83       	std	Y+1, r19	; 0x01
     71a:	28 83       	st	Y, r18
     71c:	02 c0       	rjmp	.+4      	; 0x722 <prvInsertBlockIntoFreeList+0x84>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     71e:	f9 83       	std	Y+1, r31	; 0x01
     720:	e8 83       	st	Y, r30

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
     722:	ca 17       	cp	r28, r26
     724:	db 07       	cpc	r29, r27
     726:	11 f0       	breq	.+4      	; 0x72c <prvInsertBlockIntoFreeList+0x8e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
     728:	cd 93       	st	X+, r28
     72a:	dc 93       	st	X, r29
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
     72c:	df 91       	pop	r29
     72e:	cf 91       	pop	r28
     730:	08 95       	ret

00000732 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     732:	ef 92       	push	r14
     734:	ff 92       	push	r15
     736:	0f 93       	push	r16
     738:	1f 93       	push	r17
     73a:	cf 93       	push	r28
     73c:	df 93       	push	r29
     73e:	8c 01       	movw	r16, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     740:	0e 94 2b 0c 	call	0x1856	; 0x1856 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
     744:	80 91 40 03 	lds	r24, 0x0340	; 0x800340 <pxEnd>
     748:	90 91 41 03 	lds	r25, 0x0341	; 0x800341 <pxEnd+0x1>
     74c:	89 2b       	or	r24, r25
     74e:	09 f4       	brne	.+2      	; 0x752 <pvPortMalloc+0x20>
        {
            prvHeapInit();
     750:	7d df       	rcall	.-262    	; 0x64c <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     752:	80 91 36 03 	lds	r24, 0x0336	; 0x800336 <xBlockAllocatedBit>
     756:	90 91 37 03 	lds	r25, 0x0337	; 0x800337 <xBlockAllocatedBit+0x1>
     75a:	80 23       	and	r24, r16
     75c:	91 23       	and	r25, r17
     75e:	89 2b       	or	r24, r25
     760:	09 f0       	breq	.+2      	; 0x764 <pvPortMalloc+0x32>
     762:	76 c0       	rjmp	.+236    	; 0x850 <pvPortMalloc+0x11e>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     764:	01 15       	cp	r16, r1
     766:	11 05       	cpc	r17, r1
     768:	49 f0       	breq	.+18     	; 0x77c <pvPortMalloc+0x4a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
     76a:	c8 01       	movw	r24, r16
     76c:	04 96       	adiw	r24, 0x04	; 4
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     76e:	08 17       	cp	r16, r24
     770:	19 07       	cpc	r17, r25
     772:	18 f0       	brcs	.+6      	; 0x77a <pvPortMalloc+0x48>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
     774:	00 e0       	ldi	r16, 0x00	; 0
     776:	10 e0       	ldi	r17, 0x00	; 0
     778:	01 c0       	rjmp	.+2      	; 0x77c <pvPortMalloc+0x4a>
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
            {
                xWantedSize += xHeapStructSize;
     77a:	8c 01       	movw	r16, r24
            else 
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     77c:	01 15       	cp	r16, r1
     77e:	11 05       	cpc	r17, r1
     780:	09 f4       	brne	.+2      	; 0x784 <pvPortMalloc+0x52>
     782:	69 c0       	rjmp	.+210    	; 0x856 <pvPortMalloc+0x124>
     784:	80 91 3e 03 	lds	r24, 0x033E	; 0x80033e <xFreeBytesRemaining>
     788:	90 91 3f 03 	lds	r25, 0x033F	; 0x80033f <xFreeBytesRemaining+0x1>
     78c:	80 17       	cp	r24, r16
     78e:	91 07       	cpc	r25, r17
     790:	08 f4       	brcc	.+2      	; 0x794 <pvPortMalloc+0x62>
     792:	64 c0       	rjmp	.+200    	; 0x85c <pvPortMalloc+0x12a>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
     794:	c0 91 42 03 	lds	r28, 0x0342	; 0x800342 <xStart>
     798:	d0 91 43 03 	lds	r29, 0x0343	; 0x800343 <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
     79c:	e2 e4       	ldi	r30, 0x42	; 66
     79e:	f3 e0       	ldi	r31, 0x03	; 3
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     7a0:	02 c0       	rjmp	.+4      	; 0x7a6 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
     7a2:	fe 01       	movw	r30, r28
                    pxBlock = pxBlock->pxNextFreeBlock;
     7a4:	ec 01       	movw	r28, r24
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     7a6:	8a 81       	ldd	r24, Y+2	; 0x02
     7a8:	9b 81       	ldd	r25, Y+3	; 0x03
     7aa:	80 17       	cp	r24, r16
     7ac:	91 07       	cpc	r25, r17
     7ae:	20 f4       	brcc	.+8      	; 0x7b8 <pvPortMalloc+0x86>
     7b0:	88 81       	ld	r24, Y
     7b2:	99 81       	ldd	r25, Y+1	; 0x01
     7b4:	00 97       	sbiw	r24, 0x00	; 0
     7b6:	a9 f7       	brne	.-22     	; 0x7a2 <pvPortMalloc+0x70>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
     7b8:	80 91 40 03 	lds	r24, 0x0340	; 0x800340 <pxEnd>
     7bc:	90 91 41 03 	lds	r25, 0x0341	; 0x800341 <pxEnd+0x1>
     7c0:	c8 17       	cp	r28, r24
     7c2:	d9 07       	cpc	r29, r25
     7c4:	09 f4       	brne	.+2      	; 0x7c8 <pvPortMalloc+0x96>
     7c6:	4d c0       	rjmp	.+154    	; 0x862 <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     7c8:	e0 80       	ld	r14, Z
     7ca:	f1 80       	ldd	r15, Z+1	; 0x01
     7cc:	84 e0       	ldi	r24, 0x04	; 4
     7ce:	e8 0e       	add	r14, r24
     7d0:	f1 1c       	adc	r15, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     7d2:	88 81       	ld	r24, Y
     7d4:	99 81       	ldd	r25, Y+1	; 0x01
     7d6:	91 83       	std	Z+1, r25	; 0x01
     7d8:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     7da:	2a 81       	ldd	r18, Y+2	; 0x02
     7dc:	3b 81       	ldd	r19, Y+3	; 0x03
     7de:	20 1b       	sub	r18, r16
     7e0:	31 0b       	sbc	r19, r17
     7e2:	29 30       	cpi	r18, 0x09	; 9
     7e4:	31 05       	cpc	r19, r1
     7e6:	48 f0       	brcs	.+18     	; 0x7fa <pvPortMalloc+0xc8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     7e8:	ce 01       	movw	r24, r28
     7ea:	80 0f       	add	r24, r16
     7ec:	91 1f       	adc	r25, r17
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     7ee:	fc 01       	movw	r30, r24
     7f0:	33 83       	std	Z+3, r19	; 0x03
     7f2:	22 83       	std	Z+2, r18	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
     7f4:	1b 83       	std	Y+3, r17	; 0x03

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
     7f6:	0a 83       	std	Y+2, r16	; 0x02
     7f8:	52 df       	rcall	.-348    	; 0x69e <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
     7fa:	2a 81       	ldd	r18, Y+2	; 0x02
     7fc:	3b 81       	ldd	r19, Y+3	; 0x03
     7fe:	80 91 3e 03 	lds	r24, 0x033E	; 0x80033e <xFreeBytesRemaining>
     802:	90 91 3f 03 	lds	r25, 0x033F	; 0x80033f <xFreeBytesRemaining+0x1>
     806:	82 1b       	sub	r24, r18
     808:	93 0b       	sbc	r25, r19
     80a:	90 93 3f 03 	sts	0x033F, r25	; 0x80033f <xFreeBytesRemaining+0x1>
     80e:	80 93 3e 03 	sts	0x033E, r24	; 0x80033e <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     812:	40 91 3c 03 	lds	r20, 0x033C	; 0x80033c <xMinimumEverFreeBytesRemaining>
     816:	50 91 3d 03 	lds	r21, 0x033D	; 0x80033d <xMinimumEverFreeBytesRemaining+0x1>
     81a:	84 17       	cp	r24, r20
     81c:	95 07       	cpc	r25, r21
     81e:	20 f4       	brcc	.+8      	; 0x828 <pvPortMalloc+0xf6>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     820:	90 93 3d 03 	sts	0x033D, r25	; 0x80033d <xMinimumEverFreeBytesRemaining+0x1>
     824:	80 93 3c 03 	sts	0x033C, r24	; 0x80033c <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
     828:	80 91 36 03 	lds	r24, 0x0336	; 0x800336 <xBlockAllocatedBit>
     82c:	90 91 37 03 	lds	r25, 0x0337	; 0x800337 <xBlockAllocatedBit+0x1>
     830:	28 2b       	or	r18, r24
     832:	39 2b       	or	r19, r25
     834:	3b 83       	std	Y+3, r19	; 0x03
     836:	2a 83       	std	Y+2, r18	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
     838:	19 82       	std	Y+1, r1	; 0x01
     83a:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
     83c:	80 91 3a 03 	lds	r24, 0x033A	; 0x80033a <xNumberOfSuccessfulAllocations>
     840:	90 91 3b 03 	lds	r25, 0x033B	; 0x80033b <xNumberOfSuccessfulAllocations+0x1>
     844:	01 96       	adiw	r24, 0x01	; 1
     846:	90 93 3b 03 	sts	0x033B, r25	; 0x80033b <xNumberOfSuccessfulAllocations+0x1>
     84a:	80 93 3a 03 	sts	0x033A, r24	; 0x80033a <xNumberOfSuccessfulAllocations>
     84e:	0b c0       	rjmp	.+22     	; 0x866 <pvPortMalloc+0x134>
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
     850:	e1 2c       	mov	r14, r1
     852:	f1 2c       	mov	r15, r1
     854:	08 c0       	rjmp	.+16     	; 0x866 <pvPortMalloc+0x134>
     856:	e1 2c       	mov	r14, r1
     858:	f1 2c       	mov	r15, r1
     85a:	05 c0       	rjmp	.+10     	; 0x866 <pvPortMalloc+0x134>
     85c:	e1 2c       	mov	r14, r1
     85e:	f1 2c       	mov	r15, r1
     860:	02 c0       	rjmp	.+4      	; 0x866 <pvPortMalloc+0x134>
     862:	e1 2c       	mov	r14, r1
     864:	f1 2c       	mov	r15, r1
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     866:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
     86a:	e1 14       	cp	r14, r1
     86c:	f1 04       	cpc	r15, r1
     86e:	11 f4       	brne	.+4      	; 0x874 <pvPortMalloc+0x142>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
     870:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <vApplicationMallocFailedHook>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
     874:	c7 01       	movw	r24, r14
     876:	df 91       	pop	r29
     878:	cf 91       	pop	r28
     87a:	1f 91       	pop	r17
     87c:	0f 91       	pop	r16
     87e:	ff 90       	pop	r15
     880:	ef 90       	pop	r14
     882:	08 95       	ret

00000884 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     884:	0f 93       	push	r16
     886:	1f 93       	push	r17
     888:	cf 93       	push	r28
     88a:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     88c:	00 97       	sbiw	r24, 0x00	; 0
     88e:	89 f1       	breq	.+98     	; 0x8f2 <vPortFree+0x6e>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
     890:	ec 01       	movw	r28, r24
     892:	24 97       	sbiw	r28, 0x04	; 4

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     894:	4a 81       	ldd	r20, Y+2	; 0x02
     896:	5b 81       	ldd	r21, Y+3	; 0x03
     898:	20 91 36 03 	lds	r18, 0x0336	; 0x800336 <xBlockAllocatedBit>
     89c:	30 91 37 03 	lds	r19, 0x0337	; 0x800337 <xBlockAllocatedBit+0x1>
     8a0:	ba 01       	movw	r22, r20
     8a2:	62 23       	and	r22, r18
     8a4:	73 23       	and	r23, r19
     8a6:	67 2b       	or	r22, r23
     8a8:	21 f1       	breq	.+72     	; 0x8f2 <vPortFree+0x6e>
        {
            if( pxLink->pxNextFreeBlock == NULL )
     8aa:	68 81       	ld	r22, Y
     8ac:	79 81       	ldd	r23, Y+1	; 0x01
     8ae:	67 2b       	or	r22, r23
     8b0:	01 f5       	brne	.+64     	; 0x8f2 <vPortFree+0x6e>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
     8b2:	20 95       	com	r18
     8b4:	30 95       	com	r19
     8b6:	24 23       	and	r18, r20
     8b8:	35 23       	and	r19, r21
     8ba:	3b 83       	std	Y+3, r19	; 0x03
     8bc:	2a 83       	std	Y+2, r18	; 0x02

                vTaskSuspendAll();
     8be:	cb d7       	rcall	.+3990   	; 0x1856 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
     8c0:	8a 81       	ldd	r24, Y+2	; 0x02
     8c2:	9b 81       	ldd	r25, Y+3	; 0x03
     8c4:	20 91 3e 03 	lds	r18, 0x033E	; 0x80033e <xFreeBytesRemaining>
     8c8:	30 91 3f 03 	lds	r19, 0x033F	; 0x80033f <xFreeBytesRemaining+0x1>
     8cc:	82 0f       	add	r24, r18
     8ce:	93 1f       	adc	r25, r19
     8d0:	90 93 3f 03 	sts	0x033F, r25	; 0x80033f <xFreeBytesRemaining+0x1>
     8d4:	80 93 3e 03 	sts	0x033E, r24	; 0x80033e <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     8d8:	ce 01       	movw	r24, r28
     8da:	e1 de       	rcall	.-574    	; 0x69e <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
     8dc:	80 91 38 03 	lds	r24, 0x0338	; 0x800338 <xNumberOfSuccessfulFrees>
     8e0:	90 91 39 03 	lds	r25, 0x0339	; 0x800339 <xNumberOfSuccessfulFrees+0x1>
     8e4:	01 96       	adiw	r24, 0x01	; 1
     8e6:	90 93 39 03 	sts	0x0339, r25	; 0x800339 <xNumberOfSuccessfulFrees+0x1>
     8ea:	80 93 38 03 	sts	0x0338, r24	; 0x800338 <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
     8ee:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
     8f2:	df 91       	pop	r29
     8f4:	cf 91       	pop	r28
     8f6:	1f 91       	pop	r17
     8f8:	0f 91       	pop	r16
     8fa:	08 95       	ret

000008fc <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     8fc:	fc 01       	movw	r30, r24
     8fe:	03 96       	adiw	r24, 0x03	; 3
     900:	92 83       	std	Z+2, r25	; 0x02
     902:	81 83       	std	Z+1, r24	; 0x01
     904:	4f ef       	ldi	r20, 0xFF	; 255
     906:	5f ef       	ldi	r21, 0xFF	; 255
     908:	ba 01       	movw	r22, r20
     90a:	43 83       	std	Z+3, r20	; 0x03
     90c:	54 83       	std	Z+4, r21	; 0x04
     90e:	65 83       	std	Z+5, r22	; 0x05
     910:	76 83       	std	Z+6, r23	; 0x06
     912:	90 87       	std	Z+8, r25	; 0x08
     914:	87 83       	std	Z+7, r24	; 0x07
     916:	92 87       	std	Z+10, r25	; 0x0a
     918:	81 87       	std	Z+9, r24	; 0x09
     91a:	10 82       	st	Z, r1
     91c:	08 95       	ret

0000091e <vListInitialiseItem>:
     91e:	fc 01       	movw	r30, r24
     920:	13 86       	std	Z+11, r1	; 0x0b
     922:	12 86       	std	Z+10, r1	; 0x0a
     924:	08 95       	ret

00000926 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     926:	0f 93       	push	r16
     928:	1f 93       	push	r17
     92a:	cf 93       	push	r28
     92c:	df 93       	push	r29
     92e:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     930:	08 81       	ld	r16, Y
     932:	19 81       	ldd	r17, Y+1	; 0x01
     934:	2a 81       	ldd	r18, Y+2	; 0x02
     936:	3b 81       	ldd	r19, Y+3	; 0x03
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     938:	0f 3f       	cpi	r16, 0xFF	; 255
     93a:	4f ef       	ldi	r20, 0xFF	; 255
     93c:	14 07       	cpc	r17, r20
     93e:	24 07       	cpc	r18, r20
     940:	34 07       	cpc	r19, r20
     942:	21 f4       	brne	.+8      	; 0x94c <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     944:	fc 01       	movw	r30, r24
     946:	a1 85       	ldd	r26, Z+9	; 0x09
     948:	b2 85       	ldd	r27, Z+10	; 0x0a
     94a:	11 c0       	rjmp	.+34     	; 0x96e <vListInsert+0x48>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     94c:	dc 01       	movw	r26, r24
     94e:	13 96       	adiw	r26, 0x03	; 3
     950:	01 c0       	rjmp	.+2      	; 0x954 <vListInsert+0x2e>
     952:	df 01       	movw	r26, r30
     954:	14 96       	adiw	r26, 0x04	; 4
     956:	ed 91       	ld	r30, X+
     958:	fc 91       	ld	r31, X
     95a:	15 97       	sbiw	r26, 0x05	; 5
     95c:	40 81       	ld	r20, Z
     95e:	51 81       	ldd	r21, Z+1	; 0x01
     960:	62 81       	ldd	r22, Z+2	; 0x02
     962:	73 81       	ldd	r23, Z+3	; 0x03
     964:	04 17       	cp	r16, r20
     966:	15 07       	cpc	r17, r21
     968:	26 07       	cpc	r18, r22
     96a:	37 07       	cpc	r19, r23
     96c:	90 f7       	brcc	.-28     	; 0x952 <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     96e:	14 96       	adiw	r26, 0x04	; 4
     970:	ed 91       	ld	r30, X+
     972:	fc 91       	ld	r31, X
     974:	15 97       	sbiw	r26, 0x05	; 5
     976:	fd 83       	std	Y+5, r31	; 0x05
     978:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     97a:	d7 83       	std	Z+7, r29	; 0x07
     97c:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
     97e:	bf 83       	std	Y+7, r27	; 0x07
     980:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
     982:	15 96       	adiw	r26, 0x05	; 5
     984:	dc 93       	st	X, r29
     986:	ce 93       	st	-X, r28
     988:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     98a:	9b 87       	std	Y+11, r25	; 0x0b
     98c:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
     98e:	fc 01       	movw	r30, r24
     990:	20 81       	ld	r18, Z
     992:	2f 5f       	subi	r18, 0xFF	; 255
     994:	20 83       	st	Z, r18
}
     996:	df 91       	pop	r29
     998:	cf 91       	pop	r28
     99a:	1f 91       	pop	r17
     99c:	0f 91       	pop	r16
     99e:	08 95       	ret

000009a0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     9a0:	cf 93       	push	r28
     9a2:	df 93       	push	r29
     9a4:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     9a6:	a2 85       	ldd	r26, Z+10	; 0x0a
     9a8:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     9aa:	c4 81       	ldd	r28, Z+4	; 0x04
     9ac:	d5 81       	ldd	r29, Z+5	; 0x05
     9ae:	86 81       	ldd	r24, Z+6	; 0x06
     9b0:	97 81       	ldd	r25, Z+7	; 0x07
     9b2:	9f 83       	std	Y+7, r25	; 0x07
     9b4:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     9b6:	c6 81       	ldd	r28, Z+6	; 0x06
     9b8:	d7 81       	ldd	r29, Z+7	; 0x07
     9ba:	84 81       	ldd	r24, Z+4	; 0x04
     9bc:	95 81       	ldd	r25, Z+5	; 0x05
     9be:	9d 83       	std	Y+5, r25	; 0x05
     9c0:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     9c2:	11 96       	adiw	r26, 0x01	; 1
     9c4:	8d 91       	ld	r24, X+
     9c6:	9c 91       	ld	r25, X
     9c8:	12 97       	sbiw	r26, 0x02	; 2
     9ca:	e8 17       	cp	r30, r24
     9cc:	f9 07       	cpc	r31, r25
     9ce:	31 f4       	brne	.+12     	; 0x9dc <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     9d0:	86 81       	ldd	r24, Z+6	; 0x06
     9d2:	97 81       	ldd	r25, Z+7	; 0x07
     9d4:	12 96       	adiw	r26, 0x02	; 2
     9d6:	9c 93       	st	X, r25
     9d8:	8e 93       	st	-X, r24
     9da:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     9dc:	13 86       	std	Z+11, r1	; 0x0b
     9de:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
     9e0:	8c 91       	ld	r24, X
     9e2:	81 50       	subi	r24, 0x01	; 1
     9e4:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     9e6:	8c 91       	ld	r24, X
}
     9e8:	df 91       	pop	r29
     9ea:	cf 91       	pop	r28
     9ec:	08 95       	ret

000009ee <prvSetupTimerInterrupt>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
     9ee:	a8 95       	wdr
     9f0:	90 ec       	ldi	r25, 0xC0	; 192
     9f2:	88 e1       	ldi	r24, 0x18	; 24
     9f4:	0f b6       	in	r0, 0x3f	; 63
     9f6:	f8 94       	cli
     9f8:	a8 95       	wdr
     9fa:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     9fe:	0f be       	out	0x3f, r0	; 63
     a00:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     a04:	08 95       	ret

00000a06 <pxPortInitialiseStack>:
     a06:	fc 01       	movw	r30, r24
     a08:	60 83       	st	Z, r22
     a0a:	31 97       	sbiw	r30, 0x01	; 1
     a0c:	70 83       	st	Z, r23
     a0e:	31 97       	sbiw	r30, 0x01	; 1
     a10:	10 82       	st	Z, r1
     a12:	31 97       	sbiw	r30, 0x01	; 1
     a14:	10 82       	st	Z, r1
     a16:	31 97       	sbiw	r30, 0x01	; 1
     a18:	20 e8       	ldi	r18, 0x80	; 128
     a1a:	20 83       	st	Z, r18
     a1c:	31 97       	sbiw	r30, 0x01	; 1
     a1e:	10 82       	st	Z, r1
     a20:	31 97       	sbiw	r30, 0x01	; 1
     a22:	10 82       	st	Z, r1
     a24:	31 97       	sbiw	r30, 0x01	; 1
     a26:	10 82       	st	Z, r1
     a28:	77 97       	sbiw	r30, 0x17	; 23
     a2a:	40 83       	st	Z, r20
     a2c:	31 97       	sbiw	r30, 0x01	; 1
     a2e:	50 83       	st	Z, r21
     a30:	86 97       	sbiw	r24, 0x26	; 38
     a32:	08 95       	ret

00000a34 <xPortStartScheduler>:
     a34:	dc df       	rcall	.-72     	; 0x9ee <prvSetupTimerInterrupt>
     a36:	a0 91 b1 11 	lds	r26, 0x11B1	; 0x8011b1 <pxCurrentTCB>
     a3a:	b0 91 b2 11 	lds	r27, 0x11B2	; 0x8011b2 <pxCurrentTCB+0x1>
     a3e:	cd 91       	ld	r28, X+
     a40:	cd bf       	out	0x3d, r28	; 61
     a42:	dd 91       	ld	r29, X+
     a44:	de bf       	out	0x3e, r29	; 62
     a46:	ff 91       	pop	r31
     a48:	ef 91       	pop	r30
     a4a:	df 91       	pop	r29
     a4c:	cf 91       	pop	r28
     a4e:	bf 91       	pop	r27
     a50:	af 91       	pop	r26
     a52:	9f 91       	pop	r25
     a54:	8f 91       	pop	r24
     a56:	7f 91       	pop	r23
     a58:	6f 91       	pop	r22
     a5a:	5f 91       	pop	r21
     a5c:	4f 91       	pop	r20
     a5e:	3f 91       	pop	r19
     a60:	2f 91       	pop	r18
     a62:	1f 91       	pop	r17
     a64:	0f 91       	pop	r16
     a66:	ff 90       	pop	r15
     a68:	ef 90       	pop	r14
     a6a:	df 90       	pop	r13
     a6c:	cf 90       	pop	r12
     a6e:	bf 90       	pop	r11
     a70:	af 90       	pop	r10
     a72:	9f 90       	pop	r9
     a74:	8f 90       	pop	r8
     a76:	7f 90       	pop	r7
     a78:	6f 90       	pop	r6
     a7a:	5f 90       	pop	r5
     a7c:	4f 90       	pop	r4
     a7e:	3f 90       	pop	r3
     a80:	2f 90       	pop	r2
     a82:	1f 90       	pop	r1
     a84:	0f 90       	pop	r0
     a86:	0c be       	out	0x3c, r0	; 60
     a88:	0f 90       	pop	r0
     a8a:	0b be       	out	0x3b, r0	; 59
     a8c:	0f 90       	pop	r0
     a8e:	0f be       	out	0x3f, r0	; 63
     a90:	0f 90       	pop	r0
     a92:	08 95       	ret
     a94:	81 e0       	ldi	r24, 0x01	; 1
     a96:	08 95       	ret

00000a98 <vPortYield>:
     a98:	0f 92       	push	r0
     a9a:	0f b6       	in	r0, 0x3f	; 63
     a9c:	f8 94       	cli
     a9e:	0f 92       	push	r0
     aa0:	0b b6       	in	r0, 0x3b	; 59
     aa2:	0f 92       	push	r0
     aa4:	0c b6       	in	r0, 0x3c	; 60
     aa6:	0f 92       	push	r0
     aa8:	1f 92       	push	r1
     aaa:	11 24       	eor	r1, r1
     aac:	2f 92       	push	r2
     aae:	3f 92       	push	r3
     ab0:	4f 92       	push	r4
     ab2:	5f 92       	push	r5
     ab4:	6f 92       	push	r6
     ab6:	7f 92       	push	r7
     ab8:	8f 92       	push	r8
     aba:	9f 92       	push	r9
     abc:	af 92       	push	r10
     abe:	bf 92       	push	r11
     ac0:	cf 92       	push	r12
     ac2:	df 92       	push	r13
     ac4:	ef 92       	push	r14
     ac6:	ff 92       	push	r15
     ac8:	0f 93       	push	r16
     aca:	1f 93       	push	r17
     acc:	2f 93       	push	r18
     ace:	3f 93       	push	r19
     ad0:	4f 93       	push	r20
     ad2:	5f 93       	push	r21
     ad4:	6f 93       	push	r22
     ad6:	7f 93       	push	r23
     ad8:	8f 93       	push	r24
     ada:	9f 93       	push	r25
     adc:	af 93       	push	r26
     ade:	bf 93       	push	r27
     ae0:	cf 93       	push	r28
     ae2:	df 93       	push	r29
     ae4:	ef 93       	push	r30
     ae6:	ff 93       	push	r31
     ae8:	a0 91 b1 11 	lds	r26, 0x11B1	; 0x8011b1 <pxCurrentTCB>
     aec:	b0 91 b2 11 	lds	r27, 0x11B2	; 0x8011b2 <pxCurrentTCB+0x1>
     af0:	0d b6       	in	r0, 0x3d	; 61
     af2:	0d 92       	st	X+, r0
     af4:	0e b6       	in	r0, 0x3e	; 62
     af6:	0d 92       	st	X+, r0
     af8:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <vTaskSwitchContext>
     afc:	a0 91 b1 11 	lds	r26, 0x11B1	; 0x8011b1 <pxCurrentTCB>
     b00:	b0 91 b2 11 	lds	r27, 0x11B2	; 0x8011b2 <pxCurrentTCB+0x1>
     b04:	cd 91       	ld	r28, X+
     b06:	cd bf       	out	0x3d, r28	; 61
     b08:	dd 91       	ld	r29, X+
     b0a:	de bf       	out	0x3e, r29	; 62
     b0c:	ff 91       	pop	r31
     b0e:	ef 91       	pop	r30
     b10:	df 91       	pop	r29
     b12:	cf 91       	pop	r28
     b14:	bf 91       	pop	r27
     b16:	af 91       	pop	r26
     b18:	9f 91       	pop	r25
     b1a:	8f 91       	pop	r24
     b1c:	7f 91       	pop	r23
     b1e:	6f 91       	pop	r22
     b20:	5f 91       	pop	r21
     b22:	4f 91       	pop	r20
     b24:	3f 91       	pop	r19
     b26:	2f 91       	pop	r18
     b28:	1f 91       	pop	r17
     b2a:	0f 91       	pop	r16
     b2c:	ff 90       	pop	r15
     b2e:	ef 90       	pop	r14
     b30:	df 90       	pop	r13
     b32:	cf 90       	pop	r12
     b34:	bf 90       	pop	r11
     b36:	af 90       	pop	r10
     b38:	9f 90       	pop	r9
     b3a:	8f 90       	pop	r8
     b3c:	7f 90       	pop	r7
     b3e:	6f 90       	pop	r6
     b40:	5f 90       	pop	r5
     b42:	4f 90       	pop	r4
     b44:	3f 90       	pop	r3
     b46:	2f 90       	pop	r2
     b48:	1f 90       	pop	r1
     b4a:	0f 90       	pop	r0
     b4c:	0c be       	out	0x3c, r0	; 60
     b4e:	0f 90       	pop	r0
     b50:	0b be       	out	0x3b, r0	; 59
     b52:	0f 90       	pop	r0
     b54:	0f be       	out	0x3f, r0	; 63
     b56:	0f 90       	pop	r0
     b58:	08 95       	ret

00000b5a <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     b5a:	0f 92       	push	r0
     b5c:	0f b6       	in	r0, 0x3f	; 63
     b5e:	f8 94       	cli
     b60:	0f 92       	push	r0
     b62:	0b b6       	in	r0, 0x3b	; 59
     b64:	0f 92       	push	r0
     b66:	0c b6       	in	r0, 0x3c	; 60
     b68:	0f 92       	push	r0
     b6a:	1f 92       	push	r1
     b6c:	11 24       	eor	r1, r1
     b6e:	2f 92       	push	r2
     b70:	3f 92       	push	r3
     b72:	4f 92       	push	r4
     b74:	5f 92       	push	r5
     b76:	6f 92       	push	r6
     b78:	7f 92       	push	r7
     b7a:	8f 92       	push	r8
     b7c:	9f 92       	push	r9
     b7e:	af 92       	push	r10
     b80:	bf 92       	push	r11
     b82:	cf 92       	push	r12
     b84:	df 92       	push	r13
     b86:	ef 92       	push	r14
     b88:	ff 92       	push	r15
     b8a:	0f 93       	push	r16
     b8c:	1f 93       	push	r17
     b8e:	2f 93       	push	r18
     b90:	3f 93       	push	r19
     b92:	4f 93       	push	r20
     b94:	5f 93       	push	r21
     b96:	6f 93       	push	r22
     b98:	7f 93       	push	r23
     b9a:	8f 93       	push	r24
     b9c:	9f 93       	push	r25
     b9e:	af 93       	push	r26
     ba0:	bf 93       	push	r27
     ba2:	cf 93       	push	r28
     ba4:	df 93       	push	r29
     ba6:	ef 93       	push	r30
     ba8:	ff 93       	push	r31
     baa:	a0 91 b1 11 	lds	r26, 0x11B1	; 0x8011b1 <pxCurrentTCB>
     bae:	b0 91 b2 11 	lds	r27, 0x11B2	; 0x8011b2 <pxCurrentTCB+0x1>
     bb2:	0d b6       	in	r0, 0x3d	; 61
     bb4:	0d 92       	st	X+, r0
     bb6:	0e b6       	in	r0, 0x3e	; 62
     bb8:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
     bba:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
     bbc:	60 d6       	rcall	.+3264   	; 0x187e <xTaskIncrementTick>
     bbe:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     bc0:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
     bc4:	a0 91 b1 11 	lds	r26, 0x11B1	; 0x8011b1 <pxCurrentTCB>
     bc8:	b0 91 b2 11 	lds	r27, 0x11B2	; 0x8011b2 <pxCurrentTCB+0x1>
     bcc:	cd 91       	ld	r28, X+
     bce:	cd bf       	out	0x3d, r28	; 61
     bd0:	dd 91       	ld	r29, X+
     bd2:	de bf       	out	0x3e, r29	; 62
     bd4:	ff 91       	pop	r31
     bd6:	ef 91       	pop	r30
     bd8:	df 91       	pop	r29
     bda:	cf 91       	pop	r28
     bdc:	bf 91       	pop	r27
     bde:	af 91       	pop	r26
     be0:	9f 91       	pop	r25
     be2:	8f 91       	pop	r24
     be4:	7f 91       	pop	r23
     be6:	6f 91       	pop	r22
     be8:	5f 91       	pop	r21
     bea:	4f 91       	pop	r20
     bec:	3f 91       	pop	r19
     bee:	2f 91       	pop	r18
     bf0:	1f 91       	pop	r17
     bf2:	0f 91       	pop	r16
     bf4:	ff 90       	pop	r15
     bf6:	ef 90       	pop	r14
     bf8:	df 90       	pop	r13
     bfa:	cf 90       	pop	r12
     bfc:	bf 90       	pop	r11
     bfe:	af 90       	pop	r10
     c00:	9f 90       	pop	r9
     c02:	8f 90       	pop	r8
     c04:	7f 90       	pop	r7
     c06:	6f 90       	pop	r6
     c08:	5f 90       	pop	r5
     c0a:	4f 90       	pop	r4
     c0c:	3f 90       	pop	r3
     c0e:	2f 90       	pop	r2
     c10:	1f 90       	pop	r1
     c12:	0f 90       	pop	r0
     c14:	0c be       	out	0x3c, r0	; 60
     c16:	0f 90       	pop	r0
     c18:	0b be       	out	0x3b, r0	; 59
     c1a:	0f 90       	pop	r0
     c1c:	0f be       	out	0x3f, r0	; 63
     c1e:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     c20:	08 95       	ret

00000c22 <__vector_12>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
     c22:	9b df       	rcall	.-202    	; 0xb5a <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
     c24:	18 95       	reti

00000c26 <prvGetDisinheritPriorityAfterTimeout>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     c26:	dc 01       	movw	r26, r24
     c28:	53 96       	adiw	r26, 0x13	; 19
     c2a:	2c 91       	ld	r18, X
     c2c:	53 97       	sbiw	r26, 0x13	; 19
     c2e:	22 23       	and	r18, r18
     c30:	41 f0       	breq	.+16     	; 0xc42 <prvGetDisinheritPriorityAfterTimeout+0x1c>
     c32:	5a 96       	adiw	r26, 0x1a	; 26
     c34:	ed 91       	ld	r30, X+
     c36:	fc 91       	ld	r31, X
     c38:	5b 97       	sbiw	r26, 0x1b	; 27
     c3a:	90 81       	ld	r25, Z
     c3c:	8a e0       	ldi	r24, 0x0A	; 10
     c3e:	89 1b       	sub	r24, r25
     c40:	08 95       	ret
     c42:	80 e0       	ldi	r24, 0x00	; 0
     c44:	08 95       	ret

00000c46 <prvIsQueueEmpty>:
     c46:	0f b6       	in	r0, 0x3f	; 63
     c48:	f8 94       	cli
     c4a:	0f 92       	push	r0
     c4c:	fc 01       	movw	r30, r24
     c4e:	86 8d       	ldd	r24, Z+30	; 0x1e
     c50:	81 11       	cpse	r24, r1
     c52:	02 c0       	rjmp	.+4      	; 0xc58 <prvIsQueueEmpty+0x12>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	01 c0       	rjmp	.+2      	; 0xc5a <prvIsQueueEmpty+0x14>
     c58:	80 e0       	ldi	r24, 0x00	; 0
     c5a:	0f 90       	pop	r0
     c5c:	0f be       	out	0x3f, r0	; 63
     c5e:	08 95       	ret

00000c60 <prvIsQueueFull>:
     c60:	0f b6       	in	r0, 0x3f	; 63
     c62:	f8 94       	cli
     c64:	0f 92       	push	r0
     c66:	fc 01       	movw	r30, r24
     c68:	26 8d       	ldd	r18, Z+30	; 0x1e
     c6a:	87 8d       	ldd	r24, Z+31	; 0x1f
     c6c:	28 13       	cpse	r18, r24
     c6e:	02 c0       	rjmp	.+4      	; 0xc74 <prvIsQueueFull+0x14>
     c70:	81 e0       	ldi	r24, 0x01	; 1
     c72:	01 c0       	rjmp	.+2      	; 0xc76 <prvIsQueueFull+0x16>
     c74:	80 e0       	ldi	r24, 0x00	; 0
     c76:	0f 90       	pop	r0
     c78:	0f be       	out	0x3f, r0	; 63
     c7a:	08 95       	ret

00000c7c <prvCopyDataToQueue>:
     c7c:	0f 93       	push	r16
     c7e:	1f 93       	push	r17
     c80:	cf 93       	push	r28
     c82:	df 93       	push	r29
     c84:	ec 01       	movw	r28, r24
     c86:	04 2f       	mov	r16, r20
     c88:	1e 8d       	ldd	r17, Y+30	; 0x1e
     c8a:	48 a1       	ldd	r20, Y+32	; 0x20
     c8c:	41 11       	cpse	r20, r1
     c8e:	0c c0       	rjmp	.+24     	; 0xca8 <prvCopyDataToQueue+0x2c>
     c90:	88 81       	ld	r24, Y
     c92:	99 81       	ldd	r25, Y+1	; 0x01
     c94:	89 2b       	or	r24, r25
     c96:	09 f0       	breq	.+2      	; 0xc9a <prvCopyDataToQueue+0x1e>
     c98:	42 c0       	rjmp	.+132    	; 0xd1e <prvCopyDataToQueue+0xa2>
     c9a:	8c 81       	ldd	r24, Y+4	; 0x04
     c9c:	9d 81       	ldd	r25, Y+5	; 0x05
     c9e:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <xTaskPriorityDisinherit>
     ca2:	1d 82       	std	Y+5, r1	; 0x05
     ca4:	1c 82       	std	Y+4, r1	; 0x04
     ca6:	42 c0       	rjmp	.+132    	; 0xd2c <prvCopyDataToQueue+0xb0>
     ca8:	01 11       	cpse	r16, r1
     caa:	17 c0       	rjmp	.+46     	; 0xcda <prvCopyDataToQueue+0x5e>
     cac:	50 e0       	ldi	r21, 0x00	; 0
     cae:	8a 81       	ldd	r24, Y+2	; 0x02
     cb0:	9b 81       	ldd	r25, Y+3	; 0x03
     cb2:	0e 94 c6 1d 	call	0x3b8c	; 0x3b8c <memcpy>
     cb6:	28 a1       	ldd	r18, Y+32	; 0x20
     cb8:	8a 81       	ldd	r24, Y+2	; 0x02
     cba:	9b 81       	ldd	r25, Y+3	; 0x03
     cbc:	82 0f       	add	r24, r18
     cbe:	91 1d       	adc	r25, r1
     cc0:	9b 83       	std	Y+3, r25	; 0x03
     cc2:	8a 83       	std	Y+2, r24	; 0x02
     cc4:	2c 81       	ldd	r18, Y+4	; 0x04
     cc6:	3d 81       	ldd	r19, Y+5	; 0x05
     cc8:	82 17       	cp	r24, r18
     cca:	93 07       	cpc	r25, r19
     ccc:	50 f1       	brcs	.+84     	; 0xd22 <prvCopyDataToQueue+0xa6>
     cce:	88 81       	ld	r24, Y
     cd0:	99 81       	ldd	r25, Y+1	; 0x01
     cd2:	9b 83       	std	Y+3, r25	; 0x03
     cd4:	8a 83       	std	Y+2, r24	; 0x02
     cd6:	80 e0       	ldi	r24, 0x00	; 0
     cd8:	29 c0       	rjmp	.+82     	; 0xd2c <prvCopyDataToQueue+0xb0>
     cda:	50 e0       	ldi	r21, 0x00	; 0
     cdc:	8e 81       	ldd	r24, Y+6	; 0x06
     cde:	9f 81       	ldd	r25, Y+7	; 0x07
     ce0:	0e 94 c6 1d 	call	0x3b8c	; 0x3b8c <memcpy>
     ce4:	88 a1       	ldd	r24, Y+32	; 0x20
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	91 95       	neg	r25
     cea:	81 95       	neg	r24
     cec:	91 09       	sbc	r25, r1
     cee:	2e 81       	ldd	r18, Y+6	; 0x06
     cf0:	3f 81       	ldd	r19, Y+7	; 0x07
     cf2:	28 0f       	add	r18, r24
     cf4:	39 1f       	adc	r19, r25
     cf6:	3f 83       	std	Y+7, r19	; 0x07
     cf8:	2e 83       	std	Y+6, r18	; 0x06
     cfa:	48 81       	ld	r20, Y
     cfc:	59 81       	ldd	r21, Y+1	; 0x01
     cfe:	24 17       	cp	r18, r20
     d00:	35 07       	cpc	r19, r21
     d02:	30 f4       	brcc	.+12     	; 0xd10 <prvCopyDataToQueue+0x94>
     d04:	2c 81       	ldd	r18, Y+4	; 0x04
     d06:	3d 81       	ldd	r19, Y+5	; 0x05
     d08:	82 0f       	add	r24, r18
     d0a:	93 1f       	adc	r25, r19
     d0c:	9f 83       	std	Y+7, r25	; 0x07
     d0e:	8e 83       	std	Y+6, r24	; 0x06
     d10:	02 30       	cpi	r16, 0x02	; 2
     d12:	49 f4       	brne	.+18     	; 0xd26 <prvCopyDataToQueue+0xaa>
     d14:	11 23       	and	r17, r17
     d16:	49 f0       	breq	.+18     	; 0xd2a <prvCopyDataToQueue+0xae>
     d18:	11 50       	subi	r17, 0x01	; 1
     d1a:	80 e0       	ldi	r24, 0x00	; 0
     d1c:	07 c0       	rjmp	.+14     	; 0xd2c <prvCopyDataToQueue+0xb0>
     d1e:	80 e0       	ldi	r24, 0x00	; 0
     d20:	05 c0       	rjmp	.+10     	; 0xd2c <prvCopyDataToQueue+0xb0>
     d22:	80 e0       	ldi	r24, 0x00	; 0
     d24:	03 c0       	rjmp	.+6      	; 0xd2c <prvCopyDataToQueue+0xb0>
     d26:	80 e0       	ldi	r24, 0x00	; 0
     d28:	01 c0       	rjmp	.+2      	; 0xd2c <prvCopyDataToQueue+0xb0>
     d2a:	80 e0       	ldi	r24, 0x00	; 0
     d2c:	1f 5f       	subi	r17, 0xFF	; 255
     d2e:	1e 8f       	std	Y+30, r17	; 0x1e
     d30:	df 91       	pop	r29
     d32:	cf 91       	pop	r28
     d34:	1f 91       	pop	r17
     d36:	0f 91       	pop	r16
     d38:	08 95       	ret

00000d3a <prvCopyDataFromQueue>:
     d3a:	fc 01       	movw	r30, r24
     d3c:	40 a1       	ldd	r20, Z+32	; 0x20
     d3e:	44 23       	and	r20, r20
     d40:	a9 f0       	breq	.+42     	; 0xd6c <prvCopyDataFromQueue+0x32>
     d42:	50 e0       	ldi	r21, 0x00	; 0
     d44:	26 81       	ldd	r18, Z+6	; 0x06
     d46:	37 81       	ldd	r19, Z+7	; 0x07
     d48:	24 0f       	add	r18, r20
     d4a:	35 1f       	adc	r19, r21
     d4c:	37 83       	std	Z+7, r19	; 0x07
     d4e:	26 83       	std	Z+6, r18	; 0x06
     d50:	84 81       	ldd	r24, Z+4	; 0x04
     d52:	95 81       	ldd	r25, Z+5	; 0x05
     d54:	28 17       	cp	r18, r24
     d56:	39 07       	cpc	r19, r25
     d58:	20 f0       	brcs	.+8      	; 0xd62 <prvCopyDataFromQueue+0x28>
     d5a:	80 81       	ld	r24, Z
     d5c:	91 81       	ldd	r25, Z+1	; 0x01
     d5e:	97 83       	std	Z+7, r25	; 0x07
     d60:	86 83       	std	Z+6, r24	; 0x06
     d62:	cb 01       	movw	r24, r22
     d64:	66 81       	ldd	r22, Z+6	; 0x06
     d66:	77 81       	ldd	r23, Z+7	; 0x07
     d68:	0c 94 c6 1d 	jmp	0x3b8c	; 0x3b8c <memcpy>
     d6c:	08 95       	ret

00000d6e <prvUnlockQueue>:
     d6e:	1f 93       	push	r17
     d70:	cf 93       	push	r28
     d72:	df 93       	push	r29
     d74:	ec 01       	movw	r28, r24
     d76:	0f b6       	in	r0, 0x3f	; 63
     d78:	f8 94       	cli
     d7a:	0f 92       	push	r0
     d7c:	1a a1       	ldd	r17, Y+34	; 0x22
     d7e:	0b c0       	rjmp	.+22     	; 0xd96 <prvUnlockQueue+0x28>
     d80:	8b 89       	ldd	r24, Y+19	; 0x13
     d82:	88 23       	and	r24, r24
     d84:	51 f0       	breq	.+20     	; 0xd9a <prvUnlockQueue+0x2c>
     d86:	ce 01       	movw	r24, r28
     d88:	43 96       	adiw	r24, 0x13	; 19
     d8a:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <xTaskRemoveFromEventList>
     d8e:	81 11       	cpse	r24, r1
     d90:	0e 94 62 10 	call	0x20c4	; 0x20c4 <vTaskMissedYield>
     d94:	11 50       	subi	r17, 0x01	; 1
     d96:	11 16       	cp	r1, r17
     d98:	9c f3       	brlt	.-26     	; 0xd80 <prvUnlockQueue+0x12>
     d9a:	8f ef       	ldi	r24, 0xFF	; 255
     d9c:	8a a3       	std	Y+34, r24	; 0x22
     d9e:	0f 90       	pop	r0
     da0:	0f be       	out	0x3f, r0	; 63
     da2:	0f b6       	in	r0, 0x3f	; 63
     da4:	f8 94       	cli
     da6:	0f 92       	push	r0
     da8:	19 a1       	ldd	r17, Y+33	; 0x21
     daa:	0b c0       	rjmp	.+22     	; 0xdc2 <prvUnlockQueue+0x54>
     dac:	88 85       	ldd	r24, Y+8	; 0x08
     dae:	88 23       	and	r24, r24
     db0:	51 f0       	breq	.+20     	; 0xdc6 <prvUnlockQueue+0x58>
     db2:	ce 01       	movw	r24, r28
     db4:	08 96       	adiw	r24, 0x08	; 8
     db6:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <xTaskRemoveFromEventList>
     dba:	81 11       	cpse	r24, r1
     dbc:	0e 94 62 10 	call	0x20c4	; 0x20c4 <vTaskMissedYield>
     dc0:	11 50       	subi	r17, 0x01	; 1
     dc2:	11 16       	cp	r1, r17
     dc4:	9c f3       	brlt	.-26     	; 0xdac <prvUnlockQueue+0x3e>
     dc6:	8f ef       	ldi	r24, 0xFF	; 255
     dc8:	89 a3       	std	Y+33, r24	; 0x21
     dca:	0f 90       	pop	r0
     dcc:	0f be       	out	0x3f, r0	; 63
     dce:	df 91       	pop	r29
     dd0:	cf 91       	pop	r28
     dd2:	1f 91       	pop	r17
     dd4:	08 95       	ret

00000dd6 <xQueueGenericReset>:
     dd6:	cf 93       	push	r28
     dd8:	df 93       	push	r29
     dda:	ec 01       	movw	r28, r24
     ddc:	0f b6       	in	r0, 0x3f	; 63
     dde:	f8 94       	cli
     de0:	0f 92       	push	r0
     de2:	e8 81       	ld	r30, Y
     de4:	f9 81       	ldd	r31, Y+1	; 0x01
     de6:	8f 8d       	ldd	r24, Y+31	; 0x1f
     de8:	28 a1       	ldd	r18, Y+32	; 0x20
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	30 e0       	ldi	r19, 0x00	; 0
     dee:	82 9f       	mul	r24, r18
     df0:	a0 01       	movw	r20, r0
     df2:	83 9f       	mul	r24, r19
     df4:	50 0d       	add	r21, r0
     df6:	92 9f       	mul	r25, r18
     df8:	50 0d       	add	r21, r0
     dfa:	11 24       	eor	r1, r1
     dfc:	4e 0f       	add	r20, r30
     dfe:	5f 1f       	adc	r21, r31
     e00:	5d 83       	std	Y+5, r21	; 0x05
     e02:	4c 83       	std	Y+4, r20	; 0x04
     e04:	1e 8e       	std	Y+30, r1	; 0x1e
     e06:	fb 83       	std	Y+3, r31	; 0x03
     e08:	ea 83       	std	Y+2, r30	; 0x02
     e0a:	01 97       	sbiw	r24, 0x01	; 1
     e0c:	28 9f       	mul	r18, r24
     e0e:	a0 01       	movw	r20, r0
     e10:	29 9f       	mul	r18, r25
     e12:	50 0d       	add	r21, r0
     e14:	38 9f       	mul	r19, r24
     e16:	50 0d       	add	r21, r0
     e18:	11 24       	eor	r1, r1
     e1a:	cf 01       	movw	r24, r30
     e1c:	84 0f       	add	r24, r20
     e1e:	95 1f       	adc	r25, r21
     e20:	9f 83       	std	Y+7, r25	; 0x07
     e22:	8e 83       	std	Y+6, r24	; 0x06
     e24:	8f ef       	ldi	r24, 0xFF	; 255
     e26:	89 a3       	std	Y+33, r24	; 0x21
     e28:	8a a3       	std	Y+34, r24	; 0x22
     e2a:	61 11       	cpse	r22, r1
     e2c:	0b c0       	rjmp	.+22     	; 0xe44 <xQueueGenericReset+0x6e>
     e2e:	88 85       	ldd	r24, Y+8	; 0x08
     e30:	88 23       	and	r24, r24
     e32:	71 f0       	breq	.+28     	; 0xe50 <xQueueGenericReset+0x7a>
     e34:	ce 01       	movw	r24, r28
     e36:	08 96       	adiw	r24, 0x08	; 8
     e38:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <xTaskRemoveFromEventList>
     e3c:	88 23       	and	r24, r24
     e3e:	41 f0       	breq	.+16     	; 0xe50 <xQueueGenericReset+0x7a>
     e40:	2b de       	rcall	.-938    	; 0xa98 <vPortYield>
     e42:	06 c0       	rjmp	.+12     	; 0xe50 <xQueueGenericReset+0x7a>
     e44:	ce 01       	movw	r24, r28
     e46:	08 96       	adiw	r24, 0x08	; 8
     e48:	59 dd       	rcall	.-1358   	; 0x8fc <vListInitialise>
     e4a:	ce 01       	movw	r24, r28
     e4c:	43 96       	adiw	r24, 0x13	; 19
     e4e:	56 dd       	rcall	.-1364   	; 0x8fc <vListInitialise>
     e50:	0f 90       	pop	r0
     e52:	0f be       	out	0x3f, r0	; 63
     e54:	81 e0       	ldi	r24, 0x01	; 1
     e56:	df 91       	pop	r29
     e58:	cf 91       	pop	r28
     e5a:	08 95       	ret

00000e5c <prvInitialiseNewQueue>:
     e5c:	0f 93       	push	r16
     e5e:	1f 93       	push	r17
     e60:	f8 01       	movw	r30, r16
     e62:	61 11       	cpse	r22, r1
     e64:	03 c0       	rjmp	.+6      	; 0xe6c <prvInitialiseNewQueue+0x10>
     e66:	11 83       	std	Z+1, r17	; 0x01
     e68:	00 83       	st	Z, r16
     e6a:	02 c0       	rjmp	.+4      	; 0xe70 <prvInitialiseNewQueue+0x14>
     e6c:	51 83       	std	Z+1, r21	; 0x01
     e6e:	40 83       	st	Z, r20
     e70:	87 8f       	std	Z+31, r24	; 0x1f
     e72:	60 a3       	std	Z+32, r22	; 0x20
     e74:	61 e0       	ldi	r22, 0x01	; 1
     e76:	cf 01       	movw	r24, r30
     e78:	ae df       	rcall	.-164    	; 0xdd6 <xQueueGenericReset>
     e7a:	1f 91       	pop	r17
     e7c:	0f 91       	pop	r16
     e7e:	08 95       	ret

00000e80 <xQueueGenericCreate>:
     e80:	df 92       	push	r13
     e82:	ef 92       	push	r14
     e84:	ff 92       	push	r15
     e86:	0f 93       	push	r16
     e88:	1f 93       	push	r17
     e8a:	cf 93       	push	r28
     e8c:	df 93       	push	r29
     e8e:	f8 2e       	mov	r15, r24
     e90:	e6 2e       	mov	r14, r22
     e92:	d4 2e       	mov	r13, r20
     e94:	86 9f       	mul	r24, r22
     e96:	c0 01       	movw	r24, r0
     e98:	11 24       	eor	r1, r1
     e9a:	83 96       	adiw	r24, 0x23	; 35
     e9c:	4a dc       	rcall	.-1900   	; 0x732 <pvPortMalloc>
     e9e:	ec 01       	movw	r28, r24
     ea0:	00 97       	sbiw	r24, 0x00	; 0
     ea2:	41 f0       	breq	.+16     	; 0xeb4 <xQueueGenericCreate+0x34>
     ea4:	8c 01       	movw	r16, r24
     ea6:	2d 2d       	mov	r18, r13
     ea8:	ac 01       	movw	r20, r24
     eaa:	4d 5d       	subi	r20, 0xDD	; 221
     eac:	5f 4f       	sbci	r21, 0xFF	; 255
     eae:	6e 2d       	mov	r22, r14
     eb0:	8f 2d       	mov	r24, r15
     eb2:	d4 df       	rcall	.-88     	; 0xe5c <prvInitialiseNewQueue>
     eb4:	ce 01       	movw	r24, r28
     eb6:	df 91       	pop	r29
     eb8:	cf 91       	pop	r28
     eba:	1f 91       	pop	r17
     ebc:	0f 91       	pop	r16
     ebe:	ff 90       	pop	r15
     ec0:	ef 90       	pop	r14
     ec2:	df 90       	pop	r13
     ec4:	08 95       	ret

00000ec6 <xQueueGenericSend>:
     ec6:	cf 92       	push	r12
     ec8:	df 92       	push	r13
     eca:	ef 92       	push	r14
     ecc:	ff 92       	push	r15
     ece:	0f 93       	push	r16
     ed0:	1f 93       	push	r17
     ed2:	cf 93       	push	r28
     ed4:	df 93       	push	r29
     ed6:	cd b7       	in	r28, 0x3d	; 61
     ed8:	de b7       	in	r29, 0x3e	; 62
     eda:	29 97       	sbiw	r28, 0x09	; 9
     edc:	0f b6       	in	r0, 0x3f	; 63
     ede:	f8 94       	cli
     ee0:	de bf       	out	0x3e, r29	; 62
     ee2:	0f be       	out	0x3f, r0	; 63
     ee4:	cd bf       	out	0x3d, r28	; 61
     ee6:	7c 01       	movw	r14, r24
     ee8:	6b 01       	movw	r12, r22
     eea:	2e 83       	std	Y+6, r18	; 0x06
     eec:	3f 83       	std	Y+7, r19	; 0x07
     eee:	48 87       	std	Y+8, r20	; 0x08
     ef0:	59 87       	std	Y+9, r21	; 0x09
     ef2:	10 e0       	ldi	r17, 0x00	; 0
     ef4:	0f b6       	in	r0, 0x3f	; 63
     ef6:	f8 94       	cli
     ef8:	0f 92       	push	r0
     efa:	f7 01       	movw	r30, r14
     efc:	96 8d       	ldd	r25, Z+30	; 0x1e
     efe:	87 8d       	ldd	r24, Z+31	; 0x1f
     f00:	98 17       	cp	r25, r24
     f02:	10 f0       	brcs	.+4      	; 0xf08 <xQueueGenericSend+0x42>
     f04:	02 30       	cpi	r16, 0x02	; 2
     f06:	a9 f4       	brne	.+42     	; 0xf32 <xQueueGenericSend+0x6c>
     f08:	40 2f       	mov	r20, r16
     f0a:	b6 01       	movw	r22, r12
     f0c:	c7 01       	movw	r24, r14
     f0e:	b6 de       	rcall	.-660    	; 0xc7c <prvCopyDataToQueue>
     f10:	f7 01       	movw	r30, r14
     f12:	93 89       	ldd	r25, Z+19	; 0x13
     f14:	99 23       	and	r25, r25
     f16:	39 f0       	breq	.+14     	; 0xf26 <xQueueGenericSend+0x60>
     f18:	c7 01       	movw	r24, r14
     f1a:	43 96       	adiw	r24, 0x13	; 19
     f1c:	ad d7       	rcall	.+3930   	; 0x1e78 <xTaskRemoveFromEventList>
     f1e:	88 23       	and	r24, r24
     f20:	21 f0       	breq	.+8      	; 0xf2a <xQueueGenericSend+0x64>
     f22:	ba dd       	rcall	.-1164   	; 0xa98 <vPortYield>
     f24:	02 c0       	rjmp	.+4      	; 0xf2a <xQueueGenericSend+0x64>
     f26:	81 11       	cpse	r24, r1
     f28:	b7 dd       	rcall	.-1170   	; 0xa98 <vPortYield>
     f2a:	0f 90       	pop	r0
     f2c:	0f be       	out	0x3f, r0	; 63
     f2e:	81 e0       	ldi	r24, 0x01	; 1
     f30:	48 c0       	rjmp	.+144    	; 0xfc2 <xQueueGenericSend+0xfc>
     f32:	8e 81       	ldd	r24, Y+6	; 0x06
     f34:	9f 81       	ldd	r25, Y+7	; 0x07
     f36:	a8 85       	ldd	r26, Y+8	; 0x08
     f38:	b9 85       	ldd	r27, Y+9	; 0x09
     f3a:	89 2b       	or	r24, r25
     f3c:	8a 2b       	or	r24, r26
     f3e:	8b 2b       	or	r24, r27
     f40:	21 f4       	brne	.+8      	; 0xf4a <xQueueGenericSend+0x84>
     f42:	0f 90       	pop	r0
     f44:	0f be       	out	0x3f, r0	; 63
     f46:	80 e0       	ldi	r24, 0x00	; 0
     f48:	3c c0       	rjmp	.+120    	; 0xfc2 <xQueueGenericSend+0xfc>
     f4a:	11 11       	cpse	r17, r1
     f4c:	05 c0       	rjmp	.+10     	; 0xf58 <xQueueGenericSend+0x92>
     f4e:	ce 01       	movw	r24, r28
     f50:	01 96       	adiw	r24, 0x01	; 1
     f52:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <vTaskInternalSetTimeOutState>
     f56:	11 e0       	ldi	r17, 0x01	; 1
     f58:	0f 90       	pop	r0
     f5a:	0f be       	out	0x3f, r0	; 63
     f5c:	7c d4       	rcall	.+2296   	; 0x1856 <vTaskSuspendAll>
     f5e:	0f b6       	in	r0, 0x3f	; 63
     f60:	f8 94       	cli
     f62:	0f 92       	push	r0
     f64:	f7 01       	movw	r30, r14
     f66:	81 a1       	ldd	r24, Z+33	; 0x21
     f68:	8f 3f       	cpi	r24, 0xFF	; 255
     f6a:	09 f4       	brne	.+2      	; 0xf6e <xQueueGenericSend+0xa8>
     f6c:	11 a2       	std	Z+33, r1	; 0x21
     f6e:	f7 01       	movw	r30, r14
     f70:	82 a1       	ldd	r24, Z+34	; 0x22
     f72:	8f 3f       	cpi	r24, 0xFF	; 255
     f74:	09 f4       	brne	.+2      	; 0xf78 <xQueueGenericSend+0xb2>
     f76:	12 a2       	std	Z+34, r1	; 0x22
     f78:	0f 90       	pop	r0
     f7a:	0f be       	out	0x3f, r0	; 63
     f7c:	be 01       	movw	r22, r28
     f7e:	6a 5f       	subi	r22, 0xFA	; 250
     f80:	7f 4f       	sbci	r23, 0xFF	; 255
     f82:	ce 01       	movw	r24, r28
     f84:	01 96       	adiw	r24, 0x01	; 1
     f86:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <xTaskCheckForTimeOut>
     f8a:	81 11       	cpse	r24, r1
     f8c:	16 c0       	rjmp	.+44     	; 0xfba <xQueueGenericSend+0xf4>
     f8e:	c7 01       	movw	r24, r14
     f90:	67 de       	rcall	.-818    	; 0xc60 <prvIsQueueFull>
     f92:	88 23       	and	r24, r24
     f94:	71 f0       	breq	.+28     	; 0xfb2 <xQueueGenericSend+0xec>
     f96:	4e 81       	ldd	r20, Y+6	; 0x06
     f98:	5f 81       	ldd	r21, Y+7	; 0x07
     f9a:	68 85       	ldd	r22, Y+8	; 0x08
     f9c:	79 85       	ldd	r23, Y+9	; 0x09
     f9e:	c7 01       	movw	r24, r14
     fa0:	08 96       	adiw	r24, 0x08	; 8
     fa2:	11 d7       	rcall	.+3618   	; 0x1dc6 <vTaskPlaceOnEventList>
     fa4:	c7 01       	movw	r24, r14
     fa6:	e3 de       	rcall	.-570    	; 0xd6e <prvUnlockQueue>
     fa8:	96 d5       	rcall	.+2860   	; 0x1ad6 <xTaskResumeAll>
     faa:	81 11       	cpse	r24, r1
     fac:	a3 cf       	rjmp	.-186    	; 0xef4 <xQueueGenericSend+0x2e>
     fae:	74 dd       	rcall	.-1304   	; 0xa98 <vPortYield>
     fb0:	a1 cf       	rjmp	.-190    	; 0xef4 <xQueueGenericSend+0x2e>
     fb2:	c7 01       	movw	r24, r14
     fb4:	dc de       	rcall	.-584    	; 0xd6e <prvUnlockQueue>
     fb6:	8f d5       	rcall	.+2846   	; 0x1ad6 <xTaskResumeAll>
     fb8:	9d cf       	rjmp	.-198    	; 0xef4 <xQueueGenericSend+0x2e>
     fba:	c7 01       	movw	r24, r14
     fbc:	d8 de       	rcall	.-592    	; 0xd6e <prvUnlockQueue>
     fbe:	8b d5       	rcall	.+2838   	; 0x1ad6 <xTaskResumeAll>
     fc0:	80 e0       	ldi	r24, 0x00	; 0
     fc2:	29 96       	adiw	r28, 0x09	; 9
     fc4:	0f b6       	in	r0, 0x3f	; 63
     fc6:	f8 94       	cli
     fc8:	de bf       	out	0x3e, r29	; 62
     fca:	0f be       	out	0x3f, r0	; 63
     fcc:	cd bf       	out	0x3d, r28	; 61
     fce:	df 91       	pop	r29
     fd0:	cf 91       	pop	r28
     fd2:	1f 91       	pop	r17
     fd4:	0f 91       	pop	r16
     fd6:	ff 90       	pop	r15
     fd8:	ef 90       	pop	r14
     fda:	df 90       	pop	r13
     fdc:	cf 90       	pop	r12
     fde:	08 95       	ret

00000fe0 <prvInitialiseMutex>:
     fe0:	0f 93       	push	r16
     fe2:	00 97       	sbiw	r24, 0x00	; 0
     fe4:	69 f0       	breq	.+26     	; 0x1000 <__EEPROM_REGION_LENGTH__>
     fe6:	fc 01       	movw	r30, r24
     fe8:	15 82       	std	Z+5, r1	; 0x05
     fea:	14 82       	std	Z+4, r1	; 0x04
     fec:	11 82       	std	Z+1, r1	; 0x01
     fee:	10 82       	st	Z, r1
     ff0:	16 82       	std	Z+6, r1	; 0x06
     ff2:	00 e0       	ldi	r16, 0x00	; 0
     ff4:	20 e0       	ldi	r18, 0x00	; 0
     ff6:	30 e0       	ldi	r19, 0x00	; 0
     ff8:	a9 01       	movw	r20, r18
     ffa:	60 e0       	ldi	r22, 0x00	; 0
     ffc:	70 e0       	ldi	r23, 0x00	; 0
     ffe:	63 df       	rcall	.-314    	; 0xec6 <xQueueGenericSend>
    1000:	0f 91       	pop	r16
    1002:	08 95       	ret

00001004 <xQueueCreateMutex>:
    1004:	cf 93       	push	r28
    1006:	df 93       	push	r29
    1008:	48 2f       	mov	r20, r24
    100a:	60 e0       	ldi	r22, 0x00	; 0
    100c:	81 e0       	ldi	r24, 0x01	; 1
    100e:	38 df       	rcall	.-400    	; 0xe80 <xQueueGenericCreate>
    1010:	ec 01       	movw	r28, r24
    1012:	e6 df       	rcall	.-52     	; 0xfe0 <prvInitialiseMutex>
    1014:	ce 01       	movw	r24, r28
    1016:	df 91       	pop	r29
    1018:	cf 91       	pop	r28
    101a:	08 95       	ret

0000101c <xQueueGenericSendFromISR>:
    101c:	ef 92       	push	r14
    101e:	ff 92       	push	r15
    1020:	0f 93       	push	r16
    1022:	1f 93       	push	r17
    1024:	cf 93       	push	r28
    1026:	df 93       	push	r29
    1028:	8a 01       	movw	r16, r20
    102a:	fc 01       	movw	r30, r24
    102c:	56 8d       	ldd	r21, Z+30	; 0x1e
    102e:	37 8d       	ldd	r19, Z+31	; 0x1f
    1030:	53 17       	cp	r21, r19
    1032:	10 f0       	brcs	.+4      	; 0x1038 <xQueueGenericSendFromISR+0x1c>
    1034:	22 30       	cpi	r18, 0x02	; 2
    1036:	f1 f4       	brne	.+60     	; 0x1074 <xQueueGenericSendFromISR+0x58>
    1038:	42 2f       	mov	r20, r18
    103a:	78 01       	movw	r14, r16
    103c:	ec 01       	movw	r28, r24
    103e:	1a a1       	ldd	r17, Y+34	; 0x22
    1040:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1042:	ce 01       	movw	r24, r28
    1044:	1b de       	rcall	.-970    	; 0xc7c <prvCopyDataToQueue>
    1046:	1f 3f       	cpi	r17, 0xFF	; 255
    1048:	79 f4       	brne	.+30     	; 0x1068 <xQueueGenericSendFromISR+0x4c>
    104a:	8b 89       	ldd	r24, Y+19	; 0x13
    104c:	88 23       	and	r24, r24
    104e:	a1 f0       	breq	.+40     	; 0x1078 <xQueueGenericSendFromISR+0x5c>
    1050:	ce 01       	movw	r24, r28
    1052:	43 96       	adiw	r24, 0x13	; 19
    1054:	11 d7       	rcall	.+3618   	; 0x1e78 <xTaskRemoveFromEventList>
    1056:	88 23       	and	r24, r24
    1058:	89 f0       	breq	.+34     	; 0x107c <xQueueGenericSendFromISR+0x60>
    105a:	e1 14       	cp	r14, r1
    105c:	f1 04       	cpc	r15, r1
    105e:	81 f0       	breq	.+32     	; 0x1080 <xQueueGenericSendFromISR+0x64>
    1060:	81 e0       	ldi	r24, 0x01	; 1
    1062:	f7 01       	movw	r30, r14
    1064:	80 83       	st	Z, r24
    1066:	0d c0       	rjmp	.+26     	; 0x1082 <xQueueGenericSendFromISR+0x66>
    1068:	ff 24       	eor	r15, r15
    106a:	f3 94       	inc	r15
    106c:	f1 0e       	add	r15, r17
    106e:	fa a2       	std	Y+34, r15	; 0x22
    1070:	81 e0       	ldi	r24, 0x01	; 1
    1072:	07 c0       	rjmp	.+14     	; 0x1082 <xQueueGenericSendFromISR+0x66>
    1074:	80 e0       	ldi	r24, 0x00	; 0
    1076:	05 c0       	rjmp	.+10     	; 0x1082 <xQueueGenericSendFromISR+0x66>
    1078:	81 e0       	ldi	r24, 0x01	; 1
    107a:	03 c0       	rjmp	.+6      	; 0x1082 <xQueueGenericSendFromISR+0x66>
    107c:	81 e0       	ldi	r24, 0x01	; 1
    107e:	01 c0       	rjmp	.+2      	; 0x1082 <xQueueGenericSendFromISR+0x66>
    1080:	81 e0       	ldi	r24, 0x01	; 1
    1082:	df 91       	pop	r29
    1084:	cf 91       	pop	r28
    1086:	1f 91       	pop	r17
    1088:	0f 91       	pop	r16
    108a:	ff 90       	pop	r15
    108c:	ef 90       	pop	r14
    108e:	08 95       	ret

00001090 <xQueueReceive>:
    1090:	cf 92       	push	r12
    1092:	df 92       	push	r13
    1094:	ef 92       	push	r14
    1096:	ff 92       	push	r15
    1098:	0f 93       	push	r16
    109a:	1f 93       	push	r17
    109c:	cf 93       	push	r28
    109e:	df 93       	push	r29
    10a0:	cd b7       	in	r28, 0x3d	; 61
    10a2:	de b7       	in	r29, 0x3e	; 62
    10a4:	29 97       	sbiw	r28, 0x09	; 9
    10a6:	0f b6       	in	r0, 0x3f	; 63
    10a8:	f8 94       	cli
    10aa:	de bf       	out	0x3e, r29	; 62
    10ac:	0f be       	out	0x3f, r0	; 63
    10ae:	cd bf       	out	0x3d, r28	; 61
    10b0:	8c 01       	movw	r16, r24
    10b2:	6b 01       	movw	r12, r22
    10b4:	2e 83       	std	Y+6, r18	; 0x06
    10b6:	3f 83       	std	Y+7, r19	; 0x07
    10b8:	48 87       	std	Y+8, r20	; 0x08
    10ba:	59 87       	std	Y+9, r21	; 0x09
    10bc:	e1 2c       	mov	r14, r1
    10be:	0f b6       	in	r0, 0x3f	; 63
    10c0:	f8 94       	cli
    10c2:	0f 92       	push	r0
    10c4:	f8 01       	movw	r30, r16
    10c6:	f6 8c       	ldd	r15, Z+30	; 0x1e
    10c8:	ff 20       	and	r15, r15
    10ca:	91 f0       	breq	.+36     	; 0x10f0 <xQueueReceive+0x60>
    10cc:	b6 01       	movw	r22, r12
    10ce:	c8 01       	movw	r24, r16
    10d0:	34 de       	rcall	.-920    	; 0xd3a <prvCopyDataFromQueue>
    10d2:	fa 94       	dec	r15
    10d4:	f8 01       	movw	r30, r16
    10d6:	f6 8e       	std	Z+30, r15	; 0x1e
    10d8:	80 85       	ldd	r24, Z+8	; 0x08
    10da:	88 23       	and	r24, r24
    10dc:	29 f0       	breq	.+10     	; 0x10e8 <xQueueReceive+0x58>
    10de:	c8 01       	movw	r24, r16
    10e0:	08 96       	adiw	r24, 0x08	; 8
    10e2:	ca d6       	rcall	.+3476   	; 0x1e78 <xTaskRemoveFromEventList>
    10e4:	81 11       	cpse	r24, r1
    10e6:	d8 dc       	rcall	.-1616   	; 0xa98 <vPortYield>
    10e8:	0f 90       	pop	r0
    10ea:	0f be       	out	0x3f, r0	; 63
    10ec:	81 e0       	ldi	r24, 0x01	; 1
    10ee:	4c c0       	rjmp	.+152    	; 0x1188 <xQueueReceive+0xf8>
    10f0:	8e 81       	ldd	r24, Y+6	; 0x06
    10f2:	9f 81       	ldd	r25, Y+7	; 0x07
    10f4:	a8 85       	ldd	r26, Y+8	; 0x08
    10f6:	b9 85       	ldd	r27, Y+9	; 0x09
    10f8:	89 2b       	or	r24, r25
    10fa:	8a 2b       	or	r24, r26
    10fc:	8b 2b       	or	r24, r27
    10fe:	21 f4       	brne	.+8      	; 0x1108 <xQueueReceive+0x78>
    1100:	0f 90       	pop	r0
    1102:	0f be       	out	0x3f, r0	; 63
    1104:	80 e0       	ldi	r24, 0x00	; 0
    1106:	40 c0       	rjmp	.+128    	; 0x1188 <xQueueReceive+0xf8>
    1108:	e1 10       	cpse	r14, r1
    110a:	05 c0       	rjmp	.+10     	; 0x1116 <xQueueReceive+0x86>
    110c:	ce 01       	movw	r24, r28
    110e:	01 96       	adiw	r24, 0x01	; 1
    1110:	62 d7       	rcall	.+3780   	; 0x1fd6 <vTaskInternalSetTimeOutState>
    1112:	ee 24       	eor	r14, r14
    1114:	e3 94       	inc	r14
    1116:	0f 90       	pop	r0
    1118:	0f be       	out	0x3f, r0	; 63
    111a:	9d d3       	rcall	.+1850   	; 0x1856 <vTaskSuspendAll>
    111c:	0f b6       	in	r0, 0x3f	; 63
    111e:	f8 94       	cli
    1120:	0f 92       	push	r0
    1122:	f8 01       	movw	r30, r16
    1124:	81 a1       	ldd	r24, Z+33	; 0x21
    1126:	8f 3f       	cpi	r24, 0xFF	; 255
    1128:	09 f4       	brne	.+2      	; 0x112c <xQueueReceive+0x9c>
    112a:	11 a2       	std	Z+33, r1	; 0x21
    112c:	f8 01       	movw	r30, r16
    112e:	82 a1       	ldd	r24, Z+34	; 0x22
    1130:	8f 3f       	cpi	r24, 0xFF	; 255
    1132:	09 f4       	brne	.+2      	; 0x1136 <xQueueReceive+0xa6>
    1134:	12 a2       	std	Z+34, r1	; 0x22
    1136:	0f 90       	pop	r0
    1138:	0f be       	out	0x3f, r0	; 63
    113a:	be 01       	movw	r22, r28
    113c:	6a 5f       	subi	r22, 0xFA	; 250
    113e:	7f 4f       	sbci	r23, 0xFF	; 255
    1140:	ce 01       	movw	r24, r28
    1142:	01 96       	adiw	r24, 0x01	; 1
    1144:	59 d7       	rcall	.+3762   	; 0x1ff8 <xTaskCheckForTimeOut>
    1146:	81 11       	cpse	r24, r1
    1148:	16 c0       	rjmp	.+44     	; 0x1176 <xQueueReceive+0xe6>
    114a:	c8 01       	movw	r24, r16
    114c:	7c dd       	rcall	.-1288   	; 0xc46 <prvIsQueueEmpty>
    114e:	88 23       	and	r24, r24
    1150:	71 f0       	breq	.+28     	; 0x116e <xQueueReceive+0xde>
    1152:	4e 81       	ldd	r20, Y+6	; 0x06
    1154:	5f 81       	ldd	r21, Y+7	; 0x07
    1156:	68 85       	ldd	r22, Y+8	; 0x08
    1158:	79 85       	ldd	r23, Y+9	; 0x09
    115a:	c8 01       	movw	r24, r16
    115c:	43 96       	adiw	r24, 0x13	; 19
    115e:	33 d6       	rcall	.+3174   	; 0x1dc6 <vTaskPlaceOnEventList>
    1160:	c8 01       	movw	r24, r16
    1162:	05 de       	rcall	.-1014   	; 0xd6e <prvUnlockQueue>
    1164:	b8 d4       	rcall	.+2416   	; 0x1ad6 <xTaskResumeAll>
    1166:	81 11       	cpse	r24, r1
    1168:	aa cf       	rjmp	.-172    	; 0x10be <xQueueReceive+0x2e>
    116a:	96 dc       	rcall	.-1748   	; 0xa98 <vPortYield>
    116c:	a8 cf       	rjmp	.-176    	; 0x10be <xQueueReceive+0x2e>
    116e:	c8 01       	movw	r24, r16
    1170:	fe dd       	rcall	.-1028   	; 0xd6e <prvUnlockQueue>
    1172:	b1 d4       	rcall	.+2402   	; 0x1ad6 <xTaskResumeAll>
    1174:	a4 cf       	rjmp	.-184    	; 0x10be <xQueueReceive+0x2e>
    1176:	c8 01       	movw	r24, r16
    1178:	fa dd       	rcall	.-1036   	; 0xd6e <prvUnlockQueue>
    117a:	ad d4       	rcall	.+2394   	; 0x1ad6 <xTaskResumeAll>
    117c:	c8 01       	movw	r24, r16
    117e:	63 dd       	rcall	.-1338   	; 0xc46 <prvIsQueueEmpty>
    1180:	88 23       	and	r24, r24
    1182:	09 f4       	brne	.+2      	; 0x1186 <xQueueReceive+0xf6>
    1184:	9c cf       	rjmp	.-200    	; 0x10be <xQueueReceive+0x2e>
    1186:	80 e0       	ldi	r24, 0x00	; 0
    1188:	29 96       	adiw	r28, 0x09	; 9
    118a:	0f b6       	in	r0, 0x3f	; 63
    118c:	f8 94       	cli
    118e:	de bf       	out	0x3e, r29	; 62
    1190:	0f be       	out	0x3f, r0	; 63
    1192:	cd bf       	out	0x3d, r28	; 61
    1194:	df 91       	pop	r29
    1196:	cf 91       	pop	r28
    1198:	1f 91       	pop	r17
    119a:	0f 91       	pop	r16
    119c:	ff 90       	pop	r15
    119e:	ef 90       	pop	r14
    11a0:	df 90       	pop	r13
    11a2:	cf 90       	pop	r12
    11a4:	08 95       	ret

000011a6 <xQueueSemaphoreTake>:
    11a6:	ef 92       	push	r14
    11a8:	ff 92       	push	r15
    11aa:	0f 93       	push	r16
    11ac:	1f 93       	push	r17
    11ae:	cf 93       	push	r28
    11b0:	df 93       	push	r29
    11b2:	cd b7       	in	r28, 0x3d	; 61
    11b4:	de b7       	in	r29, 0x3e	; 62
    11b6:	29 97       	sbiw	r28, 0x09	; 9
    11b8:	0f b6       	in	r0, 0x3f	; 63
    11ba:	f8 94       	cli
    11bc:	de bf       	out	0x3e, r29	; 62
    11be:	0f be       	out	0x3f, r0	; 63
    11c0:	cd bf       	out	0x3d, r28	; 61
    11c2:	8c 01       	movw	r16, r24
    11c4:	4e 83       	std	Y+6, r20	; 0x06
    11c6:	5f 83       	std	Y+7, r21	; 0x07
    11c8:	68 87       	std	Y+8, r22	; 0x08
    11ca:	79 87       	std	Y+9, r23	; 0x09
    11cc:	e1 2c       	mov	r14, r1
    11ce:	f1 2c       	mov	r15, r1
    11d0:	0f b6       	in	r0, 0x3f	; 63
    11d2:	f8 94       	cli
    11d4:	0f 92       	push	r0
    11d6:	f8 01       	movw	r30, r16
    11d8:	86 8d       	ldd	r24, Z+30	; 0x1e
    11da:	88 23       	and	r24, r24
    11dc:	c1 f0       	breq	.+48     	; 0x120e <xQueueSemaphoreTake+0x68>
    11de:	81 50       	subi	r24, 0x01	; 1
    11e0:	86 8f       	std	Z+30, r24	; 0x1e
    11e2:	80 81       	ld	r24, Z
    11e4:	91 81       	ldd	r25, Z+1	; 0x01
    11e6:	89 2b       	or	r24, r25
    11e8:	29 f4       	brne	.+10     	; 0x11f4 <xQueueSemaphoreTake+0x4e>
    11ea:	0e 94 bd 11 	call	0x237a	; 0x237a <pvTaskIncrementMutexHeldCount>
    11ee:	f8 01       	movw	r30, r16
    11f0:	95 83       	std	Z+5, r25	; 0x05
    11f2:	84 83       	std	Z+4, r24	; 0x04
    11f4:	f8 01       	movw	r30, r16
    11f6:	80 85       	ldd	r24, Z+8	; 0x08
    11f8:	88 23       	and	r24, r24
    11fa:	29 f0       	breq	.+10     	; 0x1206 <xQueueSemaphoreTake+0x60>
    11fc:	c8 01       	movw	r24, r16
    11fe:	08 96       	adiw	r24, 0x08	; 8
    1200:	3b d6       	rcall	.+3190   	; 0x1e78 <xTaskRemoveFromEventList>
    1202:	81 11       	cpse	r24, r1
    1204:	49 dc       	rcall	.-1902   	; 0xa98 <vPortYield>
    1206:	0f 90       	pop	r0
    1208:	0f be       	out	0x3f, r0	; 63
    120a:	81 e0       	ldi	r24, 0x01	; 1
    120c:	6a c0       	rjmp	.+212    	; 0x12e2 <xQueueSemaphoreTake+0x13c>
    120e:	8e 81       	ldd	r24, Y+6	; 0x06
    1210:	9f 81       	ldd	r25, Y+7	; 0x07
    1212:	a8 85       	ldd	r26, Y+8	; 0x08
    1214:	b9 85       	ldd	r27, Y+9	; 0x09
    1216:	89 2b       	or	r24, r25
    1218:	8a 2b       	or	r24, r26
    121a:	8b 2b       	or	r24, r27
    121c:	21 f4       	brne	.+8      	; 0x1226 <xQueueSemaphoreTake+0x80>
    121e:	0f 90       	pop	r0
    1220:	0f be       	out	0x3f, r0	; 63
    1222:	80 e0       	ldi	r24, 0x00	; 0
    1224:	5e c0       	rjmp	.+188    	; 0x12e2 <xQueueSemaphoreTake+0x13c>
    1226:	f1 10       	cpse	r15, r1
    1228:	05 c0       	rjmp	.+10     	; 0x1234 <xQueueSemaphoreTake+0x8e>
    122a:	ce 01       	movw	r24, r28
    122c:	01 96       	adiw	r24, 0x01	; 1
    122e:	d3 d6       	rcall	.+3494   	; 0x1fd6 <vTaskInternalSetTimeOutState>
    1230:	ff 24       	eor	r15, r15
    1232:	f3 94       	inc	r15
    1234:	0f 90       	pop	r0
    1236:	0f be       	out	0x3f, r0	; 63
    1238:	0e d3       	rcall	.+1564   	; 0x1856 <vTaskSuspendAll>
    123a:	0f b6       	in	r0, 0x3f	; 63
    123c:	f8 94       	cli
    123e:	0f 92       	push	r0
    1240:	f8 01       	movw	r30, r16
    1242:	81 a1       	ldd	r24, Z+33	; 0x21
    1244:	8f 3f       	cpi	r24, 0xFF	; 255
    1246:	09 f4       	brne	.+2      	; 0x124a <xQueueSemaphoreTake+0xa4>
    1248:	11 a2       	std	Z+33, r1	; 0x21
    124a:	f8 01       	movw	r30, r16
    124c:	82 a1       	ldd	r24, Z+34	; 0x22
    124e:	8f 3f       	cpi	r24, 0xFF	; 255
    1250:	09 f4       	brne	.+2      	; 0x1254 <xQueueSemaphoreTake+0xae>
    1252:	12 a2       	std	Z+34, r1	; 0x22
    1254:	0f 90       	pop	r0
    1256:	0f be       	out	0x3f, r0	; 63
    1258:	be 01       	movw	r22, r28
    125a:	6a 5f       	subi	r22, 0xFA	; 250
    125c:	7f 4f       	sbci	r23, 0xFF	; 255
    125e:	ce 01       	movw	r24, r28
    1260:	01 96       	adiw	r24, 0x01	; 1
    1262:	ca d6       	rcall	.+3476   	; 0x1ff8 <xTaskCheckForTimeOut>
    1264:	81 11       	cpse	r24, r1
    1266:	24 c0       	rjmp	.+72     	; 0x12b0 <xQueueSemaphoreTake+0x10a>
    1268:	c8 01       	movw	r24, r16
    126a:	ed dc       	rcall	.-1574   	; 0xc46 <prvIsQueueEmpty>
    126c:	88 23       	and	r24, r24
    126e:	e1 f0       	breq	.+56     	; 0x12a8 <xQueueSemaphoreTake+0x102>
    1270:	f8 01       	movw	r30, r16
    1272:	80 81       	ld	r24, Z
    1274:	91 81       	ldd	r25, Z+1	; 0x01
    1276:	89 2b       	or	r24, r25
    1278:	49 f4       	brne	.+18     	; 0x128c <xQueueSemaphoreTake+0xe6>
    127a:	0f b6       	in	r0, 0x3f	; 63
    127c:	f8 94       	cli
    127e:	0f 92       	push	r0
    1280:	84 81       	ldd	r24, Z+4	; 0x04
    1282:	95 81       	ldd	r25, Z+5	; 0x05
    1284:	31 d7       	rcall	.+3682   	; 0x20e8 <xTaskPriorityInherit>
    1286:	e8 2e       	mov	r14, r24
    1288:	0f 90       	pop	r0
    128a:	0f be       	out	0x3f, r0	; 63
    128c:	4e 81       	ldd	r20, Y+6	; 0x06
    128e:	5f 81       	ldd	r21, Y+7	; 0x07
    1290:	68 85       	ldd	r22, Y+8	; 0x08
    1292:	79 85       	ldd	r23, Y+9	; 0x09
    1294:	c8 01       	movw	r24, r16
    1296:	43 96       	adiw	r24, 0x13	; 19
    1298:	96 d5       	rcall	.+2860   	; 0x1dc6 <vTaskPlaceOnEventList>
    129a:	c8 01       	movw	r24, r16
    129c:	68 dd       	rcall	.-1328   	; 0xd6e <prvUnlockQueue>
    129e:	1b d4       	rcall	.+2102   	; 0x1ad6 <xTaskResumeAll>
    12a0:	81 11       	cpse	r24, r1
    12a2:	96 cf       	rjmp	.-212    	; 0x11d0 <xQueueSemaphoreTake+0x2a>
    12a4:	f9 db       	rcall	.-2062   	; 0xa98 <vPortYield>
    12a6:	94 cf       	rjmp	.-216    	; 0x11d0 <xQueueSemaphoreTake+0x2a>
    12a8:	c8 01       	movw	r24, r16
    12aa:	61 dd       	rcall	.-1342   	; 0xd6e <prvUnlockQueue>
    12ac:	14 d4       	rcall	.+2088   	; 0x1ad6 <xTaskResumeAll>
    12ae:	90 cf       	rjmp	.-224    	; 0x11d0 <xQueueSemaphoreTake+0x2a>
    12b0:	c8 01       	movw	r24, r16
    12b2:	5d dd       	rcall	.-1350   	; 0xd6e <prvUnlockQueue>
    12b4:	10 d4       	rcall	.+2080   	; 0x1ad6 <xTaskResumeAll>
    12b6:	c8 01       	movw	r24, r16
    12b8:	c6 dc       	rcall	.-1652   	; 0xc46 <prvIsQueueEmpty>
    12ba:	88 23       	and	r24, r24
    12bc:	09 f4       	brne	.+2      	; 0x12c0 <xQueueSemaphoreTake+0x11a>
    12be:	88 cf       	rjmp	.-240    	; 0x11d0 <xQueueSemaphoreTake+0x2a>
    12c0:	ee 20       	and	r14, r14
    12c2:	71 f0       	breq	.+28     	; 0x12e0 <xQueueSemaphoreTake+0x13a>
    12c4:	0f b6       	in	r0, 0x3f	; 63
    12c6:	f8 94       	cli
    12c8:	0f 92       	push	r0
    12ca:	c8 01       	movw	r24, r16
    12cc:	ac dc       	rcall	.-1704   	; 0xc26 <prvGetDisinheritPriorityAfterTimeout>
    12ce:	68 2f       	mov	r22, r24
    12d0:	f8 01       	movw	r30, r16
    12d2:	84 81       	ldd	r24, Z+4	; 0x04
    12d4:	95 81       	ldd	r25, Z+5	; 0x05
    12d6:	ea d7       	rcall	.+4052   	; 0x22ac <vTaskPriorityDisinheritAfterTimeout>
    12d8:	0f 90       	pop	r0
    12da:	0f be       	out	0x3f, r0	; 63
    12dc:	80 e0       	ldi	r24, 0x00	; 0
    12de:	01 c0       	rjmp	.+2      	; 0x12e2 <xQueueSemaphoreTake+0x13c>
    12e0:	80 e0       	ldi	r24, 0x00	; 0
    12e2:	29 96       	adiw	r28, 0x09	; 9
    12e4:	0f b6       	in	r0, 0x3f	; 63
    12e6:	f8 94       	cli
    12e8:	de bf       	out	0x3e, r29	; 62
    12ea:	0f be       	out	0x3f, r0	; 63
    12ec:	cd bf       	out	0x3d, r28	; 61
    12ee:	df 91       	pop	r29
    12f0:	cf 91       	pop	r28
    12f2:	1f 91       	pop	r17
    12f4:	0f 91       	pop	r16
    12f6:	ff 90       	pop	r15
    12f8:	ef 90       	pop	r14
    12fa:	08 95       	ret

000012fc <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
    12fc:	cf 93       	push	r28
    12fe:	df 93       	push	r29
    1300:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    1302:	0f b6       	in	r0, 0x3f	; 63
    1304:	f8 94       	cli
    1306:	0f 92       	push	r0
    1308:	89 a1       	ldd	r24, Y+33	; 0x21
    130a:	8f 3f       	cpi	r24, 0xFF	; 255
    130c:	09 f4       	brne	.+2      	; 0x1310 <vQueueWaitForMessageRestricted+0x14>
    130e:	19 a2       	std	Y+33, r1	; 0x21
    1310:	8a a1       	ldd	r24, Y+34	; 0x22
    1312:	8f 3f       	cpi	r24, 0xFF	; 255
    1314:	09 f4       	brne	.+2      	; 0x1318 <vQueueWaitForMessageRestricted+0x1c>
    1316:	1a a2       	std	Y+34, r1	; 0x22
    1318:	0f 90       	pop	r0
    131a:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    131c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    131e:	81 11       	cpse	r24, r1
    1320:	03 c0       	rjmp	.+6      	; 0x1328 <vQueueWaitForMessageRestricted+0x2c>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    1322:	ce 01       	movw	r24, r28
    1324:	43 96       	adiw	r24, 0x13	; 19
    1326:	66 d5       	rcall	.+2764   	; 0x1df4 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
    1328:	ce 01       	movw	r24, r28
    132a:	21 dd       	rcall	.-1470   	; 0xd6e <prvUnlockQueue>
    }
    132c:	df 91       	pop	r29
    132e:	cf 91       	pop	r28
    1330:	08 95       	ret

00001332 <prvResetNextTaskUnblockTime>:
    1332:	e0 91 2b 11 	lds	r30, 0x112B	; 0x80112b <pxDelayedTaskList>
    1336:	f0 91 2c 11 	lds	r31, 0x112C	; 0x80112c <pxDelayedTaskList+0x1>
    133a:	80 81       	ld	r24, Z
    133c:	81 11       	cpse	r24, r1
    133e:	0c c0       	rjmp	.+24     	; 0x1358 <prvResetNextTaskUnblockTime+0x26>
    1340:	8f ef       	ldi	r24, 0xFF	; 255
    1342:	9f ef       	ldi	r25, 0xFF	; 255
    1344:	dc 01       	movw	r26, r24
    1346:	80 93 f5 10 	sts	0x10F5, r24	; 0x8010f5 <xNextTaskUnblockTime>
    134a:	90 93 f6 10 	sts	0x10F6, r25	; 0x8010f6 <xNextTaskUnblockTime+0x1>
    134e:	a0 93 f7 10 	sts	0x10F7, r26	; 0x8010f7 <xNextTaskUnblockTime+0x2>
    1352:	b0 93 f8 10 	sts	0x10F8, r27	; 0x8010f8 <xNextTaskUnblockTime+0x3>
    1356:	08 95       	ret
    1358:	e0 91 2b 11 	lds	r30, 0x112B	; 0x80112b <pxDelayedTaskList>
    135c:	f0 91 2c 11 	lds	r31, 0x112C	; 0x80112c <pxDelayedTaskList+0x1>
    1360:	07 80       	ldd	r0, Z+7	; 0x07
    1362:	f0 85       	ldd	r31, Z+8	; 0x08
    1364:	e0 2d       	mov	r30, r0
    1366:	80 81       	ld	r24, Z
    1368:	91 81       	ldd	r25, Z+1	; 0x01
    136a:	a2 81       	ldd	r26, Z+2	; 0x02
    136c:	b3 81       	ldd	r27, Z+3	; 0x03
    136e:	80 93 f5 10 	sts	0x10F5, r24	; 0x8010f5 <xNextTaskUnblockTime>
    1372:	90 93 f6 10 	sts	0x10F6, r25	; 0x8010f6 <xNextTaskUnblockTime+0x1>
    1376:	a0 93 f7 10 	sts	0x10F7, r26	; 0x8010f7 <xNextTaskUnblockTime+0x2>
    137a:	b0 93 f8 10 	sts	0x10F8, r27	; 0x8010f8 <xNextTaskUnblockTime+0x3>
    137e:	08 95       	ret

00001380 <prvDeleteTCB>:
    1380:	cf 93       	push	r28
    1382:	df 93       	push	r29
    1384:	ec 01       	movw	r28, r24
    1386:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1388:	9c 8d       	ldd	r25, Y+28	; 0x1c
    138a:	7c da       	rcall	.-2824   	; 0x884 <vPortFree>
    138c:	ce 01       	movw	r24, r28
    138e:	7a da       	rcall	.-2828   	; 0x884 <vPortFree>
    1390:	df 91       	pop	r29
    1392:	cf 91       	pop	r28
    1394:	08 95       	ret

00001396 <prvInitialiseNewTask>:
    1396:	4f 92       	push	r4
    1398:	5f 92       	push	r5
    139a:	6f 92       	push	r6
    139c:	7f 92       	push	r7
    139e:	8f 92       	push	r8
    13a0:	9f 92       	push	r9
    13a2:	af 92       	push	r10
    13a4:	bf 92       	push	r11
    13a6:	cf 92       	push	r12
    13a8:	df 92       	push	r13
    13aa:	ef 92       	push	r14
    13ac:	ff 92       	push	r15
    13ae:	0f 93       	push	r16
    13b0:	cf 93       	push	r28
    13b2:	df 93       	push	r29
    13b4:	2c 01       	movw	r4, r24
    13b6:	5b 01       	movw	r10, r22
    13b8:	4a 01       	movw	r8, r20
    13ba:	39 01       	movw	r6, r18
    13bc:	e6 01       	movw	r28, r12
    13be:	65 ea       	ldi	r22, 0xA5	; 165
    13c0:	70 e0       	ldi	r23, 0x00	; 0
    13c2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13c4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13c6:	0e 94 cf 1d 	call	0x3b9e	; 0x3b9e <memset>
    13ca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13cc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13ce:	21 e0       	ldi	r18, 0x01	; 1
    13d0:	82 1a       	sub	r8, r18
    13d2:	91 08       	sbc	r9, r1
    13d4:	88 0e       	add	r8, r24
    13d6:	99 1e       	adc	r9, r25
    13d8:	a1 14       	cp	r10, r1
    13da:	b1 04       	cpc	r11, r1
    13dc:	89 f4       	brne	.+34     	; 0x1400 <prvInitialiseNewTask+0x6a>
    13de:	15 c0       	rjmp	.+42     	; 0x140a <prvInitialiseNewTask+0x74>
    13e0:	82 2f       	mov	r24, r18
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	f5 01       	movw	r30, r10
    13e6:	e8 0f       	add	r30, r24
    13e8:	f9 1f       	adc	r31, r25
    13ea:	30 81       	ld	r19, Z
    13ec:	de 01       	movw	r26, r28
    13ee:	a8 0f       	add	r26, r24
    13f0:	b9 1f       	adc	r27, r25
    13f2:	5d 96       	adiw	r26, 0x1d	; 29
    13f4:	3c 93       	st	X, r19
    13f6:	80 81       	ld	r24, Z
    13f8:	88 23       	and	r24, r24
    13fa:	29 f0       	breq	.+10     	; 0x1406 <prvInitialiseNewTask+0x70>
    13fc:	2f 5f       	subi	r18, 0xFF	; 255
    13fe:	01 c0       	rjmp	.+2      	; 0x1402 <prvInitialiseNewTask+0x6c>
    1400:	20 e0       	ldi	r18, 0x00	; 0
    1402:	20 31       	cpi	r18, 0x10	; 16
    1404:	68 f3       	brcs	.-38     	; 0x13e0 <prvInitialiseNewTask+0x4a>
    1406:	1c a6       	std	Y+44, r1	; 0x2c
    1408:	01 c0       	rjmp	.+2      	; 0x140c <prvInitialiseNewTask+0x76>
    140a:	1d 8e       	std	Y+29, r1	; 0x1d
    140c:	0a 30       	cpi	r16, 0x0A	; 10
    140e:	08 f0       	brcs	.+2      	; 0x1412 <prvInitialiseNewTask+0x7c>
    1410:	09 e0       	ldi	r16, 0x09	; 9
    1412:	0a 8f       	std	Y+26, r16	; 0x1a
    1414:	0d a7       	std	Y+45, r16	; 0x2d
    1416:	1e a6       	std	Y+46, r1	; 0x2e
    1418:	ce 01       	movw	r24, r28
    141a:	02 96       	adiw	r24, 0x02	; 2
    141c:	80 da       	rcall	.-2816   	; 0x91e <vListInitialiseItem>
    141e:	ce 01       	movw	r24, r28
    1420:	0e 96       	adiw	r24, 0x0e	; 14
    1422:	7d da       	rcall	.-2822   	; 0x91e <vListInitialiseItem>
    1424:	db 87       	std	Y+11, r29	; 0x0b
    1426:	ca 87       	std	Y+10, r28	; 0x0a
    1428:	8a e0       	ldi	r24, 0x0A	; 10
    142a:	90 e0       	ldi	r25, 0x00	; 0
    142c:	a0 e0       	ldi	r26, 0x00	; 0
    142e:	b0 e0       	ldi	r27, 0x00	; 0
    1430:	80 1b       	sub	r24, r16
    1432:	91 09       	sbc	r25, r1
    1434:	a1 09       	sbc	r26, r1
    1436:	b1 09       	sbc	r27, r1
    1438:	8e 87       	std	Y+14, r24	; 0x0e
    143a:	9f 87       	std	Y+15, r25	; 0x0f
    143c:	a8 8b       	std	Y+16, r26	; 0x10
    143e:	b9 8b       	std	Y+17, r27	; 0x11
    1440:	df 8b       	std	Y+23, r29	; 0x17
    1442:	ce 8b       	std	Y+22, r28	; 0x16
    1444:	18 aa       	std	Y+48, r1	; 0x30
    1446:	1f a6       	std	Y+47, r1	; 0x2f
    1448:	84 e0       	ldi	r24, 0x04	; 4
    144a:	fe 01       	movw	r30, r28
    144c:	f1 96       	adiw	r30, 0x31	; 49
    144e:	df 01       	movw	r26, r30
    1450:	1d 92       	st	X+, r1
    1452:	8a 95       	dec	r24
    1454:	e9 f7       	brne	.-6      	; 0x1450 <prvInitialiseNewTask+0xba>
    1456:	1d aa       	std	Y+53, r1	; 0x35
    1458:	a3 01       	movw	r20, r6
    145a:	b2 01       	movw	r22, r4
    145c:	c4 01       	movw	r24, r8
    145e:	d3 da       	rcall	.-2650   	; 0xa06 <pxPortInitialiseStack>
    1460:	99 83       	std	Y+1, r25	; 0x01
    1462:	88 83       	st	Y, r24
    1464:	e1 14       	cp	r14, r1
    1466:	f1 04       	cpc	r15, r1
    1468:	19 f0       	breq	.+6      	; 0x1470 <prvInitialiseNewTask+0xda>
    146a:	f7 01       	movw	r30, r14
    146c:	d1 83       	std	Z+1, r29	; 0x01
    146e:	c0 83       	st	Z, r28
    1470:	df 91       	pop	r29
    1472:	cf 91       	pop	r28
    1474:	0f 91       	pop	r16
    1476:	ff 90       	pop	r15
    1478:	ef 90       	pop	r14
    147a:	df 90       	pop	r13
    147c:	cf 90       	pop	r12
    147e:	bf 90       	pop	r11
    1480:	af 90       	pop	r10
    1482:	9f 90       	pop	r9
    1484:	8f 90       	pop	r8
    1486:	7f 90       	pop	r7
    1488:	6f 90       	pop	r6
    148a:	5f 90       	pop	r5
    148c:	4f 90       	pop	r4
    148e:	08 95       	ret

00001490 <prvInitialiseTaskLists>:
    1490:	cf 93       	push	r28
    1492:	c0 e0       	ldi	r28, 0x00	; 0
    1494:	08 c0       	rjmp	.+16     	; 0x14a6 <prvInitialiseTaskLists+0x16>
    1496:	2b e0       	ldi	r18, 0x0B	; 11
    1498:	c2 9f       	mul	r28, r18
    149a:	c0 01       	movw	r24, r0
    149c:	11 24       	eor	r1, r1
    149e:	8d 5b       	subi	r24, 0xBD	; 189
    14a0:	9e 4e       	sbci	r25, 0xEE	; 238
    14a2:	2c da       	rcall	.-2984   	; 0x8fc <vListInitialise>
    14a4:	cf 5f       	subi	r28, 0xFF	; 255
    14a6:	ca 30       	cpi	r28, 0x0A	; 10
    14a8:	b0 f3       	brcs	.-20     	; 0x1496 <prvInitialiseTaskLists+0x6>
    14aa:	88 e3       	ldi	r24, 0x38	; 56
    14ac:	91 e1       	ldi	r25, 0x11	; 17
    14ae:	26 da       	rcall	.-2996   	; 0x8fc <vListInitialise>
    14b0:	8d e2       	ldi	r24, 0x2D	; 45
    14b2:	91 e1       	ldi	r25, 0x11	; 17
    14b4:	23 da       	rcall	.-3002   	; 0x8fc <vListInitialise>
    14b6:	8e e1       	ldi	r24, 0x1E	; 30
    14b8:	91 e1       	ldi	r25, 0x11	; 17
    14ba:	20 da       	rcall	.-3008   	; 0x8fc <vListInitialise>
    14bc:	83 e1       	ldi	r24, 0x13	; 19
    14be:	91 e1       	ldi	r25, 0x11	; 17
    14c0:	1d da       	rcall	.-3014   	; 0x8fc <vListInitialise>
    14c2:	87 e0       	ldi	r24, 0x07	; 7
    14c4:	91 e1       	ldi	r25, 0x11	; 17
    14c6:	1a da       	rcall	.-3020   	; 0x8fc <vListInitialise>
    14c8:	88 e3       	ldi	r24, 0x38	; 56
    14ca:	91 e1       	ldi	r25, 0x11	; 17
    14cc:	90 93 2c 11 	sts	0x112C, r25	; 0x80112c <pxDelayedTaskList+0x1>
    14d0:	80 93 2b 11 	sts	0x112B, r24	; 0x80112b <pxDelayedTaskList>
    14d4:	8d e2       	ldi	r24, 0x2D	; 45
    14d6:	91 e1       	ldi	r25, 0x11	; 17
    14d8:	90 93 2a 11 	sts	0x112A, r25	; 0x80112a <pxOverflowDelayedTaskList+0x1>
    14dc:	80 93 29 11 	sts	0x1129, r24	; 0x801129 <pxOverflowDelayedTaskList>
    14e0:	cf 91       	pop	r28
    14e2:	08 95       	ret

000014e4 <prvAddNewTaskToReadyList>:
    14e4:	cf 93       	push	r28
    14e6:	df 93       	push	r29
    14e8:	ec 01       	movw	r28, r24
    14ea:	0f b6       	in	r0, 0x3f	; 63
    14ec:	f8 94       	cli
    14ee:	0f 92       	push	r0
    14f0:	80 91 06 11 	lds	r24, 0x1106	; 0x801106 <uxCurrentNumberOfTasks>
    14f4:	8f 5f       	subi	r24, 0xFF	; 255
    14f6:	80 93 06 11 	sts	0x1106, r24	; 0x801106 <uxCurrentNumberOfTasks>
    14fa:	80 91 b1 11 	lds	r24, 0x11B1	; 0x8011b1 <pxCurrentTCB>
    14fe:	90 91 b2 11 	lds	r25, 0x11B2	; 0x8011b2 <pxCurrentTCB+0x1>
    1502:	89 2b       	or	r24, r25
    1504:	51 f4       	brne	.+20     	; 0x151a <prvAddNewTaskToReadyList+0x36>
    1506:	d0 93 b2 11 	sts	0x11B2, r29	; 0x8011b2 <pxCurrentTCB+0x1>
    150a:	c0 93 b1 11 	sts	0x11B1, r28	; 0x8011b1 <pxCurrentTCB>
    150e:	80 91 06 11 	lds	r24, 0x1106	; 0x801106 <uxCurrentNumberOfTasks>
    1512:	81 30       	cpi	r24, 0x01	; 1
    1514:	91 f4       	brne	.+36     	; 0x153a <prvAddNewTaskToReadyList+0x56>
    1516:	bc df       	rcall	.-136    	; 0x1490 <prvInitialiseTaskLists>
    1518:	10 c0       	rjmp	.+32     	; 0x153a <prvAddNewTaskToReadyList+0x56>
    151a:	80 91 00 11 	lds	r24, 0x1100	; 0x801100 <xSchedulerRunning>
    151e:	81 11       	cpse	r24, r1
    1520:	0c c0       	rjmp	.+24     	; 0x153a <prvAddNewTaskToReadyList+0x56>
    1522:	e0 91 b1 11 	lds	r30, 0x11B1	; 0x8011b1 <pxCurrentTCB>
    1526:	f0 91 b2 11 	lds	r31, 0x11B2	; 0x8011b2 <pxCurrentTCB+0x1>
    152a:	92 8d       	ldd	r25, Z+26	; 0x1a
    152c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    152e:	89 17       	cp	r24, r25
    1530:	20 f0       	brcs	.+8      	; 0x153a <prvAddNewTaskToReadyList+0x56>
    1532:	d0 93 b2 11 	sts	0x11B2, r29	; 0x8011b2 <pxCurrentTCB+0x1>
    1536:	c0 93 b1 11 	sts	0x11B1, r28	; 0x8011b1 <pxCurrentTCB>
    153a:	80 91 f9 10 	lds	r24, 0x10F9	; 0x8010f9 <uxTaskNumber>
    153e:	8f 5f       	subi	r24, 0xFF	; 255
    1540:	80 93 f9 10 	sts	0x10F9, r24	; 0x8010f9 <uxTaskNumber>
    1544:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1546:	80 91 01 11 	lds	r24, 0x1101	; 0x801101 <uxTopReadyPriority>
    154a:	8e 17       	cp	r24, r30
    154c:	10 f4       	brcc	.+4      	; 0x1552 <prvAddNewTaskToReadyList+0x6e>
    154e:	e0 93 01 11 	sts	0x1101, r30	; 0x801101 <uxTopReadyPriority>
    1552:	8b e0       	ldi	r24, 0x0B	; 11
    1554:	8e 9f       	mul	r24, r30
    1556:	f0 01       	movw	r30, r0
    1558:	11 24       	eor	r1, r1
    155a:	ed 5b       	subi	r30, 0xBD	; 189
    155c:	fe 4e       	sbci	r31, 0xEE	; 238
    155e:	01 80       	ldd	r0, Z+1	; 0x01
    1560:	f2 81       	ldd	r31, Z+2	; 0x02
    1562:	e0 2d       	mov	r30, r0
    1564:	ff 83       	std	Y+7, r31	; 0x07
    1566:	ee 83       	std	Y+6, r30	; 0x06
    1568:	26 81       	ldd	r18, Z+6	; 0x06
    156a:	37 81       	ldd	r19, Z+7	; 0x07
    156c:	39 87       	std	Y+9, r19	; 0x09
    156e:	28 87       	std	Y+8, r18	; 0x08
    1570:	a6 81       	ldd	r26, Z+6	; 0x06
    1572:	b7 81       	ldd	r27, Z+7	; 0x07
    1574:	9e 01       	movw	r18, r28
    1576:	2e 5f       	subi	r18, 0xFE	; 254
    1578:	3f 4f       	sbci	r19, 0xFF	; 255
    157a:	15 96       	adiw	r26, 0x05	; 5
    157c:	3c 93       	st	X, r19
    157e:	2e 93       	st	-X, r18
    1580:	14 97       	sbiw	r26, 0x04	; 4
    1582:	37 83       	std	Z+7, r19	; 0x07
    1584:	26 83       	std	Z+6, r18	; 0x06
    1586:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1588:	8e 9f       	mul	r24, r30
    158a:	f0 01       	movw	r30, r0
    158c:	11 24       	eor	r1, r1
    158e:	ed 5b       	subi	r30, 0xBD	; 189
    1590:	fe 4e       	sbci	r31, 0xEE	; 238
    1592:	fd 87       	std	Y+13, r31	; 0x0d
    1594:	ec 87       	std	Y+12, r30	; 0x0c
    1596:	80 81       	ld	r24, Z
    1598:	8f 5f       	subi	r24, 0xFF	; 255
    159a:	80 83       	st	Z, r24
    159c:	0f 90       	pop	r0
    159e:	0f be       	out	0x3f, r0	; 63
    15a0:	80 91 00 11 	lds	r24, 0x1100	; 0x801100 <xSchedulerRunning>
    15a4:	88 23       	and	r24, r24
    15a6:	49 f0       	breq	.+18     	; 0x15ba <prvAddNewTaskToReadyList+0xd6>
    15a8:	e0 91 b1 11 	lds	r30, 0x11B1	; 0x8011b1 <pxCurrentTCB>
    15ac:	f0 91 b2 11 	lds	r31, 0x11B2	; 0x8011b2 <pxCurrentTCB+0x1>
    15b0:	92 8d       	ldd	r25, Z+26	; 0x1a
    15b2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    15b4:	98 17       	cp	r25, r24
    15b6:	08 f4       	brcc	.+2      	; 0x15ba <prvAddNewTaskToReadyList+0xd6>
    15b8:	6f da       	rcall	.-2850   	; 0xa98 <vPortYield>
    15ba:	df 91       	pop	r29
    15bc:	cf 91       	pop	r28
    15be:	08 95       	ret

000015c0 <prvCheckTasksWaitingTermination>:
    15c0:	cf 93       	push	r28
    15c2:	df 93       	push	r29
    15c4:	1a c0       	rjmp	.+52     	; 0x15fa <prvCheckTasksWaitingTermination+0x3a>
    15c6:	0f b6       	in	r0, 0x3f	; 63
    15c8:	f8 94       	cli
    15ca:	0f 92       	push	r0
    15cc:	e0 91 1a 11 	lds	r30, 0x111A	; 0x80111a <xTasksWaitingTermination+0x7>
    15d0:	f0 91 1b 11 	lds	r31, 0x111B	; 0x80111b <xTasksWaitingTermination+0x8>
    15d4:	c0 85       	ldd	r28, Z+8	; 0x08
    15d6:	d1 85       	ldd	r29, Z+9	; 0x09
    15d8:	ce 01       	movw	r24, r28
    15da:	02 96       	adiw	r24, 0x02	; 2
    15dc:	e1 d9       	rcall	.-3134   	; 0x9a0 <uxListRemove>
    15de:	80 91 06 11 	lds	r24, 0x1106	; 0x801106 <uxCurrentNumberOfTasks>
    15e2:	81 50       	subi	r24, 0x01	; 1
    15e4:	80 93 06 11 	sts	0x1106, r24	; 0x801106 <uxCurrentNumberOfTasks>
    15e8:	80 91 12 11 	lds	r24, 0x1112	; 0x801112 <uxDeletedTasksWaitingCleanUp>
    15ec:	81 50       	subi	r24, 0x01	; 1
    15ee:	80 93 12 11 	sts	0x1112, r24	; 0x801112 <uxDeletedTasksWaitingCleanUp>
    15f2:	0f 90       	pop	r0
    15f4:	0f be       	out	0x3f, r0	; 63
    15f6:	ce 01       	movw	r24, r28
    15f8:	c3 de       	rcall	.-634    	; 0x1380 <prvDeleteTCB>
    15fa:	80 91 12 11 	lds	r24, 0x1112	; 0x801112 <uxDeletedTasksWaitingCleanUp>
    15fe:	81 11       	cpse	r24, r1
    1600:	e2 cf       	rjmp	.-60     	; 0x15c6 <prvCheckTasksWaitingTermination+0x6>
    1602:	df 91       	pop	r29
    1604:	cf 91       	pop	r28
    1606:	08 95       	ret

00001608 <prvAddCurrentTaskToDelayedList>:
    1608:	8f 92       	push	r8
    160a:	9f 92       	push	r9
    160c:	af 92       	push	r10
    160e:	bf 92       	push	r11
    1610:	cf 92       	push	r12
    1612:	df 92       	push	r13
    1614:	ef 92       	push	r14
    1616:	ff 92       	push	r15
    1618:	cf 93       	push	r28
    161a:	df 93       	push	r29
    161c:	6b 01       	movw	r12, r22
    161e:	7c 01       	movw	r14, r24
    1620:	c4 2f       	mov	r28, r20
    1622:	80 90 02 11 	lds	r8, 0x1102	; 0x801102 <xTickCount>
    1626:	90 90 03 11 	lds	r9, 0x1103	; 0x801103 <xTickCount+0x1>
    162a:	a0 90 04 11 	lds	r10, 0x1104	; 0x801104 <xTickCount+0x2>
    162e:	b0 90 05 11 	lds	r11, 0x1105	; 0x801105 <xTickCount+0x3>
    1632:	80 91 b1 11 	lds	r24, 0x11B1	; 0x8011b1 <pxCurrentTCB>
    1636:	90 91 b2 11 	lds	r25, 0x11B2	; 0x8011b2 <pxCurrentTCB+0x1>
    163a:	02 96       	adiw	r24, 0x02	; 2
    163c:	b1 d9       	rcall	.-3230   	; 0x9a0 <uxListRemove>
    163e:	8f ef       	ldi	r24, 0xFF	; 255
    1640:	c8 16       	cp	r12, r24
    1642:	d8 06       	cpc	r13, r24
    1644:	e8 06       	cpc	r14, r24
    1646:	f8 06       	cpc	r15, r24
    1648:	b1 f5       	brne	.+108    	; 0x16b6 <prvAddCurrentTaskToDelayedList+0xae>
    164a:	cc 23       	and	r28, r28
    164c:	a1 f1       	breq	.+104    	; 0x16b6 <prvAddCurrentTaskToDelayedList+0xae>
    164e:	e7 e0       	ldi	r30, 0x07	; 7
    1650:	f1 e1       	ldi	r31, 0x11	; 17
    1652:	a1 81       	ldd	r26, Z+1	; 0x01
    1654:	b2 81       	ldd	r27, Z+2	; 0x02
    1656:	c0 91 b1 11 	lds	r28, 0x11B1	; 0x8011b1 <pxCurrentTCB>
    165a:	d0 91 b2 11 	lds	r29, 0x11B2	; 0x8011b2 <pxCurrentTCB+0x1>
    165e:	bf 83       	std	Y+7, r27	; 0x07
    1660:	ae 83       	std	Y+6, r26	; 0x06
    1662:	c0 91 b1 11 	lds	r28, 0x11B1	; 0x8011b1 <pxCurrentTCB>
    1666:	d0 91 b2 11 	lds	r29, 0x11B2	; 0x8011b2 <pxCurrentTCB+0x1>
    166a:	16 96       	adiw	r26, 0x06	; 6
    166c:	8d 91       	ld	r24, X+
    166e:	9c 91       	ld	r25, X
    1670:	17 97       	sbiw	r26, 0x07	; 7
    1672:	99 87       	std	Y+9, r25	; 0x09
    1674:	88 87       	std	Y+8, r24	; 0x08
    1676:	16 96       	adiw	r26, 0x06	; 6
    1678:	cd 91       	ld	r28, X+
    167a:	dc 91       	ld	r29, X
    167c:	17 97       	sbiw	r26, 0x07	; 7
    167e:	80 91 b1 11 	lds	r24, 0x11B1	; 0x8011b1 <pxCurrentTCB>
    1682:	90 91 b2 11 	lds	r25, 0x11B2	; 0x8011b2 <pxCurrentTCB+0x1>
    1686:	02 96       	adiw	r24, 0x02	; 2
    1688:	9d 83       	std	Y+5, r25	; 0x05
    168a:	8c 83       	std	Y+4, r24	; 0x04
    168c:	80 91 b1 11 	lds	r24, 0x11B1	; 0x8011b1 <pxCurrentTCB>
    1690:	90 91 b2 11 	lds	r25, 0x11B2	; 0x8011b2 <pxCurrentTCB+0x1>
    1694:	02 96       	adiw	r24, 0x02	; 2
    1696:	17 96       	adiw	r26, 0x07	; 7
    1698:	9c 93       	st	X, r25
    169a:	8e 93       	st	-X, r24
    169c:	16 97       	sbiw	r26, 0x06	; 6
    169e:	a0 91 b1 11 	lds	r26, 0x11B1	; 0x8011b1 <pxCurrentTCB>
    16a2:	b0 91 b2 11 	lds	r27, 0x11B2	; 0x8011b2 <pxCurrentTCB+0x1>
    16a6:	1d 96       	adiw	r26, 0x0d	; 13
    16a8:	fc 93       	st	X, r31
    16aa:	ee 93       	st	-X, r30
    16ac:	1c 97       	sbiw	r26, 0x0c	; 12
    16ae:	80 81       	ld	r24, Z
    16b0:	8f 5f       	subi	r24, 0xFF	; 255
    16b2:	80 83       	st	Z, r24
    16b4:	3d c0       	rjmp	.+122    	; 0x1730 <prvAddCurrentTaskToDelayedList+0x128>
    16b6:	c8 0c       	add	r12, r8
    16b8:	d9 1c       	adc	r13, r9
    16ba:	ea 1c       	adc	r14, r10
    16bc:	fb 1c       	adc	r15, r11
    16be:	e0 91 b1 11 	lds	r30, 0x11B1	; 0x8011b1 <pxCurrentTCB>
    16c2:	f0 91 b2 11 	lds	r31, 0x11B2	; 0x8011b2 <pxCurrentTCB+0x1>
    16c6:	c2 82       	std	Z+2, r12	; 0x02
    16c8:	d3 82       	std	Z+3, r13	; 0x03
    16ca:	e4 82       	std	Z+4, r14	; 0x04
    16cc:	f5 82       	std	Z+5, r15	; 0x05
    16ce:	c8 14       	cp	r12, r8
    16d0:	d9 04       	cpc	r13, r9
    16d2:	ea 04       	cpc	r14, r10
    16d4:	fb 04       	cpc	r15, r11
    16d6:	60 f4       	brcc	.+24     	; 0x16f0 <prvAddCurrentTaskToDelayedList+0xe8>
    16d8:	60 91 b1 11 	lds	r22, 0x11B1	; 0x8011b1 <pxCurrentTCB>
    16dc:	70 91 b2 11 	lds	r23, 0x11B2	; 0x8011b2 <pxCurrentTCB+0x1>
    16e0:	80 91 29 11 	lds	r24, 0x1129	; 0x801129 <pxOverflowDelayedTaskList>
    16e4:	90 91 2a 11 	lds	r25, 0x112A	; 0x80112a <pxOverflowDelayedTaskList+0x1>
    16e8:	6e 5f       	subi	r22, 0xFE	; 254
    16ea:	7f 4f       	sbci	r23, 0xFF	; 255
    16ec:	1c d9       	rcall	.-3528   	; 0x926 <vListInsert>
    16ee:	20 c0       	rjmp	.+64     	; 0x1730 <prvAddCurrentTaskToDelayedList+0x128>
    16f0:	60 91 b1 11 	lds	r22, 0x11B1	; 0x8011b1 <pxCurrentTCB>
    16f4:	70 91 b2 11 	lds	r23, 0x11B2	; 0x8011b2 <pxCurrentTCB+0x1>
    16f8:	80 91 2b 11 	lds	r24, 0x112B	; 0x80112b <pxDelayedTaskList>
    16fc:	90 91 2c 11 	lds	r25, 0x112C	; 0x80112c <pxDelayedTaskList+0x1>
    1700:	6e 5f       	subi	r22, 0xFE	; 254
    1702:	7f 4f       	sbci	r23, 0xFF	; 255
    1704:	10 d9       	rcall	.-3552   	; 0x926 <vListInsert>
    1706:	80 91 f5 10 	lds	r24, 0x10F5	; 0x8010f5 <xNextTaskUnblockTime>
    170a:	90 91 f6 10 	lds	r25, 0x10F6	; 0x8010f6 <xNextTaskUnblockTime+0x1>
    170e:	a0 91 f7 10 	lds	r26, 0x10F7	; 0x8010f7 <xNextTaskUnblockTime+0x2>
    1712:	b0 91 f8 10 	lds	r27, 0x10F8	; 0x8010f8 <xNextTaskUnblockTime+0x3>
    1716:	c8 16       	cp	r12, r24
    1718:	d9 06       	cpc	r13, r25
    171a:	ea 06       	cpc	r14, r26
    171c:	fb 06       	cpc	r15, r27
    171e:	40 f4       	brcc	.+16     	; 0x1730 <prvAddCurrentTaskToDelayedList+0x128>
    1720:	c0 92 f5 10 	sts	0x10F5, r12	; 0x8010f5 <xNextTaskUnblockTime>
    1724:	d0 92 f6 10 	sts	0x10F6, r13	; 0x8010f6 <xNextTaskUnblockTime+0x1>
    1728:	e0 92 f7 10 	sts	0x10F7, r14	; 0x8010f7 <xNextTaskUnblockTime+0x2>
    172c:	f0 92 f8 10 	sts	0x10F8, r15	; 0x8010f8 <xNextTaskUnblockTime+0x3>
    1730:	df 91       	pop	r29
    1732:	cf 91       	pop	r28
    1734:	ff 90       	pop	r15
    1736:	ef 90       	pop	r14
    1738:	df 90       	pop	r13
    173a:	cf 90       	pop	r12
    173c:	bf 90       	pop	r11
    173e:	af 90       	pop	r10
    1740:	9f 90       	pop	r9
    1742:	8f 90       	pop	r8
    1744:	08 95       	ret

00001746 <xTaskCreate>:
    1746:	2f 92       	push	r2
    1748:	3f 92       	push	r3
    174a:	4f 92       	push	r4
    174c:	5f 92       	push	r5
    174e:	6f 92       	push	r6
    1750:	7f 92       	push	r7
    1752:	8f 92       	push	r8
    1754:	9f 92       	push	r9
    1756:	af 92       	push	r10
    1758:	bf 92       	push	r11
    175a:	cf 92       	push	r12
    175c:	df 92       	push	r13
    175e:	ef 92       	push	r14
    1760:	ff 92       	push	r15
    1762:	0f 93       	push	r16
    1764:	cf 93       	push	r28
    1766:	df 93       	push	r29
    1768:	3c 01       	movw	r6, r24
    176a:	1b 01       	movw	r2, r22
    176c:	4a 01       	movw	r8, r20
    176e:	29 01       	movw	r4, r18
    1770:	ca 01       	movw	r24, r20
    1772:	0e 94 99 03 	call	0x732	; 0x732 <pvPortMalloc>
    1776:	6c 01       	movw	r12, r24
    1778:	89 2b       	or	r24, r25
    177a:	69 f0       	breq	.+26     	; 0x1796 <xTaskCreate+0x50>
    177c:	86 e3       	ldi	r24, 0x36	; 54
    177e:	90 e0       	ldi	r25, 0x00	; 0
    1780:	0e 94 99 03 	call	0x732	; 0x732 <pvPortMalloc>
    1784:	ec 01       	movw	r28, r24
    1786:	89 2b       	or	r24, r25
    1788:	19 f0       	breq	.+6      	; 0x1790 <xTaskCreate+0x4a>
    178a:	dc 8e       	std	Y+28, r13	; 0x1c
    178c:	cb 8e       	std	Y+27, r12	; 0x1b
    178e:	05 c0       	rjmp	.+10     	; 0x179a <xTaskCreate+0x54>
    1790:	c6 01       	movw	r24, r12
    1792:	78 d8       	rcall	.-3856   	; 0x884 <vPortFree>
    1794:	02 c0       	rjmp	.+4      	; 0x179a <xTaskCreate+0x54>
    1796:	c0 e0       	ldi	r28, 0x00	; 0
    1798:	d0 e0       	ldi	r29, 0x00	; 0
    179a:	20 97       	sbiw	r28, 0x00	; 0
    179c:	61 f0       	breq	.+24     	; 0x17b6 <xTaskCreate+0x70>
    179e:	a1 2c       	mov	r10, r1
    17a0:	b1 2c       	mov	r11, r1
    17a2:	6e 01       	movw	r12, r28
    17a4:	92 01       	movw	r18, r4
    17a6:	a4 01       	movw	r20, r8
    17a8:	b1 01       	movw	r22, r2
    17aa:	c3 01       	movw	r24, r6
    17ac:	f4 dd       	rcall	.-1048   	; 0x1396 <prvInitialiseNewTask>
    17ae:	ce 01       	movw	r24, r28
    17b0:	99 de       	rcall	.-718    	; 0x14e4 <prvAddNewTaskToReadyList>
    17b2:	81 e0       	ldi	r24, 0x01	; 1
    17b4:	01 c0       	rjmp	.+2      	; 0x17b8 <xTaskCreate+0x72>
    17b6:	8f ef       	ldi	r24, 0xFF	; 255
    17b8:	df 91       	pop	r29
    17ba:	cf 91       	pop	r28
    17bc:	0f 91       	pop	r16
    17be:	ff 90       	pop	r15
    17c0:	ef 90       	pop	r14
    17c2:	df 90       	pop	r13
    17c4:	cf 90       	pop	r12
    17c6:	bf 90       	pop	r11
    17c8:	af 90       	pop	r10
    17ca:	9f 90       	pop	r9
    17cc:	8f 90       	pop	r8
    17ce:	7f 90       	pop	r7
    17d0:	6f 90       	pop	r6
    17d2:	5f 90       	pop	r5
    17d4:	4f 90       	pop	r4
    17d6:	3f 90       	pop	r3
    17d8:	2f 90       	pop	r2
    17da:	08 95       	ret

000017dc <vTaskStartScheduler>:
    17dc:	ef 92       	push	r14
    17de:	ff 92       	push	r15
    17e0:	0f 93       	push	r16
    17e2:	0f 2e       	mov	r0, r31
    17e4:	f3 ef       	ldi	r31, 0xF3	; 243
    17e6:	ef 2e       	mov	r14, r31
    17e8:	f0 e1       	ldi	r31, 0x10	; 16
    17ea:	ff 2e       	mov	r15, r31
    17ec:	f0 2d       	mov	r31, r0
    17ee:	00 e0       	ldi	r16, 0x00	; 0
    17f0:	20 e0       	ldi	r18, 0x00	; 0
    17f2:	30 e0       	ldi	r19, 0x00	; 0
    17f4:	40 ec       	ldi	r20, 0xC0	; 192
    17f6:	50 e0       	ldi	r21, 0x00	; 0
    17f8:	6d ef       	ldi	r22, 0xFD	; 253
    17fa:	72 e0       	ldi	r23, 0x02	; 2
    17fc:	8c e7       	ldi	r24, 0x7C	; 124
    17fe:	90 e0       	ldi	r25, 0x00	; 0
    1800:	a2 df       	rcall	.-188    	; 0x1746 <xTaskCreate>
    1802:	81 30       	cpi	r24, 0x01	; 1
    1804:	09 f4       	brne	.+2      	; 0x1808 <vTaskStartScheduler+0x2c>
    1806:	55 d6       	rcall	.+3242   	; 0x24b2 <xTimerCreateTimerTask>
    1808:	81 30       	cpi	r24, 0x01	; 1
    180a:	f9 f4       	brne	.+62     	; 0x184a <vTaskStartScheduler+0x6e>
    180c:	f8 94       	cli
    180e:	8f ef       	ldi	r24, 0xFF	; 255
    1810:	9f ef       	ldi	r25, 0xFF	; 255
    1812:	dc 01       	movw	r26, r24
    1814:	80 93 f5 10 	sts	0x10F5, r24	; 0x8010f5 <xNextTaskUnblockTime>
    1818:	90 93 f6 10 	sts	0x10F6, r25	; 0x8010f6 <xNextTaskUnblockTime+0x1>
    181c:	a0 93 f7 10 	sts	0x10F7, r26	; 0x8010f7 <xNextTaskUnblockTime+0x2>
    1820:	b0 93 f8 10 	sts	0x10F8, r27	; 0x8010f8 <xNextTaskUnblockTime+0x3>
    1824:	81 e0       	ldi	r24, 0x01	; 1
    1826:	80 93 00 11 	sts	0x1100, r24	; 0x801100 <xSchedulerRunning>
    182a:	10 92 02 11 	sts	0x1102, r1	; 0x801102 <xTickCount>
    182e:	10 92 03 11 	sts	0x1103, r1	; 0x801103 <xTickCount+0x1>
    1832:	10 92 04 11 	sts	0x1104, r1	; 0x801104 <xTickCount+0x2>
    1836:	10 92 05 11 	sts	0x1105, r1	; 0x801105 <xTickCount+0x3>
    183a:	e0 91 b1 11 	lds	r30, 0x11B1	; 0x8011b1 <pxCurrentTCB>
    183e:	f0 91 b2 11 	lds	r31, 0x11B2	; 0x8011b2 <pxCurrentTCB+0x1>
    1842:	87 a5       	ldd	r24, Z+47	; 0x2f
    1844:	0e 94 03 03 	call	0x606	; 0x606 <task_switch_in>
    1848:	f5 d8       	rcall	.-3606   	; 0xa34 <xPortStartScheduler>
    184a:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <uxTopUsedPriority>
    184e:	0f 91       	pop	r16
    1850:	ff 90       	pop	r15
    1852:	ef 90       	pop	r14
    1854:	08 95       	ret

00001856 <vTaskSuspendAll>:
    1856:	80 91 f2 10 	lds	r24, 0x10F2	; 0x8010f2 <uxSchedulerSuspended>
    185a:	8f 5f       	subi	r24, 0xFF	; 255
    185c:	80 93 f2 10 	sts	0x10F2, r24	; 0x8010f2 <uxSchedulerSuspended>
    1860:	08 95       	ret

00001862 <xTaskGetTickCount>:
    1862:	0f b6       	in	r0, 0x3f	; 63
    1864:	f8 94       	cli
    1866:	0f 92       	push	r0
    1868:	60 91 02 11 	lds	r22, 0x1102	; 0x801102 <xTickCount>
    186c:	70 91 03 11 	lds	r23, 0x1103	; 0x801103 <xTickCount+0x1>
    1870:	80 91 04 11 	lds	r24, 0x1104	; 0x801104 <xTickCount+0x2>
    1874:	90 91 05 11 	lds	r25, 0x1105	; 0x801105 <xTickCount+0x3>
    1878:	0f 90       	pop	r0
    187a:	0f be       	out	0x3f, r0	; 63
    187c:	08 95       	ret

0000187e <xTaskIncrementTick>:
    187e:	cf 92       	push	r12
    1880:	df 92       	push	r13
    1882:	ef 92       	push	r14
    1884:	ff 92       	push	r15
    1886:	cf 93       	push	r28
    1888:	df 93       	push	r29
    188a:	80 91 f2 10 	lds	r24, 0x10F2	; 0x8010f2 <uxSchedulerSuspended>
    188e:	81 11       	cpse	r24, r1
    1890:	05 c1       	rjmp	.+522    	; 0x1a9c <xTaskIncrementTick+0x21e>
    1892:	c0 90 02 11 	lds	r12, 0x1102	; 0x801102 <xTickCount>
    1896:	d0 90 03 11 	lds	r13, 0x1103	; 0x801103 <xTickCount+0x1>
    189a:	e0 90 04 11 	lds	r14, 0x1104	; 0x801104 <xTickCount+0x2>
    189e:	f0 90 05 11 	lds	r15, 0x1105	; 0x801105 <xTickCount+0x3>
    18a2:	8f ef       	ldi	r24, 0xFF	; 255
    18a4:	c8 1a       	sub	r12, r24
    18a6:	d8 0a       	sbc	r13, r24
    18a8:	e8 0a       	sbc	r14, r24
    18aa:	f8 0a       	sbc	r15, r24
    18ac:	c0 92 02 11 	sts	0x1102, r12	; 0x801102 <xTickCount>
    18b0:	d0 92 03 11 	sts	0x1103, r13	; 0x801103 <xTickCount+0x1>
    18b4:	e0 92 04 11 	sts	0x1104, r14	; 0x801104 <xTickCount+0x2>
    18b8:	f0 92 05 11 	sts	0x1105, r15	; 0x801105 <xTickCount+0x3>
    18bc:	c1 14       	cp	r12, r1
    18be:	d1 04       	cpc	r13, r1
    18c0:	e1 04       	cpc	r14, r1
    18c2:	f1 04       	cpc	r15, r1
    18c4:	b1 f4       	brne	.+44     	; 0x18f2 <xTaskIncrementTick+0x74>
    18c6:	80 91 2b 11 	lds	r24, 0x112B	; 0x80112b <pxDelayedTaskList>
    18ca:	90 91 2c 11 	lds	r25, 0x112C	; 0x80112c <pxDelayedTaskList+0x1>
    18ce:	20 91 29 11 	lds	r18, 0x1129	; 0x801129 <pxOverflowDelayedTaskList>
    18d2:	30 91 2a 11 	lds	r19, 0x112A	; 0x80112a <pxOverflowDelayedTaskList+0x1>
    18d6:	30 93 2c 11 	sts	0x112C, r19	; 0x80112c <pxDelayedTaskList+0x1>
    18da:	20 93 2b 11 	sts	0x112B, r18	; 0x80112b <pxDelayedTaskList>
    18de:	90 93 2a 11 	sts	0x112A, r25	; 0x80112a <pxOverflowDelayedTaskList+0x1>
    18e2:	80 93 29 11 	sts	0x1129, r24	; 0x801129 <pxOverflowDelayedTaskList>
    18e6:	80 91 fa 10 	lds	r24, 0x10FA	; 0x8010fa <xNumOfOverflows>
    18ea:	8f 5f       	subi	r24, 0xFF	; 255
    18ec:	80 93 fa 10 	sts	0x10FA, r24	; 0x8010fa <xNumOfOverflows>
    18f0:	20 dd       	rcall	.-1472   	; 0x1332 <prvResetNextTaskUnblockTime>
    18f2:	80 91 f5 10 	lds	r24, 0x10F5	; 0x8010f5 <xNextTaskUnblockTime>
    18f6:	90 91 f6 10 	lds	r25, 0x10F6	; 0x8010f6 <xNextTaskUnblockTime+0x1>
    18fa:	a0 91 f7 10 	lds	r26, 0x10F7	; 0x8010f7 <xNextTaskUnblockTime+0x2>
    18fe:	b0 91 f8 10 	lds	r27, 0x10F8	; 0x8010f8 <xNextTaskUnblockTime+0x3>
    1902:	c8 16       	cp	r12, r24
    1904:	d9 06       	cpc	r13, r25
    1906:	ea 06       	cpc	r14, r26
    1908:	fb 06       	cpc	r15, r27
    190a:	20 f4       	brcc	.+8      	; 0x1914 <xTaskIncrementTick+0x96>
    190c:	80 e0       	ldi	r24, 0x00	; 0
    190e:	b2 c0       	rjmp	.+356    	; 0x1a74 <xTaskIncrementTick+0x1f6>
    1910:	81 e0       	ldi	r24, 0x01	; 1
    1912:	01 c0       	rjmp	.+2      	; 0x1916 <xTaskIncrementTick+0x98>
    1914:	80 e0       	ldi	r24, 0x00	; 0
    1916:	e0 91 2b 11 	lds	r30, 0x112B	; 0x80112b <pxDelayedTaskList>
    191a:	f0 91 2c 11 	lds	r31, 0x112C	; 0x80112c <pxDelayedTaskList+0x1>
    191e:	90 81       	ld	r25, Z
    1920:	91 11       	cpse	r25, r1
    1922:	0c c0       	rjmp	.+24     	; 0x193c <xTaskIncrementTick+0xbe>
    1924:	4f ef       	ldi	r20, 0xFF	; 255
    1926:	5f ef       	ldi	r21, 0xFF	; 255
    1928:	ba 01       	movw	r22, r20
    192a:	40 93 f5 10 	sts	0x10F5, r20	; 0x8010f5 <xNextTaskUnblockTime>
    192e:	50 93 f6 10 	sts	0x10F6, r21	; 0x8010f6 <xNextTaskUnblockTime+0x1>
    1932:	60 93 f7 10 	sts	0x10F7, r22	; 0x8010f7 <xNextTaskUnblockTime+0x2>
    1936:	70 93 f8 10 	sts	0x10F8, r23	; 0x8010f8 <xNextTaskUnblockTime+0x3>
    193a:	9c c0       	rjmp	.+312    	; 0x1a74 <xTaskIncrementTick+0x1f6>
    193c:	e0 91 2b 11 	lds	r30, 0x112B	; 0x80112b <pxDelayedTaskList>
    1940:	f0 91 2c 11 	lds	r31, 0x112C	; 0x80112c <pxDelayedTaskList+0x1>
    1944:	07 80       	ldd	r0, Z+7	; 0x07
    1946:	f0 85       	ldd	r31, Z+8	; 0x08
    1948:	e0 2d       	mov	r30, r0
    194a:	00 84       	ldd	r0, Z+8	; 0x08
    194c:	f1 85       	ldd	r31, Z+9	; 0x09
    194e:	e0 2d       	mov	r30, r0
    1950:	42 81       	ldd	r20, Z+2	; 0x02
    1952:	53 81       	ldd	r21, Z+3	; 0x03
    1954:	64 81       	ldd	r22, Z+4	; 0x04
    1956:	75 81       	ldd	r23, Z+5	; 0x05
    1958:	c4 16       	cp	r12, r20
    195a:	d5 06       	cpc	r13, r21
    195c:	e6 06       	cpc	r14, r22
    195e:	f7 06       	cpc	r15, r23
    1960:	48 f4       	brcc	.+18     	; 0x1974 <xTaskIncrementTick+0xf6>
    1962:	40 93 f5 10 	sts	0x10F5, r20	; 0x8010f5 <xNextTaskUnblockTime>
    1966:	50 93 f6 10 	sts	0x10F6, r21	; 0x8010f6 <xNextTaskUnblockTime+0x1>
    196a:	60 93 f7 10 	sts	0x10F7, r22	; 0x8010f7 <xNextTaskUnblockTime+0x2>
    196e:	70 93 f8 10 	sts	0x10F8, r23	; 0x8010f8 <xNextTaskUnblockTime+0x3>
    1972:	80 c0       	rjmp	.+256    	; 0x1a74 <xTaskIncrementTick+0x1f6>
    1974:	a4 85       	ldd	r26, Z+12	; 0x0c
    1976:	b5 85       	ldd	r27, Z+13	; 0x0d
    1978:	c6 81       	ldd	r28, Z+6	; 0x06
    197a:	d7 81       	ldd	r29, Z+7	; 0x07
    197c:	20 85       	ldd	r18, Z+8	; 0x08
    197e:	31 85       	ldd	r19, Z+9	; 0x09
    1980:	3f 83       	std	Y+7, r19	; 0x07
    1982:	2e 83       	std	Y+6, r18	; 0x06
    1984:	c0 85       	ldd	r28, Z+8	; 0x08
    1986:	d1 85       	ldd	r29, Z+9	; 0x09
    1988:	26 81       	ldd	r18, Z+6	; 0x06
    198a:	37 81       	ldd	r19, Z+7	; 0x07
    198c:	3d 83       	std	Y+5, r19	; 0x05
    198e:	2c 83       	std	Y+4, r18	; 0x04
    1990:	11 96       	adiw	r26, 0x01	; 1
    1992:	4d 91       	ld	r20, X+
    1994:	5c 91       	ld	r21, X
    1996:	12 97       	sbiw	r26, 0x02	; 2
    1998:	9f 01       	movw	r18, r30
    199a:	2e 5f       	subi	r18, 0xFE	; 254
    199c:	3f 4f       	sbci	r19, 0xFF	; 255
    199e:	42 17       	cp	r20, r18
    19a0:	53 07       	cpc	r21, r19
    19a2:	31 f4       	brne	.+12     	; 0x19b0 <xTaskIncrementTick+0x132>
    19a4:	40 85       	ldd	r20, Z+8	; 0x08
    19a6:	51 85       	ldd	r21, Z+9	; 0x09
    19a8:	12 96       	adiw	r26, 0x02	; 2
    19aa:	5c 93       	st	X, r21
    19ac:	4e 93       	st	-X, r20
    19ae:	11 97       	sbiw	r26, 0x01	; 1
    19b0:	15 86       	std	Z+13, r1	; 0x0d
    19b2:	14 86       	std	Z+12, r1	; 0x0c
    19b4:	9c 91       	ld	r25, X
    19b6:	91 50       	subi	r25, 0x01	; 1
    19b8:	9c 93       	st	X, r25
    19ba:	a0 8d       	ldd	r26, Z+24	; 0x18
    19bc:	b1 8d       	ldd	r27, Z+25	; 0x19
    19be:	10 97       	sbiw	r26, 0x00	; 0
    19c0:	09 f1       	breq	.+66     	; 0x1a04 <xTaskIncrementTick+0x186>
    19c2:	c2 89       	ldd	r28, Z+18	; 0x12
    19c4:	d3 89       	ldd	r29, Z+19	; 0x13
    19c6:	44 89       	ldd	r20, Z+20	; 0x14
    19c8:	55 89       	ldd	r21, Z+21	; 0x15
    19ca:	5f 83       	std	Y+7, r21	; 0x07
    19cc:	4e 83       	std	Y+6, r20	; 0x06
    19ce:	c4 89       	ldd	r28, Z+20	; 0x14
    19d0:	d5 89       	ldd	r29, Z+21	; 0x15
    19d2:	42 89       	ldd	r20, Z+18	; 0x12
    19d4:	53 89       	ldd	r21, Z+19	; 0x13
    19d6:	5d 83       	std	Y+5, r21	; 0x05
    19d8:	4c 83       	std	Y+4, r20	; 0x04
    19da:	11 96       	adiw	r26, 0x01	; 1
    19dc:	6d 91       	ld	r22, X+
    19de:	7c 91       	ld	r23, X
    19e0:	12 97       	sbiw	r26, 0x02	; 2
    19e2:	af 01       	movw	r20, r30
    19e4:	42 5f       	subi	r20, 0xF2	; 242
    19e6:	5f 4f       	sbci	r21, 0xFF	; 255
    19e8:	64 17       	cp	r22, r20
    19ea:	75 07       	cpc	r23, r21
    19ec:	31 f4       	brne	.+12     	; 0x19fa <xTaskIncrementTick+0x17c>
    19ee:	44 89       	ldd	r20, Z+20	; 0x14
    19f0:	55 89       	ldd	r21, Z+21	; 0x15
    19f2:	12 96       	adiw	r26, 0x02	; 2
    19f4:	5c 93       	st	X, r21
    19f6:	4e 93       	st	-X, r20
    19f8:	11 97       	sbiw	r26, 0x01	; 1
    19fa:	11 8e       	std	Z+25, r1	; 0x19
    19fc:	10 8e       	std	Z+24, r1	; 0x18
    19fe:	9c 91       	ld	r25, X
    1a00:	91 50       	subi	r25, 0x01	; 1
    1a02:	9c 93       	st	X, r25
    1a04:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1a06:	90 91 01 11 	lds	r25, 0x1101	; 0x801101 <uxTopReadyPriority>
    1a0a:	9a 17       	cp	r25, r26
    1a0c:	10 f4       	brcc	.+4      	; 0x1a12 <xTaskIncrementTick+0x194>
    1a0e:	a0 93 01 11 	sts	0x1101, r26	; 0x801101 <uxTopReadyPriority>
    1a12:	9b e0       	ldi	r25, 0x0B	; 11
    1a14:	9a 9f       	mul	r25, r26
    1a16:	d0 01       	movw	r26, r0
    1a18:	11 24       	eor	r1, r1
    1a1a:	ad 5b       	subi	r26, 0xBD	; 189
    1a1c:	be 4e       	sbci	r27, 0xEE	; 238
    1a1e:	11 96       	adiw	r26, 0x01	; 1
    1a20:	0d 90       	ld	r0, X+
    1a22:	bc 91       	ld	r27, X
    1a24:	a0 2d       	mov	r26, r0
    1a26:	b7 83       	std	Z+7, r27	; 0x07
    1a28:	a6 83       	std	Z+6, r26	; 0x06
    1a2a:	16 96       	adiw	r26, 0x06	; 6
    1a2c:	4d 91       	ld	r20, X+
    1a2e:	5c 91       	ld	r21, X
    1a30:	17 97       	sbiw	r26, 0x07	; 7
    1a32:	51 87       	std	Z+9, r21	; 0x09
    1a34:	40 87       	std	Z+8, r20	; 0x08
    1a36:	16 96       	adiw	r26, 0x06	; 6
    1a38:	cd 91       	ld	r28, X+
    1a3a:	dc 91       	ld	r29, X
    1a3c:	17 97       	sbiw	r26, 0x07	; 7
    1a3e:	3d 83       	std	Y+5, r19	; 0x05
    1a40:	2c 83       	std	Y+4, r18	; 0x04
    1a42:	17 96       	adiw	r26, 0x07	; 7
    1a44:	3c 93       	st	X, r19
    1a46:	2e 93       	st	-X, r18
    1a48:	16 97       	sbiw	r26, 0x06	; 6
    1a4a:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1a4c:	9a 9f       	mul	r25, r26
    1a4e:	d0 01       	movw	r26, r0
    1a50:	11 24       	eor	r1, r1
    1a52:	ad 5b       	subi	r26, 0xBD	; 189
    1a54:	be 4e       	sbci	r27, 0xEE	; 238
    1a56:	b5 87       	std	Z+13, r27	; 0x0d
    1a58:	a4 87       	std	Z+12, r26	; 0x0c
    1a5a:	9c 91       	ld	r25, X
    1a5c:	9f 5f       	subi	r25, 0xFF	; 255
    1a5e:	9c 93       	st	X, r25
    1a60:	22 8d       	ldd	r18, Z+26	; 0x1a
    1a62:	e0 91 b1 11 	lds	r30, 0x11B1	; 0x8011b1 <pxCurrentTCB>
    1a66:	f0 91 b2 11 	lds	r31, 0x11B2	; 0x8011b2 <pxCurrentTCB+0x1>
    1a6a:	92 8d       	ldd	r25, Z+26	; 0x1a
    1a6c:	29 17       	cp	r18, r25
    1a6e:	08 f0       	brcs	.+2      	; 0x1a72 <xTaskIncrementTick+0x1f4>
    1a70:	4f cf       	rjmp	.-354    	; 0x1910 <xTaskIncrementTick+0x92>
    1a72:	51 cf       	rjmp	.-350    	; 0x1916 <xTaskIncrementTick+0x98>
    1a74:	e0 91 b1 11 	lds	r30, 0x11B1	; 0x8011b1 <pxCurrentTCB>
    1a78:	f0 91 b2 11 	lds	r31, 0x11B2	; 0x8011b2 <pxCurrentTCB+0x1>
    1a7c:	e2 8d       	ldd	r30, Z+26	; 0x1a
    1a7e:	9b e0       	ldi	r25, 0x0B	; 11
    1a80:	e9 9f       	mul	r30, r25
    1a82:	f0 01       	movw	r30, r0
    1a84:	11 24       	eor	r1, r1
    1a86:	ed 5b       	subi	r30, 0xBD	; 189
    1a88:	fe 4e       	sbci	r31, 0xEE	; 238
    1a8a:	90 81       	ld	r25, Z
    1a8c:	92 30       	cpi	r25, 0x02	; 2
    1a8e:	08 f0       	brcs	.+2      	; 0x1a92 <xTaskIncrementTick+0x214>
    1a90:	81 e0       	ldi	r24, 0x01	; 1
    1a92:	90 91 fb 10 	lds	r25, 0x10FB	; 0x8010fb <xYieldPending>
    1a96:	91 11       	cpse	r25, r1
    1a98:	16 c0       	rjmp	.+44     	; 0x1ac6 <xTaskIncrementTick+0x248>
    1a9a:	16 c0       	rjmp	.+44     	; 0x1ac8 <xTaskIncrementTick+0x24a>
    1a9c:	80 91 fc 10 	lds	r24, 0x10FC	; 0x8010fc <xPendedTicks>
    1aa0:	90 91 fd 10 	lds	r25, 0x10FD	; 0x8010fd <xPendedTicks+0x1>
    1aa4:	a0 91 fe 10 	lds	r26, 0x10FE	; 0x8010fe <xPendedTicks+0x2>
    1aa8:	b0 91 ff 10 	lds	r27, 0x10FF	; 0x8010ff <xPendedTicks+0x3>
    1aac:	01 96       	adiw	r24, 0x01	; 1
    1aae:	a1 1d       	adc	r26, r1
    1ab0:	b1 1d       	adc	r27, r1
    1ab2:	80 93 fc 10 	sts	0x10FC, r24	; 0x8010fc <xPendedTicks>
    1ab6:	90 93 fd 10 	sts	0x10FD, r25	; 0x8010fd <xPendedTicks+0x1>
    1aba:	a0 93 fe 10 	sts	0x10FE, r26	; 0x8010fe <xPendedTicks+0x2>
    1abe:	b0 93 ff 10 	sts	0x10FF, r27	; 0x8010ff <xPendedTicks+0x3>
    1ac2:	80 e0       	ldi	r24, 0x00	; 0
    1ac4:	01 c0       	rjmp	.+2      	; 0x1ac8 <xTaskIncrementTick+0x24a>
    1ac6:	81 e0       	ldi	r24, 0x01	; 1
    1ac8:	df 91       	pop	r29
    1aca:	cf 91       	pop	r28
    1acc:	ff 90       	pop	r15
    1ace:	ef 90       	pop	r14
    1ad0:	df 90       	pop	r13
    1ad2:	cf 90       	pop	r12
    1ad4:	08 95       	ret

00001ad6 <xTaskResumeAll>:
    1ad6:	cf 92       	push	r12
    1ad8:	df 92       	push	r13
    1ada:	ef 92       	push	r14
    1adc:	ff 92       	push	r15
    1ade:	cf 93       	push	r28
    1ae0:	df 93       	push	r29
    1ae2:	0f b6       	in	r0, 0x3f	; 63
    1ae4:	f8 94       	cli
    1ae6:	0f 92       	push	r0
    1ae8:	80 91 f2 10 	lds	r24, 0x10F2	; 0x8010f2 <uxSchedulerSuspended>
    1aec:	81 50       	subi	r24, 0x01	; 1
    1aee:	80 93 f2 10 	sts	0x10F2, r24	; 0x8010f2 <uxSchedulerSuspended>
    1af2:	80 91 f2 10 	lds	r24, 0x10F2	; 0x8010f2 <uxSchedulerSuspended>
    1af6:	81 11       	cpse	r24, r1
    1af8:	be c0       	rjmp	.+380    	; 0x1c76 <xTaskResumeAll+0x1a0>
    1afa:	80 91 06 11 	lds	r24, 0x1106	; 0x801106 <uxCurrentNumberOfTasks>
    1afe:	81 11       	cpse	r24, r1
    1b00:	88 c0       	rjmp	.+272    	; 0x1c12 <xTaskResumeAll+0x13c>
    1b02:	bc c0       	rjmp	.+376    	; 0x1c7c <xTaskResumeAll+0x1a6>
    1b04:	e0 91 25 11 	lds	r30, 0x1125	; 0x801125 <xPendingReadyList+0x7>
    1b08:	f0 91 26 11 	lds	r31, 0x1126	; 0x801126 <xPendingReadyList+0x8>
    1b0c:	00 84       	ldd	r0, Z+8	; 0x08
    1b0e:	f1 85       	ldd	r31, Z+9	; 0x09
    1b10:	e0 2d       	mov	r30, r0
    1b12:	a0 8d       	ldd	r26, Z+24	; 0x18
    1b14:	b1 8d       	ldd	r27, Z+25	; 0x19
    1b16:	c2 89       	ldd	r28, Z+18	; 0x12
    1b18:	d3 89       	ldd	r29, Z+19	; 0x13
    1b1a:	84 89       	ldd	r24, Z+20	; 0x14
    1b1c:	95 89       	ldd	r25, Z+21	; 0x15
    1b1e:	9f 83       	std	Y+7, r25	; 0x07
    1b20:	8e 83       	std	Y+6, r24	; 0x06
    1b22:	c4 89       	ldd	r28, Z+20	; 0x14
    1b24:	d5 89       	ldd	r29, Z+21	; 0x15
    1b26:	82 89       	ldd	r24, Z+18	; 0x12
    1b28:	93 89       	ldd	r25, Z+19	; 0x13
    1b2a:	9d 83       	std	Y+5, r25	; 0x05
    1b2c:	8c 83       	std	Y+4, r24	; 0x04
    1b2e:	11 96       	adiw	r26, 0x01	; 1
    1b30:	2d 91       	ld	r18, X+
    1b32:	3c 91       	ld	r19, X
    1b34:	12 97       	sbiw	r26, 0x02	; 2
    1b36:	cf 01       	movw	r24, r30
    1b38:	0e 96       	adiw	r24, 0x0e	; 14
    1b3a:	28 17       	cp	r18, r24
    1b3c:	39 07       	cpc	r19, r25
    1b3e:	31 f4       	brne	.+12     	; 0x1b4c <xTaskResumeAll+0x76>
    1b40:	84 89       	ldd	r24, Z+20	; 0x14
    1b42:	95 89       	ldd	r25, Z+21	; 0x15
    1b44:	12 96       	adiw	r26, 0x02	; 2
    1b46:	9c 93       	st	X, r25
    1b48:	8e 93       	st	-X, r24
    1b4a:	11 97       	sbiw	r26, 0x01	; 1
    1b4c:	11 8e       	std	Z+25, r1	; 0x19
    1b4e:	10 8e       	std	Z+24, r1	; 0x18
    1b50:	8c 91       	ld	r24, X
    1b52:	81 50       	subi	r24, 0x01	; 1
    1b54:	8c 93       	st	X, r24
    1b56:	a4 85       	ldd	r26, Z+12	; 0x0c
    1b58:	b5 85       	ldd	r27, Z+13	; 0x0d
    1b5a:	c6 81       	ldd	r28, Z+6	; 0x06
    1b5c:	d7 81       	ldd	r29, Z+7	; 0x07
    1b5e:	80 85       	ldd	r24, Z+8	; 0x08
    1b60:	91 85       	ldd	r25, Z+9	; 0x09
    1b62:	9f 83       	std	Y+7, r25	; 0x07
    1b64:	8e 83       	std	Y+6, r24	; 0x06
    1b66:	c0 85       	ldd	r28, Z+8	; 0x08
    1b68:	d1 85       	ldd	r29, Z+9	; 0x09
    1b6a:	86 81       	ldd	r24, Z+6	; 0x06
    1b6c:	97 81       	ldd	r25, Z+7	; 0x07
    1b6e:	9d 83       	std	Y+5, r25	; 0x05
    1b70:	8c 83       	std	Y+4, r24	; 0x04
    1b72:	11 96       	adiw	r26, 0x01	; 1
    1b74:	8d 91       	ld	r24, X+
    1b76:	9c 91       	ld	r25, X
    1b78:	12 97       	sbiw	r26, 0x02	; 2
    1b7a:	9f 01       	movw	r18, r30
    1b7c:	2e 5f       	subi	r18, 0xFE	; 254
    1b7e:	3f 4f       	sbci	r19, 0xFF	; 255
    1b80:	82 17       	cp	r24, r18
    1b82:	93 07       	cpc	r25, r19
    1b84:	31 f4       	brne	.+12     	; 0x1b92 <xTaskResumeAll+0xbc>
    1b86:	80 85       	ldd	r24, Z+8	; 0x08
    1b88:	91 85       	ldd	r25, Z+9	; 0x09
    1b8a:	12 96       	adiw	r26, 0x02	; 2
    1b8c:	9c 93       	st	X, r25
    1b8e:	8e 93       	st	-X, r24
    1b90:	11 97       	sbiw	r26, 0x01	; 1
    1b92:	15 86       	std	Z+13, r1	; 0x0d
    1b94:	14 86       	std	Z+12, r1	; 0x0c
    1b96:	8c 91       	ld	r24, X
    1b98:	81 50       	subi	r24, 0x01	; 1
    1b9a:	8c 93       	st	X, r24
    1b9c:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1b9e:	80 91 01 11 	lds	r24, 0x1101	; 0x801101 <uxTopReadyPriority>
    1ba2:	8a 17       	cp	r24, r26
    1ba4:	10 f4       	brcc	.+4      	; 0x1baa <xTaskResumeAll+0xd4>
    1ba6:	a0 93 01 11 	sts	0x1101, r26	; 0x801101 <uxTopReadyPriority>
    1baa:	8b e0       	ldi	r24, 0x0B	; 11
    1bac:	8a 9f       	mul	r24, r26
    1bae:	d0 01       	movw	r26, r0
    1bb0:	11 24       	eor	r1, r1
    1bb2:	ad 5b       	subi	r26, 0xBD	; 189
    1bb4:	be 4e       	sbci	r27, 0xEE	; 238
    1bb6:	11 96       	adiw	r26, 0x01	; 1
    1bb8:	0d 90       	ld	r0, X+
    1bba:	bc 91       	ld	r27, X
    1bbc:	a0 2d       	mov	r26, r0
    1bbe:	b7 83       	std	Z+7, r27	; 0x07
    1bc0:	a6 83       	std	Z+6, r26	; 0x06
    1bc2:	16 96       	adiw	r26, 0x06	; 6
    1bc4:	4d 91       	ld	r20, X+
    1bc6:	5c 91       	ld	r21, X
    1bc8:	17 97       	sbiw	r26, 0x07	; 7
    1bca:	51 87       	std	Z+9, r21	; 0x09
    1bcc:	40 87       	std	Z+8, r20	; 0x08
    1bce:	16 96       	adiw	r26, 0x06	; 6
    1bd0:	cd 91       	ld	r28, X+
    1bd2:	dc 91       	ld	r29, X
    1bd4:	17 97       	sbiw	r26, 0x07	; 7
    1bd6:	3d 83       	std	Y+5, r19	; 0x05
    1bd8:	2c 83       	std	Y+4, r18	; 0x04
    1bda:	17 96       	adiw	r26, 0x07	; 7
    1bdc:	3c 93       	st	X, r19
    1bde:	2e 93       	st	-X, r18
    1be0:	16 97       	sbiw	r26, 0x06	; 6
    1be2:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1be4:	8a 9f       	mul	r24, r26
    1be6:	d0 01       	movw	r26, r0
    1be8:	11 24       	eor	r1, r1
    1bea:	ad 5b       	subi	r26, 0xBD	; 189
    1bec:	be 4e       	sbci	r27, 0xEE	; 238
    1bee:	b5 87       	std	Z+13, r27	; 0x0d
    1bf0:	a4 87       	std	Z+12, r26	; 0x0c
    1bf2:	8c 91       	ld	r24, X
    1bf4:	8f 5f       	subi	r24, 0xFF	; 255
    1bf6:	8c 93       	st	X, r24
    1bf8:	92 8d       	ldd	r25, Z+26	; 0x1a
    1bfa:	a0 91 b1 11 	lds	r26, 0x11B1	; 0x8011b1 <pxCurrentTCB>
    1bfe:	b0 91 b2 11 	lds	r27, 0x11B2	; 0x8011b2 <pxCurrentTCB+0x1>
    1c02:	5a 96       	adiw	r26, 0x1a	; 26
    1c04:	8c 91       	ld	r24, X
    1c06:	98 17       	cp	r25, r24
    1c08:	30 f0       	brcs	.+12     	; 0x1c16 <xTaskResumeAll+0x140>
    1c0a:	81 e0       	ldi	r24, 0x01	; 1
    1c0c:	80 93 fb 10 	sts	0x10FB, r24	; 0x8010fb <xYieldPending>
    1c10:	02 c0       	rjmp	.+4      	; 0x1c16 <xTaskResumeAll+0x140>
    1c12:	e0 e0       	ldi	r30, 0x00	; 0
    1c14:	f0 e0       	ldi	r31, 0x00	; 0
    1c16:	80 91 1e 11 	lds	r24, 0x111E	; 0x80111e <xPendingReadyList>
    1c1a:	81 11       	cpse	r24, r1
    1c1c:	73 cf       	rjmp	.-282    	; 0x1b04 <xTaskResumeAll+0x2e>
    1c1e:	ef 2b       	or	r30, r31
    1c20:	09 f0       	breq	.+2      	; 0x1c24 <xTaskResumeAll+0x14e>
    1c22:	87 db       	rcall	.-2290   	; 0x1332 <prvResetNextTaskUnblockTime>
    1c24:	c0 90 fc 10 	lds	r12, 0x10FC	; 0x8010fc <xPendedTicks>
    1c28:	d0 90 fd 10 	lds	r13, 0x10FD	; 0x8010fd <xPendedTicks+0x1>
    1c2c:	e0 90 fe 10 	lds	r14, 0x10FE	; 0x8010fe <xPendedTicks+0x2>
    1c30:	f0 90 ff 10 	lds	r15, 0x10FF	; 0x8010ff <xPendedTicks+0x3>
    1c34:	c1 14       	cp	r12, r1
    1c36:	d1 04       	cpc	r13, r1
    1c38:	e1 04       	cpc	r14, r1
    1c3a:	f1 04       	cpc	r15, r1
    1c3c:	a1 f0       	breq	.+40     	; 0x1c66 <xTaskResumeAll+0x190>
    1c3e:	1f de       	rcall	.-962    	; 0x187e <xTaskIncrementTick>
    1c40:	88 23       	and	r24, r24
    1c42:	19 f0       	breq	.+6      	; 0x1c4a <xTaskResumeAll+0x174>
    1c44:	81 e0       	ldi	r24, 0x01	; 1
    1c46:	80 93 fb 10 	sts	0x10FB, r24	; 0x8010fb <xYieldPending>
    1c4a:	81 e0       	ldi	r24, 0x01	; 1
    1c4c:	c8 1a       	sub	r12, r24
    1c4e:	d1 08       	sbc	r13, r1
    1c50:	e1 08       	sbc	r14, r1
    1c52:	f1 08       	sbc	r15, r1
    1c54:	a1 f7       	brne	.-24     	; 0x1c3e <xTaskResumeAll+0x168>
    1c56:	10 92 fc 10 	sts	0x10FC, r1	; 0x8010fc <xPendedTicks>
    1c5a:	10 92 fd 10 	sts	0x10FD, r1	; 0x8010fd <xPendedTicks+0x1>
    1c5e:	10 92 fe 10 	sts	0x10FE, r1	; 0x8010fe <xPendedTicks+0x2>
    1c62:	10 92 ff 10 	sts	0x10FF, r1	; 0x8010ff <xPendedTicks+0x3>
    1c66:	80 91 fb 10 	lds	r24, 0x10FB	; 0x8010fb <xYieldPending>
    1c6a:	88 23       	and	r24, r24
    1c6c:	31 f0       	breq	.+12     	; 0x1c7a <xTaskResumeAll+0x1a4>
    1c6e:	0e 94 4c 05 	call	0xa98	; 0xa98 <vPortYield>
    1c72:	81 e0       	ldi	r24, 0x01	; 1
    1c74:	03 c0       	rjmp	.+6      	; 0x1c7c <xTaskResumeAll+0x1a6>
    1c76:	80 e0       	ldi	r24, 0x00	; 0
    1c78:	01 c0       	rjmp	.+2      	; 0x1c7c <xTaskResumeAll+0x1a6>
    1c7a:	80 e0       	ldi	r24, 0x00	; 0
    1c7c:	0f 90       	pop	r0
    1c7e:	0f be       	out	0x3f, r0	; 63
    1c80:	df 91       	pop	r29
    1c82:	cf 91       	pop	r28
    1c84:	ff 90       	pop	r15
    1c86:	ef 90       	pop	r14
    1c88:	df 90       	pop	r13
    1c8a:	cf 90       	pop	r12
    1c8c:	08 95       	ret

00001c8e <vTaskDelay>:
    1c8e:	cf 92       	push	r12
    1c90:	df 92       	push	r13
    1c92:	ef 92       	push	r14
    1c94:	ff 92       	push	r15
    1c96:	6b 01       	movw	r12, r22
    1c98:	7c 01       	movw	r14, r24
    1c9a:	67 2b       	or	r22, r23
    1c9c:	68 2b       	or	r22, r24
    1c9e:	69 2b       	or	r22, r25
    1ca0:	39 f0       	breq	.+14     	; 0x1cb0 <vTaskDelay+0x22>
    1ca2:	d9 dd       	rcall	.-1102   	; 0x1856 <vTaskSuspendAll>
    1ca4:	40 e0       	ldi	r20, 0x00	; 0
    1ca6:	c7 01       	movw	r24, r14
    1ca8:	b6 01       	movw	r22, r12
    1caa:	ae dc       	rcall	.-1700   	; 0x1608 <prvAddCurrentTaskToDelayedList>
    1cac:	14 df       	rcall	.-472    	; 0x1ad6 <xTaskResumeAll>
    1cae:	01 c0       	rjmp	.+2      	; 0x1cb2 <vTaskDelay+0x24>
    1cb0:	80 e0       	ldi	r24, 0x00	; 0
    1cb2:	81 11       	cpse	r24, r1
    1cb4:	02 c0       	rjmp	.+4      	; 0x1cba <vTaskDelay+0x2c>
    1cb6:	0e 94 4c 05 	call	0xa98	; 0xa98 <vPortYield>
    1cba:	ff 90       	pop	r15
    1cbc:	ef 90       	pop	r14
    1cbe:	df 90       	pop	r13
    1cc0:	cf 90       	pop	r12
    1cc2:	08 95       	ret

00001cc4 <vTaskSetApplicationTaskTag>:
    1cc4:	00 97       	sbiw	r24, 0x00	; 0
    1cc6:	21 f4       	brne	.+8      	; 0x1cd0 <vTaskSetApplicationTaskTag+0xc>
    1cc8:	80 91 b1 11 	lds	r24, 0x11B1	; 0x8011b1 <pxCurrentTCB>
    1ccc:	90 91 b2 11 	lds	r25, 0x11B2	; 0x8011b2 <pxCurrentTCB+0x1>
    1cd0:	0f b6       	in	r0, 0x3f	; 63
    1cd2:	f8 94       	cli
    1cd4:	0f 92       	push	r0
    1cd6:	fc 01       	movw	r30, r24
    1cd8:	70 ab       	std	Z+48, r23	; 0x30
    1cda:	67 a7       	std	Z+47, r22	; 0x2f
    1cdc:	0f 90       	pop	r0
    1cde:	0f be       	out	0x3f, r0	; 63
    1ce0:	08 95       	ret

00001ce2 <vTaskSwitchContext>:
    1ce2:	80 91 f2 10 	lds	r24, 0x10F2	; 0x8010f2 <uxSchedulerSuspended>
    1ce6:	88 23       	and	r24, r24
    1ce8:	21 f0       	breq	.+8      	; 0x1cf2 <vTaskSwitchContext+0x10>
    1cea:	81 e0       	ldi	r24, 0x01	; 1
    1cec:	80 93 fb 10 	sts	0x10FB, r24	; 0x8010fb <xYieldPending>
    1cf0:	08 95       	ret
    1cf2:	10 92 fb 10 	sts	0x10FB, r1	; 0x8010fb <xYieldPending>
    1cf6:	e0 91 b1 11 	lds	r30, 0x11B1	; 0x8011b1 <pxCurrentTCB>
    1cfa:	f0 91 b2 11 	lds	r31, 0x11B2	; 0x8011b2 <pxCurrentTCB+0x1>
    1cfe:	87 a5       	ldd	r24, Z+47	; 0x2f
    1d00:	0e 94 0d 03 	call	0x61a	; 0x61a <task_switch_out>
    1d04:	e0 91 b1 11 	lds	r30, 0x11B1	; 0x8011b1 <pxCurrentTCB>
    1d08:	f0 91 b2 11 	lds	r31, 0x11B2	; 0x8011b2 <pxCurrentTCB+0x1>
    1d0c:	20 81       	ld	r18, Z
    1d0e:	31 81       	ldd	r19, Z+1	; 0x01
    1d10:	e0 91 b1 11 	lds	r30, 0x11B1	; 0x8011b1 <pxCurrentTCB>
    1d14:	f0 91 b2 11 	lds	r31, 0x11B2	; 0x8011b2 <pxCurrentTCB+0x1>
    1d18:	83 8d       	ldd	r24, Z+27	; 0x1b
    1d1a:	94 8d       	ldd	r25, Z+28	; 0x1c
    1d1c:	82 17       	cp	r24, r18
    1d1e:	93 07       	cpc	r25, r19
    1d20:	58 f0       	brcs	.+22     	; 0x1d38 <vTaskSwitchContext+0x56>
    1d22:	60 91 b1 11 	lds	r22, 0x11B1	; 0x8011b1 <pxCurrentTCB>
    1d26:	70 91 b2 11 	lds	r23, 0x11B2	; 0x8011b2 <pxCurrentTCB+0x1>
    1d2a:	63 5e       	subi	r22, 0xE3	; 227
    1d2c:	7f 4f       	sbci	r23, 0xFF	; 255
    1d2e:	80 91 b1 11 	lds	r24, 0x11B1	; 0x8011b1 <pxCurrentTCB>
    1d32:	90 91 b2 11 	lds	r25, 0x11B2	; 0x8011b2 <pxCurrentTCB+0x1>
    1d36:	44 d6       	rcall	.+3208   	; 0x29c0 <vApplicationStackOverflowHook>
    1d38:	80 91 01 11 	lds	r24, 0x1101	; 0x801101 <uxTopReadyPriority>
    1d3c:	01 c0       	rjmp	.+2      	; 0x1d40 <vTaskSwitchContext+0x5e>
    1d3e:	81 50       	subi	r24, 0x01	; 1
    1d40:	28 2f       	mov	r18, r24
    1d42:	30 e0       	ldi	r19, 0x00	; 0
    1d44:	9b e0       	ldi	r25, 0x0B	; 11
    1d46:	92 9f       	mul	r25, r18
    1d48:	f0 01       	movw	r30, r0
    1d4a:	93 9f       	mul	r25, r19
    1d4c:	f0 0d       	add	r31, r0
    1d4e:	11 24       	eor	r1, r1
    1d50:	ed 5b       	subi	r30, 0xBD	; 189
    1d52:	fe 4e       	sbci	r31, 0xEE	; 238
    1d54:	90 81       	ld	r25, Z
    1d56:	99 23       	and	r25, r25
    1d58:	91 f3       	breq	.-28     	; 0x1d3e <vTaskSwitchContext+0x5c>
    1d5a:	9b e0       	ldi	r25, 0x0B	; 11
    1d5c:	92 9f       	mul	r25, r18
    1d5e:	a0 01       	movw	r20, r0
    1d60:	93 9f       	mul	r25, r19
    1d62:	50 0d       	add	r21, r0
    1d64:	11 24       	eor	r1, r1
    1d66:	df 01       	movw	r26, r30
    1d68:	01 80       	ldd	r0, Z+1	; 0x01
    1d6a:	f2 81       	ldd	r31, Z+2	; 0x02
    1d6c:	e0 2d       	mov	r30, r0
    1d6e:	04 80       	ldd	r0, Z+4	; 0x04
    1d70:	f5 81       	ldd	r31, Z+5	; 0x05
    1d72:	e0 2d       	mov	r30, r0
    1d74:	12 96       	adiw	r26, 0x02	; 2
    1d76:	fc 93       	st	X, r31
    1d78:	ee 93       	st	-X, r30
    1d7a:	11 97       	sbiw	r26, 0x01	; 1
    1d7c:	4a 5b       	subi	r20, 0xBA	; 186
    1d7e:	5e 4e       	sbci	r21, 0xEE	; 238
    1d80:	e4 17       	cp	r30, r20
    1d82:	f5 07       	cpc	r31, r21
    1d84:	29 f4       	brne	.+10     	; 0x1d90 <vTaskSwitchContext+0xae>
    1d86:	44 81       	ldd	r20, Z+4	; 0x04
    1d88:	55 81       	ldd	r21, Z+5	; 0x05
    1d8a:	fd 01       	movw	r30, r26
    1d8c:	52 83       	std	Z+2, r21	; 0x02
    1d8e:	41 83       	std	Z+1, r20	; 0x01
    1d90:	9b e0       	ldi	r25, 0x0B	; 11
    1d92:	92 9f       	mul	r25, r18
    1d94:	f0 01       	movw	r30, r0
    1d96:	93 9f       	mul	r25, r19
    1d98:	f0 0d       	add	r31, r0
    1d9a:	11 24       	eor	r1, r1
    1d9c:	ed 5b       	subi	r30, 0xBD	; 189
    1d9e:	fe 4e       	sbci	r31, 0xEE	; 238
    1da0:	01 80       	ldd	r0, Z+1	; 0x01
    1da2:	f2 81       	ldd	r31, Z+2	; 0x02
    1da4:	e0 2d       	mov	r30, r0
    1da6:	20 85       	ldd	r18, Z+8	; 0x08
    1da8:	31 85       	ldd	r19, Z+9	; 0x09
    1daa:	30 93 b2 11 	sts	0x11B2, r19	; 0x8011b2 <pxCurrentTCB+0x1>
    1dae:	20 93 b1 11 	sts	0x11B1, r18	; 0x8011b1 <pxCurrentTCB>
    1db2:	80 93 01 11 	sts	0x1101, r24	; 0x801101 <uxTopReadyPriority>
    1db6:	e0 91 b1 11 	lds	r30, 0x11B1	; 0x8011b1 <pxCurrentTCB>
    1dba:	f0 91 b2 11 	lds	r31, 0x11B2	; 0x8011b2 <pxCurrentTCB+0x1>
    1dbe:	87 a5       	ldd	r24, Z+47	; 0x2f
    1dc0:	0c 94 03 03 	jmp	0x606	; 0x606 <task_switch_in>
    1dc4:	08 95       	ret

00001dc6 <vTaskPlaceOnEventList>:
    1dc6:	cf 92       	push	r12
    1dc8:	df 92       	push	r13
    1dca:	ef 92       	push	r14
    1dcc:	ff 92       	push	r15
    1dce:	6a 01       	movw	r12, r20
    1dd0:	7b 01       	movw	r14, r22
    1dd2:	60 91 b1 11 	lds	r22, 0x11B1	; 0x8011b1 <pxCurrentTCB>
    1dd6:	70 91 b2 11 	lds	r23, 0x11B2	; 0x8011b2 <pxCurrentTCB+0x1>
    1dda:	62 5f       	subi	r22, 0xF2	; 242
    1ddc:	7f 4f       	sbci	r23, 0xFF	; 255
    1dde:	0e 94 93 04 	call	0x926	; 0x926 <vListInsert>
    1de2:	41 e0       	ldi	r20, 0x01	; 1
    1de4:	c7 01       	movw	r24, r14
    1de6:	b6 01       	movw	r22, r12
    1de8:	0f dc       	rcall	.-2018   	; 0x1608 <prvAddCurrentTaskToDelayedList>
    1dea:	ff 90       	pop	r15
    1dec:	ef 90       	pop	r14
    1dee:	df 90       	pop	r13
    1df0:	cf 90       	pop	r12
    1df2:	08 95       	ret

00001df4 <vTaskPlaceOnEventListRestricted>:
    1df4:	cf 93       	push	r28
    1df6:	df 93       	push	r29
    1df8:	fc 01       	movw	r30, r24
    1dfa:	cb 01       	movw	r24, r22
    1dfc:	ba 01       	movw	r22, r20
    1dfe:	a1 81       	ldd	r26, Z+1	; 0x01
    1e00:	b2 81       	ldd	r27, Z+2	; 0x02
    1e02:	c0 91 b1 11 	lds	r28, 0x11B1	; 0x8011b1 <pxCurrentTCB>
    1e06:	d0 91 b2 11 	lds	r29, 0x11B2	; 0x8011b2 <pxCurrentTCB+0x1>
    1e0a:	bb 8b       	std	Y+19, r27	; 0x13
    1e0c:	aa 8b       	std	Y+18, r26	; 0x12
    1e0e:	c0 91 b1 11 	lds	r28, 0x11B1	; 0x8011b1 <pxCurrentTCB>
    1e12:	d0 91 b2 11 	lds	r29, 0x11B2	; 0x8011b2 <pxCurrentTCB+0x1>
    1e16:	16 96       	adiw	r26, 0x06	; 6
    1e18:	4d 91       	ld	r20, X+
    1e1a:	5c 91       	ld	r21, X
    1e1c:	17 97       	sbiw	r26, 0x07	; 7
    1e1e:	5d 8b       	std	Y+21, r21	; 0x15
    1e20:	4c 8b       	std	Y+20, r20	; 0x14
    1e22:	16 96       	adiw	r26, 0x06	; 6
    1e24:	cd 91       	ld	r28, X+
    1e26:	dc 91       	ld	r29, X
    1e28:	17 97       	sbiw	r26, 0x07	; 7
    1e2a:	40 91 b1 11 	lds	r20, 0x11B1	; 0x8011b1 <pxCurrentTCB>
    1e2e:	50 91 b2 11 	lds	r21, 0x11B2	; 0x8011b2 <pxCurrentTCB+0x1>
    1e32:	42 5f       	subi	r20, 0xF2	; 242
    1e34:	5f 4f       	sbci	r21, 0xFF	; 255
    1e36:	5d 83       	std	Y+5, r21	; 0x05
    1e38:	4c 83       	std	Y+4, r20	; 0x04
    1e3a:	40 91 b1 11 	lds	r20, 0x11B1	; 0x8011b1 <pxCurrentTCB>
    1e3e:	50 91 b2 11 	lds	r21, 0x11B2	; 0x8011b2 <pxCurrentTCB+0x1>
    1e42:	42 5f       	subi	r20, 0xF2	; 242
    1e44:	5f 4f       	sbci	r21, 0xFF	; 255
    1e46:	17 96       	adiw	r26, 0x07	; 7
    1e48:	5c 93       	st	X, r21
    1e4a:	4e 93       	st	-X, r20
    1e4c:	16 97       	sbiw	r26, 0x06	; 6
    1e4e:	a0 91 b1 11 	lds	r26, 0x11B1	; 0x8011b1 <pxCurrentTCB>
    1e52:	b0 91 b2 11 	lds	r27, 0x11B2	; 0x8011b2 <pxCurrentTCB+0x1>
    1e56:	59 96       	adiw	r26, 0x19	; 25
    1e58:	fc 93       	st	X, r31
    1e5a:	ee 93       	st	-X, r30
    1e5c:	58 97       	sbiw	r26, 0x18	; 24
    1e5e:	30 81       	ld	r19, Z
    1e60:	3f 5f       	subi	r19, 0xFF	; 255
    1e62:	30 83       	st	Z, r19
    1e64:	22 23       	and	r18, r18
    1e66:	19 f0       	breq	.+6      	; 0x1e6e <vTaskPlaceOnEventListRestricted+0x7a>
    1e68:	6f ef       	ldi	r22, 0xFF	; 255
    1e6a:	7f ef       	ldi	r23, 0xFF	; 255
    1e6c:	cb 01       	movw	r24, r22
    1e6e:	42 2f       	mov	r20, r18
    1e70:	cb db       	rcall	.-2154   	; 0x1608 <prvAddCurrentTaskToDelayedList>
    1e72:	df 91       	pop	r29
    1e74:	cf 91       	pop	r28
    1e76:	08 95       	ret

00001e78 <xTaskRemoveFromEventList>:
    1e78:	cf 93       	push	r28
    1e7a:	df 93       	push	r29
    1e7c:	dc 01       	movw	r26, r24
    1e7e:	17 96       	adiw	r26, 0x07	; 7
    1e80:	ed 91       	ld	r30, X+
    1e82:	fc 91       	ld	r31, X
    1e84:	18 97       	sbiw	r26, 0x08	; 8
    1e86:	00 84       	ldd	r0, Z+8	; 0x08
    1e88:	f1 85       	ldd	r31, Z+9	; 0x09
    1e8a:	e0 2d       	mov	r30, r0
    1e8c:	a0 8d       	ldd	r26, Z+24	; 0x18
    1e8e:	b1 8d       	ldd	r27, Z+25	; 0x19
    1e90:	c2 89       	ldd	r28, Z+18	; 0x12
    1e92:	d3 89       	ldd	r29, Z+19	; 0x13
    1e94:	84 89       	ldd	r24, Z+20	; 0x14
    1e96:	95 89       	ldd	r25, Z+21	; 0x15
    1e98:	9f 83       	std	Y+7, r25	; 0x07
    1e9a:	8e 83       	std	Y+6, r24	; 0x06
    1e9c:	c4 89       	ldd	r28, Z+20	; 0x14
    1e9e:	d5 89       	ldd	r29, Z+21	; 0x15
    1ea0:	82 89       	ldd	r24, Z+18	; 0x12
    1ea2:	93 89       	ldd	r25, Z+19	; 0x13
    1ea4:	9d 83       	std	Y+5, r25	; 0x05
    1ea6:	8c 83       	std	Y+4, r24	; 0x04
    1ea8:	11 96       	adiw	r26, 0x01	; 1
    1eaa:	8d 91       	ld	r24, X+
    1eac:	9c 91       	ld	r25, X
    1eae:	12 97       	sbiw	r26, 0x02	; 2
    1eb0:	9f 01       	movw	r18, r30
    1eb2:	22 5f       	subi	r18, 0xF2	; 242
    1eb4:	3f 4f       	sbci	r19, 0xFF	; 255
    1eb6:	82 17       	cp	r24, r18
    1eb8:	93 07       	cpc	r25, r19
    1eba:	31 f4       	brne	.+12     	; 0x1ec8 <xTaskRemoveFromEventList+0x50>
    1ebc:	84 89       	ldd	r24, Z+20	; 0x14
    1ebe:	95 89       	ldd	r25, Z+21	; 0x15
    1ec0:	12 96       	adiw	r26, 0x02	; 2
    1ec2:	9c 93       	st	X, r25
    1ec4:	8e 93       	st	-X, r24
    1ec6:	11 97       	sbiw	r26, 0x01	; 1
    1ec8:	11 8e       	std	Z+25, r1	; 0x19
    1eca:	10 8e       	std	Z+24, r1	; 0x18
    1ecc:	8c 91       	ld	r24, X
    1ece:	81 50       	subi	r24, 0x01	; 1
    1ed0:	8c 93       	st	X, r24
    1ed2:	80 91 f2 10 	lds	r24, 0x10F2	; 0x8010f2 <uxSchedulerSuspended>
    1ed6:	81 11       	cpse	r24, r1
    1ed8:	52 c0       	rjmp	.+164    	; 0x1f7e <xTaskRemoveFromEventList+0x106>
    1eda:	a4 85       	ldd	r26, Z+12	; 0x0c
    1edc:	b5 85       	ldd	r27, Z+13	; 0x0d
    1ede:	c6 81       	ldd	r28, Z+6	; 0x06
    1ee0:	d7 81       	ldd	r29, Z+7	; 0x07
    1ee2:	80 85       	ldd	r24, Z+8	; 0x08
    1ee4:	91 85       	ldd	r25, Z+9	; 0x09
    1ee6:	9f 83       	std	Y+7, r25	; 0x07
    1ee8:	8e 83       	std	Y+6, r24	; 0x06
    1eea:	c0 85       	ldd	r28, Z+8	; 0x08
    1eec:	d1 85       	ldd	r29, Z+9	; 0x09
    1eee:	86 81       	ldd	r24, Z+6	; 0x06
    1ef0:	97 81       	ldd	r25, Z+7	; 0x07
    1ef2:	9d 83       	std	Y+5, r25	; 0x05
    1ef4:	8c 83       	std	Y+4, r24	; 0x04
    1ef6:	11 96       	adiw	r26, 0x01	; 1
    1ef8:	8d 91       	ld	r24, X+
    1efa:	9c 91       	ld	r25, X
    1efc:	12 97       	sbiw	r26, 0x02	; 2
    1efe:	9f 01       	movw	r18, r30
    1f00:	2e 5f       	subi	r18, 0xFE	; 254
    1f02:	3f 4f       	sbci	r19, 0xFF	; 255
    1f04:	82 17       	cp	r24, r18
    1f06:	93 07       	cpc	r25, r19
    1f08:	31 f4       	brne	.+12     	; 0x1f16 <xTaskRemoveFromEventList+0x9e>
    1f0a:	80 85       	ldd	r24, Z+8	; 0x08
    1f0c:	91 85       	ldd	r25, Z+9	; 0x09
    1f0e:	12 96       	adiw	r26, 0x02	; 2
    1f10:	9c 93       	st	X, r25
    1f12:	8e 93       	st	-X, r24
    1f14:	11 97       	sbiw	r26, 0x01	; 1
    1f16:	15 86       	std	Z+13, r1	; 0x0d
    1f18:	14 86       	std	Z+12, r1	; 0x0c
    1f1a:	8c 91       	ld	r24, X
    1f1c:	81 50       	subi	r24, 0x01	; 1
    1f1e:	8c 93       	st	X, r24
    1f20:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1f22:	80 91 01 11 	lds	r24, 0x1101	; 0x801101 <uxTopReadyPriority>
    1f26:	8a 17       	cp	r24, r26
    1f28:	10 f4       	brcc	.+4      	; 0x1f2e <xTaskRemoveFromEventList+0xb6>
    1f2a:	a0 93 01 11 	sts	0x1101, r26	; 0x801101 <uxTopReadyPriority>
    1f2e:	8b e0       	ldi	r24, 0x0B	; 11
    1f30:	8a 9f       	mul	r24, r26
    1f32:	d0 01       	movw	r26, r0
    1f34:	11 24       	eor	r1, r1
    1f36:	ad 5b       	subi	r26, 0xBD	; 189
    1f38:	be 4e       	sbci	r27, 0xEE	; 238
    1f3a:	11 96       	adiw	r26, 0x01	; 1
    1f3c:	0d 90       	ld	r0, X+
    1f3e:	bc 91       	ld	r27, X
    1f40:	a0 2d       	mov	r26, r0
    1f42:	b7 83       	std	Z+7, r27	; 0x07
    1f44:	a6 83       	std	Z+6, r26	; 0x06
    1f46:	16 96       	adiw	r26, 0x06	; 6
    1f48:	4d 91       	ld	r20, X+
    1f4a:	5c 91       	ld	r21, X
    1f4c:	17 97       	sbiw	r26, 0x07	; 7
    1f4e:	51 87       	std	Z+9, r21	; 0x09
    1f50:	40 87       	std	Z+8, r20	; 0x08
    1f52:	16 96       	adiw	r26, 0x06	; 6
    1f54:	cd 91       	ld	r28, X+
    1f56:	dc 91       	ld	r29, X
    1f58:	17 97       	sbiw	r26, 0x07	; 7
    1f5a:	3d 83       	std	Y+5, r19	; 0x05
    1f5c:	2c 83       	std	Y+4, r18	; 0x04
    1f5e:	17 96       	adiw	r26, 0x07	; 7
    1f60:	3c 93       	st	X, r19
    1f62:	2e 93       	st	-X, r18
    1f64:	16 97       	sbiw	r26, 0x06	; 6
    1f66:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1f68:	8a 9f       	mul	r24, r26
    1f6a:	d0 01       	movw	r26, r0
    1f6c:	11 24       	eor	r1, r1
    1f6e:	ad 5b       	subi	r26, 0xBD	; 189
    1f70:	be 4e       	sbci	r27, 0xEE	; 238
    1f72:	b5 87       	std	Z+13, r27	; 0x0d
    1f74:	a4 87       	std	Z+12, r26	; 0x0c
    1f76:	8c 91       	ld	r24, X
    1f78:	8f 5f       	subi	r24, 0xFF	; 255
    1f7a:	8c 93       	st	X, r24
    1f7c:	1c c0       	rjmp	.+56     	; 0x1fb6 <xTaskRemoveFromEventList+0x13e>
    1f7e:	4e e1       	ldi	r20, 0x1E	; 30
    1f80:	51 e1       	ldi	r21, 0x11	; 17
    1f82:	da 01       	movw	r26, r20
    1f84:	11 96       	adiw	r26, 0x01	; 1
    1f86:	cd 91       	ld	r28, X+
    1f88:	dc 91       	ld	r29, X
    1f8a:	12 97       	sbiw	r26, 0x02	; 2
    1f8c:	d3 8b       	std	Z+19, r29	; 0x13
    1f8e:	c2 8b       	std	Z+18, r28	; 0x12
    1f90:	8e 81       	ldd	r24, Y+6	; 0x06
    1f92:	9f 81       	ldd	r25, Y+7	; 0x07
    1f94:	95 8b       	std	Z+21, r25	; 0x15
    1f96:	84 8b       	std	Z+20, r24	; 0x14
    1f98:	8e 81       	ldd	r24, Y+6	; 0x06
    1f9a:	9f 81       	ldd	r25, Y+7	; 0x07
    1f9c:	dc 01       	movw	r26, r24
    1f9e:	15 96       	adiw	r26, 0x05	; 5
    1fa0:	3c 93       	st	X, r19
    1fa2:	2e 93       	st	-X, r18
    1fa4:	14 97       	sbiw	r26, 0x04	; 4
    1fa6:	3f 83       	std	Y+7, r19	; 0x07
    1fa8:	2e 83       	std	Y+6, r18	; 0x06
    1faa:	51 8f       	std	Z+25, r21	; 0x19
    1fac:	40 8f       	std	Z+24, r20	; 0x18
    1fae:	da 01       	movw	r26, r20
    1fb0:	8c 91       	ld	r24, X
    1fb2:	8f 5f       	subi	r24, 0xFF	; 255
    1fb4:	8c 93       	st	X, r24
    1fb6:	92 8d       	ldd	r25, Z+26	; 0x1a
    1fb8:	e0 91 b1 11 	lds	r30, 0x11B1	; 0x8011b1 <pxCurrentTCB>
    1fbc:	f0 91 b2 11 	lds	r31, 0x11B2	; 0x8011b2 <pxCurrentTCB+0x1>
    1fc0:	82 8d       	ldd	r24, Z+26	; 0x1a
    1fc2:	89 17       	cp	r24, r25
    1fc4:	20 f4       	brcc	.+8      	; 0x1fce <xTaskRemoveFromEventList+0x156>
    1fc6:	81 e0       	ldi	r24, 0x01	; 1
    1fc8:	80 93 fb 10 	sts	0x10FB, r24	; 0x8010fb <xYieldPending>
    1fcc:	01 c0       	rjmp	.+2      	; 0x1fd0 <xTaskRemoveFromEventList+0x158>
    1fce:	80 e0       	ldi	r24, 0x00	; 0
    1fd0:	df 91       	pop	r29
    1fd2:	cf 91       	pop	r28
    1fd4:	08 95       	ret

00001fd6 <vTaskInternalSetTimeOutState>:
    1fd6:	20 91 fa 10 	lds	r18, 0x10FA	; 0x8010fa <xNumOfOverflows>
    1fda:	fc 01       	movw	r30, r24
    1fdc:	20 83       	st	Z, r18
    1fde:	40 91 02 11 	lds	r20, 0x1102	; 0x801102 <xTickCount>
    1fe2:	50 91 03 11 	lds	r21, 0x1103	; 0x801103 <xTickCount+0x1>
    1fe6:	60 91 04 11 	lds	r22, 0x1104	; 0x801104 <xTickCount+0x2>
    1fea:	70 91 05 11 	lds	r23, 0x1105	; 0x801105 <xTickCount+0x3>
    1fee:	41 83       	std	Z+1, r20	; 0x01
    1ff0:	52 83       	std	Z+2, r21	; 0x02
    1ff2:	63 83       	std	Z+3, r22	; 0x03
    1ff4:	74 83       	std	Z+4, r23	; 0x04
    1ff6:	08 95       	ret

00001ff8 <xTaskCheckForTimeOut>:
    1ff8:	8f 92       	push	r8
    1ffa:	9f 92       	push	r9
    1ffc:	af 92       	push	r10
    1ffe:	bf 92       	push	r11
    2000:	cf 92       	push	r12
    2002:	df 92       	push	r13
    2004:	ef 92       	push	r14
    2006:	ff 92       	push	r15
    2008:	0f 93       	push	r16
    200a:	1f 93       	push	r17
    200c:	cf 93       	push	r28
    200e:	df 93       	push	r29
    2010:	fb 01       	movw	r30, r22
    2012:	0f b6       	in	r0, 0x3f	; 63
    2014:	f8 94       	cli
    2016:	0f 92       	push	r0
    2018:	c0 90 02 11 	lds	r12, 0x1102	; 0x801102 <xTickCount>
    201c:	d0 90 03 11 	lds	r13, 0x1103	; 0x801103 <xTickCount+0x1>
    2020:	e0 90 04 11 	lds	r14, 0x1104	; 0x801104 <xTickCount+0x2>
    2024:	f0 90 05 11 	lds	r15, 0x1105	; 0x801105 <xTickCount+0x3>
    2028:	dc 01       	movw	r26, r24
    202a:	11 96       	adiw	r26, 0x01	; 1
    202c:	0d 91       	ld	r16, X+
    202e:	1d 91       	ld	r17, X+
    2030:	2d 91       	ld	r18, X+
    2032:	3c 91       	ld	r19, X
    2034:	14 97       	sbiw	r26, 0x04	; 4
    2036:	46 01       	movw	r8, r12
    2038:	57 01       	movw	r10, r14
    203a:	80 1a       	sub	r8, r16
    203c:	91 0a       	sbc	r9, r17
    203e:	a2 0a       	sbc	r10, r18
    2040:	b3 0a       	sbc	r11, r19
    2042:	40 81       	ld	r20, Z
    2044:	51 81       	ldd	r21, Z+1	; 0x01
    2046:	62 81       	ldd	r22, Z+2	; 0x02
    2048:	73 81       	ldd	r23, Z+3	; 0x03
    204a:	4f 3f       	cpi	r20, 0xFF	; 255
    204c:	bf ef       	ldi	r27, 0xFF	; 255
    204e:	5b 07       	cpc	r21, r27
    2050:	6b 07       	cpc	r22, r27
    2052:	7b 07       	cpc	r23, r27
    2054:	39 f1       	breq	.+78     	; 0x20a4 <__DATA_REGION_LENGTH__+0xa4>
    2056:	ec 01       	movw	r28, r24
    2058:	b8 81       	ld	r27, Y
    205a:	a0 91 fa 10 	lds	r26, 0x10FA	; 0x8010fa <xNumOfOverflows>
    205e:	ba 17       	cp	r27, r26
    2060:	59 f0       	breq	.+22     	; 0x2078 <__DATA_REGION_LENGTH__+0x78>
    2062:	c0 16       	cp	r12, r16
    2064:	d1 06       	cpc	r13, r17
    2066:	e2 06       	cpc	r14, r18
    2068:	f3 06       	cpc	r15, r19
    206a:	30 f0       	brcs	.+12     	; 0x2078 <__DATA_REGION_LENGTH__+0x78>
    206c:	10 82       	st	Z, r1
    206e:	11 82       	std	Z+1, r1	; 0x01
    2070:	12 82       	std	Z+2, r1	; 0x02
    2072:	13 82       	std	Z+3, r1	; 0x03
    2074:	81 e0       	ldi	r24, 0x01	; 1
    2076:	17 c0       	rjmp	.+46     	; 0x20a6 <__DATA_REGION_LENGTH__+0xa6>
    2078:	84 16       	cp	r8, r20
    207a:	95 06       	cpc	r9, r21
    207c:	a6 06       	cpc	r10, r22
    207e:	b7 06       	cpc	r11, r23
    2080:	58 f4       	brcc	.+22     	; 0x2098 <__DATA_REGION_LENGTH__+0x98>
    2082:	48 19       	sub	r20, r8
    2084:	59 09       	sbc	r21, r9
    2086:	6a 09       	sbc	r22, r10
    2088:	7b 09       	sbc	r23, r11
    208a:	40 83       	st	Z, r20
    208c:	51 83       	std	Z+1, r21	; 0x01
    208e:	62 83       	std	Z+2, r22	; 0x02
    2090:	73 83       	std	Z+3, r23	; 0x03
    2092:	a1 df       	rcall	.-190    	; 0x1fd6 <vTaskInternalSetTimeOutState>
    2094:	80 e0       	ldi	r24, 0x00	; 0
    2096:	07 c0       	rjmp	.+14     	; 0x20a6 <__DATA_REGION_LENGTH__+0xa6>
    2098:	10 82       	st	Z, r1
    209a:	11 82       	std	Z+1, r1	; 0x01
    209c:	12 82       	std	Z+2, r1	; 0x02
    209e:	13 82       	std	Z+3, r1	; 0x03
    20a0:	81 e0       	ldi	r24, 0x01	; 1
    20a2:	01 c0       	rjmp	.+2      	; 0x20a6 <__DATA_REGION_LENGTH__+0xa6>
    20a4:	80 e0       	ldi	r24, 0x00	; 0
    20a6:	0f 90       	pop	r0
    20a8:	0f be       	out	0x3f, r0	; 63
    20aa:	df 91       	pop	r29
    20ac:	cf 91       	pop	r28
    20ae:	1f 91       	pop	r17
    20b0:	0f 91       	pop	r16
    20b2:	ff 90       	pop	r15
    20b4:	ef 90       	pop	r14
    20b6:	df 90       	pop	r13
    20b8:	cf 90       	pop	r12
    20ba:	bf 90       	pop	r11
    20bc:	af 90       	pop	r10
    20be:	9f 90       	pop	r9
    20c0:	8f 90       	pop	r8
    20c2:	08 95       	ret

000020c4 <vTaskMissedYield>:
    20c4:	81 e0       	ldi	r24, 0x01	; 1
    20c6:	80 93 fb 10 	sts	0x10FB, r24	; 0x8010fb <xYieldPending>
    20ca:	08 95       	ret

000020cc <xTaskGetSchedulerState>:
    20cc:	80 91 00 11 	lds	r24, 0x1100	; 0x801100 <xSchedulerRunning>
    20d0:	88 23       	and	r24, r24
    20d2:	31 f0       	breq	.+12     	; 0x20e0 <xTaskGetSchedulerState+0x14>
    20d4:	80 91 f2 10 	lds	r24, 0x10F2	; 0x8010f2 <uxSchedulerSuspended>
    20d8:	81 11       	cpse	r24, r1
    20da:	04 c0       	rjmp	.+8      	; 0x20e4 <xTaskGetSchedulerState+0x18>
    20dc:	82 e0       	ldi	r24, 0x02	; 2
    20de:	08 95       	ret
    20e0:	81 e0       	ldi	r24, 0x01	; 1
    20e2:	08 95       	ret
    20e4:	80 e0       	ldi	r24, 0x00	; 0
    20e6:	08 95       	ret

000020e8 <xTaskPriorityInherit>:
    20e8:	0f 93       	push	r16
    20ea:	1f 93       	push	r17
    20ec:	cf 93       	push	r28
    20ee:	df 93       	push	r29
    20f0:	fc 01       	movw	r30, r24
    20f2:	89 2b       	or	r24, r25
    20f4:	09 f4       	brne	.+2      	; 0x20f8 <xTaskPriorityInherit+0x10>
    20f6:	77 c0       	rjmp	.+238    	; 0x21e6 <xTaskPriorityInherit+0xfe>
    20f8:	82 8d       	ldd	r24, Z+26	; 0x1a
    20fa:	a0 91 b1 11 	lds	r26, 0x11B1	; 0x8011b1 <pxCurrentTCB>
    20fe:	b0 91 b2 11 	lds	r27, 0x11B2	; 0x8011b2 <pxCurrentTCB+0x1>
    2102:	5a 96       	adiw	r26, 0x1a	; 26
    2104:	9c 91       	ld	r25, X
    2106:	89 17       	cp	r24, r25
    2108:	08 f0       	brcs	.+2      	; 0x210c <xTaskPriorityInherit+0x24>
    210a:	63 c0       	rjmp	.+198    	; 0x21d2 <xTaskPriorityInherit+0xea>
    210c:	46 85       	ldd	r20, Z+14	; 0x0e
    210e:	57 85       	ldd	r21, Z+15	; 0x0f
    2110:	60 89       	ldd	r22, Z+16	; 0x10
    2112:	71 89       	ldd	r23, Z+17	; 0x11
    2114:	77 23       	and	r23, r23
    2116:	94 f0       	brlt	.+36     	; 0x213c <xTaskPriorityInherit+0x54>
    2118:	a0 91 b1 11 	lds	r26, 0x11B1	; 0x8011b1 <pxCurrentTCB>
    211c:	b0 91 b2 11 	lds	r27, 0x11B2	; 0x8011b2 <pxCurrentTCB+0x1>
    2120:	5a 96       	adiw	r26, 0x1a	; 26
    2122:	9c 91       	ld	r25, X
    2124:	4a e0       	ldi	r20, 0x0A	; 10
    2126:	50 e0       	ldi	r21, 0x00	; 0
    2128:	60 e0       	ldi	r22, 0x00	; 0
    212a:	70 e0       	ldi	r23, 0x00	; 0
    212c:	49 1b       	sub	r20, r25
    212e:	51 09       	sbc	r21, r1
    2130:	61 09       	sbc	r22, r1
    2132:	71 09       	sbc	r23, r1
    2134:	46 87       	std	Z+14, r20	; 0x0e
    2136:	57 87       	std	Z+15, r21	; 0x0f
    2138:	60 8b       	std	Z+16, r22	; 0x10
    213a:	71 8b       	std	Z+17, r23	; 0x11
    213c:	24 85       	ldd	r18, Z+12	; 0x0c
    213e:	35 85       	ldd	r19, Z+13	; 0x0d
    2140:	4b e0       	ldi	r20, 0x0B	; 11
    2142:	84 9f       	mul	r24, r20
    2144:	c0 01       	movw	r24, r0
    2146:	11 24       	eor	r1, r1
    2148:	8d 5b       	subi	r24, 0xBD	; 189
    214a:	9e 4e       	sbci	r25, 0xEE	; 238
    214c:	28 17       	cp	r18, r24
    214e:	39 07       	cpc	r19, r25
    2150:	b9 f5       	brne	.+110    	; 0x21c0 <xTaskPriorityInherit+0xd8>
    2152:	ef 01       	movw	r28, r30
    2154:	8f 01       	movw	r16, r30
    2156:	0e 5f       	subi	r16, 0xFE	; 254
    2158:	1f 4f       	sbci	r17, 0xFF	; 255
    215a:	c8 01       	movw	r24, r16
    215c:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <uxListRemove>
    2160:	e0 91 b1 11 	lds	r30, 0x11B1	; 0x8011b1 <pxCurrentTCB>
    2164:	f0 91 b2 11 	lds	r31, 0x11B2	; 0x8011b2 <pxCurrentTCB+0x1>
    2168:	e2 8d       	ldd	r30, Z+26	; 0x1a
    216a:	ea 8f       	std	Y+26, r30	; 0x1a
    216c:	80 91 01 11 	lds	r24, 0x1101	; 0x801101 <uxTopReadyPriority>
    2170:	8e 17       	cp	r24, r30
    2172:	10 f4       	brcc	.+4      	; 0x2178 <xTaskPriorityInherit+0x90>
    2174:	e0 93 01 11 	sts	0x1101, r30	; 0x801101 <uxTopReadyPriority>
    2178:	8b e0       	ldi	r24, 0x0B	; 11
    217a:	8e 9f       	mul	r24, r30
    217c:	f0 01       	movw	r30, r0
    217e:	11 24       	eor	r1, r1
    2180:	ed 5b       	subi	r30, 0xBD	; 189
    2182:	fe 4e       	sbci	r31, 0xEE	; 238
    2184:	01 80       	ldd	r0, Z+1	; 0x01
    2186:	f2 81       	ldd	r31, Z+2	; 0x02
    2188:	e0 2d       	mov	r30, r0
    218a:	ff 83       	std	Y+7, r31	; 0x07
    218c:	ee 83       	std	Y+6, r30	; 0x06
    218e:	26 81       	ldd	r18, Z+6	; 0x06
    2190:	37 81       	ldd	r19, Z+7	; 0x07
    2192:	39 87       	std	Y+9, r19	; 0x09
    2194:	28 87       	std	Y+8, r18	; 0x08
    2196:	a6 81       	ldd	r26, Z+6	; 0x06
    2198:	b7 81       	ldd	r27, Z+7	; 0x07
    219a:	15 96       	adiw	r26, 0x05	; 5
    219c:	1c 93       	st	X, r17
    219e:	0e 93       	st	-X, r16
    21a0:	14 97       	sbiw	r26, 0x04	; 4
    21a2:	17 83       	std	Z+7, r17	; 0x07
    21a4:	06 83       	std	Z+6, r16	; 0x06
    21a6:	ea 8d       	ldd	r30, Y+26	; 0x1a
    21a8:	8e 9f       	mul	r24, r30
    21aa:	f0 01       	movw	r30, r0
    21ac:	11 24       	eor	r1, r1
    21ae:	ed 5b       	subi	r30, 0xBD	; 189
    21b0:	fe 4e       	sbci	r31, 0xEE	; 238
    21b2:	fd 87       	std	Y+13, r31	; 0x0d
    21b4:	ec 87       	std	Y+12, r30	; 0x0c
    21b6:	80 81       	ld	r24, Z
    21b8:	8f 5f       	subi	r24, 0xFF	; 255
    21ba:	80 83       	st	Z, r24
    21bc:	81 e0       	ldi	r24, 0x01	; 1
    21be:	16 c0       	rjmp	.+44     	; 0x21ec <xTaskPriorityInherit+0x104>
    21c0:	a0 91 b1 11 	lds	r26, 0x11B1	; 0x8011b1 <pxCurrentTCB>
    21c4:	b0 91 b2 11 	lds	r27, 0x11B2	; 0x8011b2 <pxCurrentTCB+0x1>
    21c8:	5a 96       	adiw	r26, 0x1a	; 26
    21ca:	8c 91       	ld	r24, X
    21cc:	82 8f       	std	Z+26, r24	; 0x1a
    21ce:	81 e0       	ldi	r24, 0x01	; 1
    21d0:	0d c0       	rjmp	.+26     	; 0x21ec <xTaskPriorityInherit+0x104>
    21d2:	95 a5       	ldd	r25, Z+45	; 0x2d
    21d4:	e0 91 b1 11 	lds	r30, 0x11B1	; 0x8011b1 <pxCurrentTCB>
    21d8:	f0 91 b2 11 	lds	r31, 0x11B2	; 0x8011b2 <pxCurrentTCB+0x1>
    21dc:	82 8d       	ldd	r24, Z+26	; 0x1a
    21de:	98 17       	cp	r25, r24
    21e0:	20 f0       	brcs	.+8      	; 0x21ea <xTaskPriorityInherit+0x102>
    21e2:	80 e0       	ldi	r24, 0x00	; 0
    21e4:	03 c0       	rjmp	.+6      	; 0x21ec <xTaskPriorityInherit+0x104>
    21e6:	80 e0       	ldi	r24, 0x00	; 0
    21e8:	01 c0       	rjmp	.+2      	; 0x21ec <xTaskPriorityInherit+0x104>
    21ea:	81 e0       	ldi	r24, 0x01	; 1
    21ec:	df 91       	pop	r29
    21ee:	cf 91       	pop	r28
    21f0:	1f 91       	pop	r17
    21f2:	0f 91       	pop	r16
    21f4:	08 95       	ret

000021f6 <xTaskPriorityDisinherit>:
    21f6:	0f 93       	push	r16
    21f8:	1f 93       	push	r17
    21fa:	cf 93       	push	r28
    21fc:	df 93       	push	r29
    21fe:	fc 01       	movw	r30, r24
    2200:	89 2b       	or	r24, r25
    2202:	09 f4       	brne	.+2      	; 0x2206 <__stack+0x7>
    2204:	49 c0       	rjmp	.+146    	; 0x2298 <__stack+0x99>
    2206:	86 a5       	ldd	r24, Z+46	; 0x2e
    2208:	81 50       	subi	r24, 0x01	; 1
    220a:	86 a7       	std	Z+46, r24	; 0x2e
    220c:	22 8d       	ldd	r18, Z+26	; 0x1a
    220e:	95 a5       	ldd	r25, Z+45	; 0x2d
    2210:	29 17       	cp	r18, r25
    2212:	09 f4       	brne	.+2      	; 0x2216 <__stack+0x17>
    2214:	43 c0       	rjmp	.+134    	; 0x229c <__stack+0x9d>
    2216:	81 11       	cpse	r24, r1
    2218:	43 c0       	rjmp	.+134    	; 0x22a0 <__stack+0xa1>
    221a:	ef 01       	movw	r28, r30
    221c:	8f 01       	movw	r16, r30
    221e:	0e 5f       	subi	r16, 0xFE	; 254
    2220:	1f 4f       	sbci	r17, 0xFF	; 255
    2222:	c8 01       	movw	r24, r16
    2224:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <uxListRemove>
    2228:	ed a5       	ldd	r30, Y+45	; 0x2d
    222a:	ea 8f       	std	Y+26, r30	; 0x1a
    222c:	8a e0       	ldi	r24, 0x0A	; 10
    222e:	90 e0       	ldi	r25, 0x00	; 0
    2230:	a0 e0       	ldi	r26, 0x00	; 0
    2232:	b0 e0       	ldi	r27, 0x00	; 0
    2234:	8e 1b       	sub	r24, r30
    2236:	91 09       	sbc	r25, r1
    2238:	a1 09       	sbc	r26, r1
    223a:	b1 09       	sbc	r27, r1
    223c:	8e 87       	std	Y+14, r24	; 0x0e
    223e:	9f 87       	std	Y+15, r25	; 0x0f
    2240:	a8 8b       	std	Y+16, r26	; 0x10
    2242:	b9 8b       	std	Y+17, r27	; 0x11
    2244:	80 91 01 11 	lds	r24, 0x1101	; 0x801101 <uxTopReadyPriority>
    2248:	8e 17       	cp	r24, r30
    224a:	10 f4       	brcc	.+4      	; 0x2250 <__stack+0x51>
    224c:	e0 93 01 11 	sts	0x1101, r30	; 0x801101 <uxTopReadyPriority>
    2250:	8b e0       	ldi	r24, 0x0B	; 11
    2252:	8e 9f       	mul	r24, r30
    2254:	f0 01       	movw	r30, r0
    2256:	11 24       	eor	r1, r1
    2258:	ed 5b       	subi	r30, 0xBD	; 189
    225a:	fe 4e       	sbci	r31, 0xEE	; 238
    225c:	01 80       	ldd	r0, Z+1	; 0x01
    225e:	f2 81       	ldd	r31, Z+2	; 0x02
    2260:	e0 2d       	mov	r30, r0
    2262:	ff 83       	std	Y+7, r31	; 0x07
    2264:	ee 83       	std	Y+6, r30	; 0x06
    2266:	26 81       	ldd	r18, Z+6	; 0x06
    2268:	37 81       	ldd	r19, Z+7	; 0x07
    226a:	39 87       	std	Y+9, r19	; 0x09
    226c:	28 87       	std	Y+8, r18	; 0x08
    226e:	a6 81       	ldd	r26, Z+6	; 0x06
    2270:	b7 81       	ldd	r27, Z+7	; 0x07
    2272:	15 96       	adiw	r26, 0x05	; 5
    2274:	1c 93       	st	X, r17
    2276:	0e 93       	st	-X, r16
    2278:	14 97       	sbiw	r26, 0x04	; 4
    227a:	17 83       	std	Z+7, r17	; 0x07
    227c:	06 83       	std	Z+6, r16	; 0x06
    227e:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2280:	8e 9f       	mul	r24, r30
    2282:	f0 01       	movw	r30, r0
    2284:	11 24       	eor	r1, r1
    2286:	ed 5b       	subi	r30, 0xBD	; 189
    2288:	fe 4e       	sbci	r31, 0xEE	; 238
    228a:	fd 87       	std	Y+13, r31	; 0x0d
    228c:	ec 87       	std	Y+12, r30	; 0x0c
    228e:	80 81       	ld	r24, Z
    2290:	8f 5f       	subi	r24, 0xFF	; 255
    2292:	80 83       	st	Z, r24
    2294:	81 e0       	ldi	r24, 0x01	; 1
    2296:	05 c0       	rjmp	.+10     	; 0x22a2 <__stack+0xa3>
    2298:	80 e0       	ldi	r24, 0x00	; 0
    229a:	03 c0       	rjmp	.+6      	; 0x22a2 <__stack+0xa3>
    229c:	80 e0       	ldi	r24, 0x00	; 0
    229e:	01 c0       	rjmp	.+2      	; 0x22a2 <__stack+0xa3>
    22a0:	80 e0       	ldi	r24, 0x00	; 0
    22a2:	df 91       	pop	r29
    22a4:	cf 91       	pop	r28
    22a6:	1f 91       	pop	r17
    22a8:	0f 91       	pop	r16
    22aa:	08 95       	ret

000022ac <vTaskPriorityDisinheritAfterTimeout>:
    22ac:	0f 93       	push	r16
    22ae:	1f 93       	push	r17
    22b0:	cf 93       	push	r28
    22b2:	df 93       	push	r29
    22b4:	fc 01       	movw	r30, r24
    22b6:	89 2b       	or	r24, r25
    22b8:	09 f4       	brne	.+2      	; 0x22bc <vTaskPriorityDisinheritAfterTimeout+0x10>
    22ba:	5a c0       	rjmp	.+180    	; 0x2370 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    22bc:	85 a5       	ldd	r24, Z+45	; 0x2d
    22be:	86 17       	cp	r24, r22
    22c0:	08 f4       	brcc	.+2      	; 0x22c4 <vTaskPriorityDisinheritAfterTimeout+0x18>
    22c2:	86 2f       	mov	r24, r22
    22c4:	92 8d       	ldd	r25, Z+26	; 0x1a
    22c6:	89 17       	cp	r24, r25
    22c8:	09 f4       	brne	.+2      	; 0x22cc <vTaskPriorityDisinheritAfterTimeout+0x20>
    22ca:	52 c0       	rjmp	.+164    	; 0x2370 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    22cc:	26 a5       	ldd	r18, Z+46	; 0x2e
    22ce:	21 30       	cpi	r18, 0x01	; 1
    22d0:	09 f0       	breq	.+2      	; 0x22d4 <vTaskPriorityDisinheritAfterTimeout+0x28>
    22d2:	4e c0       	rjmp	.+156    	; 0x2370 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    22d4:	82 8f       	std	Z+26, r24	; 0x1a
    22d6:	46 85       	ldd	r20, Z+14	; 0x0e
    22d8:	57 85       	ldd	r21, Z+15	; 0x0f
    22da:	60 89       	ldd	r22, Z+16	; 0x10
    22dc:	71 89       	ldd	r23, Z+17	; 0x11
    22de:	77 23       	and	r23, r23
    22e0:	64 f0       	brlt	.+24     	; 0x22fa <vTaskPriorityDisinheritAfterTimeout+0x4e>
    22e2:	4a e0       	ldi	r20, 0x0A	; 10
    22e4:	50 e0       	ldi	r21, 0x00	; 0
    22e6:	60 e0       	ldi	r22, 0x00	; 0
    22e8:	70 e0       	ldi	r23, 0x00	; 0
    22ea:	48 1b       	sub	r20, r24
    22ec:	51 09       	sbc	r21, r1
    22ee:	61 09       	sbc	r22, r1
    22f0:	71 09       	sbc	r23, r1
    22f2:	46 87       	std	Z+14, r20	; 0x0e
    22f4:	57 87       	std	Z+15, r21	; 0x0f
    22f6:	60 8b       	std	Z+16, r22	; 0x10
    22f8:	71 8b       	std	Z+17, r23	; 0x11
    22fa:	24 85       	ldd	r18, Z+12	; 0x0c
    22fc:	35 85       	ldd	r19, Z+13	; 0x0d
    22fe:	4b e0       	ldi	r20, 0x0B	; 11
    2300:	94 9f       	mul	r25, r20
    2302:	c0 01       	movw	r24, r0
    2304:	11 24       	eor	r1, r1
    2306:	8d 5b       	subi	r24, 0xBD	; 189
    2308:	9e 4e       	sbci	r25, 0xEE	; 238
    230a:	28 17       	cp	r18, r24
    230c:	39 07       	cpc	r19, r25
    230e:	81 f5       	brne	.+96     	; 0x2370 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    2310:	ef 01       	movw	r28, r30
    2312:	8f 01       	movw	r16, r30
    2314:	0e 5f       	subi	r16, 0xFE	; 254
    2316:	1f 4f       	sbci	r17, 0xFF	; 255
    2318:	c8 01       	movw	r24, r16
    231a:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <uxListRemove>
    231e:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2320:	80 91 01 11 	lds	r24, 0x1101	; 0x801101 <uxTopReadyPriority>
    2324:	8e 17       	cp	r24, r30
    2326:	10 f4       	brcc	.+4      	; 0x232c <vTaskPriorityDisinheritAfterTimeout+0x80>
    2328:	e0 93 01 11 	sts	0x1101, r30	; 0x801101 <uxTopReadyPriority>
    232c:	8b e0       	ldi	r24, 0x0B	; 11
    232e:	8e 9f       	mul	r24, r30
    2330:	f0 01       	movw	r30, r0
    2332:	11 24       	eor	r1, r1
    2334:	ed 5b       	subi	r30, 0xBD	; 189
    2336:	fe 4e       	sbci	r31, 0xEE	; 238
    2338:	01 80       	ldd	r0, Z+1	; 0x01
    233a:	f2 81       	ldd	r31, Z+2	; 0x02
    233c:	e0 2d       	mov	r30, r0
    233e:	ff 83       	std	Y+7, r31	; 0x07
    2340:	ee 83       	std	Y+6, r30	; 0x06
    2342:	26 81       	ldd	r18, Z+6	; 0x06
    2344:	37 81       	ldd	r19, Z+7	; 0x07
    2346:	39 87       	std	Y+9, r19	; 0x09
    2348:	28 87       	std	Y+8, r18	; 0x08
    234a:	a6 81       	ldd	r26, Z+6	; 0x06
    234c:	b7 81       	ldd	r27, Z+7	; 0x07
    234e:	15 96       	adiw	r26, 0x05	; 5
    2350:	1c 93       	st	X, r17
    2352:	0e 93       	st	-X, r16
    2354:	14 97       	sbiw	r26, 0x04	; 4
    2356:	17 83       	std	Z+7, r17	; 0x07
    2358:	06 83       	std	Z+6, r16	; 0x06
    235a:	ea 8d       	ldd	r30, Y+26	; 0x1a
    235c:	8e 9f       	mul	r24, r30
    235e:	f0 01       	movw	r30, r0
    2360:	11 24       	eor	r1, r1
    2362:	ed 5b       	subi	r30, 0xBD	; 189
    2364:	fe 4e       	sbci	r31, 0xEE	; 238
    2366:	fd 87       	std	Y+13, r31	; 0x0d
    2368:	ec 87       	std	Y+12, r30	; 0x0c
    236a:	80 81       	ld	r24, Z
    236c:	8f 5f       	subi	r24, 0xFF	; 255
    236e:	80 83       	st	Z, r24
    2370:	df 91       	pop	r29
    2372:	cf 91       	pop	r28
    2374:	1f 91       	pop	r17
    2376:	0f 91       	pop	r16
    2378:	08 95       	ret

0000237a <pvTaskIncrementMutexHeldCount>:

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
    237a:	80 91 b1 11 	lds	r24, 0x11B1	; 0x8011b1 <pxCurrentTCB>
    237e:	90 91 b2 11 	lds	r25, 0x11B2	; 0x8011b2 <pxCurrentTCB+0x1>
    2382:	89 2b       	or	r24, r25
    2384:	39 f0       	breq	.+14     	; 0x2394 <pvTaskIncrementMutexHeldCount+0x1a>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
    2386:	e0 91 b1 11 	lds	r30, 0x11B1	; 0x8011b1 <pxCurrentTCB>
    238a:	f0 91 b2 11 	lds	r31, 0x11B2	; 0x8011b2 <pxCurrentTCB+0x1>
    238e:	86 a5       	ldd	r24, Z+46	; 0x2e
    2390:	8f 5f       	subi	r24, 0xFF	; 255
    2392:	86 a7       	std	Z+46, r24	; 0x2e
        }

        return ( TaskHandle_t ) pxCurrentTCB;
    2394:	80 91 b1 11 	lds	r24, 0x11B1	; 0x8011b1 <pxCurrentTCB>
    2398:	90 91 b2 11 	lds	r25, 0x11B2	; 0x8011b2 <pxCurrentTCB+0x1>
    }
    239c:	08 95       	ret

0000239e <prvGetNextExpireTime>:
    239e:	dc 01       	movw	r26, r24
    23a0:	e0 91 bd 11 	lds	r30, 0x11BD	; 0x8011bd <pxCurrentTimerList>
    23a4:	f0 91 be 11 	lds	r31, 0x11BE	; 0x8011be <pxCurrentTimerList+0x1>
    23a8:	80 81       	ld	r24, Z
    23aa:	91 e0       	ldi	r25, 0x01	; 1
    23ac:	81 11       	cpse	r24, r1
    23ae:	90 e0       	ldi	r25, 0x00	; 0
    23b0:	9c 93       	st	X, r25
    23b2:	91 11       	cpse	r25, r1
    23b4:	08 c0       	rjmp	.+16     	; 0x23c6 <prvGetNextExpireTime+0x28>
    23b6:	07 80       	ldd	r0, Z+7	; 0x07
    23b8:	f0 85       	ldd	r31, Z+8	; 0x08
    23ba:	e0 2d       	mov	r30, r0
    23bc:	60 81       	ld	r22, Z
    23be:	71 81       	ldd	r23, Z+1	; 0x01
    23c0:	82 81       	ldd	r24, Z+2	; 0x02
    23c2:	93 81       	ldd	r25, Z+3	; 0x03
    23c4:	08 95       	ret
    23c6:	60 e0       	ldi	r22, 0x00	; 0
    23c8:	70 e0       	ldi	r23, 0x00	; 0
    23ca:	cb 01       	movw	r24, r22
    23cc:	08 95       	ret

000023ce <prvInsertTimerInActiveList>:
    23ce:	cf 92       	push	r12
    23d0:	df 92       	push	r13
    23d2:	ef 92       	push	r14
    23d4:	ff 92       	push	r15
    23d6:	0f 93       	push	r16
    23d8:	1f 93       	push	r17
    23da:	fc 01       	movw	r30, r24
    23dc:	42 83       	std	Z+2, r20	; 0x02
    23de:	53 83       	std	Z+3, r21	; 0x03
    23e0:	64 83       	std	Z+4, r22	; 0x04
    23e2:	75 83       	std	Z+5, r23	; 0x05
    23e4:	93 87       	std	Z+11, r25	; 0x0b
    23e6:	82 87       	std	Z+10, r24	; 0x0a
    23e8:	04 17       	cp	r16, r20
    23ea:	15 07       	cpc	r17, r21
    23ec:	26 07       	cpc	r18, r22
    23ee:	37 07       	cpc	r19, r23
    23f0:	c0 f0       	brcs	.+48     	; 0x2422 <prvInsertTimerInActiveList+0x54>
    23f2:	0c 19       	sub	r16, r12
    23f4:	1d 09       	sbc	r17, r13
    23f6:	2e 09       	sbc	r18, r14
    23f8:	3f 09       	sbc	r19, r15
    23fa:	86 85       	ldd	r24, Z+14	; 0x0e
    23fc:	97 85       	ldd	r25, Z+15	; 0x0f
    23fe:	a0 89       	ldd	r26, Z+16	; 0x10
    2400:	b1 89       	ldd	r27, Z+17	; 0x11
    2402:	08 17       	cp	r16, r24
    2404:	19 07       	cpc	r17, r25
    2406:	2a 07       	cpc	r18, r26
    2408:	3b 07       	cpc	r19, r27
    240a:	00 f5       	brcc	.+64     	; 0x244c <prvInsertTimerInActiveList+0x7e>
    240c:	bf 01       	movw	r22, r30
    240e:	6e 5f       	subi	r22, 0xFE	; 254
    2410:	7f 4f       	sbci	r23, 0xFF	; 255
    2412:	80 91 bb 11 	lds	r24, 0x11BB	; 0x8011bb <pxOverflowTimerList>
    2416:	90 91 bc 11 	lds	r25, 0x11BC	; 0x8011bc <pxOverflowTimerList+0x1>
    241a:	0e 94 93 04 	call	0x926	; 0x926 <vListInsert>
    241e:	80 e0       	ldi	r24, 0x00	; 0
    2420:	18 c0       	rjmp	.+48     	; 0x2452 <prvInsertTimerInActiveList+0x84>
    2422:	0c 15       	cp	r16, r12
    2424:	1d 05       	cpc	r17, r13
    2426:	2e 05       	cpc	r18, r14
    2428:	3f 05       	cpc	r19, r15
    242a:	28 f4       	brcc	.+10     	; 0x2436 <prvInsertTimerInActiveList+0x68>
    242c:	4c 15       	cp	r20, r12
    242e:	5d 05       	cpc	r21, r13
    2430:	6e 05       	cpc	r22, r14
    2432:	7f 05       	cpc	r23, r15
    2434:	68 f4       	brcc	.+26     	; 0x2450 <prvInsertTimerInActiveList+0x82>
    2436:	bf 01       	movw	r22, r30
    2438:	6e 5f       	subi	r22, 0xFE	; 254
    243a:	7f 4f       	sbci	r23, 0xFF	; 255
    243c:	80 91 bd 11 	lds	r24, 0x11BD	; 0x8011bd <pxCurrentTimerList>
    2440:	90 91 be 11 	lds	r25, 0x11BE	; 0x8011be <pxCurrentTimerList+0x1>
    2444:	0e 94 93 04 	call	0x926	; 0x926 <vListInsert>
    2448:	80 e0       	ldi	r24, 0x00	; 0
    244a:	03 c0       	rjmp	.+6      	; 0x2452 <prvInsertTimerInActiveList+0x84>
    244c:	81 e0       	ldi	r24, 0x01	; 1
    244e:	01 c0       	rjmp	.+2      	; 0x2452 <prvInsertTimerInActiveList+0x84>
    2450:	81 e0       	ldi	r24, 0x01	; 1
    2452:	1f 91       	pop	r17
    2454:	0f 91       	pop	r16
    2456:	ff 90       	pop	r15
    2458:	ef 90       	pop	r14
    245a:	df 90       	pop	r13
    245c:	cf 90       	pop	r12
    245e:	08 95       	ret

00002460 <prvCheckForValidListAndQueue>:
    2460:	0f b6       	in	r0, 0x3f	; 63
    2462:	f8 94       	cli
    2464:	0f 92       	push	r0
    2466:	80 91 b9 11 	lds	r24, 0x11B9	; 0x8011b9 <xTimerQueue>
    246a:	90 91 ba 11 	lds	r25, 0x11BA	; 0x8011ba <xTimerQueue+0x1>
    246e:	89 2b       	or	r24, r25
    2470:	e9 f4       	brne	.+58     	; 0x24ac <prvCheckForValidListAndQueue+0x4c>
    2472:	8a ec       	ldi	r24, 0xCA	; 202
    2474:	91 e1       	ldi	r25, 0x11	; 17
    2476:	0e 94 7e 04 	call	0x8fc	; 0x8fc <vListInitialise>
    247a:	8f eb       	ldi	r24, 0xBF	; 191
    247c:	91 e1       	ldi	r25, 0x11	; 17
    247e:	0e 94 7e 04 	call	0x8fc	; 0x8fc <vListInitialise>
    2482:	8a ec       	ldi	r24, 0xCA	; 202
    2484:	91 e1       	ldi	r25, 0x11	; 17
    2486:	90 93 be 11 	sts	0x11BE, r25	; 0x8011be <pxCurrentTimerList+0x1>
    248a:	80 93 bd 11 	sts	0x11BD, r24	; 0x8011bd <pxCurrentTimerList>
    248e:	8f eb       	ldi	r24, 0xBF	; 191
    2490:	91 e1       	ldi	r25, 0x11	; 17
    2492:	90 93 bc 11 	sts	0x11BC, r25	; 0x8011bc <pxOverflowTimerList+0x1>
    2496:	80 93 bb 11 	sts	0x11BB, r24	; 0x8011bb <pxOverflowTimerList>
    249a:	40 e0       	ldi	r20, 0x00	; 0
    249c:	67 e0       	ldi	r22, 0x07	; 7
    249e:	8a e0       	ldi	r24, 0x0A	; 10
    24a0:	0e 94 40 07 	call	0xe80	; 0xe80 <xQueueGenericCreate>
    24a4:	90 93 ba 11 	sts	0x11BA, r25	; 0x8011ba <xTimerQueue+0x1>
    24a8:	80 93 b9 11 	sts	0x11B9, r24	; 0x8011b9 <xTimerQueue>
    24ac:	0f 90       	pop	r0
    24ae:	0f be       	out	0x3f, r0	; 63
    24b0:	08 95       	ret

000024b2 <xTimerCreateTimerTask>:
    24b2:	ef 92       	push	r14
    24b4:	ff 92       	push	r15
    24b6:	0f 93       	push	r16
    24b8:	d3 df       	rcall	.-90     	; 0x2460 <prvCheckForValidListAndQueue>
    24ba:	80 91 b9 11 	lds	r24, 0x11B9	; 0x8011b9 <xTimerQueue>
    24be:	90 91 ba 11 	lds	r25, 0x11BA	; 0x8011ba <xTimerQueue+0x1>
    24c2:	89 2b       	or	r24, r25
    24c4:	89 f0       	breq	.+34     	; 0x24e8 <xTimerCreateTimerTask+0x36>
    24c6:	0f 2e       	mov	r0, r31
    24c8:	f7 eb       	ldi	r31, 0xB7	; 183
    24ca:	ef 2e       	mov	r14, r31
    24cc:	f1 e1       	ldi	r31, 0x11	; 17
    24ce:	ff 2e       	mov	r15, r31
    24d0:	f0 2d       	mov	r31, r0
    24d2:	03 e0       	ldi	r16, 0x03	; 3
    24d4:	20 e0       	ldi	r18, 0x00	; 0
    24d6:	30 e0       	ldi	r19, 0x00	; 0
    24d8:	40 ec       	ldi	r20, 0xC0	; 192
    24da:	50 e0       	ldi	r21, 0x00	; 0
    24dc:	62 e0       	ldi	r22, 0x02	; 2
    24de:	73 e0       	ldi	r23, 0x03	; 3
    24e0:	86 e8       	ldi	r24, 0x86	; 134
    24e2:	90 e0       	ldi	r25, 0x00	; 0
    24e4:	30 d9       	rcall	.-3488   	; 0x1746 <xTaskCreate>
    24e6:	01 c0       	rjmp	.+2      	; 0x24ea <xTimerCreateTimerTask+0x38>
    24e8:	80 e0       	ldi	r24, 0x00	; 0
    24ea:	0f 91       	pop	r16
    24ec:	ff 90       	pop	r15
    24ee:	ef 90       	pop	r14
    24f0:	08 95       	ret

000024f2 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    24f2:	8f 92       	push	r8
    24f4:	9f 92       	push	r9
    24f6:	af 92       	push	r10
    24f8:	bf 92       	push	r11
    24fa:	cf 92       	push	r12
    24fc:	df 92       	push	r13
    24fe:	ef 92       	push	r14
    2500:	ff 92       	push	r15
    2502:	0f 93       	push	r16
    2504:	1f 93       	push	r17
    2506:	cf 93       	push	r28
    2508:	df 93       	push	r29
    250a:	cd b7       	in	r28, 0x3d	; 61
    250c:	de b7       	in	r29, 0x3e	; 62
    250e:	27 97       	sbiw	r28, 0x07	; 7
    2510:	0f b6       	in	r0, 0x3f	; 63
    2512:	f8 94       	cli
    2514:	de bf       	out	0x3e, r29	; 62
    2516:	0f be       	out	0x3f, r0	; 63
    2518:	cd bf       	out	0x3d, r28	; 61

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    251a:	e0 91 b9 11 	lds	r30, 0x11B9	; 0x8011b9 <xTimerQueue>
    251e:	f0 91 ba 11 	lds	r31, 0x11BA	; 0x8011ba <xTimerQueue+0x1>
    2522:	30 97       	sbiw	r30, 0x00	; 0
    2524:	81 f1       	breq	.+96     	; 0x2586 <xTimerGenericCommand+0x94>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    2526:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    2528:	2a 83       	std	Y+2, r18	; 0x02
    252a:	3b 83       	std	Y+3, r19	; 0x03
    252c:	4c 83       	std	Y+4, r20	; 0x04
    252e:	5d 83       	std	Y+5, r21	; 0x05
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    2530:	9f 83       	std	Y+7, r25	; 0x07
    2532:	8e 83       	std	Y+6, r24	; 0x06

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    2534:	66 30       	cpi	r22, 0x06	; 6
    2536:	f4 f4       	brge	.+60     	; 0x2574 <xTimerGenericCommand+0x82>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    2538:	c9 dd       	rcall	.-1134   	; 0x20cc <xTaskGetSchedulerState>
    253a:	82 30       	cpi	r24, 0x02	; 2
    253c:	69 f4       	brne	.+26     	; 0x2558 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    253e:	00 e0       	ldi	r16, 0x00	; 0
    2540:	a7 01       	movw	r20, r14
    2542:	96 01       	movw	r18, r12
    2544:	be 01       	movw	r22, r28
    2546:	6f 5f       	subi	r22, 0xFF	; 255
    2548:	7f 4f       	sbci	r23, 0xFF	; 255
    254a:	80 91 b9 11 	lds	r24, 0x11B9	; 0x8011b9 <xTimerQueue>
    254e:	90 91 ba 11 	lds	r25, 0x11BA	; 0x8011ba <xTimerQueue+0x1>
    2552:	0e 94 63 07 	call	0xec6	; 0xec6 <xQueueGenericSend>
    2556:	18 c0       	rjmp	.+48     	; 0x2588 <xTimerGenericCommand+0x96>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    2558:	00 e0       	ldi	r16, 0x00	; 0
    255a:	20 e0       	ldi	r18, 0x00	; 0
    255c:	30 e0       	ldi	r19, 0x00	; 0
    255e:	a9 01       	movw	r20, r18
    2560:	be 01       	movw	r22, r28
    2562:	6f 5f       	subi	r22, 0xFF	; 255
    2564:	7f 4f       	sbci	r23, 0xFF	; 255
    2566:	80 91 b9 11 	lds	r24, 0x11B9	; 0x8011b9 <xTimerQueue>
    256a:	90 91 ba 11 	lds	r25, 0x11BA	; 0x8011ba <xTimerQueue+0x1>
    256e:	0e 94 63 07 	call	0xec6	; 0xec6 <xQueueGenericSend>
    2572:	0a c0       	rjmp	.+20     	; 0x2588 <xTimerGenericCommand+0x96>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    2574:	20 e0       	ldi	r18, 0x00	; 0
    2576:	a8 01       	movw	r20, r16
    2578:	be 01       	movw	r22, r28
    257a:	6f 5f       	subi	r22, 0xFF	; 255
    257c:	7f 4f       	sbci	r23, 0xFF	; 255
    257e:	cf 01       	movw	r24, r30
    2580:	0e 94 0e 08 	call	0x101c	; 0x101c <xQueueGenericSendFromISR>
    2584:	01 c0       	rjmp	.+2      	; 0x2588 <xTimerGenericCommand+0x96>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    2586:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    2588:	27 96       	adiw	r28, 0x07	; 7
    258a:	0f b6       	in	r0, 0x3f	; 63
    258c:	f8 94       	cli
    258e:	de bf       	out	0x3e, r29	; 62
    2590:	0f be       	out	0x3f, r0	; 63
    2592:	cd bf       	out	0x3d, r28	; 61
    2594:	df 91       	pop	r29
    2596:	cf 91       	pop	r28
    2598:	1f 91       	pop	r17
    259a:	0f 91       	pop	r16
    259c:	ff 90       	pop	r15
    259e:	ef 90       	pop	r14
    25a0:	df 90       	pop	r13
    25a2:	cf 90       	pop	r12
    25a4:	bf 90       	pop	r11
    25a6:	af 90       	pop	r10
    25a8:	9f 90       	pop	r9
    25aa:	8f 90       	pop	r8
    25ac:	08 95       	ret

000025ae <prvSwitchTimerLists>:
        }
    }
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
    25ae:	8f 92       	push	r8
    25b0:	9f 92       	push	r9
    25b2:	af 92       	push	r10
    25b4:	bf 92       	push	r11
    25b6:	cf 92       	push	r12
    25b8:	df 92       	push	r13
    25ba:	ef 92       	push	r14
    25bc:	ff 92       	push	r15
    25be:	0f 93       	push	r16
    25c0:	1f 93       	push	r17
    25c2:	cf 93       	push	r28
    25c4:	df 93       	push	r29

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    25c6:	3b c0       	rjmp	.+118    	; 0x263e <prvSwitchTimerLists+0x90>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    25c8:	07 80       	ldd	r0, Z+7	; 0x07
    25ca:	f0 85       	ldd	r31, Z+8	; 0x08
    25cc:	e0 2d       	mov	r30, r0
    25ce:	80 80       	ld	r8, Z
    25d0:	91 80       	ldd	r9, Z+1	; 0x01
    25d2:	a2 80       	ldd	r10, Z+2	; 0x02
    25d4:	b3 80       	ldd	r11, Z+3	; 0x03

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    25d6:	c0 85       	ldd	r28, Z+8	; 0x08
    25d8:	d1 85       	ldd	r29, Z+9	; 0x09
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    25da:	8e 01       	movw	r16, r28
    25dc:	0e 5f       	subi	r16, 0xFE	; 254
    25de:	1f 4f       	sbci	r17, 0xFF	; 255
    25e0:	c8 01       	movw	r24, r16
    25e2:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    25e6:	ec 89       	ldd	r30, Y+20	; 0x14
    25e8:	fd 89       	ldd	r31, Y+21	; 0x15
    25ea:	ce 01       	movw	r24, r28
    25ec:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    25ee:	8e 89       	ldd	r24, Y+22	; 0x16
    25f0:	82 ff       	sbrs	r24, 2
    25f2:	25 c0       	rjmp	.+74     	; 0x263e <prvSwitchTimerLists+0x90>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    25f4:	8e 85       	ldd	r24, Y+14	; 0x0e
    25f6:	9f 85       	ldd	r25, Y+15	; 0x0f
    25f8:	a8 89       	ldd	r26, Y+16	; 0x10
    25fa:	b9 89       	ldd	r27, Y+17	; 0x11
    25fc:	88 0d       	add	r24, r8
    25fe:	99 1d       	adc	r25, r9
    2600:	aa 1d       	adc	r26, r10
    2602:	bb 1d       	adc	r27, r11

                if( xReloadTime > xNextExpireTime )
    2604:	88 16       	cp	r8, r24
    2606:	99 06       	cpc	r9, r25
    2608:	aa 06       	cpc	r10, r26
    260a:	bb 06       	cpc	r11, r27
    260c:	70 f4       	brcc	.+28     	; 0x262a <prvSwitchTimerLists+0x7c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    260e:	8a 83       	std	Y+2, r24	; 0x02
    2610:	9b 83       	std	Y+3, r25	; 0x03
    2612:	ac 83       	std	Y+4, r26	; 0x04
    2614:	bd 83       	std	Y+5, r27	; 0x05
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    2616:	db 87       	std	Y+11, r29	; 0x0b
    2618:	ca 87       	std	Y+10, r28	; 0x0a
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    261a:	b8 01       	movw	r22, r16
    261c:	80 91 bd 11 	lds	r24, 0x11BD	; 0x8011bd <pxCurrentTimerList>
    2620:	90 91 be 11 	lds	r25, 0x11BE	; 0x8011be <pxCurrentTimerList+0x1>
    2624:	0e 94 93 04 	call	0x926	; 0x926 <vListInsert>
    2628:	0a c0       	rjmp	.+20     	; 0x263e <prvSwitchTimerLists+0x90>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    262a:	c1 2c       	mov	r12, r1
    262c:	d1 2c       	mov	r13, r1
    262e:	76 01       	movw	r14, r12
    2630:	00 e0       	ldi	r16, 0x00	; 0
    2632:	10 e0       	ldi	r17, 0x00	; 0
    2634:	a5 01       	movw	r20, r10
    2636:	94 01       	movw	r18, r8
    2638:	60 e0       	ldi	r22, 0x00	; 0
    263a:	ce 01       	movw	r24, r28
    263c:	5a df       	rcall	.-332    	; 0x24f2 <xTimerGenericCommand>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    263e:	e0 91 bd 11 	lds	r30, 0x11BD	; 0x8011bd <pxCurrentTimerList>
    2642:	f0 91 be 11 	lds	r31, 0x11BE	; 0x8011be <pxCurrentTimerList+0x1>
    2646:	80 81       	ld	r24, Z
    2648:	81 11       	cpse	r24, r1
    264a:	be cf       	rjmp	.-132    	; 0x25c8 <prvSwitchTimerLists+0x1a>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    264c:	80 91 bb 11 	lds	r24, 0x11BB	; 0x8011bb <pxOverflowTimerList>
    2650:	90 91 bc 11 	lds	r25, 0x11BC	; 0x8011bc <pxOverflowTimerList+0x1>
    2654:	90 93 be 11 	sts	0x11BE, r25	; 0x8011be <pxCurrentTimerList+0x1>
    2658:	80 93 bd 11 	sts	0x11BD, r24	; 0x8011bd <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    265c:	f0 93 bc 11 	sts	0x11BC, r31	; 0x8011bc <pxOverflowTimerList+0x1>
    2660:	e0 93 bb 11 	sts	0x11BB, r30	; 0x8011bb <pxOverflowTimerList>
    }
    2664:	df 91       	pop	r29
    2666:	cf 91       	pop	r28
    2668:	1f 91       	pop	r17
    266a:	0f 91       	pop	r16
    266c:	ff 90       	pop	r15
    266e:	ef 90       	pop	r14
    2670:	df 90       	pop	r13
    2672:	cf 90       	pop	r12
    2674:	bf 90       	pop	r11
    2676:	af 90       	pop	r10
    2678:	9f 90       	pop	r9
    267a:	8f 90       	pop	r8
    267c:	08 95       	ret

0000267e <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    267e:	cf 92       	push	r12
    2680:	df 92       	push	r13
    2682:	ef 92       	push	r14
    2684:	ff 92       	push	r15
    2686:	cf 93       	push	r28
    2688:	df 93       	push	r29
    268a:	ec 01       	movw	r28, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    268c:	ea d8       	rcall	.-3628   	; 0x1862 <xTaskGetTickCount>
    268e:	6b 01       	movw	r12, r22
    2690:	7c 01       	movw	r14, r24

        if( xTimeNow < xLastTime )
    2692:	80 91 b3 11 	lds	r24, 0x11B3	; 0x8011b3 <xLastTime.2448>
    2696:	90 91 b4 11 	lds	r25, 0x11B4	; 0x8011b4 <xLastTime.2448+0x1>
    269a:	a0 91 b5 11 	lds	r26, 0x11B5	; 0x8011b5 <xLastTime.2448+0x2>
    269e:	b0 91 b6 11 	lds	r27, 0x11B6	; 0x8011b6 <xLastTime.2448+0x3>
    26a2:	c8 16       	cp	r12, r24
    26a4:	d9 06       	cpc	r13, r25
    26a6:	ea 06       	cpc	r14, r26
    26a8:	fb 06       	cpc	r15, r27
        {
            prvSwitchTimerLists();
    26aa:	20 f4       	brcc	.+8      	; 0x26b4 <prvSampleTimeNow+0x36>
    26ac:	80 df       	rcall	.-256    	; 0x25ae <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
    26ae:	81 e0       	ldi	r24, 0x01	; 1
    26b0:	88 83       	st	Y, r24
    26b2:	01 c0       	rjmp	.+2      	; 0x26b6 <prvSampleTimeNow+0x38>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    26b4:	18 82       	st	Y, r1
        }

        xLastTime = xTimeNow;
    26b6:	c0 92 b3 11 	sts	0x11B3, r12	; 0x8011b3 <xLastTime.2448>
    26ba:	d0 92 b4 11 	sts	0x11B4, r13	; 0x8011b4 <xLastTime.2448+0x1>
    26be:	e0 92 b5 11 	sts	0x11B5, r14	; 0x8011b5 <xLastTime.2448+0x2>
    26c2:	f0 92 b6 11 	sts	0x11B6, r15	; 0x8011b6 <xLastTime.2448+0x3>

        return xTimeNow;
    }
    26c6:	c7 01       	movw	r24, r14
    26c8:	b6 01       	movw	r22, r12
    26ca:	df 91       	pop	r29
    26cc:	cf 91       	pop	r28
    26ce:	ff 90       	pop	r15
    26d0:	ef 90       	pop	r14
    26d2:	df 90       	pop	r13
    26d4:	cf 90       	pop	r12
    26d6:	08 95       	ret

000026d8 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    26d8:	4f 92       	push	r4
    26da:	5f 92       	push	r5
    26dc:	6f 92       	push	r6
    26de:	7f 92       	push	r7
    26e0:	8f 92       	push	r8
    26e2:	9f 92       	push	r9
    26e4:	af 92       	push	r10
    26e6:	bf 92       	push	r11
    26e8:	cf 92       	push	r12
    26ea:	df 92       	push	r13
    26ec:	ef 92       	push	r14
    26ee:	ff 92       	push	r15
    26f0:	0f 93       	push	r16
    26f2:	1f 93       	push	r17
    26f4:	cf 93       	push	r28
    26f6:	df 93       	push	r29
    26f8:	4b 01       	movw	r8, r22
    26fa:	5c 01       	movw	r10, r24
    26fc:	29 01       	movw	r4, r18
    26fe:	3a 01       	movw	r6, r20
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    2700:	e0 91 bd 11 	lds	r30, 0x11BD	; 0x8011bd <pxCurrentTimerList>
    2704:	f0 91 be 11 	lds	r31, 0x11BE	; 0x8011be <pxCurrentTimerList+0x1>
    2708:	07 80       	ldd	r0, Z+7	; 0x07
    270a:	f0 85       	ldd	r31, Z+8	; 0x08
    270c:	e0 2d       	mov	r30, r0
    270e:	c0 85       	ldd	r28, Z+8	; 0x08
    2710:	d1 85       	ldd	r29, Z+9	; 0x09

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2712:	ce 01       	movw	r24, r28
    2714:	02 96       	adiw	r24, 0x02	; 2
    2716:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    271a:	8e 89       	ldd	r24, Y+22	; 0x16
    271c:	82 ff       	sbrs	r24, 2
    271e:	1b c0       	rjmp	.+54     	; 0x2756 <prvProcessExpiredTimer+0x7e>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    2720:	4e 85       	ldd	r20, Y+14	; 0x0e
    2722:	5f 85       	ldd	r21, Y+15	; 0x0f
    2724:	68 89       	ldd	r22, Y+16	; 0x10
    2726:	79 89       	ldd	r23, Y+17	; 0x11
    2728:	48 0d       	add	r20, r8
    272a:	59 1d       	adc	r21, r9
    272c:	6a 1d       	adc	r22, r10
    272e:	7b 1d       	adc	r23, r11
    2730:	75 01       	movw	r14, r10
    2732:	64 01       	movw	r12, r8
    2734:	93 01       	movw	r18, r6
    2736:	82 01       	movw	r16, r4
    2738:	ce 01       	movw	r24, r28
    273a:	49 de       	rcall	.-878    	; 0x23ce <prvInsertTimerInActiveList>
    273c:	88 23       	and	r24, r24
    273e:	69 f0       	breq	.+26     	; 0x275a <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2740:	c1 2c       	mov	r12, r1
    2742:	d1 2c       	mov	r13, r1
    2744:	76 01       	movw	r14, r12
    2746:	00 e0       	ldi	r16, 0x00	; 0
    2748:	10 e0       	ldi	r17, 0x00	; 0
    274a:	a5 01       	movw	r20, r10
    274c:	94 01       	movw	r18, r8
    274e:	60 e0       	ldi	r22, 0x00	; 0
    2750:	ce 01       	movw	r24, r28
    2752:	cf de       	rcall	.-610    	; 0x24f2 <xTimerGenericCommand>
    2754:	02 c0       	rjmp	.+4      	; 0x275a <prvProcessExpiredTimer+0x82>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    2756:	8e 7f       	andi	r24, 0xFE	; 254
    2758:	8e 8b       	std	Y+22, r24	; 0x16
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    275a:	ec 89       	ldd	r30, Y+20	; 0x14
    275c:	fd 89       	ldd	r31, Y+21	; 0x15
    275e:	ce 01       	movw	r24, r28
    2760:	19 95       	eicall
    }
    2762:	df 91       	pop	r29
    2764:	cf 91       	pop	r28
    2766:	1f 91       	pop	r17
    2768:	0f 91       	pop	r16
    276a:	ff 90       	pop	r15
    276c:	ef 90       	pop	r14
    276e:	df 90       	pop	r13
    2770:	cf 90       	pop	r12
    2772:	bf 90       	pop	r11
    2774:	af 90       	pop	r10
    2776:	9f 90       	pop	r9
    2778:	8f 90       	pop	r8
    277a:	7f 90       	pop	r7
    277c:	6f 90       	pop	r6
    277e:	5f 90       	pop	r5
    2780:	4f 90       	pop	r4
    2782:	08 95       	ret

00002784 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
    2784:	8f 92       	push	r8
    2786:	9f 92       	push	r9
    2788:	af 92       	push	r10
    278a:	bf 92       	push	r11
    278c:	cf 92       	push	r12
    278e:	df 92       	push	r13
    2790:	ef 92       	push	r14
    2792:	ff 92       	push	r15
    2794:	1f 93       	push	r17
    2796:	cf 93       	push	r28
    2798:	df 93       	push	r29
    279a:	1f 92       	push	r1
    279c:	cd b7       	in	r28, 0x3d	; 61
    279e:	de b7       	in	r29, 0x3e	; 62
    27a0:	6b 01       	movw	r12, r22
    27a2:	7c 01       	movw	r14, r24
    27a4:	14 2f       	mov	r17, r20
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    27a6:	57 d8       	rcall	.-3922   	; 0x1856 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    27a8:	ce 01       	movw	r24, r28
    27aa:	01 96       	adiw	r24, 0x01	; 1
    27ac:	68 df       	rcall	.-304    	; 0x267e <prvSampleTimeNow>
    27ae:	4b 01       	movw	r8, r22
    27b0:	5c 01       	movw	r10, r24

            if( xTimerListsWereSwitched == pdFALSE )
    27b2:	89 81       	ldd	r24, Y+1	; 0x01
    27b4:	81 11       	cpse	r24, r1
    27b6:	2b c0       	rjmp	.+86     	; 0x280e <prvProcessTimerOrBlockTask+0x8a>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    27b8:	11 11       	cpse	r17, r1
    27ba:	0c c0       	rjmp	.+24     	; 0x27d4 <prvProcessTimerOrBlockTask+0x50>
    27bc:	8c 14       	cp	r8, r12
    27be:	9d 04       	cpc	r9, r13
    27c0:	ae 04       	cpc	r10, r14
    27c2:	bf 04       	cpc	r11, r15
                {
                    ( void ) xTaskResumeAll();
    27c4:	38 f0       	brcs	.+14     	; 0x27d4 <prvProcessTimerOrBlockTask+0x50>
    27c6:	87 d9       	rcall	.-3314   	; 0x1ad6 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    27c8:	a5 01       	movw	r20, r10
    27ca:	94 01       	movw	r18, r8
    27cc:	c7 01       	movw	r24, r14
    27ce:	b6 01       	movw	r22, r12
    27d0:	83 df       	rcall	.-250    	; 0x26d8 <prvProcessExpiredTimer>
    27d2:	1e c0       	rjmp	.+60     	; 0x2810 <prvProcessTimerOrBlockTask+0x8c>
                     * time has not been reached yet.  This task should therefore
                     * block to wait for the next expire time or a command to be
                     * received - whichever comes first.  The following line cannot
                     * be reached unless xNextExpireTime > xTimeNow, except in the
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
    27d4:	11 23       	and	r17, r17
    27d6:	41 f0       	breq	.+16     	; 0x27e8 <prvProcessTimerOrBlockTask+0x64>
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    27d8:	e0 91 bb 11 	lds	r30, 0x11BB	; 0x8011bb <pxOverflowTimerList>
    27dc:	f0 91 bc 11 	lds	r31, 0x11BC	; 0x8011bc <pxOverflowTimerList+0x1>
    27e0:	80 81       	ld	r24, Z
    27e2:	11 e0       	ldi	r17, 0x01	; 1
    27e4:	81 11       	cpse	r24, r1
    27e6:	10 e0       	ldi	r17, 0x00	; 0
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    27e8:	b7 01       	movw	r22, r14
    27ea:	a6 01       	movw	r20, r12
    27ec:	48 19       	sub	r20, r8
    27ee:	59 09       	sbc	r21, r9
    27f0:	6a 09       	sbc	r22, r10
    27f2:	7b 09       	sbc	r23, r11
    27f4:	21 2f       	mov	r18, r17
    27f6:	80 91 b9 11 	lds	r24, 0x11B9	; 0x8011b9 <xTimerQueue>
    27fa:	90 91 ba 11 	lds	r25, 0x11BA	; 0x8011ba <xTimerQueue+0x1>
    27fe:	0e 94 7e 09 	call	0x12fc	; 0x12fc <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
    2802:	69 d9       	rcall	.-3374   	; 0x1ad6 <xTaskResumeAll>
    2804:	81 11       	cpse	r24, r1
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
    2806:	04 c0       	rjmp	.+8      	; 0x2810 <prvProcessTimerOrBlockTask+0x8c>
    2808:	0e 94 4c 05 	call	0xa98	; 0xa98 <vPortYield>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    280c:	01 c0       	rjmp	.+2      	; 0x2810 <prvProcessTimerOrBlockTask+0x8c>
    280e:	63 d9       	rcall	.-3386   	; 0x1ad6 <xTaskResumeAll>
            }
        }
    }
    2810:	0f 90       	pop	r0
    2812:	df 91       	pop	r29
    2814:	cf 91       	pop	r28
    2816:	1f 91       	pop	r17
    2818:	ff 90       	pop	r15
    281a:	ef 90       	pop	r14
    281c:	df 90       	pop	r13
    281e:	cf 90       	pop	r12
    2820:	bf 90       	pop	r11
    2822:	af 90       	pop	r10
    2824:	9f 90       	pop	r9
    2826:	8f 90       	pop	r8
    2828:	08 95       	ret

0000282a <prvProcessReceivedCommands>:
        return xProcessTimerNow;
    }
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
    282a:	af 92       	push	r10
    282c:	bf 92       	push	r11
    282e:	cf 92       	push	r12
    2830:	df 92       	push	r13
    2832:	ef 92       	push	r14
    2834:	ff 92       	push	r15
    2836:	0f 93       	push	r16
    2838:	1f 93       	push	r17
    283a:	cf 93       	push	r28
    283c:	df 93       	push	r29
    283e:	cd b7       	in	r28, 0x3d	; 61
    2840:	de b7       	in	r29, 0x3e	; 62
    2842:	28 97       	sbiw	r28, 0x08	; 8
    2844:	0f b6       	in	r0, 0x3f	; 63
    2846:	f8 94       	cli
    2848:	de bf       	out	0x3e, r29	; 62
    284a:	0f be       	out	0x3f, r0	; 63
    284c:	cd bf       	out	0x3d, r28	; 61
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    284e:	81 c0       	rjmp	.+258    	; 0x2952 <prvProcessReceivedCommands+0x128>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    2850:	89 81       	ldd	r24, Y+1	; 0x01
    2852:	88 23       	and	r24, r24
    2854:	0c f4       	brge	.+2      	; 0x2858 <prvProcessReceivedCommands+0x2e>
    2856:	7d c0       	rjmp	.+250    	; 0x2952 <prvProcessReceivedCommands+0x128>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    2858:	ae 80       	ldd	r10, Y+6	; 0x06
    285a:	bf 80       	ldd	r11, Y+7	; 0x07

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    285c:	d5 01       	movw	r26, r10
    285e:	1c 96       	adiw	r26, 0x0c	; 12
    2860:	8d 91       	ld	r24, X+
    2862:	9c 91       	ld	r25, X
    2864:	1d 97       	sbiw	r26, 0x0d	; 13
    2866:	89 2b       	or	r24, r25
    2868:	21 f0       	breq	.+8      	; 0x2872 <prvProcessReceivedCommands+0x48>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    286a:	c5 01       	movw	r24, r10
    286c:	02 96       	adiw	r24, 0x02	; 2
    286e:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    2872:	ce 01       	movw	r24, r28
    2874:	08 96       	adiw	r24, 0x08	; 8
    2876:	03 df       	rcall	.-506    	; 0x267e <prvSampleTimeNow>
    2878:	8b 01       	movw	r16, r22
    287a:	9c 01       	movw	r18, r24

                switch( xMessage.xMessageID )
    287c:	e9 81       	ldd	r30, Y+1	; 0x01
    287e:	0e 2e       	mov	r0, r30
    2880:	00 0c       	add	r0, r0
    2882:	ff 0b       	sbc	r31, r31
    2884:	ea 30       	cpi	r30, 0x0A	; 10
    2886:	f1 05       	cpc	r31, r1
    2888:	08 f0       	brcs	.+2      	; 0x288c <prvProcessReceivedCommands+0x62>
    288a:	63 c0       	rjmp	.+198    	; 0x2952 <prvProcessReceivedCommands+0x128>
    288c:	88 27       	eor	r24, r24
    288e:	ee 58       	subi	r30, 0x8E	; 142
    2890:	ff 4f       	sbci	r31, 0xFF	; 255
    2892:	8f 4f       	sbci	r24, 0xFF	; 255
    2894:	d6 c7       	rjmp	.+4012   	; 0x3842 <__tablejump2__>
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    2896:	f5 01       	movw	r30, r10
    2898:	86 89       	ldd	r24, Z+22	; 0x16
    289a:	81 60       	ori	r24, 0x01	; 1
    289c:	86 8b       	std	Z+22, r24	; 0x16

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    289e:	ca 80       	ldd	r12, Y+2	; 0x02
    28a0:	db 80       	ldd	r13, Y+3	; 0x03
    28a2:	ec 80       	ldd	r14, Y+4	; 0x04
    28a4:	fd 80       	ldd	r15, Y+5	; 0x05
    28a6:	46 85       	ldd	r20, Z+14	; 0x0e
    28a8:	57 85       	ldd	r21, Z+15	; 0x0f
    28aa:	60 89       	ldd	r22, Z+16	; 0x10
    28ac:	71 89       	ldd	r23, Z+17	; 0x11
    28ae:	4c 0d       	add	r20, r12
    28b0:	5d 1d       	adc	r21, r13
    28b2:	6e 1d       	adc	r22, r14
    28b4:	7f 1d       	adc	r23, r15
    28b6:	c5 01       	movw	r24, r10
    28b8:	8a dd       	rcall	.-1260   	; 0x23ce <prvInsertTimerInActiveList>
    28ba:	88 23       	and	r24, r24
    28bc:	09 f4       	brne	.+2      	; 0x28c0 <prvProcessReceivedCommands+0x96>
    28be:	49 c0       	rjmp	.+146    	; 0x2952 <prvProcessReceivedCommands+0x128>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    28c0:	d5 01       	movw	r26, r10
    28c2:	54 96       	adiw	r26, 0x14	; 20
    28c4:	ed 91       	ld	r30, X+
    28c6:	fc 91       	ld	r31, X
    28c8:	55 97       	sbiw	r26, 0x15	; 21
    28ca:	c5 01       	movw	r24, r10
    28cc:	19 95       	eicall
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    28ce:	f5 01       	movw	r30, r10
    28d0:	86 89       	ldd	r24, Z+22	; 0x16
    28d2:	82 ff       	sbrs	r24, 2
    28d4:	3e c0       	rjmp	.+124    	; 0x2952 <prvProcessReceivedCommands+0x128>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    28d6:	4a 81       	ldd	r20, Y+2	; 0x02
    28d8:	5b 81       	ldd	r21, Y+3	; 0x03
    28da:	6c 81       	ldd	r22, Y+4	; 0x04
    28dc:	7d 81       	ldd	r23, Y+5	; 0x05
    28de:	86 85       	ldd	r24, Z+14	; 0x0e
    28e0:	97 85       	ldd	r25, Z+15	; 0x0f
    28e2:	a0 89       	ldd	r26, Z+16	; 0x10
    28e4:	b1 89       	ldd	r27, Z+17	; 0x11
    28e6:	9a 01       	movw	r18, r20
    28e8:	ab 01       	movw	r20, r22
    28ea:	28 0f       	add	r18, r24
    28ec:	39 1f       	adc	r19, r25
    28ee:	4a 1f       	adc	r20, r26
    28f0:	5b 1f       	adc	r21, r27
    28f2:	c1 2c       	mov	r12, r1
    28f4:	d1 2c       	mov	r13, r1
    28f6:	76 01       	movw	r14, r12
    28f8:	00 e0       	ldi	r16, 0x00	; 0
    28fa:	10 e0       	ldi	r17, 0x00	; 0
    28fc:	60 e0       	ldi	r22, 0x00	; 0
    28fe:	c5 01       	movw	r24, r10
    2900:	f8 dd       	rcall	.-1040   	; 0x24f2 <xTimerGenericCommand>
    2902:	27 c0       	rjmp	.+78     	; 0x2952 <prvProcessReceivedCommands+0x128>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    2904:	d5 01       	movw	r26, r10
    2906:	56 96       	adiw	r26, 0x16	; 22
    2908:	8c 91       	ld	r24, X
    290a:	56 97       	sbiw	r26, 0x16	; 22
    290c:	8e 7f       	andi	r24, 0xFE	; 254
    290e:	56 96       	adiw	r26, 0x16	; 22
    2910:	8c 93       	st	X, r24
                        break;
    2912:	1f c0       	rjmp	.+62     	; 0x2952 <prvProcessReceivedCommands+0x128>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    2914:	f5 01       	movw	r30, r10
    2916:	86 89       	ldd	r24, Z+22	; 0x16
    2918:	81 60       	ori	r24, 0x01	; 1
    291a:	86 8b       	std	Z+22, r24	; 0x16
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    291c:	4a 81       	ldd	r20, Y+2	; 0x02
    291e:	5b 81       	ldd	r21, Y+3	; 0x03
    2920:	6c 81       	ldd	r22, Y+4	; 0x04
    2922:	7d 81       	ldd	r23, Y+5	; 0x05
    2924:	46 87       	std	Z+14, r20	; 0x0e
    2926:	57 87       	std	Z+15, r21	; 0x0f
    2928:	60 8b       	std	Z+16, r22	; 0x10
    292a:	71 8b       	std	Z+17, r23	; 0x11
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    292c:	40 0f       	add	r20, r16
    292e:	51 1f       	adc	r21, r17
    2930:	62 1f       	adc	r22, r18
    2932:	73 1f       	adc	r23, r19
    2934:	68 01       	movw	r12, r16
    2936:	79 01       	movw	r14, r18
    2938:	c5 01       	movw	r24, r10
    293a:	49 dd       	rcall	.-1390   	; 0x23ce <prvInsertTimerInActiveList>
                        break;
    293c:	0a c0       	rjmp	.+20     	; 0x2952 <prvProcessReceivedCommands+0x128>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    293e:	f5 01       	movw	r30, r10
    2940:	86 89       	ldd	r24, Z+22	; 0x16
    2942:	81 fd       	sbrc	r24, 1
    2944:	04 c0       	rjmp	.+8      	; 0x294e <prvProcessReceivedCommands+0x124>
                                {
                                    vPortFree( pxTimer );
    2946:	c5 01       	movw	r24, r10
    2948:	0e 94 42 04 	call	0x884	; 0x884 <vPortFree>
    294c:	02 c0       	rjmp	.+4      	; 0x2952 <prvProcessReceivedCommands+0x128>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    294e:	8e 7f       	andi	r24, 0xFE	; 254
    2950:	86 8b       	std	Z+22, r24	; 0x16
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    2952:	20 e0       	ldi	r18, 0x00	; 0
    2954:	30 e0       	ldi	r19, 0x00	; 0
    2956:	a9 01       	movw	r20, r18
    2958:	be 01       	movw	r22, r28
    295a:	6f 5f       	subi	r22, 0xFF	; 255
    295c:	7f 4f       	sbci	r23, 0xFF	; 255
    295e:	80 91 b9 11 	lds	r24, 0x11B9	; 0x8011b9 <xTimerQueue>
    2962:	90 91 ba 11 	lds	r25, 0x11BA	; 0x8011ba <xTimerQueue+0x1>
    2966:	0e 94 48 08 	call	0x1090	; 0x1090 <xQueueReceive>
    296a:	81 11       	cpse	r24, r1
    296c:	71 cf       	rjmp	.-286    	; 0x2850 <prvProcessReceivedCommands+0x26>
                        /* Don't expect to get here. */
                        break;
                }
            }
        }
    }
    296e:	28 96       	adiw	r28, 0x08	; 8
    2970:	0f b6       	in	r0, 0x3f	; 63
    2972:	f8 94       	cli
    2974:	de bf       	out	0x3e, r29	; 62
    2976:	0f be       	out	0x3f, r0	; 63
    2978:	cd bf       	out	0x3d, r28	; 61
    297a:	df 91       	pop	r29
    297c:	cf 91       	pop	r28
    297e:	1f 91       	pop	r17
    2980:	0f 91       	pop	r16
    2982:	ff 90       	pop	r15
    2984:	ef 90       	pop	r14
    2986:	df 90       	pop	r13
    2988:	cf 90       	pop	r12
    298a:	bf 90       	pop	r11
    298c:	af 90       	pop	r10
    298e:	08 95       	ret

00002990 <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    2990:	08 95       	ret

00002992 <prvSetMainLedOn>:
 * Private function to enable board led to use it in application hooks
 */
void prvSetMainLedOn( void ) 
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    2992:	84 b1       	in	r24, 0x04	; 4
    2994:	80 68       	ori	r24, 0x80	; 128
    2996:	84 b9       	out	0x04, r24	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    2998:	85 b1       	in	r24, 0x05	; 5
    299a:	80 68       	ori	r24, 0x80	; 128
    299c:	85 b9       	out	0x05, r24	; 5
    299e:	08 95       	ret

000029a0 <prvBlinkMainLed>:
 */
void prvBlinkMainLed( void ) 
{

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    29a0:	83 b1       	in	r24, 0x03	; 3
    29a2:	80 68       	ori	r24, 0x80	; 128
    29a4:	83 b9       	out	0x03, r24	; 3
    29a6:	08 95       	ret

000029a8 <vApplicationMallocFailedHook>:
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    prvSetMainLedOn(); // Main LED on.
    29a8:	f4 df       	rcall	.-24     	; 0x2992 <prvSetMainLedOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    29aa:	2f ef       	ldi	r18, 0xFF	; 255
    29ac:	80 e7       	ldi	r24, 0x70	; 112
    29ae:	92 e0       	ldi	r25, 0x02	; 2
    29b0:	21 50       	subi	r18, 0x01	; 1
    29b2:	80 40       	sbci	r24, 0x00	; 0
    29b4:	90 40       	sbci	r25, 0x00	; 0
    29b6:	e1 f7       	brne	.-8      	; 0x29b0 <vApplicationMallocFailedHook+0x8>
    29b8:	00 c0       	rjmp	.+0      	; 0x29ba <vApplicationMallocFailedHook+0x12>
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    29ba:	00 00       	nop
    29bc:	f1 df       	rcall	.-30     	; 0x29a0 <prvBlinkMainLed>
    29be:	f5 cf       	rjmp	.-22     	; 0x29aa <vApplicationMallocFailedHook+0x2>

000029c0 <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)),
                                    char * pcTaskName __attribute__((unused)) )
{

    prvSetMainLedOn(); // Main LED on.
    29c0:	e8 df       	rcall	.-48     	; 0x2992 <prvSetMainLedOn>
    29c2:	2f ef       	ldi	r18, 0xFF	; 255
    29c4:	87 ea       	ldi	r24, 0xA7	; 167
    29c6:	91 e6       	ldi	r25, 0x61	; 97
    29c8:	21 50       	subi	r18, 0x01	; 1
    29ca:	80 40       	sbci	r24, 0x00	; 0
    29cc:	90 40       	sbci	r25, 0x00	; 0
    29ce:	e1 f7       	brne	.-8      	; 0x29c8 <vApplicationStackOverflowHook+0x8>
    29d0:	00 c0       	rjmp	.+0      	; 0x29d2 <vApplicationStackOverflowHook+0x12>

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    29d2:	00 00       	nop
    29d4:	e5 df       	rcall	.-54     	; 0x29a0 <prvBlinkMainLed>
    29d6:	f5 cf       	rjmp	.-22     	; 0x29c2 <vApplicationStackOverflowHook+0x2>

000029d8 <initializeSystem>:
	return 0;
}

void initializeSystem(void)
{
	trace_init();
    29d8:	0e 94 fd 02 	call	0x5fa	; 0x5fa <trace_init>
	stdio_initialise(ser_USART0);
    29dc:	80 e0       	ldi	r24, 0x00	; 0
    29de:	9f d0       	rcall	.+318    	; 0x2b1e <stdio_initialise>
	status_leds_initialise(5);
    29e0:	85 e0       	ldi	r24, 0x05	; 5
    29e2:	90 e0       	ldi	r25, 0x00	; 0
    29e4:	a3 d1       	rcall	.+838    	; 0x2d2c <status_leds_initialise>
	DDRC |= (1 << P_LIGHT_PIN_Front);
    29e6:	87 b1       	in	r24, 0x07	; 7
    29e8:	81 60       	ori	r24, 0x01	; 1
    29ea:	87 b9       	out	0x07, r24	; 7
	PORTC &= ~(1 << P_LIGHT_PIN_Front);
    29ec:	88 b1       	in	r24, 0x08	; 8
    29ee:	8e 7f       	andi	r24, 0xFE	; 254
    29f0:	88 b9       	out	0x08, r24	; 8
	DDRC |= (1 << P_LIGHT_PIN_Back);
    29f2:	87 b1       	in	r24, 0x07	; 7
    29f4:	80 64       	ori	r24, 0x40	; 64
    29f6:	87 b9       	out	0x07, r24	; 7
	PORTC &= ~(1 << P_LIGHT_PIN_Back);
    29f8:	88 b1       	in	r24, 0x08	; 8
    29fa:	8f 7b       	andi	r24, 0xBF	; 191
    29fc:	88 b9       	out	0x08, r24	; 8
	hc_sr04_init();
    29fe:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <hc_sr04_init>

	printf("System Initialization Complete\n");
    2a02:	8a e0       	ldi	r24, 0x0A	; 10
    2a04:	93 e0       	ldi	r25, 0x03	; 3
    2a06:	0c 94 e9 1d 	jmp	0x3bd2	; 0x3bd2 <puts>
    2a0a:	08 95       	ret

00002a0c <main>:
void initializeSystem(void);
#include "application.h"

int main(void)
{
	initializeSystem();  // Initialize system configurations
    2a0c:	e5 df       	rcall	.-54     	; 0x29d8 <initializeSystem>

	create_all_application_tasks();  // Create all tasks from application.c
    2a0e:	0e 94 b7 00 	call	0x16e	; 0x16e <create_all_application_tasks>
	vTaskStartScheduler();  // Start the scheduler
    2a12:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <vTaskStartScheduler>
    2a16:	ff cf       	rjmp	.-2      	; 0x2a16 <main+0xa>

00002a18 <__floatunsisf>:
    2a18:	e8 94       	clt
    2a1a:	09 c0       	rjmp	.+18     	; 0x2a2e <__floatsisf+0x12>

00002a1c <__floatsisf>:
    2a1c:	97 fb       	bst	r25, 7
    2a1e:	3e f4       	brtc	.+14     	; 0x2a2e <__floatsisf+0x12>
    2a20:	90 95       	com	r25
    2a22:	80 95       	com	r24
    2a24:	70 95       	com	r23
    2a26:	61 95       	neg	r22
    2a28:	7f 4f       	sbci	r23, 0xFF	; 255
    2a2a:	8f 4f       	sbci	r24, 0xFF	; 255
    2a2c:	9f 4f       	sbci	r25, 0xFF	; 255
    2a2e:	99 23       	and	r25, r25
    2a30:	a9 f0       	breq	.+42     	; 0x2a5c <__floatsisf+0x40>
    2a32:	f9 2f       	mov	r31, r25
    2a34:	96 e9       	ldi	r25, 0x96	; 150
    2a36:	bb 27       	eor	r27, r27
    2a38:	93 95       	inc	r25
    2a3a:	f6 95       	lsr	r31
    2a3c:	87 95       	ror	r24
    2a3e:	77 95       	ror	r23
    2a40:	67 95       	ror	r22
    2a42:	b7 95       	ror	r27
    2a44:	f1 11       	cpse	r31, r1
    2a46:	f8 cf       	rjmp	.-16     	; 0x2a38 <__floatsisf+0x1c>
    2a48:	fa f4       	brpl	.+62     	; 0x2a88 <__floatsisf+0x6c>
    2a4a:	bb 0f       	add	r27, r27
    2a4c:	11 f4       	brne	.+4      	; 0x2a52 <__floatsisf+0x36>
    2a4e:	60 ff       	sbrs	r22, 0
    2a50:	1b c0       	rjmp	.+54     	; 0x2a88 <__floatsisf+0x6c>
    2a52:	6f 5f       	subi	r22, 0xFF	; 255
    2a54:	7f 4f       	sbci	r23, 0xFF	; 255
    2a56:	8f 4f       	sbci	r24, 0xFF	; 255
    2a58:	9f 4f       	sbci	r25, 0xFF	; 255
    2a5a:	16 c0       	rjmp	.+44     	; 0x2a88 <__floatsisf+0x6c>
    2a5c:	88 23       	and	r24, r24
    2a5e:	11 f0       	breq	.+4      	; 0x2a64 <__floatsisf+0x48>
    2a60:	96 e9       	ldi	r25, 0x96	; 150
    2a62:	11 c0       	rjmp	.+34     	; 0x2a86 <__floatsisf+0x6a>
    2a64:	77 23       	and	r23, r23
    2a66:	21 f0       	breq	.+8      	; 0x2a70 <__floatsisf+0x54>
    2a68:	9e e8       	ldi	r25, 0x8E	; 142
    2a6a:	87 2f       	mov	r24, r23
    2a6c:	76 2f       	mov	r23, r22
    2a6e:	05 c0       	rjmp	.+10     	; 0x2a7a <__floatsisf+0x5e>
    2a70:	66 23       	and	r22, r22
    2a72:	71 f0       	breq	.+28     	; 0x2a90 <__floatsisf+0x74>
    2a74:	96 e8       	ldi	r25, 0x86	; 134
    2a76:	86 2f       	mov	r24, r22
    2a78:	70 e0       	ldi	r23, 0x00	; 0
    2a7a:	60 e0       	ldi	r22, 0x00	; 0
    2a7c:	2a f0       	brmi	.+10     	; 0x2a88 <__floatsisf+0x6c>
    2a7e:	9a 95       	dec	r25
    2a80:	66 0f       	add	r22, r22
    2a82:	77 1f       	adc	r23, r23
    2a84:	88 1f       	adc	r24, r24
    2a86:	da f7       	brpl	.-10     	; 0x2a7e <__floatsisf+0x62>
    2a88:	88 0f       	add	r24, r24
    2a8a:	96 95       	lsr	r25
    2a8c:	87 95       	ror	r24
    2a8e:	97 f9       	bld	r25, 7
    2a90:	08 95       	ret

00002a92 <__gesf2>:
    2a92:	03 d0       	rcall	.+6      	; 0x2a9a <__fp_cmp>
    2a94:	08 f4       	brcc	.+2      	; 0x2a98 <__gesf2+0x6>
    2a96:	8f ef       	ldi	r24, 0xFF	; 255
    2a98:	08 95       	ret

00002a9a <__fp_cmp>:
    2a9a:	99 0f       	add	r25, r25
    2a9c:	00 08       	sbc	r0, r0
    2a9e:	55 0f       	add	r21, r21
    2aa0:	aa 0b       	sbc	r26, r26
    2aa2:	e0 e8       	ldi	r30, 0x80	; 128
    2aa4:	fe ef       	ldi	r31, 0xFE	; 254
    2aa6:	16 16       	cp	r1, r22
    2aa8:	17 06       	cpc	r1, r23
    2aaa:	e8 07       	cpc	r30, r24
    2aac:	f9 07       	cpc	r31, r25
    2aae:	c0 f0       	brcs	.+48     	; 0x2ae0 <__fp_cmp+0x46>
    2ab0:	12 16       	cp	r1, r18
    2ab2:	13 06       	cpc	r1, r19
    2ab4:	e4 07       	cpc	r30, r20
    2ab6:	f5 07       	cpc	r31, r21
    2ab8:	98 f0       	brcs	.+38     	; 0x2ae0 <__fp_cmp+0x46>
    2aba:	62 1b       	sub	r22, r18
    2abc:	73 0b       	sbc	r23, r19
    2abe:	84 0b       	sbc	r24, r20
    2ac0:	95 0b       	sbc	r25, r21
    2ac2:	39 f4       	brne	.+14     	; 0x2ad2 <__fp_cmp+0x38>
    2ac4:	0a 26       	eor	r0, r26
    2ac6:	61 f0       	breq	.+24     	; 0x2ae0 <__fp_cmp+0x46>
    2ac8:	23 2b       	or	r18, r19
    2aca:	24 2b       	or	r18, r20
    2acc:	25 2b       	or	r18, r21
    2ace:	21 f4       	brne	.+8      	; 0x2ad8 <__fp_cmp+0x3e>
    2ad0:	08 95       	ret
    2ad2:	0a 26       	eor	r0, r26
    2ad4:	09 f4       	brne	.+2      	; 0x2ad8 <__fp_cmp+0x3e>
    2ad6:	a1 40       	sbci	r26, 0x01	; 1
    2ad8:	a6 95       	lsr	r26
    2ada:	8f ef       	ldi	r24, 0xFF	; 255
    2adc:	81 1d       	adc	r24, r1
    2ade:	81 1d       	adc	r24, r1
    2ae0:	08 95       	ret

00002ae2 <usart_getchar>:
    2ae2:	cf 93       	push	r28
    2ae4:	df 93       	push	r29
    2ae6:	1f 92       	push	r1
    2ae8:	cd b7       	in	r28, 0x3d	; 61
    2aea:	de b7       	in	r29, 0x3e	; 62
    2aec:	be 01       	movw	r22, r28
    2aee:	6f 5f       	subi	r22, 0xFF	; 255
    2af0:	7f 4f       	sbci	r23, 0xFF	; 255
    2af2:	80 91 d5 11 	lds	r24, 0x11D5	; 0x8011d5 <_com_serial_instance>
    2af6:	90 91 d6 11 	lds	r25, 0x11D6	; 0x8011d6 <_com_serial_instance+0x1>
    2afa:	2d d2       	rcall	.+1114   	; 0x2f56 <serial_getByte>
    2afc:	81 11       	cpse	r24, r1
    2afe:	f6 cf       	rjmp	.-20     	; 0x2aec <usart_getchar+0xa>
    2b00:	89 81       	ldd	r24, Y+1	; 0x01
    2b02:	90 e0       	ldi	r25, 0x00	; 0
    2b04:	0f 90       	pop	r0
    2b06:	df 91       	pop	r29
    2b08:	cf 91       	pop	r28
    2b0a:	08 95       	ret

00002b0c <usart_putchar>:
    2b0c:	68 2f       	mov	r22, r24
    2b0e:	80 91 d5 11 	lds	r24, 0x11D5	; 0x8011d5 <_com_serial_instance>
    2b12:	90 91 d6 11 	lds	r25, 0x11D6	; 0x8011d6 <_com_serial_instance+0x1>
    2b16:	f4 d1       	rcall	.+1000   	; 0x2f00 <serial_sendByte>
    2b18:	80 e0       	ldi	r24, 0x00	; 0
    2b1a:	90 e0       	ldi	r25, 0x00	; 0
    2b1c:	08 95       	ret

00002b1e <stdio_initialise>:
    2b1e:	8f 92       	push	r8
    2b20:	9f 92       	push	r9
    2b22:	af 92       	push	r10
    2b24:	cf 92       	push	r12
    2b26:	ef 92       	push	r14
    2b28:	0f 93       	push	r16
    2b2a:	81 2c       	mov	r8, r1
    2b2c:	91 2c       	mov	r9, r1
    2b2e:	68 94       	set
    2b30:	aa 24       	eor	r10, r10
    2b32:	a7 f8       	bld	r10, 7
    2b34:	68 94       	set
    2b36:	cc 24       	eor	r12, r12
    2b38:	c7 f8       	bld	r12, 7
    2b3a:	e1 2c       	mov	r14, r1
    2b3c:	00 e0       	ldi	r16, 0x00	; 0
    2b3e:	23 e0       	ldi	r18, 0x03	; 3
    2b40:	40 e0       	ldi	r20, 0x00	; 0
    2b42:	51 ee       	ldi	r21, 0xE1	; 225
    2b44:	60 e0       	ldi	r22, 0x00	; 0
    2b46:	70 e0       	ldi	r23, 0x00	; 0
    2b48:	3f d1       	rcall	.+638    	; 0x2dc8 <serial_create>
    2b4a:	90 93 d6 11 	sts	0x11D6, r25	; 0x8011d6 <_com_serial_instance+0x1>
    2b4e:	80 93 d5 11 	sts	0x11D5, r24	; 0x8011d5 <_com_serial_instance>
    2b52:	e1 e0       	ldi	r30, 0x01	; 1
    2b54:	f2 e1       	ldi	r31, 0x12	; 18
    2b56:	8b e0       	ldi	r24, 0x0B	; 11
    2b58:	92 e0       	ldi	r25, 0x02	; 2
    2b5a:	91 83       	std	Z+1, r25	; 0x01
    2b5c:	80 83       	st	Z, r24
    2b5e:	93 83       	std	Z+3, r25	; 0x03
    2b60:	82 83       	std	Z+2, r24	; 0x02
    2b62:	0f 91       	pop	r16
    2b64:	ef 90       	pop	r14
    2b66:	cf 90       	pop	r12
    2b68:	af 90       	pop	r10
    2b6a:	9f 90       	pop	r9
    2b6c:	8f 90       	pop	r8
    2b6e:	08 95       	ret

00002b70 <_turn_off>:
    2b70:	90 e0       	ldi	r25, 0x00	; 0
    2b72:	fc 01       	movw	r30, r24
    2b74:	ee 0f       	add	r30, r30
    2b76:	ff 1f       	adc	r31, r31
    2b78:	e8 0f       	add	r30, r24
    2b7a:	f9 1f       	adc	r31, r25
    2b7c:	ee 0f       	add	r30, r30
    2b7e:	ff 1f       	adc	r31, r31
    2b80:	e9 52       	subi	r30, 0x29	; 41
    2b82:	fe 4e       	sbci	r31, 0xEE	; 238
    2b84:	23 81       	ldd	r18, Z+3	; 0x03
    2b86:	21 11       	cpse	r18, r1
    2b88:	1f c0       	rjmp	.+62     	; 0x2bc8 <_turn_off+0x58>
    2b8a:	9c 01       	movw	r18, r24
    2b8c:	22 0f       	add	r18, r18
    2b8e:	33 1f       	adc	r19, r19
    2b90:	f9 01       	movw	r30, r18
    2b92:	e8 0f       	add	r30, r24
    2b94:	f9 1f       	adc	r31, r25
    2b96:	ee 0f       	add	r30, r30
    2b98:	ff 1f       	adc	r31, r31
    2b9a:	e9 52       	subi	r30, 0x29	; 41
    2b9c:	fe 4e       	sbci	r31, 0xEE	; 238
    2b9e:	a0 81       	ld	r26, Z
    2ba0:	b1 81       	ldd	r27, Z+1	; 0x01
    2ba2:	4c 91       	ld	r20, X
    2ba4:	f9 01       	movw	r30, r18
    2ba6:	e8 0f       	add	r30, r24
    2ba8:	f9 1f       	adc	r31, r25
    2baa:	ee 0f       	add	r30, r30
    2bac:	ff 1f       	adc	r31, r31
    2bae:	e9 52       	subi	r30, 0x29	; 41
    2bb0:	fe 4e       	sbci	r31, 0xEE	; 238
    2bb2:	81 e0       	ldi	r24, 0x01	; 1
    2bb4:	90 e0       	ldi	r25, 0x00	; 0
    2bb6:	02 80       	ldd	r0, Z+2	; 0x02
    2bb8:	02 c0       	rjmp	.+4      	; 0x2bbe <_turn_off+0x4e>
    2bba:	88 0f       	add	r24, r24
    2bbc:	99 1f       	adc	r25, r25
    2bbe:	0a 94       	dec	r0
    2bc0:	e2 f7       	brpl	.-8      	; 0x2bba <_turn_off+0x4a>
    2bc2:	84 2b       	or	r24, r20
    2bc4:	8c 93       	st	X, r24
    2bc6:	08 95       	ret
    2bc8:	fc 01       	movw	r30, r24
    2bca:	ee 0f       	add	r30, r30
    2bcc:	ff 1f       	adc	r31, r31
    2bce:	df 01       	movw	r26, r30
    2bd0:	a8 0f       	add	r26, r24
    2bd2:	b9 1f       	adc	r27, r25
    2bd4:	aa 0f       	add	r26, r26
    2bd6:	bb 1f       	adc	r27, r27
    2bd8:	a9 52       	subi	r26, 0x29	; 41
    2bda:	be 4e       	sbci	r27, 0xEE	; 238
    2bdc:	0d 90       	ld	r0, X+
    2bde:	bc 91       	ld	r27, X
    2be0:	a0 2d       	mov	r26, r0
    2be2:	2c 91       	ld	r18, X
    2be4:	e8 0f       	add	r30, r24
    2be6:	f9 1f       	adc	r31, r25
    2be8:	ee 0f       	add	r30, r30
    2bea:	ff 1f       	adc	r31, r31
    2bec:	e9 52       	subi	r30, 0x29	; 41
    2bee:	fe 4e       	sbci	r31, 0xEE	; 238
    2bf0:	81 e0       	ldi	r24, 0x01	; 1
    2bf2:	90 e0       	ldi	r25, 0x00	; 0
    2bf4:	02 80       	ldd	r0, Z+2	; 0x02
    2bf6:	02 c0       	rjmp	.+4      	; 0x2bfc <_turn_off+0x8c>
    2bf8:	88 0f       	add	r24, r24
    2bfa:	99 1f       	adc	r25, r25
    2bfc:	0a 94       	dec	r0
    2bfe:	e2 f7       	brpl	.-8      	; 0x2bf8 <_turn_off+0x88>
    2c00:	80 95       	com	r24
    2c02:	82 23       	and	r24, r18
    2c04:	8c 93       	st	X, r24
    2c06:	08 95       	ret

00002c08 <_turn_on>:
    2c08:	90 e0       	ldi	r25, 0x00	; 0
    2c0a:	fc 01       	movw	r30, r24
    2c0c:	ee 0f       	add	r30, r30
    2c0e:	ff 1f       	adc	r31, r31
    2c10:	e8 0f       	add	r30, r24
    2c12:	f9 1f       	adc	r31, r25
    2c14:	ee 0f       	add	r30, r30
    2c16:	ff 1f       	adc	r31, r31
    2c18:	e9 52       	subi	r30, 0x29	; 41
    2c1a:	fe 4e       	sbci	r31, 0xEE	; 238
    2c1c:	23 81       	ldd	r18, Z+3	; 0x03
    2c1e:	21 11       	cpse	r18, r1
    2c20:	20 c0       	rjmp	.+64     	; 0x2c62 <_turn_on+0x5a>
    2c22:	9c 01       	movw	r18, r24
    2c24:	22 0f       	add	r18, r18
    2c26:	33 1f       	adc	r19, r19
    2c28:	f9 01       	movw	r30, r18
    2c2a:	e8 0f       	add	r30, r24
    2c2c:	f9 1f       	adc	r31, r25
    2c2e:	ee 0f       	add	r30, r30
    2c30:	ff 1f       	adc	r31, r31
    2c32:	e9 52       	subi	r30, 0x29	; 41
    2c34:	fe 4e       	sbci	r31, 0xEE	; 238
    2c36:	a0 81       	ld	r26, Z
    2c38:	b1 81       	ldd	r27, Z+1	; 0x01
    2c3a:	4c 91       	ld	r20, X
    2c3c:	f9 01       	movw	r30, r18
    2c3e:	e8 0f       	add	r30, r24
    2c40:	f9 1f       	adc	r31, r25
    2c42:	ee 0f       	add	r30, r30
    2c44:	ff 1f       	adc	r31, r31
    2c46:	e9 52       	subi	r30, 0x29	; 41
    2c48:	fe 4e       	sbci	r31, 0xEE	; 238
    2c4a:	81 e0       	ldi	r24, 0x01	; 1
    2c4c:	90 e0       	ldi	r25, 0x00	; 0
    2c4e:	02 80       	ldd	r0, Z+2	; 0x02
    2c50:	02 c0       	rjmp	.+4      	; 0x2c56 <_turn_on+0x4e>
    2c52:	88 0f       	add	r24, r24
    2c54:	99 1f       	adc	r25, r25
    2c56:	0a 94       	dec	r0
    2c58:	e2 f7       	brpl	.-8      	; 0x2c52 <_turn_on+0x4a>
    2c5a:	80 95       	com	r24
    2c5c:	84 23       	and	r24, r20
    2c5e:	8c 93       	st	X, r24
    2c60:	08 95       	ret
    2c62:	fc 01       	movw	r30, r24
    2c64:	ee 0f       	add	r30, r30
    2c66:	ff 1f       	adc	r31, r31
    2c68:	df 01       	movw	r26, r30
    2c6a:	a8 0f       	add	r26, r24
    2c6c:	b9 1f       	adc	r27, r25
    2c6e:	aa 0f       	add	r26, r26
    2c70:	bb 1f       	adc	r27, r27
    2c72:	a9 52       	subi	r26, 0x29	; 41
    2c74:	be 4e       	sbci	r27, 0xEE	; 238
    2c76:	0d 90       	ld	r0, X+
    2c78:	bc 91       	ld	r27, X
    2c7a:	a0 2d       	mov	r26, r0
    2c7c:	2c 91       	ld	r18, X
    2c7e:	e8 0f       	add	r30, r24
    2c80:	f9 1f       	adc	r31, r25
    2c82:	ee 0f       	add	r30, r30
    2c84:	ff 1f       	adc	r31, r31
    2c86:	e9 52       	subi	r30, 0x29	; 41
    2c88:	fe 4e       	sbci	r31, 0xEE	; 238
    2c8a:	81 e0       	ldi	r24, 0x01	; 1
    2c8c:	90 e0       	ldi	r25, 0x00	; 0
    2c8e:	02 80       	ldd	r0, Z+2	; 0x02
    2c90:	02 c0       	rjmp	.+4      	; 0x2c96 <_turn_on+0x8e>
    2c92:	88 0f       	add	r24, r24
    2c94:	99 1f       	adc	r25, r25
    2c96:	0a 94       	dec	r0
    2c98:	e2 f7       	brpl	.-8      	; 0x2c92 <_turn_on+0x8a>
    2c9a:	82 2b       	or	r24, r18
    2c9c:	8c 93       	st	X, r24
    2c9e:	08 95       	ret

00002ca0 <_hal_led_task>:
    2ca0:	cc 24       	eor	r12, r12
    2ca2:	c3 94       	inc	r12
    2ca4:	d1 2c       	mov	r13, r1
    2ca6:	68 94       	set
    2ca8:	bb 24       	eor	r11, r11
    2caa:	b2 f8       	bld	r11, 2
    2cac:	c7 ed       	ldi	r28, 0xD7	; 215
    2cae:	d1 e1       	ldi	r29, 0x11	; 17
    2cb0:	10 e0       	ldi	r17, 0x00	; 0
    2cb2:	8c 81       	ldd	r24, Y+4	; 0x04
    2cb4:	81 30       	cpi	r24, 0x01	; 1
    2cb6:	81 f0       	breq	.+32     	; 0x2cd8 <_hal_led_task+0x38>
    2cb8:	18 f1       	brcs	.+70     	; 0x2d00 <_hal_led_task+0x60>
    2cba:	82 30       	cpi	r24, 0x02	; 2
    2cbc:	61 f5       	brne	.+88     	; 0x2d16 <_hal_led_task+0x76>
    2cbe:	e8 81       	ld	r30, Y
    2cc0:	f9 81       	ldd	r31, Y+1	; 0x01
    2cc2:	20 81       	ld	r18, Z
    2cc4:	c6 01       	movw	r24, r12
    2cc6:	0a 80       	ldd	r0, Y+2	; 0x02
    2cc8:	02 c0       	rjmp	.+4      	; 0x2cce <_hal_led_task+0x2e>
    2cca:	88 0f       	add	r24, r24
    2ccc:	99 1f       	adc	r25, r25
    2cce:	0a 94       	dec	r0
    2cd0:	e2 f7       	brpl	.-8      	; 0x2cca <_hal_led_task+0x2a>
    2cd2:	82 27       	eor	r24, r18
    2cd4:	80 83       	st	Z, r24
    2cd6:	1f c0       	rjmp	.+62     	; 0x2d16 <_hal_led_task+0x76>
    2cd8:	8d 81       	ldd	r24, Y+5	; 0x05
    2cda:	8f 5f       	subi	r24, 0xFF	; 255
    2cdc:	86 30       	cpi	r24, 0x06	; 6
    2cde:	10 f4       	brcc	.+4      	; 0x2ce4 <_hal_led_task+0x44>
    2ce0:	8d 83       	std	Y+5, r24	; 0x05
    2ce2:	19 c0       	rjmp	.+50     	; 0x2d16 <_hal_led_task+0x76>
    2ce4:	1d 82       	std	Y+5, r1	; 0x05
    2ce6:	e8 81       	ld	r30, Y
    2ce8:	f9 81       	ldd	r31, Y+1	; 0x01
    2cea:	20 81       	ld	r18, Z
    2cec:	c6 01       	movw	r24, r12
    2cee:	0a 80       	ldd	r0, Y+2	; 0x02
    2cf0:	02 c0       	rjmp	.+4      	; 0x2cf6 <_hal_led_task+0x56>
    2cf2:	88 0f       	add	r24, r24
    2cf4:	99 1f       	adc	r25, r25
    2cf6:	0a 94       	dec	r0
    2cf8:	e2 f7       	brpl	.-8      	; 0x2cf2 <_hal_led_task+0x52>
    2cfa:	82 27       	eor	r24, r18
    2cfc:	80 83       	st	Z, r24
    2cfe:	0b c0       	rjmp	.+22     	; 0x2d16 <_hal_led_task+0x76>
    2d00:	0d 81       	ldd	r16, Y+5	; 0x05
    2d02:	00 23       	and	r16, r16
    2d04:	29 f0       	breq	.+10     	; 0x2d10 <_hal_led_task+0x70>
    2d06:	81 2f       	mov	r24, r17
    2d08:	7f df       	rcall	.-258    	; 0x2c08 <_turn_on>
    2d0a:	01 50       	subi	r16, 0x01	; 1
    2d0c:	0d 83       	std	Y+5, r16	; 0x05
    2d0e:	03 c0       	rjmp	.+6      	; 0x2d16 <_hal_led_task+0x76>
    2d10:	bc 82       	std	Y+4, r11	; 0x04
    2d12:	81 2f       	mov	r24, r17
    2d14:	2d df       	rcall	.-422    	; 0x2b70 <_turn_off>
    2d16:	1f 5f       	subi	r17, 0xFF	; 255
    2d18:	26 96       	adiw	r28, 0x06	; 6
    2d1a:	14 30       	cpi	r17, 0x04	; 4
    2d1c:	51 f6       	brne	.-108    	; 0x2cb2 <_hal_led_task+0x12>
    2d1e:	6c e0       	ldi	r22, 0x0C	; 12
    2d20:	70 e0       	ldi	r23, 0x00	; 0
    2d22:	80 e0       	ldi	r24, 0x00	; 0
    2d24:	90 e0       	ldi	r25, 0x00	; 0
    2d26:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <vTaskDelay>
    2d2a:	c0 cf       	rjmp	.-128    	; 0x2cac <_hal_led_task+0xc>

00002d2c <status_leds_initialise>:
    2d2c:	ef 92       	push	r14
    2d2e:	ff 92       	push	r15
    2d30:	0f 93       	push	r16
    2d32:	1f 93       	push	r17
    2d34:	cf 93       	push	r28
    2d36:	df 93       	push	r29
    2d38:	08 2f       	mov	r16, r24
    2d3a:	80 e4       	ldi	r24, 0x40	; 64
    2d3c:	87 b9       	out	0x07, r24	; 7
    2d3e:	c7 ed       	ldi	r28, 0xD7	; 215
    2d40:	d1 e1       	ldi	r29, 0x11	; 17
    2d42:	0f 2e       	mov	r0, r31
    2d44:	f8 e2       	ldi	r31, 0x28	; 40
    2d46:	ef 2e       	mov	r14, r31
    2d48:	f1 2c       	mov	r15, r1
    2d4a:	f0 2d       	mov	r31, r0
    2d4c:	f9 82       	std	Y+1, r15	; 0x01
    2d4e:	e8 82       	st	Y, r14
    2d50:	86 e0       	ldi	r24, 0x06	; 6
    2d52:	8a 83       	std	Y+2, r24	; 0x02
    2d54:	1b 82       	std	Y+3, r1	; 0x03
    2d56:	14 e0       	ldi	r17, 0x04	; 4
    2d58:	1c 83       	std	Y+4, r17	; 0x04
    2d5a:	80 e0       	ldi	r24, 0x00	; 0
    2d5c:	09 df       	rcall	.-494    	; 0x2b70 <_turn_off>
    2d5e:	80 e8       	ldi	r24, 0x80	; 128
    2d60:	87 b9       	out	0x07, r24	; 7
    2d62:	ff 82       	std	Y+7, r15	; 0x07
    2d64:	ee 82       	std	Y+6, r14	; 0x06
    2d66:	87 e0       	ldi	r24, 0x07	; 7
    2d68:	88 87       	std	Y+8, r24	; 0x08
    2d6a:	19 86       	std	Y+9, r1	; 0x09
    2d6c:	1a 87       	std	Y+10, r17	; 0x0a
    2d6e:	81 e0       	ldi	r24, 0x01	; 1
    2d70:	ff de       	rcall	.-514    	; 0x2b70 <_turn_off>
    2d72:	80 e2       	ldi	r24, 0x20	; 32
    2d74:	83 bb       	out	0x13, r24	; 19
    2d76:	84 e3       	ldi	r24, 0x34	; 52
    2d78:	90 e0       	ldi	r25, 0x00	; 0
    2d7a:	9d 87       	std	Y+13, r25	; 0x0d
    2d7c:	8c 87       	std	Y+12, r24	; 0x0c
    2d7e:	85 e0       	ldi	r24, 0x05	; 5
    2d80:	8e 87       	std	Y+14, r24	; 0x0e
    2d82:	1f 86       	std	Y+15, r1	; 0x0f
    2d84:	18 8b       	std	Y+16, r17	; 0x10
    2d86:	82 e0       	ldi	r24, 0x02	; 2
    2d88:	f3 de       	rcall	.-538    	; 0x2b70 <_turn_off>
    2d8a:	80 e1       	ldi	r24, 0x10	; 16
    2d8c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x7c0101>
    2d90:	82 e0       	ldi	r24, 0x02	; 2
    2d92:	91 e0       	ldi	r25, 0x01	; 1
    2d94:	9b 8b       	std	Y+19, r25	; 0x13
    2d96:	8a 8b       	std	Y+18, r24	; 0x12
    2d98:	1c 8b       	std	Y+20, r17	; 0x14
    2d9a:	1d 8a       	std	Y+21, r1	; 0x15
    2d9c:	1e 8b       	std	Y+22, r17	; 0x16
    2d9e:	83 e0       	ldi	r24, 0x03	; 3
    2da0:	e7 de       	rcall	.-562    	; 0x2b70 <_turn_off>
    2da2:	e1 2c       	mov	r14, r1
    2da4:	f1 2c       	mov	r15, r1
    2da6:	20 e0       	ldi	r18, 0x00	; 0
    2da8:	30 e0       	ldi	r19, 0x00	; 0
    2daa:	40 ec       	ldi	r20, 0xC0	; 192
    2dac:	50 e0       	ldi	r21, 0x00	; 0
    2dae:	69 e2       	ldi	r22, 0x29	; 41
    2db0:	73 e0       	ldi	r23, 0x03	; 3
    2db2:	80 e5       	ldi	r24, 0x50	; 80
    2db4:	96 e1       	ldi	r25, 0x16	; 22
    2db6:	0e 94 a3 0b 	call	0x1746	; 0x1746 <xTaskCreate>
    2dba:	df 91       	pop	r29
    2dbc:	cf 91       	pop	r28
    2dbe:	1f 91       	pop	r17
    2dc0:	0f 91       	pop	r16
    2dc2:	ff 90       	pop	r15
    2dc4:	ef 90       	pop	r14
    2dc6:	08 95       	ret

00002dc8 <serial_create>:
    2dc8:	2f 92       	push	r2
    2dca:	3f 92       	push	r3
    2dcc:	4f 92       	push	r4
    2dce:	5f 92       	push	r5
    2dd0:	6f 92       	push	r6
    2dd2:	7f 92       	push	r7
    2dd4:	8f 92       	push	r8
    2dd6:	9f 92       	push	r9
    2dd8:	af 92       	push	r10
    2dda:	cf 92       	push	r12
    2ddc:	ef 92       	push	r14
    2dde:	ff 92       	push	r15
    2de0:	0f 93       	push	r16
    2de2:	1f 93       	push	r17
    2de4:	cf 93       	push	r28
    2de6:	df 93       	push	r29
    2de8:	cd b7       	in	r28, 0x3d	; 61
    2dea:	de b7       	in	r29, 0x3e	; 62
    2dec:	f8 2e       	mov	r15, r24
    2dee:	2a 01       	movw	r4, r20
    2df0:	3b 01       	movw	r6, r22
    2df2:	88 e0       	ldi	r24, 0x08	; 8
    2df4:	90 e0       	ldi	r25, 0x00	; 0
    2df6:	50 d5       	rcall	.+2720   	; 0x3898 <malloc>
    2df8:	8c 01       	movw	r16, r24
    2dfa:	8f 2d       	mov	r24, r15
    2dfc:	90 e0       	ldi	r25, 0x00	; 0
    2dfe:	fc 01       	movw	r30, r24
    2e00:	ee 0f       	add	r30, r30
    2e02:	ff 1f       	adc	r31, r31
    2e04:	e1 51       	subi	r30, 0x11	; 17
    2e06:	fe 4e       	sbci	r31, 0xEE	; 238
    2e08:	11 83       	std	Z+1, r17	; 0x01
    2e0a:	00 83       	st	Z, r16
    2e0c:	01 15       	cp	r16, r1
    2e0e:	11 05       	cpc	r17, r1
    2e10:	09 f4       	brne	.+2      	; 0x2e14 <serial_create+0x4c>
    2e12:	64 c0       	rjmp	.+200    	; 0x2edc <serial_create+0x114>
    2e14:	88 0f       	add	r24, r24
    2e16:	99 1f       	adc	r25, r25
    2e18:	fc 01       	movw	r30, r24
    2e1a:	e7 5e       	subi	r30, 0xE7	; 231
    2e1c:	fd 4f       	sbci	r31, 0xFD	; 253
    2e1e:	80 81       	ld	r24, Z
    2e20:	91 81       	ldd	r25, Z+1	; 0x01
    2e22:	d8 01       	movw	r26, r16
    2e24:	8d 93       	st	X+, r24
    2e26:	9c 93       	st	X, r25
    2e28:	8c 2d       	mov	r24, r12
    2e2a:	90 e0       	ldi	r25, 0x00	; 0
    2e2c:	88 0f       	add	r24, r24
    2e2e:	99 1f       	adc	r25, r25
    2e30:	88 0f       	add	r24, r24
    2e32:	99 1f       	adc	r25, r25
    2e34:	31 d5       	rcall	.+2658   	; 0x3898 <malloc>
    2e36:	1c 01       	movw	r2, r24
    2e38:	86 e0       	ldi	r24, 0x06	; 6
    2e3a:	90 e0       	ldi	r25, 0x00	; 0
    2e3c:	2d d5       	rcall	.+2650   	; 0x3898 <malloc>
    2e3e:	7c 01       	movw	r14, r24
    2e40:	4c 2d       	mov	r20, r12
    2e42:	b1 01       	movw	r22, r2
    2e44:	00 d3       	rcall	.+1536   	; 0x3446 <fifo_init>
    2e46:	f8 01       	movw	r30, r16
    2e48:	f5 82       	std	Z+5, r15	; 0x05
    2e4a:	e4 82       	std	Z+4, r14	; 0x04
    2e4c:	8a 2d       	mov	r24, r10
    2e4e:	90 e0       	ldi	r25, 0x00	; 0
    2e50:	88 0f       	add	r24, r24
    2e52:	99 1f       	adc	r25, r25
    2e54:	88 0f       	add	r24, r24
    2e56:	99 1f       	adc	r25, r25
    2e58:	1f d5       	rcall	.+2622   	; 0x3898 <malloc>
    2e5a:	1c 01       	movw	r2, r24
    2e5c:	86 e0       	ldi	r24, 0x06	; 6
    2e5e:	90 e0       	ldi	r25, 0x00	; 0
    2e60:	1b d5       	rcall	.+2614   	; 0x3898 <malloc>
    2e62:	7c 01       	movw	r14, r24
    2e64:	4a 2d       	mov	r20, r10
    2e66:	b1 01       	movw	r22, r2
    2e68:	ee d2       	rcall	.+1500   	; 0x3446 <fifo_init>
    2e6a:	d8 01       	movw	r26, r16
    2e6c:	13 96       	adiw	r26, 0x03	; 3
    2e6e:	fc 92       	st	X, r15
    2e70:	ee 92       	st	-X, r14
    2e72:	12 97       	sbiw	r26, 0x02	; 2
    2e74:	17 96       	adiw	r26, 0x07	; 7
    2e76:	9c 92       	st	X, r9
    2e78:	8e 92       	st	-X, r8
    2e7a:	16 97       	sbiw	r26, 0x06	; 6
    2e7c:	ff b6       	in	r15, 0x3f	; 63
    2e7e:	f8 94       	cli
    2e80:	ed 91       	ld	r30, X+
    2e82:	fc 91       	ld	r31, X
    2e84:	11 97       	sbiw	r26, 0x01	; 1
    2e86:	36 97       	sbiw	r30, 0x06	; 6
    2e88:	80 81       	ld	r24, Z
    2e8a:	82 60       	ori	r24, 0x02	; 2
    2e8c:	80 83       	st	Z, r24
    2e8e:	8d 90       	ld	r8, X+
    2e90:	9c 90       	ld	r9, X
    2e92:	c3 01       	movw	r24, r6
    2e94:	b2 01       	movw	r22, r4
    2e96:	c0 dd       	rcall	.-1152   	; 0x2a18 <__floatunsisf>
    2e98:	20 e0       	ldi	r18, 0x00	; 0
    2e9a:	30 e0       	ldi	r19, 0x00	; 0
    2e9c:	40 e0       	ldi	r20, 0x00	; 0
    2e9e:	51 e4       	ldi	r21, 0x41	; 65
    2ea0:	38 d4       	rcall	.+2160   	; 0x3712 <__mulsf3>
    2ea2:	9b 01       	movw	r18, r22
    2ea4:	ac 01       	movw	r20, r24
    2ea6:	60 e0       	ldi	r22, 0x00	; 0
    2ea8:	74 e2       	ldi	r23, 0x24	; 36
    2eaa:	84 e7       	ldi	r24, 0x74	; 116
    2eac:	9b e4       	ldi	r25, 0x4B	; 75
    2eae:	4c d3       	rcall	.+1688   	; 0x3548 <__divsf3>
    2eb0:	20 e0       	ldi	r18, 0x00	; 0
    2eb2:	30 e0       	ldi	r19, 0x00	; 0
    2eb4:	40 e8       	ldi	r20, 0x80	; 128
    2eb6:	5f e3       	ldi	r21, 0x3F	; 63
    2eb8:	e2 d2       	rcall	.+1476   	; 0x347e <__subsf3>
    2eba:	ae d3       	rcall	.+1884   	; 0x3618 <__fixunssfsi>
    2ebc:	f4 01       	movw	r30, r8
    2ebe:	32 97       	sbiw	r30, 0x02	; 2
    2ec0:	60 83       	st	Z, r22
    2ec2:	d8 01       	movw	r26, r16
    2ec4:	ed 91       	ld	r30, X+
    2ec6:	fc 91       	ld	r31, X
    2ec8:	11 97       	sbiw	r26, 0x01	; 1
    2eca:	35 97       	sbiw	r30, 0x05	; 5
    2ecc:	88 e9       	ldi	r24, 0x98	; 152
    2ece:	80 83       	st	Z, r24
    2ed0:	ed 91       	ld	r30, X+
    2ed2:	fc 91       	ld	r31, X
    2ed4:	34 97       	sbiw	r30, 0x04	; 4
    2ed6:	86 e0       	ldi	r24, 0x06	; 6
    2ed8:	80 83       	st	Z, r24
    2eda:	ff be       	out	0x3f, r15	; 63
    2edc:	c8 01       	movw	r24, r16
    2ede:	df 91       	pop	r29
    2ee0:	cf 91       	pop	r28
    2ee2:	1f 91       	pop	r17
    2ee4:	0f 91       	pop	r16
    2ee6:	ff 90       	pop	r15
    2ee8:	ef 90       	pop	r14
    2eea:	cf 90       	pop	r12
    2eec:	af 90       	pop	r10
    2eee:	9f 90       	pop	r9
    2ef0:	8f 90       	pop	r8
    2ef2:	7f 90       	pop	r7
    2ef4:	6f 90       	pop	r6
    2ef6:	5f 90       	pop	r5
    2ef8:	4f 90       	pop	r4
    2efa:	3f 90       	pop	r3
    2efc:	2f 90       	pop	r2
    2efe:	08 95       	ret

00002f00 <serial_sendByte>:
    2f00:	cf 93       	push	r28
    2f02:	df 93       	push	r29
    2f04:	dc 01       	movw	r26, r24
    2f06:	89 2b       	or	r24, r25
    2f08:	01 f1       	breq	.+64     	; 0x2f4a <serial_sendByte+0x4a>
    2f0a:	12 96       	adiw	r26, 0x02	; 2
    2f0c:	ed 91       	ld	r30, X+
    2f0e:	fc 91       	ld	r31, X
    2f10:	13 97       	sbiw	r26, 0x03	; 3
    2f12:	93 81       	ldd	r25, Z+3	; 0x03
    2f14:	82 81       	ldd	r24, Z+2	; 0x02
    2f16:	25 81       	ldd	r18, Z+5	; 0x05
    2f18:	98 1b       	sub	r25, r24
    2f1a:	92 23       	and	r25, r18
    2f1c:	84 81       	ldd	r24, Z+4	; 0x04
    2f1e:	98 17       	cp	r25, r24
    2f20:	b1 f0       	breq	.+44     	; 0x2f4e <serial_sendByte+0x4e>
    2f22:	83 81       	ldd	r24, Z+3	; 0x03
    2f24:	26 95       	lsr	r18
    2f26:	28 23       	and	r18, r24
    2f28:	c0 81       	ld	r28, Z
    2f2a:	d1 81       	ldd	r29, Z+1	; 0x01
    2f2c:	c2 0f       	add	r28, r18
    2f2e:	d1 1d       	adc	r29, r1
    2f30:	68 83       	st	Y, r22
    2f32:	8f 5f       	subi	r24, 0xFF	; 255
    2f34:	95 81       	ldd	r25, Z+5	; 0x05
    2f36:	89 23       	and	r24, r25
    2f38:	83 83       	std	Z+3, r24	; 0x03
    2f3a:	ed 91       	ld	r30, X+
    2f3c:	fc 91       	ld	r31, X
    2f3e:	35 97       	sbiw	r30, 0x05	; 5
    2f40:	80 81       	ld	r24, Z
    2f42:	80 62       	ori	r24, 0x20	; 32
    2f44:	80 83       	st	Z, r24
    2f46:	80 e0       	ldi	r24, 0x00	; 0
    2f48:	03 c0       	rjmp	.+6      	; 0x2f50 <serial_sendByte+0x50>
    2f4a:	81 e0       	ldi	r24, 0x01	; 1
    2f4c:	01 c0       	rjmp	.+2      	; 0x2f50 <serial_sendByte+0x50>
    2f4e:	82 e0       	ldi	r24, 0x02	; 2
    2f50:	df 91       	pop	r29
    2f52:	cf 91       	pop	r28
    2f54:	08 95       	ret

00002f56 <serial_getByte>:
    2f56:	00 97       	sbiw	r24, 0x00	; 0
    2f58:	d1 f0       	breq	.+52     	; 0x2f8e <serial_getByte+0x38>
    2f5a:	dc 01       	movw	r26, r24
    2f5c:	14 96       	adiw	r26, 0x04	; 4
    2f5e:	ed 91       	ld	r30, X+
    2f60:	fc 91       	ld	r31, X
    2f62:	15 97       	sbiw	r26, 0x05	; 5
    2f64:	93 81       	ldd	r25, Z+3	; 0x03
    2f66:	82 81       	ldd	r24, Z+2	; 0x02
    2f68:	98 17       	cp	r25, r24
    2f6a:	99 f0       	breq	.+38     	; 0x2f92 <serial_getByte+0x3c>
    2f6c:	92 81       	ldd	r25, Z+2	; 0x02
    2f6e:	85 81       	ldd	r24, Z+5	; 0x05
    2f70:	86 95       	lsr	r24
    2f72:	89 23       	and	r24, r25
    2f74:	a0 81       	ld	r26, Z
    2f76:	b1 81       	ldd	r27, Z+1	; 0x01
    2f78:	a8 0f       	add	r26, r24
    2f7a:	b1 1d       	adc	r27, r1
    2f7c:	8c 91       	ld	r24, X
    2f7e:	db 01       	movw	r26, r22
    2f80:	8c 93       	st	X, r24
    2f82:	9f 5f       	subi	r25, 0xFF	; 255
    2f84:	85 81       	ldd	r24, Z+5	; 0x05
    2f86:	98 23       	and	r25, r24
    2f88:	92 83       	std	Z+2, r25	; 0x02
    2f8a:	80 e0       	ldi	r24, 0x00	; 0
    2f8c:	08 95       	ret
    2f8e:	81 e0       	ldi	r24, 0x01	; 1
    2f90:	08 95       	ret
    2f92:	83 e0       	ldi	r24, 0x03	; 3
    2f94:	08 95       	ret

00002f96 <__vector_25>:
    2f96:	1f 92       	push	r1
    2f98:	0f 92       	push	r0
    2f9a:	0f b6       	in	r0, 0x3f	; 63
    2f9c:	0f 92       	push	r0
    2f9e:	11 24       	eor	r1, r1
    2fa0:	0b b6       	in	r0, 0x3b	; 59
    2fa2:	0f 92       	push	r0
    2fa4:	2f 93       	push	r18
    2fa6:	3f 93       	push	r19
    2fa8:	4f 93       	push	r20
    2faa:	5f 93       	push	r21
    2fac:	6f 93       	push	r22
    2fae:	7f 93       	push	r23
    2fb0:	8f 93       	push	r24
    2fb2:	9f 93       	push	r25
    2fb4:	af 93       	push	r26
    2fb6:	bf 93       	push	r27
    2fb8:	cf 93       	push	r28
    2fba:	df 93       	push	r29
    2fbc:	ef 93       	push	r30
    2fbe:	ff 93       	push	r31
    2fc0:	a0 91 ef 11 	lds	r26, 0x11EF	; 0x8011ef <_ser_handle>
    2fc4:	b0 91 f0 11 	lds	r27, 0x11F0	; 0x8011f0 <_ser_handle+0x1>
    2fc8:	10 97       	sbiw	r26, 0x00	; 0
    2fca:	11 f1       	breq	.+68     	; 0x3010 <__vector_25+0x7a>
    2fcc:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    2fd0:	14 96       	adiw	r26, 0x04	; 4
    2fd2:	ed 91       	ld	r30, X+
    2fd4:	fc 91       	ld	r31, X
    2fd6:	15 97       	sbiw	r26, 0x05	; 5
    2fd8:	93 81       	ldd	r25, Z+3	; 0x03
    2fda:	82 81       	ldd	r24, Z+2	; 0x02
    2fdc:	25 81       	ldd	r18, Z+5	; 0x05
    2fde:	98 1b       	sub	r25, r24
    2fe0:	92 23       	and	r25, r18
    2fe2:	84 81       	ldd	r24, Z+4	; 0x04
    2fe4:	98 17       	cp	r25, r24
    2fe6:	61 f0       	breq	.+24     	; 0x3000 <__vector_25+0x6a>
    2fe8:	83 81       	ldd	r24, Z+3	; 0x03
    2fea:	26 95       	lsr	r18
    2fec:	28 23       	and	r18, r24
    2fee:	c0 81       	ld	r28, Z
    2ff0:	d1 81       	ldd	r29, Z+1	; 0x01
    2ff2:	c2 0f       	add	r28, r18
    2ff4:	d1 1d       	adc	r29, r1
    2ff6:	68 83       	st	Y, r22
    2ff8:	8f 5f       	subi	r24, 0xFF	; 255
    2ffa:	95 81       	ldd	r25, Z+5	; 0x05
    2ffc:	89 23       	and	r24, r25
    2ffe:	83 83       	std	Z+3, r24	; 0x03
    3000:	16 96       	adiw	r26, 0x06	; 6
    3002:	ed 91       	ld	r30, X+
    3004:	fc 91       	ld	r31, X
    3006:	17 97       	sbiw	r26, 0x07	; 7
    3008:	30 97       	sbiw	r30, 0x00	; 0
    300a:	11 f0       	breq	.+4      	; 0x3010 <__vector_25+0x7a>
    300c:	cd 01       	movw	r24, r26
    300e:	19 95       	eicall
    3010:	ff 91       	pop	r31
    3012:	ef 91       	pop	r30
    3014:	df 91       	pop	r29
    3016:	cf 91       	pop	r28
    3018:	bf 91       	pop	r27
    301a:	af 91       	pop	r26
    301c:	9f 91       	pop	r25
    301e:	8f 91       	pop	r24
    3020:	7f 91       	pop	r23
    3022:	6f 91       	pop	r22
    3024:	5f 91       	pop	r21
    3026:	4f 91       	pop	r20
    3028:	3f 91       	pop	r19
    302a:	2f 91       	pop	r18
    302c:	0f 90       	pop	r0
    302e:	0b be       	out	0x3b, r0	; 59
    3030:	0f 90       	pop	r0
    3032:	0f be       	out	0x3f, r0	; 63
    3034:	0f 90       	pop	r0
    3036:	1f 90       	pop	r1
    3038:	18 95       	reti

0000303a <__vector_26>:
    303a:	1f 92       	push	r1
    303c:	0f 92       	push	r0
    303e:	0f b6       	in	r0, 0x3f	; 63
    3040:	0f 92       	push	r0
    3042:	11 24       	eor	r1, r1
    3044:	0b b6       	in	r0, 0x3b	; 59
    3046:	0f 92       	push	r0
    3048:	2f 93       	push	r18
    304a:	8f 93       	push	r24
    304c:	9f 93       	push	r25
    304e:	af 93       	push	r26
    3050:	bf 93       	push	r27
    3052:	ef 93       	push	r30
    3054:	ff 93       	push	r31
    3056:	e0 91 ef 11 	lds	r30, 0x11EF	; 0x8011ef <_ser_handle>
    305a:	f0 91 f0 11 	lds	r31, 0x11F0	; 0x8011f0 <_ser_handle+0x1>
    305e:	30 97       	sbiw	r30, 0x00	; 0
    3060:	b9 f0       	breq	.+46     	; 0x3090 <__vector_26+0x56>
    3062:	02 80       	ldd	r0, Z+2	; 0x02
    3064:	f3 81       	ldd	r31, Z+3	; 0x03
    3066:	e0 2d       	mov	r30, r0
    3068:	93 81       	ldd	r25, Z+3	; 0x03
    306a:	82 81       	ldd	r24, Z+2	; 0x02
    306c:	98 17       	cp	r25, r24
    306e:	b1 f0       	breq	.+44     	; 0x309c <__vector_26+0x62>
    3070:	92 81       	ldd	r25, Z+2	; 0x02
    3072:	85 81       	ldd	r24, Z+5	; 0x05
    3074:	28 2f       	mov	r18, r24
    3076:	26 95       	lsr	r18
    3078:	29 23       	and	r18, r25
    307a:	a0 81       	ld	r26, Z
    307c:	b1 81       	ldd	r27, Z+1	; 0x01
    307e:	a2 0f       	add	r26, r18
    3080:	b1 1d       	adc	r27, r1
    3082:	2c 91       	ld	r18, X
    3084:	9f 5f       	subi	r25, 0xFF	; 255
    3086:	89 23       	and	r24, r25
    3088:	82 83       	std	Z+2, r24	; 0x02
    308a:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    308e:	0b c0       	rjmp	.+22     	; 0x30a6 <__vector_26+0x6c>
    3090:	e1 ec       	ldi	r30, 0xC1	; 193
    3092:	f0 e0       	ldi	r31, 0x00	; 0
    3094:	80 81       	ld	r24, Z
    3096:	8f 7d       	andi	r24, 0xDF	; 223
    3098:	80 83       	st	Z, r24
    309a:	05 c0       	rjmp	.+10     	; 0x30a6 <__vector_26+0x6c>
    309c:	e1 ec       	ldi	r30, 0xC1	; 193
    309e:	f0 e0       	ldi	r31, 0x00	; 0
    30a0:	80 81       	ld	r24, Z
    30a2:	8f 7d       	andi	r24, 0xDF	; 223
    30a4:	80 83       	st	Z, r24
    30a6:	ff 91       	pop	r31
    30a8:	ef 91       	pop	r30
    30aa:	bf 91       	pop	r27
    30ac:	af 91       	pop	r26
    30ae:	9f 91       	pop	r25
    30b0:	8f 91       	pop	r24
    30b2:	2f 91       	pop	r18
    30b4:	0f 90       	pop	r0
    30b6:	0b be       	out	0x3b, r0	; 59
    30b8:	0f 90       	pop	r0
    30ba:	0f be       	out	0x3f, r0	; 63
    30bc:	0f 90       	pop	r0
    30be:	1f 90       	pop	r1
    30c0:	18 95       	reti

000030c2 <__vector_36>:
    30c2:	1f 92       	push	r1
    30c4:	0f 92       	push	r0
    30c6:	0f b6       	in	r0, 0x3f	; 63
    30c8:	0f 92       	push	r0
    30ca:	11 24       	eor	r1, r1
    30cc:	0b b6       	in	r0, 0x3b	; 59
    30ce:	0f 92       	push	r0
    30d0:	2f 93       	push	r18
    30d2:	3f 93       	push	r19
    30d4:	4f 93       	push	r20
    30d6:	5f 93       	push	r21
    30d8:	6f 93       	push	r22
    30da:	7f 93       	push	r23
    30dc:	8f 93       	push	r24
    30de:	9f 93       	push	r25
    30e0:	af 93       	push	r26
    30e2:	bf 93       	push	r27
    30e4:	cf 93       	push	r28
    30e6:	df 93       	push	r29
    30e8:	ef 93       	push	r30
    30ea:	ff 93       	push	r31
    30ec:	a0 91 f1 11 	lds	r26, 0x11F1	; 0x8011f1 <_ser_handle+0x2>
    30f0:	b0 91 f2 11 	lds	r27, 0x11F2	; 0x8011f2 <_ser_handle+0x3>
    30f4:	10 97       	sbiw	r26, 0x00	; 0
    30f6:	11 f1       	breq	.+68     	; 0x313c <__vector_36+0x7a>
    30f8:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    30fc:	14 96       	adiw	r26, 0x04	; 4
    30fe:	ed 91       	ld	r30, X+
    3100:	fc 91       	ld	r31, X
    3102:	15 97       	sbiw	r26, 0x05	; 5
    3104:	93 81       	ldd	r25, Z+3	; 0x03
    3106:	82 81       	ldd	r24, Z+2	; 0x02
    3108:	25 81       	ldd	r18, Z+5	; 0x05
    310a:	98 1b       	sub	r25, r24
    310c:	92 23       	and	r25, r18
    310e:	84 81       	ldd	r24, Z+4	; 0x04
    3110:	98 17       	cp	r25, r24
    3112:	61 f0       	breq	.+24     	; 0x312c <__vector_36+0x6a>
    3114:	83 81       	ldd	r24, Z+3	; 0x03
    3116:	26 95       	lsr	r18
    3118:	28 23       	and	r18, r24
    311a:	c0 81       	ld	r28, Z
    311c:	d1 81       	ldd	r29, Z+1	; 0x01
    311e:	c2 0f       	add	r28, r18
    3120:	d1 1d       	adc	r29, r1
    3122:	68 83       	st	Y, r22
    3124:	8f 5f       	subi	r24, 0xFF	; 255
    3126:	95 81       	ldd	r25, Z+5	; 0x05
    3128:	89 23       	and	r24, r25
    312a:	83 83       	std	Z+3, r24	; 0x03
    312c:	16 96       	adiw	r26, 0x06	; 6
    312e:	ed 91       	ld	r30, X+
    3130:	fc 91       	ld	r31, X
    3132:	17 97       	sbiw	r26, 0x07	; 7
    3134:	30 97       	sbiw	r30, 0x00	; 0
    3136:	11 f0       	breq	.+4      	; 0x313c <__vector_36+0x7a>
    3138:	cd 01       	movw	r24, r26
    313a:	19 95       	eicall
    313c:	ff 91       	pop	r31
    313e:	ef 91       	pop	r30
    3140:	df 91       	pop	r29
    3142:	cf 91       	pop	r28
    3144:	bf 91       	pop	r27
    3146:	af 91       	pop	r26
    3148:	9f 91       	pop	r25
    314a:	8f 91       	pop	r24
    314c:	7f 91       	pop	r23
    314e:	6f 91       	pop	r22
    3150:	5f 91       	pop	r21
    3152:	4f 91       	pop	r20
    3154:	3f 91       	pop	r19
    3156:	2f 91       	pop	r18
    3158:	0f 90       	pop	r0
    315a:	0b be       	out	0x3b, r0	; 59
    315c:	0f 90       	pop	r0
    315e:	0f be       	out	0x3f, r0	; 63
    3160:	0f 90       	pop	r0
    3162:	1f 90       	pop	r1
    3164:	18 95       	reti

00003166 <__vector_37>:
    3166:	1f 92       	push	r1
    3168:	0f 92       	push	r0
    316a:	0f b6       	in	r0, 0x3f	; 63
    316c:	0f 92       	push	r0
    316e:	11 24       	eor	r1, r1
    3170:	0b b6       	in	r0, 0x3b	; 59
    3172:	0f 92       	push	r0
    3174:	2f 93       	push	r18
    3176:	8f 93       	push	r24
    3178:	9f 93       	push	r25
    317a:	af 93       	push	r26
    317c:	bf 93       	push	r27
    317e:	ef 93       	push	r30
    3180:	ff 93       	push	r31
    3182:	e0 91 f1 11 	lds	r30, 0x11F1	; 0x8011f1 <_ser_handle+0x2>
    3186:	f0 91 f2 11 	lds	r31, 0x11F2	; 0x8011f2 <_ser_handle+0x3>
    318a:	30 97       	sbiw	r30, 0x00	; 0
    318c:	b9 f0       	breq	.+46     	; 0x31bc <__vector_37+0x56>
    318e:	02 80       	ldd	r0, Z+2	; 0x02
    3190:	f3 81       	ldd	r31, Z+3	; 0x03
    3192:	e0 2d       	mov	r30, r0
    3194:	93 81       	ldd	r25, Z+3	; 0x03
    3196:	82 81       	ldd	r24, Z+2	; 0x02
    3198:	98 17       	cp	r25, r24
    319a:	b1 f0       	breq	.+44     	; 0x31c8 <__vector_37+0x62>
    319c:	92 81       	ldd	r25, Z+2	; 0x02
    319e:	85 81       	ldd	r24, Z+5	; 0x05
    31a0:	28 2f       	mov	r18, r24
    31a2:	26 95       	lsr	r18
    31a4:	29 23       	and	r18, r25
    31a6:	a0 81       	ld	r26, Z
    31a8:	b1 81       	ldd	r27, Z+1	; 0x01
    31aa:	a2 0f       	add	r26, r18
    31ac:	b1 1d       	adc	r27, r1
    31ae:	2c 91       	ld	r18, X
    31b0:	9f 5f       	subi	r25, 0xFF	; 255
    31b2:	89 23       	and	r24, r25
    31b4:	82 83       	std	Z+2, r24	; 0x02
    31b6:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    31ba:	0b c0       	rjmp	.+22     	; 0x31d2 <__vector_37+0x6c>
    31bc:	e9 ec       	ldi	r30, 0xC9	; 201
    31be:	f0 e0       	ldi	r31, 0x00	; 0
    31c0:	80 81       	ld	r24, Z
    31c2:	8f 7d       	andi	r24, 0xDF	; 223
    31c4:	80 83       	st	Z, r24
    31c6:	05 c0       	rjmp	.+10     	; 0x31d2 <__vector_37+0x6c>
    31c8:	e9 ec       	ldi	r30, 0xC9	; 201
    31ca:	f0 e0       	ldi	r31, 0x00	; 0
    31cc:	80 81       	ld	r24, Z
    31ce:	8f 7d       	andi	r24, 0xDF	; 223
    31d0:	80 83       	st	Z, r24
    31d2:	ff 91       	pop	r31
    31d4:	ef 91       	pop	r30
    31d6:	bf 91       	pop	r27
    31d8:	af 91       	pop	r26
    31da:	9f 91       	pop	r25
    31dc:	8f 91       	pop	r24
    31de:	2f 91       	pop	r18
    31e0:	0f 90       	pop	r0
    31e2:	0b be       	out	0x3b, r0	; 59
    31e4:	0f 90       	pop	r0
    31e6:	0f be       	out	0x3f, r0	; 63
    31e8:	0f 90       	pop	r0
    31ea:	1f 90       	pop	r1
    31ec:	18 95       	reti

000031ee <__vector_51>:
    31ee:	1f 92       	push	r1
    31f0:	0f 92       	push	r0
    31f2:	0f b6       	in	r0, 0x3f	; 63
    31f4:	0f 92       	push	r0
    31f6:	11 24       	eor	r1, r1
    31f8:	0b b6       	in	r0, 0x3b	; 59
    31fa:	0f 92       	push	r0
    31fc:	2f 93       	push	r18
    31fe:	3f 93       	push	r19
    3200:	4f 93       	push	r20
    3202:	5f 93       	push	r21
    3204:	6f 93       	push	r22
    3206:	7f 93       	push	r23
    3208:	8f 93       	push	r24
    320a:	9f 93       	push	r25
    320c:	af 93       	push	r26
    320e:	bf 93       	push	r27
    3210:	cf 93       	push	r28
    3212:	df 93       	push	r29
    3214:	ef 93       	push	r30
    3216:	ff 93       	push	r31
    3218:	a0 91 f3 11 	lds	r26, 0x11F3	; 0x8011f3 <_ser_handle+0x4>
    321c:	b0 91 f4 11 	lds	r27, 0x11F4	; 0x8011f4 <_ser_handle+0x5>
    3220:	10 97       	sbiw	r26, 0x00	; 0
    3222:	11 f1       	breq	.+68     	; 0x3268 <__vector_51+0x7a>
    3224:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    3228:	14 96       	adiw	r26, 0x04	; 4
    322a:	ed 91       	ld	r30, X+
    322c:	fc 91       	ld	r31, X
    322e:	15 97       	sbiw	r26, 0x05	; 5
    3230:	93 81       	ldd	r25, Z+3	; 0x03
    3232:	82 81       	ldd	r24, Z+2	; 0x02
    3234:	25 81       	ldd	r18, Z+5	; 0x05
    3236:	98 1b       	sub	r25, r24
    3238:	92 23       	and	r25, r18
    323a:	84 81       	ldd	r24, Z+4	; 0x04
    323c:	98 17       	cp	r25, r24
    323e:	61 f0       	breq	.+24     	; 0x3258 <__vector_51+0x6a>
    3240:	83 81       	ldd	r24, Z+3	; 0x03
    3242:	26 95       	lsr	r18
    3244:	28 23       	and	r18, r24
    3246:	c0 81       	ld	r28, Z
    3248:	d1 81       	ldd	r29, Z+1	; 0x01
    324a:	c2 0f       	add	r28, r18
    324c:	d1 1d       	adc	r29, r1
    324e:	68 83       	st	Y, r22
    3250:	8f 5f       	subi	r24, 0xFF	; 255
    3252:	95 81       	ldd	r25, Z+5	; 0x05
    3254:	89 23       	and	r24, r25
    3256:	83 83       	std	Z+3, r24	; 0x03
    3258:	16 96       	adiw	r26, 0x06	; 6
    325a:	ed 91       	ld	r30, X+
    325c:	fc 91       	ld	r31, X
    325e:	17 97       	sbiw	r26, 0x07	; 7
    3260:	30 97       	sbiw	r30, 0x00	; 0
    3262:	11 f0       	breq	.+4      	; 0x3268 <__vector_51+0x7a>
    3264:	cd 01       	movw	r24, r26
    3266:	19 95       	eicall
    3268:	ff 91       	pop	r31
    326a:	ef 91       	pop	r30
    326c:	df 91       	pop	r29
    326e:	cf 91       	pop	r28
    3270:	bf 91       	pop	r27
    3272:	af 91       	pop	r26
    3274:	9f 91       	pop	r25
    3276:	8f 91       	pop	r24
    3278:	7f 91       	pop	r23
    327a:	6f 91       	pop	r22
    327c:	5f 91       	pop	r21
    327e:	4f 91       	pop	r20
    3280:	3f 91       	pop	r19
    3282:	2f 91       	pop	r18
    3284:	0f 90       	pop	r0
    3286:	0b be       	out	0x3b, r0	; 59
    3288:	0f 90       	pop	r0
    328a:	0f be       	out	0x3f, r0	; 63
    328c:	0f 90       	pop	r0
    328e:	1f 90       	pop	r1
    3290:	18 95       	reti

00003292 <__vector_52>:
    3292:	1f 92       	push	r1
    3294:	0f 92       	push	r0
    3296:	0f b6       	in	r0, 0x3f	; 63
    3298:	0f 92       	push	r0
    329a:	11 24       	eor	r1, r1
    329c:	0b b6       	in	r0, 0x3b	; 59
    329e:	0f 92       	push	r0
    32a0:	2f 93       	push	r18
    32a2:	8f 93       	push	r24
    32a4:	9f 93       	push	r25
    32a6:	af 93       	push	r26
    32a8:	bf 93       	push	r27
    32aa:	ef 93       	push	r30
    32ac:	ff 93       	push	r31
    32ae:	e0 91 f3 11 	lds	r30, 0x11F3	; 0x8011f3 <_ser_handle+0x4>
    32b2:	f0 91 f4 11 	lds	r31, 0x11F4	; 0x8011f4 <_ser_handle+0x5>
    32b6:	30 97       	sbiw	r30, 0x00	; 0
    32b8:	b9 f0       	breq	.+46     	; 0x32e8 <__vector_52+0x56>
    32ba:	02 80       	ldd	r0, Z+2	; 0x02
    32bc:	f3 81       	ldd	r31, Z+3	; 0x03
    32be:	e0 2d       	mov	r30, r0
    32c0:	93 81       	ldd	r25, Z+3	; 0x03
    32c2:	82 81       	ldd	r24, Z+2	; 0x02
    32c4:	98 17       	cp	r25, r24
    32c6:	b1 f0       	breq	.+44     	; 0x32f4 <__vector_52+0x62>
    32c8:	92 81       	ldd	r25, Z+2	; 0x02
    32ca:	85 81       	ldd	r24, Z+5	; 0x05
    32cc:	28 2f       	mov	r18, r24
    32ce:	26 95       	lsr	r18
    32d0:	29 23       	and	r18, r25
    32d2:	a0 81       	ld	r26, Z
    32d4:	b1 81       	ldd	r27, Z+1	; 0x01
    32d6:	a2 0f       	add	r26, r18
    32d8:	b1 1d       	adc	r27, r1
    32da:	2c 91       	ld	r18, X
    32dc:	9f 5f       	subi	r25, 0xFF	; 255
    32de:	89 23       	and	r24, r25
    32e0:	82 83       	std	Z+2, r24	; 0x02
    32e2:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    32e6:	0b c0       	rjmp	.+22     	; 0x32fe <__vector_52+0x6c>
    32e8:	e1 ed       	ldi	r30, 0xD1	; 209
    32ea:	f0 e0       	ldi	r31, 0x00	; 0
    32ec:	80 81       	ld	r24, Z
    32ee:	8f 7d       	andi	r24, 0xDF	; 223
    32f0:	80 83       	st	Z, r24
    32f2:	05 c0       	rjmp	.+10     	; 0x32fe <__vector_52+0x6c>
    32f4:	e1 ed       	ldi	r30, 0xD1	; 209
    32f6:	f0 e0       	ldi	r31, 0x00	; 0
    32f8:	80 81       	ld	r24, Z
    32fa:	8f 7d       	andi	r24, 0xDF	; 223
    32fc:	80 83       	st	Z, r24
    32fe:	ff 91       	pop	r31
    3300:	ef 91       	pop	r30
    3302:	bf 91       	pop	r27
    3304:	af 91       	pop	r26
    3306:	9f 91       	pop	r25
    3308:	8f 91       	pop	r24
    330a:	2f 91       	pop	r18
    330c:	0f 90       	pop	r0
    330e:	0b be       	out	0x3b, r0	; 59
    3310:	0f 90       	pop	r0
    3312:	0f be       	out	0x3f, r0	; 63
    3314:	0f 90       	pop	r0
    3316:	1f 90       	pop	r1
    3318:	18 95       	reti

0000331a <__vector_54>:
    331a:	1f 92       	push	r1
    331c:	0f 92       	push	r0
    331e:	0f b6       	in	r0, 0x3f	; 63
    3320:	0f 92       	push	r0
    3322:	11 24       	eor	r1, r1
    3324:	0b b6       	in	r0, 0x3b	; 59
    3326:	0f 92       	push	r0
    3328:	2f 93       	push	r18
    332a:	3f 93       	push	r19
    332c:	4f 93       	push	r20
    332e:	5f 93       	push	r21
    3330:	6f 93       	push	r22
    3332:	7f 93       	push	r23
    3334:	8f 93       	push	r24
    3336:	9f 93       	push	r25
    3338:	af 93       	push	r26
    333a:	bf 93       	push	r27
    333c:	cf 93       	push	r28
    333e:	df 93       	push	r29
    3340:	ef 93       	push	r30
    3342:	ff 93       	push	r31
    3344:	a0 91 f5 11 	lds	r26, 0x11F5	; 0x8011f5 <_ser_handle+0x6>
    3348:	b0 91 f6 11 	lds	r27, 0x11F6	; 0x8011f6 <_ser_handle+0x7>
    334c:	10 97       	sbiw	r26, 0x00	; 0
    334e:	11 f1       	breq	.+68     	; 0x3394 <__vector_54+0x7a>
    3350:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    3354:	14 96       	adiw	r26, 0x04	; 4
    3356:	ed 91       	ld	r30, X+
    3358:	fc 91       	ld	r31, X
    335a:	15 97       	sbiw	r26, 0x05	; 5
    335c:	93 81       	ldd	r25, Z+3	; 0x03
    335e:	82 81       	ldd	r24, Z+2	; 0x02
    3360:	25 81       	ldd	r18, Z+5	; 0x05
    3362:	98 1b       	sub	r25, r24
    3364:	92 23       	and	r25, r18
    3366:	84 81       	ldd	r24, Z+4	; 0x04
    3368:	98 17       	cp	r25, r24
    336a:	61 f0       	breq	.+24     	; 0x3384 <__vector_54+0x6a>
    336c:	83 81       	ldd	r24, Z+3	; 0x03
    336e:	26 95       	lsr	r18
    3370:	28 23       	and	r18, r24
    3372:	c0 81       	ld	r28, Z
    3374:	d1 81       	ldd	r29, Z+1	; 0x01
    3376:	c2 0f       	add	r28, r18
    3378:	d1 1d       	adc	r29, r1
    337a:	68 83       	st	Y, r22
    337c:	8f 5f       	subi	r24, 0xFF	; 255
    337e:	95 81       	ldd	r25, Z+5	; 0x05
    3380:	89 23       	and	r24, r25
    3382:	83 83       	std	Z+3, r24	; 0x03
    3384:	16 96       	adiw	r26, 0x06	; 6
    3386:	ed 91       	ld	r30, X+
    3388:	fc 91       	ld	r31, X
    338a:	17 97       	sbiw	r26, 0x07	; 7
    338c:	30 97       	sbiw	r30, 0x00	; 0
    338e:	11 f0       	breq	.+4      	; 0x3394 <__vector_54+0x7a>
    3390:	cd 01       	movw	r24, r26
    3392:	19 95       	eicall
    3394:	ff 91       	pop	r31
    3396:	ef 91       	pop	r30
    3398:	df 91       	pop	r29
    339a:	cf 91       	pop	r28
    339c:	bf 91       	pop	r27
    339e:	af 91       	pop	r26
    33a0:	9f 91       	pop	r25
    33a2:	8f 91       	pop	r24
    33a4:	7f 91       	pop	r23
    33a6:	6f 91       	pop	r22
    33a8:	5f 91       	pop	r21
    33aa:	4f 91       	pop	r20
    33ac:	3f 91       	pop	r19
    33ae:	2f 91       	pop	r18
    33b0:	0f 90       	pop	r0
    33b2:	0b be       	out	0x3b, r0	; 59
    33b4:	0f 90       	pop	r0
    33b6:	0f be       	out	0x3f, r0	; 63
    33b8:	0f 90       	pop	r0
    33ba:	1f 90       	pop	r1
    33bc:	18 95       	reti

000033be <__vector_55>:
    33be:	1f 92       	push	r1
    33c0:	0f 92       	push	r0
    33c2:	0f b6       	in	r0, 0x3f	; 63
    33c4:	0f 92       	push	r0
    33c6:	11 24       	eor	r1, r1
    33c8:	0b b6       	in	r0, 0x3b	; 59
    33ca:	0f 92       	push	r0
    33cc:	2f 93       	push	r18
    33ce:	8f 93       	push	r24
    33d0:	9f 93       	push	r25
    33d2:	af 93       	push	r26
    33d4:	bf 93       	push	r27
    33d6:	ef 93       	push	r30
    33d8:	ff 93       	push	r31
    33da:	e0 91 f5 11 	lds	r30, 0x11F5	; 0x8011f5 <_ser_handle+0x6>
    33de:	f0 91 f6 11 	lds	r31, 0x11F6	; 0x8011f6 <_ser_handle+0x7>
    33e2:	30 97       	sbiw	r30, 0x00	; 0
    33e4:	b9 f0       	breq	.+46     	; 0x3414 <__vector_55+0x56>
    33e6:	02 80       	ldd	r0, Z+2	; 0x02
    33e8:	f3 81       	ldd	r31, Z+3	; 0x03
    33ea:	e0 2d       	mov	r30, r0
    33ec:	93 81       	ldd	r25, Z+3	; 0x03
    33ee:	82 81       	ldd	r24, Z+2	; 0x02
    33f0:	98 17       	cp	r25, r24
    33f2:	b1 f0       	breq	.+44     	; 0x3420 <__vector_55+0x62>
    33f4:	92 81       	ldd	r25, Z+2	; 0x02
    33f6:	85 81       	ldd	r24, Z+5	; 0x05
    33f8:	28 2f       	mov	r18, r24
    33fa:	26 95       	lsr	r18
    33fc:	29 23       	and	r18, r25
    33fe:	a0 81       	ld	r26, Z
    3400:	b1 81       	ldd	r27, Z+1	; 0x01
    3402:	a2 0f       	add	r26, r18
    3404:	b1 1d       	adc	r27, r1
    3406:	2c 91       	ld	r18, X
    3408:	9f 5f       	subi	r25, 0xFF	; 255
    340a:	89 23       	and	r24, r25
    340c:	82 83       	std	Z+2, r24	; 0x02
    340e:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    3412:	0b c0       	rjmp	.+22     	; 0x342a <__vector_55+0x6c>
    3414:	e1 e3       	ldi	r30, 0x31	; 49
    3416:	f1 e0       	ldi	r31, 0x01	; 1
    3418:	80 81       	ld	r24, Z
    341a:	8f 7d       	andi	r24, 0xDF	; 223
    341c:	80 83       	st	Z, r24
    341e:	05 c0       	rjmp	.+10     	; 0x342a <__vector_55+0x6c>
    3420:	e1 e3       	ldi	r30, 0x31	; 49
    3422:	f1 e0       	ldi	r31, 0x01	; 1
    3424:	80 81       	ld	r24, Z
    3426:	8f 7d       	andi	r24, 0xDF	; 223
    3428:	80 83       	st	Z, r24
    342a:	ff 91       	pop	r31
    342c:	ef 91       	pop	r30
    342e:	bf 91       	pop	r27
    3430:	af 91       	pop	r26
    3432:	9f 91       	pop	r25
    3434:	8f 91       	pop	r24
    3436:	2f 91       	pop	r18
    3438:	0f 90       	pop	r0
    343a:	0b be       	out	0x3b, r0	; 59
    343c:	0f 90       	pop	r0
    343e:	0f be       	out	0x3f, r0	; 63
    3440:	0f 90       	pop	r0
    3442:	1f 90       	pop	r1
    3444:	18 95       	reti

00003446 <fifo_init>:
    3446:	fc 01       	movw	r30, r24
    3448:	41 11       	cpse	r20, r1
    344a:	01 c0       	rjmp	.+2      	; 0x344e <fifo_init+0x8>
    344c:	9b d3       	rcall	.+1846   	; 0x3b84 <abort>
    344e:	84 2f       	mov	r24, r20
    3450:	90 e0       	ldi	r25, 0x00	; 0
    3452:	9c 01       	movw	r18, r24
    3454:	21 50       	subi	r18, 0x01	; 1
    3456:	31 09       	sbc	r19, r1
    3458:	82 23       	and	r24, r18
    345a:	93 23       	and	r25, r19
    345c:	89 2b       	or	r24, r25
    345e:	09 f0       	breq	.+2      	; 0x3462 <fifo_init+0x1c>
    3460:	91 d3       	rcall	.+1826   	; 0x3b84 <abort>
    3462:	41 38       	cpi	r20, 0x81	; 129
    3464:	08 f0       	brcs	.+2      	; 0x3468 <fifo_init+0x22>
    3466:	8e d3       	rcall	.+1820   	; 0x3b84 <abort>
    3468:	12 82       	std	Z+2, r1	; 0x02
    346a:	13 82       	std	Z+3, r1	; 0x03
    346c:	44 83       	std	Z+4, r20	; 0x04
    346e:	44 0f       	add	r20, r20
    3470:	41 50       	subi	r20, 0x01	; 1
    3472:	45 83       	std	Z+5, r20	; 0x05
    3474:	71 83       	std	Z+1, r23	; 0x01
    3476:	60 83       	st	Z, r22
    3478:	80 e0       	ldi	r24, 0x00	; 0
    347a:	90 e0       	ldi	r25, 0x00	; 0
    347c:	08 95       	ret

0000347e <__subsf3>:
    347e:	50 58       	subi	r21, 0x80	; 128

00003480 <__addsf3>:
    3480:	bb 27       	eor	r27, r27
    3482:	aa 27       	eor	r26, r26
    3484:	0e d0       	rcall	.+28     	; 0x34a2 <__addsf3x>
    3486:	0b c1       	rjmp	.+534    	; 0x369e <__fp_round>
    3488:	fc d0       	rcall	.+504    	; 0x3682 <__fp_pscA>
    348a:	30 f0       	brcs	.+12     	; 0x3498 <__addsf3+0x18>
    348c:	01 d1       	rcall	.+514    	; 0x3690 <__fp_pscB>
    348e:	20 f0       	brcs	.+8      	; 0x3498 <__addsf3+0x18>
    3490:	31 f4       	brne	.+12     	; 0x349e <__addsf3+0x1e>
    3492:	9f 3f       	cpi	r25, 0xFF	; 255
    3494:	11 f4       	brne	.+4      	; 0x349a <__addsf3+0x1a>
    3496:	1e f4       	brtc	.+6      	; 0x349e <__addsf3+0x1e>
    3498:	f1 c0       	rjmp	.+482    	; 0x367c <__fp_nan>
    349a:	0e f4       	brtc	.+2      	; 0x349e <__addsf3+0x1e>
    349c:	e0 95       	com	r30
    349e:	e7 fb       	bst	r30, 7
    34a0:	e7 c0       	rjmp	.+462    	; 0x3670 <__fp_inf>

000034a2 <__addsf3x>:
    34a2:	e9 2f       	mov	r30, r25
    34a4:	0d d1       	rcall	.+538    	; 0x36c0 <__fp_split3>
    34a6:	80 f3       	brcs	.-32     	; 0x3488 <__addsf3+0x8>
    34a8:	ba 17       	cp	r27, r26
    34aa:	62 07       	cpc	r22, r18
    34ac:	73 07       	cpc	r23, r19
    34ae:	84 07       	cpc	r24, r20
    34b0:	95 07       	cpc	r25, r21
    34b2:	18 f0       	brcs	.+6      	; 0x34ba <__addsf3x+0x18>
    34b4:	71 f4       	brne	.+28     	; 0x34d2 <__addsf3x+0x30>
    34b6:	9e f5       	brtc	.+102    	; 0x351e <__addsf3x+0x7c>
    34b8:	25 c1       	rjmp	.+586    	; 0x3704 <__fp_zero>
    34ba:	0e f4       	brtc	.+2      	; 0x34be <__addsf3x+0x1c>
    34bc:	e0 95       	com	r30
    34be:	0b 2e       	mov	r0, r27
    34c0:	ba 2f       	mov	r27, r26
    34c2:	a0 2d       	mov	r26, r0
    34c4:	0b 01       	movw	r0, r22
    34c6:	b9 01       	movw	r22, r18
    34c8:	90 01       	movw	r18, r0
    34ca:	0c 01       	movw	r0, r24
    34cc:	ca 01       	movw	r24, r20
    34ce:	a0 01       	movw	r20, r0
    34d0:	11 24       	eor	r1, r1
    34d2:	ff 27       	eor	r31, r31
    34d4:	59 1b       	sub	r21, r25
    34d6:	99 f0       	breq	.+38     	; 0x34fe <__addsf3x+0x5c>
    34d8:	59 3f       	cpi	r21, 0xF9	; 249
    34da:	50 f4       	brcc	.+20     	; 0x34f0 <__addsf3x+0x4e>
    34dc:	50 3e       	cpi	r21, 0xE0	; 224
    34de:	68 f1       	brcs	.+90     	; 0x353a <__addsf3x+0x98>
    34e0:	1a 16       	cp	r1, r26
    34e2:	f0 40       	sbci	r31, 0x00	; 0
    34e4:	a2 2f       	mov	r26, r18
    34e6:	23 2f       	mov	r18, r19
    34e8:	34 2f       	mov	r19, r20
    34ea:	44 27       	eor	r20, r20
    34ec:	58 5f       	subi	r21, 0xF8	; 248
    34ee:	f3 cf       	rjmp	.-26     	; 0x34d6 <__addsf3x+0x34>
    34f0:	46 95       	lsr	r20
    34f2:	37 95       	ror	r19
    34f4:	27 95       	ror	r18
    34f6:	a7 95       	ror	r26
    34f8:	f0 40       	sbci	r31, 0x00	; 0
    34fa:	53 95       	inc	r21
    34fc:	c9 f7       	brne	.-14     	; 0x34f0 <__addsf3x+0x4e>
    34fe:	7e f4       	brtc	.+30     	; 0x351e <__addsf3x+0x7c>
    3500:	1f 16       	cp	r1, r31
    3502:	ba 0b       	sbc	r27, r26
    3504:	62 0b       	sbc	r22, r18
    3506:	73 0b       	sbc	r23, r19
    3508:	84 0b       	sbc	r24, r20
    350a:	ba f0       	brmi	.+46     	; 0x353a <__addsf3x+0x98>
    350c:	91 50       	subi	r25, 0x01	; 1
    350e:	a1 f0       	breq	.+40     	; 0x3538 <__addsf3x+0x96>
    3510:	ff 0f       	add	r31, r31
    3512:	bb 1f       	adc	r27, r27
    3514:	66 1f       	adc	r22, r22
    3516:	77 1f       	adc	r23, r23
    3518:	88 1f       	adc	r24, r24
    351a:	c2 f7       	brpl	.-16     	; 0x350c <__addsf3x+0x6a>
    351c:	0e c0       	rjmp	.+28     	; 0x353a <__addsf3x+0x98>
    351e:	ba 0f       	add	r27, r26
    3520:	62 1f       	adc	r22, r18
    3522:	73 1f       	adc	r23, r19
    3524:	84 1f       	adc	r24, r20
    3526:	48 f4       	brcc	.+18     	; 0x353a <__addsf3x+0x98>
    3528:	87 95       	ror	r24
    352a:	77 95       	ror	r23
    352c:	67 95       	ror	r22
    352e:	b7 95       	ror	r27
    3530:	f7 95       	ror	r31
    3532:	9e 3f       	cpi	r25, 0xFE	; 254
    3534:	08 f0       	brcs	.+2      	; 0x3538 <__addsf3x+0x96>
    3536:	b3 cf       	rjmp	.-154    	; 0x349e <__addsf3+0x1e>
    3538:	93 95       	inc	r25
    353a:	88 0f       	add	r24, r24
    353c:	08 f0       	brcs	.+2      	; 0x3540 <__addsf3x+0x9e>
    353e:	99 27       	eor	r25, r25
    3540:	ee 0f       	add	r30, r30
    3542:	97 95       	ror	r25
    3544:	87 95       	ror	r24
    3546:	08 95       	ret

00003548 <__divsf3>:
    3548:	0c d0       	rcall	.+24     	; 0x3562 <__divsf3x>
    354a:	a9 c0       	rjmp	.+338    	; 0x369e <__fp_round>
    354c:	a1 d0       	rcall	.+322    	; 0x3690 <__fp_pscB>
    354e:	40 f0       	brcs	.+16     	; 0x3560 <__divsf3+0x18>
    3550:	98 d0       	rcall	.+304    	; 0x3682 <__fp_pscA>
    3552:	30 f0       	brcs	.+12     	; 0x3560 <__divsf3+0x18>
    3554:	21 f4       	brne	.+8      	; 0x355e <__divsf3+0x16>
    3556:	5f 3f       	cpi	r21, 0xFF	; 255
    3558:	19 f0       	breq	.+6      	; 0x3560 <__divsf3+0x18>
    355a:	8a c0       	rjmp	.+276    	; 0x3670 <__fp_inf>
    355c:	51 11       	cpse	r21, r1
    355e:	d3 c0       	rjmp	.+422    	; 0x3706 <__fp_szero>
    3560:	8d c0       	rjmp	.+282    	; 0x367c <__fp_nan>

00003562 <__divsf3x>:
    3562:	ae d0       	rcall	.+348    	; 0x36c0 <__fp_split3>
    3564:	98 f3       	brcs	.-26     	; 0x354c <__divsf3+0x4>

00003566 <__divsf3_pse>:
    3566:	99 23       	and	r25, r25
    3568:	c9 f3       	breq	.-14     	; 0x355c <__divsf3+0x14>
    356a:	55 23       	and	r21, r21
    356c:	b1 f3       	breq	.-20     	; 0x355a <__divsf3+0x12>
    356e:	95 1b       	sub	r25, r21
    3570:	55 0b       	sbc	r21, r21
    3572:	bb 27       	eor	r27, r27
    3574:	aa 27       	eor	r26, r26
    3576:	62 17       	cp	r22, r18
    3578:	73 07       	cpc	r23, r19
    357a:	84 07       	cpc	r24, r20
    357c:	38 f0       	brcs	.+14     	; 0x358c <__divsf3_pse+0x26>
    357e:	9f 5f       	subi	r25, 0xFF	; 255
    3580:	5f 4f       	sbci	r21, 0xFF	; 255
    3582:	22 0f       	add	r18, r18
    3584:	33 1f       	adc	r19, r19
    3586:	44 1f       	adc	r20, r20
    3588:	aa 1f       	adc	r26, r26
    358a:	a9 f3       	breq	.-22     	; 0x3576 <__divsf3_pse+0x10>
    358c:	33 d0       	rcall	.+102    	; 0x35f4 <__divsf3_pse+0x8e>
    358e:	0e 2e       	mov	r0, r30
    3590:	3a f0       	brmi	.+14     	; 0x35a0 <__divsf3_pse+0x3a>
    3592:	e0 e8       	ldi	r30, 0x80	; 128
    3594:	30 d0       	rcall	.+96     	; 0x35f6 <__divsf3_pse+0x90>
    3596:	91 50       	subi	r25, 0x01	; 1
    3598:	50 40       	sbci	r21, 0x00	; 0
    359a:	e6 95       	lsr	r30
    359c:	00 1c       	adc	r0, r0
    359e:	ca f7       	brpl	.-14     	; 0x3592 <__divsf3_pse+0x2c>
    35a0:	29 d0       	rcall	.+82     	; 0x35f4 <__divsf3_pse+0x8e>
    35a2:	fe 2f       	mov	r31, r30
    35a4:	27 d0       	rcall	.+78     	; 0x35f4 <__divsf3_pse+0x8e>
    35a6:	66 0f       	add	r22, r22
    35a8:	77 1f       	adc	r23, r23
    35aa:	88 1f       	adc	r24, r24
    35ac:	bb 1f       	adc	r27, r27
    35ae:	26 17       	cp	r18, r22
    35b0:	37 07       	cpc	r19, r23
    35b2:	48 07       	cpc	r20, r24
    35b4:	ab 07       	cpc	r26, r27
    35b6:	b0 e8       	ldi	r27, 0x80	; 128
    35b8:	09 f0       	breq	.+2      	; 0x35bc <__divsf3_pse+0x56>
    35ba:	bb 0b       	sbc	r27, r27
    35bc:	80 2d       	mov	r24, r0
    35be:	bf 01       	movw	r22, r30
    35c0:	ff 27       	eor	r31, r31
    35c2:	93 58       	subi	r25, 0x83	; 131
    35c4:	5f 4f       	sbci	r21, 0xFF	; 255
    35c6:	2a f0       	brmi	.+10     	; 0x35d2 <__divsf3_pse+0x6c>
    35c8:	9e 3f       	cpi	r25, 0xFE	; 254
    35ca:	51 05       	cpc	r21, r1
    35cc:	68 f0       	brcs	.+26     	; 0x35e8 <__divsf3_pse+0x82>
    35ce:	50 c0       	rjmp	.+160    	; 0x3670 <__fp_inf>
    35d0:	9a c0       	rjmp	.+308    	; 0x3706 <__fp_szero>
    35d2:	5f 3f       	cpi	r21, 0xFF	; 255
    35d4:	ec f3       	brlt	.-6      	; 0x35d0 <__divsf3_pse+0x6a>
    35d6:	98 3e       	cpi	r25, 0xE8	; 232
    35d8:	dc f3       	brlt	.-10     	; 0x35d0 <__divsf3_pse+0x6a>
    35da:	86 95       	lsr	r24
    35dc:	77 95       	ror	r23
    35de:	67 95       	ror	r22
    35e0:	b7 95       	ror	r27
    35e2:	f7 95       	ror	r31
    35e4:	9f 5f       	subi	r25, 0xFF	; 255
    35e6:	c9 f7       	brne	.-14     	; 0x35da <__divsf3_pse+0x74>
    35e8:	88 0f       	add	r24, r24
    35ea:	91 1d       	adc	r25, r1
    35ec:	96 95       	lsr	r25
    35ee:	87 95       	ror	r24
    35f0:	97 f9       	bld	r25, 7
    35f2:	08 95       	ret
    35f4:	e1 e0       	ldi	r30, 0x01	; 1
    35f6:	66 0f       	add	r22, r22
    35f8:	77 1f       	adc	r23, r23
    35fa:	88 1f       	adc	r24, r24
    35fc:	bb 1f       	adc	r27, r27
    35fe:	62 17       	cp	r22, r18
    3600:	73 07       	cpc	r23, r19
    3602:	84 07       	cpc	r24, r20
    3604:	ba 07       	cpc	r27, r26
    3606:	20 f0       	brcs	.+8      	; 0x3610 <__divsf3_pse+0xaa>
    3608:	62 1b       	sub	r22, r18
    360a:	73 0b       	sbc	r23, r19
    360c:	84 0b       	sbc	r24, r20
    360e:	ba 0b       	sbc	r27, r26
    3610:	ee 1f       	adc	r30, r30
    3612:	88 f7       	brcc	.-30     	; 0x35f6 <__divsf3_pse+0x90>
    3614:	e0 95       	com	r30
    3616:	08 95       	ret

00003618 <__fixunssfsi>:
    3618:	5b d0       	rcall	.+182    	; 0x36d0 <__fp_splitA>
    361a:	88 f0       	brcs	.+34     	; 0x363e <__fixunssfsi+0x26>
    361c:	9f 57       	subi	r25, 0x7F	; 127
    361e:	90 f0       	brcs	.+36     	; 0x3644 <__fixunssfsi+0x2c>
    3620:	b9 2f       	mov	r27, r25
    3622:	99 27       	eor	r25, r25
    3624:	b7 51       	subi	r27, 0x17	; 23
    3626:	a0 f0       	brcs	.+40     	; 0x3650 <__fixunssfsi+0x38>
    3628:	d1 f0       	breq	.+52     	; 0x365e <__fixunssfsi+0x46>
    362a:	66 0f       	add	r22, r22
    362c:	77 1f       	adc	r23, r23
    362e:	88 1f       	adc	r24, r24
    3630:	99 1f       	adc	r25, r25
    3632:	1a f0       	brmi	.+6      	; 0x363a <__fixunssfsi+0x22>
    3634:	ba 95       	dec	r27
    3636:	c9 f7       	brne	.-14     	; 0x362a <__fixunssfsi+0x12>
    3638:	12 c0       	rjmp	.+36     	; 0x365e <__fixunssfsi+0x46>
    363a:	b1 30       	cpi	r27, 0x01	; 1
    363c:	81 f0       	breq	.+32     	; 0x365e <__fixunssfsi+0x46>
    363e:	62 d0       	rcall	.+196    	; 0x3704 <__fp_zero>
    3640:	b1 e0       	ldi	r27, 0x01	; 1
    3642:	08 95       	ret
    3644:	5f c0       	rjmp	.+190    	; 0x3704 <__fp_zero>
    3646:	67 2f       	mov	r22, r23
    3648:	78 2f       	mov	r23, r24
    364a:	88 27       	eor	r24, r24
    364c:	b8 5f       	subi	r27, 0xF8	; 248
    364e:	39 f0       	breq	.+14     	; 0x365e <__fixunssfsi+0x46>
    3650:	b9 3f       	cpi	r27, 0xF9	; 249
    3652:	cc f3       	brlt	.-14     	; 0x3646 <__fixunssfsi+0x2e>
    3654:	86 95       	lsr	r24
    3656:	77 95       	ror	r23
    3658:	67 95       	ror	r22
    365a:	b3 95       	inc	r27
    365c:	d9 f7       	brne	.-10     	; 0x3654 <__fixunssfsi+0x3c>
    365e:	3e f4       	brtc	.+14     	; 0x366e <__fixunssfsi+0x56>
    3660:	90 95       	com	r25
    3662:	80 95       	com	r24
    3664:	70 95       	com	r23
    3666:	61 95       	neg	r22
    3668:	7f 4f       	sbci	r23, 0xFF	; 255
    366a:	8f 4f       	sbci	r24, 0xFF	; 255
    366c:	9f 4f       	sbci	r25, 0xFF	; 255
    366e:	08 95       	ret

00003670 <__fp_inf>:
    3670:	97 f9       	bld	r25, 7
    3672:	9f 67       	ori	r25, 0x7F	; 127
    3674:	80 e8       	ldi	r24, 0x80	; 128
    3676:	70 e0       	ldi	r23, 0x00	; 0
    3678:	60 e0       	ldi	r22, 0x00	; 0
    367a:	08 95       	ret

0000367c <__fp_nan>:
    367c:	9f ef       	ldi	r25, 0xFF	; 255
    367e:	80 ec       	ldi	r24, 0xC0	; 192
    3680:	08 95       	ret

00003682 <__fp_pscA>:
    3682:	00 24       	eor	r0, r0
    3684:	0a 94       	dec	r0
    3686:	16 16       	cp	r1, r22
    3688:	17 06       	cpc	r1, r23
    368a:	18 06       	cpc	r1, r24
    368c:	09 06       	cpc	r0, r25
    368e:	08 95       	ret

00003690 <__fp_pscB>:
    3690:	00 24       	eor	r0, r0
    3692:	0a 94       	dec	r0
    3694:	12 16       	cp	r1, r18
    3696:	13 06       	cpc	r1, r19
    3698:	14 06       	cpc	r1, r20
    369a:	05 06       	cpc	r0, r21
    369c:	08 95       	ret

0000369e <__fp_round>:
    369e:	09 2e       	mov	r0, r25
    36a0:	03 94       	inc	r0
    36a2:	00 0c       	add	r0, r0
    36a4:	11 f4       	brne	.+4      	; 0x36aa <__fp_round+0xc>
    36a6:	88 23       	and	r24, r24
    36a8:	52 f0       	brmi	.+20     	; 0x36be <__fp_round+0x20>
    36aa:	bb 0f       	add	r27, r27
    36ac:	40 f4       	brcc	.+16     	; 0x36be <__fp_round+0x20>
    36ae:	bf 2b       	or	r27, r31
    36b0:	11 f4       	brne	.+4      	; 0x36b6 <__fp_round+0x18>
    36b2:	60 ff       	sbrs	r22, 0
    36b4:	04 c0       	rjmp	.+8      	; 0x36be <__fp_round+0x20>
    36b6:	6f 5f       	subi	r22, 0xFF	; 255
    36b8:	7f 4f       	sbci	r23, 0xFF	; 255
    36ba:	8f 4f       	sbci	r24, 0xFF	; 255
    36bc:	9f 4f       	sbci	r25, 0xFF	; 255
    36be:	08 95       	ret

000036c0 <__fp_split3>:
    36c0:	57 fd       	sbrc	r21, 7
    36c2:	90 58       	subi	r25, 0x80	; 128
    36c4:	44 0f       	add	r20, r20
    36c6:	55 1f       	adc	r21, r21
    36c8:	59 f0       	breq	.+22     	; 0x36e0 <__fp_splitA+0x10>
    36ca:	5f 3f       	cpi	r21, 0xFF	; 255
    36cc:	71 f0       	breq	.+28     	; 0x36ea <__fp_splitA+0x1a>
    36ce:	47 95       	ror	r20

000036d0 <__fp_splitA>:
    36d0:	88 0f       	add	r24, r24
    36d2:	97 fb       	bst	r25, 7
    36d4:	99 1f       	adc	r25, r25
    36d6:	61 f0       	breq	.+24     	; 0x36f0 <__fp_splitA+0x20>
    36d8:	9f 3f       	cpi	r25, 0xFF	; 255
    36da:	79 f0       	breq	.+30     	; 0x36fa <__fp_splitA+0x2a>
    36dc:	87 95       	ror	r24
    36de:	08 95       	ret
    36e0:	12 16       	cp	r1, r18
    36e2:	13 06       	cpc	r1, r19
    36e4:	14 06       	cpc	r1, r20
    36e6:	55 1f       	adc	r21, r21
    36e8:	f2 cf       	rjmp	.-28     	; 0x36ce <__fp_split3+0xe>
    36ea:	46 95       	lsr	r20
    36ec:	f1 df       	rcall	.-30     	; 0x36d0 <__fp_splitA>
    36ee:	08 c0       	rjmp	.+16     	; 0x3700 <__fp_splitA+0x30>
    36f0:	16 16       	cp	r1, r22
    36f2:	17 06       	cpc	r1, r23
    36f4:	18 06       	cpc	r1, r24
    36f6:	99 1f       	adc	r25, r25
    36f8:	f1 cf       	rjmp	.-30     	; 0x36dc <__fp_splitA+0xc>
    36fa:	86 95       	lsr	r24
    36fc:	71 05       	cpc	r23, r1
    36fe:	61 05       	cpc	r22, r1
    3700:	08 94       	sec
    3702:	08 95       	ret

00003704 <__fp_zero>:
    3704:	e8 94       	clt

00003706 <__fp_szero>:
    3706:	bb 27       	eor	r27, r27
    3708:	66 27       	eor	r22, r22
    370a:	77 27       	eor	r23, r23
    370c:	cb 01       	movw	r24, r22
    370e:	97 f9       	bld	r25, 7
    3710:	08 95       	ret

00003712 <__mulsf3>:
    3712:	0b d0       	rcall	.+22     	; 0x372a <__mulsf3x>
    3714:	c4 cf       	rjmp	.-120    	; 0x369e <__fp_round>
    3716:	b5 df       	rcall	.-150    	; 0x3682 <__fp_pscA>
    3718:	28 f0       	brcs	.+10     	; 0x3724 <__mulsf3+0x12>
    371a:	ba df       	rcall	.-140    	; 0x3690 <__fp_pscB>
    371c:	18 f0       	brcs	.+6      	; 0x3724 <__mulsf3+0x12>
    371e:	95 23       	and	r25, r21
    3720:	09 f0       	breq	.+2      	; 0x3724 <__mulsf3+0x12>
    3722:	a6 cf       	rjmp	.-180    	; 0x3670 <__fp_inf>
    3724:	ab cf       	rjmp	.-170    	; 0x367c <__fp_nan>
    3726:	11 24       	eor	r1, r1
    3728:	ee cf       	rjmp	.-36     	; 0x3706 <__fp_szero>

0000372a <__mulsf3x>:
    372a:	ca df       	rcall	.-108    	; 0x36c0 <__fp_split3>
    372c:	a0 f3       	brcs	.-24     	; 0x3716 <__mulsf3+0x4>

0000372e <__mulsf3_pse>:
    372e:	95 9f       	mul	r25, r21
    3730:	d1 f3       	breq	.-12     	; 0x3726 <__mulsf3+0x14>
    3732:	95 0f       	add	r25, r21
    3734:	50 e0       	ldi	r21, 0x00	; 0
    3736:	55 1f       	adc	r21, r21
    3738:	62 9f       	mul	r22, r18
    373a:	f0 01       	movw	r30, r0
    373c:	72 9f       	mul	r23, r18
    373e:	bb 27       	eor	r27, r27
    3740:	f0 0d       	add	r31, r0
    3742:	b1 1d       	adc	r27, r1
    3744:	63 9f       	mul	r22, r19
    3746:	aa 27       	eor	r26, r26
    3748:	f0 0d       	add	r31, r0
    374a:	b1 1d       	adc	r27, r1
    374c:	aa 1f       	adc	r26, r26
    374e:	64 9f       	mul	r22, r20
    3750:	66 27       	eor	r22, r22
    3752:	b0 0d       	add	r27, r0
    3754:	a1 1d       	adc	r26, r1
    3756:	66 1f       	adc	r22, r22
    3758:	82 9f       	mul	r24, r18
    375a:	22 27       	eor	r18, r18
    375c:	b0 0d       	add	r27, r0
    375e:	a1 1d       	adc	r26, r1
    3760:	62 1f       	adc	r22, r18
    3762:	73 9f       	mul	r23, r19
    3764:	b0 0d       	add	r27, r0
    3766:	a1 1d       	adc	r26, r1
    3768:	62 1f       	adc	r22, r18
    376a:	83 9f       	mul	r24, r19
    376c:	a0 0d       	add	r26, r0
    376e:	61 1d       	adc	r22, r1
    3770:	22 1f       	adc	r18, r18
    3772:	74 9f       	mul	r23, r20
    3774:	33 27       	eor	r19, r19
    3776:	a0 0d       	add	r26, r0
    3778:	61 1d       	adc	r22, r1
    377a:	23 1f       	adc	r18, r19
    377c:	84 9f       	mul	r24, r20
    377e:	60 0d       	add	r22, r0
    3780:	21 1d       	adc	r18, r1
    3782:	82 2f       	mov	r24, r18
    3784:	76 2f       	mov	r23, r22
    3786:	6a 2f       	mov	r22, r26
    3788:	11 24       	eor	r1, r1
    378a:	9f 57       	subi	r25, 0x7F	; 127
    378c:	50 40       	sbci	r21, 0x00	; 0
    378e:	8a f0       	brmi	.+34     	; 0x37b2 <__mulsf3_pse+0x84>
    3790:	e1 f0       	breq	.+56     	; 0x37ca <__mulsf3_pse+0x9c>
    3792:	88 23       	and	r24, r24
    3794:	4a f0       	brmi	.+18     	; 0x37a8 <__mulsf3_pse+0x7a>
    3796:	ee 0f       	add	r30, r30
    3798:	ff 1f       	adc	r31, r31
    379a:	bb 1f       	adc	r27, r27
    379c:	66 1f       	adc	r22, r22
    379e:	77 1f       	adc	r23, r23
    37a0:	88 1f       	adc	r24, r24
    37a2:	91 50       	subi	r25, 0x01	; 1
    37a4:	50 40       	sbci	r21, 0x00	; 0
    37a6:	a9 f7       	brne	.-22     	; 0x3792 <__mulsf3_pse+0x64>
    37a8:	9e 3f       	cpi	r25, 0xFE	; 254
    37aa:	51 05       	cpc	r21, r1
    37ac:	70 f0       	brcs	.+28     	; 0x37ca <__mulsf3_pse+0x9c>
    37ae:	60 cf       	rjmp	.-320    	; 0x3670 <__fp_inf>
    37b0:	aa cf       	rjmp	.-172    	; 0x3706 <__fp_szero>
    37b2:	5f 3f       	cpi	r21, 0xFF	; 255
    37b4:	ec f3       	brlt	.-6      	; 0x37b0 <__mulsf3_pse+0x82>
    37b6:	98 3e       	cpi	r25, 0xE8	; 232
    37b8:	dc f3       	brlt	.-10     	; 0x37b0 <__mulsf3_pse+0x82>
    37ba:	86 95       	lsr	r24
    37bc:	77 95       	ror	r23
    37be:	67 95       	ror	r22
    37c0:	b7 95       	ror	r27
    37c2:	f7 95       	ror	r31
    37c4:	e7 95       	ror	r30
    37c6:	9f 5f       	subi	r25, 0xFF	; 255
    37c8:	c1 f7       	brne	.-16     	; 0x37ba <__mulsf3_pse+0x8c>
    37ca:	fe 2b       	or	r31, r30
    37cc:	88 0f       	add	r24, r24
    37ce:	91 1d       	adc	r25, r1
    37d0:	96 95       	lsr	r25
    37d2:	87 95       	ror	r24
    37d4:	97 f9       	bld	r25, 7
    37d6:	08 95       	ret

000037d8 <__divmodhi4>:
    37d8:	97 fb       	bst	r25, 7
    37da:	07 2e       	mov	r0, r23
    37dc:	16 f4       	brtc	.+4      	; 0x37e2 <__divmodhi4+0xa>
    37de:	00 94       	com	r0
    37e0:	06 d0       	rcall	.+12     	; 0x37ee <__divmodhi4_neg1>
    37e2:	77 fd       	sbrc	r23, 7
    37e4:	08 d0       	rcall	.+16     	; 0x37f6 <__divmodhi4_neg2>
    37e6:	44 d0       	rcall	.+136    	; 0x3870 <__udivmodhi4>
    37e8:	07 fc       	sbrc	r0, 7
    37ea:	05 d0       	rcall	.+10     	; 0x37f6 <__divmodhi4_neg2>
    37ec:	3e f4       	brtc	.+14     	; 0x37fc <__divmodhi4_exit>

000037ee <__divmodhi4_neg1>:
    37ee:	90 95       	com	r25
    37f0:	81 95       	neg	r24
    37f2:	9f 4f       	sbci	r25, 0xFF	; 255
    37f4:	08 95       	ret

000037f6 <__divmodhi4_neg2>:
    37f6:	70 95       	com	r23
    37f8:	61 95       	neg	r22
    37fa:	7f 4f       	sbci	r23, 0xFF	; 255

000037fc <__divmodhi4_exit>:
    37fc:	08 95       	ret

000037fe <__udivmodsi4>:
    37fe:	a1 e2       	ldi	r26, 0x21	; 33
    3800:	1a 2e       	mov	r1, r26
    3802:	aa 1b       	sub	r26, r26
    3804:	bb 1b       	sub	r27, r27
    3806:	fd 01       	movw	r30, r26
    3808:	0d c0       	rjmp	.+26     	; 0x3824 <__udivmodsi4_ep>

0000380a <__udivmodsi4_loop>:
    380a:	aa 1f       	adc	r26, r26
    380c:	bb 1f       	adc	r27, r27
    380e:	ee 1f       	adc	r30, r30
    3810:	ff 1f       	adc	r31, r31
    3812:	a2 17       	cp	r26, r18
    3814:	b3 07       	cpc	r27, r19
    3816:	e4 07       	cpc	r30, r20
    3818:	f5 07       	cpc	r31, r21
    381a:	20 f0       	brcs	.+8      	; 0x3824 <__udivmodsi4_ep>
    381c:	a2 1b       	sub	r26, r18
    381e:	b3 0b       	sbc	r27, r19
    3820:	e4 0b       	sbc	r30, r20
    3822:	f5 0b       	sbc	r31, r21

00003824 <__udivmodsi4_ep>:
    3824:	66 1f       	adc	r22, r22
    3826:	77 1f       	adc	r23, r23
    3828:	88 1f       	adc	r24, r24
    382a:	99 1f       	adc	r25, r25
    382c:	1a 94       	dec	r1
    382e:	69 f7       	brne	.-38     	; 0x380a <__udivmodsi4_loop>
    3830:	60 95       	com	r22
    3832:	70 95       	com	r23
    3834:	80 95       	com	r24
    3836:	90 95       	com	r25
    3838:	9b 01       	movw	r18, r22
    383a:	ac 01       	movw	r20, r24
    383c:	bd 01       	movw	r22, r26
    383e:	cf 01       	movw	r24, r30
    3840:	08 95       	ret

00003842 <__tablejump2__>:
    3842:	ee 0f       	add	r30, r30
    3844:	ff 1f       	adc	r31, r31
    3846:	88 1f       	adc	r24, r24
    3848:	8b bf       	out	0x3b, r24	; 59
    384a:	07 90       	elpm	r0, Z+
    384c:	f6 91       	elpm	r31, Z
    384e:	e0 2d       	mov	r30, r0
    3850:	19 94       	eijmp

00003852 <__umulhisi3>:
    3852:	a2 9f       	mul	r26, r18
    3854:	b0 01       	movw	r22, r0
    3856:	b3 9f       	mul	r27, r19
    3858:	c0 01       	movw	r24, r0
    385a:	a3 9f       	mul	r26, r19
    385c:	70 0d       	add	r23, r0
    385e:	81 1d       	adc	r24, r1
    3860:	11 24       	eor	r1, r1
    3862:	91 1d       	adc	r25, r1
    3864:	b2 9f       	mul	r27, r18
    3866:	70 0d       	add	r23, r0
    3868:	81 1d       	adc	r24, r1
    386a:	11 24       	eor	r1, r1
    386c:	91 1d       	adc	r25, r1
    386e:	08 95       	ret

00003870 <__udivmodhi4>:
    3870:	aa 1b       	sub	r26, r26
    3872:	bb 1b       	sub	r27, r27
    3874:	51 e1       	ldi	r21, 0x11	; 17
    3876:	07 c0       	rjmp	.+14     	; 0x3886 <__udivmodhi4_ep>

00003878 <__udivmodhi4_loop>:
    3878:	aa 1f       	adc	r26, r26
    387a:	bb 1f       	adc	r27, r27
    387c:	a6 17       	cp	r26, r22
    387e:	b7 07       	cpc	r27, r23
    3880:	10 f0       	brcs	.+4      	; 0x3886 <__udivmodhi4_ep>
    3882:	a6 1b       	sub	r26, r22
    3884:	b7 0b       	sbc	r27, r23

00003886 <__udivmodhi4_ep>:
    3886:	88 1f       	adc	r24, r24
    3888:	99 1f       	adc	r25, r25
    388a:	5a 95       	dec	r21
    388c:	a9 f7       	brne	.-22     	; 0x3878 <__udivmodhi4_loop>
    388e:	80 95       	com	r24
    3890:	90 95       	com	r25
    3892:	bc 01       	movw	r22, r24
    3894:	cd 01       	movw	r24, r26
    3896:	08 95       	ret

00003898 <malloc>:
    3898:	0f 93       	push	r16
    389a:	1f 93       	push	r17
    389c:	cf 93       	push	r28
    389e:	df 93       	push	r29
    38a0:	82 30       	cpi	r24, 0x02	; 2
    38a2:	91 05       	cpc	r25, r1
    38a4:	10 f4       	brcc	.+4      	; 0x38aa <malloc+0x12>
    38a6:	82 e0       	ldi	r24, 0x02	; 2
    38a8:	90 e0       	ldi	r25, 0x00	; 0
    38aa:	e0 91 ff 11 	lds	r30, 0x11FF	; 0x8011ff <__flp>
    38ae:	f0 91 00 12 	lds	r31, 0x1200	; 0x801200 <__flp+0x1>
    38b2:	20 e0       	ldi	r18, 0x00	; 0
    38b4:	30 e0       	ldi	r19, 0x00	; 0
    38b6:	a0 e0       	ldi	r26, 0x00	; 0
    38b8:	b0 e0       	ldi	r27, 0x00	; 0
    38ba:	30 97       	sbiw	r30, 0x00	; 0
    38bc:	19 f1       	breq	.+70     	; 0x3904 <malloc+0x6c>
    38be:	40 81       	ld	r20, Z
    38c0:	51 81       	ldd	r21, Z+1	; 0x01
    38c2:	02 81       	ldd	r16, Z+2	; 0x02
    38c4:	13 81       	ldd	r17, Z+3	; 0x03
    38c6:	48 17       	cp	r20, r24
    38c8:	59 07       	cpc	r21, r25
    38ca:	c8 f0       	brcs	.+50     	; 0x38fe <malloc+0x66>
    38cc:	84 17       	cp	r24, r20
    38ce:	95 07       	cpc	r25, r21
    38d0:	69 f4       	brne	.+26     	; 0x38ec <malloc+0x54>
    38d2:	10 97       	sbiw	r26, 0x00	; 0
    38d4:	31 f0       	breq	.+12     	; 0x38e2 <malloc+0x4a>
    38d6:	12 96       	adiw	r26, 0x02	; 2
    38d8:	0c 93       	st	X, r16
    38da:	12 97       	sbiw	r26, 0x02	; 2
    38dc:	13 96       	adiw	r26, 0x03	; 3
    38de:	1c 93       	st	X, r17
    38e0:	27 c0       	rjmp	.+78     	; 0x3930 <malloc+0x98>
    38e2:	00 93 ff 11 	sts	0x11FF, r16	; 0x8011ff <__flp>
    38e6:	10 93 00 12 	sts	0x1200, r17	; 0x801200 <__flp+0x1>
    38ea:	22 c0       	rjmp	.+68     	; 0x3930 <malloc+0x98>
    38ec:	21 15       	cp	r18, r1
    38ee:	31 05       	cpc	r19, r1
    38f0:	19 f0       	breq	.+6      	; 0x38f8 <malloc+0x60>
    38f2:	42 17       	cp	r20, r18
    38f4:	53 07       	cpc	r21, r19
    38f6:	18 f4       	brcc	.+6      	; 0x38fe <malloc+0x66>
    38f8:	9a 01       	movw	r18, r20
    38fa:	bd 01       	movw	r22, r26
    38fc:	ef 01       	movw	r28, r30
    38fe:	df 01       	movw	r26, r30
    3900:	f8 01       	movw	r30, r16
    3902:	db cf       	rjmp	.-74     	; 0x38ba <malloc+0x22>
    3904:	21 15       	cp	r18, r1
    3906:	31 05       	cpc	r19, r1
    3908:	f9 f0       	breq	.+62     	; 0x3948 <malloc+0xb0>
    390a:	28 1b       	sub	r18, r24
    390c:	39 0b       	sbc	r19, r25
    390e:	24 30       	cpi	r18, 0x04	; 4
    3910:	31 05       	cpc	r19, r1
    3912:	80 f4       	brcc	.+32     	; 0x3934 <malloc+0x9c>
    3914:	8a 81       	ldd	r24, Y+2	; 0x02
    3916:	9b 81       	ldd	r25, Y+3	; 0x03
    3918:	61 15       	cp	r22, r1
    391a:	71 05       	cpc	r23, r1
    391c:	21 f0       	breq	.+8      	; 0x3926 <malloc+0x8e>
    391e:	fb 01       	movw	r30, r22
    3920:	93 83       	std	Z+3, r25	; 0x03
    3922:	82 83       	std	Z+2, r24	; 0x02
    3924:	04 c0       	rjmp	.+8      	; 0x392e <malloc+0x96>
    3926:	90 93 00 12 	sts	0x1200, r25	; 0x801200 <__flp+0x1>
    392a:	80 93 ff 11 	sts	0x11FF, r24	; 0x8011ff <__flp>
    392e:	fe 01       	movw	r30, r28
    3930:	32 96       	adiw	r30, 0x02	; 2
    3932:	44 c0       	rjmp	.+136    	; 0x39bc <malloc+0x124>
    3934:	fe 01       	movw	r30, r28
    3936:	e2 0f       	add	r30, r18
    3938:	f3 1f       	adc	r31, r19
    393a:	81 93       	st	Z+, r24
    393c:	91 93       	st	Z+, r25
    393e:	22 50       	subi	r18, 0x02	; 2
    3940:	31 09       	sbc	r19, r1
    3942:	39 83       	std	Y+1, r19	; 0x01
    3944:	28 83       	st	Y, r18
    3946:	3a c0       	rjmp	.+116    	; 0x39bc <malloc+0x124>
    3948:	20 91 fd 11 	lds	r18, 0x11FD	; 0x8011fd <__brkval>
    394c:	30 91 fe 11 	lds	r19, 0x11FE	; 0x8011fe <__brkval+0x1>
    3950:	23 2b       	or	r18, r19
    3952:	41 f4       	brne	.+16     	; 0x3964 <malloc+0xcc>
    3954:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    3958:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    395c:	30 93 fe 11 	sts	0x11FE, r19	; 0x8011fe <__brkval+0x1>
    3960:	20 93 fd 11 	sts	0x11FD, r18	; 0x8011fd <__brkval>
    3964:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    3968:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    396c:	21 15       	cp	r18, r1
    396e:	31 05       	cpc	r19, r1
    3970:	41 f4       	brne	.+16     	; 0x3982 <malloc+0xea>
    3972:	2d b7       	in	r18, 0x3d	; 61
    3974:	3e b7       	in	r19, 0x3e	; 62
    3976:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    397a:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    397e:	24 1b       	sub	r18, r20
    3980:	35 0b       	sbc	r19, r21
    3982:	e0 91 fd 11 	lds	r30, 0x11FD	; 0x8011fd <__brkval>
    3986:	f0 91 fe 11 	lds	r31, 0x11FE	; 0x8011fe <__brkval+0x1>
    398a:	e2 17       	cp	r30, r18
    398c:	f3 07       	cpc	r31, r19
    398e:	a0 f4       	brcc	.+40     	; 0x39b8 <malloc+0x120>
    3990:	2e 1b       	sub	r18, r30
    3992:	3f 0b       	sbc	r19, r31
    3994:	28 17       	cp	r18, r24
    3996:	39 07       	cpc	r19, r25
    3998:	78 f0       	brcs	.+30     	; 0x39b8 <malloc+0x120>
    399a:	ac 01       	movw	r20, r24
    399c:	4e 5f       	subi	r20, 0xFE	; 254
    399e:	5f 4f       	sbci	r21, 0xFF	; 255
    39a0:	24 17       	cp	r18, r20
    39a2:	35 07       	cpc	r19, r21
    39a4:	48 f0       	brcs	.+18     	; 0x39b8 <malloc+0x120>
    39a6:	4e 0f       	add	r20, r30
    39a8:	5f 1f       	adc	r21, r31
    39aa:	50 93 fe 11 	sts	0x11FE, r21	; 0x8011fe <__brkval+0x1>
    39ae:	40 93 fd 11 	sts	0x11FD, r20	; 0x8011fd <__brkval>
    39b2:	81 93       	st	Z+, r24
    39b4:	91 93       	st	Z+, r25
    39b6:	02 c0       	rjmp	.+4      	; 0x39bc <malloc+0x124>
    39b8:	e0 e0       	ldi	r30, 0x00	; 0
    39ba:	f0 e0       	ldi	r31, 0x00	; 0
    39bc:	cf 01       	movw	r24, r30
    39be:	df 91       	pop	r29
    39c0:	cf 91       	pop	r28
    39c2:	1f 91       	pop	r17
    39c4:	0f 91       	pop	r16
    39c6:	08 95       	ret

000039c8 <free>:
    39c8:	cf 93       	push	r28
    39ca:	df 93       	push	r29
    39cc:	00 97       	sbiw	r24, 0x00	; 0
    39ce:	09 f4       	brne	.+2      	; 0x39d2 <free+0xa>
    39d0:	81 c0       	rjmp	.+258    	; 0x3ad4 <free+0x10c>
    39d2:	fc 01       	movw	r30, r24
    39d4:	32 97       	sbiw	r30, 0x02	; 2
    39d6:	13 82       	std	Z+3, r1	; 0x03
    39d8:	12 82       	std	Z+2, r1	; 0x02
    39da:	a0 91 ff 11 	lds	r26, 0x11FF	; 0x8011ff <__flp>
    39de:	b0 91 00 12 	lds	r27, 0x1200	; 0x801200 <__flp+0x1>
    39e2:	10 97       	sbiw	r26, 0x00	; 0
    39e4:	81 f4       	brne	.+32     	; 0x3a06 <free+0x3e>
    39e6:	20 81       	ld	r18, Z
    39e8:	31 81       	ldd	r19, Z+1	; 0x01
    39ea:	82 0f       	add	r24, r18
    39ec:	93 1f       	adc	r25, r19
    39ee:	20 91 fd 11 	lds	r18, 0x11FD	; 0x8011fd <__brkval>
    39f2:	30 91 fe 11 	lds	r19, 0x11FE	; 0x8011fe <__brkval+0x1>
    39f6:	28 17       	cp	r18, r24
    39f8:	39 07       	cpc	r19, r25
    39fa:	51 f5       	brne	.+84     	; 0x3a50 <free+0x88>
    39fc:	f0 93 fe 11 	sts	0x11FE, r31	; 0x8011fe <__brkval+0x1>
    3a00:	e0 93 fd 11 	sts	0x11FD, r30	; 0x8011fd <__brkval>
    3a04:	67 c0       	rjmp	.+206    	; 0x3ad4 <free+0x10c>
    3a06:	ed 01       	movw	r28, r26
    3a08:	20 e0       	ldi	r18, 0x00	; 0
    3a0a:	30 e0       	ldi	r19, 0x00	; 0
    3a0c:	ce 17       	cp	r28, r30
    3a0e:	df 07       	cpc	r29, r31
    3a10:	40 f4       	brcc	.+16     	; 0x3a22 <free+0x5a>
    3a12:	4a 81       	ldd	r20, Y+2	; 0x02
    3a14:	5b 81       	ldd	r21, Y+3	; 0x03
    3a16:	9e 01       	movw	r18, r28
    3a18:	41 15       	cp	r20, r1
    3a1a:	51 05       	cpc	r21, r1
    3a1c:	f1 f0       	breq	.+60     	; 0x3a5a <free+0x92>
    3a1e:	ea 01       	movw	r28, r20
    3a20:	f5 cf       	rjmp	.-22     	; 0x3a0c <free+0x44>
    3a22:	d3 83       	std	Z+3, r29	; 0x03
    3a24:	c2 83       	std	Z+2, r28	; 0x02
    3a26:	40 81       	ld	r20, Z
    3a28:	51 81       	ldd	r21, Z+1	; 0x01
    3a2a:	84 0f       	add	r24, r20
    3a2c:	95 1f       	adc	r25, r21
    3a2e:	c8 17       	cp	r28, r24
    3a30:	d9 07       	cpc	r29, r25
    3a32:	59 f4       	brne	.+22     	; 0x3a4a <free+0x82>
    3a34:	88 81       	ld	r24, Y
    3a36:	99 81       	ldd	r25, Y+1	; 0x01
    3a38:	84 0f       	add	r24, r20
    3a3a:	95 1f       	adc	r25, r21
    3a3c:	02 96       	adiw	r24, 0x02	; 2
    3a3e:	91 83       	std	Z+1, r25	; 0x01
    3a40:	80 83       	st	Z, r24
    3a42:	8a 81       	ldd	r24, Y+2	; 0x02
    3a44:	9b 81       	ldd	r25, Y+3	; 0x03
    3a46:	93 83       	std	Z+3, r25	; 0x03
    3a48:	82 83       	std	Z+2, r24	; 0x02
    3a4a:	21 15       	cp	r18, r1
    3a4c:	31 05       	cpc	r19, r1
    3a4e:	29 f4       	brne	.+10     	; 0x3a5a <free+0x92>
    3a50:	f0 93 00 12 	sts	0x1200, r31	; 0x801200 <__flp+0x1>
    3a54:	e0 93 ff 11 	sts	0x11FF, r30	; 0x8011ff <__flp>
    3a58:	3d c0       	rjmp	.+122    	; 0x3ad4 <free+0x10c>
    3a5a:	e9 01       	movw	r28, r18
    3a5c:	fb 83       	std	Y+3, r31	; 0x03
    3a5e:	ea 83       	std	Y+2, r30	; 0x02
    3a60:	49 91       	ld	r20, Y+
    3a62:	59 91       	ld	r21, Y+
    3a64:	c4 0f       	add	r28, r20
    3a66:	d5 1f       	adc	r29, r21
    3a68:	ec 17       	cp	r30, r28
    3a6a:	fd 07       	cpc	r31, r29
    3a6c:	61 f4       	brne	.+24     	; 0x3a86 <free+0xbe>
    3a6e:	80 81       	ld	r24, Z
    3a70:	91 81       	ldd	r25, Z+1	; 0x01
    3a72:	84 0f       	add	r24, r20
    3a74:	95 1f       	adc	r25, r21
    3a76:	02 96       	adiw	r24, 0x02	; 2
    3a78:	e9 01       	movw	r28, r18
    3a7a:	99 83       	std	Y+1, r25	; 0x01
    3a7c:	88 83       	st	Y, r24
    3a7e:	82 81       	ldd	r24, Z+2	; 0x02
    3a80:	93 81       	ldd	r25, Z+3	; 0x03
    3a82:	9b 83       	std	Y+3, r25	; 0x03
    3a84:	8a 83       	std	Y+2, r24	; 0x02
    3a86:	e0 e0       	ldi	r30, 0x00	; 0
    3a88:	f0 e0       	ldi	r31, 0x00	; 0
    3a8a:	12 96       	adiw	r26, 0x02	; 2
    3a8c:	8d 91       	ld	r24, X+
    3a8e:	9c 91       	ld	r25, X
    3a90:	13 97       	sbiw	r26, 0x03	; 3
    3a92:	00 97       	sbiw	r24, 0x00	; 0
    3a94:	19 f0       	breq	.+6      	; 0x3a9c <free+0xd4>
    3a96:	fd 01       	movw	r30, r26
    3a98:	dc 01       	movw	r26, r24
    3a9a:	f7 cf       	rjmp	.-18     	; 0x3a8a <free+0xc2>
    3a9c:	8d 91       	ld	r24, X+
    3a9e:	9c 91       	ld	r25, X
    3aa0:	11 97       	sbiw	r26, 0x01	; 1
    3aa2:	9d 01       	movw	r18, r26
    3aa4:	2e 5f       	subi	r18, 0xFE	; 254
    3aa6:	3f 4f       	sbci	r19, 0xFF	; 255
    3aa8:	82 0f       	add	r24, r18
    3aaa:	93 1f       	adc	r25, r19
    3aac:	20 91 fd 11 	lds	r18, 0x11FD	; 0x8011fd <__brkval>
    3ab0:	30 91 fe 11 	lds	r19, 0x11FE	; 0x8011fe <__brkval+0x1>
    3ab4:	28 17       	cp	r18, r24
    3ab6:	39 07       	cpc	r19, r25
    3ab8:	69 f4       	brne	.+26     	; 0x3ad4 <free+0x10c>
    3aba:	30 97       	sbiw	r30, 0x00	; 0
    3abc:	29 f4       	brne	.+10     	; 0x3ac8 <free+0x100>
    3abe:	10 92 00 12 	sts	0x1200, r1	; 0x801200 <__flp+0x1>
    3ac2:	10 92 ff 11 	sts	0x11FF, r1	; 0x8011ff <__flp>
    3ac6:	02 c0       	rjmp	.+4      	; 0x3acc <free+0x104>
    3ac8:	13 82       	std	Z+3, r1	; 0x03
    3aca:	12 82       	std	Z+2, r1	; 0x02
    3acc:	b0 93 fe 11 	sts	0x11FE, r27	; 0x8011fe <__brkval+0x1>
    3ad0:	a0 93 fd 11 	sts	0x11FD, r26	; 0x8011fd <__brkval>
    3ad4:	df 91       	pop	r29
    3ad6:	cf 91       	pop	r28
    3ad8:	08 95       	ret

00003ada <do_rand>:
    3ada:	8f 92       	push	r8
    3adc:	9f 92       	push	r9
    3ade:	af 92       	push	r10
    3ae0:	bf 92       	push	r11
    3ae2:	cf 92       	push	r12
    3ae4:	df 92       	push	r13
    3ae6:	ef 92       	push	r14
    3ae8:	ff 92       	push	r15
    3aea:	cf 93       	push	r28
    3aec:	df 93       	push	r29
    3aee:	ec 01       	movw	r28, r24
    3af0:	68 81       	ld	r22, Y
    3af2:	79 81       	ldd	r23, Y+1	; 0x01
    3af4:	8a 81       	ldd	r24, Y+2	; 0x02
    3af6:	9b 81       	ldd	r25, Y+3	; 0x03
    3af8:	61 15       	cp	r22, r1
    3afa:	71 05       	cpc	r23, r1
    3afc:	81 05       	cpc	r24, r1
    3afe:	91 05       	cpc	r25, r1
    3b00:	21 f4       	brne	.+8      	; 0x3b0a <do_rand+0x30>
    3b02:	64 e2       	ldi	r22, 0x24	; 36
    3b04:	79 ed       	ldi	r23, 0xD9	; 217
    3b06:	8b e5       	ldi	r24, 0x5B	; 91
    3b08:	97 e0       	ldi	r25, 0x07	; 7
    3b0a:	2d e1       	ldi	r18, 0x1D	; 29
    3b0c:	33 ef       	ldi	r19, 0xF3	; 243
    3b0e:	41 e0       	ldi	r20, 0x01	; 1
    3b10:	50 e0       	ldi	r21, 0x00	; 0
    3b12:	3c d3       	rcall	.+1656   	; 0x418c <__divmodsi4>
    3b14:	49 01       	movw	r8, r18
    3b16:	5a 01       	movw	r10, r20
    3b18:	9b 01       	movw	r18, r22
    3b1a:	ac 01       	movw	r20, r24
    3b1c:	a7 ea       	ldi	r26, 0xA7	; 167
    3b1e:	b1 e4       	ldi	r27, 0x41	; 65
    3b20:	51 d3       	rcall	.+1698   	; 0x41c4 <__muluhisi3>
    3b22:	6b 01       	movw	r12, r22
    3b24:	7c 01       	movw	r14, r24
    3b26:	ac ee       	ldi	r26, 0xEC	; 236
    3b28:	b4 ef       	ldi	r27, 0xF4	; 244
    3b2a:	a5 01       	movw	r20, r10
    3b2c:	94 01       	movw	r18, r8
    3b2e:	56 d3       	rcall	.+1708   	; 0x41dc <__mulohisi3>
    3b30:	dc 01       	movw	r26, r24
    3b32:	cb 01       	movw	r24, r22
    3b34:	8c 0d       	add	r24, r12
    3b36:	9d 1d       	adc	r25, r13
    3b38:	ae 1d       	adc	r26, r14
    3b3a:	bf 1d       	adc	r27, r15
    3b3c:	b7 ff       	sbrs	r27, 7
    3b3e:	03 c0       	rjmp	.+6      	; 0x3b46 <do_rand+0x6c>
    3b40:	01 97       	sbiw	r24, 0x01	; 1
    3b42:	a1 09       	sbc	r26, r1
    3b44:	b0 48       	sbci	r27, 0x80	; 128
    3b46:	88 83       	st	Y, r24
    3b48:	99 83       	std	Y+1, r25	; 0x01
    3b4a:	aa 83       	std	Y+2, r26	; 0x02
    3b4c:	bb 83       	std	Y+3, r27	; 0x03
    3b4e:	9f 77       	andi	r25, 0x7F	; 127
    3b50:	df 91       	pop	r29
    3b52:	cf 91       	pop	r28
    3b54:	ff 90       	pop	r15
    3b56:	ef 90       	pop	r14
    3b58:	df 90       	pop	r13
    3b5a:	cf 90       	pop	r12
    3b5c:	bf 90       	pop	r11
    3b5e:	af 90       	pop	r10
    3b60:	9f 90       	pop	r9
    3b62:	8f 90       	pop	r8
    3b64:	08 95       	ret

00003b66 <rand_r>:
    3b66:	b9 cf       	rjmp	.-142    	; 0x3ada <do_rand>

00003b68 <rand>:
    3b68:	86 e0       	ldi	r24, 0x06	; 6
    3b6a:	92 e0       	ldi	r25, 0x02	; 2
    3b6c:	b6 cf       	rjmp	.-148    	; 0x3ada <do_rand>

00003b6e <srand>:
    3b6e:	a0 e0       	ldi	r26, 0x00	; 0
    3b70:	b0 e0       	ldi	r27, 0x00	; 0
    3b72:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <next>
    3b76:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <next+0x1>
    3b7a:	a0 93 08 02 	sts	0x0208, r26	; 0x800208 <next+0x2>
    3b7e:	b0 93 09 02 	sts	0x0209, r27	; 0x800209 <next+0x3>
    3b82:	08 95       	ret

00003b84 <abort>:
    3b84:	81 e0       	ldi	r24, 0x01	; 1
    3b86:	90 e0       	ldi	r25, 0x00	; 0
    3b88:	f8 94       	cli
    3b8a:	2c c3       	rjmp	.+1624   	; 0x41e4 <_exit>

00003b8c <memcpy>:
    3b8c:	fb 01       	movw	r30, r22
    3b8e:	dc 01       	movw	r26, r24
    3b90:	02 c0       	rjmp	.+4      	; 0x3b96 <memcpy+0xa>
    3b92:	01 90       	ld	r0, Z+
    3b94:	0d 92       	st	X+, r0
    3b96:	41 50       	subi	r20, 0x01	; 1
    3b98:	50 40       	sbci	r21, 0x00	; 0
    3b9a:	d8 f7       	brcc	.-10     	; 0x3b92 <memcpy+0x6>
    3b9c:	08 95       	ret

00003b9e <memset>:
    3b9e:	dc 01       	movw	r26, r24
    3ba0:	01 c0       	rjmp	.+2      	; 0x3ba4 <memset+0x6>
    3ba2:	6d 93       	st	X+, r22
    3ba4:	41 50       	subi	r20, 0x01	; 1
    3ba6:	50 40       	sbci	r21, 0x00	; 0
    3ba8:	e0 f7       	brcc	.-8      	; 0x3ba2 <memset+0x4>
    3baa:	08 95       	ret

00003bac <printf>:
    3bac:	cf 93       	push	r28
    3bae:	df 93       	push	r29
    3bb0:	cd b7       	in	r28, 0x3d	; 61
    3bb2:	de b7       	in	r29, 0x3e	; 62
    3bb4:	ae 01       	movw	r20, r28
    3bb6:	4a 5f       	subi	r20, 0xFA	; 250
    3bb8:	5f 4f       	sbci	r21, 0xFF	; 255
    3bba:	fa 01       	movw	r30, r20
    3bbc:	61 91       	ld	r22, Z+
    3bbe:	71 91       	ld	r23, Z+
    3bc0:	af 01       	movw	r20, r30
    3bc2:	80 91 03 12 	lds	r24, 0x1203	; 0x801203 <__iob+0x2>
    3bc6:	90 91 04 12 	lds	r25, 0x1204	; 0x801204 <__iob+0x3>
    3bca:	33 d0       	rcall	.+102    	; 0x3c32 <vfprintf>
    3bcc:	df 91       	pop	r29
    3bce:	cf 91       	pop	r28
    3bd0:	08 95       	ret

00003bd2 <puts>:
    3bd2:	0f 93       	push	r16
    3bd4:	1f 93       	push	r17
    3bd6:	cf 93       	push	r28
    3bd8:	df 93       	push	r29
    3bda:	e0 91 03 12 	lds	r30, 0x1203	; 0x801203 <__iob+0x2>
    3bde:	f0 91 04 12 	lds	r31, 0x1204	; 0x801204 <__iob+0x3>
    3be2:	23 81       	ldd	r18, Z+3	; 0x03
    3be4:	21 ff       	sbrs	r18, 1
    3be6:	1b c0       	rjmp	.+54     	; 0x3c1e <puts+0x4c>
    3be8:	8c 01       	movw	r16, r24
    3bea:	d0 e0       	ldi	r29, 0x00	; 0
    3bec:	c0 e0       	ldi	r28, 0x00	; 0
    3bee:	f8 01       	movw	r30, r16
    3bf0:	81 91       	ld	r24, Z+
    3bf2:	8f 01       	movw	r16, r30
    3bf4:	60 91 03 12 	lds	r22, 0x1203	; 0x801203 <__iob+0x2>
    3bf8:	70 91 04 12 	lds	r23, 0x1204	; 0x801204 <__iob+0x3>
    3bfc:	db 01       	movw	r26, r22
    3bfe:	18 96       	adiw	r26, 0x08	; 8
    3c00:	ed 91       	ld	r30, X+
    3c02:	fc 91       	ld	r31, X
    3c04:	19 97       	sbiw	r26, 0x09	; 9
    3c06:	88 23       	and	r24, r24
    3c08:	31 f0       	breq	.+12     	; 0x3c16 <puts+0x44>
    3c0a:	19 95       	eicall
    3c0c:	89 2b       	or	r24, r25
    3c0e:	79 f3       	breq	.-34     	; 0x3bee <puts+0x1c>
    3c10:	df ef       	ldi	r29, 0xFF	; 255
    3c12:	cf ef       	ldi	r28, 0xFF	; 255
    3c14:	ec cf       	rjmp	.-40     	; 0x3bee <puts+0x1c>
    3c16:	8a e0       	ldi	r24, 0x0A	; 10
    3c18:	19 95       	eicall
    3c1a:	89 2b       	or	r24, r25
    3c1c:	19 f0       	breq	.+6      	; 0x3c24 <puts+0x52>
    3c1e:	8f ef       	ldi	r24, 0xFF	; 255
    3c20:	9f ef       	ldi	r25, 0xFF	; 255
    3c22:	02 c0       	rjmp	.+4      	; 0x3c28 <puts+0x56>
    3c24:	8d 2f       	mov	r24, r29
    3c26:	9c 2f       	mov	r25, r28
    3c28:	df 91       	pop	r29
    3c2a:	cf 91       	pop	r28
    3c2c:	1f 91       	pop	r17
    3c2e:	0f 91       	pop	r16
    3c30:	08 95       	ret

00003c32 <vfprintf>:
    3c32:	2f 92       	push	r2
    3c34:	3f 92       	push	r3
    3c36:	4f 92       	push	r4
    3c38:	5f 92       	push	r5
    3c3a:	6f 92       	push	r6
    3c3c:	7f 92       	push	r7
    3c3e:	8f 92       	push	r8
    3c40:	9f 92       	push	r9
    3c42:	af 92       	push	r10
    3c44:	bf 92       	push	r11
    3c46:	cf 92       	push	r12
    3c48:	df 92       	push	r13
    3c4a:	ef 92       	push	r14
    3c4c:	ff 92       	push	r15
    3c4e:	0f 93       	push	r16
    3c50:	1f 93       	push	r17
    3c52:	cf 93       	push	r28
    3c54:	df 93       	push	r29
    3c56:	cd b7       	in	r28, 0x3d	; 61
    3c58:	de b7       	in	r29, 0x3e	; 62
    3c5a:	2b 97       	sbiw	r28, 0x0b	; 11
    3c5c:	0f b6       	in	r0, 0x3f	; 63
    3c5e:	f8 94       	cli
    3c60:	de bf       	out	0x3e, r29	; 62
    3c62:	0f be       	out	0x3f, r0	; 63
    3c64:	cd bf       	out	0x3d, r28	; 61
    3c66:	6c 01       	movw	r12, r24
    3c68:	7b 01       	movw	r14, r22
    3c6a:	8a 01       	movw	r16, r20
    3c6c:	fc 01       	movw	r30, r24
    3c6e:	17 82       	std	Z+7, r1	; 0x07
    3c70:	16 82       	std	Z+6, r1	; 0x06
    3c72:	83 81       	ldd	r24, Z+3	; 0x03
    3c74:	81 ff       	sbrs	r24, 1
    3c76:	bf c1       	rjmp	.+894    	; 0x3ff6 <vfprintf+0x3c4>
    3c78:	ce 01       	movw	r24, r28
    3c7a:	01 96       	adiw	r24, 0x01	; 1
    3c7c:	3c 01       	movw	r6, r24
    3c7e:	f6 01       	movw	r30, r12
    3c80:	93 81       	ldd	r25, Z+3	; 0x03
    3c82:	f7 01       	movw	r30, r14
    3c84:	93 fd       	sbrc	r25, 3
    3c86:	85 91       	lpm	r24, Z+
    3c88:	93 ff       	sbrs	r25, 3
    3c8a:	81 91       	ld	r24, Z+
    3c8c:	7f 01       	movw	r14, r30
    3c8e:	88 23       	and	r24, r24
    3c90:	09 f4       	brne	.+2      	; 0x3c94 <vfprintf+0x62>
    3c92:	ad c1       	rjmp	.+858    	; 0x3fee <vfprintf+0x3bc>
    3c94:	85 32       	cpi	r24, 0x25	; 37
    3c96:	39 f4       	brne	.+14     	; 0x3ca6 <vfprintf+0x74>
    3c98:	93 fd       	sbrc	r25, 3
    3c9a:	85 91       	lpm	r24, Z+
    3c9c:	93 ff       	sbrs	r25, 3
    3c9e:	81 91       	ld	r24, Z+
    3ca0:	7f 01       	movw	r14, r30
    3ca2:	85 32       	cpi	r24, 0x25	; 37
    3ca4:	21 f4       	brne	.+8      	; 0x3cae <vfprintf+0x7c>
    3ca6:	b6 01       	movw	r22, r12
    3ca8:	90 e0       	ldi	r25, 0x00	; 0
    3caa:	d6 d1       	rcall	.+940    	; 0x4058 <fputc>
    3cac:	e8 cf       	rjmp	.-48     	; 0x3c7e <vfprintf+0x4c>
    3cae:	91 2c       	mov	r9, r1
    3cb0:	21 2c       	mov	r2, r1
    3cb2:	31 2c       	mov	r3, r1
    3cb4:	ff e1       	ldi	r31, 0x1F	; 31
    3cb6:	f3 15       	cp	r31, r3
    3cb8:	d8 f0       	brcs	.+54     	; 0x3cf0 <vfprintf+0xbe>
    3cba:	8b 32       	cpi	r24, 0x2B	; 43
    3cbc:	79 f0       	breq	.+30     	; 0x3cdc <vfprintf+0xaa>
    3cbe:	38 f4       	brcc	.+14     	; 0x3cce <vfprintf+0x9c>
    3cc0:	80 32       	cpi	r24, 0x20	; 32
    3cc2:	79 f0       	breq	.+30     	; 0x3ce2 <vfprintf+0xb0>
    3cc4:	83 32       	cpi	r24, 0x23	; 35
    3cc6:	a1 f4       	brne	.+40     	; 0x3cf0 <vfprintf+0xbe>
    3cc8:	23 2d       	mov	r18, r3
    3cca:	20 61       	ori	r18, 0x10	; 16
    3ccc:	1d c0       	rjmp	.+58     	; 0x3d08 <vfprintf+0xd6>
    3cce:	8d 32       	cpi	r24, 0x2D	; 45
    3cd0:	61 f0       	breq	.+24     	; 0x3cea <vfprintf+0xb8>
    3cd2:	80 33       	cpi	r24, 0x30	; 48
    3cd4:	69 f4       	brne	.+26     	; 0x3cf0 <vfprintf+0xbe>
    3cd6:	23 2d       	mov	r18, r3
    3cd8:	21 60       	ori	r18, 0x01	; 1
    3cda:	16 c0       	rjmp	.+44     	; 0x3d08 <vfprintf+0xd6>
    3cdc:	83 2d       	mov	r24, r3
    3cde:	82 60       	ori	r24, 0x02	; 2
    3ce0:	38 2e       	mov	r3, r24
    3ce2:	e3 2d       	mov	r30, r3
    3ce4:	e4 60       	ori	r30, 0x04	; 4
    3ce6:	3e 2e       	mov	r3, r30
    3ce8:	2a c0       	rjmp	.+84     	; 0x3d3e <vfprintf+0x10c>
    3cea:	f3 2d       	mov	r31, r3
    3cec:	f8 60       	ori	r31, 0x08	; 8
    3cee:	1d c0       	rjmp	.+58     	; 0x3d2a <vfprintf+0xf8>
    3cf0:	37 fc       	sbrc	r3, 7
    3cf2:	2d c0       	rjmp	.+90     	; 0x3d4e <vfprintf+0x11c>
    3cf4:	20 ed       	ldi	r18, 0xD0	; 208
    3cf6:	28 0f       	add	r18, r24
    3cf8:	2a 30       	cpi	r18, 0x0A	; 10
    3cfa:	40 f0       	brcs	.+16     	; 0x3d0c <vfprintf+0xda>
    3cfc:	8e 32       	cpi	r24, 0x2E	; 46
    3cfe:	b9 f4       	brne	.+46     	; 0x3d2e <vfprintf+0xfc>
    3d00:	36 fc       	sbrc	r3, 6
    3d02:	75 c1       	rjmp	.+746    	; 0x3fee <vfprintf+0x3bc>
    3d04:	23 2d       	mov	r18, r3
    3d06:	20 64       	ori	r18, 0x40	; 64
    3d08:	32 2e       	mov	r3, r18
    3d0a:	19 c0       	rjmp	.+50     	; 0x3d3e <vfprintf+0x10c>
    3d0c:	36 fe       	sbrs	r3, 6
    3d0e:	06 c0       	rjmp	.+12     	; 0x3d1c <vfprintf+0xea>
    3d10:	8a e0       	ldi	r24, 0x0A	; 10
    3d12:	98 9e       	mul	r9, r24
    3d14:	20 0d       	add	r18, r0
    3d16:	11 24       	eor	r1, r1
    3d18:	92 2e       	mov	r9, r18
    3d1a:	11 c0       	rjmp	.+34     	; 0x3d3e <vfprintf+0x10c>
    3d1c:	ea e0       	ldi	r30, 0x0A	; 10
    3d1e:	2e 9e       	mul	r2, r30
    3d20:	20 0d       	add	r18, r0
    3d22:	11 24       	eor	r1, r1
    3d24:	22 2e       	mov	r2, r18
    3d26:	f3 2d       	mov	r31, r3
    3d28:	f0 62       	ori	r31, 0x20	; 32
    3d2a:	3f 2e       	mov	r3, r31
    3d2c:	08 c0       	rjmp	.+16     	; 0x3d3e <vfprintf+0x10c>
    3d2e:	8c 36       	cpi	r24, 0x6C	; 108
    3d30:	21 f4       	brne	.+8      	; 0x3d3a <vfprintf+0x108>
    3d32:	83 2d       	mov	r24, r3
    3d34:	80 68       	ori	r24, 0x80	; 128
    3d36:	38 2e       	mov	r3, r24
    3d38:	02 c0       	rjmp	.+4      	; 0x3d3e <vfprintf+0x10c>
    3d3a:	88 36       	cpi	r24, 0x68	; 104
    3d3c:	41 f4       	brne	.+16     	; 0x3d4e <vfprintf+0x11c>
    3d3e:	f7 01       	movw	r30, r14
    3d40:	93 fd       	sbrc	r25, 3
    3d42:	85 91       	lpm	r24, Z+
    3d44:	93 ff       	sbrs	r25, 3
    3d46:	81 91       	ld	r24, Z+
    3d48:	7f 01       	movw	r14, r30
    3d4a:	81 11       	cpse	r24, r1
    3d4c:	b3 cf       	rjmp	.-154    	; 0x3cb4 <vfprintf+0x82>
    3d4e:	98 2f       	mov	r25, r24
    3d50:	9f 7d       	andi	r25, 0xDF	; 223
    3d52:	95 54       	subi	r25, 0x45	; 69
    3d54:	93 30       	cpi	r25, 0x03	; 3
    3d56:	28 f4       	brcc	.+10     	; 0x3d62 <vfprintf+0x130>
    3d58:	0c 5f       	subi	r16, 0xFC	; 252
    3d5a:	1f 4f       	sbci	r17, 0xFF	; 255
    3d5c:	9f e3       	ldi	r25, 0x3F	; 63
    3d5e:	99 83       	std	Y+1, r25	; 0x01
    3d60:	0d c0       	rjmp	.+26     	; 0x3d7c <vfprintf+0x14a>
    3d62:	83 36       	cpi	r24, 0x63	; 99
    3d64:	31 f0       	breq	.+12     	; 0x3d72 <vfprintf+0x140>
    3d66:	83 37       	cpi	r24, 0x73	; 115
    3d68:	71 f0       	breq	.+28     	; 0x3d86 <vfprintf+0x154>
    3d6a:	83 35       	cpi	r24, 0x53	; 83
    3d6c:	09 f0       	breq	.+2      	; 0x3d70 <vfprintf+0x13e>
    3d6e:	55 c0       	rjmp	.+170    	; 0x3e1a <vfprintf+0x1e8>
    3d70:	20 c0       	rjmp	.+64     	; 0x3db2 <vfprintf+0x180>
    3d72:	f8 01       	movw	r30, r16
    3d74:	80 81       	ld	r24, Z
    3d76:	89 83       	std	Y+1, r24	; 0x01
    3d78:	0e 5f       	subi	r16, 0xFE	; 254
    3d7a:	1f 4f       	sbci	r17, 0xFF	; 255
    3d7c:	88 24       	eor	r8, r8
    3d7e:	83 94       	inc	r8
    3d80:	91 2c       	mov	r9, r1
    3d82:	53 01       	movw	r10, r6
    3d84:	12 c0       	rjmp	.+36     	; 0x3daa <vfprintf+0x178>
    3d86:	28 01       	movw	r4, r16
    3d88:	f2 e0       	ldi	r31, 0x02	; 2
    3d8a:	4f 0e       	add	r4, r31
    3d8c:	51 1c       	adc	r5, r1
    3d8e:	f8 01       	movw	r30, r16
    3d90:	a0 80       	ld	r10, Z
    3d92:	b1 80       	ldd	r11, Z+1	; 0x01
    3d94:	36 fe       	sbrs	r3, 6
    3d96:	03 c0       	rjmp	.+6      	; 0x3d9e <vfprintf+0x16c>
    3d98:	69 2d       	mov	r22, r9
    3d9a:	70 e0       	ldi	r23, 0x00	; 0
    3d9c:	02 c0       	rjmp	.+4      	; 0x3da2 <vfprintf+0x170>
    3d9e:	6f ef       	ldi	r22, 0xFF	; 255
    3da0:	7f ef       	ldi	r23, 0xFF	; 255
    3da2:	c5 01       	movw	r24, r10
    3da4:	4e d1       	rcall	.+668    	; 0x4042 <strnlen>
    3da6:	4c 01       	movw	r8, r24
    3da8:	82 01       	movw	r16, r4
    3daa:	f3 2d       	mov	r31, r3
    3dac:	ff 77       	andi	r31, 0x7F	; 127
    3dae:	3f 2e       	mov	r3, r31
    3db0:	15 c0       	rjmp	.+42     	; 0x3ddc <vfprintf+0x1aa>
    3db2:	28 01       	movw	r4, r16
    3db4:	22 e0       	ldi	r18, 0x02	; 2
    3db6:	42 0e       	add	r4, r18
    3db8:	51 1c       	adc	r5, r1
    3dba:	f8 01       	movw	r30, r16
    3dbc:	a0 80       	ld	r10, Z
    3dbe:	b1 80       	ldd	r11, Z+1	; 0x01
    3dc0:	36 fe       	sbrs	r3, 6
    3dc2:	03 c0       	rjmp	.+6      	; 0x3dca <vfprintf+0x198>
    3dc4:	69 2d       	mov	r22, r9
    3dc6:	70 e0       	ldi	r23, 0x00	; 0
    3dc8:	02 c0       	rjmp	.+4      	; 0x3dce <vfprintf+0x19c>
    3dca:	6f ef       	ldi	r22, 0xFF	; 255
    3dcc:	7f ef       	ldi	r23, 0xFF	; 255
    3dce:	c5 01       	movw	r24, r10
    3dd0:	2d d1       	rcall	.+602    	; 0x402c <strnlen_P>
    3dd2:	4c 01       	movw	r8, r24
    3dd4:	f3 2d       	mov	r31, r3
    3dd6:	f0 68       	ori	r31, 0x80	; 128
    3dd8:	3f 2e       	mov	r3, r31
    3dda:	82 01       	movw	r16, r4
    3ddc:	33 fc       	sbrc	r3, 3
    3dde:	19 c0       	rjmp	.+50     	; 0x3e12 <vfprintf+0x1e0>
    3de0:	82 2d       	mov	r24, r2
    3de2:	90 e0       	ldi	r25, 0x00	; 0
    3de4:	88 16       	cp	r8, r24
    3de6:	99 06       	cpc	r9, r25
    3de8:	a0 f4       	brcc	.+40     	; 0x3e12 <vfprintf+0x1e0>
    3dea:	b6 01       	movw	r22, r12
    3dec:	80 e2       	ldi	r24, 0x20	; 32
    3dee:	90 e0       	ldi	r25, 0x00	; 0
    3df0:	33 d1       	rcall	.+614    	; 0x4058 <fputc>
    3df2:	2a 94       	dec	r2
    3df4:	f5 cf       	rjmp	.-22     	; 0x3de0 <vfprintf+0x1ae>
    3df6:	f5 01       	movw	r30, r10
    3df8:	37 fc       	sbrc	r3, 7
    3dfa:	85 91       	lpm	r24, Z+
    3dfc:	37 fe       	sbrs	r3, 7
    3dfe:	81 91       	ld	r24, Z+
    3e00:	5f 01       	movw	r10, r30
    3e02:	b6 01       	movw	r22, r12
    3e04:	90 e0       	ldi	r25, 0x00	; 0
    3e06:	28 d1       	rcall	.+592    	; 0x4058 <fputc>
    3e08:	21 10       	cpse	r2, r1
    3e0a:	2a 94       	dec	r2
    3e0c:	21 e0       	ldi	r18, 0x01	; 1
    3e0e:	82 1a       	sub	r8, r18
    3e10:	91 08       	sbc	r9, r1
    3e12:	81 14       	cp	r8, r1
    3e14:	91 04       	cpc	r9, r1
    3e16:	79 f7       	brne	.-34     	; 0x3df6 <vfprintf+0x1c4>
    3e18:	e1 c0       	rjmp	.+450    	; 0x3fdc <vfprintf+0x3aa>
    3e1a:	84 36       	cpi	r24, 0x64	; 100
    3e1c:	11 f0       	breq	.+4      	; 0x3e22 <vfprintf+0x1f0>
    3e1e:	89 36       	cpi	r24, 0x69	; 105
    3e20:	39 f5       	brne	.+78     	; 0x3e70 <vfprintf+0x23e>
    3e22:	f8 01       	movw	r30, r16
    3e24:	37 fe       	sbrs	r3, 7
    3e26:	07 c0       	rjmp	.+14     	; 0x3e36 <vfprintf+0x204>
    3e28:	60 81       	ld	r22, Z
    3e2a:	71 81       	ldd	r23, Z+1	; 0x01
    3e2c:	82 81       	ldd	r24, Z+2	; 0x02
    3e2e:	93 81       	ldd	r25, Z+3	; 0x03
    3e30:	0c 5f       	subi	r16, 0xFC	; 252
    3e32:	1f 4f       	sbci	r17, 0xFF	; 255
    3e34:	08 c0       	rjmp	.+16     	; 0x3e46 <vfprintf+0x214>
    3e36:	60 81       	ld	r22, Z
    3e38:	71 81       	ldd	r23, Z+1	; 0x01
    3e3a:	07 2e       	mov	r0, r23
    3e3c:	00 0c       	add	r0, r0
    3e3e:	88 0b       	sbc	r24, r24
    3e40:	99 0b       	sbc	r25, r25
    3e42:	0e 5f       	subi	r16, 0xFE	; 254
    3e44:	1f 4f       	sbci	r17, 0xFF	; 255
    3e46:	f3 2d       	mov	r31, r3
    3e48:	ff 76       	andi	r31, 0x6F	; 111
    3e4a:	3f 2e       	mov	r3, r31
    3e4c:	97 ff       	sbrs	r25, 7
    3e4e:	09 c0       	rjmp	.+18     	; 0x3e62 <vfprintf+0x230>
    3e50:	90 95       	com	r25
    3e52:	80 95       	com	r24
    3e54:	70 95       	com	r23
    3e56:	61 95       	neg	r22
    3e58:	7f 4f       	sbci	r23, 0xFF	; 255
    3e5a:	8f 4f       	sbci	r24, 0xFF	; 255
    3e5c:	9f 4f       	sbci	r25, 0xFF	; 255
    3e5e:	f0 68       	ori	r31, 0x80	; 128
    3e60:	3f 2e       	mov	r3, r31
    3e62:	2a e0       	ldi	r18, 0x0A	; 10
    3e64:	30 e0       	ldi	r19, 0x00	; 0
    3e66:	a3 01       	movw	r20, r6
    3e68:	33 d1       	rcall	.+614    	; 0x40d0 <__ultoa_invert>
    3e6a:	88 2e       	mov	r8, r24
    3e6c:	86 18       	sub	r8, r6
    3e6e:	44 c0       	rjmp	.+136    	; 0x3ef8 <vfprintf+0x2c6>
    3e70:	85 37       	cpi	r24, 0x75	; 117
    3e72:	31 f4       	brne	.+12     	; 0x3e80 <vfprintf+0x24e>
    3e74:	23 2d       	mov	r18, r3
    3e76:	2f 7e       	andi	r18, 0xEF	; 239
    3e78:	b2 2e       	mov	r11, r18
    3e7a:	2a e0       	ldi	r18, 0x0A	; 10
    3e7c:	30 e0       	ldi	r19, 0x00	; 0
    3e7e:	25 c0       	rjmp	.+74     	; 0x3eca <vfprintf+0x298>
    3e80:	93 2d       	mov	r25, r3
    3e82:	99 7f       	andi	r25, 0xF9	; 249
    3e84:	b9 2e       	mov	r11, r25
    3e86:	8f 36       	cpi	r24, 0x6F	; 111
    3e88:	c1 f0       	breq	.+48     	; 0x3eba <vfprintf+0x288>
    3e8a:	18 f4       	brcc	.+6      	; 0x3e92 <vfprintf+0x260>
    3e8c:	88 35       	cpi	r24, 0x58	; 88
    3e8e:	79 f0       	breq	.+30     	; 0x3eae <vfprintf+0x27c>
    3e90:	ae c0       	rjmp	.+348    	; 0x3fee <vfprintf+0x3bc>
    3e92:	80 37       	cpi	r24, 0x70	; 112
    3e94:	19 f0       	breq	.+6      	; 0x3e9c <vfprintf+0x26a>
    3e96:	88 37       	cpi	r24, 0x78	; 120
    3e98:	21 f0       	breq	.+8      	; 0x3ea2 <vfprintf+0x270>
    3e9a:	a9 c0       	rjmp	.+338    	; 0x3fee <vfprintf+0x3bc>
    3e9c:	e9 2f       	mov	r30, r25
    3e9e:	e0 61       	ori	r30, 0x10	; 16
    3ea0:	be 2e       	mov	r11, r30
    3ea2:	b4 fe       	sbrs	r11, 4
    3ea4:	0d c0       	rjmp	.+26     	; 0x3ec0 <vfprintf+0x28e>
    3ea6:	fb 2d       	mov	r31, r11
    3ea8:	f4 60       	ori	r31, 0x04	; 4
    3eaa:	bf 2e       	mov	r11, r31
    3eac:	09 c0       	rjmp	.+18     	; 0x3ec0 <vfprintf+0x28e>
    3eae:	34 fe       	sbrs	r3, 4
    3eb0:	0a c0       	rjmp	.+20     	; 0x3ec6 <vfprintf+0x294>
    3eb2:	29 2f       	mov	r18, r25
    3eb4:	26 60       	ori	r18, 0x06	; 6
    3eb6:	b2 2e       	mov	r11, r18
    3eb8:	06 c0       	rjmp	.+12     	; 0x3ec6 <vfprintf+0x294>
    3eba:	28 e0       	ldi	r18, 0x08	; 8
    3ebc:	30 e0       	ldi	r19, 0x00	; 0
    3ebe:	05 c0       	rjmp	.+10     	; 0x3eca <vfprintf+0x298>
    3ec0:	20 e1       	ldi	r18, 0x10	; 16
    3ec2:	30 e0       	ldi	r19, 0x00	; 0
    3ec4:	02 c0       	rjmp	.+4      	; 0x3eca <vfprintf+0x298>
    3ec6:	20 e1       	ldi	r18, 0x10	; 16
    3ec8:	32 e0       	ldi	r19, 0x02	; 2
    3eca:	f8 01       	movw	r30, r16
    3ecc:	b7 fe       	sbrs	r11, 7
    3ece:	07 c0       	rjmp	.+14     	; 0x3ede <vfprintf+0x2ac>
    3ed0:	60 81       	ld	r22, Z
    3ed2:	71 81       	ldd	r23, Z+1	; 0x01
    3ed4:	82 81       	ldd	r24, Z+2	; 0x02
    3ed6:	93 81       	ldd	r25, Z+3	; 0x03
    3ed8:	0c 5f       	subi	r16, 0xFC	; 252
    3eda:	1f 4f       	sbci	r17, 0xFF	; 255
    3edc:	06 c0       	rjmp	.+12     	; 0x3eea <vfprintf+0x2b8>
    3ede:	60 81       	ld	r22, Z
    3ee0:	71 81       	ldd	r23, Z+1	; 0x01
    3ee2:	80 e0       	ldi	r24, 0x00	; 0
    3ee4:	90 e0       	ldi	r25, 0x00	; 0
    3ee6:	0e 5f       	subi	r16, 0xFE	; 254
    3ee8:	1f 4f       	sbci	r17, 0xFF	; 255
    3eea:	a3 01       	movw	r20, r6
    3eec:	f1 d0       	rcall	.+482    	; 0x40d0 <__ultoa_invert>
    3eee:	88 2e       	mov	r8, r24
    3ef0:	86 18       	sub	r8, r6
    3ef2:	fb 2d       	mov	r31, r11
    3ef4:	ff 77       	andi	r31, 0x7F	; 127
    3ef6:	3f 2e       	mov	r3, r31
    3ef8:	36 fe       	sbrs	r3, 6
    3efa:	0d c0       	rjmp	.+26     	; 0x3f16 <vfprintf+0x2e4>
    3efc:	23 2d       	mov	r18, r3
    3efe:	2e 7f       	andi	r18, 0xFE	; 254
    3f00:	a2 2e       	mov	r10, r18
    3f02:	89 14       	cp	r8, r9
    3f04:	58 f4       	brcc	.+22     	; 0x3f1c <vfprintf+0x2ea>
    3f06:	34 fe       	sbrs	r3, 4
    3f08:	0b c0       	rjmp	.+22     	; 0x3f20 <vfprintf+0x2ee>
    3f0a:	32 fc       	sbrc	r3, 2
    3f0c:	09 c0       	rjmp	.+18     	; 0x3f20 <vfprintf+0x2ee>
    3f0e:	83 2d       	mov	r24, r3
    3f10:	8e 7e       	andi	r24, 0xEE	; 238
    3f12:	a8 2e       	mov	r10, r24
    3f14:	05 c0       	rjmp	.+10     	; 0x3f20 <vfprintf+0x2ee>
    3f16:	b8 2c       	mov	r11, r8
    3f18:	a3 2c       	mov	r10, r3
    3f1a:	03 c0       	rjmp	.+6      	; 0x3f22 <vfprintf+0x2f0>
    3f1c:	b8 2c       	mov	r11, r8
    3f1e:	01 c0       	rjmp	.+2      	; 0x3f22 <vfprintf+0x2f0>
    3f20:	b9 2c       	mov	r11, r9
    3f22:	a4 fe       	sbrs	r10, 4
    3f24:	0f c0       	rjmp	.+30     	; 0x3f44 <vfprintf+0x312>
    3f26:	fe 01       	movw	r30, r28
    3f28:	e8 0d       	add	r30, r8
    3f2a:	f1 1d       	adc	r31, r1
    3f2c:	80 81       	ld	r24, Z
    3f2e:	80 33       	cpi	r24, 0x30	; 48
    3f30:	21 f4       	brne	.+8      	; 0x3f3a <vfprintf+0x308>
    3f32:	9a 2d       	mov	r25, r10
    3f34:	99 7e       	andi	r25, 0xE9	; 233
    3f36:	a9 2e       	mov	r10, r25
    3f38:	09 c0       	rjmp	.+18     	; 0x3f4c <vfprintf+0x31a>
    3f3a:	a2 fe       	sbrs	r10, 2
    3f3c:	06 c0       	rjmp	.+12     	; 0x3f4a <vfprintf+0x318>
    3f3e:	b3 94       	inc	r11
    3f40:	b3 94       	inc	r11
    3f42:	04 c0       	rjmp	.+8      	; 0x3f4c <vfprintf+0x31a>
    3f44:	8a 2d       	mov	r24, r10
    3f46:	86 78       	andi	r24, 0x86	; 134
    3f48:	09 f0       	breq	.+2      	; 0x3f4c <vfprintf+0x31a>
    3f4a:	b3 94       	inc	r11
    3f4c:	a3 fc       	sbrc	r10, 3
    3f4e:	10 c0       	rjmp	.+32     	; 0x3f70 <vfprintf+0x33e>
    3f50:	a0 fe       	sbrs	r10, 0
    3f52:	06 c0       	rjmp	.+12     	; 0x3f60 <vfprintf+0x32e>
    3f54:	b2 14       	cp	r11, r2
    3f56:	80 f4       	brcc	.+32     	; 0x3f78 <vfprintf+0x346>
    3f58:	28 0c       	add	r2, r8
    3f5a:	92 2c       	mov	r9, r2
    3f5c:	9b 18       	sub	r9, r11
    3f5e:	0d c0       	rjmp	.+26     	; 0x3f7a <vfprintf+0x348>
    3f60:	b2 14       	cp	r11, r2
    3f62:	58 f4       	brcc	.+22     	; 0x3f7a <vfprintf+0x348>
    3f64:	b6 01       	movw	r22, r12
    3f66:	80 e2       	ldi	r24, 0x20	; 32
    3f68:	90 e0       	ldi	r25, 0x00	; 0
    3f6a:	76 d0       	rcall	.+236    	; 0x4058 <fputc>
    3f6c:	b3 94       	inc	r11
    3f6e:	f8 cf       	rjmp	.-16     	; 0x3f60 <vfprintf+0x32e>
    3f70:	b2 14       	cp	r11, r2
    3f72:	18 f4       	brcc	.+6      	; 0x3f7a <vfprintf+0x348>
    3f74:	2b 18       	sub	r2, r11
    3f76:	02 c0       	rjmp	.+4      	; 0x3f7c <vfprintf+0x34a>
    3f78:	98 2c       	mov	r9, r8
    3f7a:	21 2c       	mov	r2, r1
    3f7c:	a4 fe       	sbrs	r10, 4
    3f7e:	0f c0       	rjmp	.+30     	; 0x3f9e <vfprintf+0x36c>
    3f80:	b6 01       	movw	r22, r12
    3f82:	80 e3       	ldi	r24, 0x30	; 48
    3f84:	90 e0       	ldi	r25, 0x00	; 0
    3f86:	68 d0       	rcall	.+208    	; 0x4058 <fputc>
    3f88:	a2 fe       	sbrs	r10, 2
    3f8a:	16 c0       	rjmp	.+44     	; 0x3fb8 <vfprintf+0x386>
    3f8c:	a1 fc       	sbrc	r10, 1
    3f8e:	03 c0       	rjmp	.+6      	; 0x3f96 <vfprintf+0x364>
    3f90:	88 e7       	ldi	r24, 0x78	; 120
    3f92:	90 e0       	ldi	r25, 0x00	; 0
    3f94:	02 c0       	rjmp	.+4      	; 0x3f9a <vfprintf+0x368>
    3f96:	88 e5       	ldi	r24, 0x58	; 88
    3f98:	90 e0       	ldi	r25, 0x00	; 0
    3f9a:	b6 01       	movw	r22, r12
    3f9c:	0c c0       	rjmp	.+24     	; 0x3fb6 <vfprintf+0x384>
    3f9e:	8a 2d       	mov	r24, r10
    3fa0:	86 78       	andi	r24, 0x86	; 134
    3fa2:	51 f0       	breq	.+20     	; 0x3fb8 <vfprintf+0x386>
    3fa4:	a1 fe       	sbrs	r10, 1
    3fa6:	02 c0       	rjmp	.+4      	; 0x3fac <vfprintf+0x37a>
    3fa8:	8b e2       	ldi	r24, 0x2B	; 43
    3faa:	01 c0       	rjmp	.+2      	; 0x3fae <vfprintf+0x37c>
    3fac:	80 e2       	ldi	r24, 0x20	; 32
    3fae:	a7 fc       	sbrc	r10, 7
    3fb0:	8d e2       	ldi	r24, 0x2D	; 45
    3fb2:	b6 01       	movw	r22, r12
    3fb4:	90 e0       	ldi	r25, 0x00	; 0
    3fb6:	50 d0       	rcall	.+160    	; 0x4058 <fputc>
    3fb8:	89 14       	cp	r8, r9
    3fba:	30 f4       	brcc	.+12     	; 0x3fc8 <vfprintf+0x396>
    3fbc:	b6 01       	movw	r22, r12
    3fbe:	80 e3       	ldi	r24, 0x30	; 48
    3fc0:	90 e0       	ldi	r25, 0x00	; 0
    3fc2:	4a d0       	rcall	.+148    	; 0x4058 <fputc>
    3fc4:	9a 94       	dec	r9
    3fc6:	f8 cf       	rjmp	.-16     	; 0x3fb8 <vfprintf+0x386>
    3fc8:	8a 94       	dec	r8
    3fca:	f3 01       	movw	r30, r6
    3fcc:	e8 0d       	add	r30, r8
    3fce:	f1 1d       	adc	r31, r1
    3fd0:	80 81       	ld	r24, Z
    3fd2:	b6 01       	movw	r22, r12
    3fd4:	90 e0       	ldi	r25, 0x00	; 0
    3fd6:	40 d0       	rcall	.+128    	; 0x4058 <fputc>
    3fd8:	81 10       	cpse	r8, r1
    3fda:	f6 cf       	rjmp	.-20     	; 0x3fc8 <vfprintf+0x396>
    3fdc:	22 20       	and	r2, r2
    3fde:	09 f4       	brne	.+2      	; 0x3fe2 <vfprintf+0x3b0>
    3fe0:	4e ce       	rjmp	.-868    	; 0x3c7e <vfprintf+0x4c>
    3fe2:	b6 01       	movw	r22, r12
    3fe4:	80 e2       	ldi	r24, 0x20	; 32
    3fe6:	90 e0       	ldi	r25, 0x00	; 0
    3fe8:	37 d0       	rcall	.+110    	; 0x4058 <fputc>
    3fea:	2a 94       	dec	r2
    3fec:	f7 cf       	rjmp	.-18     	; 0x3fdc <vfprintf+0x3aa>
    3fee:	f6 01       	movw	r30, r12
    3ff0:	86 81       	ldd	r24, Z+6	; 0x06
    3ff2:	97 81       	ldd	r25, Z+7	; 0x07
    3ff4:	02 c0       	rjmp	.+4      	; 0x3ffa <vfprintf+0x3c8>
    3ff6:	8f ef       	ldi	r24, 0xFF	; 255
    3ff8:	9f ef       	ldi	r25, 0xFF	; 255
    3ffa:	2b 96       	adiw	r28, 0x0b	; 11
    3ffc:	0f b6       	in	r0, 0x3f	; 63
    3ffe:	f8 94       	cli
    4000:	de bf       	out	0x3e, r29	; 62
    4002:	0f be       	out	0x3f, r0	; 63
    4004:	cd bf       	out	0x3d, r28	; 61
    4006:	df 91       	pop	r29
    4008:	cf 91       	pop	r28
    400a:	1f 91       	pop	r17
    400c:	0f 91       	pop	r16
    400e:	ff 90       	pop	r15
    4010:	ef 90       	pop	r14
    4012:	df 90       	pop	r13
    4014:	cf 90       	pop	r12
    4016:	bf 90       	pop	r11
    4018:	af 90       	pop	r10
    401a:	9f 90       	pop	r9
    401c:	8f 90       	pop	r8
    401e:	7f 90       	pop	r7
    4020:	6f 90       	pop	r6
    4022:	5f 90       	pop	r5
    4024:	4f 90       	pop	r4
    4026:	3f 90       	pop	r3
    4028:	2f 90       	pop	r2
    402a:	08 95       	ret

0000402c <strnlen_P>:
    402c:	fc 01       	movw	r30, r24
    402e:	05 90       	lpm	r0, Z+
    4030:	61 50       	subi	r22, 0x01	; 1
    4032:	70 40       	sbci	r23, 0x00	; 0
    4034:	01 10       	cpse	r0, r1
    4036:	d8 f7       	brcc	.-10     	; 0x402e <strnlen_P+0x2>
    4038:	80 95       	com	r24
    403a:	90 95       	com	r25
    403c:	8e 0f       	add	r24, r30
    403e:	9f 1f       	adc	r25, r31
    4040:	08 95       	ret

00004042 <strnlen>:
    4042:	fc 01       	movw	r30, r24
    4044:	61 50       	subi	r22, 0x01	; 1
    4046:	70 40       	sbci	r23, 0x00	; 0
    4048:	01 90       	ld	r0, Z+
    404a:	01 10       	cpse	r0, r1
    404c:	d8 f7       	brcc	.-10     	; 0x4044 <strnlen+0x2>
    404e:	80 95       	com	r24
    4050:	90 95       	com	r25
    4052:	8e 0f       	add	r24, r30
    4054:	9f 1f       	adc	r25, r31
    4056:	08 95       	ret

00004058 <fputc>:
    4058:	0f 93       	push	r16
    405a:	1f 93       	push	r17
    405c:	cf 93       	push	r28
    405e:	df 93       	push	r29
    4060:	fb 01       	movw	r30, r22
    4062:	23 81       	ldd	r18, Z+3	; 0x03
    4064:	21 fd       	sbrc	r18, 1
    4066:	03 c0       	rjmp	.+6      	; 0x406e <fputc+0x16>
    4068:	8f ef       	ldi	r24, 0xFF	; 255
    406a:	9f ef       	ldi	r25, 0xFF	; 255
    406c:	2c c0       	rjmp	.+88     	; 0x40c6 <fputc+0x6e>
    406e:	22 ff       	sbrs	r18, 2
    4070:	16 c0       	rjmp	.+44     	; 0x409e <fputc+0x46>
    4072:	46 81       	ldd	r20, Z+6	; 0x06
    4074:	57 81       	ldd	r21, Z+7	; 0x07
    4076:	24 81       	ldd	r18, Z+4	; 0x04
    4078:	35 81       	ldd	r19, Z+5	; 0x05
    407a:	42 17       	cp	r20, r18
    407c:	53 07       	cpc	r21, r19
    407e:	44 f4       	brge	.+16     	; 0x4090 <fputc+0x38>
    4080:	a0 81       	ld	r26, Z
    4082:	b1 81       	ldd	r27, Z+1	; 0x01
    4084:	9d 01       	movw	r18, r26
    4086:	2f 5f       	subi	r18, 0xFF	; 255
    4088:	3f 4f       	sbci	r19, 0xFF	; 255
    408a:	31 83       	std	Z+1, r19	; 0x01
    408c:	20 83       	st	Z, r18
    408e:	8c 93       	st	X, r24
    4090:	26 81       	ldd	r18, Z+6	; 0x06
    4092:	37 81       	ldd	r19, Z+7	; 0x07
    4094:	2f 5f       	subi	r18, 0xFF	; 255
    4096:	3f 4f       	sbci	r19, 0xFF	; 255
    4098:	37 83       	std	Z+7, r19	; 0x07
    409a:	26 83       	std	Z+6, r18	; 0x06
    409c:	14 c0       	rjmp	.+40     	; 0x40c6 <fputc+0x6e>
    409e:	8b 01       	movw	r16, r22
    40a0:	ec 01       	movw	r28, r24
    40a2:	fb 01       	movw	r30, r22
    40a4:	00 84       	ldd	r0, Z+8	; 0x08
    40a6:	f1 85       	ldd	r31, Z+9	; 0x09
    40a8:	e0 2d       	mov	r30, r0
    40aa:	19 95       	eicall
    40ac:	89 2b       	or	r24, r25
    40ae:	e1 f6       	brne	.-72     	; 0x4068 <fputc+0x10>
    40b0:	d8 01       	movw	r26, r16
    40b2:	16 96       	adiw	r26, 0x06	; 6
    40b4:	8d 91       	ld	r24, X+
    40b6:	9c 91       	ld	r25, X
    40b8:	17 97       	sbiw	r26, 0x07	; 7
    40ba:	01 96       	adiw	r24, 0x01	; 1
    40bc:	17 96       	adiw	r26, 0x07	; 7
    40be:	9c 93       	st	X, r25
    40c0:	8e 93       	st	-X, r24
    40c2:	16 97       	sbiw	r26, 0x06	; 6
    40c4:	ce 01       	movw	r24, r28
    40c6:	df 91       	pop	r29
    40c8:	cf 91       	pop	r28
    40ca:	1f 91       	pop	r17
    40cc:	0f 91       	pop	r16
    40ce:	08 95       	ret

000040d0 <__ultoa_invert>:
    40d0:	fa 01       	movw	r30, r20
    40d2:	aa 27       	eor	r26, r26
    40d4:	28 30       	cpi	r18, 0x08	; 8
    40d6:	51 f1       	breq	.+84     	; 0x412c <__ultoa_invert+0x5c>
    40d8:	20 31       	cpi	r18, 0x10	; 16
    40da:	81 f1       	breq	.+96     	; 0x413c <__ultoa_invert+0x6c>
    40dc:	e8 94       	clt
    40de:	6f 93       	push	r22
    40e0:	6e 7f       	andi	r22, 0xFE	; 254
    40e2:	6e 5f       	subi	r22, 0xFE	; 254
    40e4:	7f 4f       	sbci	r23, 0xFF	; 255
    40e6:	8f 4f       	sbci	r24, 0xFF	; 255
    40e8:	9f 4f       	sbci	r25, 0xFF	; 255
    40ea:	af 4f       	sbci	r26, 0xFF	; 255
    40ec:	b1 e0       	ldi	r27, 0x01	; 1
    40ee:	3e d0       	rcall	.+124    	; 0x416c <__ultoa_invert+0x9c>
    40f0:	b4 e0       	ldi	r27, 0x04	; 4
    40f2:	3c d0       	rcall	.+120    	; 0x416c <__ultoa_invert+0x9c>
    40f4:	67 0f       	add	r22, r23
    40f6:	78 1f       	adc	r23, r24
    40f8:	89 1f       	adc	r24, r25
    40fa:	9a 1f       	adc	r25, r26
    40fc:	a1 1d       	adc	r26, r1
    40fe:	68 0f       	add	r22, r24
    4100:	79 1f       	adc	r23, r25
    4102:	8a 1f       	adc	r24, r26
    4104:	91 1d       	adc	r25, r1
    4106:	a1 1d       	adc	r26, r1
    4108:	6a 0f       	add	r22, r26
    410a:	71 1d       	adc	r23, r1
    410c:	81 1d       	adc	r24, r1
    410e:	91 1d       	adc	r25, r1
    4110:	a1 1d       	adc	r26, r1
    4112:	20 d0       	rcall	.+64     	; 0x4154 <__ultoa_invert+0x84>
    4114:	09 f4       	brne	.+2      	; 0x4118 <__ultoa_invert+0x48>
    4116:	68 94       	set
    4118:	3f 91       	pop	r19
    411a:	2a e0       	ldi	r18, 0x0A	; 10
    411c:	26 9f       	mul	r18, r22
    411e:	11 24       	eor	r1, r1
    4120:	30 19       	sub	r19, r0
    4122:	30 5d       	subi	r19, 0xD0	; 208
    4124:	31 93       	st	Z+, r19
    4126:	de f6       	brtc	.-74     	; 0x40de <__ultoa_invert+0xe>
    4128:	cf 01       	movw	r24, r30
    412a:	08 95       	ret
    412c:	46 2f       	mov	r20, r22
    412e:	47 70       	andi	r20, 0x07	; 7
    4130:	40 5d       	subi	r20, 0xD0	; 208
    4132:	41 93       	st	Z+, r20
    4134:	b3 e0       	ldi	r27, 0x03	; 3
    4136:	0f d0       	rcall	.+30     	; 0x4156 <__ultoa_invert+0x86>
    4138:	c9 f7       	brne	.-14     	; 0x412c <__ultoa_invert+0x5c>
    413a:	f6 cf       	rjmp	.-20     	; 0x4128 <__ultoa_invert+0x58>
    413c:	46 2f       	mov	r20, r22
    413e:	4f 70       	andi	r20, 0x0F	; 15
    4140:	40 5d       	subi	r20, 0xD0	; 208
    4142:	4a 33       	cpi	r20, 0x3A	; 58
    4144:	18 f0       	brcs	.+6      	; 0x414c <__ultoa_invert+0x7c>
    4146:	49 5d       	subi	r20, 0xD9	; 217
    4148:	31 fd       	sbrc	r19, 1
    414a:	40 52       	subi	r20, 0x20	; 32
    414c:	41 93       	st	Z+, r20
    414e:	02 d0       	rcall	.+4      	; 0x4154 <__ultoa_invert+0x84>
    4150:	a9 f7       	brne	.-22     	; 0x413c <__ultoa_invert+0x6c>
    4152:	ea cf       	rjmp	.-44     	; 0x4128 <__ultoa_invert+0x58>
    4154:	b4 e0       	ldi	r27, 0x04	; 4
    4156:	a6 95       	lsr	r26
    4158:	97 95       	ror	r25
    415a:	87 95       	ror	r24
    415c:	77 95       	ror	r23
    415e:	67 95       	ror	r22
    4160:	ba 95       	dec	r27
    4162:	c9 f7       	brne	.-14     	; 0x4156 <__ultoa_invert+0x86>
    4164:	00 97       	sbiw	r24, 0x00	; 0
    4166:	61 05       	cpc	r22, r1
    4168:	71 05       	cpc	r23, r1
    416a:	08 95       	ret
    416c:	9b 01       	movw	r18, r22
    416e:	ac 01       	movw	r20, r24
    4170:	0a 2e       	mov	r0, r26
    4172:	06 94       	lsr	r0
    4174:	57 95       	ror	r21
    4176:	47 95       	ror	r20
    4178:	37 95       	ror	r19
    417a:	27 95       	ror	r18
    417c:	ba 95       	dec	r27
    417e:	c9 f7       	brne	.-14     	; 0x4172 <__ultoa_invert+0xa2>
    4180:	62 0f       	add	r22, r18
    4182:	73 1f       	adc	r23, r19
    4184:	84 1f       	adc	r24, r20
    4186:	95 1f       	adc	r25, r21
    4188:	a0 1d       	adc	r26, r0
    418a:	08 95       	ret

0000418c <__divmodsi4>:
    418c:	05 2e       	mov	r0, r21
    418e:	97 fb       	bst	r25, 7
    4190:	16 f4       	brtc	.+4      	; 0x4196 <__divmodsi4+0xa>
    4192:	00 94       	com	r0
    4194:	0f d0       	rcall	.+30     	; 0x41b4 <__negsi2>
    4196:	57 fd       	sbrc	r21, 7
    4198:	05 d0       	rcall	.+10     	; 0x41a4 <__divmodsi4_neg2>
    419a:	31 db       	rcall	.-2462   	; 0x37fe <__udivmodsi4>
    419c:	07 fc       	sbrc	r0, 7
    419e:	02 d0       	rcall	.+4      	; 0x41a4 <__divmodsi4_neg2>
    41a0:	46 f4       	brtc	.+16     	; 0x41b2 <__divmodsi4_exit>
    41a2:	08 c0       	rjmp	.+16     	; 0x41b4 <__negsi2>

000041a4 <__divmodsi4_neg2>:
    41a4:	50 95       	com	r21
    41a6:	40 95       	com	r20
    41a8:	30 95       	com	r19
    41aa:	21 95       	neg	r18
    41ac:	3f 4f       	sbci	r19, 0xFF	; 255
    41ae:	4f 4f       	sbci	r20, 0xFF	; 255
    41b0:	5f 4f       	sbci	r21, 0xFF	; 255

000041b2 <__divmodsi4_exit>:
    41b2:	08 95       	ret

000041b4 <__negsi2>:
    41b4:	90 95       	com	r25
    41b6:	80 95       	com	r24
    41b8:	70 95       	com	r23
    41ba:	61 95       	neg	r22
    41bc:	7f 4f       	sbci	r23, 0xFF	; 255
    41be:	8f 4f       	sbci	r24, 0xFF	; 255
    41c0:	9f 4f       	sbci	r25, 0xFF	; 255
    41c2:	08 95       	ret

000041c4 <__muluhisi3>:
    41c4:	46 db       	rcall	.-2420   	; 0x3852 <__umulhisi3>
    41c6:	a5 9f       	mul	r26, r21
    41c8:	90 0d       	add	r25, r0
    41ca:	b4 9f       	mul	r27, r20
    41cc:	90 0d       	add	r25, r0
    41ce:	a4 9f       	mul	r26, r20
    41d0:	80 0d       	add	r24, r0
    41d2:	91 1d       	adc	r25, r1
    41d4:	11 24       	eor	r1, r1
    41d6:	08 95       	ret

000041d8 <__mulshisi3>:
    41d8:	b7 ff       	sbrs	r27, 7
    41da:	f4 cf       	rjmp	.-24     	; 0x41c4 <__muluhisi3>

000041dc <__mulohisi3>:
    41dc:	f3 df       	rcall	.-26     	; 0x41c4 <__muluhisi3>
    41de:	82 1b       	sub	r24, r18
    41e0:	93 0b       	sbc	r25, r19
    41e2:	08 95       	ret

000041e4 <_exit>:
    41e4:	f8 94       	cli

000041e6 <__stop_program>:
    41e6:	ff cf       	rjmp	.-2      	; 0x41e6 <__stop_program>
