
RTP_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ca  00800200  0000425a  000042ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000425a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000ed5  008002ca  008002ca  000043b8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000043b8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004414  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000768  00000000  00000000  00004454  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000093af  00000000  00000000  00004bbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002626  00000000  00000000  0000df6b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004c8c  00000000  00000000  00010591  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001a24  00000000  00000000  00015220  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002d67  00000000  00000000  00016c44  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000086f5  00000000  00000000  000199ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000720  00000000  00000000  000220a0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	94 c0       	rjmp	.+296    	; 0x12a <__ctors_end>
       2:	00 00       	nop
       4:	b3 c0       	rjmp	.+358    	; 0x16c <__bad_interrupt>
       6:	00 00       	nop
       8:	b1 c0       	rjmp	.+354    	; 0x16c <__bad_interrupt>
       a:	00 00       	nop
       c:	af c0       	rjmp	.+350    	; 0x16c <__bad_interrupt>
       e:	00 00       	nop
      10:	ad c0       	rjmp	.+346    	; 0x16c <__bad_interrupt>
      12:	00 00       	nop
      14:	ab c0       	rjmp	.+342    	; 0x16c <__bad_interrupt>
      16:	00 00       	nop
      18:	a9 c0       	rjmp	.+338    	; 0x16c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	a7 c0       	rjmp	.+334    	; 0x16c <__bad_interrupt>
      1e:	00 00       	nop
      20:	a5 c0       	rjmp	.+330    	; 0x16c <__bad_interrupt>
      22:	00 00       	nop
      24:	a3 c0       	rjmp	.+326    	; 0x16c <__bad_interrupt>
      26:	00 00       	nop
      28:	a1 c0       	rjmp	.+322    	; 0x16c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	9f c0       	rjmp	.+318    	; 0x16c <__bad_interrupt>
      2e:	00 00       	nop
      30:	3d c6       	rjmp	.+3194   	; 0xcac <__vector_12>
      32:	00 00       	nop
      34:	9b c0       	rjmp	.+310    	; 0x16c <__bad_interrupt>
      36:	00 00       	nop
      38:	99 c0       	rjmp	.+306    	; 0x16c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	97 c0       	rjmp	.+302    	; 0x16c <__bad_interrupt>
      3e:	00 00       	nop
      40:	95 c0       	rjmp	.+298    	; 0x16c <__bad_interrupt>
      42:	00 00       	nop
      44:	93 c0       	rjmp	.+294    	; 0x16c <__bad_interrupt>
      46:	00 00       	nop
      48:	91 c0       	rjmp	.+290    	; 0x16c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	8f c0       	rjmp	.+286    	; 0x16c <__bad_interrupt>
      4e:	00 00       	nop
      50:	8d c0       	rjmp	.+282    	; 0x16c <__bad_interrupt>
      52:	00 00       	nop
      54:	8b c0       	rjmp	.+278    	; 0x16c <__bad_interrupt>
      56:	00 00       	nop
      58:	89 c0       	rjmp	.+274    	; 0x16c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	87 c0       	rjmp	.+270    	; 0x16c <__bad_interrupt>
      5e:	00 00       	nop
      60:	85 c0       	rjmp	.+266    	; 0x16c <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 ac 18 	jmp	0x3158	; 0x3158 <__vector_25>
      68:	0c 94 fe 18 	jmp	0x31fc	; 0x31fc <__vector_26>
      6c:	7f c0       	rjmp	.+254    	; 0x16c <__bad_interrupt>
      6e:	00 00       	nop
      70:	7d c0       	rjmp	.+250    	; 0x16c <__bad_interrupt>
      72:	00 00       	nop
      74:	7b c0       	rjmp	.+246    	; 0x16c <__bad_interrupt>
      76:	00 00       	nop
      78:	79 c0       	rjmp	.+242    	; 0x16c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	77 c0       	rjmp	.+238    	; 0x16c <__bad_interrupt>
      7e:	00 00       	nop
      80:	75 c0       	rjmp	.+234    	; 0x16c <__bad_interrupt>
      82:	00 00       	nop
      84:	73 c0       	rjmp	.+230    	; 0x16c <__bad_interrupt>
      86:	00 00       	nop
      88:	71 c0       	rjmp	.+226    	; 0x16c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	6f c0       	rjmp	.+222    	; 0x16c <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 42 19 	jmp	0x3284	; 0x3284 <__vector_36>
      94:	0c 94 94 19 	jmp	0x3328	; 0x3328 <__vector_37>
      98:	69 c0       	rjmp	.+210    	; 0x16c <__bad_interrupt>
      9a:	00 00       	nop
      9c:	67 c0       	rjmp	.+206    	; 0x16c <__bad_interrupt>
      9e:	00 00       	nop
      a0:	65 c0       	rjmp	.+202    	; 0x16c <__bad_interrupt>
      a2:	00 00       	nop
      a4:	63 c0       	rjmp	.+198    	; 0x16c <__bad_interrupt>
      a6:	00 00       	nop
      a8:	61 c0       	rjmp	.+194    	; 0x16c <__bad_interrupt>
      aa:	00 00       	nop
      ac:	5f c0       	rjmp	.+190    	; 0x16c <__bad_interrupt>
      ae:	00 00       	nop
      b0:	5d c0       	rjmp	.+186    	; 0x16c <__bad_interrupt>
      b2:	00 00       	nop
      b4:	5b c0       	rjmp	.+182    	; 0x16c <__bad_interrupt>
      b6:	00 00       	nop
      b8:	59 c0       	rjmp	.+178    	; 0x16c <__bad_interrupt>
      ba:	00 00       	nop
      bc:	57 c0       	rjmp	.+174    	; 0x16c <__bad_interrupt>
      be:	00 00       	nop
      c0:	55 c0       	rjmp	.+170    	; 0x16c <__bad_interrupt>
      c2:	00 00       	nop
      c4:	53 c0       	rjmp	.+166    	; 0x16c <__bad_interrupt>
      c6:	00 00       	nop
      c8:	51 c0       	rjmp	.+162    	; 0x16c <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 d8 19 	jmp	0x33b0	; 0x33b0 <__vector_51>
      d0:	0c 94 2a 1a 	jmp	0x3454	; 0x3454 <__vector_52>
      d4:	4b c0       	rjmp	.+150    	; 0x16c <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 6e 1a 	jmp	0x34dc	; 0x34dc <__vector_54>
      dc:	0c 94 c0 1a 	jmp	0x3580	; 0x3580 <__vector_55>
      e0:	45 c0       	rjmp	.+138    	; 0x16c <__bad_interrupt>
      e2:	00 00       	nop
      e4:	2c 15       	cp	r18, r12
      e6:	2c 15       	cp	r18, r12
      e8:	2c 15       	cp	r18, r12
      ea:	63 15       	cp	r22, r3
      ec:	6b 15       	cp	r22, r11
      ee:	80 15       	cp	r24, r0
      f0:	2c 15       	cp	r18, r12
      f2:	2c 15       	cp	r18, r12
      f4:	63 15       	cp	r22, r3
      f6:	6b 15       	cp	r22, r11

000000f8 <prvIdleTask>:
    /* Reset the event list item to its normal value - so it can be used with
     * queues and semaphores. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */

    return uxReturn;
}
      f8:	0e 94 26 0b 	call	0x164c	; 0x164c <prvCheckTasksWaitingTermination>
      fc:	80 91 db 10 	lds	r24, 0x10DB	; 0x8010db <pxReadyTasksLists>
     100:	82 30       	cpi	r24, 0x02	; 2
     102:	08 f0       	brcs	.+2      	; 0x106 <prvIdleTask+0xe>
     104:	0e d5       	rcall	.+2588   	; 0xb22 <vPortYield>
     106:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <vApplicationIdleHook>
     10a:	f6 cf       	rjmp	.-20     	; 0xf8 <prvIdleTask>

0000010c <prvTimerTask>:
                pxNewTimer->ucStatus = 0x00;
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
     10c:	cf 93       	push	r28
     10e:	df 93       	push	r29
     110:	1f 92       	push	r1
     112:	cd b7       	in	r28, 0x3d	; 61
     114:	de b7       	in	r29, 0x3e	; 62
     116:	ce 01       	movw	r24, r28
     118:	01 96       	adiw	r24, 0x01	; 1
     11a:	0e 94 af 12 	call	0x255e	; 0x255e <prvGetNextExpireTime>
     11e:	49 81       	ldd	r20, Y+1	; 0x01
     120:	0e 94 a2 14 	call	0x2944	; 0x2944 <prvProcessTimerOrBlockTask>
     124:	0e 94 f6 14 	call	0x29ec	; 0x29ec <prvProcessReceivedCommands>
     128:	f6 cf       	rjmp	.-20     	; 0x116 <prvTimerTask+0xa>

0000012a <__ctors_end>:
     12a:	11 24       	eor	r1, r1
     12c:	1f be       	out	0x3f, r1	; 63
     12e:	cf ef       	ldi	r28, 0xFF	; 255
     130:	d1 e2       	ldi	r29, 0x21	; 33
     132:	de bf       	out	0x3e, r29	; 62
     134:	cd bf       	out	0x3d, r28	; 61
     136:	00 e0       	ldi	r16, 0x00	; 0
     138:	0c bf       	out	0x3c, r16	; 60

0000013a <__do_copy_data>:
     13a:	12 e0       	ldi	r17, 0x02	; 2
     13c:	a0 e0       	ldi	r26, 0x00	; 0
     13e:	b2 e0       	ldi	r27, 0x02	; 2
     140:	ea e5       	ldi	r30, 0x5A	; 90
     142:	f2 e4       	ldi	r31, 0x42	; 66
     144:	00 e0       	ldi	r16, 0x00	; 0
     146:	0b bf       	out	0x3b, r16	; 59
     148:	02 c0       	rjmp	.+4      	; 0x14e <__do_copy_data+0x14>
     14a:	07 90       	elpm	r0, Z+
     14c:	0d 92       	st	X+, r0
     14e:	aa 3c       	cpi	r26, 0xCA	; 202
     150:	b1 07       	cpc	r27, r17
     152:	d9 f7       	brne	.-10     	; 0x14a <__do_copy_data+0x10>

00000154 <__do_clear_bss>:
     154:	21 e1       	ldi	r18, 0x11	; 17
     156:	aa ec       	ldi	r26, 0xCA	; 202
     158:	b2 e0       	ldi	r27, 0x02	; 2
     15a:	01 c0       	rjmp	.+2      	; 0x15e <.do_clear_bss_start>

0000015c <.do_clear_bss_loop>:
     15c:	1d 92       	st	X+, r1

0000015e <.do_clear_bss_start>:
     15e:	af 39       	cpi	r26, 0x9F	; 159
     160:	b2 07       	cpc	r27, r18
     162:	e1 f7       	brne	.-8      	; 0x15c <.do_clear_bss_loop>
     164:	0e 94 e7 15 	call	0x2bce	; 0x2bce <main>
     168:	0c 94 2b 21 	jmp	0x4256	; 0x4256 <_exit>

0000016c <__bad_interrupt>:
     16c:	49 cf       	rjmp	.-366    	; 0x0 <__vectors>

0000016e <distanceMeasurementFrontTask>:

// Definitions for distanceMeasurementFrontTask, distanceMeasurementBackTask, obstacleEventHandlerTask...

void distanceMeasurementFrontTask(void *pvParameters) {
	
	printf("Distance measurement Front task ");
     16e:	8d e1       	ldi	r24, 0x1D	; 29
     170:	92 e0       	ldi	r25, 0x02	; 2
     172:	9f 93       	push	r25
     174:	8f 93       	push	r24
     176:	0e 94 3b 1e 	call	0x3c76	; 0x3c76 <printf>
	// In every task before loop:
	#if (configUSE_APPLICATION_TASK_TAG == 1)
	// Set taskTag
	vTaskSetApplicationTaskTag(NULL, (void *)1 /*task id*/);
     17a:	61 e0       	ldi	r22, 0x01	; 1
     17c:	70 e0       	ldi	r23, 0x00	; 0
     17e:	80 e0       	ldi	r24, 0x00	; 0
     180:	90 e0       	ldi	r25, 0x00	; 0
     182:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <vTaskSetApplicationTaskTag>
     186:	0f 90       	pop	r0
     188:	0f 90       	pop	r0
	
	const TickType_t xFrequency = pdMS_TO_TICKS(1000); // Period of 1 second in ticks

	while (1) {
		// Record the start time of the task.
		TickType_t xStartTime = xTaskGetTickCount();
     18a:	0e 94 77 0c 	call	0x18ee	; 0x18ee <xTaskGetTickCount>
     18e:	6b 01       	movw	r12, r22
     190:	7c 01       	movw	r14, r24

		// Acquire the semaphore before updating the shared variable.
		if (xSemaphoreTake(xFrontDistanceSemaphore, portMAX_DELAY) == pdTRUE) {
     192:	4f ef       	ldi	r20, 0xFF	; 255
     194:	5f ef       	ldi	r21, 0xFF	; 255
     196:	ba 01       	movw	r22, r20
     198:	80 91 93 11 	lds	r24, 0x1193	; 0x801193 <xFrontDistanceSemaphore>
     19c:	90 91 94 11 	lds	r25, 0x1194	; 0x801194 <xFrontDistanceSemaphore+0x1>
     1a0:	0e 94 18 09 	call	0x1230	; 0x1230 <xQueueSemaphoreTake>
     1a4:	81 30       	cpi	r24, 0x01	; 1
     1a6:	e9 f4       	brne	.+58     	; 0x1e2 <distanceMeasurementFrontTask+0x74>
			// Perform the distance measurement.
			uint16_t distance = hc_sr04_takeMeasurement(true);
     1a8:	5d d1       	rcall	.+698    	; 0x464 <hc_sr04_takeMeasurement>
     1aa:	ec 01       	movw	r28, r24

			// Update the shared variable.
			frontMeasuredDistance = distance;
     1ac:	90 93 cd 02 	sts	0x02CD, r25	; 0x8002cd <frontMeasuredDistance+0x1>
     1b0:	80 93 cc 02 	sts	0x02CC, r24	; 0x8002cc <frontMeasuredDistance>

			// Release the semaphore.
			xSemaphoreGive(xFrontDistanceSemaphore);
     1b4:	00 e0       	ldi	r16, 0x00	; 0
     1b6:	20 e0       	ldi	r18, 0x00	; 0
     1b8:	30 e0       	ldi	r19, 0x00	; 0
     1ba:	a9 01       	movw	r20, r18
     1bc:	60 e0       	ldi	r22, 0x00	; 0
     1be:	70 e0       	ldi	r23, 0x00	; 0
     1c0:	80 91 93 11 	lds	r24, 0x1193	; 0x801193 <xFrontDistanceSemaphore>
     1c4:	90 91 94 11 	lds	r25, 0x1194	; 0x801194 <xFrontDistanceSemaphore+0x1>
     1c8:	c3 d6       	rcall	.+3462   	; 0xf50 <xQueueGenericSend>
            if (distance < THRESHOLD_DISTANCE) {
     1ca:	cc 32       	cpi	r28, 0x2C	; 44
     1cc:	d1 40       	sbci	r29, 0x01	; 1
     1ce:	48 f4       	brcc	.+18     	; 0x1e2 <distanceMeasurementFrontTask+0x74>
	            xEventGroupSetBits(xObstacleEventGroup, FRONT_OBSTACLE_BIT);
     1d0:	41 e0       	ldi	r20, 0x01	; 1
     1d2:	50 e0       	ldi	r21, 0x00	; 0
     1d4:	60 e0       	ldi	r22, 0x00	; 0
     1d6:	70 e0       	ldi	r23, 0x00	; 0
     1d8:	80 91 91 11 	lds	r24, 0x1191	; 0x801191 <xObstacleEventGroup>
     1dc:	90 91 92 11 	lds	r25, 0x1192	; 0x801192 <xObstacleEventGroup+0x1>
     1e0:	ec d1       	rcall	.+984    	; 0x5ba <xEventGroupSetBits>
            }
		}

		// Task code finished execution, now wait until the end of the period.
		// Calculate time spent in task execution.
		TickType_t xTimeSpent = xTaskGetTickCount() - xStartTime;
     1e2:	0e 94 77 0c 	call	0x18ee	; 0x18ee <xTaskGetTickCount>
     1e6:	dc 01       	movw	r26, r24
     1e8:	cb 01       	movw	r24, r22
     1ea:	8c 19       	sub	r24, r12
     1ec:	9d 09       	sbc	r25, r13
     1ee:	ae 09       	sbc	r26, r14
     1f0:	bf 09       	sbc	r27, r15

		// Calculate the delay for the task to wait to complete the period.
		TickType_t xDelay = (xTimeSpent < xFrequency) ? (xFrequency - xTimeSpent) : 0;
     1f2:	8e 33       	cpi	r24, 0x3E	; 62
     1f4:	91 05       	cpc	r25, r1
     1f6:	a1 05       	cpc	r26, r1
     1f8:	b1 05       	cpc	r27, r1
     1fa:	68 f4       	brcc	.+26     	; 0x216 <distanceMeasurementFrontTask+0xa8>
     1fc:	0e e3       	ldi	r16, 0x3E	; 62
     1fe:	10 e0       	ldi	r17, 0x00	; 0
     200:	20 e0       	ldi	r18, 0x00	; 0
     202:	30 e0       	ldi	r19, 0x00	; 0
     204:	68 01       	movw	r12, r16
     206:	79 01       	movw	r14, r18
     208:	c8 1a       	sub	r12, r24
     20a:	d9 0a       	sbc	r13, r25
     20c:	ea 0a       	sbc	r14, r26
     20e:	fb 0a       	sbc	r15, r27
     210:	c7 01       	movw	r24, r14
     212:	b6 01       	movw	r22, r12
     214:	03 c0       	rjmp	.+6      	; 0x21c <distanceMeasurementFrontTask+0xae>
     216:	60 e0       	ldi	r22, 0x00	; 0
     218:	70 e0       	ldi	r23, 0x00	; 0
     21a:	cb 01       	movw	r24, r22

		// Delay the task for the remaining period.
		vTaskDelay(xDelay);
     21c:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <vTaskDelay>
	}
     220:	b4 cf       	rjmp	.-152    	; 0x18a <distanceMeasurementFrontTask+0x1c>

00000222 <distanceMeasurementBackTask>:
}

void distanceMeasurementBackTask(void *pvParameters) {
	
	printf("Distance measurement back task ");
     222:	8e e3       	ldi	r24, 0x3E	; 62
     224:	92 e0       	ldi	r25, 0x02	; 2
     226:	9f 93       	push	r25
     228:	8f 93       	push	r24
     22a:	0e 94 3b 1e 	call	0x3c76	; 0x3c76 <printf>
	// In every task before loop:
	#if (configUSE_APPLICATION_TASK_TAG == 1)
	// Set taskTag
	vTaskSetApplicationTaskTag(NULL, (void *)3 /*task id*/);
     22e:	63 e0       	ldi	r22, 0x03	; 3
     230:	70 e0       	ldi	r23, 0x00	; 0
     232:	80 e0       	ldi	r24, 0x00	; 0
     234:	90 e0       	ldi	r25, 0x00	; 0
     236:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <vTaskSetApplicationTaskTag>
     23a:	0f 90       	pop	r0
     23c:	0f 90       	pop	r0
	
	const TickType_t xFrequency = pdMS_TO_TICKS(1000); // Period of 1 second in ticks

	while (1) {
		// Record the start time of the task.
		TickType_t xStartTime = xTaskGetTickCount();
     23e:	0e 94 77 0c 	call	0x18ee	; 0x18ee <xTaskGetTickCount>
     242:	6b 01       	movw	r12, r22
     244:	7c 01       	movw	r14, r24

		// Acquire the semaphore before updating the shared variable.
		if (xSemaphoreTake(xBackDistanceSemaphore, portMAX_DELAY) == pdTRUE) {
     246:	4f ef       	ldi	r20, 0xFF	; 255
     248:	5f ef       	ldi	r21, 0xFF	; 255
     24a:	ba 01       	movw	r22, r20
     24c:	80 91 8f 11 	lds	r24, 0x118F	; 0x80118f <xBackDistanceSemaphore>
     250:	90 91 90 11 	lds	r25, 0x1190	; 0x801190 <xBackDistanceSemaphore+0x1>
     254:	ed d7       	rcall	.+4058   	; 0x1230 <xQueueSemaphoreTake>
     256:	81 30       	cpi	r24, 0x01	; 1
     258:	f1 f4       	brne	.+60     	; 0x296 <distanceMeasurementBackTask+0x74>
			// Perform the distance measurement.
			uint16_t distance = hc_sr04_takeMeasurement(false);
     25a:	80 e0       	ldi	r24, 0x00	; 0
     25c:	03 d1       	rcall	.+518    	; 0x464 <hc_sr04_takeMeasurement>
     25e:	ec 01       	movw	r28, r24

			// Update the shared variable.
			backMeasuredDistance = distance;
     260:	90 93 cb 02 	sts	0x02CB, r25	; 0x8002cb <__data_end+0x1>
     264:	80 93 ca 02 	sts	0x02CA, r24	; 0x8002ca <__data_end>

			// Release the semaphore.
			xSemaphoreGive(xBackDistanceSemaphore);
     268:	00 e0       	ldi	r16, 0x00	; 0
     26a:	20 e0       	ldi	r18, 0x00	; 0
     26c:	30 e0       	ldi	r19, 0x00	; 0
     26e:	a9 01       	movw	r20, r18
     270:	60 e0       	ldi	r22, 0x00	; 0
     272:	70 e0       	ldi	r23, 0x00	; 0
     274:	80 91 8f 11 	lds	r24, 0x118F	; 0x80118f <xBackDistanceSemaphore>
     278:	90 91 90 11 	lds	r25, 0x1190	; 0x801190 <xBackDistanceSemaphore+0x1>
     27c:	69 d6       	rcall	.+3282   	; 0xf50 <xQueueGenericSend>
			if (distance < THRESHOLD_DISTANCE) {
     27e:	cc 32       	cpi	r28, 0x2C	; 44
     280:	d1 40       	sbci	r29, 0x01	; 1
     282:	48 f4       	brcc	.+18     	; 0x296 <distanceMeasurementBackTask+0x74>
				xEventGroupSetBits(xObstacleEventGroup, BACK_OBSTACLE_BIT);
     284:	42 e0       	ldi	r20, 0x02	; 2
     286:	50 e0       	ldi	r21, 0x00	; 0
     288:	60 e0       	ldi	r22, 0x00	; 0
     28a:	70 e0       	ldi	r23, 0x00	; 0
     28c:	80 91 91 11 	lds	r24, 0x1191	; 0x801191 <xObstacleEventGroup>
     290:	90 91 92 11 	lds	r25, 0x1192	; 0x801192 <xObstacleEventGroup+0x1>
     294:	92 d1       	rcall	.+804    	; 0x5ba <xEventGroupSetBits>
			}			
		}

		// Task code finished execution, now wait until the end of the period.
		// Calculate time spent in task execution.
		TickType_t xTimeSpent = xTaskGetTickCount() - xStartTime;
     296:	0e 94 77 0c 	call	0x18ee	; 0x18ee <xTaskGetTickCount>
     29a:	dc 01       	movw	r26, r24
     29c:	cb 01       	movw	r24, r22
     29e:	8c 19       	sub	r24, r12
     2a0:	9d 09       	sbc	r25, r13
     2a2:	ae 09       	sbc	r26, r14
     2a4:	bf 09       	sbc	r27, r15

		// Calculate the delay for the task to wait to complete the period.
		TickType_t xDelay = (xTimeSpent < xFrequency) ? (xFrequency - xTimeSpent) : 0;
     2a6:	8e 33       	cpi	r24, 0x3E	; 62
     2a8:	91 05       	cpc	r25, r1
     2aa:	a1 05       	cpc	r26, r1
     2ac:	b1 05       	cpc	r27, r1
     2ae:	68 f4       	brcc	.+26     	; 0x2ca <distanceMeasurementBackTask+0xa8>
     2b0:	0e e3       	ldi	r16, 0x3E	; 62
     2b2:	10 e0       	ldi	r17, 0x00	; 0
     2b4:	20 e0       	ldi	r18, 0x00	; 0
     2b6:	30 e0       	ldi	r19, 0x00	; 0
     2b8:	68 01       	movw	r12, r16
     2ba:	79 01       	movw	r14, r18
     2bc:	c8 1a       	sub	r12, r24
     2be:	d9 0a       	sbc	r13, r25
     2c0:	ea 0a       	sbc	r14, r26
     2c2:	fb 0a       	sbc	r15, r27
     2c4:	c7 01       	movw	r24, r14
     2c6:	b6 01       	movw	r22, r12
     2c8:	03 c0       	rjmp	.+6      	; 0x2d0 <distanceMeasurementBackTask+0xae>
     2ca:	60 e0       	ldi	r22, 0x00	; 0
     2cc:	70 e0       	ldi	r23, 0x00	; 0
     2ce:	cb 01       	movw	r24, r22

		// Delay the task for the remaining period.
		vTaskDelay(xDelay);
     2d0:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <vTaskDelay>
	}
     2d4:	b4 cf       	rjmp	.-152    	; 0x23e <distanceMeasurementBackTask+0x1c>

000002d6 <create_all_application_tasks>:

// Event group for obstacle detection
EventGroupHandle_t xObstacleEventGroup;


void create_all_application_tasks(void) {
     2d6:	ef 92       	push	r14
     2d8:	ff 92       	push	r15
     2da:	0f 93       	push	r16
	// Initialize semaphores
	xFrontDistanceSemaphore = xSemaphoreCreateMutex();
     2dc:	81 e0       	ldi	r24, 0x01	; 1
     2de:	d7 d6       	rcall	.+3502   	; 0x108e <xQueueCreateMutex>
     2e0:	90 93 94 11 	sts	0x1194, r25	; 0x801194 <xFrontDistanceSemaphore+0x1>
     2e4:	80 93 93 11 	sts	0x1193, r24	; 0x801193 <xFrontDistanceSemaphore>
	xBackDistanceSemaphore = xSemaphoreCreateMutex();
     2e8:	81 e0       	ldi	r24, 0x01	; 1
     2ea:	d1 d6       	rcall	.+3490   	; 0x108e <xQueueCreateMutex>
     2ec:	90 93 90 11 	sts	0x1190, r25	; 0x801190 <xBackDistanceSemaphore+0x1>
     2f0:	80 93 8f 11 	sts	0x118F, r24	; 0x80118f <xBackDistanceSemaphore>

	// Initialize event group
	xObstacleEventGroup = xEventGroupCreate();
     2f4:	4f d1       	rcall	.+670    	; 0x594 <xEventGroupCreate>
     2f6:	90 93 92 11 	sts	0x1192, r25	; 0x801192 <xObstacleEventGroup+0x1>
     2fa:	80 93 91 11 	sts	0x1191, r24	; 0x801191 <xObstacleEventGroup>

	// Create distance measurement tasks
	xTaskCreate(distanceMeasurementFrontTask, "FrontDistanceMeas", configMINIMAL_STACK_SIZE, NULL, 3, NULL);
     2fe:	e1 2c       	mov	r14, r1
     300:	f1 2c       	mov	r15, r1
     302:	03 e0       	ldi	r16, 0x03	; 3
     304:	20 e0       	ldi	r18, 0x00	; 0
     306:	30 e0       	ldi	r19, 0x00	; 0
     308:	40 ec       	ldi	r20, 0xC0	; 192
     30a:	50 e0       	ldi	r21, 0x00	; 0
     30c:	6e e5       	ldi	r22, 0x5E	; 94
     30e:	72 e0       	ldi	r23, 0x02	; 2
     310:	87 eb       	ldi	r24, 0xB7	; 183
     312:	90 e0       	ldi	r25, 0x00	; 0
     314:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <xTaskCreate>
	xTaskCreate(distanceMeasurementBackTask, "BackDistanceMeas", configMINIMAL_STACK_SIZE, NULL, 3, NULL);
     318:	20 e0       	ldi	r18, 0x00	; 0
     31a:	30 e0       	ldi	r19, 0x00	; 0
     31c:	40 ec       	ldi	r20, 0xC0	; 192
     31e:	50 e0       	ldi	r21, 0x00	; 0
     320:	60 e7       	ldi	r22, 0x70	; 112
     322:	72 e0       	ldi	r23, 0x02	; 2
     324:	81 e1       	ldi	r24, 0x11	; 17
     326:	91 e0       	ldi	r25, 0x01	; 1
     328:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <xTaskCreate>

	// Create obstacle event handler task
	xTaskCreate(obstacleDetectionFrontTask, "ObstacleEventHandler", configMINIMAL_STACK_SIZE, NULL, 5, NULL);
     32c:	05 e0       	ldi	r16, 0x05	; 5
     32e:	20 e0       	ldi	r18, 0x00	; 0
     330:	30 e0       	ldi	r19, 0x00	; 0
     332:	40 ec       	ldi	r20, 0xC0	; 192
     334:	50 e0       	ldi	r21, 0x00	; 0
     336:	61 e8       	ldi	r22, 0x81	; 129
     338:	72 e0       	ldi	r23, 0x02	; 2
     33a:	80 ed       	ldi	r24, 0xD0	; 208
     33c:	91 e0       	ldi	r25, 0x01	; 1
     33e:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <xTaskCreate>
	xTaskCreate(obstacleDetectionBackTask, "ObstacleEventHandler", configMINIMAL_STACK_SIZE, NULL, 5, NULL);
     342:	20 e0       	ldi	r18, 0x00	; 0
     344:	30 e0       	ldi	r19, 0x00	; 0
     346:	40 ec       	ldi	r20, 0xC0	; 192
     348:	50 e0       	ldi	r21, 0x00	; 0
     34a:	61 e8       	ldi	r22, 0x81	; 129
     34c:	72 e0       	ldi	r23, 0x02	; 2
     34e:	89 ef       	ldi	r24, 0xF9	; 249
     350:	91 e0       	ldi	r25, 0x01	; 1
     352:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <xTaskCreate>
}
     356:	0f 91       	pop	r16
     358:	ff 90       	pop	r15
     35a:	ef 90       	pop	r14
     35c:	08 95       	ret

0000035e <turnOnLight>:

// Function to turn on the light
void turnOnLight(bool frontLight)
{
	
	uint8_t LIGHT_PIN = frontLight ? P_LIGHT_PIN_Front : P_LIGHT_PIN_Back; // Choose the correct pin based on the sensor
     35e:	88 23       	and	r24, r24
     360:	11 f0       	breq	.+4      	; 0x366 <turnOnLight+0x8>
     362:	30 e0       	ldi	r19, 0x00	; 0
     364:	01 c0       	rjmp	.+2      	; 0x368 <turnOnLight+0xa>
     366:	36 e0       	ldi	r19, 0x06	; 6
	// Set LIGHT_PIN high
	PORTC |= (1 << LIGHT_PIN);
     368:	28 b1       	in	r18, 0x08	; 8
     36a:	81 e0       	ldi	r24, 0x01	; 1
     36c:	90 e0       	ldi	r25, 0x00	; 0
     36e:	02 c0       	rjmp	.+4      	; 0x374 <turnOnLight+0x16>
     370:	88 0f       	add	r24, r24
     372:	99 1f       	adc	r25, r25
     374:	3a 95       	dec	r19
     376:	e2 f7       	brpl	.-8      	; 0x370 <turnOnLight+0x12>
     378:	82 2b       	or	r24, r18
     37a:	88 b9       	out	0x08, r24	; 8
     37c:	08 95       	ret

0000037e <turnOffLight>:
}

// Function to turn off the light
void turnOffLight(bool frontLight)
{
	uint8_t LIGHT_PIN = frontLight ? P_LIGHT_PIN_Front : P_LIGHT_PIN_Back; // Choose the correct pin based on the sensor
     37e:	88 23       	and	r24, r24
     380:	11 f0       	breq	.+4      	; 0x386 <turnOffLight+0x8>
     382:	30 e0       	ldi	r19, 0x00	; 0
     384:	01 c0       	rjmp	.+2      	; 0x388 <turnOffLight+0xa>
     386:	36 e0       	ldi	r19, 0x06	; 6

	// Set LIGHT_PIN low
	PORTC &= ~(1 << LIGHT_PIN);
     388:	28 b1       	in	r18, 0x08	; 8
     38a:	81 e0       	ldi	r24, 0x01	; 1
     38c:	90 e0       	ldi	r25, 0x00	; 0
     38e:	02 c0       	rjmp	.+4      	; 0x394 <turnOffLight+0x16>
     390:	88 0f       	add	r24, r24
     392:	99 1f       	adc	r25, r25
     394:	3a 95       	dec	r19
     396:	e2 f7       	brpl	.-8      	; 0x390 <turnOffLight+0x12>
     398:	80 95       	com	r24
     39a:	82 23       	and	r24, r18
     39c:	88 b9       	out	0x08, r24	; 8
     39e:	08 95       	ret

000003a0 <obstacleDetectionFrontTask>:
	const TickType_t xFrequency = pdMS_TO_TICKS(1000); // Check every 2 seconds
	while (1) {
		uint16_t distance;
		
		// Try to take the front semaphore to read the distance
		if (xSemaphoreTake(xFrontDistanceSemaphore, portMAX_DELAY) == pdTRUE) {
     3a0:	4f ef       	ldi	r20, 0xFF	; 255
     3a2:	5f ef       	ldi	r21, 0xFF	; 255
     3a4:	ba 01       	movw	r22, r20
     3a6:	80 91 93 11 	lds	r24, 0x1193	; 0x801193 <xFrontDistanceSemaphore>
     3aa:	90 91 94 11 	lds	r25, 0x1194	; 0x801194 <xFrontDistanceSemaphore+0x1>
     3ae:	40 d7       	rcall	.+3712   	; 0x1230 <xQueueSemaphoreTake>
     3b0:	81 30       	cpi	r24, 0x01	; 1
     3b2:	79 f4       	brne	.+30     	; 0x3d2 <obstacleDetectionFrontTask+0x32>
			distance = frontMeasuredDistance;
     3b4:	c0 91 cc 02 	lds	r28, 0x02CC	; 0x8002cc <frontMeasuredDistance>
     3b8:	d0 91 cd 02 	lds	r29, 0x02CD	; 0x8002cd <frontMeasuredDistance+0x1>
			xSemaphoreGive(xFrontDistanceSemaphore); // Release the semaphore immediately after reading
     3bc:	00 e0       	ldi	r16, 0x00	; 0
     3be:	20 e0       	ldi	r18, 0x00	; 0
     3c0:	30 e0       	ldi	r19, 0x00	; 0
     3c2:	a9 01       	movw	r20, r18
     3c4:	60 e0       	ldi	r22, 0x00	; 0
     3c6:	70 e0       	ldi	r23, 0x00	; 0
     3c8:	80 91 93 11 	lds	r24, 0x1193	; 0x801193 <xFrontDistanceSemaphore>
     3cc:	90 91 94 11 	lds	r25, 0x1194	; 0x801194 <xFrontDistanceSemaphore+0x1>
     3d0:	bf d5       	rcall	.+2942   	; 0xf50 <xQueueGenericSend>
		}
		
		// Now, take action based on the measured distance
		if (distance < THRESHOLD_DISTANCE) {
     3d2:	cc 32       	cpi	r28, 0x2C	; 44
     3d4:	81 e0       	ldi	r24, 0x01	; 1
     3d6:	d8 07       	cpc	r29, r24
			turnOnLight(true); // Front light ON if obstacle is close
     3d8:	18 f4       	brcc	.+6      	; 0x3e0 <obstacleDetectionFrontTask+0x40>
     3da:	81 e0       	ldi	r24, 0x01	; 1
     3dc:	c0 df       	rcall	.-128    	; 0x35e <turnOnLight>
			} else {
			turnOffLight(true); // Front light OFF if obstacle is far
     3de:	02 c0       	rjmp	.+4      	; 0x3e4 <obstacleDetectionFrontTask+0x44>
     3e0:	81 e0       	ldi	r24, 0x01	; 1
     3e2:	cd df       	rcall	.-102    	; 0x37e <turnOffLight>
		}
		
		vTaskDelay(xFrequency); // Wait for the next cycle
     3e4:	6e e3       	ldi	r22, 0x3E	; 62
     3e6:	70 e0       	ldi	r23, 0x00	; 0
     3e8:	80 e0       	ldi	r24, 0x00	; 0
     3ea:	90 e0       	ldi	r25, 0x00	; 0
     3ec:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <vTaskDelay>
	}
     3f0:	d7 cf       	rjmp	.-82     	; 0x3a0 <obstacleDetectionFrontTask>

000003f2 <obstacleDetectionBackTask>:
	const TickType_t xFrequency = pdMS_TO_TICKS(1000); // Check every 2 seconds
	while (1) {
		uint16_t distance;
		
		// Try to take the back semaphore to read the distance
		if (xSemaphoreTake(xBackDistanceSemaphore, portMAX_DELAY) == pdTRUE) {
     3f2:	4f ef       	ldi	r20, 0xFF	; 255
     3f4:	5f ef       	ldi	r21, 0xFF	; 255
     3f6:	ba 01       	movw	r22, r20
     3f8:	80 91 8f 11 	lds	r24, 0x118F	; 0x80118f <xBackDistanceSemaphore>
     3fc:	90 91 90 11 	lds	r25, 0x1190	; 0x801190 <xBackDistanceSemaphore+0x1>
     400:	17 d7       	rcall	.+3630   	; 0x1230 <xQueueSemaphoreTake>
     402:	81 30       	cpi	r24, 0x01	; 1
     404:	79 f4       	brne	.+30     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
			distance = backMeasuredDistance;
     406:	c0 91 ca 02 	lds	r28, 0x02CA	; 0x8002ca <__data_end>
     40a:	d0 91 cb 02 	lds	r29, 0x02CB	; 0x8002cb <__data_end+0x1>
			xSemaphoreGive(xBackDistanceSemaphore); // Release the semaphore immediately after reading
     40e:	00 e0       	ldi	r16, 0x00	; 0
     410:	20 e0       	ldi	r18, 0x00	; 0
     412:	30 e0       	ldi	r19, 0x00	; 0
     414:	a9 01       	movw	r20, r18
     416:	60 e0       	ldi	r22, 0x00	; 0
     418:	70 e0       	ldi	r23, 0x00	; 0
     41a:	80 91 8f 11 	lds	r24, 0x118F	; 0x80118f <xBackDistanceSemaphore>
     41e:	90 91 90 11 	lds	r25, 0x1190	; 0x801190 <xBackDistanceSemaphore+0x1>
     422:	96 d5       	rcall	.+2860   	; 0xf50 <xQueueGenericSend>
		}
		
		// Now, take action based on the measured distance
		if (distance < THRESHOLD_DISTANCE) {
     424:	cc 32       	cpi	r28, 0x2C	; 44
     426:	81 e0       	ldi	r24, 0x01	; 1
     428:	d8 07       	cpc	r29, r24
			turnOnLight(false); // Back light ON if obstacle is close
     42a:	18 f4       	brcc	.+6      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
     42c:	80 e0       	ldi	r24, 0x00	; 0
     42e:	97 df       	rcall	.-210    	; 0x35e <turnOnLight>
			} else {
			turnOffLight(false); // Back light OFF if obstacle is far
     430:	02 c0       	rjmp	.+4      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
     432:	80 e0       	ldi	r24, 0x00	; 0
     434:	a4 df       	rcall	.-184    	; 0x37e <turnOffLight>
		}
		
		vTaskDelay(xFrequency); // Wait for the next cycle
     436:	6e e3       	ldi	r22, 0x3E	; 62
     438:	70 e0       	ldi	r23, 0x00	; 0
     43a:	80 e0       	ldi	r24, 0x00	; 0
     43c:	90 e0       	ldi	r25, 0x00	; 0
     43e:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <vTaskDelay>
	}
     442:	d7 cf       	rjmp	.-82     	; 0x3f2 <obstacleDetectionBackTask>

00000444 <hc_sr04_init>:
#define P_EchoFront PC4
#define P_EchoBack PC3
void hc_sr04_init()
{
    //Vcc
    DDR_Vcc|=(1 << P_Vcc);
     444:	87 b1       	in	r24, 0x07	; 7
     446:	81 60       	ori	r24, 0x01	; 1
     448:	87 b9       	out	0x07, r24	; 7
    PORT_Vcc|=(1 << P_Vcc);
     44a:	88 b1       	in	r24, 0x08	; 8
     44c:	81 60       	ori	r24, 0x01	; 1
     44e:	88 b9       	out	0x08, r24	; 8

    //GND
    DDR_Gnd|=(1 << P_Gnd);
     450:	87 b1       	in	r24, 0x07	; 7
     452:	80 64       	ori	r24, 0x40	; 64
     454:	87 b9       	out	0x07, r24	; 7

    //Trigger
    DDR_Trig|=(1 << P_TrigFront);
     456:	87 b1       	in	r24, 0x07	; 7
     458:	84 60       	ori	r24, 0x04	; 4
     45a:	87 b9       	out	0x07, r24	; 7
	DDR_Trig|=(1<< P_TrigBack);
     45c:	87 b1       	in	r24, 0x07	; 7
     45e:	82 60       	ori	r24, 0x02	; 2
     460:	87 b9       	out	0x07, r24	; 7
     462:	08 95       	ret

00000464 <hc_sr04_takeMeasurement>:
//     */
//     cnt = cnt * 343UL / 125UL;
// 
//     return cnt;
// }
uint16_t hc_sr04_takeMeasurement(bool isFrontSensor) {
     464:	0f 93       	push	r16
     466:	1f 93       	push	r17
     468:	cf 93       	push	r28
     46a:	df 93       	push	r29
	uint16_t cnt = 0;
	uint8_t trigPin = isFrontSensor ? P_TrigFront : P_TrigBack; // Choose the correct pin based on the sensor
     46c:	88 23       	and	r24, r24
     46e:	11 f0       	breq	.+4      	; 0x474 <hc_sr04_takeMeasurement+0x10>
     470:	32 e0       	ldi	r19, 0x02	; 2
     472:	01 c0       	rjmp	.+2      	; 0x476 <hc_sr04_takeMeasurement+0x12>
     474:	31 e0       	ldi	r19, 0x01	; 1
	uint8_t echoPin = isFrontSensor ? P_EchoFront : P_EchoBack; // Choose the correct pin based on the sensor
     476:	88 23       	and	r24, r24
     478:	11 f0       	breq	.+4      	; 0x47e <hc_sr04_takeMeasurement+0x1a>
     47a:	04 e0       	ldi	r16, 0x04	; 4
     47c:	01 c0       	rjmp	.+2      	; 0x480 <hc_sr04_takeMeasurement+0x1c>
     47e:	03 e0       	ldi	r16, 0x03	; 3
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     480:	25 e3       	ldi	r18, 0x35	; 53
     482:	2a 95       	dec	r18
     484:	f1 f7       	brne	.-4      	; 0x482 <hc_sr04_takeMeasurement+0x1e>
     486:	00 00       	nop

	_delay_us(10);
	PORT_trig |= (1 << trigPin); // Trigger the measurement
     488:	28 b1       	in	r18, 0x08	; 8
     48a:	81 e0       	ldi	r24, 0x01	; 1
     48c:	90 e0       	ldi	r25, 0x00	; 0
     48e:	02 c0       	rjmp	.+4      	; 0x494 <hc_sr04_takeMeasurement+0x30>
     490:	88 0f       	add	r24, r24
     492:	99 1f       	adc	r25, r25
     494:	3a 95       	dec	r19
     496:	e2 f7       	brpl	.-8      	; 0x490 <hc_sr04_takeMeasurement+0x2c>
     498:	92 2f       	mov	r25, r18
     49a:	98 2b       	or	r25, r24
     49c:	98 b9       	out	0x08, r25	; 8
     49e:	25 e3       	ldi	r18, 0x35	; 53
     4a0:	2a 95       	dec	r18
     4a2:	f1 f7       	brne	.-4      	; 0x4a0 <hc_sr04_takeMeasurement+0x3c>
     4a4:	00 00       	nop
	_delay_us(10);
	PORT_trig &= ~(1 << trigPin);
     4a6:	98 b1       	in	r25, 0x08	; 8
     4a8:	80 95       	com	r24
     4aa:	89 23       	and	r24, r25
     4ac:	88 b9       	out	0x08, r24	; 8

	uint8_t TCCR1B_state = TCCR1B; // Save the current state of TCCR1B
     4ae:	e1 e8       	ldi	r30, 0x81	; 129
     4b0:	f0 e0       	ldi	r31, 0x00	; 0
     4b2:	10 81       	ld	r17, Z

	// Set the Timer/Counter1 prescaler to 256
	TCCR1B = (1 << CS12);
     4b4:	84 e0       	ldi	r24, 0x04	; 4
     4b6:	80 83       	st	Z, r24
	
	TCNT1 = 0; // Reset the timer
     4b8:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
     4bc:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
	while (!(PIN_Echo & (1 << echoPin))) {
     4c0:	10 c0       	rjmp	.+32     	; 0x4e2 <hc_sr04_takeMeasurement+0x7e>
		// Check for timeout (100ms)
		if (TCNT1 >= (F_CPU / 256) * 0.1) {
     4c2:	60 91 84 00 	lds	r22, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
     4c6:	70 91 85 00 	lds	r23, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
     4ca:	80 e0       	ldi	r24, 0x00	; 0
     4cc:	90 e0       	ldi	r25, 0x00	; 0
     4ce:	0e 94 ed 15 	call	0x2bda	; 0x2bda <__floatunsisf>
     4d2:	20 e0       	ldi	r18, 0x00	; 0
     4d4:	30 e5       	ldi	r19, 0x50	; 80
     4d6:	43 ec       	ldi	r20, 0xC3	; 195
     4d8:	55 e4       	ldi	r21, 0x45	; 69
     4da:	0e 94 2a 16 	call	0x2c54	; 0x2c54 <__gesf2>
     4de:	88 23       	and	r24, r24
     4e0:	e4 f5       	brge	.+120    	; 0x55a <hc_sr04_takeMeasurement+0xf6>

	// Set the Timer/Counter1 prescaler to 256
	TCCR1B = (1 << CS12);
	
	TCNT1 = 0; // Reset the timer
	while (!(PIN_Echo & (1 << echoPin))) {
     4e2:	86 b1       	in	r24, 0x06	; 6
     4e4:	c0 2f       	mov	r28, r16
     4e6:	90 e0       	ldi	r25, 0x00	; 0
     4e8:	00 2e       	mov	r0, r16
     4ea:	02 c0       	rjmp	.+4      	; 0x4f0 <hc_sr04_takeMeasurement+0x8c>
     4ec:	95 95       	asr	r25
     4ee:	87 95       	ror	r24
     4f0:	0a 94       	dec	r0
     4f2:	e2 f7       	brpl	.-8      	; 0x4ec <hc_sr04_takeMeasurement+0x88>
     4f4:	80 ff       	sbrs	r24, 0
     4f6:	e5 cf       	rjmp	.-54     	; 0x4c2 <hc_sr04_takeMeasurement+0x5e>
			return 0; // Sensor is not working
		}
	}

	// Wait for the echo pin to go high
	TCNT1 = 0; // Reset the timer for the high signal duration
     4f8:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
     4fc:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
	while (PIN_Echo & (1 << echoPin)) {
     500:	10 c0       	rjmp	.+32     	; 0x522 <hc_sr04_takeMeasurement+0xbe>
		// Check for timer overflow (24ms)
		if (TCNT1 >= (F_CPU / 256) * 0.024) {
     502:	60 91 84 00 	lds	r22, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
     506:	70 91 85 00 	lds	r23, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
     50a:	80 e0       	ldi	r24, 0x00	; 0
     50c:	90 e0       	ldi	r25, 0x00	; 0
     50e:	0e 94 ed 15 	call	0x2bda	; 0x2bda <__floatunsisf>
     512:	20 e0       	ldi	r18, 0x00	; 0
     514:	30 e8       	ldi	r19, 0x80	; 128
     516:	4b eb       	ldi	r20, 0xBB	; 187
     518:	54 e4       	ldi	r21, 0x44	; 68
     51a:	0e 94 2a 16 	call	0x2c54	; 0x2c54 <__gesf2>
     51e:	88 23       	and	r24, r24
     520:	54 f4       	brge	.+20     	; 0x536 <hc_sr04_takeMeasurement+0xd2>
		}
	}

	// Wait for the echo pin to go high
	TCNT1 = 0; // Reset the timer for the high signal duration
	while (PIN_Echo & (1 << echoPin)) {
     522:	86 b1       	in	r24, 0x06	; 6
     524:	90 e0       	ldi	r25, 0x00	; 0
     526:	0c 2e       	mov	r0, r28
     528:	02 c0       	rjmp	.+4      	; 0x52e <hc_sr04_takeMeasurement+0xca>
     52a:	95 95       	asr	r25
     52c:	87 95       	ror	r24
     52e:	0a 94       	dec	r0
     530:	e2 f7       	brpl	.-8      	; 0x52a <hc_sr04_takeMeasurement+0xc6>
     532:	80 fd       	sbrc	r24, 0
     534:	e6 cf       	rjmp	.-52     	; 0x502 <hc_sr04_takeMeasurement+0x9e>
		// Check for timer overflow (24ms)
		if (TCNT1 >= (F_CPU / 256) * 0.024) {
			break; // Timer overflowed
		}
	}
	cnt = TCNT1; // Save the duration of the high signal
     536:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
     53a:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>

	TCCR1B = TCCR1B_state; // Restore TCCR1B state
     53e:	10 93 81 00 	sts	0x0081, r17	; 0x800081 <__TEXT_REGION_LENGTH__+0x7c0081>

	// Distance calculation based on the duration of the high signal
	cnt = cnt * 343UL / 125UL;
     542:	a7 e5       	ldi	r26, 0x57	; 87
     544:	b1 e0       	ldi	r27, 0x01	; 1
     546:	0e 94 f7 1c 	call	0x39ee	; 0x39ee <__umulhisi3>
     54a:	2d e7       	ldi	r18, 0x7D	; 125
     54c:	30 e0       	ldi	r19, 0x00	; 0
     54e:	40 e0       	ldi	r20, 0x00	; 0
     550:	50 e0       	ldi	r21, 0x00	; 0
     552:	0e 94 cd 1c 	call	0x399a	; 0x399a <__udivmodsi4>

	return cnt;
     556:	c9 01       	movw	r24, r18
     558:	02 c0       	rjmp	.+4      	; 0x55e <hc_sr04_takeMeasurement+0xfa>
	
	TCNT1 = 0; // Reset the timer
	while (!(PIN_Echo & (1 << echoPin))) {
		// Check for timeout (100ms)
		if (TCNT1 >= (F_CPU / 256) * 0.1) {
			return 0; // Sensor is not working
     55a:	80 e0       	ldi	r24, 0x00	; 0
     55c:	90 e0       	ldi	r25, 0x00	; 0

	// Distance calculation based on the duration of the high signal
	cnt = cnt * 343UL / 125UL;

	return cnt;
}
     55e:	df 91       	pop	r29
     560:	cf 91       	pop	r28
     562:	1f 91       	pop	r17
     564:	0f 91       	pop	r16
     566:	08 95       	ret

00000568 <trace_init>:
	 #if (configUseR2RTrace == 1)
	 #ifdef HAL_DEFS_H_

	 #else
		// Used on VIA MEGA Shield rev. 2.0.0
		DDRK |= _BV(DDK0) | _BV(DDK1) | _BV(DDK2) | _BV(DDK3);
     568:	e7 e0       	ldi	r30, 0x07	; 7
     56a:	f1 e0       	ldi	r31, 0x01	; 1
     56c:	80 81       	ld	r24, Z
     56e:	8f 60       	ori	r24, 0x0F	; 15
     570:	80 83       	st	Z, r24
     572:	08 95       	ret

00000574 <task_switch_in>:
	void task_switch_in(uint8_t task_no) {
		 #ifdef HAL_DEFS_H_

		 #else
		 // Used on VIA MEGA Shield rev. 2.0.0
		 PORTK &= 0b11110000;
     574:	e8 e0       	ldi	r30, 0x08	; 8
     576:	f1 e0       	ldi	r31, 0x01	; 1
     578:	90 81       	ld	r25, Z
     57a:	90 7f       	andi	r25, 0xF0	; 240
     57c:	90 83       	st	Z, r25
		 PORTK |= (task_no & 0b00001111);
     57e:	90 81       	ld	r25, Z
     580:	8f 70       	andi	r24, 0x0F	; 15
     582:	98 2b       	or	r25, r24
     584:	90 83       	st	Z, r25
     586:	08 95       	ret

00000588 <task_switch_out>:
	void task_switch_out(uint8_t task_no) {
		#ifdef HAL_DEFS_H_

		#else
		// Used on VIA MEGA Shield rev. 2.0.0
		PORTK &= 0b11110000;
     588:	e8 e0       	ldi	r30, 0x08	; 8
     58a:	f1 e0       	ldi	r31, 0x01	; 1
     58c:	80 81       	ld	r24, Z
     58e:	80 7f       	andi	r24, 0xF0	; 240
     590:	80 83       	st	Z, r24
     592:	08 95       	ret

00000594 <xEventGroupCreate>:
        uxReturn = pxEventBits->uxEventBits;
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
     594:	cf 93       	push	r28
     596:	df 93       	push	r29
     598:	8f e0       	ldi	r24, 0x0F	; 15
     59a:	90 e0       	ldi	r25, 0x00	; 0
     59c:	0f d1       	rcall	.+542    	; 0x7bc <pvPortMalloc>
     59e:	ec 01       	movw	r28, r24
     5a0:	00 97       	sbiw	r24, 0x00	; 0
     5a2:	39 f0       	breq	.+14     	; 0x5b2 <xEventGroupCreate+0x1e>
     5a4:	fc 01       	movw	r30, r24
     5a6:	11 92       	st	Z+, r1
     5a8:	11 92       	st	Z+, r1
     5aa:	11 92       	st	Z+, r1
     5ac:	11 92       	st	Z+, r1
     5ae:	cf 01       	movw	r24, r30
     5b0:	ea d1       	rcall	.+980    	; 0x986 <vListInitialise>
     5b2:	ce 01       	movw	r24, r28
     5b4:	df 91       	pop	r29
     5b6:	cf 91       	pop	r28
     5b8:	08 95       	ret

000005ba <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,
                                const EventBits_t uxBitsToSet )
{
     5ba:	4f 92       	push	r4
     5bc:	5f 92       	push	r5
     5be:	6f 92       	push	r6
     5c0:	7f 92       	push	r7
     5c2:	af 92       	push	r10
     5c4:	bf 92       	push	r11
     5c6:	cf 92       	push	r12
     5c8:	df 92       	push	r13
     5ca:	ef 92       	push	r14
     5cc:	ff 92       	push	r15
     5ce:	0f 93       	push	r16
     5d0:	1f 93       	push	r17
     5d2:	cf 93       	push	r28
     5d4:	df 93       	push	r29
     5d6:	ec 01       	movw	r28, r24
     5d8:	6a 01       	movw	r12, r20
     5da:	7b 01       	movw	r14, r22
     * itself. */
    configASSERT( xEventGroup );
    configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );

    pxList = &( pxEventBits->xTasksWaitingForBits );
    pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     5dc:	8c 01       	movw	r16, r24
     5de:	09 5f       	subi	r16, 0xF9	; 249
     5e0:	1f 4f       	sbci	r17, 0xFF	; 255
    vTaskSuspendAll();
     5e2:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <vTaskSuspendAll>
    {
        traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

        pxListItem = listGET_HEAD_ENTRY( pxList );
     5e6:	eb 85       	ldd	r30, Y+11	; 0x0b
     5e8:	fc 85       	ldd	r31, Y+12	; 0x0c

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;
     5ea:	88 81       	ld	r24, Y
     5ec:	99 81       	ldd	r25, Y+1	; 0x01
     5ee:	aa 81       	ldd	r26, Y+2	; 0x02
     5f0:	bb 81       	ldd	r27, Y+3	; 0x03
     5f2:	c8 2a       	or	r12, r24
     5f4:	d9 2a       	or	r13, r25
     5f6:	ea 2a       	or	r14, r26
     5f8:	fb 2a       	or	r15, r27
     5fa:	c8 82       	st	Y, r12
     5fc:	d9 82       	std	Y+1, r13	; 0x01
     5fe:	ea 82       	std	Y+2, r14	; 0x02
     600:	fb 82       	std	Y+3, r15	; 0x03
                                const EventBits_t uxBitsToSet )
{
    ListItem_t * pxListItem, * pxNext;
    ListItem_t const * pxListEnd;
    List_t const * pxList;
    EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
     602:	c1 2c       	mov	r12, r1
     604:	d1 2c       	mov	r13, r1
     606:	76 01       	movw	r14, r12

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     608:	3d c0       	rjmp	.+122    	; 0x684 <xEventGroupSetBits+0xca>
        {
            pxNext = listGET_NEXT( pxListItem );
     60a:	a4 80       	ldd	r10, Z+4	; 0x04
     60c:	b5 80       	ldd	r11, Z+5	; 0x05
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
     60e:	80 81       	ld	r24, Z
     610:	91 81       	ldd	r25, Z+1	; 0x01
     612:	a2 81       	ldd	r26, Z+2	; 0x02
     614:	b3 81       	ldd	r27, Z+3	; 0x03
            xMatchFound = pdFALSE;

            /* Split the bits waited for from the control bits. */
            uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
            uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
     616:	ac 01       	movw	r20, r24
     618:	bd 01       	movw	r22, r26
     61a:	77 27       	eor	r23, r23

            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
     61c:	b2 fd       	sbrc	r27, 2
     61e:	0e c0       	rjmp	.+28     	; 0x63c <xEventGroupSetBits+0x82>
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
     620:	48 80       	ld	r4, Y
     622:	59 80       	ldd	r5, Y+1	; 0x01
     624:	6a 80       	ldd	r6, Y+2	; 0x02
     626:	7b 80       	ldd	r7, Y+3	; 0x03
     628:	44 22       	and	r4, r20
     62a:	55 22       	and	r5, r21
     62c:	66 22       	and	r6, r22
     62e:	77 22       	and	r7, r23
     630:	45 28       	or	r4, r5
     632:	46 28       	or	r4, r6
     634:	47 28       	or	r4, r7
     636:	89 f4       	brne	.+34     	; 0x65a <xEventGroupSetBits+0xa0>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     638:	20 e0       	ldi	r18, 0x00	; 0
     63a:	12 c0       	rjmp	.+36     	; 0x660 <xEventGroupSetBits+0xa6>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
     63c:	48 80       	ld	r4, Y
     63e:	59 80       	ldd	r5, Y+1	; 0x01
     640:	6a 80       	ldd	r6, Y+2	; 0x02
     642:	7b 80       	ldd	r7, Y+3	; 0x03
     644:	44 22       	and	r4, r20
     646:	55 22       	and	r5, r21
     648:	66 22       	and	r6, r22
     64a:	77 22       	and	r7, r23
     64c:	44 15       	cp	r20, r4
     64e:	55 05       	cpc	r21, r5
     650:	66 05       	cpc	r22, r6
     652:	77 05       	cpc	r23, r7
     654:	21 f0       	breq	.+8      	; 0x65e <xEventGroupSetBits+0xa4>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     656:	20 e0       	ldi	r18, 0x00	; 0
     658:	03 c0       	rjmp	.+6      	; 0x660 <xEventGroupSetBits+0xa6>
            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
                {
                    xMatchFound = pdTRUE;
     65a:	21 e0       	ldi	r18, 0x01	; 1
     65c:	01 c0       	rjmp	.+2      	; 0x660 <xEventGroupSetBits+0xa6>
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
            {
                /* All bits are set. */
                xMatchFound = pdTRUE;
     65e:	21 e0       	ldi	r18, 0x01	; 1
            else
            {
                /* Need all bits to be set, but not all the bits were set. */
            }

            if( xMatchFound != pdFALSE )
     660:	22 23       	and	r18, r18
     662:	71 f0       	breq	.+28     	; 0x680 <xEventGroupSetBits+0xc6>
            {
                /* The bits match.  Should the bits be cleared on exit? */
                if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
     664:	b0 ff       	sbrs	r27, 0
     666:	04 c0       	rjmp	.+8      	; 0x670 <xEventGroupSetBits+0xb6>
                {
                    uxBitsToClear |= uxBitsWaitedFor;
     668:	c4 2a       	or	r12, r20
     66a:	d5 2a       	or	r13, r21
     66c:	e6 2a       	or	r14, r22
     66e:	f7 2a       	or	r15, r23
                /* Store the actual event flag value in the task's event list
                 * item before removing the task from the event list.  The
                 * eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                 * that is was unblocked due to its required bits matching, rather
                 * than because it timed out. */
                vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
     670:	48 81       	ld	r20, Y
     672:	59 81       	ldd	r21, Y+1	; 0x01
     674:	6a 81       	ldd	r22, Y+2	; 0x02
     676:	7b 81       	ldd	r23, Y+3	; 0x03
     678:	72 60       	ori	r23, 0x02	; 2
     67a:	cf 01       	movw	r24, r30
     67c:	0e 94 31 10 	call	0x2062	; 0x2062 <vTaskRemoveFromUnorderedEventList>
        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
        {
            pxNext = listGET_NEXT( pxListItem );
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
            xMatchFound = pdFALSE;
     680:	ea 2d       	mov	r30, r10
     682:	fb 2d       	mov	r31, r11

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
     684:	e0 17       	cp	r30, r16
     686:	f1 07       	cpc	r31, r17
     688:	09 f0       	breq	.+2      	; 0x68c <xEventGroupSetBits+0xd2>
     68a:	bf cf       	rjmp	.-130    	; 0x60a <xEventGroupSetBits+0x50>
            pxListItem = pxNext;
        }

        /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
         * bit was set in the control word. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
     68c:	c0 94       	com	r12
     68e:	d0 94       	com	r13
     690:	e0 94       	com	r14
     692:	f0 94       	com	r15
     694:	88 81       	ld	r24, Y
     696:	99 81       	ldd	r25, Y+1	; 0x01
     698:	aa 81       	ldd	r26, Y+2	; 0x02
     69a:	bb 81       	ldd	r27, Y+3	; 0x03
     69c:	c8 22       	and	r12, r24
     69e:	d9 22       	and	r13, r25
     6a0:	ea 22       	and	r14, r26
     6a2:	fb 22       	and	r15, r27
     6a4:	c8 82       	st	Y, r12
     6a6:	d9 82       	std	Y+1, r13	; 0x01
     6a8:	ea 82       	std	Y+2, r14	; 0x02
     6aa:	fb 82       	std	Y+3, r15	; 0x03
    }
    ( void ) xTaskResumeAll();
     6ac:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <xTaskResumeAll>

    return pxEventBits->uxEventBits;
     6b0:	68 81       	ld	r22, Y
     6b2:	79 81       	ldd	r23, Y+1	; 0x01
     6b4:	8a 81       	ldd	r24, Y+2	; 0x02
     6b6:	9b 81       	ldd	r25, Y+3	; 0x03
}
     6b8:	df 91       	pop	r29
     6ba:	cf 91       	pop	r28
     6bc:	1f 91       	pop	r17
     6be:	0f 91       	pop	r16
     6c0:	ff 90       	pop	r15
     6c2:	ef 90       	pop	r14
     6c4:	df 90       	pop	r13
     6c6:	cf 90       	pop	r12
     6c8:	bf 90       	pop	r11
     6ca:	af 90       	pop	r10
     6cc:	7f 90       	pop	r7
     6ce:	6f 90       	pop	r6
     6d0:	5f 90       	pop	r5
     6d2:	4f 90       	pop	r4
     6d4:	08 95       	ret

000006d6 <prvHeapInit>:

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     6d6:	ea ed       	ldi	r30, 0xDA	; 218
     6d8:	f2 e0       	ldi	r31, 0x02	; 2
     6da:	ae ed       	ldi	r26, 0xDE	; 222
     6dc:	b2 e0       	ldi	r27, 0x02	; 2
     6de:	b1 83       	std	Z+1, r27	; 0x01
     6e0:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
     6e2:	13 82       	std	Z+3, r1	; 0x03
     6e4:	12 82       	std	Z+2, r1	; 0x02

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
     6e6:	e6 e8       	ldi	r30, 0x86	; 134
     6e8:	f0 e1       	ldi	r31, 0x10	; 16
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
     6ea:	f0 93 d9 02 	sts	0x02D9, r31	; 0x8002d9 <pxEnd+0x1>
     6ee:	e0 93 d8 02 	sts	0x02D8, r30	; 0x8002d8 <pxEnd>
    pxEnd->xBlockSize = 0;
     6f2:	13 82       	std	Z+3, r1	; 0x03
     6f4:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
     6f6:	11 82       	std	Z+1, r1	; 0x01
     6f8:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     6fa:	88 ea       	ldi	r24, 0xA8	; 168
     6fc:	9d e0       	ldi	r25, 0x0D	; 13
     6fe:	13 96       	adiw	r26, 0x03	; 3
     700:	9c 93       	st	X, r25
     702:	8e 93       	st	-X, r24
     704:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     706:	ed 93       	st	X+, r30
     708:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     70a:	90 93 d5 02 	sts	0x02D5, r25	; 0x8002d5 <xMinimumEverFreeBytesRemaining+0x1>
     70e:	80 93 d4 02 	sts	0x02D4, r24	; 0x8002d4 <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     712:	90 93 d7 02 	sts	0x02D7, r25	; 0x8002d7 <xFreeBytesRemaining+0x1>
     716:	80 93 d6 02 	sts	0x02D6, r24	; 0x8002d6 <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     71a:	80 e0       	ldi	r24, 0x00	; 0
     71c:	90 e8       	ldi	r25, 0x80	; 128
     71e:	90 93 cf 02 	sts	0x02CF, r25	; 0x8002cf <xBlockAllocatedBit+0x1>
     722:	80 93 ce 02 	sts	0x02CE, r24	; 0x8002ce <xBlockAllocatedBit>
     726:	08 95       	ret

00000728 <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
     728:	cf 93       	push	r28
     72a:	df 93       	push	r29
     72c:	ec 01       	movw	r28, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     72e:	aa ed       	ldi	r26, 0xDA	; 218
     730:	b2 e0       	ldi	r27, 0x02	; 2
     732:	01 c0       	rjmp	.+2      	; 0x736 <prvInsertBlockIntoFreeList+0xe>
     734:	df 01       	movw	r26, r30
     736:	ed 91       	ld	r30, X+
     738:	fc 91       	ld	r31, X
     73a:	11 97       	sbiw	r26, 0x01	; 1
     73c:	ec 17       	cp	r30, r28
     73e:	fd 07       	cpc	r31, r29
     740:	c8 f3       	brcs	.-14     	; 0x734 <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     742:	12 96       	adiw	r26, 0x02	; 2
     744:	8d 91       	ld	r24, X+
     746:	9c 91       	ld	r25, X
     748:	13 97       	sbiw	r26, 0x03	; 3
     74a:	9d 01       	movw	r18, r26
     74c:	28 0f       	add	r18, r24
     74e:	39 1f       	adc	r19, r25
     750:	c2 17       	cp	r28, r18
     752:	d3 07       	cpc	r29, r19
     754:	49 f4       	brne	.+18     	; 0x768 <prvInsertBlockIntoFreeList+0x40>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     756:	2a 81       	ldd	r18, Y+2	; 0x02
     758:	3b 81       	ldd	r19, Y+3	; 0x03
     75a:	82 0f       	add	r24, r18
     75c:	93 1f       	adc	r25, r19
     75e:	13 96       	adiw	r26, 0x03	; 3
     760:	9c 93       	st	X, r25
     762:	8e 93       	st	-X, r24
     764:	12 97       	sbiw	r26, 0x02	; 2
        pxBlockToInsert = pxIterator;
     766:	ed 01       	movw	r28, r26

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     768:	8a 81       	ldd	r24, Y+2	; 0x02
     76a:	9b 81       	ldd	r25, Y+3	; 0x03
     76c:	9e 01       	movw	r18, r28
     76e:	28 0f       	add	r18, r24
     770:	39 1f       	adc	r19, r25
     772:	e2 17       	cp	r30, r18
     774:	f3 07       	cpc	r31, r19
     776:	c1 f4       	brne	.+48     	; 0x7a8 <prvInsertBlockIntoFreeList+0x80>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
     778:	20 91 d8 02 	lds	r18, 0x02D8	; 0x8002d8 <pxEnd>
     77c:	30 91 d9 02 	lds	r19, 0x02D9	; 0x8002d9 <pxEnd+0x1>
     780:	e2 17       	cp	r30, r18
     782:	f3 07       	cpc	r31, r19
     784:	71 f0       	breq	.+28     	; 0x7a2 <prvInsertBlockIntoFreeList+0x7a>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     786:	22 81       	ldd	r18, Z+2	; 0x02
     788:	33 81       	ldd	r19, Z+3	; 0x03
     78a:	82 0f       	add	r24, r18
     78c:	93 1f       	adc	r25, r19
     78e:	9b 83       	std	Y+3, r25	; 0x03
     790:	8a 83       	std	Y+2, r24	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     792:	ed 91       	ld	r30, X+
     794:	fc 91       	ld	r31, X
     796:	11 97       	sbiw	r26, 0x01	; 1
     798:	80 81       	ld	r24, Z
     79a:	91 81       	ldd	r25, Z+1	; 0x01
     79c:	99 83       	std	Y+1, r25	; 0x01
     79e:	88 83       	st	Y, r24
     7a0:	05 c0       	rjmp	.+10     	; 0x7ac <prvInsertBlockIntoFreeList+0x84>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
     7a2:	39 83       	std	Y+1, r19	; 0x01
     7a4:	28 83       	st	Y, r18
     7a6:	02 c0       	rjmp	.+4      	; 0x7ac <prvInsertBlockIntoFreeList+0x84>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     7a8:	f9 83       	std	Y+1, r31	; 0x01
     7aa:	e8 83       	st	Y, r30

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
     7ac:	ca 17       	cp	r28, r26
     7ae:	db 07       	cpc	r29, r27
     7b0:	11 f0       	breq	.+4      	; 0x7b6 <prvInsertBlockIntoFreeList+0x8e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
     7b2:	cd 93       	st	X+, r28
     7b4:	dc 93       	st	X, r29
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
     7b6:	df 91       	pop	r29
     7b8:	cf 91       	pop	r28
     7ba:	08 95       	ret

000007bc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     7bc:	ef 92       	push	r14
     7be:	ff 92       	push	r15
     7c0:	0f 93       	push	r16
     7c2:	1f 93       	push	r17
     7c4:	cf 93       	push	r28
     7c6:	df 93       	push	r29
     7c8:	8c 01       	movw	r16, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     7ca:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
     7ce:	80 91 d8 02 	lds	r24, 0x02D8	; 0x8002d8 <pxEnd>
     7d2:	90 91 d9 02 	lds	r25, 0x02D9	; 0x8002d9 <pxEnd+0x1>
     7d6:	89 2b       	or	r24, r25
     7d8:	09 f4       	brne	.+2      	; 0x7dc <pvPortMalloc+0x20>
        {
            prvHeapInit();
     7da:	7d df       	rcall	.-262    	; 0x6d6 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     7dc:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <xBlockAllocatedBit>
     7e0:	90 91 cf 02 	lds	r25, 0x02CF	; 0x8002cf <xBlockAllocatedBit+0x1>
     7e4:	80 23       	and	r24, r16
     7e6:	91 23       	and	r25, r17
     7e8:	89 2b       	or	r24, r25
     7ea:	09 f0       	breq	.+2      	; 0x7ee <pvPortMalloc+0x32>
     7ec:	76 c0       	rjmp	.+236    	; 0x8da <pvPortMalloc+0x11e>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     7ee:	01 15       	cp	r16, r1
     7f0:	11 05       	cpc	r17, r1
     7f2:	49 f0       	breq	.+18     	; 0x806 <pvPortMalloc+0x4a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
     7f4:	c8 01       	movw	r24, r16
     7f6:	04 96       	adiw	r24, 0x04	; 4
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     7f8:	08 17       	cp	r16, r24
     7fa:	19 07       	cpc	r17, r25
     7fc:	18 f0       	brcs	.+6      	; 0x804 <pvPortMalloc+0x48>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
     7fe:	00 e0       	ldi	r16, 0x00	; 0
     800:	10 e0       	ldi	r17, 0x00	; 0
     802:	01 c0       	rjmp	.+2      	; 0x806 <pvPortMalloc+0x4a>
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
            {
                xWantedSize += xHeapStructSize;
     804:	8c 01       	movw	r16, r24
            else 
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     806:	01 15       	cp	r16, r1
     808:	11 05       	cpc	r17, r1
     80a:	09 f4       	brne	.+2      	; 0x80e <pvPortMalloc+0x52>
     80c:	69 c0       	rjmp	.+210    	; 0x8e0 <pvPortMalloc+0x124>
     80e:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <xFreeBytesRemaining>
     812:	90 91 d7 02 	lds	r25, 0x02D7	; 0x8002d7 <xFreeBytesRemaining+0x1>
     816:	80 17       	cp	r24, r16
     818:	91 07       	cpc	r25, r17
     81a:	08 f4       	brcc	.+2      	; 0x81e <pvPortMalloc+0x62>
     81c:	64 c0       	rjmp	.+200    	; 0x8e6 <pvPortMalloc+0x12a>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
     81e:	c0 91 da 02 	lds	r28, 0x02DA	; 0x8002da <xStart>
     822:	d0 91 db 02 	lds	r29, 0x02DB	; 0x8002db <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
     826:	ea ed       	ldi	r30, 0xDA	; 218
     828:	f2 e0       	ldi	r31, 0x02	; 2
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     82a:	02 c0       	rjmp	.+4      	; 0x830 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
     82c:	fe 01       	movw	r30, r28
                    pxBlock = pxBlock->pxNextFreeBlock;
     82e:	ec 01       	movw	r28, r24
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     830:	8a 81       	ldd	r24, Y+2	; 0x02
     832:	9b 81       	ldd	r25, Y+3	; 0x03
     834:	80 17       	cp	r24, r16
     836:	91 07       	cpc	r25, r17
     838:	20 f4       	brcc	.+8      	; 0x842 <pvPortMalloc+0x86>
     83a:	88 81       	ld	r24, Y
     83c:	99 81       	ldd	r25, Y+1	; 0x01
     83e:	00 97       	sbiw	r24, 0x00	; 0
     840:	a9 f7       	brne	.-22     	; 0x82c <pvPortMalloc+0x70>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
     842:	80 91 d8 02 	lds	r24, 0x02D8	; 0x8002d8 <pxEnd>
     846:	90 91 d9 02 	lds	r25, 0x02D9	; 0x8002d9 <pxEnd+0x1>
     84a:	c8 17       	cp	r28, r24
     84c:	d9 07       	cpc	r29, r25
     84e:	09 f4       	brne	.+2      	; 0x852 <pvPortMalloc+0x96>
     850:	4d c0       	rjmp	.+154    	; 0x8ec <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     852:	e0 80       	ld	r14, Z
     854:	f1 80       	ldd	r15, Z+1	; 0x01
     856:	84 e0       	ldi	r24, 0x04	; 4
     858:	e8 0e       	add	r14, r24
     85a:	f1 1c       	adc	r15, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     85c:	88 81       	ld	r24, Y
     85e:	99 81       	ldd	r25, Y+1	; 0x01
     860:	91 83       	std	Z+1, r25	; 0x01
     862:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     864:	2a 81       	ldd	r18, Y+2	; 0x02
     866:	3b 81       	ldd	r19, Y+3	; 0x03
     868:	20 1b       	sub	r18, r16
     86a:	31 0b       	sbc	r19, r17
     86c:	29 30       	cpi	r18, 0x09	; 9
     86e:	31 05       	cpc	r19, r1
     870:	48 f0       	brcs	.+18     	; 0x884 <pvPortMalloc+0xc8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     872:	ce 01       	movw	r24, r28
     874:	80 0f       	add	r24, r16
     876:	91 1f       	adc	r25, r17
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     878:	fc 01       	movw	r30, r24
     87a:	33 83       	std	Z+3, r19	; 0x03
     87c:	22 83       	std	Z+2, r18	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
     87e:	1b 83       	std	Y+3, r17	; 0x03

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
     880:	0a 83       	std	Y+2, r16	; 0x02
     882:	52 df       	rcall	.-348    	; 0x728 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
     884:	2a 81       	ldd	r18, Y+2	; 0x02
     886:	3b 81       	ldd	r19, Y+3	; 0x03
     888:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <xFreeBytesRemaining>
     88c:	90 91 d7 02 	lds	r25, 0x02D7	; 0x8002d7 <xFreeBytesRemaining+0x1>
     890:	82 1b       	sub	r24, r18
     892:	93 0b       	sbc	r25, r19
     894:	90 93 d7 02 	sts	0x02D7, r25	; 0x8002d7 <xFreeBytesRemaining+0x1>
     898:	80 93 d6 02 	sts	0x02D6, r24	; 0x8002d6 <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     89c:	40 91 d4 02 	lds	r20, 0x02D4	; 0x8002d4 <xMinimumEverFreeBytesRemaining>
     8a0:	50 91 d5 02 	lds	r21, 0x02D5	; 0x8002d5 <xMinimumEverFreeBytesRemaining+0x1>
     8a4:	84 17       	cp	r24, r20
     8a6:	95 07       	cpc	r25, r21
     8a8:	20 f4       	brcc	.+8      	; 0x8b2 <pvPortMalloc+0xf6>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     8aa:	90 93 d5 02 	sts	0x02D5, r25	; 0x8002d5 <xMinimumEverFreeBytesRemaining+0x1>
     8ae:	80 93 d4 02 	sts	0x02D4, r24	; 0x8002d4 <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
     8b2:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <xBlockAllocatedBit>
     8b6:	90 91 cf 02 	lds	r25, 0x02CF	; 0x8002cf <xBlockAllocatedBit+0x1>
     8ba:	28 2b       	or	r18, r24
     8bc:	39 2b       	or	r19, r25
     8be:	3b 83       	std	Y+3, r19	; 0x03
     8c0:	2a 83       	std	Y+2, r18	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
     8c2:	19 82       	std	Y+1, r1	; 0x01
     8c4:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
     8c6:	80 91 d2 02 	lds	r24, 0x02D2	; 0x8002d2 <xNumberOfSuccessfulAllocations>
     8ca:	90 91 d3 02 	lds	r25, 0x02D3	; 0x8002d3 <xNumberOfSuccessfulAllocations+0x1>
     8ce:	01 96       	adiw	r24, 0x01	; 1
     8d0:	90 93 d3 02 	sts	0x02D3, r25	; 0x8002d3 <xNumberOfSuccessfulAllocations+0x1>
     8d4:	80 93 d2 02 	sts	0x02D2, r24	; 0x8002d2 <xNumberOfSuccessfulAllocations>
     8d8:	0b c0       	rjmp	.+22     	; 0x8f0 <pvPortMalloc+0x134>
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
     8da:	e1 2c       	mov	r14, r1
     8dc:	f1 2c       	mov	r15, r1
     8de:	08 c0       	rjmp	.+16     	; 0x8f0 <pvPortMalloc+0x134>
     8e0:	e1 2c       	mov	r14, r1
     8e2:	f1 2c       	mov	r15, r1
     8e4:	05 c0       	rjmp	.+10     	; 0x8f0 <pvPortMalloc+0x134>
     8e6:	e1 2c       	mov	r14, r1
     8e8:	f1 2c       	mov	r15, r1
     8ea:	02 c0       	rjmp	.+4      	; 0x8f0 <pvPortMalloc+0x134>
     8ec:	e1 2c       	mov	r14, r1
     8ee:	f1 2c       	mov	r15, r1
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     8f0:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
     8f4:	e1 14       	cp	r14, r1
     8f6:	f1 04       	cpc	r15, r1
     8f8:	11 f4       	brne	.+4      	; 0x8fe <pvPortMalloc+0x142>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
     8fa:	0e 94 b5 15 	call	0x2b6a	; 0x2b6a <vApplicationMallocFailedHook>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
     8fe:	c7 01       	movw	r24, r14
     900:	df 91       	pop	r29
     902:	cf 91       	pop	r28
     904:	1f 91       	pop	r17
     906:	0f 91       	pop	r16
     908:	ff 90       	pop	r15
     90a:	ef 90       	pop	r14
     90c:	08 95       	ret

0000090e <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     90e:	0f 93       	push	r16
     910:	1f 93       	push	r17
     912:	cf 93       	push	r28
     914:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     916:	00 97       	sbiw	r24, 0x00	; 0
     918:	89 f1       	breq	.+98     	; 0x97c <vPortFree+0x6e>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
     91a:	ec 01       	movw	r28, r24
     91c:	24 97       	sbiw	r28, 0x04	; 4

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     91e:	4a 81       	ldd	r20, Y+2	; 0x02
     920:	5b 81       	ldd	r21, Y+3	; 0x03
     922:	20 91 ce 02 	lds	r18, 0x02CE	; 0x8002ce <xBlockAllocatedBit>
     926:	30 91 cf 02 	lds	r19, 0x02CF	; 0x8002cf <xBlockAllocatedBit+0x1>
     92a:	ba 01       	movw	r22, r20
     92c:	62 23       	and	r22, r18
     92e:	73 23       	and	r23, r19
     930:	67 2b       	or	r22, r23
     932:	21 f1       	breq	.+72     	; 0x97c <vPortFree+0x6e>
        {
            if( pxLink->pxNextFreeBlock == NULL )
     934:	68 81       	ld	r22, Y
     936:	79 81       	ldd	r23, Y+1	; 0x01
     938:	67 2b       	or	r22, r23
     93a:	01 f5       	brne	.+64     	; 0x97c <vPortFree+0x6e>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
     93c:	20 95       	com	r18
     93e:	30 95       	com	r19
     940:	24 23       	and	r18, r20
     942:	35 23       	and	r19, r21
     944:	3b 83       	std	Y+3, r19	; 0x03
     946:	2a 83       	std	Y+2, r18	; 0x02

                vTaskSuspendAll();
     948:	cc d7       	rcall	.+3992   	; 0x18e2 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
     94a:	8a 81       	ldd	r24, Y+2	; 0x02
     94c:	9b 81       	ldd	r25, Y+3	; 0x03
     94e:	20 91 d6 02 	lds	r18, 0x02D6	; 0x8002d6 <xFreeBytesRemaining>
     952:	30 91 d7 02 	lds	r19, 0x02D7	; 0x8002d7 <xFreeBytesRemaining+0x1>
     956:	82 0f       	add	r24, r18
     958:	93 1f       	adc	r25, r19
     95a:	90 93 d7 02 	sts	0x02D7, r25	; 0x8002d7 <xFreeBytesRemaining+0x1>
     95e:	80 93 d6 02 	sts	0x02D6, r24	; 0x8002d6 <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     962:	ce 01       	movw	r24, r28
     964:	e1 de       	rcall	.-574    	; 0x728 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
     966:	80 91 d0 02 	lds	r24, 0x02D0	; 0x8002d0 <xNumberOfSuccessfulFrees>
     96a:	90 91 d1 02 	lds	r25, 0x02D1	; 0x8002d1 <xNumberOfSuccessfulFrees+0x1>
     96e:	01 96       	adiw	r24, 0x01	; 1
     970:	90 93 d1 02 	sts	0x02D1, r25	; 0x8002d1 <xNumberOfSuccessfulFrees+0x1>
     974:	80 93 d0 02 	sts	0x02D0, r24	; 0x8002d0 <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
     978:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
     97c:	df 91       	pop	r29
     97e:	cf 91       	pop	r28
     980:	1f 91       	pop	r17
     982:	0f 91       	pop	r16
     984:	08 95       	ret

00000986 <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     986:	fc 01       	movw	r30, r24
     988:	03 96       	adiw	r24, 0x03	; 3
     98a:	92 83       	std	Z+2, r25	; 0x02
     98c:	81 83       	std	Z+1, r24	; 0x01
     98e:	4f ef       	ldi	r20, 0xFF	; 255
     990:	5f ef       	ldi	r21, 0xFF	; 255
     992:	ba 01       	movw	r22, r20
     994:	43 83       	std	Z+3, r20	; 0x03
     996:	54 83       	std	Z+4, r21	; 0x04
     998:	65 83       	std	Z+5, r22	; 0x05
     99a:	76 83       	std	Z+6, r23	; 0x06
     99c:	90 87       	std	Z+8, r25	; 0x08
     99e:	87 83       	std	Z+7, r24	; 0x07
     9a0:	92 87       	std	Z+10, r25	; 0x0a
     9a2:	81 87       	std	Z+9, r24	; 0x09
     9a4:	10 82       	st	Z, r1
     9a6:	08 95       	ret

000009a8 <vListInitialiseItem>:
     9a8:	fc 01       	movw	r30, r24
     9aa:	13 86       	std	Z+11, r1	; 0x0b
     9ac:	12 86       	std	Z+10, r1	; 0x0a
     9ae:	08 95       	ret

000009b0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     9b0:	0f 93       	push	r16
     9b2:	1f 93       	push	r17
     9b4:	cf 93       	push	r28
     9b6:	df 93       	push	r29
     9b8:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     9ba:	08 81       	ld	r16, Y
     9bc:	19 81       	ldd	r17, Y+1	; 0x01
     9be:	2a 81       	ldd	r18, Y+2	; 0x02
     9c0:	3b 81       	ldd	r19, Y+3	; 0x03
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     9c2:	0f 3f       	cpi	r16, 0xFF	; 255
     9c4:	4f ef       	ldi	r20, 0xFF	; 255
     9c6:	14 07       	cpc	r17, r20
     9c8:	24 07       	cpc	r18, r20
     9ca:	34 07       	cpc	r19, r20
     9cc:	21 f4       	brne	.+8      	; 0x9d6 <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     9ce:	fc 01       	movw	r30, r24
     9d0:	a1 85       	ldd	r26, Z+9	; 0x09
     9d2:	b2 85       	ldd	r27, Z+10	; 0x0a
     9d4:	11 c0       	rjmp	.+34     	; 0x9f8 <vListInsert+0x48>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     9d6:	dc 01       	movw	r26, r24
     9d8:	13 96       	adiw	r26, 0x03	; 3
     9da:	01 c0       	rjmp	.+2      	; 0x9de <vListInsert+0x2e>
     9dc:	df 01       	movw	r26, r30
     9de:	14 96       	adiw	r26, 0x04	; 4
     9e0:	ed 91       	ld	r30, X+
     9e2:	fc 91       	ld	r31, X
     9e4:	15 97       	sbiw	r26, 0x05	; 5
     9e6:	40 81       	ld	r20, Z
     9e8:	51 81       	ldd	r21, Z+1	; 0x01
     9ea:	62 81       	ldd	r22, Z+2	; 0x02
     9ec:	73 81       	ldd	r23, Z+3	; 0x03
     9ee:	04 17       	cp	r16, r20
     9f0:	15 07       	cpc	r17, r21
     9f2:	26 07       	cpc	r18, r22
     9f4:	37 07       	cpc	r19, r23
     9f6:	90 f7       	brcc	.-28     	; 0x9dc <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     9f8:	14 96       	adiw	r26, 0x04	; 4
     9fa:	ed 91       	ld	r30, X+
     9fc:	fc 91       	ld	r31, X
     9fe:	15 97       	sbiw	r26, 0x05	; 5
     a00:	fd 83       	std	Y+5, r31	; 0x05
     a02:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     a04:	d7 83       	std	Z+7, r29	; 0x07
     a06:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
     a08:	bf 83       	std	Y+7, r27	; 0x07
     a0a:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
     a0c:	15 96       	adiw	r26, 0x05	; 5
     a0e:	dc 93       	st	X, r29
     a10:	ce 93       	st	-X, r28
     a12:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     a14:	9b 87       	std	Y+11, r25	; 0x0b
     a16:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
     a18:	fc 01       	movw	r30, r24
     a1a:	20 81       	ld	r18, Z
     a1c:	2f 5f       	subi	r18, 0xFF	; 255
     a1e:	20 83       	st	Z, r18
}
     a20:	df 91       	pop	r29
     a22:	cf 91       	pop	r28
     a24:	1f 91       	pop	r17
     a26:	0f 91       	pop	r16
     a28:	08 95       	ret

00000a2a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     a2a:	cf 93       	push	r28
     a2c:	df 93       	push	r29
     a2e:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     a30:	a2 85       	ldd	r26, Z+10	; 0x0a
     a32:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     a34:	c4 81       	ldd	r28, Z+4	; 0x04
     a36:	d5 81       	ldd	r29, Z+5	; 0x05
     a38:	86 81       	ldd	r24, Z+6	; 0x06
     a3a:	97 81       	ldd	r25, Z+7	; 0x07
     a3c:	9f 83       	std	Y+7, r25	; 0x07
     a3e:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     a40:	c6 81       	ldd	r28, Z+6	; 0x06
     a42:	d7 81       	ldd	r29, Z+7	; 0x07
     a44:	84 81       	ldd	r24, Z+4	; 0x04
     a46:	95 81       	ldd	r25, Z+5	; 0x05
     a48:	9d 83       	std	Y+5, r25	; 0x05
     a4a:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     a4c:	11 96       	adiw	r26, 0x01	; 1
     a4e:	8d 91       	ld	r24, X+
     a50:	9c 91       	ld	r25, X
     a52:	12 97       	sbiw	r26, 0x02	; 2
     a54:	e8 17       	cp	r30, r24
     a56:	f9 07       	cpc	r31, r25
     a58:	31 f4       	brne	.+12     	; 0xa66 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     a5a:	86 81       	ldd	r24, Z+6	; 0x06
     a5c:	97 81       	ldd	r25, Z+7	; 0x07
     a5e:	12 96       	adiw	r26, 0x02	; 2
     a60:	9c 93       	st	X, r25
     a62:	8e 93       	st	-X, r24
     a64:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     a66:	13 86       	std	Z+11, r1	; 0x0b
     a68:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
     a6a:	8c 91       	ld	r24, X
     a6c:	81 50       	subi	r24, 0x01	; 1
     a6e:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     a70:	8c 91       	ld	r24, X
}
     a72:	df 91       	pop	r29
     a74:	cf 91       	pop	r28
     a76:	08 95       	ret

00000a78 <prvSetupTimerInterrupt>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
     a78:	a8 95       	wdr
     a7a:	90 ec       	ldi	r25, 0xC0	; 192
     a7c:	88 e1       	ldi	r24, 0x18	; 24
     a7e:	0f b6       	in	r0, 0x3f	; 63
     a80:	f8 94       	cli
     a82:	a8 95       	wdr
     a84:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     a88:	0f be       	out	0x3f, r0	; 63
     a8a:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     a8e:	08 95       	ret

00000a90 <pxPortInitialiseStack>:
     a90:	fc 01       	movw	r30, r24
     a92:	60 83       	st	Z, r22
     a94:	31 97       	sbiw	r30, 0x01	; 1
     a96:	70 83       	st	Z, r23
     a98:	31 97       	sbiw	r30, 0x01	; 1
     a9a:	10 82       	st	Z, r1
     a9c:	31 97       	sbiw	r30, 0x01	; 1
     a9e:	10 82       	st	Z, r1
     aa0:	31 97       	sbiw	r30, 0x01	; 1
     aa2:	20 e8       	ldi	r18, 0x80	; 128
     aa4:	20 83       	st	Z, r18
     aa6:	31 97       	sbiw	r30, 0x01	; 1
     aa8:	10 82       	st	Z, r1
     aaa:	31 97       	sbiw	r30, 0x01	; 1
     aac:	10 82       	st	Z, r1
     aae:	31 97       	sbiw	r30, 0x01	; 1
     ab0:	10 82       	st	Z, r1
     ab2:	77 97       	sbiw	r30, 0x17	; 23
     ab4:	40 83       	st	Z, r20
     ab6:	31 97       	sbiw	r30, 0x01	; 1
     ab8:	50 83       	st	Z, r21
     aba:	86 97       	sbiw	r24, 0x26	; 38
     abc:	08 95       	ret

00000abe <xPortStartScheduler>:
     abe:	dc df       	rcall	.-72     	; 0xa78 <prvSetupTimerInterrupt>
     ac0:	a0 91 49 11 	lds	r26, 0x1149	; 0x801149 <pxCurrentTCB>
     ac4:	b0 91 4a 11 	lds	r27, 0x114A	; 0x80114a <pxCurrentTCB+0x1>
     ac8:	cd 91       	ld	r28, X+
     aca:	cd bf       	out	0x3d, r28	; 61
     acc:	dd 91       	ld	r29, X+
     ace:	de bf       	out	0x3e, r29	; 62
     ad0:	ff 91       	pop	r31
     ad2:	ef 91       	pop	r30
     ad4:	df 91       	pop	r29
     ad6:	cf 91       	pop	r28
     ad8:	bf 91       	pop	r27
     ada:	af 91       	pop	r26
     adc:	9f 91       	pop	r25
     ade:	8f 91       	pop	r24
     ae0:	7f 91       	pop	r23
     ae2:	6f 91       	pop	r22
     ae4:	5f 91       	pop	r21
     ae6:	4f 91       	pop	r20
     ae8:	3f 91       	pop	r19
     aea:	2f 91       	pop	r18
     aec:	1f 91       	pop	r17
     aee:	0f 91       	pop	r16
     af0:	ff 90       	pop	r15
     af2:	ef 90       	pop	r14
     af4:	df 90       	pop	r13
     af6:	cf 90       	pop	r12
     af8:	bf 90       	pop	r11
     afa:	af 90       	pop	r10
     afc:	9f 90       	pop	r9
     afe:	8f 90       	pop	r8
     b00:	7f 90       	pop	r7
     b02:	6f 90       	pop	r6
     b04:	5f 90       	pop	r5
     b06:	4f 90       	pop	r4
     b08:	3f 90       	pop	r3
     b0a:	2f 90       	pop	r2
     b0c:	1f 90       	pop	r1
     b0e:	0f 90       	pop	r0
     b10:	0c be       	out	0x3c, r0	; 60
     b12:	0f 90       	pop	r0
     b14:	0b be       	out	0x3b, r0	; 59
     b16:	0f 90       	pop	r0
     b18:	0f be       	out	0x3f, r0	; 63
     b1a:	0f 90       	pop	r0
     b1c:	08 95       	ret
     b1e:	81 e0       	ldi	r24, 0x01	; 1
     b20:	08 95       	ret

00000b22 <vPortYield>:
     b22:	0f 92       	push	r0
     b24:	0f b6       	in	r0, 0x3f	; 63
     b26:	f8 94       	cli
     b28:	0f 92       	push	r0
     b2a:	0b b6       	in	r0, 0x3b	; 59
     b2c:	0f 92       	push	r0
     b2e:	0c b6       	in	r0, 0x3c	; 60
     b30:	0f 92       	push	r0
     b32:	1f 92       	push	r1
     b34:	11 24       	eor	r1, r1
     b36:	2f 92       	push	r2
     b38:	3f 92       	push	r3
     b3a:	4f 92       	push	r4
     b3c:	5f 92       	push	r5
     b3e:	6f 92       	push	r6
     b40:	7f 92       	push	r7
     b42:	8f 92       	push	r8
     b44:	9f 92       	push	r9
     b46:	af 92       	push	r10
     b48:	bf 92       	push	r11
     b4a:	cf 92       	push	r12
     b4c:	df 92       	push	r13
     b4e:	ef 92       	push	r14
     b50:	ff 92       	push	r15
     b52:	0f 93       	push	r16
     b54:	1f 93       	push	r17
     b56:	2f 93       	push	r18
     b58:	3f 93       	push	r19
     b5a:	4f 93       	push	r20
     b5c:	5f 93       	push	r21
     b5e:	6f 93       	push	r22
     b60:	7f 93       	push	r23
     b62:	8f 93       	push	r24
     b64:	9f 93       	push	r25
     b66:	af 93       	push	r26
     b68:	bf 93       	push	r27
     b6a:	cf 93       	push	r28
     b6c:	df 93       	push	r29
     b6e:	ef 93       	push	r30
     b70:	ff 93       	push	r31
     b72:	a0 91 49 11 	lds	r26, 0x1149	; 0x801149 <pxCurrentTCB>
     b76:	b0 91 4a 11 	lds	r27, 0x114A	; 0x80114a <pxCurrentTCB+0x1>
     b7a:	0d b6       	in	r0, 0x3d	; 61
     b7c:	0d 92       	st	X+, r0
     b7e:	0e b6       	in	r0, 0x3e	; 62
     b80:	0d 92       	st	X+, r0
     b82:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <vTaskSwitchContext>
     b86:	a0 91 49 11 	lds	r26, 0x1149	; 0x801149 <pxCurrentTCB>
     b8a:	b0 91 4a 11 	lds	r27, 0x114A	; 0x80114a <pxCurrentTCB+0x1>
     b8e:	cd 91       	ld	r28, X+
     b90:	cd bf       	out	0x3d, r28	; 61
     b92:	dd 91       	ld	r29, X+
     b94:	de bf       	out	0x3e, r29	; 62
     b96:	ff 91       	pop	r31
     b98:	ef 91       	pop	r30
     b9a:	df 91       	pop	r29
     b9c:	cf 91       	pop	r28
     b9e:	bf 91       	pop	r27
     ba0:	af 91       	pop	r26
     ba2:	9f 91       	pop	r25
     ba4:	8f 91       	pop	r24
     ba6:	7f 91       	pop	r23
     ba8:	6f 91       	pop	r22
     baa:	5f 91       	pop	r21
     bac:	4f 91       	pop	r20
     bae:	3f 91       	pop	r19
     bb0:	2f 91       	pop	r18
     bb2:	1f 91       	pop	r17
     bb4:	0f 91       	pop	r16
     bb6:	ff 90       	pop	r15
     bb8:	ef 90       	pop	r14
     bba:	df 90       	pop	r13
     bbc:	cf 90       	pop	r12
     bbe:	bf 90       	pop	r11
     bc0:	af 90       	pop	r10
     bc2:	9f 90       	pop	r9
     bc4:	8f 90       	pop	r8
     bc6:	7f 90       	pop	r7
     bc8:	6f 90       	pop	r6
     bca:	5f 90       	pop	r5
     bcc:	4f 90       	pop	r4
     bce:	3f 90       	pop	r3
     bd0:	2f 90       	pop	r2
     bd2:	1f 90       	pop	r1
     bd4:	0f 90       	pop	r0
     bd6:	0c be       	out	0x3c, r0	; 60
     bd8:	0f 90       	pop	r0
     bda:	0b be       	out	0x3b, r0	; 59
     bdc:	0f 90       	pop	r0
     bde:	0f be       	out	0x3f, r0	; 63
     be0:	0f 90       	pop	r0
     be2:	08 95       	ret

00000be4 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     be4:	0f 92       	push	r0
     be6:	0f b6       	in	r0, 0x3f	; 63
     be8:	f8 94       	cli
     bea:	0f 92       	push	r0
     bec:	0b b6       	in	r0, 0x3b	; 59
     bee:	0f 92       	push	r0
     bf0:	0c b6       	in	r0, 0x3c	; 60
     bf2:	0f 92       	push	r0
     bf4:	1f 92       	push	r1
     bf6:	11 24       	eor	r1, r1
     bf8:	2f 92       	push	r2
     bfa:	3f 92       	push	r3
     bfc:	4f 92       	push	r4
     bfe:	5f 92       	push	r5
     c00:	6f 92       	push	r6
     c02:	7f 92       	push	r7
     c04:	8f 92       	push	r8
     c06:	9f 92       	push	r9
     c08:	af 92       	push	r10
     c0a:	bf 92       	push	r11
     c0c:	cf 92       	push	r12
     c0e:	df 92       	push	r13
     c10:	ef 92       	push	r14
     c12:	ff 92       	push	r15
     c14:	0f 93       	push	r16
     c16:	1f 93       	push	r17
     c18:	2f 93       	push	r18
     c1a:	3f 93       	push	r19
     c1c:	4f 93       	push	r20
     c1e:	5f 93       	push	r21
     c20:	6f 93       	push	r22
     c22:	7f 93       	push	r23
     c24:	8f 93       	push	r24
     c26:	9f 93       	push	r25
     c28:	af 93       	push	r26
     c2a:	bf 93       	push	r27
     c2c:	cf 93       	push	r28
     c2e:	df 93       	push	r29
     c30:	ef 93       	push	r30
     c32:	ff 93       	push	r31
     c34:	a0 91 49 11 	lds	r26, 0x1149	; 0x801149 <pxCurrentTCB>
     c38:	b0 91 4a 11 	lds	r27, 0x114A	; 0x80114a <pxCurrentTCB+0x1>
     c3c:	0d b6       	in	r0, 0x3d	; 61
     c3e:	0d 92       	st	X+, r0
     c40:	0e b6       	in	r0, 0x3e	; 62
     c42:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
     c44:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
     c46:	61 d6       	rcall	.+3266   	; 0x190a <xTaskIncrementTick>
     c48:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     c4a:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
     c4e:	a0 91 49 11 	lds	r26, 0x1149	; 0x801149 <pxCurrentTCB>
     c52:	b0 91 4a 11 	lds	r27, 0x114A	; 0x80114a <pxCurrentTCB+0x1>
     c56:	cd 91       	ld	r28, X+
     c58:	cd bf       	out	0x3d, r28	; 61
     c5a:	dd 91       	ld	r29, X+
     c5c:	de bf       	out	0x3e, r29	; 62
     c5e:	ff 91       	pop	r31
     c60:	ef 91       	pop	r30
     c62:	df 91       	pop	r29
     c64:	cf 91       	pop	r28
     c66:	bf 91       	pop	r27
     c68:	af 91       	pop	r26
     c6a:	9f 91       	pop	r25
     c6c:	8f 91       	pop	r24
     c6e:	7f 91       	pop	r23
     c70:	6f 91       	pop	r22
     c72:	5f 91       	pop	r21
     c74:	4f 91       	pop	r20
     c76:	3f 91       	pop	r19
     c78:	2f 91       	pop	r18
     c7a:	1f 91       	pop	r17
     c7c:	0f 91       	pop	r16
     c7e:	ff 90       	pop	r15
     c80:	ef 90       	pop	r14
     c82:	df 90       	pop	r13
     c84:	cf 90       	pop	r12
     c86:	bf 90       	pop	r11
     c88:	af 90       	pop	r10
     c8a:	9f 90       	pop	r9
     c8c:	8f 90       	pop	r8
     c8e:	7f 90       	pop	r7
     c90:	6f 90       	pop	r6
     c92:	5f 90       	pop	r5
     c94:	4f 90       	pop	r4
     c96:	3f 90       	pop	r3
     c98:	2f 90       	pop	r2
     c9a:	1f 90       	pop	r1
     c9c:	0f 90       	pop	r0
     c9e:	0c be       	out	0x3c, r0	; 60
     ca0:	0f 90       	pop	r0
     ca2:	0b be       	out	0x3b, r0	; 59
     ca4:	0f 90       	pop	r0
     ca6:	0f be       	out	0x3f, r0	; 63
     ca8:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     caa:	08 95       	ret

00000cac <__vector_12>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
     cac:	9b df       	rcall	.-202    	; 0xbe4 <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
     cae:	18 95       	reti

00000cb0 <prvGetDisinheritPriorityAfterTimeout>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     cb0:	dc 01       	movw	r26, r24
     cb2:	53 96       	adiw	r26, 0x13	; 19
     cb4:	2c 91       	ld	r18, X
     cb6:	53 97       	sbiw	r26, 0x13	; 19
     cb8:	22 23       	and	r18, r18
     cba:	41 f0       	breq	.+16     	; 0xccc <prvGetDisinheritPriorityAfterTimeout+0x1c>
     cbc:	5a 96       	adiw	r26, 0x1a	; 26
     cbe:	ed 91       	ld	r30, X+
     cc0:	fc 91       	ld	r31, X
     cc2:	5b 97       	sbiw	r26, 0x1b	; 27
     cc4:	90 81       	ld	r25, Z
     cc6:	8a e0       	ldi	r24, 0x0A	; 10
     cc8:	89 1b       	sub	r24, r25
     cca:	08 95       	ret
     ccc:	80 e0       	ldi	r24, 0x00	; 0
     cce:	08 95       	ret

00000cd0 <prvIsQueueEmpty>:
     cd0:	0f b6       	in	r0, 0x3f	; 63
     cd2:	f8 94       	cli
     cd4:	0f 92       	push	r0
     cd6:	fc 01       	movw	r30, r24
     cd8:	86 8d       	ldd	r24, Z+30	; 0x1e
     cda:	81 11       	cpse	r24, r1
     cdc:	02 c0       	rjmp	.+4      	; 0xce2 <prvIsQueueEmpty+0x12>
     cde:	81 e0       	ldi	r24, 0x01	; 1
     ce0:	01 c0       	rjmp	.+2      	; 0xce4 <prvIsQueueEmpty+0x14>
     ce2:	80 e0       	ldi	r24, 0x00	; 0
     ce4:	0f 90       	pop	r0
     ce6:	0f be       	out	0x3f, r0	; 63
     ce8:	08 95       	ret

00000cea <prvIsQueueFull>:
     cea:	0f b6       	in	r0, 0x3f	; 63
     cec:	f8 94       	cli
     cee:	0f 92       	push	r0
     cf0:	fc 01       	movw	r30, r24
     cf2:	26 8d       	ldd	r18, Z+30	; 0x1e
     cf4:	87 8d       	ldd	r24, Z+31	; 0x1f
     cf6:	28 13       	cpse	r18, r24
     cf8:	02 c0       	rjmp	.+4      	; 0xcfe <prvIsQueueFull+0x14>
     cfa:	81 e0       	ldi	r24, 0x01	; 1
     cfc:	01 c0       	rjmp	.+2      	; 0xd00 <prvIsQueueFull+0x16>
     cfe:	80 e0       	ldi	r24, 0x00	; 0
     d00:	0f 90       	pop	r0
     d02:	0f be       	out	0x3f, r0	; 63
     d04:	08 95       	ret

00000d06 <prvCopyDataToQueue>:
     d06:	0f 93       	push	r16
     d08:	1f 93       	push	r17
     d0a:	cf 93       	push	r28
     d0c:	df 93       	push	r29
     d0e:	ec 01       	movw	r28, r24
     d10:	04 2f       	mov	r16, r20
     d12:	1e 8d       	ldd	r17, Y+30	; 0x1e
     d14:	48 a1       	ldd	r20, Y+32	; 0x20
     d16:	41 11       	cpse	r20, r1
     d18:	0c c0       	rjmp	.+24     	; 0xd32 <prvCopyDataToQueue+0x2c>
     d1a:	88 81       	ld	r24, Y
     d1c:	99 81       	ldd	r25, Y+1	; 0x01
     d1e:	89 2b       	or	r24, r25
     d20:	09 f0       	breq	.+2      	; 0xd24 <prvCopyDataToQueue+0x1e>
     d22:	42 c0       	rjmp	.+132    	; 0xda8 <prvCopyDataToQueue+0xa2>
     d24:	8c 81       	ldd	r24, Y+4	; 0x04
     d26:	9d 81       	ldd	r25, Y+5	; 0x05
     d28:	0e 94 db 11 	call	0x23b6	; 0x23b6 <xTaskPriorityDisinherit>
     d2c:	1d 82       	std	Y+5, r1	; 0x05
     d2e:	1c 82       	std	Y+4, r1	; 0x04
     d30:	42 c0       	rjmp	.+132    	; 0xdb6 <prvCopyDataToQueue+0xb0>
     d32:	01 11       	cpse	r16, r1
     d34:	17 c0       	rjmp	.+46     	; 0xd64 <prvCopyDataToQueue+0x5e>
     d36:	50 e0       	ldi	r21, 0x00	; 0
     d38:	8a 81       	ldd	r24, Y+2	; 0x02
     d3a:	9b 81       	ldd	r25, Y+3	; 0x03
     d3c:	0e 94 2b 1e 	call	0x3c56	; 0x3c56 <memcpy>
     d40:	28 a1       	ldd	r18, Y+32	; 0x20
     d42:	8a 81       	ldd	r24, Y+2	; 0x02
     d44:	9b 81       	ldd	r25, Y+3	; 0x03
     d46:	82 0f       	add	r24, r18
     d48:	91 1d       	adc	r25, r1
     d4a:	9b 83       	std	Y+3, r25	; 0x03
     d4c:	8a 83       	std	Y+2, r24	; 0x02
     d4e:	2c 81       	ldd	r18, Y+4	; 0x04
     d50:	3d 81       	ldd	r19, Y+5	; 0x05
     d52:	82 17       	cp	r24, r18
     d54:	93 07       	cpc	r25, r19
     d56:	50 f1       	brcs	.+84     	; 0xdac <prvCopyDataToQueue+0xa6>
     d58:	88 81       	ld	r24, Y
     d5a:	99 81       	ldd	r25, Y+1	; 0x01
     d5c:	9b 83       	std	Y+3, r25	; 0x03
     d5e:	8a 83       	std	Y+2, r24	; 0x02
     d60:	80 e0       	ldi	r24, 0x00	; 0
     d62:	29 c0       	rjmp	.+82     	; 0xdb6 <prvCopyDataToQueue+0xb0>
     d64:	50 e0       	ldi	r21, 0x00	; 0
     d66:	8e 81       	ldd	r24, Y+6	; 0x06
     d68:	9f 81       	ldd	r25, Y+7	; 0x07
     d6a:	0e 94 2b 1e 	call	0x3c56	; 0x3c56 <memcpy>
     d6e:	88 a1       	ldd	r24, Y+32	; 0x20
     d70:	90 e0       	ldi	r25, 0x00	; 0
     d72:	91 95       	neg	r25
     d74:	81 95       	neg	r24
     d76:	91 09       	sbc	r25, r1
     d78:	2e 81       	ldd	r18, Y+6	; 0x06
     d7a:	3f 81       	ldd	r19, Y+7	; 0x07
     d7c:	28 0f       	add	r18, r24
     d7e:	39 1f       	adc	r19, r25
     d80:	3f 83       	std	Y+7, r19	; 0x07
     d82:	2e 83       	std	Y+6, r18	; 0x06
     d84:	48 81       	ld	r20, Y
     d86:	59 81       	ldd	r21, Y+1	; 0x01
     d88:	24 17       	cp	r18, r20
     d8a:	35 07       	cpc	r19, r21
     d8c:	30 f4       	brcc	.+12     	; 0xd9a <prvCopyDataToQueue+0x94>
     d8e:	2c 81       	ldd	r18, Y+4	; 0x04
     d90:	3d 81       	ldd	r19, Y+5	; 0x05
     d92:	82 0f       	add	r24, r18
     d94:	93 1f       	adc	r25, r19
     d96:	9f 83       	std	Y+7, r25	; 0x07
     d98:	8e 83       	std	Y+6, r24	; 0x06
     d9a:	02 30       	cpi	r16, 0x02	; 2
     d9c:	49 f4       	brne	.+18     	; 0xdb0 <prvCopyDataToQueue+0xaa>
     d9e:	11 23       	and	r17, r17
     da0:	49 f0       	breq	.+18     	; 0xdb4 <prvCopyDataToQueue+0xae>
     da2:	11 50       	subi	r17, 0x01	; 1
     da4:	80 e0       	ldi	r24, 0x00	; 0
     da6:	07 c0       	rjmp	.+14     	; 0xdb6 <prvCopyDataToQueue+0xb0>
     da8:	80 e0       	ldi	r24, 0x00	; 0
     daa:	05 c0       	rjmp	.+10     	; 0xdb6 <prvCopyDataToQueue+0xb0>
     dac:	80 e0       	ldi	r24, 0x00	; 0
     dae:	03 c0       	rjmp	.+6      	; 0xdb6 <prvCopyDataToQueue+0xb0>
     db0:	80 e0       	ldi	r24, 0x00	; 0
     db2:	01 c0       	rjmp	.+2      	; 0xdb6 <prvCopyDataToQueue+0xb0>
     db4:	80 e0       	ldi	r24, 0x00	; 0
     db6:	1f 5f       	subi	r17, 0xFF	; 255
     db8:	1e 8f       	std	Y+30, r17	; 0x1e
     dba:	df 91       	pop	r29
     dbc:	cf 91       	pop	r28
     dbe:	1f 91       	pop	r17
     dc0:	0f 91       	pop	r16
     dc2:	08 95       	ret

00000dc4 <prvCopyDataFromQueue>:
     dc4:	fc 01       	movw	r30, r24
     dc6:	40 a1       	ldd	r20, Z+32	; 0x20
     dc8:	44 23       	and	r20, r20
     dca:	a9 f0       	breq	.+42     	; 0xdf6 <prvCopyDataFromQueue+0x32>
     dcc:	50 e0       	ldi	r21, 0x00	; 0
     dce:	26 81       	ldd	r18, Z+6	; 0x06
     dd0:	37 81       	ldd	r19, Z+7	; 0x07
     dd2:	24 0f       	add	r18, r20
     dd4:	35 1f       	adc	r19, r21
     dd6:	37 83       	std	Z+7, r19	; 0x07
     dd8:	26 83       	std	Z+6, r18	; 0x06
     dda:	84 81       	ldd	r24, Z+4	; 0x04
     ddc:	95 81       	ldd	r25, Z+5	; 0x05
     dde:	28 17       	cp	r18, r24
     de0:	39 07       	cpc	r19, r25
     de2:	20 f0       	brcs	.+8      	; 0xdec <prvCopyDataFromQueue+0x28>
     de4:	80 81       	ld	r24, Z
     de6:	91 81       	ldd	r25, Z+1	; 0x01
     de8:	97 83       	std	Z+7, r25	; 0x07
     dea:	86 83       	std	Z+6, r24	; 0x06
     dec:	cb 01       	movw	r24, r22
     dee:	66 81       	ldd	r22, Z+6	; 0x06
     df0:	77 81       	ldd	r23, Z+7	; 0x07
     df2:	0c 94 2b 1e 	jmp	0x3c56	; 0x3c56 <memcpy>
     df6:	08 95       	ret

00000df8 <prvUnlockQueue>:
     df8:	1f 93       	push	r17
     dfa:	cf 93       	push	r28
     dfc:	df 93       	push	r29
     dfe:	ec 01       	movw	r28, r24
     e00:	0f b6       	in	r0, 0x3f	; 63
     e02:	f8 94       	cli
     e04:	0f 92       	push	r0
     e06:	1a a1       	ldd	r17, Y+34	; 0x22
     e08:	0b c0       	rjmp	.+22     	; 0xe20 <prvUnlockQueue+0x28>
     e0a:	8b 89       	ldd	r24, Y+19	; 0x13
     e0c:	88 23       	and	r24, r24
     e0e:	51 f0       	breq	.+20     	; 0xe24 <prvUnlockQueue+0x2c>
     e10:	ce 01       	movw	r24, r28
     e12:	43 96       	adiw	r24, 0x13	; 19
     e14:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <xTaskRemoveFromEventList>
     e18:	81 11       	cpse	r24, r1
     e1a:	0e 94 42 11 	call	0x2284	; 0x2284 <vTaskMissedYield>
     e1e:	11 50       	subi	r17, 0x01	; 1
     e20:	11 16       	cp	r1, r17
     e22:	9c f3       	brlt	.-26     	; 0xe0a <prvUnlockQueue+0x12>
     e24:	8f ef       	ldi	r24, 0xFF	; 255
     e26:	8a a3       	std	Y+34, r24	; 0x22
     e28:	0f 90       	pop	r0
     e2a:	0f be       	out	0x3f, r0	; 63
     e2c:	0f b6       	in	r0, 0x3f	; 63
     e2e:	f8 94       	cli
     e30:	0f 92       	push	r0
     e32:	19 a1       	ldd	r17, Y+33	; 0x21
     e34:	0b c0       	rjmp	.+22     	; 0xe4c <prvUnlockQueue+0x54>
     e36:	88 85       	ldd	r24, Y+8	; 0x08
     e38:	88 23       	and	r24, r24
     e3a:	51 f0       	breq	.+20     	; 0xe50 <prvUnlockQueue+0x58>
     e3c:	ce 01       	movw	r24, r28
     e3e:	08 96       	adiw	r24, 0x08	; 8
     e40:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <xTaskRemoveFromEventList>
     e44:	81 11       	cpse	r24, r1
     e46:	0e 94 42 11 	call	0x2284	; 0x2284 <vTaskMissedYield>
     e4a:	11 50       	subi	r17, 0x01	; 1
     e4c:	11 16       	cp	r1, r17
     e4e:	9c f3       	brlt	.-26     	; 0xe36 <prvUnlockQueue+0x3e>
     e50:	8f ef       	ldi	r24, 0xFF	; 255
     e52:	89 a3       	std	Y+33, r24	; 0x21
     e54:	0f 90       	pop	r0
     e56:	0f be       	out	0x3f, r0	; 63
     e58:	df 91       	pop	r29
     e5a:	cf 91       	pop	r28
     e5c:	1f 91       	pop	r17
     e5e:	08 95       	ret

00000e60 <xQueueGenericReset>:
     e60:	cf 93       	push	r28
     e62:	df 93       	push	r29
     e64:	ec 01       	movw	r28, r24
     e66:	0f b6       	in	r0, 0x3f	; 63
     e68:	f8 94       	cli
     e6a:	0f 92       	push	r0
     e6c:	e8 81       	ld	r30, Y
     e6e:	f9 81       	ldd	r31, Y+1	; 0x01
     e70:	8f 8d       	ldd	r24, Y+31	; 0x1f
     e72:	28 a1       	ldd	r18, Y+32	; 0x20
     e74:	90 e0       	ldi	r25, 0x00	; 0
     e76:	30 e0       	ldi	r19, 0x00	; 0
     e78:	82 9f       	mul	r24, r18
     e7a:	a0 01       	movw	r20, r0
     e7c:	83 9f       	mul	r24, r19
     e7e:	50 0d       	add	r21, r0
     e80:	92 9f       	mul	r25, r18
     e82:	50 0d       	add	r21, r0
     e84:	11 24       	eor	r1, r1
     e86:	4e 0f       	add	r20, r30
     e88:	5f 1f       	adc	r21, r31
     e8a:	5d 83       	std	Y+5, r21	; 0x05
     e8c:	4c 83       	std	Y+4, r20	; 0x04
     e8e:	1e 8e       	std	Y+30, r1	; 0x1e
     e90:	fb 83       	std	Y+3, r31	; 0x03
     e92:	ea 83       	std	Y+2, r30	; 0x02
     e94:	01 97       	sbiw	r24, 0x01	; 1
     e96:	28 9f       	mul	r18, r24
     e98:	a0 01       	movw	r20, r0
     e9a:	29 9f       	mul	r18, r25
     e9c:	50 0d       	add	r21, r0
     e9e:	38 9f       	mul	r19, r24
     ea0:	50 0d       	add	r21, r0
     ea2:	11 24       	eor	r1, r1
     ea4:	cf 01       	movw	r24, r30
     ea6:	84 0f       	add	r24, r20
     ea8:	95 1f       	adc	r25, r21
     eaa:	9f 83       	std	Y+7, r25	; 0x07
     eac:	8e 83       	std	Y+6, r24	; 0x06
     eae:	8f ef       	ldi	r24, 0xFF	; 255
     eb0:	89 a3       	std	Y+33, r24	; 0x21
     eb2:	8a a3       	std	Y+34, r24	; 0x22
     eb4:	61 11       	cpse	r22, r1
     eb6:	0b c0       	rjmp	.+22     	; 0xece <xQueueGenericReset+0x6e>
     eb8:	88 85       	ldd	r24, Y+8	; 0x08
     eba:	88 23       	and	r24, r24
     ebc:	71 f0       	breq	.+28     	; 0xeda <xQueueGenericReset+0x7a>
     ebe:	ce 01       	movw	r24, r28
     ec0:	08 96       	adiw	r24, 0x08	; 8
     ec2:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <xTaskRemoveFromEventList>
     ec6:	88 23       	and	r24, r24
     ec8:	41 f0       	breq	.+16     	; 0xeda <xQueueGenericReset+0x7a>
     eca:	2b de       	rcall	.-938    	; 0xb22 <vPortYield>
     ecc:	06 c0       	rjmp	.+12     	; 0xeda <xQueueGenericReset+0x7a>
     ece:	ce 01       	movw	r24, r28
     ed0:	08 96       	adiw	r24, 0x08	; 8
     ed2:	59 dd       	rcall	.-1358   	; 0x986 <vListInitialise>
     ed4:	ce 01       	movw	r24, r28
     ed6:	43 96       	adiw	r24, 0x13	; 19
     ed8:	56 dd       	rcall	.-1364   	; 0x986 <vListInitialise>
     eda:	0f 90       	pop	r0
     edc:	0f be       	out	0x3f, r0	; 63
     ede:	81 e0       	ldi	r24, 0x01	; 1
     ee0:	df 91       	pop	r29
     ee2:	cf 91       	pop	r28
     ee4:	08 95       	ret

00000ee6 <prvInitialiseNewQueue>:
     ee6:	0f 93       	push	r16
     ee8:	1f 93       	push	r17
     eea:	f8 01       	movw	r30, r16
     eec:	61 11       	cpse	r22, r1
     eee:	03 c0       	rjmp	.+6      	; 0xef6 <prvInitialiseNewQueue+0x10>
     ef0:	11 83       	std	Z+1, r17	; 0x01
     ef2:	00 83       	st	Z, r16
     ef4:	02 c0       	rjmp	.+4      	; 0xefa <prvInitialiseNewQueue+0x14>
     ef6:	51 83       	std	Z+1, r21	; 0x01
     ef8:	40 83       	st	Z, r20
     efa:	87 8f       	std	Z+31, r24	; 0x1f
     efc:	60 a3       	std	Z+32, r22	; 0x20
     efe:	61 e0       	ldi	r22, 0x01	; 1
     f00:	cf 01       	movw	r24, r30
     f02:	ae df       	rcall	.-164    	; 0xe60 <xQueueGenericReset>
     f04:	1f 91       	pop	r17
     f06:	0f 91       	pop	r16
     f08:	08 95       	ret

00000f0a <xQueueGenericCreate>:
     f0a:	df 92       	push	r13
     f0c:	ef 92       	push	r14
     f0e:	ff 92       	push	r15
     f10:	0f 93       	push	r16
     f12:	1f 93       	push	r17
     f14:	cf 93       	push	r28
     f16:	df 93       	push	r29
     f18:	f8 2e       	mov	r15, r24
     f1a:	e6 2e       	mov	r14, r22
     f1c:	d4 2e       	mov	r13, r20
     f1e:	86 9f       	mul	r24, r22
     f20:	c0 01       	movw	r24, r0
     f22:	11 24       	eor	r1, r1
     f24:	83 96       	adiw	r24, 0x23	; 35
     f26:	4a dc       	rcall	.-1900   	; 0x7bc <pvPortMalloc>
     f28:	ec 01       	movw	r28, r24
     f2a:	00 97       	sbiw	r24, 0x00	; 0
     f2c:	41 f0       	breq	.+16     	; 0xf3e <xQueueGenericCreate+0x34>
     f2e:	8c 01       	movw	r16, r24
     f30:	2d 2d       	mov	r18, r13
     f32:	ac 01       	movw	r20, r24
     f34:	4d 5d       	subi	r20, 0xDD	; 221
     f36:	5f 4f       	sbci	r21, 0xFF	; 255
     f38:	6e 2d       	mov	r22, r14
     f3a:	8f 2d       	mov	r24, r15
     f3c:	d4 df       	rcall	.-88     	; 0xee6 <prvInitialiseNewQueue>
     f3e:	ce 01       	movw	r24, r28
     f40:	df 91       	pop	r29
     f42:	cf 91       	pop	r28
     f44:	1f 91       	pop	r17
     f46:	0f 91       	pop	r16
     f48:	ff 90       	pop	r15
     f4a:	ef 90       	pop	r14
     f4c:	df 90       	pop	r13
     f4e:	08 95       	ret

00000f50 <xQueueGenericSend>:
     f50:	cf 92       	push	r12
     f52:	df 92       	push	r13
     f54:	ef 92       	push	r14
     f56:	ff 92       	push	r15
     f58:	0f 93       	push	r16
     f5a:	1f 93       	push	r17
     f5c:	cf 93       	push	r28
     f5e:	df 93       	push	r29
     f60:	cd b7       	in	r28, 0x3d	; 61
     f62:	de b7       	in	r29, 0x3e	; 62
     f64:	29 97       	sbiw	r28, 0x09	; 9
     f66:	0f b6       	in	r0, 0x3f	; 63
     f68:	f8 94       	cli
     f6a:	de bf       	out	0x3e, r29	; 62
     f6c:	0f be       	out	0x3f, r0	; 63
     f6e:	cd bf       	out	0x3d, r28	; 61
     f70:	7c 01       	movw	r14, r24
     f72:	6b 01       	movw	r12, r22
     f74:	2e 83       	std	Y+6, r18	; 0x06
     f76:	3f 83       	std	Y+7, r19	; 0x07
     f78:	48 87       	std	Y+8, r20	; 0x08
     f7a:	59 87       	std	Y+9, r21	; 0x09
     f7c:	10 e0       	ldi	r17, 0x00	; 0
     f7e:	0f b6       	in	r0, 0x3f	; 63
     f80:	f8 94       	cli
     f82:	0f 92       	push	r0
     f84:	f7 01       	movw	r30, r14
     f86:	96 8d       	ldd	r25, Z+30	; 0x1e
     f88:	87 8d       	ldd	r24, Z+31	; 0x1f
     f8a:	98 17       	cp	r25, r24
     f8c:	10 f0       	brcs	.+4      	; 0xf92 <xQueueGenericSend+0x42>
     f8e:	02 30       	cpi	r16, 0x02	; 2
     f90:	a9 f4       	brne	.+42     	; 0xfbc <xQueueGenericSend+0x6c>
     f92:	40 2f       	mov	r20, r16
     f94:	b6 01       	movw	r22, r12
     f96:	c7 01       	movw	r24, r14
     f98:	b6 de       	rcall	.-660    	; 0xd06 <prvCopyDataToQueue>
     f9a:	f7 01       	movw	r30, r14
     f9c:	93 89       	ldd	r25, Z+19	; 0x13
     f9e:	99 23       	and	r25, r25
     fa0:	39 f0       	breq	.+14     	; 0xfb0 <xQueueGenericSend+0x60>
     fa2:	c7 01       	movw	r24, r14
     fa4:	43 96       	adiw	r24, 0x13	; 19
     fa6:	ae d7       	rcall	.+3932   	; 0x1f04 <xTaskRemoveFromEventList>
     fa8:	88 23       	and	r24, r24
     faa:	21 f0       	breq	.+8      	; 0xfb4 <xQueueGenericSend+0x64>
     fac:	ba dd       	rcall	.-1164   	; 0xb22 <vPortYield>
     fae:	02 c0       	rjmp	.+4      	; 0xfb4 <xQueueGenericSend+0x64>
     fb0:	81 11       	cpse	r24, r1
     fb2:	b7 dd       	rcall	.-1170   	; 0xb22 <vPortYield>
     fb4:	0f 90       	pop	r0
     fb6:	0f be       	out	0x3f, r0	; 63
     fb8:	81 e0       	ldi	r24, 0x01	; 1
     fba:	48 c0       	rjmp	.+144    	; 0x104c <__EEPROM_REGION_LENGTH__+0x4c>
     fbc:	8e 81       	ldd	r24, Y+6	; 0x06
     fbe:	9f 81       	ldd	r25, Y+7	; 0x07
     fc0:	a8 85       	ldd	r26, Y+8	; 0x08
     fc2:	b9 85       	ldd	r27, Y+9	; 0x09
     fc4:	89 2b       	or	r24, r25
     fc6:	8a 2b       	or	r24, r26
     fc8:	8b 2b       	or	r24, r27
     fca:	21 f4       	brne	.+8      	; 0xfd4 <xQueueGenericSend+0x84>
     fcc:	0f 90       	pop	r0
     fce:	0f be       	out	0x3f, r0	; 63
     fd0:	80 e0       	ldi	r24, 0x00	; 0
     fd2:	3c c0       	rjmp	.+120    	; 0x104c <__EEPROM_REGION_LENGTH__+0x4c>
     fd4:	11 11       	cpse	r17, r1
     fd6:	05 c0       	rjmp	.+10     	; 0xfe2 <xQueueGenericSend+0x92>
     fd8:	ce 01       	movw	r24, r28
     fda:	01 96       	adiw	r24, 0x01	; 1
     fdc:	0e 94 cb 10 	call	0x2196	; 0x2196 <vTaskInternalSetTimeOutState>
     fe0:	11 e0       	ldi	r17, 0x01	; 1
     fe2:	0f 90       	pop	r0
     fe4:	0f be       	out	0x3f, r0	; 63
     fe6:	7d d4       	rcall	.+2298   	; 0x18e2 <vTaskSuspendAll>
     fe8:	0f b6       	in	r0, 0x3f	; 63
     fea:	f8 94       	cli
     fec:	0f 92       	push	r0
     fee:	f7 01       	movw	r30, r14
     ff0:	81 a1       	ldd	r24, Z+33	; 0x21
     ff2:	8f 3f       	cpi	r24, 0xFF	; 255
     ff4:	09 f4       	brne	.+2      	; 0xff8 <xQueueGenericSend+0xa8>
     ff6:	11 a2       	std	Z+33, r1	; 0x21
     ff8:	f7 01       	movw	r30, r14
     ffa:	82 a1       	ldd	r24, Z+34	; 0x22
     ffc:	8f 3f       	cpi	r24, 0xFF	; 255
     ffe:	09 f4       	brne	.+2      	; 0x1002 <__EEPROM_REGION_LENGTH__+0x2>
    1000:	12 a2       	std	Z+34, r1	; 0x22
    1002:	0f 90       	pop	r0
    1004:	0f be       	out	0x3f, r0	; 63
    1006:	be 01       	movw	r22, r28
    1008:	6a 5f       	subi	r22, 0xFA	; 250
    100a:	7f 4f       	sbci	r23, 0xFF	; 255
    100c:	ce 01       	movw	r24, r28
    100e:	01 96       	adiw	r24, 0x01	; 1
    1010:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <xTaskCheckForTimeOut>
    1014:	81 11       	cpse	r24, r1
    1016:	16 c0       	rjmp	.+44     	; 0x1044 <__EEPROM_REGION_LENGTH__+0x44>
    1018:	c7 01       	movw	r24, r14
    101a:	67 de       	rcall	.-818    	; 0xcea <prvIsQueueFull>
    101c:	88 23       	and	r24, r24
    101e:	71 f0       	breq	.+28     	; 0x103c <__EEPROM_REGION_LENGTH__+0x3c>
    1020:	4e 81       	ldd	r20, Y+6	; 0x06
    1022:	5f 81       	ldd	r21, Y+7	; 0x07
    1024:	68 85       	ldd	r22, Y+8	; 0x08
    1026:	79 85       	ldd	r23, Y+9	; 0x09
    1028:	c7 01       	movw	r24, r14
    102a:	08 96       	adiw	r24, 0x08	; 8
    102c:	12 d7       	rcall	.+3620   	; 0x1e52 <vTaskPlaceOnEventList>
    102e:	c7 01       	movw	r24, r14
    1030:	e3 de       	rcall	.-570    	; 0xdf8 <prvUnlockQueue>
    1032:	97 d5       	rcall	.+2862   	; 0x1b62 <xTaskResumeAll>
    1034:	81 11       	cpse	r24, r1
    1036:	a3 cf       	rjmp	.-186    	; 0xf7e <xQueueGenericSend+0x2e>
    1038:	74 dd       	rcall	.-1304   	; 0xb22 <vPortYield>
    103a:	a1 cf       	rjmp	.-190    	; 0xf7e <xQueueGenericSend+0x2e>
    103c:	c7 01       	movw	r24, r14
    103e:	dc de       	rcall	.-584    	; 0xdf8 <prvUnlockQueue>
    1040:	90 d5       	rcall	.+2848   	; 0x1b62 <xTaskResumeAll>
    1042:	9d cf       	rjmp	.-198    	; 0xf7e <xQueueGenericSend+0x2e>
    1044:	c7 01       	movw	r24, r14
    1046:	d8 de       	rcall	.-592    	; 0xdf8 <prvUnlockQueue>
    1048:	8c d5       	rcall	.+2840   	; 0x1b62 <xTaskResumeAll>
    104a:	80 e0       	ldi	r24, 0x00	; 0
    104c:	29 96       	adiw	r28, 0x09	; 9
    104e:	0f b6       	in	r0, 0x3f	; 63
    1050:	f8 94       	cli
    1052:	de bf       	out	0x3e, r29	; 62
    1054:	0f be       	out	0x3f, r0	; 63
    1056:	cd bf       	out	0x3d, r28	; 61
    1058:	df 91       	pop	r29
    105a:	cf 91       	pop	r28
    105c:	1f 91       	pop	r17
    105e:	0f 91       	pop	r16
    1060:	ff 90       	pop	r15
    1062:	ef 90       	pop	r14
    1064:	df 90       	pop	r13
    1066:	cf 90       	pop	r12
    1068:	08 95       	ret

0000106a <prvInitialiseMutex>:
    106a:	0f 93       	push	r16
    106c:	00 97       	sbiw	r24, 0x00	; 0
    106e:	69 f0       	breq	.+26     	; 0x108a <prvInitialiseMutex+0x20>
    1070:	fc 01       	movw	r30, r24
    1072:	15 82       	std	Z+5, r1	; 0x05
    1074:	14 82       	std	Z+4, r1	; 0x04
    1076:	11 82       	std	Z+1, r1	; 0x01
    1078:	10 82       	st	Z, r1
    107a:	16 82       	std	Z+6, r1	; 0x06
    107c:	00 e0       	ldi	r16, 0x00	; 0
    107e:	20 e0       	ldi	r18, 0x00	; 0
    1080:	30 e0       	ldi	r19, 0x00	; 0
    1082:	a9 01       	movw	r20, r18
    1084:	60 e0       	ldi	r22, 0x00	; 0
    1086:	70 e0       	ldi	r23, 0x00	; 0
    1088:	63 df       	rcall	.-314    	; 0xf50 <xQueueGenericSend>
    108a:	0f 91       	pop	r16
    108c:	08 95       	ret

0000108e <xQueueCreateMutex>:
    108e:	cf 93       	push	r28
    1090:	df 93       	push	r29
    1092:	48 2f       	mov	r20, r24
    1094:	60 e0       	ldi	r22, 0x00	; 0
    1096:	81 e0       	ldi	r24, 0x01	; 1
    1098:	38 df       	rcall	.-400    	; 0xf0a <xQueueGenericCreate>
    109a:	ec 01       	movw	r28, r24
    109c:	e6 df       	rcall	.-52     	; 0x106a <prvInitialiseMutex>
    109e:	ce 01       	movw	r24, r28
    10a0:	df 91       	pop	r29
    10a2:	cf 91       	pop	r28
    10a4:	08 95       	ret

000010a6 <xQueueGenericSendFromISR>:
    10a6:	ef 92       	push	r14
    10a8:	ff 92       	push	r15
    10aa:	0f 93       	push	r16
    10ac:	1f 93       	push	r17
    10ae:	cf 93       	push	r28
    10b0:	df 93       	push	r29
    10b2:	8a 01       	movw	r16, r20
    10b4:	fc 01       	movw	r30, r24
    10b6:	56 8d       	ldd	r21, Z+30	; 0x1e
    10b8:	37 8d       	ldd	r19, Z+31	; 0x1f
    10ba:	53 17       	cp	r21, r19
    10bc:	10 f0       	brcs	.+4      	; 0x10c2 <xQueueGenericSendFromISR+0x1c>
    10be:	22 30       	cpi	r18, 0x02	; 2
    10c0:	f1 f4       	brne	.+60     	; 0x10fe <xQueueGenericSendFromISR+0x58>
    10c2:	42 2f       	mov	r20, r18
    10c4:	78 01       	movw	r14, r16
    10c6:	ec 01       	movw	r28, r24
    10c8:	1a a1       	ldd	r17, Y+34	; 0x22
    10ca:	8e 8d       	ldd	r24, Y+30	; 0x1e
    10cc:	ce 01       	movw	r24, r28
    10ce:	1b de       	rcall	.-970    	; 0xd06 <prvCopyDataToQueue>
    10d0:	1f 3f       	cpi	r17, 0xFF	; 255
    10d2:	79 f4       	brne	.+30     	; 0x10f2 <xQueueGenericSendFromISR+0x4c>
    10d4:	8b 89       	ldd	r24, Y+19	; 0x13
    10d6:	88 23       	and	r24, r24
    10d8:	a1 f0       	breq	.+40     	; 0x1102 <xQueueGenericSendFromISR+0x5c>
    10da:	ce 01       	movw	r24, r28
    10dc:	43 96       	adiw	r24, 0x13	; 19
    10de:	12 d7       	rcall	.+3620   	; 0x1f04 <xTaskRemoveFromEventList>
    10e0:	88 23       	and	r24, r24
    10e2:	89 f0       	breq	.+34     	; 0x1106 <xQueueGenericSendFromISR+0x60>
    10e4:	e1 14       	cp	r14, r1
    10e6:	f1 04       	cpc	r15, r1
    10e8:	81 f0       	breq	.+32     	; 0x110a <xQueueGenericSendFromISR+0x64>
    10ea:	81 e0       	ldi	r24, 0x01	; 1
    10ec:	f7 01       	movw	r30, r14
    10ee:	80 83       	st	Z, r24
    10f0:	0d c0       	rjmp	.+26     	; 0x110c <xQueueGenericSendFromISR+0x66>
    10f2:	ff 24       	eor	r15, r15
    10f4:	f3 94       	inc	r15
    10f6:	f1 0e       	add	r15, r17
    10f8:	fa a2       	std	Y+34, r15	; 0x22
    10fa:	81 e0       	ldi	r24, 0x01	; 1
    10fc:	07 c0       	rjmp	.+14     	; 0x110c <xQueueGenericSendFromISR+0x66>
    10fe:	80 e0       	ldi	r24, 0x00	; 0
    1100:	05 c0       	rjmp	.+10     	; 0x110c <xQueueGenericSendFromISR+0x66>
    1102:	81 e0       	ldi	r24, 0x01	; 1
    1104:	03 c0       	rjmp	.+6      	; 0x110c <xQueueGenericSendFromISR+0x66>
    1106:	81 e0       	ldi	r24, 0x01	; 1
    1108:	01 c0       	rjmp	.+2      	; 0x110c <xQueueGenericSendFromISR+0x66>
    110a:	81 e0       	ldi	r24, 0x01	; 1
    110c:	df 91       	pop	r29
    110e:	cf 91       	pop	r28
    1110:	1f 91       	pop	r17
    1112:	0f 91       	pop	r16
    1114:	ff 90       	pop	r15
    1116:	ef 90       	pop	r14
    1118:	08 95       	ret

0000111a <xQueueReceive>:
    111a:	cf 92       	push	r12
    111c:	df 92       	push	r13
    111e:	ef 92       	push	r14
    1120:	ff 92       	push	r15
    1122:	0f 93       	push	r16
    1124:	1f 93       	push	r17
    1126:	cf 93       	push	r28
    1128:	df 93       	push	r29
    112a:	cd b7       	in	r28, 0x3d	; 61
    112c:	de b7       	in	r29, 0x3e	; 62
    112e:	29 97       	sbiw	r28, 0x09	; 9
    1130:	0f b6       	in	r0, 0x3f	; 63
    1132:	f8 94       	cli
    1134:	de bf       	out	0x3e, r29	; 62
    1136:	0f be       	out	0x3f, r0	; 63
    1138:	cd bf       	out	0x3d, r28	; 61
    113a:	8c 01       	movw	r16, r24
    113c:	6b 01       	movw	r12, r22
    113e:	2e 83       	std	Y+6, r18	; 0x06
    1140:	3f 83       	std	Y+7, r19	; 0x07
    1142:	48 87       	std	Y+8, r20	; 0x08
    1144:	59 87       	std	Y+9, r21	; 0x09
    1146:	e1 2c       	mov	r14, r1
    1148:	0f b6       	in	r0, 0x3f	; 63
    114a:	f8 94       	cli
    114c:	0f 92       	push	r0
    114e:	f8 01       	movw	r30, r16
    1150:	f6 8c       	ldd	r15, Z+30	; 0x1e
    1152:	ff 20       	and	r15, r15
    1154:	91 f0       	breq	.+36     	; 0x117a <xQueueReceive+0x60>
    1156:	b6 01       	movw	r22, r12
    1158:	c8 01       	movw	r24, r16
    115a:	34 de       	rcall	.-920    	; 0xdc4 <prvCopyDataFromQueue>
    115c:	fa 94       	dec	r15
    115e:	f8 01       	movw	r30, r16
    1160:	f6 8e       	std	Z+30, r15	; 0x1e
    1162:	80 85       	ldd	r24, Z+8	; 0x08
    1164:	88 23       	and	r24, r24
    1166:	29 f0       	breq	.+10     	; 0x1172 <xQueueReceive+0x58>
    1168:	c8 01       	movw	r24, r16
    116a:	08 96       	adiw	r24, 0x08	; 8
    116c:	cb d6       	rcall	.+3478   	; 0x1f04 <xTaskRemoveFromEventList>
    116e:	81 11       	cpse	r24, r1
    1170:	d8 dc       	rcall	.-1616   	; 0xb22 <vPortYield>
    1172:	0f 90       	pop	r0
    1174:	0f be       	out	0x3f, r0	; 63
    1176:	81 e0       	ldi	r24, 0x01	; 1
    1178:	4c c0       	rjmp	.+152    	; 0x1212 <xQueueReceive+0xf8>
    117a:	8e 81       	ldd	r24, Y+6	; 0x06
    117c:	9f 81       	ldd	r25, Y+7	; 0x07
    117e:	a8 85       	ldd	r26, Y+8	; 0x08
    1180:	b9 85       	ldd	r27, Y+9	; 0x09
    1182:	89 2b       	or	r24, r25
    1184:	8a 2b       	or	r24, r26
    1186:	8b 2b       	or	r24, r27
    1188:	21 f4       	brne	.+8      	; 0x1192 <xQueueReceive+0x78>
    118a:	0f 90       	pop	r0
    118c:	0f be       	out	0x3f, r0	; 63
    118e:	80 e0       	ldi	r24, 0x00	; 0
    1190:	40 c0       	rjmp	.+128    	; 0x1212 <xQueueReceive+0xf8>
    1192:	e1 10       	cpse	r14, r1
    1194:	05 c0       	rjmp	.+10     	; 0x11a0 <xQueueReceive+0x86>
    1196:	ce 01       	movw	r24, r28
    1198:	01 96       	adiw	r24, 0x01	; 1
    119a:	fd d7       	rcall	.+4090   	; 0x2196 <vTaskInternalSetTimeOutState>
    119c:	ee 24       	eor	r14, r14
    119e:	e3 94       	inc	r14
    11a0:	0f 90       	pop	r0
    11a2:	0f be       	out	0x3f, r0	; 63
    11a4:	9e d3       	rcall	.+1852   	; 0x18e2 <vTaskSuspendAll>
    11a6:	0f b6       	in	r0, 0x3f	; 63
    11a8:	f8 94       	cli
    11aa:	0f 92       	push	r0
    11ac:	f8 01       	movw	r30, r16
    11ae:	81 a1       	ldd	r24, Z+33	; 0x21
    11b0:	8f 3f       	cpi	r24, 0xFF	; 255
    11b2:	09 f4       	brne	.+2      	; 0x11b6 <xQueueReceive+0x9c>
    11b4:	11 a2       	std	Z+33, r1	; 0x21
    11b6:	f8 01       	movw	r30, r16
    11b8:	82 a1       	ldd	r24, Z+34	; 0x22
    11ba:	8f 3f       	cpi	r24, 0xFF	; 255
    11bc:	09 f4       	brne	.+2      	; 0x11c0 <xQueueReceive+0xa6>
    11be:	12 a2       	std	Z+34, r1	; 0x22
    11c0:	0f 90       	pop	r0
    11c2:	0f be       	out	0x3f, r0	; 63
    11c4:	be 01       	movw	r22, r28
    11c6:	6a 5f       	subi	r22, 0xFA	; 250
    11c8:	7f 4f       	sbci	r23, 0xFF	; 255
    11ca:	ce 01       	movw	r24, r28
    11cc:	01 96       	adiw	r24, 0x01	; 1
    11ce:	f4 d7       	rcall	.+4072   	; 0x21b8 <xTaskCheckForTimeOut>
    11d0:	81 11       	cpse	r24, r1
    11d2:	16 c0       	rjmp	.+44     	; 0x1200 <xQueueReceive+0xe6>
    11d4:	c8 01       	movw	r24, r16
    11d6:	7c dd       	rcall	.-1288   	; 0xcd0 <prvIsQueueEmpty>
    11d8:	88 23       	and	r24, r24
    11da:	71 f0       	breq	.+28     	; 0x11f8 <xQueueReceive+0xde>
    11dc:	4e 81       	ldd	r20, Y+6	; 0x06
    11de:	5f 81       	ldd	r21, Y+7	; 0x07
    11e0:	68 85       	ldd	r22, Y+8	; 0x08
    11e2:	79 85       	ldd	r23, Y+9	; 0x09
    11e4:	c8 01       	movw	r24, r16
    11e6:	43 96       	adiw	r24, 0x13	; 19
    11e8:	34 d6       	rcall	.+3176   	; 0x1e52 <vTaskPlaceOnEventList>
    11ea:	c8 01       	movw	r24, r16
    11ec:	05 de       	rcall	.-1014   	; 0xdf8 <prvUnlockQueue>
    11ee:	b9 d4       	rcall	.+2418   	; 0x1b62 <xTaskResumeAll>
    11f0:	81 11       	cpse	r24, r1
    11f2:	aa cf       	rjmp	.-172    	; 0x1148 <xQueueReceive+0x2e>
    11f4:	96 dc       	rcall	.-1748   	; 0xb22 <vPortYield>
    11f6:	a8 cf       	rjmp	.-176    	; 0x1148 <xQueueReceive+0x2e>
    11f8:	c8 01       	movw	r24, r16
    11fa:	fe dd       	rcall	.-1028   	; 0xdf8 <prvUnlockQueue>
    11fc:	b2 d4       	rcall	.+2404   	; 0x1b62 <xTaskResumeAll>
    11fe:	a4 cf       	rjmp	.-184    	; 0x1148 <xQueueReceive+0x2e>
    1200:	c8 01       	movw	r24, r16
    1202:	fa dd       	rcall	.-1036   	; 0xdf8 <prvUnlockQueue>
    1204:	ae d4       	rcall	.+2396   	; 0x1b62 <xTaskResumeAll>
    1206:	c8 01       	movw	r24, r16
    1208:	63 dd       	rcall	.-1338   	; 0xcd0 <prvIsQueueEmpty>
    120a:	88 23       	and	r24, r24
    120c:	09 f4       	brne	.+2      	; 0x1210 <xQueueReceive+0xf6>
    120e:	9c cf       	rjmp	.-200    	; 0x1148 <xQueueReceive+0x2e>
    1210:	80 e0       	ldi	r24, 0x00	; 0
    1212:	29 96       	adiw	r28, 0x09	; 9
    1214:	0f b6       	in	r0, 0x3f	; 63
    1216:	f8 94       	cli
    1218:	de bf       	out	0x3e, r29	; 62
    121a:	0f be       	out	0x3f, r0	; 63
    121c:	cd bf       	out	0x3d, r28	; 61
    121e:	df 91       	pop	r29
    1220:	cf 91       	pop	r28
    1222:	1f 91       	pop	r17
    1224:	0f 91       	pop	r16
    1226:	ff 90       	pop	r15
    1228:	ef 90       	pop	r14
    122a:	df 90       	pop	r13
    122c:	cf 90       	pop	r12
    122e:	08 95       	ret

00001230 <xQueueSemaphoreTake>:
    1230:	ef 92       	push	r14
    1232:	ff 92       	push	r15
    1234:	0f 93       	push	r16
    1236:	1f 93       	push	r17
    1238:	cf 93       	push	r28
    123a:	df 93       	push	r29
    123c:	cd b7       	in	r28, 0x3d	; 61
    123e:	de b7       	in	r29, 0x3e	; 62
    1240:	29 97       	sbiw	r28, 0x09	; 9
    1242:	0f b6       	in	r0, 0x3f	; 63
    1244:	f8 94       	cli
    1246:	de bf       	out	0x3e, r29	; 62
    1248:	0f be       	out	0x3f, r0	; 63
    124a:	cd bf       	out	0x3d, r28	; 61
    124c:	8c 01       	movw	r16, r24
    124e:	4e 83       	std	Y+6, r20	; 0x06
    1250:	5f 83       	std	Y+7, r21	; 0x07
    1252:	68 87       	std	Y+8, r22	; 0x08
    1254:	79 87       	std	Y+9, r23	; 0x09
    1256:	e1 2c       	mov	r14, r1
    1258:	f1 2c       	mov	r15, r1
    125a:	0f b6       	in	r0, 0x3f	; 63
    125c:	f8 94       	cli
    125e:	0f 92       	push	r0
    1260:	f8 01       	movw	r30, r16
    1262:	86 8d       	ldd	r24, Z+30	; 0x1e
    1264:	88 23       	and	r24, r24
    1266:	c1 f0       	breq	.+48     	; 0x1298 <xQueueSemaphoreTake+0x68>
    1268:	81 50       	subi	r24, 0x01	; 1
    126a:	86 8f       	std	Z+30, r24	; 0x1e
    126c:	80 81       	ld	r24, Z
    126e:	91 81       	ldd	r25, Z+1	; 0x01
    1270:	89 2b       	or	r24, r25
    1272:	29 f4       	brne	.+10     	; 0x127e <xQueueSemaphoreTake+0x4e>
    1274:	0e 94 9d 12 	call	0x253a	; 0x253a <pvTaskIncrementMutexHeldCount>
    1278:	f8 01       	movw	r30, r16
    127a:	95 83       	std	Z+5, r25	; 0x05
    127c:	84 83       	std	Z+4, r24	; 0x04
    127e:	f8 01       	movw	r30, r16
    1280:	80 85       	ldd	r24, Z+8	; 0x08
    1282:	88 23       	and	r24, r24
    1284:	29 f0       	breq	.+10     	; 0x1290 <xQueueSemaphoreTake+0x60>
    1286:	c8 01       	movw	r24, r16
    1288:	08 96       	adiw	r24, 0x08	; 8
    128a:	3c d6       	rcall	.+3192   	; 0x1f04 <xTaskRemoveFromEventList>
    128c:	81 11       	cpse	r24, r1
    128e:	49 dc       	rcall	.-1902   	; 0xb22 <vPortYield>
    1290:	0f 90       	pop	r0
    1292:	0f be       	out	0x3f, r0	; 63
    1294:	81 e0       	ldi	r24, 0x01	; 1
    1296:	6b c0       	rjmp	.+214    	; 0x136e <xQueueSemaphoreTake+0x13e>
    1298:	8e 81       	ldd	r24, Y+6	; 0x06
    129a:	9f 81       	ldd	r25, Y+7	; 0x07
    129c:	a8 85       	ldd	r26, Y+8	; 0x08
    129e:	b9 85       	ldd	r27, Y+9	; 0x09
    12a0:	89 2b       	or	r24, r25
    12a2:	8a 2b       	or	r24, r26
    12a4:	8b 2b       	or	r24, r27
    12a6:	21 f4       	brne	.+8      	; 0x12b0 <xQueueSemaphoreTake+0x80>
    12a8:	0f 90       	pop	r0
    12aa:	0f be       	out	0x3f, r0	; 63
    12ac:	80 e0       	ldi	r24, 0x00	; 0
    12ae:	5f c0       	rjmp	.+190    	; 0x136e <xQueueSemaphoreTake+0x13e>
    12b0:	f1 10       	cpse	r15, r1
    12b2:	05 c0       	rjmp	.+10     	; 0x12be <xQueueSemaphoreTake+0x8e>
    12b4:	ce 01       	movw	r24, r28
    12b6:	01 96       	adiw	r24, 0x01	; 1
    12b8:	6e d7       	rcall	.+3804   	; 0x2196 <vTaskInternalSetTimeOutState>
    12ba:	ff 24       	eor	r15, r15
    12bc:	f3 94       	inc	r15
    12be:	0f 90       	pop	r0
    12c0:	0f be       	out	0x3f, r0	; 63
    12c2:	0f d3       	rcall	.+1566   	; 0x18e2 <vTaskSuspendAll>
    12c4:	0f b6       	in	r0, 0x3f	; 63
    12c6:	f8 94       	cli
    12c8:	0f 92       	push	r0
    12ca:	f8 01       	movw	r30, r16
    12cc:	81 a1       	ldd	r24, Z+33	; 0x21
    12ce:	8f 3f       	cpi	r24, 0xFF	; 255
    12d0:	09 f4       	brne	.+2      	; 0x12d4 <xQueueSemaphoreTake+0xa4>
    12d2:	11 a2       	std	Z+33, r1	; 0x21
    12d4:	f8 01       	movw	r30, r16
    12d6:	82 a1       	ldd	r24, Z+34	; 0x22
    12d8:	8f 3f       	cpi	r24, 0xFF	; 255
    12da:	09 f4       	brne	.+2      	; 0x12de <xQueueSemaphoreTake+0xae>
    12dc:	12 a2       	std	Z+34, r1	; 0x22
    12de:	0f 90       	pop	r0
    12e0:	0f be       	out	0x3f, r0	; 63
    12e2:	be 01       	movw	r22, r28
    12e4:	6a 5f       	subi	r22, 0xFA	; 250
    12e6:	7f 4f       	sbci	r23, 0xFF	; 255
    12e8:	ce 01       	movw	r24, r28
    12ea:	01 96       	adiw	r24, 0x01	; 1
    12ec:	65 d7       	rcall	.+3786   	; 0x21b8 <xTaskCheckForTimeOut>
    12ee:	81 11       	cpse	r24, r1
    12f0:	24 c0       	rjmp	.+72     	; 0x133a <xQueueSemaphoreTake+0x10a>
    12f2:	c8 01       	movw	r24, r16
    12f4:	ed dc       	rcall	.-1574   	; 0xcd0 <prvIsQueueEmpty>
    12f6:	88 23       	and	r24, r24
    12f8:	e1 f0       	breq	.+56     	; 0x1332 <xQueueSemaphoreTake+0x102>
    12fa:	f8 01       	movw	r30, r16
    12fc:	80 81       	ld	r24, Z
    12fe:	91 81       	ldd	r25, Z+1	; 0x01
    1300:	89 2b       	or	r24, r25
    1302:	49 f4       	brne	.+18     	; 0x1316 <xQueueSemaphoreTake+0xe6>
    1304:	0f b6       	in	r0, 0x3f	; 63
    1306:	f8 94       	cli
    1308:	0f 92       	push	r0
    130a:	84 81       	ldd	r24, Z+4	; 0x04
    130c:	95 81       	ldd	r25, Z+5	; 0x05
    130e:	cc d7       	rcall	.+3992   	; 0x22a8 <xTaskPriorityInherit>
    1310:	e8 2e       	mov	r14, r24
    1312:	0f 90       	pop	r0
    1314:	0f be       	out	0x3f, r0	; 63
    1316:	4e 81       	ldd	r20, Y+6	; 0x06
    1318:	5f 81       	ldd	r21, Y+7	; 0x07
    131a:	68 85       	ldd	r22, Y+8	; 0x08
    131c:	79 85       	ldd	r23, Y+9	; 0x09
    131e:	c8 01       	movw	r24, r16
    1320:	43 96       	adiw	r24, 0x13	; 19
    1322:	97 d5       	rcall	.+2862   	; 0x1e52 <vTaskPlaceOnEventList>
    1324:	c8 01       	movw	r24, r16
    1326:	68 dd       	rcall	.-1328   	; 0xdf8 <prvUnlockQueue>
    1328:	1c d4       	rcall	.+2104   	; 0x1b62 <xTaskResumeAll>
    132a:	81 11       	cpse	r24, r1
    132c:	96 cf       	rjmp	.-212    	; 0x125a <xQueueSemaphoreTake+0x2a>
    132e:	f9 db       	rcall	.-2062   	; 0xb22 <vPortYield>
    1330:	94 cf       	rjmp	.-216    	; 0x125a <xQueueSemaphoreTake+0x2a>
    1332:	c8 01       	movw	r24, r16
    1334:	61 dd       	rcall	.-1342   	; 0xdf8 <prvUnlockQueue>
    1336:	15 d4       	rcall	.+2090   	; 0x1b62 <xTaskResumeAll>
    1338:	90 cf       	rjmp	.-224    	; 0x125a <xQueueSemaphoreTake+0x2a>
    133a:	c8 01       	movw	r24, r16
    133c:	5d dd       	rcall	.-1350   	; 0xdf8 <prvUnlockQueue>
    133e:	11 d4       	rcall	.+2082   	; 0x1b62 <xTaskResumeAll>
    1340:	c8 01       	movw	r24, r16
    1342:	c6 dc       	rcall	.-1652   	; 0xcd0 <prvIsQueueEmpty>
    1344:	88 23       	and	r24, r24
    1346:	09 f4       	brne	.+2      	; 0x134a <xQueueSemaphoreTake+0x11a>
    1348:	88 cf       	rjmp	.-240    	; 0x125a <xQueueSemaphoreTake+0x2a>
    134a:	ee 20       	and	r14, r14
    134c:	79 f0       	breq	.+30     	; 0x136c <xQueueSemaphoreTake+0x13c>
    134e:	0f b6       	in	r0, 0x3f	; 63
    1350:	f8 94       	cli
    1352:	0f 92       	push	r0
    1354:	c8 01       	movw	r24, r16
    1356:	ac dc       	rcall	.-1704   	; 0xcb0 <prvGetDisinheritPriorityAfterTimeout>
    1358:	68 2f       	mov	r22, r24
    135a:	f8 01       	movw	r30, r16
    135c:	84 81       	ldd	r24, Z+4	; 0x04
    135e:	95 81       	ldd	r25, Z+5	; 0x05
    1360:	0e 94 36 12 	call	0x246c	; 0x246c <vTaskPriorityDisinheritAfterTimeout>
    1364:	0f 90       	pop	r0
    1366:	0f be       	out	0x3f, r0	; 63
    1368:	80 e0       	ldi	r24, 0x00	; 0
    136a:	01 c0       	rjmp	.+2      	; 0x136e <xQueueSemaphoreTake+0x13e>
    136c:	80 e0       	ldi	r24, 0x00	; 0
    136e:	29 96       	adiw	r28, 0x09	; 9
    1370:	0f b6       	in	r0, 0x3f	; 63
    1372:	f8 94       	cli
    1374:	de bf       	out	0x3e, r29	; 62
    1376:	0f be       	out	0x3f, r0	; 63
    1378:	cd bf       	out	0x3d, r28	; 61
    137a:	df 91       	pop	r29
    137c:	cf 91       	pop	r28
    137e:	1f 91       	pop	r17
    1380:	0f 91       	pop	r16
    1382:	ff 90       	pop	r15
    1384:	ef 90       	pop	r14
    1386:	08 95       	ret

00001388 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
    1388:	cf 93       	push	r28
    138a:	df 93       	push	r29
    138c:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    138e:	0f b6       	in	r0, 0x3f	; 63
    1390:	f8 94       	cli
    1392:	0f 92       	push	r0
    1394:	89 a1       	ldd	r24, Y+33	; 0x21
    1396:	8f 3f       	cpi	r24, 0xFF	; 255
    1398:	09 f4       	brne	.+2      	; 0x139c <vQueueWaitForMessageRestricted+0x14>
    139a:	19 a2       	std	Y+33, r1	; 0x21
    139c:	8a a1       	ldd	r24, Y+34	; 0x22
    139e:	8f 3f       	cpi	r24, 0xFF	; 255
    13a0:	09 f4       	brne	.+2      	; 0x13a4 <vQueueWaitForMessageRestricted+0x1c>
    13a2:	1a a2       	std	Y+34, r1	; 0x22
    13a4:	0f 90       	pop	r0
    13a6:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    13a8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    13aa:	81 11       	cpse	r24, r1
    13ac:	03 c0       	rjmp	.+6      	; 0x13b4 <vQueueWaitForMessageRestricted+0x2c>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    13ae:	ce 01       	movw	r24, r28
    13b0:	43 96       	adiw	r24, 0x13	; 19
    13b2:	66 d5       	rcall	.+2764   	; 0x1e80 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
    13b4:	ce 01       	movw	r24, r28
    13b6:	20 dd       	rcall	.-1472   	; 0xdf8 <prvUnlockQueue>
    }
    13b8:	df 91       	pop	r29
    13ba:	cf 91       	pop	r28
    13bc:	08 95       	ret

000013be <prvResetNextTaskUnblockTime>:
    13be:	e0 91 c3 10 	lds	r30, 0x10C3	; 0x8010c3 <pxDelayedTaskList>
    13c2:	f0 91 c4 10 	lds	r31, 0x10C4	; 0x8010c4 <pxDelayedTaskList+0x1>
    13c6:	80 81       	ld	r24, Z
    13c8:	81 11       	cpse	r24, r1
    13ca:	0c c0       	rjmp	.+24     	; 0x13e4 <prvResetNextTaskUnblockTime+0x26>
    13cc:	8f ef       	ldi	r24, 0xFF	; 255
    13ce:	9f ef       	ldi	r25, 0xFF	; 255
    13d0:	dc 01       	movw	r26, r24
    13d2:	80 93 8d 10 	sts	0x108D, r24	; 0x80108d <xNextTaskUnblockTime>
    13d6:	90 93 8e 10 	sts	0x108E, r25	; 0x80108e <xNextTaskUnblockTime+0x1>
    13da:	a0 93 8f 10 	sts	0x108F, r26	; 0x80108f <xNextTaskUnblockTime+0x2>
    13de:	b0 93 90 10 	sts	0x1090, r27	; 0x801090 <xNextTaskUnblockTime+0x3>
    13e2:	08 95       	ret
    13e4:	e0 91 c3 10 	lds	r30, 0x10C3	; 0x8010c3 <pxDelayedTaskList>
    13e8:	f0 91 c4 10 	lds	r31, 0x10C4	; 0x8010c4 <pxDelayedTaskList+0x1>
    13ec:	07 80       	ldd	r0, Z+7	; 0x07
    13ee:	f0 85       	ldd	r31, Z+8	; 0x08
    13f0:	e0 2d       	mov	r30, r0
    13f2:	80 81       	ld	r24, Z
    13f4:	91 81       	ldd	r25, Z+1	; 0x01
    13f6:	a2 81       	ldd	r26, Z+2	; 0x02
    13f8:	b3 81       	ldd	r27, Z+3	; 0x03
    13fa:	80 93 8d 10 	sts	0x108D, r24	; 0x80108d <xNextTaskUnblockTime>
    13fe:	90 93 8e 10 	sts	0x108E, r25	; 0x80108e <xNextTaskUnblockTime+0x1>
    1402:	a0 93 8f 10 	sts	0x108F, r26	; 0x80108f <xNextTaskUnblockTime+0x2>
    1406:	b0 93 90 10 	sts	0x1090, r27	; 0x801090 <xNextTaskUnblockTime+0x3>
    140a:	08 95       	ret

0000140c <prvDeleteTCB>:
    140c:	cf 93       	push	r28
    140e:	df 93       	push	r29
    1410:	ec 01       	movw	r28, r24
    1412:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1414:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1416:	7b da       	rcall	.-2826   	; 0x90e <vPortFree>
    1418:	ce 01       	movw	r24, r28
    141a:	79 da       	rcall	.-2830   	; 0x90e <vPortFree>
    141c:	df 91       	pop	r29
    141e:	cf 91       	pop	r28
    1420:	08 95       	ret

00001422 <prvInitialiseNewTask>:
    1422:	4f 92       	push	r4
    1424:	5f 92       	push	r5
    1426:	6f 92       	push	r6
    1428:	7f 92       	push	r7
    142a:	8f 92       	push	r8
    142c:	9f 92       	push	r9
    142e:	af 92       	push	r10
    1430:	bf 92       	push	r11
    1432:	cf 92       	push	r12
    1434:	df 92       	push	r13
    1436:	ef 92       	push	r14
    1438:	ff 92       	push	r15
    143a:	0f 93       	push	r16
    143c:	cf 93       	push	r28
    143e:	df 93       	push	r29
    1440:	2c 01       	movw	r4, r24
    1442:	5b 01       	movw	r10, r22
    1444:	4a 01       	movw	r8, r20
    1446:	39 01       	movw	r6, r18
    1448:	e6 01       	movw	r28, r12
    144a:	65 ea       	ldi	r22, 0xA5	; 165
    144c:	70 e0       	ldi	r23, 0x00	; 0
    144e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1450:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1452:	0e 94 34 1e 	call	0x3c68	; 0x3c68 <memset>
    1456:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1458:	9c 8d       	ldd	r25, Y+28	; 0x1c
    145a:	21 e0       	ldi	r18, 0x01	; 1
    145c:	82 1a       	sub	r8, r18
    145e:	91 08       	sbc	r9, r1
    1460:	88 0e       	add	r8, r24
    1462:	99 1e       	adc	r9, r25
    1464:	a1 14       	cp	r10, r1
    1466:	b1 04       	cpc	r11, r1
    1468:	89 f4       	brne	.+34     	; 0x148c <prvInitialiseNewTask+0x6a>
    146a:	15 c0       	rjmp	.+42     	; 0x1496 <prvInitialiseNewTask+0x74>
    146c:	82 2f       	mov	r24, r18
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	f5 01       	movw	r30, r10
    1472:	e8 0f       	add	r30, r24
    1474:	f9 1f       	adc	r31, r25
    1476:	30 81       	ld	r19, Z
    1478:	de 01       	movw	r26, r28
    147a:	a8 0f       	add	r26, r24
    147c:	b9 1f       	adc	r27, r25
    147e:	5d 96       	adiw	r26, 0x1d	; 29
    1480:	3c 93       	st	X, r19
    1482:	80 81       	ld	r24, Z
    1484:	88 23       	and	r24, r24
    1486:	29 f0       	breq	.+10     	; 0x1492 <prvInitialiseNewTask+0x70>
    1488:	2f 5f       	subi	r18, 0xFF	; 255
    148a:	01 c0       	rjmp	.+2      	; 0x148e <prvInitialiseNewTask+0x6c>
    148c:	20 e0       	ldi	r18, 0x00	; 0
    148e:	20 31       	cpi	r18, 0x10	; 16
    1490:	68 f3       	brcs	.-38     	; 0x146c <prvInitialiseNewTask+0x4a>
    1492:	1c a6       	std	Y+44, r1	; 0x2c
    1494:	01 c0       	rjmp	.+2      	; 0x1498 <prvInitialiseNewTask+0x76>
    1496:	1d 8e       	std	Y+29, r1	; 0x1d
    1498:	0a 30       	cpi	r16, 0x0A	; 10
    149a:	08 f0       	brcs	.+2      	; 0x149e <prvInitialiseNewTask+0x7c>
    149c:	09 e0       	ldi	r16, 0x09	; 9
    149e:	0a 8f       	std	Y+26, r16	; 0x1a
    14a0:	0d a7       	std	Y+45, r16	; 0x2d
    14a2:	1e a6       	std	Y+46, r1	; 0x2e
    14a4:	ce 01       	movw	r24, r28
    14a6:	02 96       	adiw	r24, 0x02	; 2
    14a8:	7f da       	rcall	.-2818   	; 0x9a8 <vListInitialiseItem>
    14aa:	ce 01       	movw	r24, r28
    14ac:	0e 96       	adiw	r24, 0x0e	; 14
    14ae:	7c da       	rcall	.-2824   	; 0x9a8 <vListInitialiseItem>
    14b0:	db 87       	std	Y+11, r29	; 0x0b
    14b2:	ca 87       	std	Y+10, r28	; 0x0a
    14b4:	8a e0       	ldi	r24, 0x0A	; 10
    14b6:	90 e0       	ldi	r25, 0x00	; 0
    14b8:	a0 e0       	ldi	r26, 0x00	; 0
    14ba:	b0 e0       	ldi	r27, 0x00	; 0
    14bc:	80 1b       	sub	r24, r16
    14be:	91 09       	sbc	r25, r1
    14c0:	a1 09       	sbc	r26, r1
    14c2:	b1 09       	sbc	r27, r1
    14c4:	8e 87       	std	Y+14, r24	; 0x0e
    14c6:	9f 87       	std	Y+15, r25	; 0x0f
    14c8:	a8 8b       	std	Y+16, r26	; 0x10
    14ca:	b9 8b       	std	Y+17, r27	; 0x11
    14cc:	df 8b       	std	Y+23, r29	; 0x17
    14ce:	ce 8b       	std	Y+22, r28	; 0x16
    14d0:	18 aa       	std	Y+48, r1	; 0x30
    14d2:	1f a6       	std	Y+47, r1	; 0x2f
    14d4:	84 e0       	ldi	r24, 0x04	; 4
    14d6:	fe 01       	movw	r30, r28
    14d8:	f1 96       	adiw	r30, 0x31	; 49
    14da:	df 01       	movw	r26, r30
    14dc:	1d 92       	st	X+, r1
    14de:	8a 95       	dec	r24
    14e0:	e9 f7       	brne	.-6      	; 0x14dc <prvInitialiseNewTask+0xba>
    14e2:	1d aa       	std	Y+53, r1	; 0x35
    14e4:	a3 01       	movw	r20, r6
    14e6:	b2 01       	movw	r22, r4
    14e8:	c4 01       	movw	r24, r8
    14ea:	d2 da       	rcall	.-2652   	; 0xa90 <pxPortInitialiseStack>
    14ec:	99 83       	std	Y+1, r25	; 0x01
    14ee:	88 83       	st	Y, r24
    14f0:	e1 14       	cp	r14, r1
    14f2:	f1 04       	cpc	r15, r1
    14f4:	19 f0       	breq	.+6      	; 0x14fc <prvInitialiseNewTask+0xda>
    14f6:	f7 01       	movw	r30, r14
    14f8:	d1 83       	std	Z+1, r29	; 0x01
    14fa:	c0 83       	st	Z, r28
    14fc:	df 91       	pop	r29
    14fe:	cf 91       	pop	r28
    1500:	0f 91       	pop	r16
    1502:	ff 90       	pop	r15
    1504:	ef 90       	pop	r14
    1506:	df 90       	pop	r13
    1508:	cf 90       	pop	r12
    150a:	bf 90       	pop	r11
    150c:	af 90       	pop	r10
    150e:	9f 90       	pop	r9
    1510:	8f 90       	pop	r8
    1512:	7f 90       	pop	r7
    1514:	6f 90       	pop	r6
    1516:	5f 90       	pop	r5
    1518:	4f 90       	pop	r4
    151a:	08 95       	ret

0000151c <prvInitialiseTaskLists>:
    151c:	cf 93       	push	r28
    151e:	c0 e0       	ldi	r28, 0x00	; 0
    1520:	08 c0       	rjmp	.+16     	; 0x1532 <prvInitialiseTaskLists+0x16>
    1522:	2b e0       	ldi	r18, 0x0B	; 11
    1524:	c2 9f       	mul	r28, r18
    1526:	c0 01       	movw	r24, r0
    1528:	11 24       	eor	r1, r1
    152a:	85 52       	subi	r24, 0x25	; 37
    152c:	9f 4e       	sbci	r25, 0xEF	; 239
    152e:	2b da       	rcall	.-2986   	; 0x986 <vListInitialise>
    1530:	cf 5f       	subi	r28, 0xFF	; 255
    1532:	ca 30       	cpi	r28, 0x0A	; 10
    1534:	b0 f3       	brcs	.-20     	; 0x1522 <prvInitialiseTaskLists+0x6>
    1536:	80 ed       	ldi	r24, 0xD0	; 208
    1538:	90 e1       	ldi	r25, 0x10	; 16
    153a:	25 da       	rcall	.-2998   	; 0x986 <vListInitialise>
    153c:	85 ec       	ldi	r24, 0xC5	; 197
    153e:	90 e1       	ldi	r25, 0x10	; 16
    1540:	22 da       	rcall	.-3004   	; 0x986 <vListInitialise>
    1542:	86 eb       	ldi	r24, 0xB6	; 182
    1544:	90 e1       	ldi	r25, 0x10	; 16
    1546:	1f da       	rcall	.-3010   	; 0x986 <vListInitialise>
    1548:	8b ea       	ldi	r24, 0xAB	; 171
    154a:	90 e1       	ldi	r25, 0x10	; 16
    154c:	1c da       	rcall	.-3016   	; 0x986 <vListInitialise>
    154e:	8f e9       	ldi	r24, 0x9F	; 159
    1550:	90 e1       	ldi	r25, 0x10	; 16
    1552:	19 da       	rcall	.-3022   	; 0x986 <vListInitialise>
    1554:	80 ed       	ldi	r24, 0xD0	; 208
    1556:	90 e1       	ldi	r25, 0x10	; 16
    1558:	90 93 c4 10 	sts	0x10C4, r25	; 0x8010c4 <pxDelayedTaskList+0x1>
    155c:	80 93 c3 10 	sts	0x10C3, r24	; 0x8010c3 <pxDelayedTaskList>
    1560:	85 ec       	ldi	r24, 0xC5	; 197
    1562:	90 e1       	ldi	r25, 0x10	; 16
    1564:	90 93 c2 10 	sts	0x10C2, r25	; 0x8010c2 <pxOverflowDelayedTaskList+0x1>
    1568:	80 93 c1 10 	sts	0x10C1, r24	; 0x8010c1 <pxOverflowDelayedTaskList>
    156c:	cf 91       	pop	r28
    156e:	08 95       	ret

00001570 <prvAddNewTaskToReadyList>:
    1570:	cf 93       	push	r28
    1572:	df 93       	push	r29
    1574:	ec 01       	movw	r28, r24
    1576:	0f b6       	in	r0, 0x3f	; 63
    1578:	f8 94       	cli
    157a:	0f 92       	push	r0
    157c:	80 91 9e 10 	lds	r24, 0x109E	; 0x80109e <uxCurrentNumberOfTasks>
    1580:	8f 5f       	subi	r24, 0xFF	; 255
    1582:	80 93 9e 10 	sts	0x109E, r24	; 0x80109e <uxCurrentNumberOfTasks>
    1586:	80 91 49 11 	lds	r24, 0x1149	; 0x801149 <pxCurrentTCB>
    158a:	90 91 4a 11 	lds	r25, 0x114A	; 0x80114a <pxCurrentTCB+0x1>
    158e:	89 2b       	or	r24, r25
    1590:	51 f4       	brne	.+20     	; 0x15a6 <prvAddNewTaskToReadyList+0x36>
    1592:	d0 93 4a 11 	sts	0x114A, r29	; 0x80114a <pxCurrentTCB+0x1>
    1596:	c0 93 49 11 	sts	0x1149, r28	; 0x801149 <pxCurrentTCB>
    159a:	80 91 9e 10 	lds	r24, 0x109E	; 0x80109e <uxCurrentNumberOfTasks>
    159e:	81 30       	cpi	r24, 0x01	; 1
    15a0:	91 f4       	brne	.+36     	; 0x15c6 <prvAddNewTaskToReadyList+0x56>
    15a2:	bc df       	rcall	.-136    	; 0x151c <prvInitialiseTaskLists>
    15a4:	10 c0       	rjmp	.+32     	; 0x15c6 <prvAddNewTaskToReadyList+0x56>
    15a6:	80 91 98 10 	lds	r24, 0x1098	; 0x801098 <xSchedulerRunning>
    15aa:	81 11       	cpse	r24, r1
    15ac:	0c c0       	rjmp	.+24     	; 0x15c6 <prvAddNewTaskToReadyList+0x56>
    15ae:	e0 91 49 11 	lds	r30, 0x1149	; 0x801149 <pxCurrentTCB>
    15b2:	f0 91 4a 11 	lds	r31, 0x114A	; 0x80114a <pxCurrentTCB+0x1>
    15b6:	92 8d       	ldd	r25, Z+26	; 0x1a
    15b8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    15ba:	89 17       	cp	r24, r25
    15bc:	20 f0       	brcs	.+8      	; 0x15c6 <prvAddNewTaskToReadyList+0x56>
    15be:	d0 93 4a 11 	sts	0x114A, r29	; 0x80114a <pxCurrentTCB+0x1>
    15c2:	c0 93 49 11 	sts	0x1149, r28	; 0x801149 <pxCurrentTCB>
    15c6:	80 91 91 10 	lds	r24, 0x1091	; 0x801091 <uxTaskNumber>
    15ca:	8f 5f       	subi	r24, 0xFF	; 255
    15cc:	80 93 91 10 	sts	0x1091, r24	; 0x801091 <uxTaskNumber>
    15d0:	ea 8d       	ldd	r30, Y+26	; 0x1a
    15d2:	80 91 99 10 	lds	r24, 0x1099	; 0x801099 <uxTopReadyPriority>
    15d6:	8e 17       	cp	r24, r30
    15d8:	10 f4       	brcc	.+4      	; 0x15de <prvAddNewTaskToReadyList+0x6e>
    15da:	e0 93 99 10 	sts	0x1099, r30	; 0x801099 <uxTopReadyPriority>
    15de:	8b e0       	ldi	r24, 0x0B	; 11
    15e0:	8e 9f       	mul	r24, r30
    15e2:	f0 01       	movw	r30, r0
    15e4:	11 24       	eor	r1, r1
    15e6:	e5 52       	subi	r30, 0x25	; 37
    15e8:	ff 4e       	sbci	r31, 0xEF	; 239
    15ea:	01 80       	ldd	r0, Z+1	; 0x01
    15ec:	f2 81       	ldd	r31, Z+2	; 0x02
    15ee:	e0 2d       	mov	r30, r0
    15f0:	ff 83       	std	Y+7, r31	; 0x07
    15f2:	ee 83       	std	Y+6, r30	; 0x06
    15f4:	26 81       	ldd	r18, Z+6	; 0x06
    15f6:	37 81       	ldd	r19, Z+7	; 0x07
    15f8:	39 87       	std	Y+9, r19	; 0x09
    15fa:	28 87       	std	Y+8, r18	; 0x08
    15fc:	a6 81       	ldd	r26, Z+6	; 0x06
    15fe:	b7 81       	ldd	r27, Z+7	; 0x07
    1600:	9e 01       	movw	r18, r28
    1602:	2e 5f       	subi	r18, 0xFE	; 254
    1604:	3f 4f       	sbci	r19, 0xFF	; 255
    1606:	15 96       	adiw	r26, 0x05	; 5
    1608:	3c 93       	st	X, r19
    160a:	2e 93       	st	-X, r18
    160c:	14 97       	sbiw	r26, 0x04	; 4
    160e:	37 83       	std	Z+7, r19	; 0x07
    1610:	26 83       	std	Z+6, r18	; 0x06
    1612:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1614:	8e 9f       	mul	r24, r30
    1616:	f0 01       	movw	r30, r0
    1618:	11 24       	eor	r1, r1
    161a:	e5 52       	subi	r30, 0x25	; 37
    161c:	ff 4e       	sbci	r31, 0xEF	; 239
    161e:	fd 87       	std	Y+13, r31	; 0x0d
    1620:	ec 87       	std	Y+12, r30	; 0x0c
    1622:	80 81       	ld	r24, Z
    1624:	8f 5f       	subi	r24, 0xFF	; 255
    1626:	80 83       	st	Z, r24
    1628:	0f 90       	pop	r0
    162a:	0f be       	out	0x3f, r0	; 63
    162c:	80 91 98 10 	lds	r24, 0x1098	; 0x801098 <xSchedulerRunning>
    1630:	88 23       	and	r24, r24
    1632:	49 f0       	breq	.+18     	; 0x1646 <prvAddNewTaskToReadyList+0xd6>
    1634:	e0 91 49 11 	lds	r30, 0x1149	; 0x801149 <pxCurrentTCB>
    1638:	f0 91 4a 11 	lds	r31, 0x114A	; 0x80114a <pxCurrentTCB+0x1>
    163c:	92 8d       	ldd	r25, Z+26	; 0x1a
    163e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1640:	98 17       	cp	r25, r24
    1642:	08 f4       	brcc	.+2      	; 0x1646 <prvAddNewTaskToReadyList+0xd6>
    1644:	6e da       	rcall	.-2852   	; 0xb22 <vPortYield>
    1646:	df 91       	pop	r29
    1648:	cf 91       	pop	r28
    164a:	08 95       	ret

0000164c <prvCheckTasksWaitingTermination>:
    164c:	cf 93       	push	r28
    164e:	df 93       	push	r29
    1650:	1a c0       	rjmp	.+52     	; 0x1686 <prvCheckTasksWaitingTermination+0x3a>
    1652:	0f b6       	in	r0, 0x3f	; 63
    1654:	f8 94       	cli
    1656:	0f 92       	push	r0
    1658:	e0 91 b2 10 	lds	r30, 0x10B2	; 0x8010b2 <xTasksWaitingTermination+0x7>
    165c:	f0 91 b3 10 	lds	r31, 0x10B3	; 0x8010b3 <xTasksWaitingTermination+0x8>
    1660:	c0 85       	ldd	r28, Z+8	; 0x08
    1662:	d1 85       	ldd	r29, Z+9	; 0x09
    1664:	ce 01       	movw	r24, r28
    1666:	02 96       	adiw	r24, 0x02	; 2
    1668:	e0 d9       	rcall	.-3136   	; 0xa2a <uxListRemove>
    166a:	80 91 9e 10 	lds	r24, 0x109E	; 0x80109e <uxCurrentNumberOfTasks>
    166e:	81 50       	subi	r24, 0x01	; 1
    1670:	80 93 9e 10 	sts	0x109E, r24	; 0x80109e <uxCurrentNumberOfTasks>
    1674:	80 91 aa 10 	lds	r24, 0x10AA	; 0x8010aa <uxDeletedTasksWaitingCleanUp>
    1678:	81 50       	subi	r24, 0x01	; 1
    167a:	80 93 aa 10 	sts	0x10AA, r24	; 0x8010aa <uxDeletedTasksWaitingCleanUp>
    167e:	0f 90       	pop	r0
    1680:	0f be       	out	0x3f, r0	; 63
    1682:	ce 01       	movw	r24, r28
    1684:	c3 de       	rcall	.-634    	; 0x140c <prvDeleteTCB>
    1686:	80 91 aa 10 	lds	r24, 0x10AA	; 0x8010aa <uxDeletedTasksWaitingCleanUp>
    168a:	81 11       	cpse	r24, r1
    168c:	e2 cf       	rjmp	.-60     	; 0x1652 <prvCheckTasksWaitingTermination+0x6>
    168e:	df 91       	pop	r29
    1690:	cf 91       	pop	r28
    1692:	08 95       	ret

00001694 <prvAddCurrentTaskToDelayedList>:
    1694:	8f 92       	push	r8
    1696:	9f 92       	push	r9
    1698:	af 92       	push	r10
    169a:	bf 92       	push	r11
    169c:	cf 92       	push	r12
    169e:	df 92       	push	r13
    16a0:	ef 92       	push	r14
    16a2:	ff 92       	push	r15
    16a4:	cf 93       	push	r28
    16a6:	df 93       	push	r29
    16a8:	6b 01       	movw	r12, r22
    16aa:	7c 01       	movw	r14, r24
    16ac:	c4 2f       	mov	r28, r20
    16ae:	80 90 9a 10 	lds	r8, 0x109A	; 0x80109a <xTickCount>
    16b2:	90 90 9b 10 	lds	r9, 0x109B	; 0x80109b <xTickCount+0x1>
    16b6:	a0 90 9c 10 	lds	r10, 0x109C	; 0x80109c <xTickCount+0x2>
    16ba:	b0 90 9d 10 	lds	r11, 0x109D	; 0x80109d <xTickCount+0x3>
    16be:	80 91 49 11 	lds	r24, 0x1149	; 0x801149 <pxCurrentTCB>
    16c2:	90 91 4a 11 	lds	r25, 0x114A	; 0x80114a <pxCurrentTCB+0x1>
    16c6:	02 96       	adiw	r24, 0x02	; 2
    16c8:	b0 d9       	rcall	.-3232   	; 0xa2a <uxListRemove>
    16ca:	8f ef       	ldi	r24, 0xFF	; 255
    16cc:	c8 16       	cp	r12, r24
    16ce:	d8 06       	cpc	r13, r24
    16d0:	e8 06       	cpc	r14, r24
    16d2:	f8 06       	cpc	r15, r24
    16d4:	b1 f5       	brne	.+108    	; 0x1742 <prvAddCurrentTaskToDelayedList+0xae>
    16d6:	cc 23       	and	r28, r28
    16d8:	a1 f1       	breq	.+104    	; 0x1742 <prvAddCurrentTaskToDelayedList+0xae>
    16da:	ef e9       	ldi	r30, 0x9F	; 159
    16dc:	f0 e1       	ldi	r31, 0x10	; 16
    16de:	a1 81       	ldd	r26, Z+1	; 0x01
    16e0:	b2 81       	ldd	r27, Z+2	; 0x02
    16e2:	c0 91 49 11 	lds	r28, 0x1149	; 0x801149 <pxCurrentTCB>
    16e6:	d0 91 4a 11 	lds	r29, 0x114A	; 0x80114a <pxCurrentTCB+0x1>
    16ea:	bf 83       	std	Y+7, r27	; 0x07
    16ec:	ae 83       	std	Y+6, r26	; 0x06
    16ee:	c0 91 49 11 	lds	r28, 0x1149	; 0x801149 <pxCurrentTCB>
    16f2:	d0 91 4a 11 	lds	r29, 0x114A	; 0x80114a <pxCurrentTCB+0x1>
    16f6:	16 96       	adiw	r26, 0x06	; 6
    16f8:	8d 91       	ld	r24, X+
    16fa:	9c 91       	ld	r25, X
    16fc:	17 97       	sbiw	r26, 0x07	; 7
    16fe:	99 87       	std	Y+9, r25	; 0x09
    1700:	88 87       	std	Y+8, r24	; 0x08
    1702:	16 96       	adiw	r26, 0x06	; 6
    1704:	cd 91       	ld	r28, X+
    1706:	dc 91       	ld	r29, X
    1708:	17 97       	sbiw	r26, 0x07	; 7
    170a:	80 91 49 11 	lds	r24, 0x1149	; 0x801149 <pxCurrentTCB>
    170e:	90 91 4a 11 	lds	r25, 0x114A	; 0x80114a <pxCurrentTCB+0x1>
    1712:	02 96       	adiw	r24, 0x02	; 2
    1714:	9d 83       	std	Y+5, r25	; 0x05
    1716:	8c 83       	std	Y+4, r24	; 0x04
    1718:	80 91 49 11 	lds	r24, 0x1149	; 0x801149 <pxCurrentTCB>
    171c:	90 91 4a 11 	lds	r25, 0x114A	; 0x80114a <pxCurrentTCB+0x1>
    1720:	02 96       	adiw	r24, 0x02	; 2
    1722:	17 96       	adiw	r26, 0x07	; 7
    1724:	9c 93       	st	X, r25
    1726:	8e 93       	st	-X, r24
    1728:	16 97       	sbiw	r26, 0x06	; 6
    172a:	a0 91 49 11 	lds	r26, 0x1149	; 0x801149 <pxCurrentTCB>
    172e:	b0 91 4a 11 	lds	r27, 0x114A	; 0x80114a <pxCurrentTCB+0x1>
    1732:	1d 96       	adiw	r26, 0x0d	; 13
    1734:	fc 93       	st	X, r31
    1736:	ee 93       	st	-X, r30
    1738:	1c 97       	sbiw	r26, 0x0c	; 12
    173a:	80 81       	ld	r24, Z
    173c:	8f 5f       	subi	r24, 0xFF	; 255
    173e:	80 83       	st	Z, r24
    1740:	3d c0       	rjmp	.+122    	; 0x17bc <prvAddCurrentTaskToDelayedList+0x128>
    1742:	c8 0c       	add	r12, r8
    1744:	d9 1c       	adc	r13, r9
    1746:	ea 1c       	adc	r14, r10
    1748:	fb 1c       	adc	r15, r11
    174a:	e0 91 49 11 	lds	r30, 0x1149	; 0x801149 <pxCurrentTCB>
    174e:	f0 91 4a 11 	lds	r31, 0x114A	; 0x80114a <pxCurrentTCB+0x1>
    1752:	c2 82       	std	Z+2, r12	; 0x02
    1754:	d3 82       	std	Z+3, r13	; 0x03
    1756:	e4 82       	std	Z+4, r14	; 0x04
    1758:	f5 82       	std	Z+5, r15	; 0x05
    175a:	c8 14       	cp	r12, r8
    175c:	d9 04       	cpc	r13, r9
    175e:	ea 04       	cpc	r14, r10
    1760:	fb 04       	cpc	r15, r11
    1762:	60 f4       	brcc	.+24     	; 0x177c <prvAddCurrentTaskToDelayedList+0xe8>
    1764:	60 91 49 11 	lds	r22, 0x1149	; 0x801149 <pxCurrentTCB>
    1768:	70 91 4a 11 	lds	r23, 0x114A	; 0x80114a <pxCurrentTCB+0x1>
    176c:	80 91 c1 10 	lds	r24, 0x10C1	; 0x8010c1 <pxOverflowDelayedTaskList>
    1770:	90 91 c2 10 	lds	r25, 0x10C2	; 0x8010c2 <pxOverflowDelayedTaskList+0x1>
    1774:	6e 5f       	subi	r22, 0xFE	; 254
    1776:	7f 4f       	sbci	r23, 0xFF	; 255
    1778:	1b d9       	rcall	.-3530   	; 0x9b0 <vListInsert>
    177a:	20 c0       	rjmp	.+64     	; 0x17bc <prvAddCurrentTaskToDelayedList+0x128>
    177c:	60 91 49 11 	lds	r22, 0x1149	; 0x801149 <pxCurrentTCB>
    1780:	70 91 4a 11 	lds	r23, 0x114A	; 0x80114a <pxCurrentTCB+0x1>
    1784:	80 91 c3 10 	lds	r24, 0x10C3	; 0x8010c3 <pxDelayedTaskList>
    1788:	90 91 c4 10 	lds	r25, 0x10C4	; 0x8010c4 <pxDelayedTaskList+0x1>
    178c:	6e 5f       	subi	r22, 0xFE	; 254
    178e:	7f 4f       	sbci	r23, 0xFF	; 255
    1790:	0f d9       	rcall	.-3554   	; 0x9b0 <vListInsert>
    1792:	80 91 8d 10 	lds	r24, 0x108D	; 0x80108d <xNextTaskUnblockTime>
    1796:	90 91 8e 10 	lds	r25, 0x108E	; 0x80108e <xNextTaskUnblockTime+0x1>
    179a:	a0 91 8f 10 	lds	r26, 0x108F	; 0x80108f <xNextTaskUnblockTime+0x2>
    179e:	b0 91 90 10 	lds	r27, 0x1090	; 0x801090 <xNextTaskUnblockTime+0x3>
    17a2:	c8 16       	cp	r12, r24
    17a4:	d9 06       	cpc	r13, r25
    17a6:	ea 06       	cpc	r14, r26
    17a8:	fb 06       	cpc	r15, r27
    17aa:	40 f4       	brcc	.+16     	; 0x17bc <prvAddCurrentTaskToDelayedList+0x128>
    17ac:	c0 92 8d 10 	sts	0x108D, r12	; 0x80108d <xNextTaskUnblockTime>
    17b0:	d0 92 8e 10 	sts	0x108E, r13	; 0x80108e <xNextTaskUnblockTime+0x1>
    17b4:	e0 92 8f 10 	sts	0x108F, r14	; 0x80108f <xNextTaskUnblockTime+0x2>
    17b8:	f0 92 90 10 	sts	0x1090, r15	; 0x801090 <xNextTaskUnblockTime+0x3>
    17bc:	df 91       	pop	r29
    17be:	cf 91       	pop	r28
    17c0:	ff 90       	pop	r15
    17c2:	ef 90       	pop	r14
    17c4:	df 90       	pop	r13
    17c6:	cf 90       	pop	r12
    17c8:	bf 90       	pop	r11
    17ca:	af 90       	pop	r10
    17cc:	9f 90       	pop	r9
    17ce:	8f 90       	pop	r8
    17d0:	08 95       	ret

000017d2 <xTaskCreate>:
    17d2:	2f 92       	push	r2
    17d4:	3f 92       	push	r3
    17d6:	4f 92       	push	r4
    17d8:	5f 92       	push	r5
    17da:	6f 92       	push	r6
    17dc:	7f 92       	push	r7
    17de:	8f 92       	push	r8
    17e0:	9f 92       	push	r9
    17e2:	af 92       	push	r10
    17e4:	bf 92       	push	r11
    17e6:	cf 92       	push	r12
    17e8:	df 92       	push	r13
    17ea:	ef 92       	push	r14
    17ec:	ff 92       	push	r15
    17ee:	0f 93       	push	r16
    17f0:	cf 93       	push	r28
    17f2:	df 93       	push	r29
    17f4:	3c 01       	movw	r6, r24
    17f6:	1b 01       	movw	r2, r22
    17f8:	4a 01       	movw	r8, r20
    17fa:	29 01       	movw	r4, r18
    17fc:	ca 01       	movw	r24, r20
    17fe:	0e 94 de 03 	call	0x7bc	; 0x7bc <pvPortMalloc>
    1802:	6c 01       	movw	r12, r24
    1804:	89 2b       	or	r24, r25
    1806:	69 f0       	breq	.+26     	; 0x1822 <xTaskCreate+0x50>
    1808:	86 e3       	ldi	r24, 0x36	; 54
    180a:	90 e0       	ldi	r25, 0x00	; 0
    180c:	0e 94 de 03 	call	0x7bc	; 0x7bc <pvPortMalloc>
    1810:	ec 01       	movw	r28, r24
    1812:	89 2b       	or	r24, r25
    1814:	19 f0       	breq	.+6      	; 0x181c <xTaskCreate+0x4a>
    1816:	dc 8e       	std	Y+28, r13	; 0x1c
    1818:	cb 8e       	std	Y+27, r12	; 0x1b
    181a:	05 c0       	rjmp	.+10     	; 0x1826 <xTaskCreate+0x54>
    181c:	c6 01       	movw	r24, r12
    181e:	77 d8       	rcall	.-3858   	; 0x90e <vPortFree>
    1820:	02 c0       	rjmp	.+4      	; 0x1826 <xTaskCreate+0x54>
    1822:	c0 e0       	ldi	r28, 0x00	; 0
    1824:	d0 e0       	ldi	r29, 0x00	; 0
    1826:	20 97       	sbiw	r28, 0x00	; 0
    1828:	61 f0       	breq	.+24     	; 0x1842 <xTaskCreate+0x70>
    182a:	a1 2c       	mov	r10, r1
    182c:	b1 2c       	mov	r11, r1
    182e:	6e 01       	movw	r12, r28
    1830:	92 01       	movw	r18, r4
    1832:	a4 01       	movw	r20, r8
    1834:	b1 01       	movw	r22, r2
    1836:	c3 01       	movw	r24, r6
    1838:	f4 dd       	rcall	.-1048   	; 0x1422 <prvInitialiseNewTask>
    183a:	ce 01       	movw	r24, r28
    183c:	99 de       	rcall	.-718    	; 0x1570 <prvAddNewTaskToReadyList>
    183e:	81 e0       	ldi	r24, 0x01	; 1
    1840:	01 c0       	rjmp	.+2      	; 0x1844 <xTaskCreate+0x72>
    1842:	8f ef       	ldi	r24, 0xFF	; 255
    1844:	df 91       	pop	r29
    1846:	cf 91       	pop	r28
    1848:	0f 91       	pop	r16
    184a:	ff 90       	pop	r15
    184c:	ef 90       	pop	r14
    184e:	df 90       	pop	r13
    1850:	cf 90       	pop	r12
    1852:	bf 90       	pop	r11
    1854:	af 90       	pop	r10
    1856:	9f 90       	pop	r9
    1858:	8f 90       	pop	r8
    185a:	7f 90       	pop	r7
    185c:	6f 90       	pop	r6
    185e:	5f 90       	pop	r5
    1860:	4f 90       	pop	r4
    1862:	3f 90       	pop	r3
    1864:	2f 90       	pop	r2
    1866:	08 95       	ret

00001868 <vTaskStartScheduler>:
    1868:	ef 92       	push	r14
    186a:	ff 92       	push	r15
    186c:	0f 93       	push	r16
    186e:	0f 2e       	mov	r0, r31
    1870:	fb e8       	ldi	r31, 0x8B	; 139
    1872:	ef 2e       	mov	r14, r31
    1874:	f0 e1       	ldi	r31, 0x10	; 16
    1876:	ff 2e       	mov	r15, r31
    1878:	f0 2d       	mov	r31, r0
    187a:	00 e0       	ldi	r16, 0x00	; 0
    187c:	20 e0       	ldi	r18, 0x00	; 0
    187e:	30 e0       	ldi	r19, 0x00	; 0
    1880:	40 ec       	ldi	r20, 0xC0	; 192
    1882:	50 e0       	ldi	r21, 0x00	; 0
    1884:	66 e9       	ldi	r22, 0x96	; 150
    1886:	72 e0       	ldi	r23, 0x02	; 2
    1888:	8c e7       	ldi	r24, 0x7C	; 124
    188a:	90 e0       	ldi	r25, 0x00	; 0
    188c:	a2 df       	rcall	.-188    	; 0x17d2 <xTaskCreate>
    188e:	81 30       	cpi	r24, 0x01	; 1
    1890:	09 f4       	brne	.+2      	; 0x1894 <vTaskStartScheduler+0x2c>
    1892:	ef d6       	rcall	.+3550   	; 0x2672 <xTimerCreateTimerTask>
    1894:	81 30       	cpi	r24, 0x01	; 1
    1896:	f9 f4       	brne	.+62     	; 0x18d6 <vTaskStartScheduler+0x6e>
    1898:	f8 94       	cli
    189a:	8f ef       	ldi	r24, 0xFF	; 255
    189c:	9f ef       	ldi	r25, 0xFF	; 255
    189e:	dc 01       	movw	r26, r24
    18a0:	80 93 8d 10 	sts	0x108D, r24	; 0x80108d <xNextTaskUnblockTime>
    18a4:	90 93 8e 10 	sts	0x108E, r25	; 0x80108e <xNextTaskUnblockTime+0x1>
    18a8:	a0 93 8f 10 	sts	0x108F, r26	; 0x80108f <xNextTaskUnblockTime+0x2>
    18ac:	b0 93 90 10 	sts	0x1090, r27	; 0x801090 <xNextTaskUnblockTime+0x3>
    18b0:	81 e0       	ldi	r24, 0x01	; 1
    18b2:	80 93 98 10 	sts	0x1098, r24	; 0x801098 <xSchedulerRunning>
    18b6:	10 92 9a 10 	sts	0x109A, r1	; 0x80109a <xTickCount>
    18ba:	10 92 9b 10 	sts	0x109B, r1	; 0x80109b <xTickCount+0x1>
    18be:	10 92 9c 10 	sts	0x109C, r1	; 0x80109c <xTickCount+0x2>
    18c2:	10 92 9d 10 	sts	0x109D, r1	; 0x80109d <xTickCount+0x3>
    18c6:	e0 91 49 11 	lds	r30, 0x1149	; 0x801149 <pxCurrentTCB>
    18ca:	f0 91 4a 11 	lds	r31, 0x114A	; 0x80114a <pxCurrentTCB+0x1>
    18ce:	87 a5       	ldd	r24, Z+47	; 0x2f
    18d0:	0e 94 ba 02 	call	0x574	; 0x574 <task_switch_in>
    18d4:	f4 d8       	rcall	.-3608   	; 0xabe <xPortStartScheduler>
    18d6:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <uxTopUsedPriority>
    18da:	0f 91       	pop	r16
    18dc:	ff 90       	pop	r15
    18de:	ef 90       	pop	r14
    18e0:	08 95       	ret

000018e2 <vTaskSuspendAll>:
    18e2:	80 91 8a 10 	lds	r24, 0x108A	; 0x80108a <uxSchedulerSuspended>
    18e6:	8f 5f       	subi	r24, 0xFF	; 255
    18e8:	80 93 8a 10 	sts	0x108A, r24	; 0x80108a <uxSchedulerSuspended>
    18ec:	08 95       	ret

000018ee <xTaskGetTickCount>:
    18ee:	0f b6       	in	r0, 0x3f	; 63
    18f0:	f8 94       	cli
    18f2:	0f 92       	push	r0
    18f4:	60 91 9a 10 	lds	r22, 0x109A	; 0x80109a <xTickCount>
    18f8:	70 91 9b 10 	lds	r23, 0x109B	; 0x80109b <xTickCount+0x1>
    18fc:	80 91 9c 10 	lds	r24, 0x109C	; 0x80109c <xTickCount+0x2>
    1900:	90 91 9d 10 	lds	r25, 0x109D	; 0x80109d <xTickCount+0x3>
    1904:	0f 90       	pop	r0
    1906:	0f be       	out	0x3f, r0	; 63
    1908:	08 95       	ret

0000190a <xTaskIncrementTick>:
    190a:	cf 92       	push	r12
    190c:	df 92       	push	r13
    190e:	ef 92       	push	r14
    1910:	ff 92       	push	r15
    1912:	cf 93       	push	r28
    1914:	df 93       	push	r29
    1916:	80 91 8a 10 	lds	r24, 0x108A	; 0x80108a <uxSchedulerSuspended>
    191a:	81 11       	cpse	r24, r1
    191c:	05 c1       	rjmp	.+522    	; 0x1b28 <xTaskIncrementTick+0x21e>
    191e:	c0 90 9a 10 	lds	r12, 0x109A	; 0x80109a <xTickCount>
    1922:	d0 90 9b 10 	lds	r13, 0x109B	; 0x80109b <xTickCount+0x1>
    1926:	e0 90 9c 10 	lds	r14, 0x109C	; 0x80109c <xTickCount+0x2>
    192a:	f0 90 9d 10 	lds	r15, 0x109D	; 0x80109d <xTickCount+0x3>
    192e:	8f ef       	ldi	r24, 0xFF	; 255
    1930:	c8 1a       	sub	r12, r24
    1932:	d8 0a       	sbc	r13, r24
    1934:	e8 0a       	sbc	r14, r24
    1936:	f8 0a       	sbc	r15, r24
    1938:	c0 92 9a 10 	sts	0x109A, r12	; 0x80109a <xTickCount>
    193c:	d0 92 9b 10 	sts	0x109B, r13	; 0x80109b <xTickCount+0x1>
    1940:	e0 92 9c 10 	sts	0x109C, r14	; 0x80109c <xTickCount+0x2>
    1944:	f0 92 9d 10 	sts	0x109D, r15	; 0x80109d <xTickCount+0x3>
    1948:	c1 14       	cp	r12, r1
    194a:	d1 04       	cpc	r13, r1
    194c:	e1 04       	cpc	r14, r1
    194e:	f1 04       	cpc	r15, r1
    1950:	b1 f4       	brne	.+44     	; 0x197e <xTaskIncrementTick+0x74>
    1952:	80 91 c3 10 	lds	r24, 0x10C3	; 0x8010c3 <pxDelayedTaskList>
    1956:	90 91 c4 10 	lds	r25, 0x10C4	; 0x8010c4 <pxDelayedTaskList+0x1>
    195a:	20 91 c1 10 	lds	r18, 0x10C1	; 0x8010c1 <pxOverflowDelayedTaskList>
    195e:	30 91 c2 10 	lds	r19, 0x10C2	; 0x8010c2 <pxOverflowDelayedTaskList+0x1>
    1962:	30 93 c4 10 	sts	0x10C4, r19	; 0x8010c4 <pxDelayedTaskList+0x1>
    1966:	20 93 c3 10 	sts	0x10C3, r18	; 0x8010c3 <pxDelayedTaskList>
    196a:	90 93 c2 10 	sts	0x10C2, r25	; 0x8010c2 <pxOverflowDelayedTaskList+0x1>
    196e:	80 93 c1 10 	sts	0x10C1, r24	; 0x8010c1 <pxOverflowDelayedTaskList>
    1972:	80 91 92 10 	lds	r24, 0x1092	; 0x801092 <xNumOfOverflows>
    1976:	8f 5f       	subi	r24, 0xFF	; 255
    1978:	80 93 92 10 	sts	0x1092, r24	; 0x801092 <xNumOfOverflows>
    197c:	20 dd       	rcall	.-1472   	; 0x13be <prvResetNextTaskUnblockTime>
    197e:	80 91 8d 10 	lds	r24, 0x108D	; 0x80108d <xNextTaskUnblockTime>
    1982:	90 91 8e 10 	lds	r25, 0x108E	; 0x80108e <xNextTaskUnblockTime+0x1>
    1986:	a0 91 8f 10 	lds	r26, 0x108F	; 0x80108f <xNextTaskUnblockTime+0x2>
    198a:	b0 91 90 10 	lds	r27, 0x1090	; 0x801090 <xNextTaskUnblockTime+0x3>
    198e:	c8 16       	cp	r12, r24
    1990:	d9 06       	cpc	r13, r25
    1992:	ea 06       	cpc	r14, r26
    1994:	fb 06       	cpc	r15, r27
    1996:	20 f4       	brcc	.+8      	; 0x19a0 <xTaskIncrementTick+0x96>
    1998:	80 e0       	ldi	r24, 0x00	; 0
    199a:	b2 c0       	rjmp	.+356    	; 0x1b00 <xTaskIncrementTick+0x1f6>
    199c:	81 e0       	ldi	r24, 0x01	; 1
    199e:	01 c0       	rjmp	.+2      	; 0x19a2 <xTaskIncrementTick+0x98>
    19a0:	80 e0       	ldi	r24, 0x00	; 0
    19a2:	e0 91 c3 10 	lds	r30, 0x10C3	; 0x8010c3 <pxDelayedTaskList>
    19a6:	f0 91 c4 10 	lds	r31, 0x10C4	; 0x8010c4 <pxDelayedTaskList+0x1>
    19aa:	90 81       	ld	r25, Z
    19ac:	91 11       	cpse	r25, r1
    19ae:	0c c0       	rjmp	.+24     	; 0x19c8 <xTaskIncrementTick+0xbe>
    19b0:	4f ef       	ldi	r20, 0xFF	; 255
    19b2:	5f ef       	ldi	r21, 0xFF	; 255
    19b4:	ba 01       	movw	r22, r20
    19b6:	40 93 8d 10 	sts	0x108D, r20	; 0x80108d <xNextTaskUnblockTime>
    19ba:	50 93 8e 10 	sts	0x108E, r21	; 0x80108e <xNextTaskUnblockTime+0x1>
    19be:	60 93 8f 10 	sts	0x108F, r22	; 0x80108f <xNextTaskUnblockTime+0x2>
    19c2:	70 93 90 10 	sts	0x1090, r23	; 0x801090 <xNextTaskUnblockTime+0x3>
    19c6:	9c c0       	rjmp	.+312    	; 0x1b00 <xTaskIncrementTick+0x1f6>
    19c8:	e0 91 c3 10 	lds	r30, 0x10C3	; 0x8010c3 <pxDelayedTaskList>
    19cc:	f0 91 c4 10 	lds	r31, 0x10C4	; 0x8010c4 <pxDelayedTaskList+0x1>
    19d0:	07 80       	ldd	r0, Z+7	; 0x07
    19d2:	f0 85       	ldd	r31, Z+8	; 0x08
    19d4:	e0 2d       	mov	r30, r0
    19d6:	00 84       	ldd	r0, Z+8	; 0x08
    19d8:	f1 85       	ldd	r31, Z+9	; 0x09
    19da:	e0 2d       	mov	r30, r0
    19dc:	42 81       	ldd	r20, Z+2	; 0x02
    19de:	53 81       	ldd	r21, Z+3	; 0x03
    19e0:	64 81       	ldd	r22, Z+4	; 0x04
    19e2:	75 81       	ldd	r23, Z+5	; 0x05
    19e4:	c4 16       	cp	r12, r20
    19e6:	d5 06       	cpc	r13, r21
    19e8:	e6 06       	cpc	r14, r22
    19ea:	f7 06       	cpc	r15, r23
    19ec:	48 f4       	brcc	.+18     	; 0x1a00 <xTaskIncrementTick+0xf6>
    19ee:	40 93 8d 10 	sts	0x108D, r20	; 0x80108d <xNextTaskUnblockTime>
    19f2:	50 93 8e 10 	sts	0x108E, r21	; 0x80108e <xNextTaskUnblockTime+0x1>
    19f6:	60 93 8f 10 	sts	0x108F, r22	; 0x80108f <xNextTaskUnblockTime+0x2>
    19fa:	70 93 90 10 	sts	0x1090, r23	; 0x801090 <xNextTaskUnblockTime+0x3>
    19fe:	80 c0       	rjmp	.+256    	; 0x1b00 <xTaskIncrementTick+0x1f6>
    1a00:	a4 85       	ldd	r26, Z+12	; 0x0c
    1a02:	b5 85       	ldd	r27, Z+13	; 0x0d
    1a04:	c6 81       	ldd	r28, Z+6	; 0x06
    1a06:	d7 81       	ldd	r29, Z+7	; 0x07
    1a08:	20 85       	ldd	r18, Z+8	; 0x08
    1a0a:	31 85       	ldd	r19, Z+9	; 0x09
    1a0c:	3f 83       	std	Y+7, r19	; 0x07
    1a0e:	2e 83       	std	Y+6, r18	; 0x06
    1a10:	c0 85       	ldd	r28, Z+8	; 0x08
    1a12:	d1 85       	ldd	r29, Z+9	; 0x09
    1a14:	26 81       	ldd	r18, Z+6	; 0x06
    1a16:	37 81       	ldd	r19, Z+7	; 0x07
    1a18:	3d 83       	std	Y+5, r19	; 0x05
    1a1a:	2c 83       	std	Y+4, r18	; 0x04
    1a1c:	11 96       	adiw	r26, 0x01	; 1
    1a1e:	4d 91       	ld	r20, X+
    1a20:	5c 91       	ld	r21, X
    1a22:	12 97       	sbiw	r26, 0x02	; 2
    1a24:	9f 01       	movw	r18, r30
    1a26:	2e 5f       	subi	r18, 0xFE	; 254
    1a28:	3f 4f       	sbci	r19, 0xFF	; 255
    1a2a:	42 17       	cp	r20, r18
    1a2c:	53 07       	cpc	r21, r19
    1a2e:	31 f4       	brne	.+12     	; 0x1a3c <xTaskIncrementTick+0x132>
    1a30:	40 85       	ldd	r20, Z+8	; 0x08
    1a32:	51 85       	ldd	r21, Z+9	; 0x09
    1a34:	12 96       	adiw	r26, 0x02	; 2
    1a36:	5c 93       	st	X, r21
    1a38:	4e 93       	st	-X, r20
    1a3a:	11 97       	sbiw	r26, 0x01	; 1
    1a3c:	15 86       	std	Z+13, r1	; 0x0d
    1a3e:	14 86       	std	Z+12, r1	; 0x0c
    1a40:	9c 91       	ld	r25, X
    1a42:	91 50       	subi	r25, 0x01	; 1
    1a44:	9c 93       	st	X, r25
    1a46:	a0 8d       	ldd	r26, Z+24	; 0x18
    1a48:	b1 8d       	ldd	r27, Z+25	; 0x19
    1a4a:	10 97       	sbiw	r26, 0x00	; 0
    1a4c:	09 f1       	breq	.+66     	; 0x1a90 <xTaskIncrementTick+0x186>
    1a4e:	c2 89       	ldd	r28, Z+18	; 0x12
    1a50:	d3 89       	ldd	r29, Z+19	; 0x13
    1a52:	44 89       	ldd	r20, Z+20	; 0x14
    1a54:	55 89       	ldd	r21, Z+21	; 0x15
    1a56:	5f 83       	std	Y+7, r21	; 0x07
    1a58:	4e 83       	std	Y+6, r20	; 0x06
    1a5a:	c4 89       	ldd	r28, Z+20	; 0x14
    1a5c:	d5 89       	ldd	r29, Z+21	; 0x15
    1a5e:	42 89       	ldd	r20, Z+18	; 0x12
    1a60:	53 89       	ldd	r21, Z+19	; 0x13
    1a62:	5d 83       	std	Y+5, r21	; 0x05
    1a64:	4c 83       	std	Y+4, r20	; 0x04
    1a66:	11 96       	adiw	r26, 0x01	; 1
    1a68:	6d 91       	ld	r22, X+
    1a6a:	7c 91       	ld	r23, X
    1a6c:	12 97       	sbiw	r26, 0x02	; 2
    1a6e:	af 01       	movw	r20, r30
    1a70:	42 5f       	subi	r20, 0xF2	; 242
    1a72:	5f 4f       	sbci	r21, 0xFF	; 255
    1a74:	64 17       	cp	r22, r20
    1a76:	75 07       	cpc	r23, r21
    1a78:	31 f4       	brne	.+12     	; 0x1a86 <xTaskIncrementTick+0x17c>
    1a7a:	44 89       	ldd	r20, Z+20	; 0x14
    1a7c:	55 89       	ldd	r21, Z+21	; 0x15
    1a7e:	12 96       	adiw	r26, 0x02	; 2
    1a80:	5c 93       	st	X, r21
    1a82:	4e 93       	st	-X, r20
    1a84:	11 97       	sbiw	r26, 0x01	; 1
    1a86:	11 8e       	std	Z+25, r1	; 0x19
    1a88:	10 8e       	std	Z+24, r1	; 0x18
    1a8a:	9c 91       	ld	r25, X
    1a8c:	91 50       	subi	r25, 0x01	; 1
    1a8e:	9c 93       	st	X, r25
    1a90:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1a92:	90 91 99 10 	lds	r25, 0x1099	; 0x801099 <uxTopReadyPriority>
    1a96:	9a 17       	cp	r25, r26
    1a98:	10 f4       	brcc	.+4      	; 0x1a9e <xTaskIncrementTick+0x194>
    1a9a:	a0 93 99 10 	sts	0x1099, r26	; 0x801099 <uxTopReadyPriority>
    1a9e:	9b e0       	ldi	r25, 0x0B	; 11
    1aa0:	9a 9f       	mul	r25, r26
    1aa2:	d0 01       	movw	r26, r0
    1aa4:	11 24       	eor	r1, r1
    1aa6:	a5 52       	subi	r26, 0x25	; 37
    1aa8:	bf 4e       	sbci	r27, 0xEF	; 239
    1aaa:	11 96       	adiw	r26, 0x01	; 1
    1aac:	0d 90       	ld	r0, X+
    1aae:	bc 91       	ld	r27, X
    1ab0:	a0 2d       	mov	r26, r0
    1ab2:	b7 83       	std	Z+7, r27	; 0x07
    1ab4:	a6 83       	std	Z+6, r26	; 0x06
    1ab6:	16 96       	adiw	r26, 0x06	; 6
    1ab8:	4d 91       	ld	r20, X+
    1aba:	5c 91       	ld	r21, X
    1abc:	17 97       	sbiw	r26, 0x07	; 7
    1abe:	51 87       	std	Z+9, r21	; 0x09
    1ac0:	40 87       	std	Z+8, r20	; 0x08
    1ac2:	16 96       	adiw	r26, 0x06	; 6
    1ac4:	cd 91       	ld	r28, X+
    1ac6:	dc 91       	ld	r29, X
    1ac8:	17 97       	sbiw	r26, 0x07	; 7
    1aca:	3d 83       	std	Y+5, r19	; 0x05
    1acc:	2c 83       	std	Y+4, r18	; 0x04
    1ace:	17 96       	adiw	r26, 0x07	; 7
    1ad0:	3c 93       	st	X, r19
    1ad2:	2e 93       	st	-X, r18
    1ad4:	16 97       	sbiw	r26, 0x06	; 6
    1ad6:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1ad8:	9a 9f       	mul	r25, r26
    1ada:	d0 01       	movw	r26, r0
    1adc:	11 24       	eor	r1, r1
    1ade:	a5 52       	subi	r26, 0x25	; 37
    1ae0:	bf 4e       	sbci	r27, 0xEF	; 239
    1ae2:	b5 87       	std	Z+13, r27	; 0x0d
    1ae4:	a4 87       	std	Z+12, r26	; 0x0c
    1ae6:	9c 91       	ld	r25, X
    1ae8:	9f 5f       	subi	r25, 0xFF	; 255
    1aea:	9c 93       	st	X, r25
    1aec:	22 8d       	ldd	r18, Z+26	; 0x1a
    1aee:	e0 91 49 11 	lds	r30, 0x1149	; 0x801149 <pxCurrentTCB>
    1af2:	f0 91 4a 11 	lds	r31, 0x114A	; 0x80114a <pxCurrentTCB+0x1>
    1af6:	92 8d       	ldd	r25, Z+26	; 0x1a
    1af8:	29 17       	cp	r18, r25
    1afa:	08 f0       	brcs	.+2      	; 0x1afe <xTaskIncrementTick+0x1f4>
    1afc:	4f cf       	rjmp	.-354    	; 0x199c <xTaskIncrementTick+0x92>
    1afe:	51 cf       	rjmp	.-350    	; 0x19a2 <xTaskIncrementTick+0x98>
    1b00:	e0 91 49 11 	lds	r30, 0x1149	; 0x801149 <pxCurrentTCB>
    1b04:	f0 91 4a 11 	lds	r31, 0x114A	; 0x80114a <pxCurrentTCB+0x1>
    1b08:	e2 8d       	ldd	r30, Z+26	; 0x1a
    1b0a:	9b e0       	ldi	r25, 0x0B	; 11
    1b0c:	e9 9f       	mul	r30, r25
    1b0e:	f0 01       	movw	r30, r0
    1b10:	11 24       	eor	r1, r1
    1b12:	e5 52       	subi	r30, 0x25	; 37
    1b14:	ff 4e       	sbci	r31, 0xEF	; 239
    1b16:	90 81       	ld	r25, Z
    1b18:	92 30       	cpi	r25, 0x02	; 2
    1b1a:	08 f0       	brcs	.+2      	; 0x1b1e <xTaskIncrementTick+0x214>
    1b1c:	81 e0       	ldi	r24, 0x01	; 1
    1b1e:	90 91 93 10 	lds	r25, 0x1093	; 0x801093 <xYieldPending>
    1b22:	91 11       	cpse	r25, r1
    1b24:	16 c0       	rjmp	.+44     	; 0x1b52 <xTaskIncrementTick+0x248>
    1b26:	16 c0       	rjmp	.+44     	; 0x1b54 <xTaskIncrementTick+0x24a>
    1b28:	80 91 94 10 	lds	r24, 0x1094	; 0x801094 <xPendedTicks>
    1b2c:	90 91 95 10 	lds	r25, 0x1095	; 0x801095 <xPendedTicks+0x1>
    1b30:	a0 91 96 10 	lds	r26, 0x1096	; 0x801096 <xPendedTicks+0x2>
    1b34:	b0 91 97 10 	lds	r27, 0x1097	; 0x801097 <xPendedTicks+0x3>
    1b38:	01 96       	adiw	r24, 0x01	; 1
    1b3a:	a1 1d       	adc	r26, r1
    1b3c:	b1 1d       	adc	r27, r1
    1b3e:	80 93 94 10 	sts	0x1094, r24	; 0x801094 <xPendedTicks>
    1b42:	90 93 95 10 	sts	0x1095, r25	; 0x801095 <xPendedTicks+0x1>
    1b46:	a0 93 96 10 	sts	0x1096, r26	; 0x801096 <xPendedTicks+0x2>
    1b4a:	b0 93 97 10 	sts	0x1097, r27	; 0x801097 <xPendedTicks+0x3>
    1b4e:	80 e0       	ldi	r24, 0x00	; 0
    1b50:	01 c0       	rjmp	.+2      	; 0x1b54 <xTaskIncrementTick+0x24a>
    1b52:	81 e0       	ldi	r24, 0x01	; 1
    1b54:	df 91       	pop	r29
    1b56:	cf 91       	pop	r28
    1b58:	ff 90       	pop	r15
    1b5a:	ef 90       	pop	r14
    1b5c:	df 90       	pop	r13
    1b5e:	cf 90       	pop	r12
    1b60:	08 95       	ret

00001b62 <xTaskResumeAll>:
    1b62:	cf 92       	push	r12
    1b64:	df 92       	push	r13
    1b66:	ef 92       	push	r14
    1b68:	ff 92       	push	r15
    1b6a:	cf 93       	push	r28
    1b6c:	df 93       	push	r29
    1b6e:	0f b6       	in	r0, 0x3f	; 63
    1b70:	f8 94       	cli
    1b72:	0f 92       	push	r0
    1b74:	80 91 8a 10 	lds	r24, 0x108A	; 0x80108a <uxSchedulerSuspended>
    1b78:	81 50       	subi	r24, 0x01	; 1
    1b7a:	80 93 8a 10 	sts	0x108A, r24	; 0x80108a <uxSchedulerSuspended>
    1b7e:	80 91 8a 10 	lds	r24, 0x108A	; 0x80108a <uxSchedulerSuspended>
    1b82:	81 11       	cpse	r24, r1
    1b84:	be c0       	rjmp	.+380    	; 0x1d02 <xTaskResumeAll+0x1a0>
    1b86:	80 91 9e 10 	lds	r24, 0x109E	; 0x80109e <uxCurrentNumberOfTasks>
    1b8a:	81 11       	cpse	r24, r1
    1b8c:	88 c0       	rjmp	.+272    	; 0x1c9e <xTaskResumeAll+0x13c>
    1b8e:	bc c0       	rjmp	.+376    	; 0x1d08 <xTaskResumeAll+0x1a6>
    1b90:	e0 91 bd 10 	lds	r30, 0x10BD	; 0x8010bd <xPendingReadyList+0x7>
    1b94:	f0 91 be 10 	lds	r31, 0x10BE	; 0x8010be <xPendingReadyList+0x8>
    1b98:	00 84       	ldd	r0, Z+8	; 0x08
    1b9a:	f1 85       	ldd	r31, Z+9	; 0x09
    1b9c:	e0 2d       	mov	r30, r0
    1b9e:	a0 8d       	ldd	r26, Z+24	; 0x18
    1ba0:	b1 8d       	ldd	r27, Z+25	; 0x19
    1ba2:	c2 89       	ldd	r28, Z+18	; 0x12
    1ba4:	d3 89       	ldd	r29, Z+19	; 0x13
    1ba6:	84 89       	ldd	r24, Z+20	; 0x14
    1ba8:	95 89       	ldd	r25, Z+21	; 0x15
    1baa:	9f 83       	std	Y+7, r25	; 0x07
    1bac:	8e 83       	std	Y+6, r24	; 0x06
    1bae:	c4 89       	ldd	r28, Z+20	; 0x14
    1bb0:	d5 89       	ldd	r29, Z+21	; 0x15
    1bb2:	82 89       	ldd	r24, Z+18	; 0x12
    1bb4:	93 89       	ldd	r25, Z+19	; 0x13
    1bb6:	9d 83       	std	Y+5, r25	; 0x05
    1bb8:	8c 83       	std	Y+4, r24	; 0x04
    1bba:	11 96       	adiw	r26, 0x01	; 1
    1bbc:	2d 91       	ld	r18, X+
    1bbe:	3c 91       	ld	r19, X
    1bc0:	12 97       	sbiw	r26, 0x02	; 2
    1bc2:	cf 01       	movw	r24, r30
    1bc4:	0e 96       	adiw	r24, 0x0e	; 14
    1bc6:	28 17       	cp	r18, r24
    1bc8:	39 07       	cpc	r19, r25
    1bca:	31 f4       	brne	.+12     	; 0x1bd8 <xTaskResumeAll+0x76>
    1bcc:	84 89       	ldd	r24, Z+20	; 0x14
    1bce:	95 89       	ldd	r25, Z+21	; 0x15
    1bd0:	12 96       	adiw	r26, 0x02	; 2
    1bd2:	9c 93       	st	X, r25
    1bd4:	8e 93       	st	-X, r24
    1bd6:	11 97       	sbiw	r26, 0x01	; 1
    1bd8:	11 8e       	std	Z+25, r1	; 0x19
    1bda:	10 8e       	std	Z+24, r1	; 0x18
    1bdc:	8c 91       	ld	r24, X
    1bde:	81 50       	subi	r24, 0x01	; 1
    1be0:	8c 93       	st	X, r24
    1be2:	a4 85       	ldd	r26, Z+12	; 0x0c
    1be4:	b5 85       	ldd	r27, Z+13	; 0x0d
    1be6:	c6 81       	ldd	r28, Z+6	; 0x06
    1be8:	d7 81       	ldd	r29, Z+7	; 0x07
    1bea:	80 85       	ldd	r24, Z+8	; 0x08
    1bec:	91 85       	ldd	r25, Z+9	; 0x09
    1bee:	9f 83       	std	Y+7, r25	; 0x07
    1bf0:	8e 83       	std	Y+6, r24	; 0x06
    1bf2:	c0 85       	ldd	r28, Z+8	; 0x08
    1bf4:	d1 85       	ldd	r29, Z+9	; 0x09
    1bf6:	86 81       	ldd	r24, Z+6	; 0x06
    1bf8:	97 81       	ldd	r25, Z+7	; 0x07
    1bfa:	9d 83       	std	Y+5, r25	; 0x05
    1bfc:	8c 83       	std	Y+4, r24	; 0x04
    1bfe:	11 96       	adiw	r26, 0x01	; 1
    1c00:	8d 91       	ld	r24, X+
    1c02:	9c 91       	ld	r25, X
    1c04:	12 97       	sbiw	r26, 0x02	; 2
    1c06:	9f 01       	movw	r18, r30
    1c08:	2e 5f       	subi	r18, 0xFE	; 254
    1c0a:	3f 4f       	sbci	r19, 0xFF	; 255
    1c0c:	82 17       	cp	r24, r18
    1c0e:	93 07       	cpc	r25, r19
    1c10:	31 f4       	brne	.+12     	; 0x1c1e <xTaskResumeAll+0xbc>
    1c12:	80 85       	ldd	r24, Z+8	; 0x08
    1c14:	91 85       	ldd	r25, Z+9	; 0x09
    1c16:	12 96       	adiw	r26, 0x02	; 2
    1c18:	9c 93       	st	X, r25
    1c1a:	8e 93       	st	-X, r24
    1c1c:	11 97       	sbiw	r26, 0x01	; 1
    1c1e:	15 86       	std	Z+13, r1	; 0x0d
    1c20:	14 86       	std	Z+12, r1	; 0x0c
    1c22:	8c 91       	ld	r24, X
    1c24:	81 50       	subi	r24, 0x01	; 1
    1c26:	8c 93       	st	X, r24
    1c28:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1c2a:	80 91 99 10 	lds	r24, 0x1099	; 0x801099 <uxTopReadyPriority>
    1c2e:	8a 17       	cp	r24, r26
    1c30:	10 f4       	brcc	.+4      	; 0x1c36 <xTaskResumeAll+0xd4>
    1c32:	a0 93 99 10 	sts	0x1099, r26	; 0x801099 <uxTopReadyPriority>
    1c36:	8b e0       	ldi	r24, 0x0B	; 11
    1c38:	8a 9f       	mul	r24, r26
    1c3a:	d0 01       	movw	r26, r0
    1c3c:	11 24       	eor	r1, r1
    1c3e:	a5 52       	subi	r26, 0x25	; 37
    1c40:	bf 4e       	sbci	r27, 0xEF	; 239
    1c42:	11 96       	adiw	r26, 0x01	; 1
    1c44:	0d 90       	ld	r0, X+
    1c46:	bc 91       	ld	r27, X
    1c48:	a0 2d       	mov	r26, r0
    1c4a:	b7 83       	std	Z+7, r27	; 0x07
    1c4c:	a6 83       	std	Z+6, r26	; 0x06
    1c4e:	16 96       	adiw	r26, 0x06	; 6
    1c50:	4d 91       	ld	r20, X+
    1c52:	5c 91       	ld	r21, X
    1c54:	17 97       	sbiw	r26, 0x07	; 7
    1c56:	51 87       	std	Z+9, r21	; 0x09
    1c58:	40 87       	std	Z+8, r20	; 0x08
    1c5a:	16 96       	adiw	r26, 0x06	; 6
    1c5c:	cd 91       	ld	r28, X+
    1c5e:	dc 91       	ld	r29, X
    1c60:	17 97       	sbiw	r26, 0x07	; 7
    1c62:	3d 83       	std	Y+5, r19	; 0x05
    1c64:	2c 83       	std	Y+4, r18	; 0x04
    1c66:	17 96       	adiw	r26, 0x07	; 7
    1c68:	3c 93       	st	X, r19
    1c6a:	2e 93       	st	-X, r18
    1c6c:	16 97       	sbiw	r26, 0x06	; 6
    1c6e:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1c70:	8a 9f       	mul	r24, r26
    1c72:	d0 01       	movw	r26, r0
    1c74:	11 24       	eor	r1, r1
    1c76:	a5 52       	subi	r26, 0x25	; 37
    1c78:	bf 4e       	sbci	r27, 0xEF	; 239
    1c7a:	b5 87       	std	Z+13, r27	; 0x0d
    1c7c:	a4 87       	std	Z+12, r26	; 0x0c
    1c7e:	8c 91       	ld	r24, X
    1c80:	8f 5f       	subi	r24, 0xFF	; 255
    1c82:	8c 93       	st	X, r24
    1c84:	92 8d       	ldd	r25, Z+26	; 0x1a
    1c86:	a0 91 49 11 	lds	r26, 0x1149	; 0x801149 <pxCurrentTCB>
    1c8a:	b0 91 4a 11 	lds	r27, 0x114A	; 0x80114a <pxCurrentTCB+0x1>
    1c8e:	5a 96       	adiw	r26, 0x1a	; 26
    1c90:	8c 91       	ld	r24, X
    1c92:	98 17       	cp	r25, r24
    1c94:	30 f0       	brcs	.+12     	; 0x1ca2 <xTaskResumeAll+0x140>
    1c96:	81 e0       	ldi	r24, 0x01	; 1
    1c98:	80 93 93 10 	sts	0x1093, r24	; 0x801093 <xYieldPending>
    1c9c:	02 c0       	rjmp	.+4      	; 0x1ca2 <xTaskResumeAll+0x140>
    1c9e:	e0 e0       	ldi	r30, 0x00	; 0
    1ca0:	f0 e0       	ldi	r31, 0x00	; 0
    1ca2:	80 91 b6 10 	lds	r24, 0x10B6	; 0x8010b6 <xPendingReadyList>
    1ca6:	81 11       	cpse	r24, r1
    1ca8:	73 cf       	rjmp	.-282    	; 0x1b90 <xTaskResumeAll+0x2e>
    1caa:	ef 2b       	or	r30, r31
    1cac:	09 f0       	breq	.+2      	; 0x1cb0 <xTaskResumeAll+0x14e>
    1cae:	87 db       	rcall	.-2290   	; 0x13be <prvResetNextTaskUnblockTime>
    1cb0:	c0 90 94 10 	lds	r12, 0x1094	; 0x801094 <xPendedTicks>
    1cb4:	d0 90 95 10 	lds	r13, 0x1095	; 0x801095 <xPendedTicks+0x1>
    1cb8:	e0 90 96 10 	lds	r14, 0x1096	; 0x801096 <xPendedTicks+0x2>
    1cbc:	f0 90 97 10 	lds	r15, 0x1097	; 0x801097 <xPendedTicks+0x3>
    1cc0:	c1 14       	cp	r12, r1
    1cc2:	d1 04       	cpc	r13, r1
    1cc4:	e1 04       	cpc	r14, r1
    1cc6:	f1 04       	cpc	r15, r1
    1cc8:	a1 f0       	breq	.+40     	; 0x1cf2 <xTaskResumeAll+0x190>
    1cca:	1f de       	rcall	.-962    	; 0x190a <xTaskIncrementTick>
    1ccc:	88 23       	and	r24, r24
    1cce:	19 f0       	breq	.+6      	; 0x1cd6 <xTaskResumeAll+0x174>
    1cd0:	81 e0       	ldi	r24, 0x01	; 1
    1cd2:	80 93 93 10 	sts	0x1093, r24	; 0x801093 <xYieldPending>
    1cd6:	81 e0       	ldi	r24, 0x01	; 1
    1cd8:	c8 1a       	sub	r12, r24
    1cda:	d1 08       	sbc	r13, r1
    1cdc:	e1 08       	sbc	r14, r1
    1cde:	f1 08       	sbc	r15, r1
    1ce0:	a1 f7       	brne	.-24     	; 0x1cca <xTaskResumeAll+0x168>
    1ce2:	10 92 94 10 	sts	0x1094, r1	; 0x801094 <xPendedTicks>
    1ce6:	10 92 95 10 	sts	0x1095, r1	; 0x801095 <xPendedTicks+0x1>
    1cea:	10 92 96 10 	sts	0x1096, r1	; 0x801096 <xPendedTicks+0x2>
    1cee:	10 92 97 10 	sts	0x1097, r1	; 0x801097 <xPendedTicks+0x3>
    1cf2:	80 91 93 10 	lds	r24, 0x1093	; 0x801093 <xYieldPending>
    1cf6:	88 23       	and	r24, r24
    1cf8:	31 f0       	breq	.+12     	; 0x1d06 <xTaskResumeAll+0x1a4>
    1cfa:	0e 94 91 05 	call	0xb22	; 0xb22 <vPortYield>
    1cfe:	81 e0       	ldi	r24, 0x01	; 1
    1d00:	03 c0       	rjmp	.+6      	; 0x1d08 <xTaskResumeAll+0x1a6>
    1d02:	80 e0       	ldi	r24, 0x00	; 0
    1d04:	01 c0       	rjmp	.+2      	; 0x1d08 <xTaskResumeAll+0x1a6>
    1d06:	80 e0       	ldi	r24, 0x00	; 0
    1d08:	0f 90       	pop	r0
    1d0a:	0f be       	out	0x3f, r0	; 63
    1d0c:	df 91       	pop	r29
    1d0e:	cf 91       	pop	r28
    1d10:	ff 90       	pop	r15
    1d12:	ef 90       	pop	r14
    1d14:	df 90       	pop	r13
    1d16:	cf 90       	pop	r12
    1d18:	08 95       	ret

00001d1a <vTaskDelay>:
    1d1a:	cf 92       	push	r12
    1d1c:	df 92       	push	r13
    1d1e:	ef 92       	push	r14
    1d20:	ff 92       	push	r15
    1d22:	6b 01       	movw	r12, r22
    1d24:	7c 01       	movw	r14, r24
    1d26:	67 2b       	or	r22, r23
    1d28:	68 2b       	or	r22, r24
    1d2a:	69 2b       	or	r22, r25
    1d2c:	39 f0       	breq	.+14     	; 0x1d3c <vTaskDelay+0x22>
    1d2e:	d9 dd       	rcall	.-1102   	; 0x18e2 <vTaskSuspendAll>
    1d30:	40 e0       	ldi	r20, 0x00	; 0
    1d32:	c7 01       	movw	r24, r14
    1d34:	b6 01       	movw	r22, r12
    1d36:	ae dc       	rcall	.-1700   	; 0x1694 <prvAddCurrentTaskToDelayedList>
    1d38:	14 df       	rcall	.-472    	; 0x1b62 <xTaskResumeAll>
    1d3a:	01 c0       	rjmp	.+2      	; 0x1d3e <vTaskDelay+0x24>
    1d3c:	80 e0       	ldi	r24, 0x00	; 0
    1d3e:	81 11       	cpse	r24, r1
    1d40:	02 c0       	rjmp	.+4      	; 0x1d46 <vTaskDelay+0x2c>
    1d42:	0e 94 91 05 	call	0xb22	; 0xb22 <vPortYield>
    1d46:	ff 90       	pop	r15
    1d48:	ef 90       	pop	r14
    1d4a:	df 90       	pop	r13
    1d4c:	cf 90       	pop	r12
    1d4e:	08 95       	ret

00001d50 <vTaskSetApplicationTaskTag>:
    1d50:	00 97       	sbiw	r24, 0x00	; 0
    1d52:	21 f4       	brne	.+8      	; 0x1d5c <vTaskSetApplicationTaskTag+0xc>
    1d54:	80 91 49 11 	lds	r24, 0x1149	; 0x801149 <pxCurrentTCB>
    1d58:	90 91 4a 11 	lds	r25, 0x114A	; 0x80114a <pxCurrentTCB+0x1>
    1d5c:	0f b6       	in	r0, 0x3f	; 63
    1d5e:	f8 94       	cli
    1d60:	0f 92       	push	r0
    1d62:	fc 01       	movw	r30, r24
    1d64:	70 ab       	std	Z+48, r23	; 0x30
    1d66:	67 a7       	std	Z+47, r22	; 0x2f
    1d68:	0f 90       	pop	r0
    1d6a:	0f be       	out	0x3f, r0	; 63
    1d6c:	08 95       	ret

00001d6e <vTaskSwitchContext>:
    1d6e:	80 91 8a 10 	lds	r24, 0x108A	; 0x80108a <uxSchedulerSuspended>
    1d72:	88 23       	and	r24, r24
    1d74:	21 f0       	breq	.+8      	; 0x1d7e <vTaskSwitchContext+0x10>
    1d76:	81 e0       	ldi	r24, 0x01	; 1
    1d78:	80 93 93 10 	sts	0x1093, r24	; 0x801093 <xYieldPending>
    1d7c:	08 95       	ret
    1d7e:	10 92 93 10 	sts	0x1093, r1	; 0x801093 <xYieldPending>
    1d82:	e0 91 49 11 	lds	r30, 0x1149	; 0x801149 <pxCurrentTCB>
    1d86:	f0 91 4a 11 	lds	r31, 0x114A	; 0x80114a <pxCurrentTCB+0x1>
    1d8a:	87 a5       	ldd	r24, Z+47	; 0x2f
    1d8c:	0e 94 c4 02 	call	0x588	; 0x588 <task_switch_out>
    1d90:	e0 91 49 11 	lds	r30, 0x1149	; 0x801149 <pxCurrentTCB>
    1d94:	f0 91 4a 11 	lds	r31, 0x114A	; 0x80114a <pxCurrentTCB+0x1>
    1d98:	20 81       	ld	r18, Z
    1d9a:	31 81       	ldd	r19, Z+1	; 0x01
    1d9c:	e0 91 49 11 	lds	r30, 0x1149	; 0x801149 <pxCurrentTCB>
    1da0:	f0 91 4a 11 	lds	r31, 0x114A	; 0x80114a <pxCurrentTCB+0x1>
    1da4:	83 8d       	ldd	r24, Z+27	; 0x1b
    1da6:	94 8d       	ldd	r25, Z+28	; 0x1c
    1da8:	82 17       	cp	r24, r18
    1daa:	93 07       	cpc	r25, r19
    1dac:	58 f0       	brcs	.+22     	; 0x1dc4 <vTaskSwitchContext+0x56>
    1dae:	60 91 49 11 	lds	r22, 0x1149	; 0x801149 <pxCurrentTCB>
    1db2:	70 91 4a 11 	lds	r23, 0x114A	; 0x80114a <pxCurrentTCB+0x1>
    1db6:	63 5e       	subi	r22, 0xE3	; 227
    1db8:	7f 4f       	sbci	r23, 0xFF	; 255
    1dba:	80 91 49 11 	lds	r24, 0x1149	; 0x801149 <pxCurrentTCB>
    1dbe:	90 91 4a 11 	lds	r25, 0x114A	; 0x80114a <pxCurrentTCB+0x1>
    1dc2:	df d6       	rcall	.+3518   	; 0x2b82 <vApplicationStackOverflowHook>
    1dc4:	80 91 99 10 	lds	r24, 0x1099	; 0x801099 <uxTopReadyPriority>
    1dc8:	01 c0       	rjmp	.+2      	; 0x1dcc <vTaskSwitchContext+0x5e>
    1dca:	81 50       	subi	r24, 0x01	; 1
    1dcc:	28 2f       	mov	r18, r24
    1dce:	30 e0       	ldi	r19, 0x00	; 0
    1dd0:	9b e0       	ldi	r25, 0x0B	; 11
    1dd2:	92 9f       	mul	r25, r18
    1dd4:	f0 01       	movw	r30, r0
    1dd6:	93 9f       	mul	r25, r19
    1dd8:	f0 0d       	add	r31, r0
    1dda:	11 24       	eor	r1, r1
    1ddc:	e5 52       	subi	r30, 0x25	; 37
    1dde:	ff 4e       	sbci	r31, 0xEF	; 239
    1de0:	90 81       	ld	r25, Z
    1de2:	99 23       	and	r25, r25
    1de4:	91 f3       	breq	.-28     	; 0x1dca <vTaskSwitchContext+0x5c>
    1de6:	9b e0       	ldi	r25, 0x0B	; 11
    1de8:	92 9f       	mul	r25, r18
    1dea:	a0 01       	movw	r20, r0
    1dec:	93 9f       	mul	r25, r19
    1dee:	50 0d       	add	r21, r0
    1df0:	11 24       	eor	r1, r1
    1df2:	df 01       	movw	r26, r30
    1df4:	01 80       	ldd	r0, Z+1	; 0x01
    1df6:	f2 81       	ldd	r31, Z+2	; 0x02
    1df8:	e0 2d       	mov	r30, r0
    1dfa:	04 80       	ldd	r0, Z+4	; 0x04
    1dfc:	f5 81       	ldd	r31, Z+5	; 0x05
    1dfe:	e0 2d       	mov	r30, r0
    1e00:	12 96       	adiw	r26, 0x02	; 2
    1e02:	fc 93       	st	X, r31
    1e04:	ee 93       	st	-X, r30
    1e06:	11 97       	sbiw	r26, 0x01	; 1
    1e08:	42 52       	subi	r20, 0x22	; 34
    1e0a:	5f 4e       	sbci	r21, 0xEF	; 239
    1e0c:	e4 17       	cp	r30, r20
    1e0e:	f5 07       	cpc	r31, r21
    1e10:	29 f4       	brne	.+10     	; 0x1e1c <vTaskSwitchContext+0xae>
    1e12:	44 81       	ldd	r20, Z+4	; 0x04
    1e14:	55 81       	ldd	r21, Z+5	; 0x05
    1e16:	fd 01       	movw	r30, r26
    1e18:	52 83       	std	Z+2, r21	; 0x02
    1e1a:	41 83       	std	Z+1, r20	; 0x01
    1e1c:	9b e0       	ldi	r25, 0x0B	; 11
    1e1e:	92 9f       	mul	r25, r18
    1e20:	f0 01       	movw	r30, r0
    1e22:	93 9f       	mul	r25, r19
    1e24:	f0 0d       	add	r31, r0
    1e26:	11 24       	eor	r1, r1
    1e28:	e5 52       	subi	r30, 0x25	; 37
    1e2a:	ff 4e       	sbci	r31, 0xEF	; 239
    1e2c:	01 80       	ldd	r0, Z+1	; 0x01
    1e2e:	f2 81       	ldd	r31, Z+2	; 0x02
    1e30:	e0 2d       	mov	r30, r0
    1e32:	20 85       	ldd	r18, Z+8	; 0x08
    1e34:	31 85       	ldd	r19, Z+9	; 0x09
    1e36:	30 93 4a 11 	sts	0x114A, r19	; 0x80114a <pxCurrentTCB+0x1>
    1e3a:	20 93 49 11 	sts	0x1149, r18	; 0x801149 <pxCurrentTCB>
    1e3e:	80 93 99 10 	sts	0x1099, r24	; 0x801099 <uxTopReadyPriority>
    1e42:	e0 91 49 11 	lds	r30, 0x1149	; 0x801149 <pxCurrentTCB>
    1e46:	f0 91 4a 11 	lds	r31, 0x114A	; 0x80114a <pxCurrentTCB+0x1>
    1e4a:	87 a5       	ldd	r24, Z+47	; 0x2f
    1e4c:	0c 94 ba 02 	jmp	0x574	; 0x574 <task_switch_in>
    1e50:	08 95       	ret

00001e52 <vTaskPlaceOnEventList>:
    1e52:	cf 92       	push	r12
    1e54:	df 92       	push	r13
    1e56:	ef 92       	push	r14
    1e58:	ff 92       	push	r15
    1e5a:	6a 01       	movw	r12, r20
    1e5c:	7b 01       	movw	r14, r22
    1e5e:	60 91 49 11 	lds	r22, 0x1149	; 0x801149 <pxCurrentTCB>
    1e62:	70 91 4a 11 	lds	r23, 0x114A	; 0x80114a <pxCurrentTCB+0x1>
    1e66:	62 5f       	subi	r22, 0xF2	; 242
    1e68:	7f 4f       	sbci	r23, 0xFF	; 255
    1e6a:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <vListInsert>
    1e6e:	41 e0       	ldi	r20, 0x01	; 1
    1e70:	c7 01       	movw	r24, r14
    1e72:	b6 01       	movw	r22, r12
    1e74:	0f dc       	rcall	.-2018   	; 0x1694 <prvAddCurrentTaskToDelayedList>
    1e76:	ff 90       	pop	r15
    1e78:	ef 90       	pop	r14
    1e7a:	df 90       	pop	r13
    1e7c:	cf 90       	pop	r12
    1e7e:	08 95       	ret

00001e80 <vTaskPlaceOnEventListRestricted>:
    1e80:	cf 93       	push	r28
    1e82:	df 93       	push	r29
    1e84:	fc 01       	movw	r30, r24
    1e86:	cb 01       	movw	r24, r22
    1e88:	ba 01       	movw	r22, r20
    1e8a:	a1 81       	ldd	r26, Z+1	; 0x01
    1e8c:	b2 81       	ldd	r27, Z+2	; 0x02
    1e8e:	c0 91 49 11 	lds	r28, 0x1149	; 0x801149 <pxCurrentTCB>
    1e92:	d0 91 4a 11 	lds	r29, 0x114A	; 0x80114a <pxCurrentTCB+0x1>
    1e96:	bb 8b       	std	Y+19, r27	; 0x13
    1e98:	aa 8b       	std	Y+18, r26	; 0x12
    1e9a:	c0 91 49 11 	lds	r28, 0x1149	; 0x801149 <pxCurrentTCB>
    1e9e:	d0 91 4a 11 	lds	r29, 0x114A	; 0x80114a <pxCurrentTCB+0x1>
    1ea2:	16 96       	adiw	r26, 0x06	; 6
    1ea4:	4d 91       	ld	r20, X+
    1ea6:	5c 91       	ld	r21, X
    1ea8:	17 97       	sbiw	r26, 0x07	; 7
    1eaa:	5d 8b       	std	Y+21, r21	; 0x15
    1eac:	4c 8b       	std	Y+20, r20	; 0x14
    1eae:	16 96       	adiw	r26, 0x06	; 6
    1eb0:	cd 91       	ld	r28, X+
    1eb2:	dc 91       	ld	r29, X
    1eb4:	17 97       	sbiw	r26, 0x07	; 7
    1eb6:	40 91 49 11 	lds	r20, 0x1149	; 0x801149 <pxCurrentTCB>
    1eba:	50 91 4a 11 	lds	r21, 0x114A	; 0x80114a <pxCurrentTCB+0x1>
    1ebe:	42 5f       	subi	r20, 0xF2	; 242
    1ec0:	5f 4f       	sbci	r21, 0xFF	; 255
    1ec2:	5d 83       	std	Y+5, r21	; 0x05
    1ec4:	4c 83       	std	Y+4, r20	; 0x04
    1ec6:	40 91 49 11 	lds	r20, 0x1149	; 0x801149 <pxCurrentTCB>
    1eca:	50 91 4a 11 	lds	r21, 0x114A	; 0x80114a <pxCurrentTCB+0x1>
    1ece:	42 5f       	subi	r20, 0xF2	; 242
    1ed0:	5f 4f       	sbci	r21, 0xFF	; 255
    1ed2:	17 96       	adiw	r26, 0x07	; 7
    1ed4:	5c 93       	st	X, r21
    1ed6:	4e 93       	st	-X, r20
    1ed8:	16 97       	sbiw	r26, 0x06	; 6
    1eda:	a0 91 49 11 	lds	r26, 0x1149	; 0x801149 <pxCurrentTCB>
    1ede:	b0 91 4a 11 	lds	r27, 0x114A	; 0x80114a <pxCurrentTCB+0x1>
    1ee2:	59 96       	adiw	r26, 0x19	; 25
    1ee4:	fc 93       	st	X, r31
    1ee6:	ee 93       	st	-X, r30
    1ee8:	58 97       	sbiw	r26, 0x18	; 24
    1eea:	30 81       	ld	r19, Z
    1eec:	3f 5f       	subi	r19, 0xFF	; 255
    1eee:	30 83       	st	Z, r19
    1ef0:	22 23       	and	r18, r18
    1ef2:	19 f0       	breq	.+6      	; 0x1efa <vTaskPlaceOnEventListRestricted+0x7a>
    1ef4:	6f ef       	ldi	r22, 0xFF	; 255
    1ef6:	7f ef       	ldi	r23, 0xFF	; 255
    1ef8:	cb 01       	movw	r24, r22
    1efa:	42 2f       	mov	r20, r18
    1efc:	cb db       	rcall	.-2154   	; 0x1694 <prvAddCurrentTaskToDelayedList>
    1efe:	df 91       	pop	r29
    1f00:	cf 91       	pop	r28
    1f02:	08 95       	ret

00001f04 <xTaskRemoveFromEventList>:
    1f04:	cf 93       	push	r28
    1f06:	df 93       	push	r29
    1f08:	dc 01       	movw	r26, r24
    1f0a:	17 96       	adiw	r26, 0x07	; 7
    1f0c:	ed 91       	ld	r30, X+
    1f0e:	fc 91       	ld	r31, X
    1f10:	18 97       	sbiw	r26, 0x08	; 8
    1f12:	00 84       	ldd	r0, Z+8	; 0x08
    1f14:	f1 85       	ldd	r31, Z+9	; 0x09
    1f16:	e0 2d       	mov	r30, r0
    1f18:	a0 8d       	ldd	r26, Z+24	; 0x18
    1f1a:	b1 8d       	ldd	r27, Z+25	; 0x19
    1f1c:	c2 89       	ldd	r28, Z+18	; 0x12
    1f1e:	d3 89       	ldd	r29, Z+19	; 0x13
    1f20:	84 89       	ldd	r24, Z+20	; 0x14
    1f22:	95 89       	ldd	r25, Z+21	; 0x15
    1f24:	9f 83       	std	Y+7, r25	; 0x07
    1f26:	8e 83       	std	Y+6, r24	; 0x06
    1f28:	c4 89       	ldd	r28, Z+20	; 0x14
    1f2a:	d5 89       	ldd	r29, Z+21	; 0x15
    1f2c:	82 89       	ldd	r24, Z+18	; 0x12
    1f2e:	93 89       	ldd	r25, Z+19	; 0x13
    1f30:	9d 83       	std	Y+5, r25	; 0x05
    1f32:	8c 83       	std	Y+4, r24	; 0x04
    1f34:	11 96       	adiw	r26, 0x01	; 1
    1f36:	8d 91       	ld	r24, X+
    1f38:	9c 91       	ld	r25, X
    1f3a:	12 97       	sbiw	r26, 0x02	; 2
    1f3c:	9f 01       	movw	r18, r30
    1f3e:	22 5f       	subi	r18, 0xF2	; 242
    1f40:	3f 4f       	sbci	r19, 0xFF	; 255
    1f42:	82 17       	cp	r24, r18
    1f44:	93 07       	cpc	r25, r19
    1f46:	31 f4       	brne	.+12     	; 0x1f54 <xTaskRemoveFromEventList+0x50>
    1f48:	84 89       	ldd	r24, Z+20	; 0x14
    1f4a:	95 89       	ldd	r25, Z+21	; 0x15
    1f4c:	12 96       	adiw	r26, 0x02	; 2
    1f4e:	9c 93       	st	X, r25
    1f50:	8e 93       	st	-X, r24
    1f52:	11 97       	sbiw	r26, 0x01	; 1
    1f54:	11 8e       	std	Z+25, r1	; 0x19
    1f56:	10 8e       	std	Z+24, r1	; 0x18
    1f58:	8c 91       	ld	r24, X
    1f5a:	81 50       	subi	r24, 0x01	; 1
    1f5c:	8c 93       	st	X, r24
    1f5e:	80 91 8a 10 	lds	r24, 0x108A	; 0x80108a <uxSchedulerSuspended>
    1f62:	81 11       	cpse	r24, r1
    1f64:	52 c0       	rjmp	.+164    	; 0x200a <__DATA_REGION_LENGTH__+0xa>
    1f66:	a4 85       	ldd	r26, Z+12	; 0x0c
    1f68:	b5 85       	ldd	r27, Z+13	; 0x0d
    1f6a:	c6 81       	ldd	r28, Z+6	; 0x06
    1f6c:	d7 81       	ldd	r29, Z+7	; 0x07
    1f6e:	80 85       	ldd	r24, Z+8	; 0x08
    1f70:	91 85       	ldd	r25, Z+9	; 0x09
    1f72:	9f 83       	std	Y+7, r25	; 0x07
    1f74:	8e 83       	std	Y+6, r24	; 0x06
    1f76:	c0 85       	ldd	r28, Z+8	; 0x08
    1f78:	d1 85       	ldd	r29, Z+9	; 0x09
    1f7a:	86 81       	ldd	r24, Z+6	; 0x06
    1f7c:	97 81       	ldd	r25, Z+7	; 0x07
    1f7e:	9d 83       	std	Y+5, r25	; 0x05
    1f80:	8c 83       	std	Y+4, r24	; 0x04
    1f82:	11 96       	adiw	r26, 0x01	; 1
    1f84:	8d 91       	ld	r24, X+
    1f86:	9c 91       	ld	r25, X
    1f88:	12 97       	sbiw	r26, 0x02	; 2
    1f8a:	9f 01       	movw	r18, r30
    1f8c:	2e 5f       	subi	r18, 0xFE	; 254
    1f8e:	3f 4f       	sbci	r19, 0xFF	; 255
    1f90:	82 17       	cp	r24, r18
    1f92:	93 07       	cpc	r25, r19
    1f94:	31 f4       	brne	.+12     	; 0x1fa2 <xTaskRemoveFromEventList+0x9e>
    1f96:	80 85       	ldd	r24, Z+8	; 0x08
    1f98:	91 85       	ldd	r25, Z+9	; 0x09
    1f9a:	12 96       	adiw	r26, 0x02	; 2
    1f9c:	9c 93       	st	X, r25
    1f9e:	8e 93       	st	-X, r24
    1fa0:	11 97       	sbiw	r26, 0x01	; 1
    1fa2:	15 86       	std	Z+13, r1	; 0x0d
    1fa4:	14 86       	std	Z+12, r1	; 0x0c
    1fa6:	8c 91       	ld	r24, X
    1fa8:	81 50       	subi	r24, 0x01	; 1
    1faa:	8c 93       	st	X, r24
    1fac:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1fae:	80 91 99 10 	lds	r24, 0x1099	; 0x801099 <uxTopReadyPriority>
    1fb2:	8a 17       	cp	r24, r26
    1fb4:	10 f4       	brcc	.+4      	; 0x1fba <xTaskRemoveFromEventList+0xb6>
    1fb6:	a0 93 99 10 	sts	0x1099, r26	; 0x801099 <uxTopReadyPriority>
    1fba:	8b e0       	ldi	r24, 0x0B	; 11
    1fbc:	8a 9f       	mul	r24, r26
    1fbe:	d0 01       	movw	r26, r0
    1fc0:	11 24       	eor	r1, r1
    1fc2:	a5 52       	subi	r26, 0x25	; 37
    1fc4:	bf 4e       	sbci	r27, 0xEF	; 239
    1fc6:	11 96       	adiw	r26, 0x01	; 1
    1fc8:	0d 90       	ld	r0, X+
    1fca:	bc 91       	ld	r27, X
    1fcc:	a0 2d       	mov	r26, r0
    1fce:	b7 83       	std	Z+7, r27	; 0x07
    1fd0:	a6 83       	std	Z+6, r26	; 0x06
    1fd2:	16 96       	adiw	r26, 0x06	; 6
    1fd4:	4d 91       	ld	r20, X+
    1fd6:	5c 91       	ld	r21, X
    1fd8:	17 97       	sbiw	r26, 0x07	; 7
    1fda:	51 87       	std	Z+9, r21	; 0x09
    1fdc:	40 87       	std	Z+8, r20	; 0x08
    1fde:	16 96       	adiw	r26, 0x06	; 6
    1fe0:	cd 91       	ld	r28, X+
    1fe2:	dc 91       	ld	r29, X
    1fe4:	17 97       	sbiw	r26, 0x07	; 7
    1fe6:	3d 83       	std	Y+5, r19	; 0x05
    1fe8:	2c 83       	std	Y+4, r18	; 0x04
    1fea:	17 96       	adiw	r26, 0x07	; 7
    1fec:	3c 93       	st	X, r19
    1fee:	2e 93       	st	-X, r18
    1ff0:	16 97       	sbiw	r26, 0x06	; 6
    1ff2:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1ff4:	8a 9f       	mul	r24, r26
    1ff6:	d0 01       	movw	r26, r0
    1ff8:	11 24       	eor	r1, r1
    1ffa:	a5 52       	subi	r26, 0x25	; 37
    1ffc:	bf 4e       	sbci	r27, 0xEF	; 239
    1ffe:	b5 87       	std	Z+13, r27	; 0x0d
    2000:	a4 87       	std	Z+12, r26	; 0x0c
    2002:	8c 91       	ld	r24, X
    2004:	8f 5f       	subi	r24, 0xFF	; 255
    2006:	8c 93       	st	X, r24
    2008:	1c c0       	rjmp	.+56     	; 0x2042 <__DATA_REGION_LENGTH__+0x42>
    200a:	46 eb       	ldi	r20, 0xB6	; 182
    200c:	50 e1       	ldi	r21, 0x10	; 16
    200e:	da 01       	movw	r26, r20
    2010:	11 96       	adiw	r26, 0x01	; 1
    2012:	cd 91       	ld	r28, X+
    2014:	dc 91       	ld	r29, X
    2016:	12 97       	sbiw	r26, 0x02	; 2
    2018:	d3 8b       	std	Z+19, r29	; 0x13
    201a:	c2 8b       	std	Z+18, r28	; 0x12
    201c:	8e 81       	ldd	r24, Y+6	; 0x06
    201e:	9f 81       	ldd	r25, Y+7	; 0x07
    2020:	95 8b       	std	Z+21, r25	; 0x15
    2022:	84 8b       	std	Z+20, r24	; 0x14
    2024:	8e 81       	ldd	r24, Y+6	; 0x06
    2026:	9f 81       	ldd	r25, Y+7	; 0x07
    2028:	dc 01       	movw	r26, r24
    202a:	15 96       	adiw	r26, 0x05	; 5
    202c:	3c 93       	st	X, r19
    202e:	2e 93       	st	-X, r18
    2030:	14 97       	sbiw	r26, 0x04	; 4
    2032:	3f 83       	std	Y+7, r19	; 0x07
    2034:	2e 83       	std	Y+6, r18	; 0x06
    2036:	51 8f       	std	Z+25, r21	; 0x19
    2038:	40 8f       	std	Z+24, r20	; 0x18
    203a:	da 01       	movw	r26, r20
    203c:	8c 91       	ld	r24, X
    203e:	8f 5f       	subi	r24, 0xFF	; 255
    2040:	8c 93       	st	X, r24
    2042:	92 8d       	ldd	r25, Z+26	; 0x1a
    2044:	e0 91 49 11 	lds	r30, 0x1149	; 0x801149 <pxCurrentTCB>
    2048:	f0 91 4a 11 	lds	r31, 0x114A	; 0x80114a <pxCurrentTCB+0x1>
    204c:	82 8d       	ldd	r24, Z+26	; 0x1a
    204e:	89 17       	cp	r24, r25
    2050:	20 f4       	brcc	.+8      	; 0x205a <__DATA_REGION_LENGTH__+0x5a>
    2052:	81 e0       	ldi	r24, 0x01	; 1
    2054:	80 93 93 10 	sts	0x1093, r24	; 0x801093 <xYieldPending>
    2058:	01 c0       	rjmp	.+2      	; 0x205c <__DATA_REGION_LENGTH__+0x5c>
    205a:	80 e0       	ldi	r24, 0x00	; 0
    205c:	df 91       	pop	r29
    205e:	cf 91       	pop	r28
    2060:	08 95       	ret

00002062 <vTaskRemoveFromUnorderedEventList>:
    2062:	cf 93       	push	r28
    2064:	df 93       	push	r29
    2066:	dc 01       	movw	r26, r24
    2068:	70 68       	ori	r23, 0x80	; 128
    206a:	4d 93       	st	X+, r20
    206c:	5d 93       	st	X+, r21
    206e:	6d 93       	st	X+, r22
    2070:	7c 93       	st	X, r23
    2072:	13 97       	sbiw	r26, 0x03	; 3
    2074:	18 96       	adiw	r26, 0x08	; 8
    2076:	ed 91       	ld	r30, X+
    2078:	fc 91       	ld	r31, X
    207a:	19 97       	sbiw	r26, 0x09	; 9
    207c:	1a 96       	adiw	r26, 0x0a	; 10
    207e:	4d 91       	ld	r20, X+
    2080:	5c 91       	ld	r21, X
    2082:	1b 97       	sbiw	r26, 0x0b	; 11
    2084:	14 96       	adiw	r26, 0x04	; 4
    2086:	8d 91       	ld	r24, X+
    2088:	9c 91       	ld	r25, X
    208a:	15 97       	sbiw	r26, 0x05	; 5
    208c:	16 96       	adiw	r26, 0x06	; 6
    208e:	2d 91       	ld	r18, X+
    2090:	3c 91       	ld	r19, X
    2092:	17 97       	sbiw	r26, 0x07	; 7
    2094:	ec 01       	movw	r28, r24
    2096:	3f 83       	std	Y+7, r19	; 0x07
    2098:	2e 83       	std	Y+6, r18	; 0x06
    209a:	16 96       	adiw	r26, 0x06	; 6
    209c:	8d 91       	ld	r24, X+
    209e:	9c 91       	ld	r25, X
    20a0:	17 97       	sbiw	r26, 0x07	; 7
    20a2:	14 96       	adiw	r26, 0x04	; 4
    20a4:	2d 91       	ld	r18, X+
    20a6:	3c 91       	ld	r19, X
    20a8:	15 97       	sbiw	r26, 0x05	; 5
    20aa:	ec 01       	movw	r28, r24
    20ac:	3d 83       	std	Y+5, r19	; 0x05
    20ae:	2c 83       	std	Y+4, r18	; 0x04
    20b0:	ea 01       	movw	r28, r20
    20b2:	89 81       	ldd	r24, Y+1	; 0x01
    20b4:	9a 81       	ldd	r25, Y+2	; 0x02
    20b6:	a8 17       	cp	r26, r24
    20b8:	b9 07       	cpc	r27, r25
    20ba:	31 f4       	brne	.+12     	; 0x20c8 <vTaskRemoveFromUnorderedEventList+0x66>
    20bc:	16 96       	adiw	r26, 0x06	; 6
    20be:	8d 91       	ld	r24, X+
    20c0:	9c 91       	ld	r25, X
    20c2:	17 97       	sbiw	r26, 0x07	; 7
    20c4:	9a 83       	std	Y+2, r25	; 0x02
    20c6:	89 83       	std	Y+1, r24	; 0x01
    20c8:	1b 96       	adiw	r26, 0x0b	; 11
    20ca:	1c 92       	st	X, r1
    20cc:	1e 92       	st	-X, r1
    20ce:	1a 97       	sbiw	r26, 0x0a	; 10
    20d0:	da 01       	movw	r26, r20
    20d2:	8c 91       	ld	r24, X
    20d4:	81 50       	subi	r24, 0x01	; 1
    20d6:	8c 93       	st	X, r24
    20d8:	a4 85       	ldd	r26, Z+12	; 0x0c
    20da:	b5 85       	ldd	r27, Z+13	; 0x0d
    20dc:	c6 81       	ldd	r28, Z+6	; 0x06
    20de:	d7 81       	ldd	r29, Z+7	; 0x07
    20e0:	80 85       	ldd	r24, Z+8	; 0x08
    20e2:	91 85       	ldd	r25, Z+9	; 0x09
    20e4:	9f 83       	std	Y+7, r25	; 0x07
    20e6:	8e 83       	std	Y+6, r24	; 0x06
    20e8:	c0 85       	ldd	r28, Z+8	; 0x08
    20ea:	d1 85       	ldd	r29, Z+9	; 0x09
    20ec:	86 81       	ldd	r24, Z+6	; 0x06
    20ee:	97 81       	ldd	r25, Z+7	; 0x07
    20f0:	9d 83       	std	Y+5, r25	; 0x05
    20f2:	8c 83       	std	Y+4, r24	; 0x04
    20f4:	11 96       	adiw	r26, 0x01	; 1
    20f6:	8d 91       	ld	r24, X+
    20f8:	9c 91       	ld	r25, X
    20fa:	12 97       	sbiw	r26, 0x02	; 2
    20fc:	9f 01       	movw	r18, r30
    20fe:	2e 5f       	subi	r18, 0xFE	; 254
    2100:	3f 4f       	sbci	r19, 0xFF	; 255
    2102:	82 17       	cp	r24, r18
    2104:	93 07       	cpc	r25, r19
    2106:	31 f4       	brne	.+12     	; 0x2114 <vTaskRemoveFromUnorderedEventList+0xb2>
    2108:	80 85       	ldd	r24, Z+8	; 0x08
    210a:	91 85       	ldd	r25, Z+9	; 0x09
    210c:	12 96       	adiw	r26, 0x02	; 2
    210e:	9c 93       	st	X, r25
    2110:	8e 93       	st	-X, r24
    2112:	11 97       	sbiw	r26, 0x01	; 1
    2114:	15 86       	std	Z+13, r1	; 0x0d
    2116:	14 86       	std	Z+12, r1	; 0x0c
    2118:	8c 91       	ld	r24, X
    211a:	81 50       	subi	r24, 0x01	; 1
    211c:	8c 93       	st	X, r24
    211e:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2120:	80 91 99 10 	lds	r24, 0x1099	; 0x801099 <uxTopReadyPriority>
    2124:	8a 17       	cp	r24, r26
    2126:	10 f4       	brcc	.+4      	; 0x212c <vTaskRemoveFromUnorderedEventList+0xca>
    2128:	a0 93 99 10 	sts	0x1099, r26	; 0x801099 <uxTopReadyPriority>
    212c:	8b e0       	ldi	r24, 0x0B	; 11
    212e:	8a 9f       	mul	r24, r26
    2130:	d0 01       	movw	r26, r0
    2132:	11 24       	eor	r1, r1
    2134:	a5 52       	subi	r26, 0x25	; 37
    2136:	bf 4e       	sbci	r27, 0xEF	; 239
    2138:	11 96       	adiw	r26, 0x01	; 1
    213a:	0d 90       	ld	r0, X+
    213c:	bc 91       	ld	r27, X
    213e:	a0 2d       	mov	r26, r0
    2140:	b7 83       	std	Z+7, r27	; 0x07
    2142:	a6 83       	std	Z+6, r26	; 0x06
    2144:	16 96       	adiw	r26, 0x06	; 6
    2146:	4d 91       	ld	r20, X+
    2148:	5c 91       	ld	r21, X
    214a:	17 97       	sbiw	r26, 0x07	; 7
    214c:	51 87       	std	Z+9, r21	; 0x09
    214e:	40 87       	std	Z+8, r20	; 0x08
    2150:	16 96       	adiw	r26, 0x06	; 6
    2152:	cd 91       	ld	r28, X+
    2154:	dc 91       	ld	r29, X
    2156:	17 97       	sbiw	r26, 0x07	; 7
    2158:	3d 83       	std	Y+5, r19	; 0x05
    215a:	2c 83       	std	Y+4, r18	; 0x04
    215c:	17 96       	adiw	r26, 0x07	; 7
    215e:	3c 93       	st	X, r19
    2160:	2e 93       	st	-X, r18
    2162:	16 97       	sbiw	r26, 0x06	; 6
    2164:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2166:	8a 9f       	mul	r24, r26
    2168:	d0 01       	movw	r26, r0
    216a:	11 24       	eor	r1, r1
    216c:	a5 52       	subi	r26, 0x25	; 37
    216e:	bf 4e       	sbci	r27, 0xEF	; 239
    2170:	b5 87       	std	Z+13, r27	; 0x0d
    2172:	a4 87       	std	Z+12, r26	; 0x0c
    2174:	8c 91       	ld	r24, X
    2176:	8f 5f       	subi	r24, 0xFF	; 255
    2178:	8c 93       	st	X, r24
    217a:	92 8d       	ldd	r25, Z+26	; 0x1a
    217c:	e0 91 49 11 	lds	r30, 0x1149	; 0x801149 <pxCurrentTCB>
    2180:	f0 91 4a 11 	lds	r31, 0x114A	; 0x80114a <pxCurrentTCB+0x1>
    2184:	82 8d       	ldd	r24, Z+26	; 0x1a
    2186:	89 17       	cp	r24, r25
    2188:	18 f4       	brcc	.+6      	; 0x2190 <vTaskRemoveFromUnorderedEventList+0x12e>
    218a:	81 e0       	ldi	r24, 0x01	; 1
    218c:	80 93 93 10 	sts	0x1093, r24	; 0x801093 <xYieldPending>
    2190:	df 91       	pop	r29
    2192:	cf 91       	pop	r28
    2194:	08 95       	ret

00002196 <vTaskInternalSetTimeOutState>:
    2196:	20 91 92 10 	lds	r18, 0x1092	; 0x801092 <xNumOfOverflows>
    219a:	fc 01       	movw	r30, r24
    219c:	20 83       	st	Z, r18
    219e:	40 91 9a 10 	lds	r20, 0x109A	; 0x80109a <xTickCount>
    21a2:	50 91 9b 10 	lds	r21, 0x109B	; 0x80109b <xTickCount+0x1>
    21a6:	60 91 9c 10 	lds	r22, 0x109C	; 0x80109c <xTickCount+0x2>
    21aa:	70 91 9d 10 	lds	r23, 0x109D	; 0x80109d <xTickCount+0x3>
    21ae:	41 83       	std	Z+1, r20	; 0x01
    21b0:	52 83       	std	Z+2, r21	; 0x02
    21b2:	63 83       	std	Z+3, r22	; 0x03
    21b4:	74 83       	std	Z+4, r23	; 0x04
    21b6:	08 95       	ret

000021b8 <xTaskCheckForTimeOut>:
    21b8:	8f 92       	push	r8
    21ba:	9f 92       	push	r9
    21bc:	af 92       	push	r10
    21be:	bf 92       	push	r11
    21c0:	cf 92       	push	r12
    21c2:	df 92       	push	r13
    21c4:	ef 92       	push	r14
    21c6:	ff 92       	push	r15
    21c8:	0f 93       	push	r16
    21ca:	1f 93       	push	r17
    21cc:	cf 93       	push	r28
    21ce:	df 93       	push	r29
    21d0:	fb 01       	movw	r30, r22
    21d2:	0f b6       	in	r0, 0x3f	; 63
    21d4:	f8 94       	cli
    21d6:	0f 92       	push	r0
    21d8:	c0 90 9a 10 	lds	r12, 0x109A	; 0x80109a <xTickCount>
    21dc:	d0 90 9b 10 	lds	r13, 0x109B	; 0x80109b <xTickCount+0x1>
    21e0:	e0 90 9c 10 	lds	r14, 0x109C	; 0x80109c <xTickCount+0x2>
    21e4:	f0 90 9d 10 	lds	r15, 0x109D	; 0x80109d <xTickCount+0x3>
    21e8:	dc 01       	movw	r26, r24
    21ea:	11 96       	adiw	r26, 0x01	; 1
    21ec:	0d 91       	ld	r16, X+
    21ee:	1d 91       	ld	r17, X+
    21f0:	2d 91       	ld	r18, X+
    21f2:	3c 91       	ld	r19, X
    21f4:	14 97       	sbiw	r26, 0x04	; 4
    21f6:	46 01       	movw	r8, r12
    21f8:	57 01       	movw	r10, r14
    21fa:	80 1a       	sub	r8, r16
    21fc:	91 0a       	sbc	r9, r17
    21fe:	a2 0a       	sbc	r10, r18
    2200:	b3 0a       	sbc	r11, r19
    2202:	40 81       	ld	r20, Z
    2204:	51 81       	ldd	r21, Z+1	; 0x01
    2206:	62 81       	ldd	r22, Z+2	; 0x02
    2208:	73 81       	ldd	r23, Z+3	; 0x03
    220a:	4f 3f       	cpi	r20, 0xFF	; 255
    220c:	bf ef       	ldi	r27, 0xFF	; 255
    220e:	5b 07       	cpc	r21, r27
    2210:	6b 07       	cpc	r22, r27
    2212:	7b 07       	cpc	r23, r27
    2214:	39 f1       	breq	.+78     	; 0x2264 <__stack+0x65>
    2216:	ec 01       	movw	r28, r24
    2218:	b8 81       	ld	r27, Y
    221a:	a0 91 92 10 	lds	r26, 0x1092	; 0x801092 <xNumOfOverflows>
    221e:	ba 17       	cp	r27, r26
    2220:	59 f0       	breq	.+22     	; 0x2238 <__stack+0x39>
    2222:	c0 16       	cp	r12, r16
    2224:	d1 06       	cpc	r13, r17
    2226:	e2 06       	cpc	r14, r18
    2228:	f3 06       	cpc	r15, r19
    222a:	30 f0       	brcs	.+12     	; 0x2238 <__stack+0x39>
    222c:	10 82       	st	Z, r1
    222e:	11 82       	std	Z+1, r1	; 0x01
    2230:	12 82       	std	Z+2, r1	; 0x02
    2232:	13 82       	std	Z+3, r1	; 0x03
    2234:	81 e0       	ldi	r24, 0x01	; 1
    2236:	17 c0       	rjmp	.+46     	; 0x2266 <__stack+0x67>
    2238:	84 16       	cp	r8, r20
    223a:	95 06       	cpc	r9, r21
    223c:	a6 06       	cpc	r10, r22
    223e:	b7 06       	cpc	r11, r23
    2240:	58 f4       	brcc	.+22     	; 0x2258 <__stack+0x59>
    2242:	48 19       	sub	r20, r8
    2244:	59 09       	sbc	r21, r9
    2246:	6a 09       	sbc	r22, r10
    2248:	7b 09       	sbc	r23, r11
    224a:	40 83       	st	Z, r20
    224c:	51 83       	std	Z+1, r21	; 0x01
    224e:	62 83       	std	Z+2, r22	; 0x02
    2250:	73 83       	std	Z+3, r23	; 0x03
    2252:	a1 df       	rcall	.-190    	; 0x2196 <vTaskInternalSetTimeOutState>
    2254:	80 e0       	ldi	r24, 0x00	; 0
    2256:	07 c0       	rjmp	.+14     	; 0x2266 <__stack+0x67>
    2258:	10 82       	st	Z, r1
    225a:	11 82       	std	Z+1, r1	; 0x01
    225c:	12 82       	std	Z+2, r1	; 0x02
    225e:	13 82       	std	Z+3, r1	; 0x03
    2260:	81 e0       	ldi	r24, 0x01	; 1
    2262:	01 c0       	rjmp	.+2      	; 0x2266 <__stack+0x67>
    2264:	80 e0       	ldi	r24, 0x00	; 0
    2266:	0f 90       	pop	r0
    2268:	0f be       	out	0x3f, r0	; 63
    226a:	df 91       	pop	r29
    226c:	cf 91       	pop	r28
    226e:	1f 91       	pop	r17
    2270:	0f 91       	pop	r16
    2272:	ff 90       	pop	r15
    2274:	ef 90       	pop	r14
    2276:	df 90       	pop	r13
    2278:	cf 90       	pop	r12
    227a:	bf 90       	pop	r11
    227c:	af 90       	pop	r10
    227e:	9f 90       	pop	r9
    2280:	8f 90       	pop	r8
    2282:	08 95       	ret

00002284 <vTaskMissedYield>:
    2284:	81 e0       	ldi	r24, 0x01	; 1
    2286:	80 93 93 10 	sts	0x1093, r24	; 0x801093 <xYieldPending>
    228a:	08 95       	ret

0000228c <xTaskGetSchedulerState>:
    228c:	80 91 98 10 	lds	r24, 0x1098	; 0x801098 <xSchedulerRunning>
    2290:	88 23       	and	r24, r24
    2292:	31 f0       	breq	.+12     	; 0x22a0 <xTaskGetSchedulerState+0x14>
    2294:	80 91 8a 10 	lds	r24, 0x108A	; 0x80108a <uxSchedulerSuspended>
    2298:	81 11       	cpse	r24, r1
    229a:	04 c0       	rjmp	.+8      	; 0x22a4 <xTaskGetSchedulerState+0x18>
    229c:	82 e0       	ldi	r24, 0x02	; 2
    229e:	08 95       	ret
    22a0:	81 e0       	ldi	r24, 0x01	; 1
    22a2:	08 95       	ret
    22a4:	80 e0       	ldi	r24, 0x00	; 0
    22a6:	08 95       	ret

000022a8 <xTaskPriorityInherit>:
    22a8:	0f 93       	push	r16
    22aa:	1f 93       	push	r17
    22ac:	cf 93       	push	r28
    22ae:	df 93       	push	r29
    22b0:	fc 01       	movw	r30, r24
    22b2:	89 2b       	or	r24, r25
    22b4:	09 f4       	brne	.+2      	; 0x22b8 <xTaskPriorityInherit+0x10>
    22b6:	77 c0       	rjmp	.+238    	; 0x23a6 <xTaskPriorityInherit+0xfe>
    22b8:	82 8d       	ldd	r24, Z+26	; 0x1a
    22ba:	a0 91 49 11 	lds	r26, 0x1149	; 0x801149 <pxCurrentTCB>
    22be:	b0 91 4a 11 	lds	r27, 0x114A	; 0x80114a <pxCurrentTCB+0x1>
    22c2:	5a 96       	adiw	r26, 0x1a	; 26
    22c4:	9c 91       	ld	r25, X
    22c6:	89 17       	cp	r24, r25
    22c8:	08 f0       	brcs	.+2      	; 0x22cc <xTaskPriorityInherit+0x24>
    22ca:	63 c0       	rjmp	.+198    	; 0x2392 <xTaskPriorityInherit+0xea>
    22cc:	46 85       	ldd	r20, Z+14	; 0x0e
    22ce:	57 85       	ldd	r21, Z+15	; 0x0f
    22d0:	60 89       	ldd	r22, Z+16	; 0x10
    22d2:	71 89       	ldd	r23, Z+17	; 0x11
    22d4:	77 23       	and	r23, r23
    22d6:	94 f0       	brlt	.+36     	; 0x22fc <xTaskPriorityInherit+0x54>
    22d8:	a0 91 49 11 	lds	r26, 0x1149	; 0x801149 <pxCurrentTCB>
    22dc:	b0 91 4a 11 	lds	r27, 0x114A	; 0x80114a <pxCurrentTCB+0x1>
    22e0:	5a 96       	adiw	r26, 0x1a	; 26
    22e2:	9c 91       	ld	r25, X
    22e4:	4a e0       	ldi	r20, 0x0A	; 10
    22e6:	50 e0       	ldi	r21, 0x00	; 0
    22e8:	60 e0       	ldi	r22, 0x00	; 0
    22ea:	70 e0       	ldi	r23, 0x00	; 0
    22ec:	49 1b       	sub	r20, r25
    22ee:	51 09       	sbc	r21, r1
    22f0:	61 09       	sbc	r22, r1
    22f2:	71 09       	sbc	r23, r1
    22f4:	46 87       	std	Z+14, r20	; 0x0e
    22f6:	57 87       	std	Z+15, r21	; 0x0f
    22f8:	60 8b       	std	Z+16, r22	; 0x10
    22fa:	71 8b       	std	Z+17, r23	; 0x11
    22fc:	24 85       	ldd	r18, Z+12	; 0x0c
    22fe:	35 85       	ldd	r19, Z+13	; 0x0d
    2300:	4b e0       	ldi	r20, 0x0B	; 11
    2302:	84 9f       	mul	r24, r20
    2304:	c0 01       	movw	r24, r0
    2306:	11 24       	eor	r1, r1
    2308:	85 52       	subi	r24, 0x25	; 37
    230a:	9f 4e       	sbci	r25, 0xEF	; 239
    230c:	28 17       	cp	r18, r24
    230e:	39 07       	cpc	r19, r25
    2310:	b9 f5       	brne	.+110    	; 0x2380 <xTaskPriorityInherit+0xd8>
    2312:	ef 01       	movw	r28, r30
    2314:	8f 01       	movw	r16, r30
    2316:	0e 5f       	subi	r16, 0xFE	; 254
    2318:	1f 4f       	sbci	r17, 0xFF	; 255
    231a:	c8 01       	movw	r24, r16
    231c:	0e 94 15 05 	call	0xa2a	; 0xa2a <uxListRemove>
    2320:	e0 91 49 11 	lds	r30, 0x1149	; 0x801149 <pxCurrentTCB>
    2324:	f0 91 4a 11 	lds	r31, 0x114A	; 0x80114a <pxCurrentTCB+0x1>
    2328:	e2 8d       	ldd	r30, Z+26	; 0x1a
    232a:	ea 8f       	std	Y+26, r30	; 0x1a
    232c:	80 91 99 10 	lds	r24, 0x1099	; 0x801099 <uxTopReadyPriority>
    2330:	8e 17       	cp	r24, r30
    2332:	10 f4       	brcc	.+4      	; 0x2338 <xTaskPriorityInherit+0x90>
    2334:	e0 93 99 10 	sts	0x1099, r30	; 0x801099 <uxTopReadyPriority>
    2338:	8b e0       	ldi	r24, 0x0B	; 11
    233a:	8e 9f       	mul	r24, r30
    233c:	f0 01       	movw	r30, r0
    233e:	11 24       	eor	r1, r1
    2340:	e5 52       	subi	r30, 0x25	; 37
    2342:	ff 4e       	sbci	r31, 0xEF	; 239
    2344:	01 80       	ldd	r0, Z+1	; 0x01
    2346:	f2 81       	ldd	r31, Z+2	; 0x02
    2348:	e0 2d       	mov	r30, r0
    234a:	ff 83       	std	Y+7, r31	; 0x07
    234c:	ee 83       	std	Y+6, r30	; 0x06
    234e:	26 81       	ldd	r18, Z+6	; 0x06
    2350:	37 81       	ldd	r19, Z+7	; 0x07
    2352:	39 87       	std	Y+9, r19	; 0x09
    2354:	28 87       	std	Y+8, r18	; 0x08
    2356:	a6 81       	ldd	r26, Z+6	; 0x06
    2358:	b7 81       	ldd	r27, Z+7	; 0x07
    235a:	15 96       	adiw	r26, 0x05	; 5
    235c:	1c 93       	st	X, r17
    235e:	0e 93       	st	-X, r16
    2360:	14 97       	sbiw	r26, 0x04	; 4
    2362:	17 83       	std	Z+7, r17	; 0x07
    2364:	06 83       	std	Z+6, r16	; 0x06
    2366:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2368:	8e 9f       	mul	r24, r30
    236a:	f0 01       	movw	r30, r0
    236c:	11 24       	eor	r1, r1
    236e:	e5 52       	subi	r30, 0x25	; 37
    2370:	ff 4e       	sbci	r31, 0xEF	; 239
    2372:	fd 87       	std	Y+13, r31	; 0x0d
    2374:	ec 87       	std	Y+12, r30	; 0x0c
    2376:	80 81       	ld	r24, Z
    2378:	8f 5f       	subi	r24, 0xFF	; 255
    237a:	80 83       	st	Z, r24
    237c:	81 e0       	ldi	r24, 0x01	; 1
    237e:	16 c0       	rjmp	.+44     	; 0x23ac <xTaskPriorityInherit+0x104>
    2380:	a0 91 49 11 	lds	r26, 0x1149	; 0x801149 <pxCurrentTCB>
    2384:	b0 91 4a 11 	lds	r27, 0x114A	; 0x80114a <pxCurrentTCB+0x1>
    2388:	5a 96       	adiw	r26, 0x1a	; 26
    238a:	8c 91       	ld	r24, X
    238c:	82 8f       	std	Z+26, r24	; 0x1a
    238e:	81 e0       	ldi	r24, 0x01	; 1
    2390:	0d c0       	rjmp	.+26     	; 0x23ac <xTaskPriorityInherit+0x104>
    2392:	95 a5       	ldd	r25, Z+45	; 0x2d
    2394:	e0 91 49 11 	lds	r30, 0x1149	; 0x801149 <pxCurrentTCB>
    2398:	f0 91 4a 11 	lds	r31, 0x114A	; 0x80114a <pxCurrentTCB+0x1>
    239c:	82 8d       	ldd	r24, Z+26	; 0x1a
    239e:	98 17       	cp	r25, r24
    23a0:	20 f0       	brcs	.+8      	; 0x23aa <xTaskPriorityInherit+0x102>
    23a2:	80 e0       	ldi	r24, 0x00	; 0
    23a4:	03 c0       	rjmp	.+6      	; 0x23ac <xTaskPriorityInherit+0x104>
    23a6:	80 e0       	ldi	r24, 0x00	; 0
    23a8:	01 c0       	rjmp	.+2      	; 0x23ac <xTaskPriorityInherit+0x104>
    23aa:	81 e0       	ldi	r24, 0x01	; 1
    23ac:	df 91       	pop	r29
    23ae:	cf 91       	pop	r28
    23b0:	1f 91       	pop	r17
    23b2:	0f 91       	pop	r16
    23b4:	08 95       	ret

000023b6 <xTaskPriorityDisinherit>:
    23b6:	0f 93       	push	r16
    23b8:	1f 93       	push	r17
    23ba:	cf 93       	push	r28
    23bc:	df 93       	push	r29
    23be:	fc 01       	movw	r30, r24
    23c0:	89 2b       	or	r24, r25
    23c2:	09 f4       	brne	.+2      	; 0x23c6 <xTaskPriorityDisinherit+0x10>
    23c4:	49 c0       	rjmp	.+146    	; 0x2458 <xTaskPriorityDisinherit+0xa2>
    23c6:	86 a5       	ldd	r24, Z+46	; 0x2e
    23c8:	81 50       	subi	r24, 0x01	; 1
    23ca:	86 a7       	std	Z+46, r24	; 0x2e
    23cc:	22 8d       	ldd	r18, Z+26	; 0x1a
    23ce:	95 a5       	ldd	r25, Z+45	; 0x2d
    23d0:	29 17       	cp	r18, r25
    23d2:	09 f4       	brne	.+2      	; 0x23d6 <xTaskPriorityDisinherit+0x20>
    23d4:	43 c0       	rjmp	.+134    	; 0x245c <xTaskPriorityDisinherit+0xa6>
    23d6:	81 11       	cpse	r24, r1
    23d8:	43 c0       	rjmp	.+134    	; 0x2460 <xTaskPriorityDisinherit+0xaa>
    23da:	ef 01       	movw	r28, r30
    23dc:	8f 01       	movw	r16, r30
    23de:	0e 5f       	subi	r16, 0xFE	; 254
    23e0:	1f 4f       	sbci	r17, 0xFF	; 255
    23e2:	c8 01       	movw	r24, r16
    23e4:	0e 94 15 05 	call	0xa2a	; 0xa2a <uxListRemove>
    23e8:	ed a5       	ldd	r30, Y+45	; 0x2d
    23ea:	ea 8f       	std	Y+26, r30	; 0x1a
    23ec:	8a e0       	ldi	r24, 0x0A	; 10
    23ee:	90 e0       	ldi	r25, 0x00	; 0
    23f0:	a0 e0       	ldi	r26, 0x00	; 0
    23f2:	b0 e0       	ldi	r27, 0x00	; 0
    23f4:	8e 1b       	sub	r24, r30
    23f6:	91 09       	sbc	r25, r1
    23f8:	a1 09       	sbc	r26, r1
    23fa:	b1 09       	sbc	r27, r1
    23fc:	8e 87       	std	Y+14, r24	; 0x0e
    23fe:	9f 87       	std	Y+15, r25	; 0x0f
    2400:	a8 8b       	std	Y+16, r26	; 0x10
    2402:	b9 8b       	std	Y+17, r27	; 0x11
    2404:	80 91 99 10 	lds	r24, 0x1099	; 0x801099 <uxTopReadyPriority>
    2408:	8e 17       	cp	r24, r30
    240a:	10 f4       	brcc	.+4      	; 0x2410 <xTaskPriorityDisinherit+0x5a>
    240c:	e0 93 99 10 	sts	0x1099, r30	; 0x801099 <uxTopReadyPriority>
    2410:	8b e0       	ldi	r24, 0x0B	; 11
    2412:	8e 9f       	mul	r24, r30
    2414:	f0 01       	movw	r30, r0
    2416:	11 24       	eor	r1, r1
    2418:	e5 52       	subi	r30, 0x25	; 37
    241a:	ff 4e       	sbci	r31, 0xEF	; 239
    241c:	01 80       	ldd	r0, Z+1	; 0x01
    241e:	f2 81       	ldd	r31, Z+2	; 0x02
    2420:	e0 2d       	mov	r30, r0
    2422:	ff 83       	std	Y+7, r31	; 0x07
    2424:	ee 83       	std	Y+6, r30	; 0x06
    2426:	26 81       	ldd	r18, Z+6	; 0x06
    2428:	37 81       	ldd	r19, Z+7	; 0x07
    242a:	39 87       	std	Y+9, r19	; 0x09
    242c:	28 87       	std	Y+8, r18	; 0x08
    242e:	a6 81       	ldd	r26, Z+6	; 0x06
    2430:	b7 81       	ldd	r27, Z+7	; 0x07
    2432:	15 96       	adiw	r26, 0x05	; 5
    2434:	1c 93       	st	X, r17
    2436:	0e 93       	st	-X, r16
    2438:	14 97       	sbiw	r26, 0x04	; 4
    243a:	17 83       	std	Z+7, r17	; 0x07
    243c:	06 83       	std	Z+6, r16	; 0x06
    243e:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2440:	8e 9f       	mul	r24, r30
    2442:	f0 01       	movw	r30, r0
    2444:	11 24       	eor	r1, r1
    2446:	e5 52       	subi	r30, 0x25	; 37
    2448:	ff 4e       	sbci	r31, 0xEF	; 239
    244a:	fd 87       	std	Y+13, r31	; 0x0d
    244c:	ec 87       	std	Y+12, r30	; 0x0c
    244e:	80 81       	ld	r24, Z
    2450:	8f 5f       	subi	r24, 0xFF	; 255
    2452:	80 83       	st	Z, r24
    2454:	81 e0       	ldi	r24, 0x01	; 1
    2456:	05 c0       	rjmp	.+10     	; 0x2462 <xTaskPriorityDisinherit+0xac>
    2458:	80 e0       	ldi	r24, 0x00	; 0
    245a:	03 c0       	rjmp	.+6      	; 0x2462 <xTaskPriorityDisinherit+0xac>
    245c:	80 e0       	ldi	r24, 0x00	; 0
    245e:	01 c0       	rjmp	.+2      	; 0x2462 <xTaskPriorityDisinherit+0xac>
    2460:	80 e0       	ldi	r24, 0x00	; 0
    2462:	df 91       	pop	r29
    2464:	cf 91       	pop	r28
    2466:	1f 91       	pop	r17
    2468:	0f 91       	pop	r16
    246a:	08 95       	ret

0000246c <vTaskPriorityDisinheritAfterTimeout>:
    246c:	0f 93       	push	r16
    246e:	1f 93       	push	r17
    2470:	cf 93       	push	r28
    2472:	df 93       	push	r29
    2474:	fc 01       	movw	r30, r24
    2476:	89 2b       	or	r24, r25
    2478:	09 f4       	brne	.+2      	; 0x247c <vTaskPriorityDisinheritAfterTimeout+0x10>
    247a:	5a c0       	rjmp	.+180    	; 0x2530 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    247c:	85 a5       	ldd	r24, Z+45	; 0x2d
    247e:	86 17       	cp	r24, r22
    2480:	08 f4       	brcc	.+2      	; 0x2484 <vTaskPriorityDisinheritAfterTimeout+0x18>
    2482:	86 2f       	mov	r24, r22
    2484:	92 8d       	ldd	r25, Z+26	; 0x1a
    2486:	89 17       	cp	r24, r25
    2488:	09 f4       	brne	.+2      	; 0x248c <vTaskPriorityDisinheritAfterTimeout+0x20>
    248a:	52 c0       	rjmp	.+164    	; 0x2530 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    248c:	26 a5       	ldd	r18, Z+46	; 0x2e
    248e:	21 30       	cpi	r18, 0x01	; 1
    2490:	09 f0       	breq	.+2      	; 0x2494 <vTaskPriorityDisinheritAfterTimeout+0x28>
    2492:	4e c0       	rjmp	.+156    	; 0x2530 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    2494:	82 8f       	std	Z+26, r24	; 0x1a
    2496:	46 85       	ldd	r20, Z+14	; 0x0e
    2498:	57 85       	ldd	r21, Z+15	; 0x0f
    249a:	60 89       	ldd	r22, Z+16	; 0x10
    249c:	71 89       	ldd	r23, Z+17	; 0x11
    249e:	77 23       	and	r23, r23
    24a0:	64 f0       	brlt	.+24     	; 0x24ba <vTaskPriorityDisinheritAfterTimeout+0x4e>
    24a2:	4a e0       	ldi	r20, 0x0A	; 10
    24a4:	50 e0       	ldi	r21, 0x00	; 0
    24a6:	60 e0       	ldi	r22, 0x00	; 0
    24a8:	70 e0       	ldi	r23, 0x00	; 0
    24aa:	48 1b       	sub	r20, r24
    24ac:	51 09       	sbc	r21, r1
    24ae:	61 09       	sbc	r22, r1
    24b0:	71 09       	sbc	r23, r1
    24b2:	46 87       	std	Z+14, r20	; 0x0e
    24b4:	57 87       	std	Z+15, r21	; 0x0f
    24b6:	60 8b       	std	Z+16, r22	; 0x10
    24b8:	71 8b       	std	Z+17, r23	; 0x11
    24ba:	24 85       	ldd	r18, Z+12	; 0x0c
    24bc:	35 85       	ldd	r19, Z+13	; 0x0d
    24be:	4b e0       	ldi	r20, 0x0B	; 11
    24c0:	94 9f       	mul	r25, r20
    24c2:	c0 01       	movw	r24, r0
    24c4:	11 24       	eor	r1, r1
    24c6:	85 52       	subi	r24, 0x25	; 37
    24c8:	9f 4e       	sbci	r25, 0xEF	; 239
    24ca:	28 17       	cp	r18, r24
    24cc:	39 07       	cpc	r19, r25
    24ce:	81 f5       	brne	.+96     	; 0x2530 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    24d0:	ef 01       	movw	r28, r30
    24d2:	8f 01       	movw	r16, r30
    24d4:	0e 5f       	subi	r16, 0xFE	; 254
    24d6:	1f 4f       	sbci	r17, 0xFF	; 255
    24d8:	c8 01       	movw	r24, r16
    24da:	0e 94 15 05 	call	0xa2a	; 0xa2a <uxListRemove>
    24de:	ea 8d       	ldd	r30, Y+26	; 0x1a
    24e0:	80 91 99 10 	lds	r24, 0x1099	; 0x801099 <uxTopReadyPriority>
    24e4:	8e 17       	cp	r24, r30
    24e6:	10 f4       	brcc	.+4      	; 0x24ec <vTaskPriorityDisinheritAfterTimeout+0x80>
    24e8:	e0 93 99 10 	sts	0x1099, r30	; 0x801099 <uxTopReadyPriority>
    24ec:	8b e0       	ldi	r24, 0x0B	; 11
    24ee:	8e 9f       	mul	r24, r30
    24f0:	f0 01       	movw	r30, r0
    24f2:	11 24       	eor	r1, r1
    24f4:	e5 52       	subi	r30, 0x25	; 37
    24f6:	ff 4e       	sbci	r31, 0xEF	; 239
    24f8:	01 80       	ldd	r0, Z+1	; 0x01
    24fa:	f2 81       	ldd	r31, Z+2	; 0x02
    24fc:	e0 2d       	mov	r30, r0
    24fe:	ff 83       	std	Y+7, r31	; 0x07
    2500:	ee 83       	std	Y+6, r30	; 0x06
    2502:	26 81       	ldd	r18, Z+6	; 0x06
    2504:	37 81       	ldd	r19, Z+7	; 0x07
    2506:	39 87       	std	Y+9, r19	; 0x09
    2508:	28 87       	std	Y+8, r18	; 0x08
    250a:	a6 81       	ldd	r26, Z+6	; 0x06
    250c:	b7 81       	ldd	r27, Z+7	; 0x07
    250e:	15 96       	adiw	r26, 0x05	; 5
    2510:	1c 93       	st	X, r17
    2512:	0e 93       	st	-X, r16
    2514:	14 97       	sbiw	r26, 0x04	; 4
    2516:	17 83       	std	Z+7, r17	; 0x07
    2518:	06 83       	std	Z+6, r16	; 0x06
    251a:	ea 8d       	ldd	r30, Y+26	; 0x1a
    251c:	8e 9f       	mul	r24, r30
    251e:	f0 01       	movw	r30, r0
    2520:	11 24       	eor	r1, r1
    2522:	e5 52       	subi	r30, 0x25	; 37
    2524:	ff 4e       	sbci	r31, 0xEF	; 239
    2526:	fd 87       	std	Y+13, r31	; 0x0d
    2528:	ec 87       	std	Y+12, r30	; 0x0c
    252a:	80 81       	ld	r24, Z
    252c:	8f 5f       	subi	r24, 0xFF	; 255
    252e:	80 83       	st	Z, r24
    2530:	df 91       	pop	r29
    2532:	cf 91       	pop	r28
    2534:	1f 91       	pop	r17
    2536:	0f 91       	pop	r16
    2538:	08 95       	ret

0000253a <pvTaskIncrementMutexHeldCount>:

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
    253a:	80 91 49 11 	lds	r24, 0x1149	; 0x801149 <pxCurrentTCB>
    253e:	90 91 4a 11 	lds	r25, 0x114A	; 0x80114a <pxCurrentTCB+0x1>
    2542:	89 2b       	or	r24, r25
    2544:	39 f0       	breq	.+14     	; 0x2554 <pvTaskIncrementMutexHeldCount+0x1a>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
    2546:	e0 91 49 11 	lds	r30, 0x1149	; 0x801149 <pxCurrentTCB>
    254a:	f0 91 4a 11 	lds	r31, 0x114A	; 0x80114a <pxCurrentTCB+0x1>
    254e:	86 a5       	ldd	r24, Z+46	; 0x2e
    2550:	8f 5f       	subi	r24, 0xFF	; 255
    2552:	86 a7       	std	Z+46, r24	; 0x2e
        }

        return ( TaskHandle_t ) pxCurrentTCB;
    2554:	80 91 49 11 	lds	r24, 0x1149	; 0x801149 <pxCurrentTCB>
    2558:	90 91 4a 11 	lds	r25, 0x114A	; 0x80114a <pxCurrentTCB+0x1>
    }
    255c:	08 95       	ret

0000255e <prvGetNextExpireTime>:
    255e:	dc 01       	movw	r26, r24
    2560:	e0 91 55 11 	lds	r30, 0x1155	; 0x801155 <pxCurrentTimerList>
    2564:	f0 91 56 11 	lds	r31, 0x1156	; 0x801156 <pxCurrentTimerList+0x1>
    2568:	80 81       	ld	r24, Z
    256a:	91 e0       	ldi	r25, 0x01	; 1
    256c:	81 11       	cpse	r24, r1
    256e:	90 e0       	ldi	r25, 0x00	; 0
    2570:	9c 93       	st	X, r25
    2572:	91 11       	cpse	r25, r1
    2574:	08 c0       	rjmp	.+16     	; 0x2586 <prvGetNextExpireTime+0x28>
    2576:	07 80       	ldd	r0, Z+7	; 0x07
    2578:	f0 85       	ldd	r31, Z+8	; 0x08
    257a:	e0 2d       	mov	r30, r0
    257c:	60 81       	ld	r22, Z
    257e:	71 81       	ldd	r23, Z+1	; 0x01
    2580:	82 81       	ldd	r24, Z+2	; 0x02
    2582:	93 81       	ldd	r25, Z+3	; 0x03
    2584:	08 95       	ret
    2586:	60 e0       	ldi	r22, 0x00	; 0
    2588:	70 e0       	ldi	r23, 0x00	; 0
    258a:	cb 01       	movw	r24, r22
    258c:	08 95       	ret

0000258e <prvInsertTimerInActiveList>:
    258e:	cf 92       	push	r12
    2590:	df 92       	push	r13
    2592:	ef 92       	push	r14
    2594:	ff 92       	push	r15
    2596:	0f 93       	push	r16
    2598:	1f 93       	push	r17
    259a:	fc 01       	movw	r30, r24
    259c:	42 83       	std	Z+2, r20	; 0x02
    259e:	53 83       	std	Z+3, r21	; 0x03
    25a0:	64 83       	std	Z+4, r22	; 0x04
    25a2:	75 83       	std	Z+5, r23	; 0x05
    25a4:	93 87       	std	Z+11, r25	; 0x0b
    25a6:	82 87       	std	Z+10, r24	; 0x0a
    25a8:	04 17       	cp	r16, r20
    25aa:	15 07       	cpc	r17, r21
    25ac:	26 07       	cpc	r18, r22
    25ae:	37 07       	cpc	r19, r23
    25b0:	c0 f0       	brcs	.+48     	; 0x25e2 <prvInsertTimerInActiveList+0x54>
    25b2:	0c 19       	sub	r16, r12
    25b4:	1d 09       	sbc	r17, r13
    25b6:	2e 09       	sbc	r18, r14
    25b8:	3f 09       	sbc	r19, r15
    25ba:	86 85       	ldd	r24, Z+14	; 0x0e
    25bc:	97 85       	ldd	r25, Z+15	; 0x0f
    25be:	a0 89       	ldd	r26, Z+16	; 0x10
    25c0:	b1 89       	ldd	r27, Z+17	; 0x11
    25c2:	08 17       	cp	r16, r24
    25c4:	19 07       	cpc	r17, r25
    25c6:	2a 07       	cpc	r18, r26
    25c8:	3b 07       	cpc	r19, r27
    25ca:	00 f5       	brcc	.+64     	; 0x260c <prvInsertTimerInActiveList+0x7e>
    25cc:	bf 01       	movw	r22, r30
    25ce:	6e 5f       	subi	r22, 0xFE	; 254
    25d0:	7f 4f       	sbci	r23, 0xFF	; 255
    25d2:	80 91 53 11 	lds	r24, 0x1153	; 0x801153 <pxOverflowTimerList>
    25d6:	90 91 54 11 	lds	r25, 0x1154	; 0x801154 <pxOverflowTimerList+0x1>
    25da:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <vListInsert>
    25de:	80 e0       	ldi	r24, 0x00	; 0
    25e0:	18 c0       	rjmp	.+48     	; 0x2612 <prvInsertTimerInActiveList+0x84>
    25e2:	0c 15       	cp	r16, r12
    25e4:	1d 05       	cpc	r17, r13
    25e6:	2e 05       	cpc	r18, r14
    25e8:	3f 05       	cpc	r19, r15
    25ea:	28 f4       	brcc	.+10     	; 0x25f6 <prvInsertTimerInActiveList+0x68>
    25ec:	4c 15       	cp	r20, r12
    25ee:	5d 05       	cpc	r21, r13
    25f0:	6e 05       	cpc	r22, r14
    25f2:	7f 05       	cpc	r23, r15
    25f4:	68 f4       	brcc	.+26     	; 0x2610 <prvInsertTimerInActiveList+0x82>
    25f6:	bf 01       	movw	r22, r30
    25f8:	6e 5f       	subi	r22, 0xFE	; 254
    25fa:	7f 4f       	sbci	r23, 0xFF	; 255
    25fc:	80 91 55 11 	lds	r24, 0x1155	; 0x801155 <pxCurrentTimerList>
    2600:	90 91 56 11 	lds	r25, 0x1156	; 0x801156 <pxCurrentTimerList+0x1>
    2604:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <vListInsert>
    2608:	80 e0       	ldi	r24, 0x00	; 0
    260a:	03 c0       	rjmp	.+6      	; 0x2612 <prvInsertTimerInActiveList+0x84>
    260c:	81 e0       	ldi	r24, 0x01	; 1
    260e:	01 c0       	rjmp	.+2      	; 0x2612 <prvInsertTimerInActiveList+0x84>
    2610:	81 e0       	ldi	r24, 0x01	; 1
    2612:	1f 91       	pop	r17
    2614:	0f 91       	pop	r16
    2616:	ff 90       	pop	r15
    2618:	ef 90       	pop	r14
    261a:	df 90       	pop	r13
    261c:	cf 90       	pop	r12
    261e:	08 95       	ret

00002620 <prvCheckForValidListAndQueue>:
    2620:	0f b6       	in	r0, 0x3f	; 63
    2622:	f8 94       	cli
    2624:	0f 92       	push	r0
    2626:	80 91 51 11 	lds	r24, 0x1151	; 0x801151 <xTimerQueue>
    262a:	90 91 52 11 	lds	r25, 0x1152	; 0x801152 <xTimerQueue+0x1>
    262e:	89 2b       	or	r24, r25
    2630:	e9 f4       	brne	.+58     	; 0x266c <prvCheckForValidListAndQueue+0x4c>
    2632:	82 e6       	ldi	r24, 0x62	; 98
    2634:	91 e1       	ldi	r25, 0x11	; 17
    2636:	0e 94 c3 04 	call	0x986	; 0x986 <vListInitialise>
    263a:	87 e5       	ldi	r24, 0x57	; 87
    263c:	91 e1       	ldi	r25, 0x11	; 17
    263e:	0e 94 c3 04 	call	0x986	; 0x986 <vListInitialise>
    2642:	82 e6       	ldi	r24, 0x62	; 98
    2644:	91 e1       	ldi	r25, 0x11	; 17
    2646:	90 93 56 11 	sts	0x1156, r25	; 0x801156 <pxCurrentTimerList+0x1>
    264a:	80 93 55 11 	sts	0x1155, r24	; 0x801155 <pxCurrentTimerList>
    264e:	87 e5       	ldi	r24, 0x57	; 87
    2650:	91 e1       	ldi	r25, 0x11	; 17
    2652:	90 93 54 11 	sts	0x1154, r25	; 0x801154 <pxOverflowTimerList+0x1>
    2656:	80 93 53 11 	sts	0x1153, r24	; 0x801153 <pxOverflowTimerList>
    265a:	40 e0       	ldi	r20, 0x00	; 0
    265c:	67 e0       	ldi	r22, 0x07	; 7
    265e:	8a e0       	ldi	r24, 0x0A	; 10
    2660:	0e 94 85 07 	call	0xf0a	; 0xf0a <xQueueGenericCreate>
    2664:	90 93 52 11 	sts	0x1152, r25	; 0x801152 <xTimerQueue+0x1>
    2668:	80 93 51 11 	sts	0x1151, r24	; 0x801151 <xTimerQueue>
    266c:	0f 90       	pop	r0
    266e:	0f be       	out	0x3f, r0	; 63
    2670:	08 95       	ret

00002672 <xTimerCreateTimerTask>:
    2672:	ef 92       	push	r14
    2674:	ff 92       	push	r15
    2676:	0f 93       	push	r16
    2678:	d3 df       	rcall	.-90     	; 0x2620 <prvCheckForValidListAndQueue>
    267a:	80 91 51 11 	lds	r24, 0x1151	; 0x801151 <xTimerQueue>
    267e:	90 91 52 11 	lds	r25, 0x1152	; 0x801152 <xTimerQueue+0x1>
    2682:	89 2b       	or	r24, r25
    2684:	89 f0       	breq	.+34     	; 0x26a8 <xTimerCreateTimerTask+0x36>
    2686:	0f 2e       	mov	r0, r31
    2688:	ff e4       	ldi	r31, 0x4F	; 79
    268a:	ef 2e       	mov	r14, r31
    268c:	f1 e1       	ldi	r31, 0x11	; 17
    268e:	ff 2e       	mov	r15, r31
    2690:	f0 2d       	mov	r31, r0
    2692:	03 e0       	ldi	r16, 0x03	; 3
    2694:	20 e0       	ldi	r18, 0x00	; 0
    2696:	30 e0       	ldi	r19, 0x00	; 0
    2698:	40 ec       	ldi	r20, 0xC0	; 192
    269a:	50 e0       	ldi	r21, 0x00	; 0
    269c:	6b e9       	ldi	r22, 0x9B	; 155
    269e:	72 e0       	ldi	r23, 0x02	; 2
    26a0:	86 e8       	ldi	r24, 0x86	; 134
    26a2:	90 e0       	ldi	r25, 0x00	; 0
    26a4:	96 d8       	rcall	.-3796   	; 0x17d2 <xTaskCreate>
    26a6:	01 c0       	rjmp	.+2      	; 0x26aa <xTimerCreateTimerTask+0x38>
    26a8:	80 e0       	ldi	r24, 0x00	; 0
    26aa:	0f 91       	pop	r16
    26ac:	ff 90       	pop	r15
    26ae:	ef 90       	pop	r14
    26b0:	08 95       	ret

000026b2 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    26b2:	8f 92       	push	r8
    26b4:	9f 92       	push	r9
    26b6:	af 92       	push	r10
    26b8:	bf 92       	push	r11
    26ba:	cf 92       	push	r12
    26bc:	df 92       	push	r13
    26be:	ef 92       	push	r14
    26c0:	ff 92       	push	r15
    26c2:	0f 93       	push	r16
    26c4:	1f 93       	push	r17
    26c6:	cf 93       	push	r28
    26c8:	df 93       	push	r29
    26ca:	cd b7       	in	r28, 0x3d	; 61
    26cc:	de b7       	in	r29, 0x3e	; 62
    26ce:	27 97       	sbiw	r28, 0x07	; 7
    26d0:	0f b6       	in	r0, 0x3f	; 63
    26d2:	f8 94       	cli
    26d4:	de bf       	out	0x3e, r29	; 62
    26d6:	0f be       	out	0x3f, r0	; 63
    26d8:	cd bf       	out	0x3d, r28	; 61

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    26da:	e0 91 51 11 	lds	r30, 0x1151	; 0x801151 <xTimerQueue>
    26de:	f0 91 52 11 	lds	r31, 0x1152	; 0x801152 <xTimerQueue+0x1>
    26e2:	30 97       	sbiw	r30, 0x00	; 0
    26e4:	81 f1       	breq	.+96     	; 0x2746 <xTimerGenericCommand+0x94>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    26e6:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    26e8:	2a 83       	std	Y+2, r18	; 0x02
    26ea:	3b 83       	std	Y+3, r19	; 0x03
    26ec:	4c 83       	std	Y+4, r20	; 0x04
    26ee:	5d 83       	std	Y+5, r21	; 0x05
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    26f0:	9f 83       	std	Y+7, r25	; 0x07
    26f2:	8e 83       	std	Y+6, r24	; 0x06

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    26f4:	66 30       	cpi	r22, 0x06	; 6
    26f6:	f4 f4       	brge	.+60     	; 0x2734 <xTimerGenericCommand+0x82>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    26f8:	c9 dd       	rcall	.-1134   	; 0x228c <xTaskGetSchedulerState>
    26fa:	82 30       	cpi	r24, 0x02	; 2
    26fc:	69 f4       	brne	.+26     	; 0x2718 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    26fe:	00 e0       	ldi	r16, 0x00	; 0
    2700:	a7 01       	movw	r20, r14
    2702:	96 01       	movw	r18, r12
    2704:	be 01       	movw	r22, r28
    2706:	6f 5f       	subi	r22, 0xFF	; 255
    2708:	7f 4f       	sbci	r23, 0xFF	; 255
    270a:	80 91 51 11 	lds	r24, 0x1151	; 0x801151 <xTimerQueue>
    270e:	90 91 52 11 	lds	r25, 0x1152	; 0x801152 <xTimerQueue+0x1>
    2712:	0e 94 a8 07 	call	0xf50	; 0xf50 <xQueueGenericSend>
    2716:	18 c0       	rjmp	.+48     	; 0x2748 <xTimerGenericCommand+0x96>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    2718:	00 e0       	ldi	r16, 0x00	; 0
    271a:	20 e0       	ldi	r18, 0x00	; 0
    271c:	30 e0       	ldi	r19, 0x00	; 0
    271e:	a9 01       	movw	r20, r18
    2720:	be 01       	movw	r22, r28
    2722:	6f 5f       	subi	r22, 0xFF	; 255
    2724:	7f 4f       	sbci	r23, 0xFF	; 255
    2726:	80 91 51 11 	lds	r24, 0x1151	; 0x801151 <xTimerQueue>
    272a:	90 91 52 11 	lds	r25, 0x1152	; 0x801152 <xTimerQueue+0x1>
    272e:	0e 94 a8 07 	call	0xf50	; 0xf50 <xQueueGenericSend>
    2732:	0a c0       	rjmp	.+20     	; 0x2748 <xTimerGenericCommand+0x96>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    2734:	20 e0       	ldi	r18, 0x00	; 0
    2736:	a8 01       	movw	r20, r16
    2738:	be 01       	movw	r22, r28
    273a:	6f 5f       	subi	r22, 0xFF	; 255
    273c:	7f 4f       	sbci	r23, 0xFF	; 255
    273e:	cf 01       	movw	r24, r30
    2740:	0e 94 53 08 	call	0x10a6	; 0x10a6 <xQueueGenericSendFromISR>
    2744:	01 c0       	rjmp	.+2      	; 0x2748 <xTimerGenericCommand+0x96>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    2746:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    2748:	27 96       	adiw	r28, 0x07	; 7
    274a:	0f b6       	in	r0, 0x3f	; 63
    274c:	f8 94       	cli
    274e:	de bf       	out	0x3e, r29	; 62
    2750:	0f be       	out	0x3f, r0	; 63
    2752:	cd bf       	out	0x3d, r28	; 61
    2754:	df 91       	pop	r29
    2756:	cf 91       	pop	r28
    2758:	1f 91       	pop	r17
    275a:	0f 91       	pop	r16
    275c:	ff 90       	pop	r15
    275e:	ef 90       	pop	r14
    2760:	df 90       	pop	r13
    2762:	cf 90       	pop	r12
    2764:	bf 90       	pop	r11
    2766:	af 90       	pop	r10
    2768:	9f 90       	pop	r9
    276a:	8f 90       	pop	r8
    276c:	08 95       	ret

0000276e <prvSwitchTimerLists>:
        }
    }
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
    276e:	8f 92       	push	r8
    2770:	9f 92       	push	r9
    2772:	af 92       	push	r10
    2774:	bf 92       	push	r11
    2776:	cf 92       	push	r12
    2778:	df 92       	push	r13
    277a:	ef 92       	push	r14
    277c:	ff 92       	push	r15
    277e:	0f 93       	push	r16
    2780:	1f 93       	push	r17
    2782:	cf 93       	push	r28
    2784:	df 93       	push	r29

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2786:	3b c0       	rjmp	.+118    	; 0x27fe <prvSwitchTimerLists+0x90>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    2788:	07 80       	ldd	r0, Z+7	; 0x07
    278a:	f0 85       	ldd	r31, Z+8	; 0x08
    278c:	e0 2d       	mov	r30, r0
    278e:	80 80       	ld	r8, Z
    2790:	91 80       	ldd	r9, Z+1	; 0x01
    2792:	a2 80       	ldd	r10, Z+2	; 0x02
    2794:	b3 80       	ldd	r11, Z+3	; 0x03

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    2796:	c0 85       	ldd	r28, Z+8	; 0x08
    2798:	d1 85       	ldd	r29, Z+9	; 0x09
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    279a:	8e 01       	movw	r16, r28
    279c:	0e 5f       	subi	r16, 0xFE	; 254
    279e:	1f 4f       	sbci	r17, 0xFF	; 255
    27a0:	c8 01       	movw	r24, r16
    27a2:	0e 94 15 05 	call	0xa2a	; 0xa2a <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    27a6:	ec 89       	ldd	r30, Y+20	; 0x14
    27a8:	fd 89       	ldd	r31, Y+21	; 0x15
    27aa:	ce 01       	movw	r24, r28
    27ac:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    27ae:	8e 89       	ldd	r24, Y+22	; 0x16
    27b0:	82 ff       	sbrs	r24, 2
    27b2:	25 c0       	rjmp	.+74     	; 0x27fe <prvSwitchTimerLists+0x90>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    27b4:	8e 85       	ldd	r24, Y+14	; 0x0e
    27b6:	9f 85       	ldd	r25, Y+15	; 0x0f
    27b8:	a8 89       	ldd	r26, Y+16	; 0x10
    27ba:	b9 89       	ldd	r27, Y+17	; 0x11
    27bc:	88 0d       	add	r24, r8
    27be:	99 1d       	adc	r25, r9
    27c0:	aa 1d       	adc	r26, r10
    27c2:	bb 1d       	adc	r27, r11

                if( xReloadTime > xNextExpireTime )
    27c4:	88 16       	cp	r8, r24
    27c6:	99 06       	cpc	r9, r25
    27c8:	aa 06       	cpc	r10, r26
    27ca:	bb 06       	cpc	r11, r27
    27cc:	70 f4       	brcc	.+28     	; 0x27ea <prvSwitchTimerLists+0x7c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    27ce:	8a 83       	std	Y+2, r24	; 0x02
    27d0:	9b 83       	std	Y+3, r25	; 0x03
    27d2:	ac 83       	std	Y+4, r26	; 0x04
    27d4:	bd 83       	std	Y+5, r27	; 0x05
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    27d6:	db 87       	std	Y+11, r29	; 0x0b
    27d8:	ca 87       	std	Y+10, r28	; 0x0a
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    27da:	b8 01       	movw	r22, r16
    27dc:	80 91 55 11 	lds	r24, 0x1155	; 0x801155 <pxCurrentTimerList>
    27e0:	90 91 56 11 	lds	r25, 0x1156	; 0x801156 <pxCurrentTimerList+0x1>
    27e4:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <vListInsert>
    27e8:	0a c0       	rjmp	.+20     	; 0x27fe <prvSwitchTimerLists+0x90>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    27ea:	c1 2c       	mov	r12, r1
    27ec:	d1 2c       	mov	r13, r1
    27ee:	76 01       	movw	r14, r12
    27f0:	00 e0       	ldi	r16, 0x00	; 0
    27f2:	10 e0       	ldi	r17, 0x00	; 0
    27f4:	a5 01       	movw	r20, r10
    27f6:	94 01       	movw	r18, r8
    27f8:	60 e0       	ldi	r22, 0x00	; 0
    27fa:	ce 01       	movw	r24, r28
    27fc:	5a df       	rcall	.-332    	; 0x26b2 <xTimerGenericCommand>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    27fe:	e0 91 55 11 	lds	r30, 0x1155	; 0x801155 <pxCurrentTimerList>
    2802:	f0 91 56 11 	lds	r31, 0x1156	; 0x801156 <pxCurrentTimerList+0x1>
    2806:	80 81       	ld	r24, Z
    2808:	81 11       	cpse	r24, r1
    280a:	be cf       	rjmp	.-132    	; 0x2788 <prvSwitchTimerLists+0x1a>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    280c:	80 91 53 11 	lds	r24, 0x1153	; 0x801153 <pxOverflowTimerList>
    2810:	90 91 54 11 	lds	r25, 0x1154	; 0x801154 <pxOverflowTimerList+0x1>
    2814:	90 93 56 11 	sts	0x1156, r25	; 0x801156 <pxCurrentTimerList+0x1>
    2818:	80 93 55 11 	sts	0x1155, r24	; 0x801155 <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    281c:	f0 93 54 11 	sts	0x1154, r31	; 0x801154 <pxOverflowTimerList+0x1>
    2820:	e0 93 53 11 	sts	0x1153, r30	; 0x801153 <pxOverflowTimerList>
    }
    2824:	df 91       	pop	r29
    2826:	cf 91       	pop	r28
    2828:	1f 91       	pop	r17
    282a:	0f 91       	pop	r16
    282c:	ff 90       	pop	r15
    282e:	ef 90       	pop	r14
    2830:	df 90       	pop	r13
    2832:	cf 90       	pop	r12
    2834:	bf 90       	pop	r11
    2836:	af 90       	pop	r10
    2838:	9f 90       	pop	r9
    283a:	8f 90       	pop	r8
    283c:	08 95       	ret

0000283e <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    283e:	cf 92       	push	r12
    2840:	df 92       	push	r13
    2842:	ef 92       	push	r14
    2844:	ff 92       	push	r15
    2846:	cf 93       	push	r28
    2848:	df 93       	push	r29
    284a:	ec 01       	movw	r28, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    284c:	50 d8       	rcall	.-3936   	; 0x18ee <xTaskGetTickCount>
    284e:	6b 01       	movw	r12, r22
    2850:	7c 01       	movw	r14, r24

        if( xTimeNow < xLastTime )
    2852:	80 91 4b 11 	lds	r24, 0x114B	; 0x80114b <xLastTime.2448>
    2856:	90 91 4c 11 	lds	r25, 0x114C	; 0x80114c <xLastTime.2448+0x1>
    285a:	a0 91 4d 11 	lds	r26, 0x114D	; 0x80114d <xLastTime.2448+0x2>
    285e:	b0 91 4e 11 	lds	r27, 0x114E	; 0x80114e <xLastTime.2448+0x3>
    2862:	c8 16       	cp	r12, r24
    2864:	d9 06       	cpc	r13, r25
    2866:	ea 06       	cpc	r14, r26
    2868:	fb 06       	cpc	r15, r27
    286a:	20 f4       	brcc	.+8      	; 0x2874 <prvSampleTimeNow+0x36>
        {
            prvSwitchTimerLists();
    286c:	80 df       	rcall	.-256    	; 0x276e <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
    286e:	81 e0       	ldi	r24, 0x01	; 1
    2870:	88 83       	st	Y, r24
    2872:	01 c0       	rjmp	.+2      	; 0x2876 <prvSampleTimeNow+0x38>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    2874:	18 82       	st	Y, r1
        }

        xLastTime = xTimeNow;
    2876:	c0 92 4b 11 	sts	0x114B, r12	; 0x80114b <xLastTime.2448>
    287a:	d0 92 4c 11 	sts	0x114C, r13	; 0x80114c <xLastTime.2448+0x1>
    287e:	e0 92 4d 11 	sts	0x114D, r14	; 0x80114d <xLastTime.2448+0x2>
    2882:	f0 92 4e 11 	sts	0x114E, r15	; 0x80114e <xLastTime.2448+0x3>

        return xTimeNow;
    }
    2886:	c7 01       	movw	r24, r14
    2888:	b6 01       	movw	r22, r12
    288a:	df 91       	pop	r29
    288c:	cf 91       	pop	r28
    288e:	ff 90       	pop	r15
    2890:	ef 90       	pop	r14
    2892:	df 90       	pop	r13
    2894:	cf 90       	pop	r12
    2896:	08 95       	ret

00002898 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    2898:	4f 92       	push	r4
    289a:	5f 92       	push	r5
    289c:	6f 92       	push	r6
    289e:	7f 92       	push	r7
    28a0:	8f 92       	push	r8
    28a2:	9f 92       	push	r9
    28a4:	af 92       	push	r10
    28a6:	bf 92       	push	r11
    28a8:	cf 92       	push	r12
    28aa:	df 92       	push	r13
    28ac:	ef 92       	push	r14
    28ae:	ff 92       	push	r15
    28b0:	0f 93       	push	r16
    28b2:	1f 93       	push	r17
    28b4:	cf 93       	push	r28
    28b6:	df 93       	push	r29
    28b8:	4b 01       	movw	r8, r22
    28ba:	5c 01       	movw	r10, r24
    28bc:	29 01       	movw	r4, r18
    28be:	3a 01       	movw	r6, r20
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    28c0:	e0 91 55 11 	lds	r30, 0x1155	; 0x801155 <pxCurrentTimerList>
    28c4:	f0 91 56 11 	lds	r31, 0x1156	; 0x801156 <pxCurrentTimerList+0x1>
    28c8:	07 80       	ldd	r0, Z+7	; 0x07
    28ca:	f0 85       	ldd	r31, Z+8	; 0x08
    28cc:	e0 2d       	mov	r30, r0
    28ce:	c0 85       	ldd	r28, Z+8	; 0x08
    28d0:	d1 85       	ldd	r29, Z+9	; 0x09

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    28d2:	ce 01       	movw	r24, r28
    28d4:	02 96       	adiw	r24, 0x02	; 2
    28d6:	0e 94 15 05 	call	0xa2a	; 0xa2a <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    28da:	8e 89       	ldd	r24, Y+22	; 0x16
    28dc:	82 ff       	sbrs	r24, 2
    28de:	1b c0       	rjmp	.+54     	; 0x2916 <prvProcessExpiredTimer+0x7e>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    28e0:	4e 85       	ldd	r20, Y+14	; 0x0e
    28e2:	5f 85       	ldd	r21, Y+15	; 0x0f
    28e4:	68 89       	ldd	r22, Y+16	; 0x10
    28e6:	79 89       	ldd	r23, Y+17	; 0x11
    28e8:	48 0d       	add	r20, r8
    28ea:	59 1d       	adc	r21, r9
    28ec:	6a 1d       	adc	r22, r10
    28ee:	7b 1d       	adc	r23, r11
    28f0:	75 01       	movw	r14, r10
    28f2:	64 01       	movw	r12, r8
    28f4:	93 01       	movw	r18, r6
    28f6:	82 01       	movw	r16, r4
    28f8:	ce 01       	movw	r24, r28
    28fa:	49 de       	rcall	.-878    	; 0x258e <prvInsertTimerInActiveList>
    28fc:	88 23       	and	r24, r24
    28fe:	69 f0       	breq	.+26     	; 0x291a <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2900:	c1 2c       	mov	r12, r1
    2902:	d1 2c       	mov	r13, r1
    2904:	76 01       	movw	r14, r12
    2906:	00 e0       	ldi	r16, 0x00	; 0
    2908:	10 e0       	ldi	r17, 0x00	; 0
    290a:	a5 01       	movw	r20, r10
    290c:	94 01       	movw	r18, r8
    290e:	60 e0       	ldi	r22, 0x00	; 0
    2910:	ce 01       	movw	r24, r28
    2912:	cf de       	rcall	.-610    	; 0x26b2 <xTimerGenericCommand>
    2914:	02 c0       	rjmp	.+4      	; 0x291a <prvProcessExpiredTimer+0x82>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    2916:	8e 7f       	andi	r24, 0xFE	; 254
    2918:	8e 8b       	std	Y+22, r24	; 0x16
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    291a:	ec 89       	ldd	r30, Y+20	; 0x14
    291c:	fd 89       	ldd	r31, Y+21	; 0x15
    291e:	ce 01       	movw	r24, r28
    2920:	19 95       	eicall
    }
    2922:	df 91       	pop	r29
    2924:	cf 91       	pop	r28
    2926:	1f 91       	pop	r17
    2928:	0f 91       	pop	r16
    292a:	ff 90       	pop	r15
    292c:	ef 90       	pop	r14
    292e:	df 90       	pop	r13
    2930:	cf 90       	pop	r12
    2932:	bf 90       	pop	r11
    2934:	af 90       	pop	r10
    2936:	9f 90       	pop	r9
    2938:	8f 90       	pop	r8
    293a:	7f 90       	pop	r7
    293c:	6f 90       	pop	r6
    293e:	5f 90       	pop	r5
    2940:	4f 90       	pop	r4
    2942:	08 95       	ret

00002944 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
    2944:	8f 92       	push	r8
    2946:	9f 92       	push	r9
    2948:	af 92       	push	r10
    294a:	bf 92       	push	r11
    294c:	cf 92       	push	r12
    294e:	df 92       	push	r13
    2950:	ef 92       	push	r14
    2952:	ff 92       	push	r15
    2954:	1f 93       	push	r17
    2956:	cf 93       	push	r28
    2958:	df 93       	push	r29
    295a:	1f 92       	push	r1
    295c:	cd b7       	in	r28, 0x3d	; 61
    295e:	de b7       	in	r29, 0x3e	; 62
    2960:	6b 01       	movw	r12, r22
    2962:	7c 01       	movw	r14, r24
    2964:	14 2f       	mov	r17, r20
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    2966:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    296a:	ce 01       	movw	r24, r28
    296c:	01 96       	adiw	r24, 0x01	; 1
    296e:	67 df       	rcall	.-306    	; 0x283e <prvSampleTimeNow>
    2970:	4b 01       	movw	r8, r22
    2972:	5c 01       	movw	r10, r24

            if( xTimerListsWereSwitched == pdFALSE )
    2974:	89 81       	ldd	r24, Y+1	; 0x01
    2976:	81 11       	cpse	r24, r1
    2978:	2b c0       	rjmp	.+86     	; 0x29d0 <prvProcessTimerOrBlockTask+0x8c>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    297a:	11 11       	cpse	r17, r1
    297c:	0c c0       	rjmp	.+24     	; 0x2996 <prvProcessTimerOrBlockTask+0x52>
    297e:	8c 14       	cp	r8, r12
    2980:	9d 04       	cpc	r9, r13
    2982:	ae 04       	cpc	r10, r14
    2984:	bf 04       	cpc	r11, r15
                {
                    ( void ) xTaskResumeAll();
    2986:	38 f0       	brcs	.+14     	; 0x2996 <prvProcessTimerOrBlockTask+0x52>
    2988:	ec d8       	rcall	.-3624   	; 0x1b62 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    298a:	a5 01       	movw	r20, r10
    298c:	94 01       	movw	r18, r8
    298e:	c7 01       	movw	r24, r14
    2990:	b6 01       	movw	r22, r12
    2992:	82 df       	rcall	.-252    	; 0x2898 <prvProcessExpiredTimer>
    2994:	1e c0       	rjmp	.+60     	; 0x29d2 <prvProcessTimerOrBlockTask+0x8e>
                     * time has not been reached yet.  This task should therefore
                     * block to wait for the next expire time or a command to be
                     * received - whichever comes first.  The following line cannot
                     * be reached unless xNextExpireTime > xTimeNow, except in the
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
    2996:	11 23       	and	r17, r17
    2998:	41 f0       	breq	.+16     	; 0x29aa <prvProcessTimerOrBlockTask+0x66>
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    299a:	e0 91 53 11 	lds	r30, 0x1153	; 0x801153 <pxOverflowTimerList>
    299e:	f0 91 54 11 	lds	r31, 0x1154	; 0x801154 <pxOverflowTimerList+0x1>
    29a2:	80 81       	ld	r24, Z
    29a4:	11 e0       	ldi	r17, 0x01	; 1
    29a6:	81 11       	cpse	r24, r1
    29a8:	10 e0       	ldi	r17, 0x00	; 0
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    29aa:	b7 01       	movw	r22, r14
    29ac:	a6 01       	movw	r20, r12
    29ae:	48 19       	sub	r20, r8
    29b0:	59 09       	sbc	r21, r9
    29b2:	6a 09       	sbc	r22, r10
    29b4:	7b 09       	sbc	r23, r11
    29b6:	21 2f       	mov	r18, r17
    29b8:	80 91 51 11 	lds	r24, 0x1151	; 0x801151 <xTimerQueue>
    29bc:	90 91 52 11 	lds	r25, 0x1152	; 0x801152 <xTimerQueue+0x1>
    29c0:	0e 94 c4 09 	call	0x1388	; 0x1388 <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
    29c4:	ce d8       	rcall	.-3684   	; 0x1b62 <xTaskResumeAll>
    29c6:	81 11       	cpse	r24, r1
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
    29c8:	04 c0       	rjmp	.+8      	; 0x29d2 <prvProcessTimerOrBlockTask+0x8e>
    29ca:	0e 94 91 05 	call	0xb22	; 0xb22 <vPortYield>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    29ce:	01 c0       	rjmp	.+2      	; 0x29d2 <prvProcessTimerOrBlockTask+0x8e>
    29d0:	c8 d8       	rcall	.-3696   	; 0x1b62 <xTaskResumeAll>
            }
        }
    }
    29d2:	0f 90       	pop	r0
    29d4:	df 91       	pop	r29
    29d6:	cf 91       	pop	r28
    29d8:	1f 91       	pop	r17
    29da:	ff 90       	pop	r15
    29dc:	ef 90       	pop	r14
    29de:	df 90       	pop	r13
    29e0:	cf 90       	pop	r12
    29e2:	bf 90       	pop	r11
    29e4:	af 90       	pop	r10
    29e6:	9f 90       	pop	r9
    29e8:	8f 90       	pop	r8
    29ea:	08 95       	ret

000029ec <prvProcessReceivedCommands>:
        return xProcessTimerNow;
    }
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
    29ec:	af 92       	push	r10
    29ee:	bf 92       	push	r11
    29f0:	cf 92       	push	r12
    29f2:	df 92       	push	r13
    29f4:	ef 92       	push	r14
    29f6:	ff 92       	push	r15
    29f8:	0f 93       	push	r16
    29fa:	1f 93       	push	r17
    29fc:	cf 93       	push	r28
    29fe:	df 93       	push	r29
    2a00:	cd b7       	in	r28, 0x3d	; 61
    2a02:	de b7       	in	r29, 0x3e	; 62
    2a04:	28 97       	sbiw	r28, 0x08	; 8
    2a06:	0f b6       	in	r0, 0x3f	; 63
    2a08:	f8 94       	cli
    2a0a:	de bf       	out	0x3e, r29	; 62
    2a0c:	0f be       	out	0x3f, r0	; 63
    2a0e:	cd bf       	out	0x3d, r28	; 61
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    2a10:	81 c0       	rjmp	.+258    	; 0x2b14 <prvProcessReceivedCommands+0x128>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    2a12:	89 81       	ldd	r24, Y+1	; 0x01
    2a14:	88 23       	and	r24, r24
    2a16:	0c f4       	brge	.+2      	; 0x2a1a <prvProcessReceivedCommands+0x2e>
    2a18:	7d c0       	rjmp	.+250    	; 0x2b14 <prvProcessReceivedCommands+0x128>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    2a1a:	ae 80       	ldd	r10, Y+6	; 0x06
    2a1c:	bf 80       	ldd	r11, Y+7	; 0x07

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    2a1e:	d5 01       	movw	r26, r10
    2a20:	1c 96       	adiw	r26, 0x0c	; 12
    2a22:	8d 91       	ld	r24, X+
    2a24:	9c 91       	ld	r25, X
    2a26:	1d 97       	sbiw	r26, 0x0d	; 13
    2a28:	89 2b       	or	r24, r25
    2a2a:	21 f0       	breq	.+8      	; 0x2a34 <prvProcessReceivedCommands+0x48>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2a2c:	c5 01       	movw	r24, r10
    2a2e:	02 96       	adiw	r24, 0x02	; 2
    2a30:	0e 94 15 05 	call	0xa2a	; 0xa2a <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    2a34:	ce 01       	movw	r24, r28
    2a36:	08 96       	adiw	r24, 0x08	; 8
    2a38:	02 df       	rcall	.-508    	; 0x283e <prvSampleTimeNow>
    2a3a:	8b 01       	movw	r16, r22
    2a3c:	9c 01       	movw	r18, r24

                switch( xMessage.xMessageID )
    2a3e:	e9 81       	ldd	r30, Y+1	; 0x01
    2a40:	0e 2e       	mov	r0, r30
    2a42:	00 0c       	add	r0, r0
    2a44:	ff 0b       	sbc	r31, r31
    2a46:	ea 30       	cpi	r30, 0x0A	; 10
    2a48:	f1 05       	cpc	r31, r1
    2a4a:	08 f0       	brcs	.+2      	; 0x2a4e <prvProcessReceivedCommands+0x62>
    2a4c:	63 c0       	rjmp	.+198    	; 0x2b14 <prvProcessReceivedCommands+0x128>
    2a4e:	88 27       	eor	r24, r24
    2a50:	ee 58       	subi	r30, 0x8E	; 142
    2a52:	ff 4f       	sbci	r31, 0xFF	; 255
    2a54:	8f 4f       	sbci	r24, 0xFF	; 255
    2a56:	c3 c7       	rjmp	.+3974   	; 0x39de <__tablejump2__>
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    2a58:	f5 01       	movw	r30, r10
    2a5a:	86 89       	ldd	r24, Z+22	; 0x16
    2a5c:	81 60       	ori	r24, 0x01	; 1
    2a5e:	86 8b       	std	Z+22, r24	; 0x16

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    2a60:	ca 80       	ldd	r12, Y+2	; 0x02
    2a62:	db 80       	ldd	r13, Y+3	; 0x03
    2a64:	ec 80       	ldd	r14, Y+4	; 0x04
    2a66:	fd 80       	ldd	r15, Y+5	; 0x05
    2a68:	46 85       	ldd	r20, Z+14	; 0x0e
    2a6a:	57 85       	ldd	r21, Z+15	; 0x0f
    2a6c:	60 89       	ldd	r22, Z+16	; 0x10
    2a6e:	71 89       	ldd	r23, Z+17	; 0x11
    2a70:	4c 0d       	add	r20, r12
    2a72:	5d 1d       	adc	r21, r13
    2a74:	6e 1d       	adc	r22, r14
    2a76:	7f 1d       	adc	r23, r15
    2a78:	c5 01       	movw	r24, r10
    2a7a:	89 dd       	rcall	.-1262   	; 0x258e <prvInsertTimerInActiveList>
    2a7c:	88 23       	and	r24, r24
    2a7e:	09 f4       	brne	.+2      	; 0x2a82 <prvProcessReceivedCommands+0x96>
    2a80:	49 c0       	rjmp	.+146    	; 0x2b14 <prvProcessReceivedCommands+0x128>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2a82:	d5 01       	movw	r26, r10
    2a84:	54 96       	adiw	r26, 0x14	; 20
    2a86:	ed 91       	ld	r30, X+
    2a88:	fc 91       	ld	r31, X
    2a8a:	55 97       	sbiw	r26, 0x15	; 21
    2a8c:	c5 01       	movw	r24, r10
    2a8e:	19 95       	eicall
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2a90:	f5 01       	movw	r30, r10
    2a92:	86 89       	ldd	r24, Z+22	; 0x16
    2a94:	82 ff       	sbrs	r24, 2
    2a96:	3e c0       	rjmp	.+124    	; 0x2b14 <prvProcessReceivedCommands+0x128>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    2a98:	4a 81       	ldd	r20, Y+2	; 0x02
    2a9a:	5b 81       	ldd	r21, Y+3	; 0x03
    2a9c:	6c 81       	ldd	r22, Y+4	; 0x04
    2a9e:	7d 81       	ldd	r23, Y+5	; 0x05
    2aa0:	86 85       	ldd	r24, Z+14	; 0x0e
    2aa2:	97 85       	ldd	r25, Z+15	; 0x0f
    2aa4:	a0 89       	ldd	r26, Z+16	; 0x10
    2aa6:	b1 89       	ldd	r27, Z+17	; 0x11
    2aa8:	9a 01       	movw	r18, r20
    2aaa:	ab 01       	movw	r20, r22
    2aac:	28 0f       	add	r18, r24
    2aae:	39 1f       	adc	r19, r25
    2ab0:	4a 1f       	adc	r20, r26
    2ab2:	5b 1f       	adc	r21, r27
    2ab4:	c1 2c       	mov	r12, r1
    2ab6:	d1 2c       	mov	r13, r1
    2ab8:	76 01       	movw	r14, r12
    2aba:	00 e0       	ldi	r16, 0x00	; 0
    2abc:	10 e0       	ldi	r17, 0x00	; 0
    2abe:	60 e0       	ldi	r22, 0x00	; 0
    2ac0:	c5 01       	movw	r24, r10
    2ac2:	f7 dd       	rcall	.-1042   	; 0x26b2 <xTimerGenericCommand>
    2ac4:	27 c0       	rjmp	.+78     	; 0x2b14 <prvProcessReceivedCommands+0x128>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    2ac6:	d5 01       	movw	r26, r10
    2ac8:	56 96       	adiw	r26, 0x16	; 22
    2aca:	8c 91       	ld	r24, X
    2acc:	56 97       	sbiw	r26, 0x16	; 22
    2ace:	8e 7f       	andi	r24, 0xFE	; 254
    2ad0:	56 96       	adiw	r26, 0x16	; 22
    2ad2:	8c 93       	st	X, r24
                        break;
    2ad4:	1f c0       	rjmp	.+62     	; 0x2b14 <prvProcessReceivedCommands+0x128>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    2ad6:	f5 01       	movw	r30, r10
    2ad8:	86 89       	ldd	r24, Z+22	; 0x16
    2ada:	81 60       	ori	r24, 0x01	; 1
    2adc:	86 8b       	std	Z+22, r24	; 0x16
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    2ade:	4a 81       	ldd	r20, Y+2	; 0x02
    2ae0:	5b 81       	ldd	r21, Y+3	; 0x03
    2ae2:	6c 81       	ldd	r22, Y+4	; 0x04
    2ae4:	7d 81       	ldd	r23, Y+5	; 0x05
    2ae6:	46 87       	std	Z+14, r20	; 0x0e
    2ae8:	57 87       	std	Z+15, r21	; 0x0f
    2aea:	60 8b       	std	Z+16, r22	; 0x10
    2aec:	71 8b       	std	Z+17, r23	; 0x11
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    2aee:	40 0f       	add	r20, r16
    2af0:	51 1f       	adc	r21, r17
    2af2:	62 1f       	adc	r22, r18
    2af4:	73 1f       	adc	r23, r19
    2af6:	68 01       	movw	r12, r16
    2af8:	79 01       	movw	r14, r18
    2afa:	c5 01       	movw	r24, r10
    2afc:	48 dd       	rcall	.-1392   	; 0x258e <prvInsertTimerInActiveList>
                        break;
    2afe:	0a c0       	rjmp	.+20     	; 0x2b14 <prvProcessReceivedCommands+0x128>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    2b00:	f5 01       	movw	r30, r10
    2b02:	86 89       	ldd	r24, Z+22	; 0x16
    2b04:	81 fd       	sbrc	r24, 1
    2b06:	04 c0       	rjmp	.+8      	; 0x2b10 <prvProcessReceivedCommands+0x124>
                                {
                                    vPortFree( pxTimer );
    2b08:	c5 01       	movw	r24, r10
    2b0a:	0e 94 87 04 	call	0x90e	; 0x90e <vPortFree>
    2b0e:	02 c0       	rjmp	.+4      	; 0x2b14 <prvProcessReceivedCommands+0x128>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    2b10:	8e 7f       	andi	r24, 0xFE	; 254
    2b12:	86 8b       	std	Z+22, r24	; 0x16
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    2b14:	20 e0       	ldi	r18, 0x00	; 0
    2b16:	30 e0       	ldi	r19, 0x00	; 0
    2b18:	a9 01       	movw	r20, r18
    2b1a:	be 01       	movw	r22, r28
    2b1c:	6f 5f       	subi	r22, 0xFF	; 255
    2b1e:	7f 4f       	sbci	r23, 0xFF	; 255
    2b20:	80 91 51 11 	lds	r24, 0x1151	; 0x801151 <xTimerQueue>
    2b24:	90 91 52 11 	lds	r25, 0x1152	; 0x801152 <xTimerQueue+0x1>
    2b28:	0e 94 8d 08 	call	0x111a	; 0x111a <xQueueReceive>
    2b2c:	81 11       	cpse	r24, r1
    2b2e:	71 cf       	rjmp	.-286    	; 0x2a12 <prvProcessReceivedCommands+0x26>
                        /* Don't expect to get here. */
                        break;
                }
            }
        }
    }
    2b30:	28 96       	adiw	r28, 0x08	; 8
    2b32:	0f b6       	in	r0, 0x3f	; 63
    2b34:	f8 94       	cli
    2b36:	de bf       	out	0x3e, r29	; 62
    2b38:	0f be       	out	0x3f, r0	; 63
    2b3a:	cd bf       	out	0x3d, r28	; 61
    2b3c:	df 91       	pop	r29
    2b3e:	cf 91       	pop	r28
    2b40:	1f 91       	pop	r17
    2b42:	0f 91       	pop	r16
    2b44:	ff 90       	pop	r15
    2b46:	ef 90       	pop	r14
    2b48:	df 90       	pop	r13
    2b4a:	cf 90       	pop	r12
    2b4c:	bf 90       	pop	r11
    2b4e:	af 90       	pop	r10
    2b50:	08 95       	ret

00002b52 <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    2b52:	08 95       	ret

00002b54 <prvSetMainLedOn>:
 * Private function to enable board led to use it in application hooks
 */
void prvSetMainLedOn( void ) 
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    2b54:	84 b1       	in	r24, 0x04	; 4
    2b56:	80 68       	ori	r24, 0x80	; 128
    2b58:	84 b9       	out	0x04, r24	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    2b5a:	85 b1       	in	r24, 0x05	; 5
    2b5c:	80 68       	ori	r24, 0x80	; 128
    2b5e:	85 b9       	out	0x05, r24	; 5
    2b60:	08 95       	ret

00002b62 <prvBlinkMainLed>:
 */
void prvBlinkMainLed( void ) 
{

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    2b62:	83 b1       	in	r24, 0x03	; 3
    2b64:	80 68       	ori	r24, 0x80	; 128
    2b66:	83 b9       	out	0x03, r24	; 3
    2b68:	08 95       	ret

00002b6a <vApplicationMallocFailedHook>:
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    prvSetMainLedOn(); // Main LED on.
    2b6a:	f4 df       	rcall	.-24     	; 0x2b54 <prvSetMainLedOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2b6c:	2f ef       	ldi	r18, 0xFF	; 255
    2b6e:	80 e7       	ldi	r24, 0x70	; 112
    2b70:	92 e0       	ldi	r25, 0x02	; 2
    2b72:	21 50       	subi	r18, 0x01	; 1
    2b74:	80 40       	sbci	r24, 0x00	; 0
    2b76:	90 40       	sbci	r25, 0x00	; 0
    2b78:	e1 f7       	brne	.-8      	; 0x2b72 <vApplicationMallocFailedHook+0x8>
    2b7a:	00 c0       	rjmp	.+0      	; 0x2b7c <vApplicationMallocFailedHook+0x12>
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    2b7c:	00 00       	nop
    2b7e:	f1 df       	rcall	.-30     	; 0x2b62 <prvBlinkMainLed>
    2b80:	f5 cf       	rjmp	.-22     	; 0x2b6c <vApplicationMallocFailedHook+0x2>

00002b82 <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)),
                                    char * pcTaskName __attribute__((unused)) )
{

    prvSetMainLedOn(); // Main LED on.
    2b82:	e8 df       	rcall	.-48     	; 0x2b54 <prvSetMainLedOn>
    2b84:	2f ef       	ldi	r18, 0xFF	; 255
    2b86:	87 ea       	ldi	r24, 0xA7	; 167
    2b88:	91 e6       	ldi	r25, 0x61	; 97
    2b8a:	21 50       	subi	r18, 0x01	; 1
    2b8c:	80 40       	sbci	r24, 0x00	; 0
    2b8e:	90 40       	sbci	r25, 0x00	; 0
    2b90:	e1 f7       	brne	.-8      	; 0x2b8a <vApplicationStackOverflowHook+0x8>
    2b92:	00 c0       	rjmp	.+0      	; 0x2b94 <vApplicationStackOverflowHook+0x12>

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    2b94:	00 00       	nop
    2b96:	e5 df       	rcall	.-54     	; 0x2b62 <prvBlinkMainLed>
    2b98:	f5 cf       	rjmp	.-22     	; 0x2b84 <vApplicationStackOverflowHook+0x2>

00002b9a <initializeSystem>:
	return 0;
}

void initializeSystem(void)
{
	trace_init();
    2b9a:	0e 94 b4 02 	call	0x568	; 0x568 <trace_init>
	stdio_initialise(ser_USART0);
    2b9e:	80 e0       	ldi	r24, 0x00	; 0
    2ba0:	9f d0       	rcall	.+318    	; 0x2ce0 <stdio_initialise>
	status_leds_initialise(5);
    2ba2:	85 e0       	ldi	r24, 0x05	; 5
    2ba4:	90 e0       	ldi	r25, 0x00	; 0
    2ba6:	a3 d1       	rcall	.+838    	; 0x2eee <status_leds_initialise>
	DDRC |= (1 << P_LIGHT_PIN_Front);
    2ba8:	87 b1       	in	r24, 0x07	; 7
    2baa:	81 60       	ori	r24, 0x01	; 1
    2bac:	87 b9       	out	0x07, r24	; 7
	PORTC &= ~(1 << P_LIGHT_PIN_Front);
    2bae:	88 b1       	in	r24, 0x08	; 8
    2bb0:	8e 7f       	andi	r24, 0xFE	; 254
    2bb2:	88 b9       	out	0x08, r24	; 8
	DDRC |= (1 << P_LIGHT_PIN_Back);
    2bb4:	87 b1       	in	r24, 0x07	; 7
    2bb6:	80 64       	ori	r24, 0x40	; 64
    2bb8:	87 b9       	out	0x07, r24	; 7
	PORTC &= ~(1 << P_LIGHT_PIN_Back);
    2bba:	88 b1       	in	r24, 0x08	; 8
    2bbc:	8f 7b       	andi	r24, 0xBF	; 191
    2bbe:	88 b9       	out	0x08, r24	; 8
	hc_sr04_init();
    2bc0:	0e 94 22 02 	call	0x444	; 0x444 <hc_sr04_init>

	printf("System Initialization Complete\n");
    2bc4:	83 ea       	ldi	r24, 0xA3	; 163
    2bc6:	92 e0       	ldi	r25, 0x02	; 2
    2bc8:	0c 94 4e 1e 	jmp	0x3c9c	; 0x3c9c <puts>
    2bcc:	08 95       	ret

00002bce <main>:
void initializeSystem(void);
#include "application.h"

int main(void)
{
	initializeSystem();  // Initialize system configurations
    2bce:	e5 df       	rcall	.-54     	; 0x2b9a <initializeSystem>

	create_all_application_tasks();  // Create all tasks from application.c
    2bd0:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <create_all_application_tasks>
	vTaskStartScheduler();  // Start the scheduler
    2bd4:	0e 94 34 0c 	call	0x1868	; 0x1868 <vTaskStartScheduler>
    2bd8:	ff cf       	rjmp	.-2      	; 0x2bd8 <main+0xa>

00002bda <__floatunsisf>:
    2bda:	e8 94       	clt
    2bdc:	09 c0       	rjmp	.+18     	; 0x2bf0 <__floatsisf+0x12>

00002bde <__floatsisf>:
    2bde:	97 fb       	bst	r25, 7
    2be0:	3e f4       	brtc	.+14     	; 0x2bf0 <__floatsisf+0x12>
    2be2:	90 95       	com	r25
    2be4:	80 95       	com	r24
    2be6:	70 95       	com	r23
    2be8:	61 95       	neg	r22
    2bea:	7f 4f       	sbci	r23, 0xFF	; 255
    2bec:	8f 4f       	sbci	r24, 0xFF	; 255
    2bee:	9f 4f       	sbci	r25, 0xFF	; 255
    2bf0:	99 23       	and	r25, r25
    2bf2:	a9 f0       	breq	.+42     	; 0x2c1e <__floatsisf+0x40>
    2bf4:	f9 2f       	mov	r31, r25
    2bf6:	96 e9       	ldi	r25, 0x96	; 150
    2bf8:	bb 27       	eor	r27, r27
    2bfa:	93 95       	inc	r25
    2bfc:	f6 95       	lsr	r31
    2bfe:	87 95       	ror	r24
    2c00:	77 95       	ror	r23
    2c02:	67 95       	ror	r22
    2c04:	b7 95       	ror	r27
    2c06:	f1 11       	cpse	r31, r1
    2c08:	f8 cf       	rjmp	.-16     	; 0x2bfa <__floatsisf+0x1c>
    2c0a:	fa f4       	brpl	.+62     	; 0x2c4a <__floatsisf+0x6c>
    2c0c:	bb 0f       	add	r27, r27
    2c0e:	11 f4       	brne	.+4      	; 0x2c14 <__floatsisf+0x36>
    2c10:	60 ff       	sbrs	r22, 0
    2c12:	1b c0       	rjmp	.+54     	; 0x2c4a <__floatsisf+0x6c>
    2c14:	6f 5f       	subi	r22, 0xFF	; 255
    2c16:	7f 4f       	sbci	r23, 0xFF	; 255
    2c18:	8f 4f       	sbci	r24, 0xFF	; 255
    2c1a:	9f 4f       	sbci	r25, 0xFF	; 255
    2c1c:	16 c0       	rjmp	.+44     	; 0x2c4a <__floatsisf+0x6c>
    2c1e:	88 23       	and	r24, r24
    2c20:	11 f0       	breq	.+4      	; 0x2c26 <__floatsisf+0x48>
    2c22:	96 e9       	ldi	r25, 0x96	; 150
    2c24:	11 c0       	rjmp	.+34     	; 0x2c48 <__floatsisf+0x6a>
    2c26:	77 23       	and	r23, r23
    2c28:	21 f0       	breq	.+8      	; 0x2c32 <__floatsisf+0x54>
    2c2a:	9e e8       	ldi	r25, 0x8E	; 142
    2c2c:	87 2f       	mov	r24, r23
    2c2e:	76 2f       	mov	r23, r22
    2c30:	05 c0       	rjmp	.+10     	; 0x2c3c <__floatsisf+0x5e>
    2c32:	66 23       	and	r22, r22
    2c34:	71 f0       	breq	.+28     	; 0x2c52 <__floatsisf+0x74>
    2c36:	96 e8       	ldi	r25, 0x86	; 134
    2c38:	86 2f       	mov	r24, r22
    2c3a:	70 e0       	ldi	r23, 0x00	; 0
    2c3c:	60 e0       	ldi	r22, 0x00	; 0
    2c3e:	2a f0       	brmi	.+10     	; 0x2c4a <__floatsisf+0x6c>
    2c40:	9a 95       	dec	r25
    2c42:	66 0f       	add	r22, r22
    2c44:	77 1f       	adc	r23, r23
    2c46:	88 1f       	adc	r24, r24
    2c48:	da f7       	brpl	.-10     	; 0x2c40 <__floatsisf+0x62>
    2c4a:	88 0f       	add	r24, r24
    2c4c:	96 95       	lsr	r25
    2c4e:	87 95       	ror	r24
    2c50:	97 f9       	bld	r25, 7
    2c52:	08 95       	ret

00002c54 <__gesf2>:
    2c54:	03 d0       	rcall	.+6      	; 0x2c5c <__fp_cmp>
    2c56:	08 f4       	brcc	.+2      	; 0x2c5a <__gesf2+0x6>
    2c58:	8f ef       	ldi	r24, 0xFF	; 255
    2c5a:	08 95       	ret

00002c5c <__fp_cmp>:
    2c5c:	99 0f       	add	r25, r25
    2c5e:	00 08       	sbc	r0, r0
    2c60:	55 0f       	add	r21, r21
    2c62:	aa 0b       	sbc	r26, r26
    2c64:	e0 e8       	ldi	r30, 0x80	; 128
    2c66:	fe ef       	ldi	r31, 0xFE	; 254
    2c68:	16 16       	cp	r1, r22
    2c6a:	17 06       	cpc	r1, r23
    2c6c:	e8 07       	cpc	r30, r24
    2c6e:	f9 07       	cpc	r31, r25
    2c70:	c0 f0       	brcs	.+48     	; 0x2ca2 <__fp_cmp+0x46>
    2c72:	12 16       	cp	r1, r18
    2c74:	13 06       	cpc	r1, r19
    2c76:	e4 07       	cpc	r30, r20
    2c78:	f5 07       	cpc	r31, r21
    2c7a:	98 f0       	brcs	.+38     	; 0x2ca2 <__fp_cmp+0x46>
    2c7c:	62 1b       	sub	r22, r18
    2c7e:	73 0b       	sbc	r23, r19
    2c80:	84 0b       	sbc	r24, r20
    2c82:	95 0b       	sbc	r25, r21
    2c84:	39 f4       	brne	.+14     	; 0x2c94 <__fp_cmp+0x38>
    2c86:	0a 26       	eor	r0, r26
    2c88:	61 f0       	breq	.+24     	; 0x2ca2 <__fp_cmp+0x46>
    2c8a:	23 2b       	or	r18, r19
    2c8c:	24 2b       	or	r18, r20
    2c8e:	25 2b       	or	r18, r21
    2c90:	21 f4       	brne	.+8      	; 0x2c9a <__fp_cmp+0x3e>
    2c92:	08 95       	ret
    2c94:	0a 26       	eor	r0, r26
    2c96:	09 f4       	brne	.+2      	; 0x2c9a <__fp_cmp+0x3e>
    2c98:	a1 40       	sbci	r26, 0x01	; 1
    2c9a:	a6 95       	lsr	r26
    2c9c:	8f ef       	ldi	r24, 0xFF	; 255
    2c9e:	81 1d       	adc	r24, r1
    2ca0:	81 1d       	adc	r24, r1
    2ca2:	08 95       	ret

00002ca4 <usart_getchar>:
    2ca4:	cf 93       	push	r28
    2ca6:	df 93       	push	r29
    2ca8:	1f 92       	push	r1
    2caa:	cd b7       	in	r28, 0x3d	; 61
    2cac:	de b7       	in	r29, 0x3e	; 62
    2cae:	be 01       	movw	r22, r28
    2cb0:	6f 5f       	subi	r22, 0xFF	; 255
    2cb2:	7f 4f       	sbci	r23, 0xFF	; 255
    2cb4:	80 91 6d 11 	lds	r24, 0x116D	; 0x80116d <_com_serial_instance>
    2cb8:	90 91 6e 11 	lds	r25, 0x116E	; 0x80116e <_com_serial_instance+0x1>
    2cbc:	2d d2       	rcall	.+1114   	; 0x3118 <serial_getByte>
    2cbe:	81 11       	cpse	r24, r1
    2cc0:	f6 cf       	rjmp	.-20     	; 0x2cae <usart_getchar+0xa>
    2cc2:	89 81       	ldd	r24, Y+1	; 0x01
    2cc4:	90 e0       	ldi	r25, 0x00	; 0
    2cc6:	0f 90       	pop	r0
    2cc8:	df 91       	pop	r29
    2cca:	cf 91       	pop	r28
    2ccc:	08 95       	ret

00002cce <usart_putchar>:
    2cce:	68 2f       	mov	r22, r24
    2cd0:	80 91 6d 11 	lds	r24, 0x116D	; 0x80116d <_com_serial_instance>
    2cd4:	90 91 6e 11 	lds	r25, 0x116E	; 0x80116e <_com_serial_instance+0x1>
    2cd8:	f4 d1       	rcall	.+1000   	; 0x30c2 <serial_sendByte>
    2cda:	80 e0       	ldi	r24, 0x00	; 0
    2cdc:	90 e0       	ldi	r25, 0x00	; 0
    2cde:	08 95       	ret

00002ce0 <stdio_initialise>:
    2ce0:	8f 92       	push	r8
    2ce2:	9f 92       	push	r9
    2ce4:	af 92       	push	r10
    2ce6:	cf 92       	push	r12
    2ce8:	ef 92       	push	r14
    2cea:	0f 93       	push	r16
    2cec:	81 2c       	mov	r8, r1
    2cee:	91 2c       	mov	r9, r1
    2cf0:	68 94       	set
    2cf2:	aa 24       	eor	r10, r10
    2cf4:	a7 f8       	bld	r10, 7
    2cf6:	68 94       	set
    2cf8:	cc 24       	eor	r12, r12
    2cfa:	c7 f8       	bld	r12, 7
    2cfc:	e1 2c       	mov	r14, r1
    2cfe:	00 e0       	ldi	r16, 0x00	; 0
    2d00:	23 e0       	ldi	r18, 0x03	; 3
    2d02:	40 e0       	ldi	r20, 0x00	; 0
    2d04:	51 ee       	ldi	r21, 0xE1	; 225
    2d06:	60 e0       	ldi	r22, 0x00	; 0
    2d08:	70 e0       	ldi	r23, 0x00	; 0
    2d0a:	3f d1       	rcall	.+638    	; 0x2f8a <serial_create>
    2d0c:	90 93 6e 11 	sts	0x116E, r25	; 0x80116e <_com_serial_instance+0x1>
    2d10:	80 93 6d 11 	sts	0x116D, r24	; 0x80116d <_com_serial_instance>
    2d14:	e9 e9       	ldi	r30, 0x99	; 153
    2d16:	f1 e1       	ldi	r31, 0x11	; 17
    2d18:	87 e0       	ldi	r24, 0x07	; 7
    2d1a:	92 e0       	ldi	r25, 0x02	; 2
    2d1c:	91 83       	std	Z+1, r25	; 0x01
    2d1e:	80 83       	st	Z, r24
    2d20:	93 83       	std	Z+3, r25	; 0x03
    2d22:	82 83       	std	Z+2, r24	; 0x02
    2d24:	0f 91       	pop	r16
    2d26:	ef 90       	pop	r14
    2d28:	cf 90       	pop	r12
    2d2a:	af 90       	pop	r10
    2d2c:	9f 90       	pop	r9
    2d2e:	8f 90       	pop	r8
    2d30:	08 95       	ret

00002d32 <_turn_off>:
    2d32:	90 e0       	ldi	r25, 0x00	; 0
    2d34:	fc 01       	movw	r30, r24
    2d36:	ee 0f       	add	r30, r30
    2d38:	ff 1f       	adc	r31, r31
    2d3a:	e8 0f       	add	r30, r24
    2d3c:	f9 1f       	adc	r31, r25
    2d3e:	ee 0f       	add	r30, r30
    2d40:	ff 1f       	adc	r31, r31
    2d42:	e1 59       	subi	r30, 0x91	; 145
    2d44:	fe 4e       	sbci	r31, 0xEE	; 238
    2d46:	23 81       	ldd	r18, Z+3	; 0x03
    2d48:	21 11       	cpse	r18, r1
    2d4a:	1f c0       	rjmp	.+62     	; 0x2d8a <_turn_off+0x58>
    2d4c:	9c 01       	movw	r18, r24
    2d4e:	22 0f       	add	r18, r18
    2d50:	33 1f       	adc	r19, r19
    2d52:	f9 01       	movw	r30, r18
    2d54:	e8 0f       	add	r30, r24
    2d56:	f9 1f       	adc	r31, r25
    2d58:	ee 0f       	add	r30, r30
    2d5a:	ff 1f       	adc	r31, r31
    2d5c:	e1 59       	subi	r30, 0x91	; 145
    2d5e:	fe 4e       	sbci	r31, 0xEE	; 238
    2d60:	a0 81       	ld	r26, Z
    2d62:	b1 81       	ldd	r27, Z+1	; 0x01
    2d64:	4c 91       	ld	r20, X
    2d66:	f9 01       	movw	r30, r18
    2d68:	e8 0f       	add	r30, r24
    2d6a:	f9 1f       	adc	r31, r25
    2d6c:	ee 0f       	add	r30, r30
    2d6e:	ff 1f       	adc	r31, r31
    2d70:	e1 59       	subi	r30, 0x91	; 145
    2d72:	fe 4e       	sbci	r31, 0xEE	; 238
    2d74:	81 e0       	ldi	r24, 0x01	; 1
    2d76:	90 e0       	ldi	r25, 0x00	; 0
    2d78:	02 80       	ldd	r0, Z+2	; 0x02
    2d7a:	02 c0       	rjmp	.+4      	; 0x2d80 <_turn_off+0x4e>
    2d7c:	88 0f       	add	r24, r24
    2d7e:	99 1f       	adc	r25, r25
    2d80:	0a 94       	dec	r0
    2d82:	e2 f7       	brpl	.-8      	; 0x2d7c <_turn_off+0x4a>
    2d84:	84 2b       	or	r24, r20
    2d86:	8c 93       	st	X, r24
    2d88:	08 95       	ret
    2d8a:	fc 01       	movw	r30, r24
    2d8c:	ee 0f       	add	r30, r30
    2d8e:	ff 1f       	adc	r31, r31
    2d90:	df 01       	movw	r26, r30
    2d92:	a8 0f       	add	r26, r24
    2d94:	b9 1f       	adc	r27, r25
    2d96:	aa 0f       	add	r26, r26
    2d98:	bb 1f       	adc	r27, r27
    2d9a:	a1 59       	subi	r26, 0x91	; 145
    2d9c:	be 4e       	sbci	r27, 0xEE	; 238
    2d9e:	0d 90       	ld	r0, X+
    2da0:	bc 91       	ld	r27, X
    2da2:	a0 2d       	mov	r26, r0
    2da4:	2c 91       	ld	r18, X
    2da6:	e8 0f       	add	r30, r24
    2da8:	f9 1f       	adc	r31, r25
    2daa:	ee 0f       	add	r30, r30
    2dac:	ff 1f       	adc	r31, r31
    2dae:	e1 59       	subi	r30, 0x91	; 145
    2db0:	fe 4e       	sbci	r31, 0xEE	; 238
    2db2:	81 e0       	ldi	r24, 0x01	; 1
    2db4:	90 e0       	ldi	r25, 0x00	; 0
    2db6:	02 80       	ldd	r0, Z+2	; 0x02
    2db8:	02 c0       	rjmp	.+4      	; 0x2dbe <_turn_off+0x8c>
    2dba:	88 0f       	add	r24, r24
    2dbc:	99 1f       	adc	r25, r25
    2dbe:	0a 94       	dec	r0
    2dc0:	e2 f7       	brpl	.-8      	; 0x2dba <_turn_off+0x88>
    2dc2:	80 95       	com	r24
    2dc4:	82 23       	and	r24, r18
    2dc6:	8c 93       	st	X, r24
    2dc8:	08 95       	ret

00002dca <_turn_on>:
    2dca:	90 e0       	ldi	r25, 0x00	; 0
    2dcc:	fc 01       	movw	r30, r24
    2dce:	ee 0f       	add	r30, r30
    2dd0:	ff 1f       	adc	r31, r31
    2dd2:	e8 0f       	add	r30, r24
    2dd4:	f9 1f       	adc	r31, r25
    2dd6:	ee 0f       	add	r30, r30
    2dd8:	ff 1f       	adc	r31, r31
    2dda:	e1 59       	subi	r30, 0x91	; 145
    2ddc:	fe 4e       	sbci	r31, 0xEE	; 238
    2dde:	23 81       	ldd	r18, Z+3	; 0x03
    2de0:	21 11       	cpse	r18, r1
    2de2:	20 c0       	rjmp	.+64     	; 0x2e24 <_turn_on+0x5a>
    2de4:	9c 01       	movw	r18, r24
    2de6:	22 0f       	add	r18, r18
    2de8:	33 1f       	adc	r19, r19
    2dea:	f9 01       	movw	r30, r18
    2dec:	e8 0f       	add	r30, r24
    2dee:	f9 1f       	adc	r31, r25
    2df0:	ee 0f       	add	r30, r30
    2df2:	ff 1f       	adc	r31, r31
    2df4:	e1 59       	subi	r30, 0x91	; 145
    2df6:	fe 4e       	sbci	r31, 0xEE	; 238
    2df8:	a0 81       	ld	r26, Z
    2dfa:	b1 81       	ldd	r27, Z+1	; 0x01
    2dfc:	4c 91       	ld	r20, X
    2dfe:	f9 01       	movw	r30, r18
    2e00:	e8 0f       	add	r30, r24
    2e02:	f9 1f       	adc	r31, r25
    2e04:	ee 0f       	add	r30, r30
    2e06:	ff 1f       	adc	r31, r31
    2e08:	e1 59       	subi	r30, 0x91	; 145
    2e0a:	fe 4e       	sbci	r31, 0xEE	; 238
    2e0c:	81 e0       	ldi	r24, 0x01	; 1
    2e0e:	90 e0       	ldi	r25, 0x00	; 0
    2e10:	02 80       	ldd	r0, Z+2	; 0x02
    2e12:	02 c0       	rjmp	.+4      	; 0x2e18 <_turn_on+0x4e>
    2e14:	88 0f       	add	r24, r24
    2e16:	99 1f       	adc	r25, r25
    2e18:	0a 94       	dec	r0
    2e1a:	e2 f7       	brpl	.-8      	; 0x2e14 <_turn_on+0x4a>
    2e1c:	80 95       	com	r24
    2e1e:	84 23       	and	r24, r20
    2e20:	8c 93       	st	X, r24
    2e22:	08 95       	ret
    2e24:	fc 01       	movw	r30, r24
    2e26:	ee 0f       	add	r30, r30
    2e28:	ff 1f       	adc	r31, r31
    2e2a:	df 01       	movw	r26, r30
    2e2c:	a8 0f       	add	r26, r24
    2e2e:	b9 1f       	adc	r27, r25
    2e30:	aa 0f       	add	r26, r26
    2e32:	bb 1f       	adc	r27, r27
    2e34:	a1 59       	subi	r26, 0x91	; 145
    2e36:	be 4e       	sbci	r27, 0xEE	; 238
    2e38:	0d 90       	ld	r0, X+
    2e3a:	bc 91       	ld	r27, X
    2e3c:	a0 2d       	mov	r26, r0
    2e3e:	2c 91       	ld	r18, X
    2e40:	e8 0f       	add	r30, r24
    2e42:	f9 1f       	adc	r31, r25
    2e44:	ee 0f       	add	r30, r30
    2e46:	ff 1f       	adc	r31, r31
    2e48:	e1 59       	subi	r30, 0x91	; 145
    2e4a:	fe 4e       	sbci	r31, 0xEE	; 238
    2e4c:	81 e0       	ldi	r24, 0x01	; 1
    2e4e:	90 e0       	ldi	r25, 0x00	; 0
    2e50:	02 80       	ldd	r0, Z+2	; 0x02
    2e52:	02 c0       	rjmp	.+4      	; 0x2e58 <_turn_on+0x8e>
    2e54:	88 0f       	add	r24, r24
    2e56:	99 1f       	adc	r25, r25
    2e58:	0a 94       	dec	r0
    2e5a:	e2 f7       	brpl	.-8      	; 0x2e54 <_turn_on+0x8a>
    2e5c:	82 2b       	or	r24, r18
    2e5e:	8c 93       	st	X, r24
    2e60:	08 95       	ret

00002e62 <_hal_led_task>:
    2e62:	cc 24       	eor	r12, r12
    2e64:	c3 94       	inc	r12
    2e66:	d1 2c       	mov	r13, r1
    2e68:	68 94       	set
    2e6a:	bb 24       	eor	r11, r11
    2e6c:	b2 f8       	bld	r11, 2
    2e6e:	cf e6       	ldi	r28, 0x6F	; 111
    2e70:	d1 e1       	ldi	r29, 0x11	; 17
    2e72:	10 e0       	ldi	r17, 0x00	; 0
    2e74:	8c 81       	ldd	r24, Y+4	; 0x04
    2e76:	81 30       	cpi	r24, 0x01	; 1
    2e78:	81 f0       	breq	.+32     	; 0x2e9a <_hal_led_task+0x38>
    2e7a:	18 f1       	brcs	.+70     	; 0x2ec2 <_hal_led_task+0x60>
    2e7c:	82 30       	cpi	r24, 0x02	; 2
    2e7e:	61 f5       	brne	.+88     	; 0x2ed8 <_hal_led_task+0x76>
    2e80:	e8 81       	ld	r30, Y
    2e82:	f9 81       	ldd	r31, Y+1	; 0x01
    2e84:	20 81       	ld	r18, Z
    2e86:	c6 01       	movw	r24, r12
    2e88:	0a 80       	ldd	r0, Y+2	; 0x02
    2e8a:	02 c0       	rjmp	.+4      	; 0x2e90 <_hal_led_task+0x2e>
    2e8c:	88 0f       	add	r24, r24
    2e8e:	99 1f       	adc	r25, r25
    2e90:	0a 94       	dec	r0
    2e92:	e2 f7       	brpl	.-8      	; 0x2e8c <_hal_led_task+0x2a>
    2e94:	82 27       	eor	r24, r18
    2e96:	80 83       	st	Z, r24
    2e98:	1f c0       	rjmp	.+62     	; 0x2ed8 <_hal_led_task+0x76>
    2e9a:	8d 81       	ldd	r24, Y+5	; 0x05
    2e9c:	8f 5f       	subi	r24, 0xFF	; 255
    2e9e:	86 30       	cpi	r24, 0x06	; 6
    2ea0:	10 f4       	brcc	.+4      	; 0x2ea6 <_hal_led_task+0x44>
    2ea2:	8d 83       	std	Y+5, r24	; 0x05
    2ea4:	19 c0       	rjmp	.+50     	; 0x2ed8 <_hal_led_task+0x76>
    2ea6:	1d 82       	std	Y+5, r1	; 0x05
    2ea8:	e8 81       	ld	r30, Y
    2eaa:	f9 81       	ldd	r31, Y+1	; 0x01
    2eac:	20 81       	ld	r18, Z
    2eae:	c6 01       	movw	r24, r12
    2eb0:	0a 80       	ldd	r0, Y+2	; 0x02
    2eb2:	02 c0       	rjmp	.+4      	; 0x2eb8 <_hal_led_task+0x56>
    2eb4:	88 0f       	add	r24, r24
    2eb6:	99 1f       	adc	r25, r25
    2eb8:	0a 94       	dec	r0
    2eba:	e2 f7       	brpl	.-8      	; 0x2eb4 <_hal_led_task+0x52>
    2ebc:	82 27       	eor	r24, r18
    2ebe:	80 83       	st	Z, r24
    2ec0:	0b c0       	rjmp	.+22     	; 0x2ed8 <_hal_led_task+0x76>
    2ec2:	0d 81       	ldd	r16, Y+5	; 0x05
    2ec4:	00 23       	and	r16, r16
    2ec6:	29 f0       	breq	.+10     	; 0x2ed2 <_hal_led_task+0x70>
    2ec8:	81 2f       	mov	r24, r17
    2eca:	7f df       	rcall	.-258    	; 0x2dca <_turn_on>
    2ecc:	01 50       	subi	r16, 0x01	; 1
    2ece:	0d 83       	std	Y+5, r16	; 0x05
    2ed0:	03 c0       	rjmp	.+6      	; 0x2ed8 <_hal_led_task+0x76>
    2ed2:	bc 82       	std	Y+4, r11	; 0x04
    2ed4:	81 2f       	mov	r24, r17
    2ed6:	2d df       	rcall	.-422    	; 0x2d32 <_turn_off>
    2ed8:	1f 5f       	subi	r17, 0xFF	; 255
    2eda:	26 96       	adiw	r28, 0x06	; 6
    2edc:	14 30       	cpi	r17, 0x04	; 4
    2ede:	51 f6       	brne	.-108    	; 0x2e74 <_hal_led_task+0x12>
    2ee0:	6c e0       	ldi	r22, 0x0C	; 12
    2ee2:	70 e0       	ldi	r23, 0x00	; 0
    2ee4:	80 e0       	ldi	r24, 0x00	; 0
    2ee6:	90 e0       	ldi	r25, 0x00	; 0
    2ee8:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <vTaskDelay>
    2eec:	c0 cf       	rjmp	.-128    	; 0x2e6e <_hal_led_task+0xc>

00002eee <status_leds_initialise>:
    2eee:	ef 92       	push	r14
    2ef0:	ff 92       	push	r15
    2ef2:	0f 93       	push	r16
    2ef4:	1f 93       	push	r17
    2ef6:	cf 93       	push	r28
    2ef8:	df 93       	push	r29
    2efa:	08 2f       	mov	r16, r24
    2efc:	80 e4       	ldi	r24, 0x40	; 64
    2efe:	87 b9       	out	0x07, r24	; 7
    2f00:	cf e6       	ldi	r28, 0x6F	; 111
    2f02:	d1 e1       	ldi	r29, 0x11	; 17
    2f04:	0f 2e       	mov	r0, r31
    2f06:	f8 e2       	ldi	r31, 0x28	; 40
    2f08:	ef 2e       	mov	r14, r31
    2f0a:	f1 2c       	mov	r15, r1
    2f0c:	f0 2d       	mov	r31, r0
    2f0e:	f9 82       	std	Y+1, r15	; 0x01
    2f10:	e8 82       	st	Y, r14
    2f12:	86 e0       	ldi	r24, 0x06	; 6
    2f14:	8a 83       	std	Y+2, r24	; 0x02
    2f16:	1b 82       	std	Y+3, r1	; 0x03
    2f18:	14 e0       	ldi	r17, 0x04	; 4
    2f1a:	1c 83       	std	Y+4, r17	; 0x04
    2f1c:	80 e0       	ldi	r24, 0x00	; 0
    2f1e:	09 df       	rcall	.-494    	; 0x2d32 <_turn_off>
    2f20:	80 e8       	ldi	r24, 0x80	; 128
    2f22:	87 b9       	out	0x07, r24	; 7
    2f24:	ff 82       	std	Y+7, r15	; 0x07
    2f26:	ee 82       	std	Y+6, r14	; 0x06
    2f28:	87 e0       	ldi	r24, 0x07	; 7
    2f2a:	88 87       	std	Y+8, r24	; 0x08
    2f2c:	19 86       	std	Y+9, r1	; 0x09
    2f2e:	1a 87       	std	Y+10, r17	; 0x0a
    2f30:	81 e0       	ldi	r24, 0x01	; 1
    2f32:	ff de       	rcall	.-514    	; 0x2d32 <_turn_off>
    2f34:	80 e2       	ldi	r24, 0x20	; 32
    2f36:	83 bb       	out	0x13, r24	; 19
    2f38:	84 e3       	ldi	r24, 0x34	; 52
    2f3a:	90 e0       	ldi	r25, 0x00	; 0
    2f3c:	9d 87       	std	Y+13, r25	; 0x0d
    2f3e:	8c 87       	std	Y+12, r24	; 0x0c
    2f40:	85 e0       	ldi	r24, 0x05	; 5
    2f42:	8e 87       	std	Y+14, r24	; 0x0e
    2f44:	1f 86       	std	Y+15, r1	; 0x0f
    2f46:	18 8b       	std	Y+16, r17	; 0x10
    2f48:	82 e0       	ldi	r24, 0x02	; 2
    2f4a:	f3 de       	rcall	.-538    	; 0x2d32 <_turn_off>
    2f4c:	80 e1       	ldi	r24, 0x10	; 16
    2f4e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x7c0101>
    2f52:	82 e0       	ldi	r24, 0x02	; 2
    2f54:	91 e0       	ldi	r25, 0x01	; 1
    2f56:	9b 8b       	std	Y+19, r25	; 0x13
    2f58:	8a 8b       	std	Y+18, r24	; 0x12
    2f5a:	1c 8b       	std	Y+20, r17	; 0x14
    2f5c:	1d 8a       	std	Y+21, r1	; 0x15
    2f5e:	1e 8b       	std	Y+22, r17	; 0x16
    2f60:	83 e0       	ldi	r24, 0x03	; 3
    2f62:	e7 de       	rcall	.-562    	; 0x2d32 <_turn_off>
    2f64:	e1 2c       	mov	r14, r1
    2f66:	f1 2c       	mov	r15, r1
    2f68:	20 e0       	ldi	r18, 0x00	; 0
    2f6a:	30 e0       	ldi	r19, 0x00	; 0
    2f6c:	40 ec       	ldi	r20, 0xC0	; 192
    2f6e:	50 e0       	ldi	r21, 0x00	; 0
    2f70:	62 ec       	ldi	r22, 0xC2	; 194
    2f72:	72 e0       	ldi	r23, 0x02	; 2
    2f74:	81 e3       	ldi	r24, 0x31	; 49
    2f76:	97 e1       	ldi	r25, 0x17	; 23
    2f78:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <xTaskCreate>
    2f7c:	df 91       	pop	r29
    2f7e:	cf 91       	pop	r28
    2f80:	1f 91       	pop	r17
    2f82:	0f 91       	pop	r16
    2f84:	ff 90       	pop	r15
    2f86:	ef 90       	pop	r14
    2f88:	08 95       	ret

00002f8a <serial_create>:
    2f8a:	2f 92       	push	r2
    2f8c:	3f 92       	push	r3
    2f8e:	4f 92       	push	r4
    2f90:	5f 92       	push	r5
    2f92:	6f 92       	push	r6
    2f94:	7f 92       	push	r7
    2f96:	8f 92       	push	r8
    2f98:	9f 92       	push	r9
    2f9a:	af 92       	push	r10
    2f9c:	cf 92       	push	r12
    2f9e:	ef 92       	push	r14
    2fa0:	ff 92       	push	r15
    2fa2:	0f 93       	push	r16
    2fa4:	1f 93       	push	r17
    2fa6:	cf 93       	push	r28
    2fa8:	df 93       	push	r29
    2faa:	cd b7       	in	r28, 0x3d	; 61
    2fac:	de b7       	in	r29, 0x3e	; 62
    2fae:	f8 2e       	mov	r15, r24
    2fb0:	2a 01       	movw	r4, r20
    2fb2:	3b 01       	movw	r6, r22
    2fb4:	88 e0       	ldi	r24, 0x08	; 8
    2fb6:	90 e0       	ldi	r25, 0x00	; 0
    2fb8:	29 d5       	rcall	.+2642   	; 0x3a0c <malloc>
    2fba:	8c 01       	movw	r16, r24
    2fbc:	8f 2d       	mov	r24, r15
    2fbe:	90 e0       	ldi	r25, 0x00	; 0
    2fc0:	fc 01       	movw	r30, r24
    2fc2:	ee 0f       	add	r30, r30
    2fc4:	ff 1f       	adc	r31, r31
    2fc6:	e9 57       	subi	r30, 0x79	; 121
    2fc8:	fe 4e       	sbci	r31, 0xEE	; 238
    2fca:	11 83       	std	Z+1, r17	; 0x01
    2fcc:	00 83       	st	Z, r16
    2fce:	01 15       	cp	r16, r1
    2fd0:	11 05       	cpc	r17, r1
    2fd2:	09 f4       	brne	.+2      	; 0x2fd6 <serial_create+0x4c>
    2fd4:	64 c0       	rjmp	.+200    	; 0x309e <serial_create+0x114>
    2fd6:	88 0f       	add	r24, r24
    2fd8:	99 1f       	adc	r25, r25
    2fda:	fc 01       	movw	r30, r24
    2fdc:	eb 5e       	subi	r30, 0xEB	; 235
    2fde:	fd 4f       	sbci	r31, 0xFD	; 253
    2fe0:	80 81       	ld	r24, Z
    2fe2:	91 81       	ldd	r25, Z+1	; 0x01
    2fe4:	d8 01       	movw	r26, r16
    2fe6:	8d 93       	st	X+, r24
    2fe8:	9c 93       	st	X, r25
    2fea:	8c 2d       	mov	r24, r12
    2fec:	90 e0       	ldi	r25, 0x00	; 0
    2fee:	88 0f       	add	r24, r24
    2ff0:	99 1f       	adc	r25, r25
    2ff2:	88 0f       	add	r24, r24
    2ff4:	99 1f       	adc	r25, r25
    2ff6:	0a d5       	rcall	.+2580   	; 0x3a0c <malloc>
    2ff8:	1c 01       	movw	r2, r24
    2ffa:	86 e0       	ldi	r24, 0x06	; 6
    2ffc:	90 e0       	ldi	r25, 0x00	; 0
    2ffe:	06 d5       	rcall	.+2572   	; 0x3a0c <malloc>
    3000:	7c 01       	movw	r14, r24
    3002:	4c 2d       	mov	r20, r12
    3004:	b1 01       	movw	r22, r2
    3006:	00 d3       	rcall	.+1536   	; 0x3608 <fifo_init>
    3008:	f8 01       	movw	r30, r16
    300a:	f5 82       	std	Z+5, r15	; 0x05
    300c:	e4 82       	std	Z+4, r14	; 0x04
    300e:	8a 2d       	mov	r24, r10
    3010:	90 e0       	ldi	r25, 0x00	; 0
    3012:	88 0f       	add	r24, r24
    3014:	99 1f       	adc	r25, r25
    3016:	88 0f       	add	r24, r24
    3018:	99 1f       	adc	r25, r25
    301a:	f8 d4       	rcall	.+2544   	; 0x3a0c <malloc>
    301c:	1c 01       	movw	r2, r24
    301e:	86 e0       	ldi	r24, 0x06	; 6
    3020:	90 e0       	ldi	r25, 0x00	; 0
    3022:	f4 d4       	rcall	.+2536   	; 0x3a0c <malloc>
    3024:	7c 01       	movw	r14, r24
    3026:	4a 2d       	mov	r20, r10
    3028:	b1 01       	movw	r22, r2
    302a:	ee d2       	rcall	.+1500   	; 0x3608 <fifo_init>
    302c:	d8 01       	movw	r26, r16
    302e:	13 96       	adiw	r26, 0x03	; 3
    3030:	fc 92       	st	X, r15
    3032:	ee 92       	st	-X, r14
    3034:	12 97       	sbiw	r26, 0x02	; 2
    3036:	17 96       	adiw	r26, 0x07	; 7
    3038:	9c 92       	st	X, r9
    303a:	8e 92       	st	-X, r8
    303c:	16 97       	sbiw	r26, 0x06	; 6
    303e:	ff b6       	in	r15, 0x3f	; 63
    3040:	f8 94       	cli
    3042:	ed 91       	ld	r30, X+
    3044:	fc 91       	ld	r31, X
    3046:	11 97       	sbiw	r26, 0x01	; 1
    3048:	36 97       	sbiw	r30, 0x06	; 6
    304a:	80 81       	ld	r24, Z
    304c:	82 60       	ori	r24, 0x02	; 2
    304e:	80 83       	st	Z, r24
    3050:	8d 90       	ld	r8, X+
    3052:	9c 90       	ld	r9, X
    3054:	c3 01       	movw	r24, r6
    3056:	b2 01       	movw	r22, r4
    3058:	c0 dd       	rcall	.-1152   	; 0x2bda <__floatunsisf>
    305a:	20 e0       	ldi	r18, 0x00	; 0
    305c:	30 e0       	ldi	r19, 0x00	; 0
    305e:	40 e0       	ldi	r20, 0x00	; 0
    3060:	51 e4       	ldi	r21, 0x41	; 65
    3062:	38 d4       	rcall	.+2160   	; 0x38d4 <__mulsf3>
    3064:	9b 01       	movw	r18, r22
    3066:	ac 01       	movw	r20, r24
    3068:	60 e0       	ldi	r22, 0x00	; 0
    306a:	74 e2       	ldi	r23, 0x24	; 36
    306c:	84 e7       	ldi	r24, 0x74	; 116
    306e:	9b e4       	ldi	r25, 0x4B	; 75
    3070:	4c d3       	rcall	.+1688   	; 0x370a <__divsf3>
    3072:	20 e0       	ldi	r18, 0x00	; 0
    3074:	30 e0       	ldi	r19, 0x00	; 0
    3076:	40 e8       	ldi	r20, 0x80	; 128
    3078:	5f e3       	ldi	r21, 0x3F	; 63
    307a:	e2 d2       	rcall	.+1476   	; 0x3640 <__subsf3>
    307c:	ae d3       	rcall	.+1884   	; 0x37da <__fixunssfsi>
    307e:	f4 01       	movw	r30, r8
    3080:	32 97       	sbiw	r30, 0x02	; 2
    3082:	60 83       	st	Z, r22
    3084:	d8 01       	movw	r26, r16
    3086:	ed 91       	ld	r30, X+
    3088:	fc 91       	ld	r31, X
    308a:	11 97       	sbiw	r26, 0x01	; 1
    308c:	35 97       	sbiw	r30, 0x05	; 5
    308e:	88 e9       	ldi	r24, 0x98	; 152
    3090:	80 83       	st	Z, r24
    3092:	ed 91       	ld	r30, X+
    3094:	fc 91       	ld	r31, X
    3096:	34 97       	sbiw	r30, 0x04	; 4
    3098:	86 e0       	ldi	r24, 0x06	; 6
    309a:	80 83       	st	Z, r24
    309c:	ff be       	out	0x3f, r15	; 63
    309e:	c8 01       	movw	r24, r16
    30a0:	df 91       	pop	r29
    30a2:	cf 91       	pop	r28
    30a4:	1f 91       	pop	r17
    30a6:	0f 91       	pop	r16
    30a8:	ff 90       	pop	r15
    30aa:	ef 90       	pop	r14
    30ac:	cf 90       	pop	r12
    30ae:	af 90       	pop	r10
    30b0:	9f 90       	pop	r9
    30b2:	8f 90       	pop	r8
    30b4:	7f 90       	pop	r7
    30b6:	6f 90       	pop	r6
    30b8:	5f 90       	pop	r5
    30ba:	4f 90       	pop	r4
    30bc:	3f 90       	pop	r3
    30be:	2f 90       	pop	r2
    30c0:	08 95       	ret

000030c2 <serial_sendByte>:
    30c2:	cf 93       	push	r28
    30c4:	df 93       	push	r29
    30c6:	dc 01       	movw	r26, r24
    30c8:	89 2b       	or	r24, r25
    30ca:	01 f1       	breq	.+64     	; 0x310c <serial_sendByte+0x4a>
    30cc:	12 96       	adiw	r26, 0x02	; 2
    30ce:	ed 91       	ld	r30, X+
    30d0:	fc 91       	ld	r31, X
    30d2:	13 97       	sbiw	r26, 0x03	; 3
    30d4:	93 81       	ldd	r25, Z+3	; 0x03
    30d6:	82 81       	ldd	r24, Z+2	; 0x02
    30d8:	25 81       	ldd	r18, Z+5	; 0x05
    30da:	98 1b       	sub	r25, r24
    30dc:	92 23       	and	r25, r18
    30de:	84 81       	ldd	r24, Z+4	; 0x04
    30e0:	98 17       	cp	r25, r24
    30e2:	b1 f0       	breq	.+44     	; 0x3110 <serial_sendByte+0x4e>
    30e4:	83 81       	ldd	r24, Z+3	; 0x03
    30e6:	26 95       	lsr	r18
    30e8:	28 23       	and	r18, r24
    30ea:	c0 81       	ld	r28, Z
    30ec:	d1 81       	ldd	r29, Z+1	; 0x01
    30ee:	c2 0f       	add	r28, r18
    30f0:	d1 1d       	adc	r29, r1
    30f2:	68 83       	st	Y, r22
    30f4:	8f 5f       	subi	r24, 0xFF	; 255
    30f6:	95 81       	ldd	r25, Z+5	; 0x05
    30f8:	89 23       	and	r24, r25
    30fa:	83 83       	std	Z+3, r24	; 0x03
    30fc:	ed 91       	ld	r30, X+
    30fe:	fc 91       	ld	r31, X
    3100:	35 97       	sbiw	r30, 0x05	; 5
    3102:	80 81       	ld	r24, Z
    3104:	80 62       	ori	r24, 0x20	; 32
    3106:	80 83       	st	Z, r24
    3108:	80 e0       	ldi	r24, 0x00	; 0
    310a:	03 c0       	rjmp	.+6      	; 0x3112 <serial_sendByte+0x50>
    310c:	81 e0       	ldi	r24, 0x01	; 1
    310e:	01 c0       	rjmp	.+2      	; 0x3112 <serial_sendByte+0x50>
    3110:	82 e0       	ldi	r24, 0x02	; 2
    3112:	df 91       	pop	r29
    3114:	cf 91       	pop	r28
    3116:	08 95       	ret

00003118 <serial_getByte>:
    3118:	00 97       	sbiw	r24, 0x00	; 0
    311a:	d1 f0       	breq	.+52     	; 0x3150 <serial_getByte+0x38>
    311c:	dc 01       	movw	r26, r24
    311e:	14 96       	adiw	r26, 0x04	; 4
    3120:	ed 91       	ld	r30, X+
    3122:	fc 91       	ld	r31, X
    3124:	15 97       	sbiw	r26, 0x05	; 5
    3126:	93 81       	ldd	r25, Z+3	; 0x03
    3128:	82 81       	ldd	r24, Z+2	; 0x02
    312a:	98 17       	cp	r25, r24
    312c:	99 f0       	breq	.+38     	; 0x3154 <serial_getByte+0x3c>
    312e:	92 81       	ldd	r25, Z+2	; 0x02
    3130:	85 81       	ldd	r24, Z+5	; 0x05
    3132:	86 95       	lsr	r24
    3134:	89 23       	and	r24, r25
    3136:	a0 81       	ld	r26, Z
    3138:	b1 81       	ldd	r27, Z+1	; 0x01
    313a:	a8 0f       	add	r26, r24
    313c:	b1 1d       	adc	r27, r1
    313e:	8c 91       	ld	r24, X
    3140:	db 01       	movw	r26, r22
    3142:	8c 93       	st	X, r24
    3144:	9f 5f       	subi	r25, 0xFF	; 255
    3146:	85 81       	ldd	r24, Z+5	; 0x05
    3148:	98 23       	and	r25, r24
    314a:	92 83       	std	Z+2, r25	; 0x02
    314c:	80 e0       	ldi	r24, 0x00	; 0
    314e:	08 95       	ret
    3150:	81 e0       	ldi	r24, 0x01	; 1
    3152:	08 95       	ret
    3154:	83 e0       	ldi	r24, 0x03	; 3
    3156:	08 95       	ret

00003158 <__vector_25>:
    3158:	1f 92       	push	r1
    315a:	0f 92       	push	r0
    315c:	0f b6       	in	r0, 0x3f	; 63
    315e:	0f 92       	push	r0
    3160:	11 24       	eor	r1, r1
    3162:	0b b6       	in	r0, 0x3b	; 59
    3164:	0f 92       	push	r0
    3166:	2f 93       	push	r18
    3168:	3f 93       	push	r19
    316a:	4f 93       	push	r20
    316c:	5f 93       	push	r21
    316e:	6f 93       	push	r22
    3170:	7f 93       	push	r23
    3172:	8f 93       	push	r24
    3174:	9f 93       	push	r25
    3176:	af 93       	push	r26
    3178:	bf 93       	push	r27
    317a:	cf 93       	push	r28
    317c:	df 93       	push	r29
    317e:	ef 93       	push	r30
    3180:	ff 93       	push	r31
    3182:	a0 91 87 11 	lds	r26, 0x1187	; 0x801187 <_ser_handle>
    3186:	b0 91 88 11 	lds	r27, 0x1188	; 0x801188 <_ser_handle+0x1>
    318a:	10 97       	sbiw	r26, 0x00	; 0
    318c:	11 f1       	breq	.+68     	; 0x31d2 <__vector_25+0x7a>
    318e:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    3192:	14 96       	adiw	r26, 0x04	; 4
    3194:	ed 91       	ld	r30, X+
    3196:	fc 91       	ld	r31, X
    3198:	15 97       	sbiw	r26, 0x05	; 5
    319a:	93 81       	ldd	r25, Z+3	; 0x03
    319c:	82 81       	ldd	r24, Z+2	; 0x02
    319e:	25 81       	ldd	r18, Z+5	; 0x05
    31a0:	98 1b       	sub	r25, r24
    31a2:	92 23       	and	r25, r18
    31a4:	84 81       	ldd	r24, Z+4	; 0x04
    31a6:	98 17       	cp	r25, r24
    31a8:	61 f0       	breq	.+24     	; 0x31c2 <__vector_25+0x6a>
    31aa:	83 81       	ldd	r24, Z+3	; 0x03
    31ac:	26 95       	lsr	r18
    31ae:	28 23       	and	r18, r24
    31b0:	c0 81       	ld	r28, Z
    31b2:	d1 81       	ldd	r29, Z+1	; 0x01
    31b4:	c2 0f       	add	r28, r18
    31b6:	d1 1d       	adc	r29, r1
    31b8:	68 83       	st	Y, r22
    31ba:	8f 5f       	subi	r24, 0xFF	; 255
    31bc:	95 81       	ldd	r25, Z+5	; 0x05
    31be:	89 23       	and	r24, r25
    31c0:	83 83       	std	Z+3, r24	; 0x03
    31c2:	16 96       	adiw	r26, 0x06	; 6
    31c4:	ed 91       	ld	r30, X+
    31c6:	fc 91       	ld	r31, X
    31c8:	17 97       	sbiw	r26, 0x07	; 7
    31ca:	30 97       	sbiw	r30, 0x00	; 0
    31cc:	11 f0       	breq	.+4      	; 0x31d2 <__vector_25+0x7a>
    31ce:	cd 01       	movw	r24, r26
    31d0:	19 95       	eicall
    31d2:	ff 91       	pop	r31
    31d4:	ef 91       	pop	r30
    31d6:	df 91       	pop	r29
    31d8:	cf 91       	pop	r28
    31da:	bf 91       	pop	r27
    31dc:	af 91       	pop	r26
    31de:	9f 91       	pop	r25
    31e0:	8f 91       	pop	r24
    31e2:	7f 91       	pop	r23
    31e4:	6f 91       	pop	r22
    31e6:	5f 91       	pop	r21
    31e8:	4f 91       	pop	r20
    31ea:	3f 91       	pop	r19
    31ec:	2f 91       	pop	r18
    31ee:	0f 90       	pop	r0
    31f0:	0b be       	out	0x3b, r0	; 59
    31f2:	0f 90       	pop	r0
    31f4:	0f be       	out	0x3f, r0	; 63
    31f6:	0f 90       	pop	r0
    31f8:	1f 90       	pop	r1
    31fa:	18 95       	reti

000031fc <__vector_26>:
    31fc:	1f 92       	push	r1
    31fe:	0f 92       	push	r0
    3200:	0f b6       	in	r0, 0x3f	; 63
    3202:	0f 92       	push	r0
    3204:	11 24       	eor	r1, r1
    3206:	0b b6       	in	r0, 0x3b	; 59
    3208:	0f 92       	push	r0
    320a:	2f 93       	push	r18
    320c:	8f 93       	push	r24
    320e:	9f 93       	push	r25
    3210:	af 93       	push	r26
    3212:	bf 93       	push	r27
    3214:	ef 93       	push	r30
    3216:	ff 93       	push	r31
    3218:	e0 91 87 11 	lds	r30, 0x1187	; 0x801187 <_ser_handle>
    321c:	f0 91 88 11 	lds	r31, 0x1188	; 0x801188 <_ser_handle+0x1>
    3220:	30 97       	sbiw	r30, 0x00	; 0
    3222:	b9 f0       	breq	.+46     	; 0x3252 <__vector_26+0x56>
    3224:	02 80       	ldd	r0, Z+2	; 0x02
    3226:	f3 81       	ldd	r31, Z+3	; 0x03
    3228:	e0 2d       	mov	r30, r0
    322a:	93 81       	ldd	r25, Z+3	; 0x03
    322c:	82 81       	ldd	r24, Z+2	; 0x02
    322e:	98 17       	cp	r25, r24
    3230:	b1 f0       	breq	.+44     	; 0x325e <__vector_26+0x62>
    3232:	92 81       	ldd	r25, Z+2	; 0x02
    3234:	85 81       	ldd	r24, Z+5	; 0x05
    3236:	28 2f       	mov	r18, r24
    3238:	26 95       	lsr	r18
    323a:	29 23       	and	r18, r25
    323c:	a0 81       	ld	r26, Z
    323e:	b1 81       	ldd	r27, Z+1	; 0x01
    3240:	a2 0f       	add	r26, r18
    3242:	b1 1d       	adc	r27, r1
    3244:	2c 91       	ld	r18, X
    3246:	9f 5f       	subi	r25, 0xFF	; 255
    3248:	89 23       	and	r24, r25
    324a:	82 83       	std	Z+2, r24	; 0x02
    324c:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    3250:	0b c0       	rjmp	.+22     	; 0x3268 <__vector_26+0x6c>
    3252:	e1 ec       	ldi	r30, 0xC1	; 193
    3254:	f0 e0       	ldi	r31, 0x00	; 0
    3256:	80 81       	ld	r24, Z
    3258:	8f 7d       	andi	r24, 0xDF	; 223
    325a:	80 83       	st	Z, r24
    325c:	05 c0       	rjmp	.+10     	; 0x3268 <__vector_26+0x6c>
    325e:	e1 ec       	ldi	r30, 0xC1	; 193
    3260:	f0 e0       	ldi	r31, 0x00	; 0
    3262:	80 81       	ld	r24, Z
    3264:	8f 7d       	andi	r24, 0xDF	; 223
    3266:	80 83       	st	Z, r24
    3268:	ff 91       	pop	r31
    326a:	ef 91       	pop	r30
    326c:	bf 91       	pop	r27
    326e:	af 91       	pop	r26
    3270:	9f 91       	pop	r25
    3272:	8f 91       	pop	r24
    3274:	2f 91       	pop	r18
    3276:	0f 90       	pop	r0
    3278:	0b be       	out	0x3b, r0	; 59
    327a:	0f 90       	pop	r0
    327c:	0f be       	out	0x3f, r0	; 63
    327e:	0f 90       	pop	r0
    3280:	1f 90       	pop	r1
    3282:	18 95       	reti

00003284 <__vector_36>:
    3284:	1f 92       	push	r1
    3286:	0f 92       	push	r0
    3288:	0f b6       	in	r0, 0x3f	; 63
    328a:	0f 92       	push	r0
    328c:	11 24       	eor	r1, r1
    328e:	0b b6       	in	r0, 0x3b	; 59
    3290:	0f 92       	push	r0
    3292:	2f 93       	push	r18
    3294:	3f 93       	push	r19
    3296:	4f 93       	push	r20
    3298:	5f 93       	push	r21
    329a:	6f 93       	push	r22
    329c:	7f 93       	push	r23
    329e:	8f 93       	push	r24
    32a0:	9f 93       	push	r25
    32a2:	af 93       	push	r26
    32a4:	bf 93       	push	r27
    32a6:	cf 93       	push	r28
    32a8:	df 93       	push	r29
    32aa:	ef 93       	push	r30
    32ac:	ff 93       	push	r31
    32ae:	a0 91 89 11 	lds	r26, 0x1189	; 0x801189 <_ser_handle+0x2>
    32b2:	b0 91 8a 11 	lds	r27, 0x118A	; 0x80118a <_ser_handle+0x3>
    32b6:	10 97       	sbiw	r26, 0x00	; 0
    32b8:	11 f1       	breq	.+68     	; 0x32fe <__vector_36+0x7a>
    32ba:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    32be:	14 96       	adiw	r26, 0x04	; 4
    32c0:	ed 91       	ld	r30, X+
    32c2:	fc 91       	ld	r31, X
    32c4:	15 97       	sbiw	r26, 0x05	; 5
    32c6:	93 81       	ldd	r25, Z+3	; 0x03
    32c8:	82 81       	ldd	r24, Z+2	; 0x02
    32ca:	25 81       	ldd	r18, Z+5	; 0x05
    32cc:	98 1b       	sub	r25, r24
    32ce:	92 23       	and	r25, r18
    32d0:	84 81       	ldd	r24, Z+4	; 0x04
    32d2:	98 17       	cp	r25, r24
    32d4:	61 f0       	breq	.+24     	; 0x32ee <__vector_36+0x6a>
    32d6:	83 81       	ldd	r24, Z+3	; 0x03
    32d8:	26 95       	lsr	r18
    32da:	28 23       	and	r18, r24
    32dc:	c0 81       	ld	r28, Z
    32de:	d1 81       	ldd	r29, Z+1	; 0x01
    32e0:	c2 0f       	add	r28, r18
    32e2:	d1 1d       	adc	r29, r1
    32e4:	68 83       	st	Y, r22
    32e6:	8f 5f       	subi	r24, 0xFF	; 255
    32e8:	95 81       	ldd	r25, Z+5	; 0x05
    32ea:	89 23       	and	r24, r25
    32ec:	83 83       	std	Z+3, r24	; 0x03
    32ee:	16 96       	adiw	r26, 0x06	; 6
    32f0:	ed 91       	ld	r30, X+
    32f2:	fc 91       	ld	r31, X
    32f4:	17 97       	sbiw	r26, 0x07	; 7
    32f6:	30 97       	sbiw	r30, 0x00	; 0
    32f8:	11 f0       	breq	.+4      	; 0x32fe <__vector_36+0x7a>
    32fa:	cd 01       	movw	r24, r26
    32fc:	19 95       	eicall
    32fe:	ff 91       	pop	r31
    3300:	ef 91       	pop	r30
    3302:	df 91       	pop	r29
    3304:	cf 91       	pop	r28
    3306:	bf 91       	pop	r27
    3308:	af 91       	pop	r26
    330a:	9f 91       	pop	r25
    330c:	8f 91       	pop	r24
    330e:	7f 91       	pop	r23
    3310:	6f 91       	pop	r22
    3312:	5f 91       	pop	r21
    3314:	4f 91       	pop	r20
    3316:	3f 91       	pop	r19
    3318:	2f 91       	pop	r18
    331a:	0f 90       	pop	r0
    331c:	0b be       	out	0x3b, r0	; 59
    331e:	0f 90       	pop	r0
    3320:	0f be       	out	0x3f, r0	; 63
    3322:	0f 90       	pop	r0
    3324:	1f 90       	pop	r1
    3326:	18 95       	reti

00003328 <__vector_37>:
    3328:	1f 92       	push	r1
    332a:	0f 92       	push	r0
    332c:	0f b6       	in	r0, 0x3f	; 63
    332e:	0f 92       	push	r0
    3330:	11 24       	eor	r1, r1
    3332:	0b b6       	in	r0, 0x3b	; 59
    3334:	0f 92       	push	r0
    3336:	2f 93       	push	r18
    3338:	8f 93       	push	r24
    333a:	9f 93       	push	r25
    333c:	af 93       	push	r26
    333e:	bf 93       	push	r27
    3340:	ef 93       	push	r30
    3342:	ff 93       	push	r31
    3344:	e0 91 89 11 	lds	r30, 0x1189	; 0x801189 <_ser_handle+0x2>
    3348:	f0 91 8a 11 	lds	r31, 0x118A	; 0x80118a <_ser_handle+0x3>
    334c:	30 97       	sbiw	r30, 0x00	; 0
    334e:	b9 f0       	breq	.+46     	; 0x337e <__vector_37+0x56>
    3350:	02 80       	ldd	r0, Z+2	; 0x02
    3352:	f3 81       	ldd	r31, Z+3	; 0x03
    3354:	e0 2d       	mov	r30, r0
    3356:	93 81       	ldd	r25, Z+3	; 0x03
    3358:	82 81       	ldd	r24, Z+2	; 0x02
    335a:	98 17       	cp	r25, r24
    335c:	b1 f0       	breq	.+44     	; 0x338a <__vector_37+0x62>
    335e:	92 81       	ldd	r25, Z+2	; 0x02
    3360:	85 81       	ldd	r24, Z+5	; 0x05
    3362:	28 2f       	mov	r18, r24
    3364:	26 95       	lsr	r18
    3366:	29 23       	and	r18, r25
    3368:	a0 81       	ld	r26, Z
    336a:	b1 81       	ldd	r27, Z+1	; 0x01
    336c:	a2 0f       	add	r26, r18
    336e:	b1 1d       	adc	r27, r1
    3370:	2c 91       	ld	r18, X
    3372:	9f 5f       	subi	r25, 0xFF	; 255
    3374:	89 23       	and	r24, r25
    3376:	82 83       	std	Z+2, r24	; 0x02
    3378:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    337c:	0b c0       	rjmp	.+22     	; 0x3394 <__vector_37+0x6c>
    337e:	e9 ec       	ldi	r30, 0xC9	; 201
    3380:	f0 e0       	ldi	r31, 0x00	; 0
    3382:	80 81       	ld	r24, Z
    3384:	8f 7d       	andi	r24, 0xDF	; 223
    3386:	80 83       	st	Z, r24
    3388:	05 c0       	rjmp	.+10     	; 0x3394 <__vector_37+0x6c>
    338a:	e9 ec       	ldi	r30, 0xC9	; 201
    338c:	f0 e0       	ldi	r31, 0x00	; 0
    338e:	80 81       	ld	r24, Z
    3390:	8f 7d       	andi	r24, 0xDF	; 223
    3392:	80 83       	st	Z, r24
    3394:	ff 91       	pop	r31
    3396:	ef 91       	pop	r30
    3398:	bf 91       	pop	r27
    339a:	af 91       	pop	r26
    339c:	9f 91       	pop	r25
    339e:	8f 91       	pop	r24
    33a0:	2f 91       	pop	r18
    33a2:	0f 90       	pop	r0
    33a4:	0b be       	out	0x3b, r0	; 59
    33a6:	0f 90       	pop	r0
    33a8:	0f be       	out	0x3f, r0	; 63
    33aa:	0f 90       	pop	r0
    33ac:	1f 90       	pop	r1
    33ae:	18 95       	reti

000033b0 <__vector_51>:
    33b0:	1f 92       	push	r1
    33b2:	0f 92       	push	r0
    33b4:	0f b6       	in	r0, 0x3f	; 63
    33b6:	0f 92       	push	r0
    33b8:	11 24       	eor	r1, r1
    33ba:	0b b6       	in	r0, 0x3b	; 59
    33bc:	0f 92       	push	r0
    33be:	2f 93       	push	r18
    33c0:	3f 93       	push	r19
    33c2:	4f 93       	push	r20
    33c4:	5f 93       	push	r21
    33c6:	6f 93       	push	r22
    33c8:	7f 93       	push	r23
    33ca:	8f 93       	push	r24
    33cc:	9f 93       	push	r25
    33ce:	af 93       	push	r26
    33d0:	bf 93       	push	r27
    33d2:	cf 93       	push	r28
    33d4:	df 93       	push	r29
    33d6:	ef 93       	push	r30
    33d8:	ff 93       	push	r31
    33da:	a0 91 8b 11 	lds	r26, 0x118B	; 0x80118b <_ser_handle+0x4>
    33de:	b0 91 8c 11 	lds	r27, 0x118C	; 0x80118c <_ser_handle+0x5>
    33e2:	10 97       	sbiw	r26, 0x00	; 0
    33e4:	11 f1       	breq	.+68     	; 0x342a <__vector_51+0x7a>
    33e6:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    33ea:	14 96       	adiw	r26, 0x04	; 4
    33ec:	ed 91       	ld	r30, X+
    33ee:	fc 91       	ld	r31, X
    33f0:	15 97       	sbiw	r26, 0x05	; 5
    33f2:	93 81       	ldd	r25, Z+3	; 0x03
    33f4:	82 81       	ldd	r24, Z+2	; 0x02
    33f6:	25 81       	ldd	r18, Z+5	; 0x05
    33f8:	98 1b       	sub	r25, r24
    33fa:	92 23       	and	r25, r18
    33fc:	84 81       	ldd	r24, Z+4	; 0x04
    33fe:	98 17       	cp	r25, r24
    3400:	61 f0       	breq	.+24     	; 0x341a <__vector_51+0x6a>
    3402:	83 81       	ldd	r24, Z+3	; 0x03
    3404:	26 95       	lsr	r18
    3406:	28 23       	and	r18, r24
    3408:	c0 81       	ld	r28, Z
    340a:	d1 81       	ldd	r29, Z+1	; 0x01
    340c:	c2 0f       	add	r28, r18
    340e:	d1 1d       	adc	r29, r1
    3410:	68 83       	st	Y, r22
    3412:	8f 5f       	subi	r24, 0xFF	; 255
    3414:	95 81       	ldd	r25, Z+5	; 0x05
    3416:	89 23       	and	r24, r25
    3418:	83 83       	std	Z+3, r24	; 0x03
    341a:	16 96       	adiw	r26, 0x06	; 6
    341c:	ed 91       	ld	r30, X+
    341e:	fc 91       	ld	r31, X
    3420:	17 97       	sbiw	r26, 0x07	; 7
    3422:	30 97       	sbiw	r30, 0x00	; 0
    3424:	11 f0       	breq	.+4      	; 0x342a <__vector_51+0x7a>
    3426:	cd 01       	movw	r24, r26
    3428:	19 95       	eicall
    342a:	ff 91       	pop	r31
    342c:	ef 91       	pop	r30
    342e:	df 91       	pop	r29
    3430:	cf 91       	pop	r28
    3432:	bf 91       	pop	r27
    3434:	af 91       	pop	r26
    3436:	9f 91       	pop	r25
    3438:	8f 91       	pop	r24
    343a:	7f 91       	pop	r23
    343c:	6f 91       	pop	r22
    343e:	5f 91       	pop	r21
    3440:	4f 91       	pop	r20
    3442:	3f 91       	pop	r19
    3444:	2f 91       	pop	r18
    3446:	0f 90       	pop	r0
    3448:	0b be       	out	0x3b, r0	; 59
    344a:	0f 90       	pop	r0
    344c:	0f be       	out	0x3f, r0	; 63
    344e:	0f 90       	pop	r0
    3450:	1f 90       	pop	r1
    3452:	18 95       	reti

00003454 <__vector_52>:
    3454:	1f 92       	push	r1
    3456:	0f 92       	push	r0
    3458:	0f b6       	in	r0, 0x3f	; 63
    345a:	0f 92       	push	r0
    345c:	11 24       	eor	r1, r1
    345e:	0b b6       	in	r0, 0x3b	; 59
    3460:	0f 92       	push	r0
    3462:	2f 93       	push	r18
    3464:	8f 93       	push	r24
    3466:	9f 93       	push	r25
    3468:	af 93       	push	r26
    346a:	bf 93       	push	r27
    346c:	ef 93       	push	r30
    346e:	ff 93       	push	r31
    3470:	e0 91 8b 11 	lds	r30, 0x118B	; 0x80118b <_ser_handle+0x4>
    3474:	f0 91 8c 11 	lds	r31, 0x118C	; 0x80118c <_ser_handle+0x5>
    3478:	30 97       	sbiw	r30, 0x00	; 0
    347a:	b9 f0       	breq	.+46     	; 0x34aa <__vector_52+0x56>
    347c:	02 80       	ldd	r0, Z+2	; 0x02
    347e:	f3 81       	ldd	r31, Z+3	; 0x03
    3480:	e0 2d       	mov	r30, r0
    3482:	93 81       	ldd	r25, Z+3	; 0x03
    3484:	82 81       	ldd	r24, Z+2	; 0x02
    3486:	98 17       	cp	r25, r24
    3488:	b1 f0       	breq	.+44     	; 0x34b6 <__vector_52+0x62>
    348a:	92 81       	ldd	r25, Z+2	; 0x02
    348c:	85 81       	ldd	r24, Z+5	; 0x05
    348e:	28 2f       	mov	r18, r24
    3490:	26 95       	lsr	r18
    3492:	29 23       	and	r18, r25
    3494:	a0 81       	ld	r26, Z
    3496:	b1 81       	ldd	r27, Z+1	; 0x01
    3498:	a2 0f       	add	r26, r18
    349a:	b1 1d       	adc	r27, r1
    349c:	2c 91       	ld	r18, X
    349e:	9f 5f       	subi	r25, 0xFF	; 255
    34a0:	89 23       	and	r24, r25
    34a2:	82 83       	std	Z+2, r24	; 0x02
    34a4:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    34a8:	0b c0       	rjmp	.+22     	; 0x34c0 <__vector_52+0x6c>
    34aa:	e1 ed       	ldi	r30, 0xD1	; 209
    34ac:	f0 e0       	ldi	r31, 0x00	; 0
    34ae:	80 81       	ld	r24, Z
    34b0:	8f 7d       	andi	r24, 0xDF	; 223
    34b2:	80 83       	st	Z, r24
    34b4:	05 c0       	rjmp	.+10     	; 0x34c0 <__vector_52+0x6c>
    34b6:	e1 ed       	ldi	r30, 0xD1	; 209
    34b8:	f0 e0       	ldi	r31, 0x00	; 0
    34ba:	80 81       	ld	r24, Z
    34bc:	8f 7d       	andi	r24, 0xDF	; 223
    34be:	80 83       	st	Z, r24
    34c0:	ff 91       	pop	r31
    34c2:	ef 91       	pop	r30
    34c4:	bf 91       	pop	r27
    34c6:	af 91       	pop	r26
    34c8:	9f 91       	pop	r25
    34ca:	8f 91       	pop	r24
    34cc:	2f 91       	pop	r18
    34ce:	0f 90       	pop	r0
    34d0:	0b be       	out	0x3b, r0	; 59
    34d2:	0f 90       	pop	r0
    34d4:	0f be       	out	0x3f, r0	; 63
    34d6:	0f 90       	pop	r0
    34d8:	1f 90       	pop	r1
    34da:	18 95       	reti

000034dc <__vector_54>:
    34dc:	1f 92       	push	r1
    34de:	0f 92       	push	r0
    34e0:	0f b6       	in	r0, 0x3f	; 63
    34e2:	0f 92       	push	r0
    34e4:	11 24       	eor	r1, r1
    34e6:	0b b6       	in	r0, 0x3b	; 59
    34e8:	0f 92       	push	r0
    34ea:	2f 93       	push	r18
    34ec:	3f 93       	push	r19
    34ee:	4f 93       	push	r20
    34f0:	5f 93       	push	r21
    34f2:	6f 93       	push	r22
    34f4:	7f 93       	push	r23
    34f6:	8f 93       	push	r24
    34f8:	9f 93       	push	r25
    34fa:	af 93       	push	r26
    34fc:	bf 93       	push	r27
    34fe:	cf 93       	push	r28
    3500:	df 93       	push	r29
    3502:	ef 93       	push	r30
    3504:	ff 93       	push	r31
    3506:	a0 91 8d 11 	lds	r26, 0x118D	; 0x80118d <_ser_handle+0x6>
    350a:	b0 91 8e 11 	lds	r27, 0x118E	; 0x80118e <_ser_handle+0x7>
    350e:	10 97       	sbiw	r26, 0x00	; 0
    3510:	11 f1       	breq	.+68     	; 0x3556 <__vector_54+0x7a>
    3512:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    3516:	14 96       	adiw	r26, 0x04	; 4
    3518:	ed 91       	ld	r30, X+
    351a:	fc 91       	ld	r31, X
    351c:	15 97       	sbiw	r26, 0x05	; 5
    351e:	93 81       	ldd	r25, Z+3	; 0x03
    3520:	82 81       	ldd	r24, Z+2	; 0x02
    3522:	25 81       	ldd	r18, Z+5	; 0x05
    3524:	98 1b       	sub	r25, r24
    3526:	92 23       	and	r25, r18
    3528:	84 81       	ldd	r24, Z+4	; 0x04
    352a:	98 17       	cp	r25, r24
    352c:	61 f0       	breq	.+24     	; 0x3546 <__vector_54+0x6a>
    352e:	83 81       	ldd	r24, Z+3	; 0x03
    3530:	26 95       	lsr	r18
    3532:	28 23       	and	r18, r24
    3534:	c0 81       	ld	r28, Z
    3536:	d1 81       	ldd	r29, Z+1	; 0x01
    3538:	c2 0f       	add	r28, r18
    353a:	d1 1d       	adc	r29, r1
    353c:	68 83       	st	Y, r22
    353e:	8f 5f       	subi	r24, 0xFF	; 255
    3540:	95 81       	ldd	r25, Z+5	; 0x05
    3542:	89 23       	and	r24, r25
    3544:	83 83       	std	Z+3, r24	; 0x03
    3546:	16 96       	adiw	r26, 0x06	; 6
    3548:	ed 91       	ld	r30, X+
    354a:	fc 91       	ld	r31, X
    354c:	17 97       	sbiw	r26, 0x07	; 7
    354e:	30 97       	sbiw	r30, 0x00	; 0
    3550:	11 f0       	breq	.+4      	; 0x3556 <__vector_54+0x7a>
    3552:	cd 01       	movw	r24, r26
    3554:	19 95       	eicall
    3556:	ff 91       	pop	r31
    3558:	ef 91       	pop	r30
    355a:	df 91       	pop	r29
    355c:	cf 91       	pop	r28
    355e:	bf 91       	pop	r27
    3560:	af 91       	pop	r26
    3562:	9f 91       	pop	r25
    3564:	8f 91       	pop	r24
    3566:	7f 91       	pop	r23
    3568:	6f 91       	pop	r22
    356a:	5f 91       	pop	r21
    356c:	4f 91       	pop	r20
    356e:	3f 91       	pop	r19
    3570:	2f 91       	pop	r18
    3572:	0f 90       	pop	r0
    3574:	0b be       	out	0x3b, r0	; 59
    3576:	0f 90       	pop	r0
    3578:	0f be       	out	0x3f, r0	; 63
    357a:	0f 90       	pop	r0
    357c:	1f 90       	pop	r1
    357e:	18 95       	reti

00003580 <__vector_55>:
    3580:	1f 92       	push	r1
    3582:	0f 92       	push	r0
    3584:	0f b6       	in	r0, 0x3f	; 63
    3586:	0f 92       	push	r0
    3588:	11 24       	eor	r1, r1
    358a:	0b b6       	in	r0, 0x3b	; 59
    358c:	0f 92       	push	r0
    358e:	2f 93       	push	r18
    3590:	8f 93       	push	r24
    3592:	9f 93       	push	r25
    3594:	af 93       	push	r26
    3596:	bf 93       	push	r27
    3598:	ef 93       	push	r30
    359a:	ff 93       	push	r31
    359c:	e0 91 8d 11 	lds	r30, 0x118D	; 0x80118d <_ser_handle+0x6>
    35a0:	f0 91 8e 11 	lds	r31, 0x118E	; 0x80118e <_ser_handle+0x7>
    35a4:	30 97       	sbiw	r30, 0x00	; 0
    35a6:	b9 f0       	breq	.+46     	; 0x35d6 <__vector_55+0x56>
    35a8:	02 80       	ldd	r0, Z+2	; 0x02
    35aa:	f3 81       	ldd	r31, Z+3	; 0x03
    35ac:	e0 2d       	mov	r30, r0
    35ae:	93 81       	ldd	r25, Z+3	; 0x03
    35b0:	82 81       	ldd	r24, Z+2	; 0x02
    35b2:	98 17       	cp	r25, r24
    35b4:	b1 f0       	breq	.+44     	; 0x35e2 <__vector_55+0x62>
    35b6:	92 81       	ldd	r25, Z+2	; 0x02
    35b8:	85 81       	ldd	r24, Z+5	; 0x05
    35ba:	28 2f       	mov	r18, r24
    35bc:	26 95       	lsr	r18
    35be:	29 23       	and	r18, r25
    35c0:	a0 81       	ld	r26, Z
    35c2:	b1 81       	ldd	r27, Z+1	; 0x01
    35c4:	a2 0f       	add	r26, r18
    35c6:	b1 1d       	adc	r27, r1
    35c8:	2c 91       	ld	r18, X
    35ca:	9f 5f       	subi	r25, 0xFF	; 255
    35cc:	89 23       	and	r24, r25
    35ce:	82 83       	std	Z+2, r24	; 0x02
    35d0:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    35d4:	0b c0       	rjmp	.+22     	; 0x35ec <__vector_55+0x6c>
    35d6:	e1 e3       	ldi	r30, 0x31	; 49
    35d8:	f1 e0       	ldi	r31, 0x01	; 1
    35da:	80 81       	ld	r24, Z
    35dc:	8f 7d       	andi	r24, 0xDF	; 223
    35de:	80 83       	st	Z, r24
    35e0:	05 c0       	rjmp	.+10     	; 0x35ec <__vector_55+0x6c>
    35e2:	e1 e3       	ldi	r30, 0x31	; 49
    35e4:	f1 e0       	ldi	r31, 0x01	; 1
    35e6:	80 81       	ld	r24, Z
    35e8:	8f 7d       	andi	r24, 0xDF	; 223
    35ea:	80 83       	st	Z, r24
    35ec:	ff 91       	pop	r31
    35ee:	ef 91       	pop	r30
    35f0:	bf 91       	pop	r27
    35f2:	af 91       	pop	r26
    35f4:	9f 91       	pop	r25
    35f6:	8f 91       	pop	r24
    35f8:	2f 91       	pop	r18
    35fa:	0f 90       	pop	r0
    35fc:	0b be       	out	0x3b, r0	; 59
    35fe:	0f 90       	pop	r0
    3600:	0f be       	out	0x3f, r0	; 63
    3602:	0f 90       	pop	r0
    3604:	1f 90       	pop	r1
    3606:	18 95       	reti

00003608 <fifo_init>:
    3608:	fc 01       	movw	r30, r24
    360a:	41 11       	cpse	r20, r1
    360c:	01 c0       	rjmp	.+2      	; 0x3610 <fifo_init+0x8>
    360e:	1f d3       	rcall	.+1598   	; 0x3c4e <abort>
    3610:	84 2f       	mov	r24, r20
    3612:	90 e0       	ldi	r25, 0x00	; 0
    3614:	9c 01       	movw	r18, r24
    3616:	21 50       	subi	r18, 0x01	; 1
    3618:	31 09       	sbc	r19, r1
    361a:	82 23       	and	r24, r18
    361c:	93 23       	and	r25, r19
    361e:	89 2b       	or	r24, r25
    3620:	09 f0       	breq	.+2      	; 0x3624 <fifo_init+0x1c>
    3622:	15 d3       	rcall	.+1578   	; 0x3c4e <abort>
    3624:	41 38       	cpi	r20, 0x81	; 129
    3626:	08 f0       	brcs	.+2      	; 0x362a <fifo_init+0x22>
    3628:	12 d3       	rcall	.+1572   	; 0x3c4e <abort>
    362a:	12 82       	std	Z+2, r1	; 0x02
    362c:	13 82       	std	Z+3, r1	; 0x03
    362e:	44 83       	std	Z+4, r20	; 0x04
    3630:	44 0f       	add	r20, r20
    3632:	41 50       	subi	r20, 0x01	; 1
    3634:	45 83       	std	Z+5, r20	; 0x05
    3636:	71 83       	std	Z+1, r23	; 0x01
    3638:	60 83       	st	Z, r22
    363a:	80 e0       	ldi	r24, 0x00	; 0
    363c:	90 e0       	ldi	r25, 0x00	; 0
    363e:	08 95       	ret

00003640 <__subsf3>:
    3640:	50 58       	subi	r21, 0x80	; 128

00003642 <__addsf3>:
    3642:	bb 27       	eor	r27, r27
    3644:	aa 27       	eor	r26, r26
    3646:	0e d0       	rcall	.+28     	; 0x3664 <__addsf3x>
    3648:	0b c1       	rjmp	.+534    	; 0x3860 <__fp_round>
    364a:	fc d0       	rcall	.+504    	; 0x3844 <__fp_pscA>
    364c:	30 f0       	brcs	.+12     	; 0x365a <__addsf3+0x18>
    364e:	01 d1       	rcall	.+514    	; 0x3852 <__fp_pscB>
    3650:	20 f0       	brcs	.+8      	; 0x365a <__addsf3+0x18>
    3652:	31 f4       	brne	.+12     	; 0x3660 <__addsf3+0x1e>
    3654:	9f 3f       	cpi	r25, 0xFF	; 255
    3656:	11 f4       	brne	.+4      	; 0x365c <__addsf3+0x1a>
    3658:	1e f4       	brtc	.+6      	; 0x3660 <__addsf3+0x1e>
    365a:	f1 c0       	rjmp	.+482    	; 0x383e <__fp_nan>
    365c:	0e f4       	brtc	.+2      	; 0x3660 <__addsf3+0x1e>
    365e:	e0 95       	com	r30
    3660:	e7 fb       	bst	r30, 7
    3662:	e7 c0       	rjmp	.+462    	; 0x3832 <__fp_inf>

00003664 <__addsf3x>:
    3664:	e9 2f       	mov	r30, r25
    3666:	0d d1       	rcall	.+538    	; 0x3882 <__fp_split3>
    3668:	80 f3       	brcs	.-32     	; 0x364a <__addsf3+0x8>
    366a:	ba 17       	cp	r27, r26
    366c:	62 07       	cpc	r22, r18
    366e:	73 07       	cpc	r23, r19
    3670:	84 07       	cpc	r24, r20
    3672:	95 07       	cpc	r25, r21
    3674:	18 f0       	brcs	.+6      	; 0x367c <__addsf3x+0x18>
    3676:	71 f4       	brne	.+28     	; 0x3694 <__addsf3x+0x30>
    3678:	9e f5       	brtc	.+102    	; 0x36e0 <__addsf3x+0x7c>
    367a:	25 c1       	rjmp	.+586    	; 0x38c6 <__fp_zero>
    367c:	0e f4       	brtc	.+2      	; 0x3680 <__addsf3x+0x1c>
    367e:	e0 95       	com	r30
    3680:	0b 2e       	mov	r0, r27
    3682:	ba 2f       	mov	r27, r26
    3684:	a0 2d       	mov	r26, r0
    3686:	0b 01       	movw	r0, r22
    3688:	b9 01       	movw	r22, r18
    368a:	90 01       	movw	r18, r0
    368c:	0c 01       	movw	r0, r24
    368e:	ca 01       	movw	r24, r20
    3690:	a0 01       	movw	r20, r0
    3692:	11 24       	eor	r1, r1
    3694:	ff 27       	eor	r31, r31
    3696:	59 1b       	sub	r21, r25
    3698:	99 f0       	breq	.+38     	; 0x36c0 <__addsf3x+0x5c>
    369a:	59 3f       	cpi	r21, 0xF9	; 249
    369c:	50 f4       	brcc	.+20     	; 0x36b2 <__addsf3x+0x4e>
    369e:	50 3e       	cpi	r21, 0xE0	; 224
    36a0:	68 f1       	brcs	.+90     	; 0x36fc <__addsf3x+0x98>
    36a2:	1a 16       	cp	r1, r26
    36a4:	f0 40       	sbci	r31, 0x00	; 0
    36a6:	a2 2f       	mov	r26, r18
    36a8:	23 2f       	mov	r18, r19
    36aa:	34 2f       	mov	r19, r20
    36ac:	44 27       	eor	r20, r20
    36ae:	58 5f       	subi	r21, 0xF8	; 248
    36b0:	f3 cf       	rjmp	.-26     	; 0x3698 <__addsf3x+0x34>
    36b2:	46 95       	lsr	r20
    36b4:	37 95       	ror	r19
    36b6:	27 95       	ror	r18
    36b8:	a7 95       	ror	r26
    36ba:	f0 40       	sbci	r31, 0x00	; 0
    36bc:	53 95       	inc	r21
    36be:	c9 f7       	brne	.-14     	; 0x36b2 <__addsf3x+0x4e>
    36c0:	7e f4       	brtc	.+30     	; 0x36e0 <__addsf3x+0x7c>
    36c2:	1f 16       	cp	r1, r31
    36c4:	ba 0b       	sbc	r27, r26
    36c6:	62 0b       	sbc	r22, r18
    36c8:	73 0b       	sbc	r23, r19
    36ca:	84 0b       	sbc	r24, r20
    36cc:	ba f0       	brmi	.+46     	; 0x36fc <__addsf3x+0x98>
    36ce:	91 50       	subi	r25, 0x01	; 1
    36d0:	a1 f0       	breq	.+40     	; 0x36fa <__addsf3x+0x96>
    36d2:	ff 0f       	add	r31, r31
    36d4:	bb 1f       	adc	r27, r27
    36d6:	66 1f       	adc	r22, r22
    36d8:	77 1f       	adc	r23, r23
    36da:	88 1f       	adc	r24, r24
    36dc:	c2 f7       	brpl	.-16     	; 0x36ce <__addsf3x+0x6a>
    36de:	0e c0       	rjmp	.+28     	; 0x36fc <__addsf3x+0x98>
    36e0:	ba 0f       	add	r27, r26
    36e2:	62 1f       	adc	r22, r18
    36e4:	73 1f       	adc	r23, r19
    36e6:	84 1f       	adc	r24, r20
    36e8:	48 f4       	brcc	.+18     	; 0x36fc <__addsf3x+0x98>
    36ea:	87 95       	ror	r24
    36ec:	77 95       	ror	r23
    36ee:	67 95       	ror	r22
    36f0:	b7 95       	ror	r27
    36f2:	f7 95       	ror	r31
    36f4:	9e 3f       	cpi	r25, 0xFE	; 254
    36f6:	08 f0       	brcs	.+2      	; 0x36fa <__addsf3x+0x96>
    36f8:	b3 cf       	rjmp	.-154    	; 0x3660 <__addsf3+0x1e>
    36fa:	93 95       	inc	r25
    36fc:	88 0f       	add	r24, r24
    36fe:	08 f0       	brcs	.+2      	; 0x3702 <__addsf3x+0x9e>
    3700:	99 27       	eor	r25, r25
    3702:	ee 0f       	add	r30, r30
    3704:	97 95       	ror	r25
    3706:	87 95       	ror	r24
    3708:	08 95       	ret

0000370a <__divsf3>:
    370a:	0c d0       	rcall	.+24     	; 0x3724 <__divsf3x>
    370c:	a9 c0       	rjmp	.+338    	; 0x3860 <__fp_round>
    370e:	a1 d0       	rcall	.+322    	; 0x3852 <__fp_pscB>
    3710:	40 f0       	brcs	.+16     	; 0x3722 <__divsf3+0x18>
    3712:	98 d0       	rcall	.+304    	; 0x3844 <__fp_pscA>
    3714:	30 f0       	brcs	.+12     	; 0x3722 <__divsf3+0x18>
    3716:	21 f4       	brne	.+8      	; 0x3720 <__divsf3+0x16>
    3718:	5f 3f       	cpi	r21, 0xFF	; 255
    371a:	19 f0       	breq	.+6      	; 0x3722 <__divsf3+0x18>
    371c:	8a c0       	rjmp	.+276    	; 0x3832 <__fp_inf>
    371e:	51 11       	cpse	r21, r1
    3720:	d3 c0       	rjmp	.+422    	; 0x38c8 <__fp_szero>
    3722:	8d c0       	rjmp	.+282    	; 0x383e <__fp_nan>

00003724 <__divsf3x>:
    3724:	ae d0       	rcall	.+348    	; 0x3882 <__fp_split3>
    3726:	98 f3       	brcs	.-26     	; 0x370e <__divsf3+0x4>

00003728 <__divsf3_pse>:
    3728:	99 23       	and	r25, r25
    372a:	c9 f3       	breq	.-14     	; 0x371e <__divsf3+0x14>
    372c:	55 23       	and	r21, r21
    372e:	b1 f3       	breq	.-20     	; 0x371c <__divsf3+0x12>
    3730:	95 1b       	sub	r25, r21
    3732:	55 0b       	sbc	r21, r21
    3734:	bb 27       	eor	r27, r27
    3736:	aa 27       	eor	r26, r26
    3738:	62 17       	cp	r22, r18
    373a:	73 07       	cpc	r23, r19
    373c:	84 07       	cpc	r24, r20
    373e:	38 f0       	brcs	.+14     	; 0x374e <__divsf3_pse+0x26>
    3740:	9f 5f       	subi	r25, 0xFF	; 255
    3742:	5f 4f       	sbci	r21, 0xFF	; 255
    3744:	22 0f       	add	r18, r18
    3746:	33 1f       	adc	r19, r19
    3748:	44 1f       	adc	r20, r20
    374a:	aa 1f       	adc	r26, r26
    374c:	a9 f3       	breq	.-22     	; 0x3738 <__divsf3_pse+0x10>
    374e:	33 d0       	rcall	.+102    	; 0x37b6 <__divsf3_pse+0x8e>
    3750:	0e 2e       	mov	r0, r30
    3752:	3a f0       	brmi	.+14     	; 0x3762 <__divsf3_pse+0x3a>
    3754:	e0 e8       	ldi	r30, 0x80	; 128
    3756:	30 d0       	rcall	.+96     	; 0x37b8 <__divsf3_pse+0x90>
    3758:	91 50       	subi	r25, 0x01	; 1
    375a:	50 40       	sbci	r21, 0x00	; 0
    375c:	e6 95       	lsr	r30
    375e:	00 1c       	adc	r0, r0
    3760:	ca f7       	brpl	.-14     	; 0x3754 <__divsf3_pse+0x2c>
    3762:	29 d0       	rcall	.+82     	; 0x37b6 <__divsf3_pse+0x8e>
    3764:	fe 2f       	mov	r31, r30
    3766:	27 d0       	rcall	.+78     	; 0x37b6 <__divsf3_pse+0x8e>
    3768:	66 0f       	add	r22, r22
    376a:	77 1f       	adc	r23, r23
    376c:	88 1f       	adc	r24, r24
    376e:	bb 1f       	adc	r27, r27
    3770:	26 17       	cp	r18, r22
    3772:	37 07       	cpc	r19, r23
    3774:	48 07       	cpc	r20, r24
    3776:	ab 07       	cpc	r26, r27
    3778:	b0 e8       	ldi	r27, 0x80	; 128
    377a:	09 f0       	breq	.+2      	; 0x377e <__divsf3_pse+0x56>
    377c:	bb 0b       	sbc	r27, r27
    377e:	80 2d       	mov	r24, r0
    3780:	bf 01       	movw	r22, r30
    3782:	ff 27       	eor	r31, r31
    3784:	93 58       	subi	r25, 0x83	; 131
    3786:	5f 4f       	sbci	r21, 0xFF	; 255
    3788:	2a f0       	brmi	.+10     	; 0x3794 <__divsf3_pse+0x6c>
    378a:	9e 3f       	cpi	r25, 0xFE	; 254
    378c:	51 05       	cpc	r21, r1
    378e:	68 f0       	brcs	.+26     	; 0x37aa <__divsf3_pse+0x82>
    3790:	50 c0       	rjmp	.+160    	; 0x3832 <__fp_inf>
    3792:	9a c0       	rjmp	.+308    	; 0x38c8 <__fp_szero>
    3794:	5f 3f       	cpi	r21, 0xFF	; 255
    3796:	ec f3       	brlt	.-6      	; 0x3792 <__divsf3_pse+0x6a>
    3798:	98 3e       	cpi	r25, 0xE8	; 232
    379a:	dc f3       	brlt	.-10     	; 0x3792 <__divsf3_pse+0x6a>
    379c:	86 95       	lsr	r24
    379e:	77 95       	ror	r23
    37a0:	67 95       	ror	r22
    37a2:	b7 95       	ror	r27
    37a4:	f7 95       	ror	r31
    37a6:	9f 5f       	subi	r25, 0xFF	; 255
    37a8:	c9 f7       	brne	.-14     	; 0x379c <__divsf3_pse+0x74>
    37aa:	88 0f       	add	r24, r24
    37ac:	91 1d       	adc	r25, r1
    37ae:	96 95       	lsr	r25
    37b0:	87 95       	ror	r24
    37b2:	97 f9       	bld	r25, 7
    37b4:	08 95       	ret
    37b6:	e1 e0       	ldi	r30, 0x01	; 1
    37b8:	66 0f       	add	r22, r22
    37ba:	77 1f       	adc	r23, r23
    37bc:	88 1f       	adc	r24, r24
    37be:	bb 1f       	adc	r27, r27
    37c0:	62 17       	cp	r22, r18
    37c2:	73 07       	cpc	r23, r19
    37c4:	84 07       	cpc	r24, r20
    37c6:	ba 07       	cpc	r27, r26
    37c8:	20 f0       	brcs	.+8      	; 0x37d2 <__divsf3_pse+0xaa>
    37ca:	62 1b       	sub	r22, r18
    37cc:	73 0b       	sbc	r23, r19
    37ce:	84 0b       	sbc	r24, r20
    37d0:	ba 0b       	sbc	r27, r26
    37d2:	ee 1f       	adc	r30, r30
    37d4:	88 f7       	brcc	.-30     	; 0x37b8 <__divsf3_pse+0x90>
    37d6:	e0 95       	com	r30
    37d8:	08 95       	ret

000037da <__fixunssfsi>:
    37da:	5b d0       	rcall	.+182    	; 0x3892 <__fp_splitA>
    37dc:	88 f0       	brcs	.+34     	; 0x3800 <__fixunssfsi+0x26>
    37de:	9f 57       	subi	r25, 0x7F	; 127
    37e0:	90 f0       	brcs	.+36     	; 0x3806 <__fixunssfsi+0x2c>
    37e2:	b9 2f       	mov	r27, r25
    37e4:	99 27       	eor	r25, r25
    37e6:	b7 51       	subi	r27, 0x17	; 23
    37e8:	a0 f0       	brcs	.+40     	; 0x3812 <__fixunssfsi+0x38>
    37ea:	d1 f0       	breq	.+52     	; 0x3820 <__fixunssfsi+0x46>
    37ec:	66 0f       	add	r22, r22
    37ee:	77 1f       	adc	r23, r23
    37f0:	88 1f       	adc	r24, r24
    37f2:	99 1f       	adc	r25, r25
    37f4:	1a f0       	brmi	.+6      	; 0x37fc <__fixunssfsi+0x22>
    37f6:	ba 95       	dec	r27
    37f8:	c9 f7       	brne	.-14     	; 0x37ec <__fixunssfsi+0x12>
    37fa:	12 c0       	rjmp	.+36     	; 0x3820 <__fixunssfsi+0x46>
    37fc:	b1 30       	cpi	r27, 0x01	; 1
    37fe:	81 f0       	breq	.+32     	; 0x3820 <__fixunssfsi+0x46>
    3800:	62 d0       	rcall	.+196    	; 0x38c6 <__fp_zero>
    3802:	b1 e0       	ldi	r27, 0x01	; 1
    3804:	08 95       	ret
    3806:	5f c0       	rjmp	.+190    	; 0x38c6 <__fp_zero>
    3808:	67 2f       	mov	r22, r23
    380a:	78 2f       	mov	r23, r24
    380c:	88 27       	eor	r24, r24
    380e:	b8 5f       	subi	r27, 0xF8	; 248
    3810:	39 f0       	breq	.+14     	; 0x3820 <__fixunssfsi+0x46>
    3812:	b9 3f       	cpi	r27, 0xF9	; 249
    3814:	cc f3       	brlt	.-14     	; 0x3808 <__fixunssfsi+0x2e>
    3816:	86 95       	lsr	r24
    3818:	77 95       	ror	r23
    381a:	67 95       	ror	r22
    381c:	b3 95       	inc	r27
    381e:	d9 f7       	brne	.-10     	; 0x3816 <__fixunssfsi+0x3c>
    3820:	3e f4       	brtc	.+14     	; 0x3830 <__fixunssfsi+0x56>
    3822:	90 95       	com	r25
    3824:	80 95       	com	r24
    3826:	70 95       	com	r23
    3828:	61 95       	neg	r22
    382a:	7f 4f       	sbci	r23, 0xFF	; 255
    382c:	8f 4f       	sbci	r24, 0xFF	; 255
    382e:	9f 4f       	sbci	r25, 0xFF	; 255
    3830:	08 95       	ret

00003832 <__fp_inf>:
    3832:	97 f9       	bld	r25, 7
    3834:	9f 67       	ori	r25, 0x7F	; 127
    3836:	80 e8       	ldi	r24, 0x80	; 128
    3838:	70 e0       	ldi	r23, 0x00	; 0
    383a:	60 e0       	ldi	r22, 0x00	; 0
    383c:	08 95       	ret

0000383e <__fp_nan>:
    383e:	9f ef       	ldi	r25, 0xFF	; 255
    3840:	80 ec       	ldi	r24, 0xC0	; 192
    3842:	08 95       	ret

00003844 <__fp_pscA>:
    3844:	00 24       	eor	r0, r0
    3846:	0a 94       	dec	r0
    3848:	16 16       	cp	r1, r22
    384a:	17 06       	cpc	r1, r23
    384c:	18 06       	cpc	r1, r24
    384e:	09 06       	cpc	r0, r25
    3850:	08 95       	ret

00003852 <__fp_pscB>:
    3852:	00 24       	eor	r0, r0
    3854:	0a 94       	dec	r0
    3856:	12 16       	cp	r1, r18
    3858:	13 06       	cpc	r1, r19
    385a:	14 06       	cpc	r1, r20
    385c:	05 06       	cpc	r0, r21
    385e:	08 95       	ret

00003860 <__fp_round>:
    3860:	09 2e       	mov	r0, r25
    3862:	03 94       	inc	r0
    3864:	00 0c       	add	r0, r0
    3866:	11 f4       	brne	.+4      	; 0x386c <__fp_round+0xc>
    3868:	88 23       	and	r24, r24
    386a:	52 f0       	brmi	.+20     	; 0x3880 <__fp_round+0x20>
    386c:	bb 0f       	add	r27, r27
    386e:	40 f4       	brcc	.+16     	; 0x3880 <__fp_round+0x20>
    3870:	bf 2b       	or	r27, r31
    3872:	11 f4       	brne	.+4      	; 0x3878 <__fp_round+0x18>
    3874:	60 ff       	sbrs	r22, 0
    3876:	04 c0       	rjmp	.+8      	; 0x3880 <__fp_round+0x20>
    3878:	6f 5f       	subi	r22, 0xFF	; 255
    387a:	7f 4f       	sbci	r23, 0xFF	; 255
    387c:	8f 4f       	sbci	r24, 0xFF	; 255
    387e:	9f 4f       	sbci	r25, 0xFF	; 255
    3880:	08 95       	ret

00003882 <__fp_split3>:
    3882:	57 fd       	sbrc	r21, 7
    3884:	90 58       	subi	r25, 0x80	; 128
    3886:	44 0f       	add	r20, r20
    3888:	55 1f       	adc	r21, r21
    388a:	59 f0       	breq	.+22     	; 0x38a2 <__fp_splitA+0x10>
    388c:	5f 3f       	cpi	r21, 0xFF	; 255
    388e:	71 f0       	breq	.+28     	; 0x38ac <__fp_splitA+0x1a>
    3890:	47 95       	ror	r20

00003892 <__fp_splitA>:
    3892:	88 0f       	add	r24, r24
    3894:	97 fb       	bst	r25, 7
    3896:	99 1f       	adc	r25, r25
    3898:	61 f0       	breq	.+24     	; 0x38b2 <__fp_splitA+0x20>
    389a:	9f 3f       	cpi	r25, 0xFF	; 255
    389c:	79 f0       	breq	.+30     	; 0x38bc <__fp_splitA+0x2a>
    389e:	87 95       	ror	r24
    38a0:	08 95       	ret
    38a2:	12 16       	cp	r1, r18
    38a4:	13 06       	cpc	r1, r19
    38a6:	14 06       	cpc	r1, r20
    38a8:	55 1f       	adc	r21, r21
    38aa:	f2 cf       	rjmp	.-28     	; 0x3890 <__fp_split3+0xe>
    38ac:	46 95       	lsr	r20
    38ae:	f1 df       	rcall	.-30     	; 0x3892 <__fp_splitA>
    38b0:	08 c0       	rjmp	.+16     	; 0x38c2 <__fp_splitA+0x30>
    38b2:	16 16       	cp	r1, r22
    38b4:	17 06       	cpc	r1, r23
    38b6:	18 06       	cpc	r1, r24
    38b8:	99 1f       	adc	r25, r25
    38ba:	f1 cf       	rjmp	.-30     	; 0x389e <__fp_splitA+0xc>
    38bc:	86 95       	lsr	r24
    38be:	71 05       	cpc	r23, r1
    38c0:	61 05       	cpc	r22, r1
    38c2:	08 94       	sec
    38c4:	08 95       	ret

000038c6 <__fp_zero>:
    38c6:	e8 94       	clt

000038c8 <__fp_szero>:
    38c8:	bb 27       	eor	r27, r27
    38ca:	66 27       	eor	r22, r22
    38cc:	77 27       	eor	r23, r23
    38ce:	cb 01       	movw	r24, r22
    38d0:	97 f9       	bld	r25, 7
    38d2:	08 95       	ret

000038d4 <__mulsf3>:
    38d4:	0b d0       	rcall	.+22     	; 0x38ec <__mulsf3x>
    38d6:	c4 cf       	rjmp	.-120    	; 0x3860 <__fp_round>
    38d8:	b5 df       	rcall	.-150    	; 0x3844 <__fp_pscA>
    38da:	28 f0       	brcs	.+10     	; 0x38e6 <__mulsf3+0x12>
    38dc:	ba df       	rcall	.-140    	; 0x3852 <__fp_pscB>
    38de:	18 f0       	brcs	.+6      	; 0x38e6 <__mulsf3+0x12>
    38e0:	95 23       	and	r25, r21
    38e2:	09 f0       	breq	.+2      	; 0x38e6 <__mulsf3+0x12>
    38e4:	a6 cf       	rjmp	.-180    	; 0x3832 <__fp_inf>
    38e6:	ab cf       	rjmp	.-170    	; 0x383e <__fp_nan>
    38e8:	11 24       	eor	r1, r1
    38ea:	ee cf       	rjmp	.-36     	; 0x38c8 <__fp_szero>

000038ec <__mulsf3x>:
    38ec:	ca df       	rcall	.-108    	; 0x3882 <__fp_split3>
    38ee:	a0 f3       	brcs	.-24     	; 0x38d8 <__mulsf3+0x4>

000038f0 <__mulsf3_pse>:
    38f0:	95 9f       	mul	r25, r21
    38f2:	d1 f3       	breq	.-12     	; 0x38e8 <__mulsf3+0x14>
    38f4:	95 0f       	add	r25, r21
    38f6:	50 e0       	ldi	r21, 0x00	; 0
    38f8:	55 1f       	adc	r21, r21
    38fa:	62 9f       	mul	r22, r18
    38fc:	f0 01       	movw	r30, r0
    38fe:	72 9f       	mul	r23, r18
    3900:	bb 27       	eor	r27, r27
    3902:	f0 0d       	add	r31, r0
    3904:	b1 1d       	adc	r27, r1
    3906:	63 9f       	mul	r22, r19
    3908:	aa 27       	eor	r26, r26
    390a:	f0 0d       	add	r31, r0
    390c:	b1 1d       	adc	r27, r1
    390e:	aa 1f       	adc	r26, r26
    3910:	64 9f       	mul	r22, r20
    3912:	66 27       	eor	r22, r22
    3914:	b0 0d       	add	r27, r0
    3916:	a1 1d       	adc	r26, r1
    3918:	66 1f       	adc	r22, r22
    391a:	82 9f       	mul	r24, r18
    391c:	22 27       	eor	r18, r18
    391e:	b0 0d       	add	r27, r0
    3920:	a1 1d       	adc	r26, r1
    3922:	62 1f       	adc	r22, r18
    3924:	73 9f       	mul	r23, r19
    3926:	b0 0d       	add	r27, r0
    3928:	a1 1d       	adc	r26, r1
    392a:	62 1f       	adc	r22, r18
    392c:	83 9f       	mul	r24, r19
    392e:	a0 0d       	add	r26, r0
    3930:	61 1d       	adc	r22, r1
    3932:	22 1f       	adc	r18, r18
    3934:	74 9f       	mul	r23, r20
    3936:	33 27       	eor	r19, r19
    3938:	a0 0d       	add	r26, r0
    393a:	61 1d       	adc	r22, r1
    393c:	23 1f       	adc	r18, r19
    393e:	84 9f       	mul	r24, r20
    3940:	60 0d       	add	r22, r0
    3942:	21 1d       	adc	r18, r1
    3944:	82 2f       	mov	r24, r18
    3946:	76 2f       	mov	r23, r22
    3948:	6a 2f       	mov	r22, r26
    394a:	11 24       	eor	r1, r1
    394c:	9f 57       	subi	r25, 0x7F	; 127
    394e:	50 40       	sbci	r21, 0x00	; 0
    3950:	8a f0       	brmi	.+34     	; 0x3974 <__mulsf3_pse+0x84>
    3952:	e1 f0       	breq	.+56     	; 0x398c <__mulsf3_pse+0x9c>
    3954:	88 23       	and	r24, r24
    3956:	4a f0       	brmi	.+18     	; 0x396a <__mulsf3_pse+0x7a>
    3958:	ee 0f       	add	r30, r30
    395a:	ff 1f       	adc	r31, r31
    395c:	bb 1f       	adc	r27, r27
    395e:	66 1f       	adc	r22, r22
    3960:	77 1f       	adc	r23, r23
    3962:	88 1f       	adc	r24, r24
    3964:	91 50       	subi	r25, 0x01	; 1
    3966:	50 40       	sbci	r21, 0x00	; 0
    3968:	a9 f7       	brne	.-22     	; 0x3954 <__mulsf3_pse+0x64>
    396a:	9e 3f       	cpi	r25, 0xFE	; 254
    396c:	51 05       	cpc	r21, r1
    396e:	70 f0       	brcs	.+28     	; 0x398c <__mulsf3_pse+0x9c>
    3970:	60 cf       	rjmp	.-320    	; 0x3832 <__fp_inf>
    3972:	aa cf       	rjmp	.-172    	; 0x38c8 <__fp_szero>
    3974:	5f 3f       	cpi	r21, 0xFF	; 255
    3976:	ec f3       	brlt	.-6      	; 0x3972 <__mulsf3_pse+0x82>
    3978:	98 3e       	cpi	r25, 0xE8	; 232
    397a:	dc f3       	brlt	.-10     	; 0x3972 <__mulsf3_pse+0x82>
    397c:	86 95       	lsr	r24
    397e:	77 95       	ror	r23
    3980:	67 95       	ror	r22
    3982:	b7 95       	ror	r27
    3984:	f7 95       	ror	r31
    3986:	e7 95       	ror	r30
    3988:	9f 5f       	subi	r25, 0xFF	; 255
    398a:	c1 f7       	brne	.-16     	; 0x397c <__mulsf3_pse+0x8c>
    398c:	fe 2b       	or	r31, r30
    398e:	88 0f       	add	r24, r24
    3990:	91 1d       	adc	r25, r1
    3992:	96 95       	lsr	r25
    3994:	87 95       	ror	r24
    3996:	97 f9       	bld	r25, 7
    3998:	08 95       	ret

0000399a <__udivmodsi4>:
    399a:	a1 e2       	ldi	r26, 0x21	; 33
    399c:	1a 2e       	mov	r1, r26
    399e:	aa 1b       	sub	r26, r26
    39a0:	bb 1b       	sub	r27, r27
    39a2:	fd 01       	movw	r30, r26
    39a4:	0d c0       	rjmp	.+26     	; 0x39c0 <__udivmodsi4_ep>

000039a6 <__udivmodsi4_loop>:
    39a6:	aa 1f       	adc	r26, r26
    39a8:	bb 1f       	adc	r27, r27
    39aa:	ee 1f       	adc	r30, r30
    39ac:	ff 1f       	adc	r31, r31
    39ae:	a2 17       	cp	r26, r18
    39b0:	b3 07       	cpc	r27, r19
    39b2:	e4 07       	cpc	r30, r20
    39b4:	f5 07       	cpc	r31, r21
    39b6:	20 f0       	brcs	.+8      	; 0x39c0 <__udivmodsi4_ep>
    39b8:	a2 1b       	sub	r26, r18
    39ba:	b3 0b       	sbc	r27, r19
    39bc:	e4 0b       	sbc	r30, r20
    39be:	f5 0b       	sbc	r31, r21

000039c0 <__udivmodsi4_ep>:
    39c0:	66 1f       	adc	r22, r22
    39c2:	77 1f       	adc	r23, r23
    39c4:	88 1f       	adc	r24, r24
    39c6:	99 1f       	adc	r25, r25
    39c8:	1a 94       	dec	r1
    39ca:	69 f7       	brne	.-38     	; 0x39a6 <__udivmodsi4_loop>
    39cc:	60 95       	com	r22
    39ce:	70 95       	com	r23
    39d0:	80 95       	com	r24
    39d2:	90 95       	com	r25
    39d4:	9b 01       	movw	r18, r22
    39d6:	ac 01       	movw	r20, r24
    39d8:	bd 01       	movw	r22, r26
    39da:	cf 01       	movw	r24, r30
    39dc:	08 95       	ret

000039de <__tablejump2__>:
    39de:	ee 0f       	add	r30, r30
    39e0:	ff 1f       	adc	r31, r31
    39e2:	88 1f       	adc	r24, r24
    39e4:	8b bf       	out	0x3b, r24	; 59
    39e6:	07 90       	elpm	r0, Z+
    39e8:	f6 91       	elpm	r31, Z
    39ea:	e0 2d       	mov	r30, r0
    39ec:	19 94       	eijmp

000039ee <__umulhisi3>:
    39ee:	a2 9f       	mul	r26, r18
    39f0:	b0 01       	movw	r22, r0
    39f2:	b3 9f       	mul	r27, r19
    39f4:	c0 01       	movw	r24, r0
    39f6:	a3 9f       	mul	r26, r19
    39f8:	70 0d       	add	r23, r0
    39fa:	81 1d       	adc	r24, r1
    39fc:	11 24       	eor	r1, r1
    39fe:	91 1d       	adc	r25, r1
    3a00:	b2 9f       	mul	r27, r18
    3a02:	70 0d       	add	r23, r0
    3a04:	81 1d       	adc	r24, r1
    3a06:	11 24       	eor	r1, r1
    3a08:	91 1d       	adc	r25, r1
    3a0a:	08 95       	ret

00003a0c <malloc>:
    3a0c:	0f 93       	push	r16
    3a0e:	1f 93       	push	r17
    3a10:	cf 93       	push	r28
    3a12:	df 93       	push	r29
    3a14:	82 30       	cpi	r24, 0x02	; 2
    3a16:	91 05       	cpc	r25, r1
    3a18:	10 f4       	brcc	.+4      	; 0x3a1e <malloc+0x12>
    3a1a:	82 e0       	ldi	r24, 0x02	; 2
    3a1c:	90 e0       	ldi	r25, 0x00	; 0
    3a1e:	e0 91 97 11 	lds	r30, 0x1197	; 0x801197 <__flp>
    3a22:	f0 91 98 11 	lds	r31, 0x1198	; 0x801198 <__flp+0x1>
    3a26:	20 e0       	ldi	r18, 0x00	; 0
    3a28:	30 e0       	ldi	r19, 0x00	; 0
    3a2a:	a0 e0       	ldi	r26, 0x00	; 0
    3a2c:	b0 e0       	ldi	r27, 0x00	; 0
    3a2e:	30 97       	sbiw	r30, 0x00	; 0
    3a30:	19 f1       	breq	.+70     	; 0x3a78 <malloc+0x6c>
    3a32:	40 81       	ld	r20, Z
    3a34:	51 81       	ldd	r21, Z+1	; 0x01
    3a36:	02 81       	ldd	r16, Z+2	; 0x02
    3a38:	13 81       	ldd	r17, Z+3	; 0x03
    3a3a:	48 17       	cp	r20, r24
    3a3c:	59 07       	cpc	r21, r25
    3a3e:	c8 f0       	brcs	.+50     	; 0x3a72 <malloc+0x66>
    3a40:	84 17       	cp	r24, r20
    3a42:	95 07       	cpc	r25, r21
    3a44:	69 f4       	brne	.+26     	; 0x3a60 <malloc+0x54>
    3a46:	10 97       	sbiw	r26, 0x00	; 0
    3a48:	31 f0       	breq	.+12     	; 0x3a56 <malloc+0x4a>
    3a4a:	12 96       	adiw	r26, 0x02	; 2
    3a4c:	0c 93       	st	X, r16
    3a4e:	12 97       	sbiw	r26, 0x02	; 2
    3a50:	13 96       	adiw	r26, 0x03	; 3
    3a52:	1c 93       	st	X, r17
    3a54:	27 c0       	rjmp	.+78     	; 0x3aa4 <malloc+0x98>
    3a56:	00 93 97 11 	sts	0x1197, r16	; 0x801197 <__flp>
    3a5a:	10 93 98 11 	sts	0x1198, r17	; 0x801198 <__flp+0x1>
    3a5e:	22 c0       	rjmp	.+68     	; 0x3aa4 <malloc+0x98>
    3a60:	21 15       	cp	r18, r1
    3a62:	31 05       	cpc	r19, r1
    3a64:	19 f0       	breq	.+6      	; 0x3a6c <malloc+0x60>
    3a66:	42 17       	cp	r20, r18
    3a68:	53 07       	cpc	r21, r19
    3a6a:	18 f4       	brcc	.+6      	; 0x3a72 <malloc+0x66>
    3a6c:	9a 01       	movw	r18, r20
    3a6e:	bd 01       	movw	r22, r26
    3a70:	ef 01       	movw	r28, r30
    3a72:	df 01       	movw	r26, r30
    3a74:	f8 01       	movw	r30, r16
    3a76:	db cf       	rjmp	.-74     	; 0x3a2e <malloc+0x22>
    3a78:	21 15       	cp	r18, r1
    3a7a:	31 05       	cpc	r19, r1
    3a7c:	f9 f0       	breq	.+62     	; 0x3abc <malloc+0xb0>
    3a7e:	28 1b       	sub	r18, r24
    3a80:	39 0b       	sbc	r19, r25
    3a82:	24 30       	cpi	r18, 0x04	; 4
    3a84:	31 05       	cpc	r19, r1
    3a86:	80 f4       	brcc	.+32     	; 0x3aa8 <malloc+0x9c>
    3a88:	8a 81       	ldd	r24, Y+2	; 0x02
    3a8a:	9b 81       	ldd	r25, Y+3	; 0x03
    3a8c:	61 15       	cp	r22, r1
    3a8e:	71 05       	cpc	r23, r1
    3a90:	21 f0       	breq	.+8      	; 0x3a9a <malloc+0x8e>
    3a92:	fb 01       	movw	r30, r22
    3a94:	93 83       	std	Z+3, r25	; 0x03
    3a96:	82 83       	std	Z+2, r24	; 0x02
    3a98:	04 c0       	rjmp	.+8      	; 0x3aa2 <malloc+0x96>
    3a9a:	90 93 98 11 	sts	0x1198, r25	; 0x801198 <__flp+0x1>
    3a9e:	80 93 97 11 	sts	0x1197, r24	; 0x801197 <__flp>
    3aa2:	fe 01       	movw	r30, r28
    3aa4:	32 96       	adiw	r30, 0x02	; 2
    3aa6:	44 c0       	rjmp	.+136    	; 0x3b30 <malloc+0x124>
    3aa8:	fe 01       	movw	r30, r28
    3aaa:	e2 0f       	add	r30, r18
    3aac:	f3 1f       	adc	r31, r19
    3aae:	81 93       	st	Z+, r24
    3ab0:	91 93       	st	Z+, r25
    3ab2:	22 50       	subi	r18, 0x02	; 2
    3ab4:	31 09       	sbc	r19, r1
    3ab6:	39 83       	std	Y+1, r19	; 0x01
    3ab8:	28 83       	st	Y, r18
    3aba:	3a c0       	rjmp	.+116    	; 0x3b30 <malloc+0x124>
    3abc:	20 91 95 11 	lds	r18, 0x1195	; 0x801195 <__brkval>
    3ac0:	30 91 96 11 	lds	r19, 0x1196	; 0x801196 <__brkval+0x1>
    3ac4:	23 2b       	or	r18, r19
    3ac6:	41 f4       	brne	.+16     	; 0x3ad8 <malloc+0xcc>
    3ac8:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    3acc:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    3ad0:	30 93 96 11 	sts	0x1196, r19	; 0x801196 <__brkval+0x1>
    3ad4:	20 93 95 11 	sts	0x1195, r18	; 0x801195 <__brkval>
    3ad8:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    3adc:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    3ae0:	21 15       	cp	r18, r1
    3ae2:	31 05       	cpc	r19, r1
    3ae4:	41 f4       	brne	.+16     	; 0x3af6 <malloc+0xea>
    3ae6:	2d b7       	in	r18, 0x3d	; 61
    3ae8:	3e b7       	in	r19, 0x3e	; 62
    3aea:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    3aee:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    3af2:	24 1b       	sub	r18, r20
    3af4:	35 0b       	sbc	r19, r21
    3af6:	e0 91 95 11 	lds	r30, 0x1195	; 0x801195 <__brkval>
    3afa:	f0 91 96 11 	lds	r31, 0x1196	; 0x801196 <__brkval+0x1>
    3afe:	e2 17       	cp	r30, r18
    3b00:	f3 07       	cpc	r31, r19
    3b02:	a0 f4       	brcc	.+40     	; 0x3b2c <malloc+0x120>
    3b04:	2e 1b       	sub	r18, r30
    3b06:	3f 0b       	sbc	r19, r31
    3b08:	28 17       	cp	r18, r24
    3b0a:	39 07       	cpc	r19, r25
    3b0c:	78 f0       	brcs	.+30     	; 0x3b2c <malloc+0x120>
    3b0e:	ac 01       	movw	r20, r24
    3b10:	4e 5f       	subi	r20, 0xFE	; 254
    3b12:	5f 4f       	sbci	r21, 0xFF	; 255
    3b14:	24 17       	cp	r18, r20
    3b16:	35 07       	cpc	r19, r21
    3b18:	48 f0       	brcs	.+18     	; 0x3b2c <malloc+0x120>
    3b1a:	4e 0f       	add	r20, r30
    3b1c:	5f 1f       	adc	r21, r31
    3b1e:	50 93 96 11 	sts	0x1196, r21	; 0x801196 <__brkval+0x1>
    3b22:	40 93 95 11 	sts	0x1195, r20	; 0x801195 <__brkval>
    3b26:	81 93       	st	Z+, r24
    3b28:	91 93       	st	Z+, r25
    3b2a:	02 c0       	rjmp	.+4      	; 0x3b30 <malloc+0x124>
    3b2c:	e0 e0       	ldi	r30, 0x00	; 0
    3b2e:	f0 e0       	ldi	r31, 0x00	; 0
    3b30:	cf 01       	movw	r24, r30
    3b32:	df 91       	pop	r29
    3b34:	cf 91       	pop	r28
    3b36:	1f 91       	pop	r17
    3b38:	0f 91       	pop	r16
    3b3a:	08 95       	ret

00003b3c <free>:
    3b3c:	cf 93       	push	r28
    3b3e:	df 93       	push	r29
    3b40:	00 97       	sbiw	r24, 0x00	; 0
    3b42:	09 f4       	brne	.+2      	; 0x3b46 <free+0xa>
    3b44:	81 c0       	rjmp	.+258    	; 0x3c48 <free+0x10c>
    3b46:	fc 01       	movw	r30, r24
    3b48:	32 97       	sbiw	r30, 0x02	; 2
    3b4a:	13 82       	std	Z+3, r1	; 0x03
    3b4c:	12 82       	std	Z+2, r1	; 0x02
    3b4e:	a0 91 97 11 	lds	r26, 0x1197	; 0x801197 <__flp>
    3b52:	b0 91 98 11 	lds	r27, 0x1198	; 0x801198 <__flp+0x1>
    3b56:	10 97       	sbiw	r26, 0x00	; 0
    3b58:	81 f4       	brne	.+32     	; 0x3b7a <free+0x3e>
    3b5a:	20 81       	ld	r18, Z
    3b5c:	31 81       	ldd	r19, Z+1	; 0x01
    3b5e:	82 0f       	add	r24, r18
    3b60:	93 1f       	adc	r25, r19
    3b62:	20 91 95 11 	lds	r18, 0x1195	; 0x801195 <__brkval>
    3b66:	30 91 96 11 	lds	r19, 0x1196	; 0x801196 <__brkval+0x1>
    3b6a:	28 17       	cp	r18, r24
    3b6c:	39 07       	cpc	r19, r25
    3b6e:	51 f5       	brne	.+84     	; 0x3bc4 <free+0x88>
    3b70:	f0 93 96 11 	sts	0x1196, r31	; 0x801196 <__brkval+0x1>
    3b74:	e0 93 95 11 	sts	0x1195, r30	; 0x801195 <__brkval>
    3b78:	67 c0       	rjmp	.+206    	; 0x3c48 <free+0x10c>
    3b7a:	ed 01       	movw	r28, r26
    3b7c:	20 e0       	ldi	r18, 0x00	; 0
    3b7e:	30 e0       	ldi	r19, 0x00	; 0
    3b80:	ce 17       	cp	r28, r30
    3b82:	df 07       	cpc	r29, r31
    3b84:	40 f4       	brcc	.+16     	; 0x3b96 <free+0x5a>
    3b86:	4a 81       	ldd	r20, Y+2	; 0x02
    3b88:	5b 81       	ldd	r21, Y+3	; 0x03
    3b8a:	9e 01       	movw	r18, r28
    3b8c:	41 15       	cp	r20, r1
    3b8e:	51 05       	cpc	r21, r1
    3b90:	f1 f0       	breq	.+60     	; 0x3bce <free+0x92>
    3b92:	ea 01       	movw	r28, r20
    3b94:	f5 cf       	rjmp	.-22     	; 0x3b80 <free+0x44>
    3b96:	d3 83       	std	Z+3, r29	; 0x03
    3b98:	c2 83       	std	Z+2, r28	; 0x02
    3b9a:	40 81       	ld	r20, Z
    3b9c:	51 81       	ldd	r21, Z+1	; 0x01
    3b9e:	84 0f       	add	r24, r20
    3ba0:	95 1f       	adc	r25, r21
    3ba2:	c8 17       	cp	r28, r24
    3ba4:	d9 07       	cpc	r29, r25
    3ba6:	59 f4       	brne	.+22     	; 0x3bbe <free+0x82>
    3ba8:	88 81       	ld	r24, Y
    3baa:	99 81       	ldd	r25, Y+1	; 0x01
    3bac:	84 0f       	add	r24, r20
    3bae:	95 1f       	adc	r25, r21
    3bb0:	02 96       	adiw	r24, 0x02	; 2
    3bb2:	91 83       	std	Z+1, r25	; 0x01
    3bb4:	80 83       	st	Z, r24
    3bb6:	8a 81       	ldd	r24, Y+2	; 0x02
    3bb8:	9b 81       	ldd	r25, Y+3	; 0x03
    3bba:	93 83       	std	Z+3, r25	; 0x03
    3bbc:	82 83       	std	Z+2, r24	; 0x02
    3bbe:	21 15       	cp	r18, r1
    3bc0:	31 05       	cpc	r19, r1
    3bc2:	29 f4       	brne	.+10     	; 0x3bce <free+0x92>
    3bc4:	f0 93 98 11 	sts	0x1198, r31	; 0x801198 <__flp+0x1>
    3bc8:	e0 93 97 11 	sts	0x1197, r30	; 0x801197 <__flp>
    3bcc:	3d c0       	rjmp	.+122    	; 0x3c48 <free+0x10c>
    3bce:	e9 01       	movw	r28, r18
    3bd0:	fb 83       	std	Y+3, r31	; 0x03
    3bd2:	ea 83       	std	Y+2, r30	; 0x02
    3bd4:	49 91       	ld	r20, Y+
    3bd6:	59 91       	ld	r21, Y+
    3bd8:	c4 0f       	add	r28, r20
    3bda:	d5 1f       	adc	r29, r21
    3bdc:	ec 17       	cp	r30, r28
    3bde:	fd 07       	cpc	r31, r29
    3be0:	61 f4       	brne	.+24     	; 0x3bfa <free+0xbe>
    3be2:	80 81       	ld	r24, Z
    3be4:	91 81       	ldd	r25, Z+1	; 0x01
    3be6:	84 0f       	add	r24, r20
    3be8:	95 1f       	adc	r25, r21
    3bea:	02 96       	adiw	r24, 0x02	; 2
    3bec:	e9 01       	movw	r28, r18
    3bee:	99 83       	std	Y+1, r25	; 0x01
    3bf0:	88 83       	st	Y, r24
    3bf2:	82 81       	ldd	r24, Z+2	; 0x02
    3bf4:	93 81       	ldd	r25, Z+3	; 0x03
    3bf6:	9b 83       	std	Y+3, r25	; 0x03
    3bf8:	8a 83       	std	Y+2, r24	; 0x02
    3bfa:	e0 e0       	ldi	r30, 0x00	; 0
    3bfc:	f0 e0       	ldi	r31, 0x00	; 0
    3bfe:	12 96       	adiw	r26, 0x02	; 2
    3c00:	8d 91       	ld	r24, X+
    3c02:	9c 91       	ld	r25, X
    3c04:	13 97       	sbiw	r26, 0x03	; 3
    3c06:	00 97       	sbiw	r24, 0x00	; 0
    3c08:	19 f0       	breq	.+6      	; 0x3c10 <free+0xd4>
    3c0a:	fd 01       	movw	r30, r26
    3c0c:	dc 01       	movw	r26, r24
    3c0e:	f7 cf       	rjmp	.-18     	; 0x3bfe <free+0xc2>
    3c10:	8d 91       	ld	r24, X+
    3c12:	9c 91       	ld	r25, X
    3c14:	11 97       	sbiw	r26, 0x01	; 1
    3c16:	9d 01       	movw	r18, r26
    3c18:	2e 5f       	subi	r18, 0xFE	; 254
    3c1a:	3f 4f       	sbci	r19, 0xFF	; 255
    3c1c:	82 0f       	add	r24, r18
    3c1e:	93 1f       	adc	r25, r19
    3c20:	20 91 95 11 	lds	r18, 0x1195	; 0x801195 <__brkval>
    3c24:	30 91 96 11 	lds	r19, 0x1196	; 0x801196 <__brkval+0x1>
    3c28:	28 17       	cp	r18, r24
    3c2a:	39 07       	cpc	r19, r25
    3c2c:	69 f4       	brne	.+26     	; 0x3c48 <free+0x10c>
    3c2e:	30 97       	sbiw	r30, 0x00	; 0
    3c30:	29 f4       	brne	.+10     	; 0x3c3c <free+0x100>
    3c32:	10 92 98 11 	sts	0x1198, r1	; 0x801198 <__flp+0x1>
    3c36:	10 92 97 11 	sts	0x1197, r1	; 0x801197 <__flp>
    3c3a:	02 c0       	rjmp	.+4      	; 0x3c40 <free+0x104>
    3c3c:	13 82       	std	Z+3, r1	; 0x03
    3c3e:	12 82       	std	Z+2, r1	; 0x02
    3c40:	b0 93 96 11 	sts	0x1196, r27	; 0x801196 <__brkval+0x1>
    3c44:	a0 93 95 11 	sts	0x1195, r26	; 0x801195 <__brkval>
    3c48:	df 91       	pop	r29
    3c4a:	cf 91       	pop	r28
    3c4c:	08 95       	ret

00003c4e <abort>:
    3c4e:	81 e0       	ldi	r24, 0x01	; 1
    3c50:	90 e0       	ldi	r25, 0x00	; 0
    3c52:	f8 94       	cli
    3c54:	00 c3       	rjmp	.+1536   	; 0x4256 <_exit>

00003c56 <memcpy>:
    3c56:	fb 01       	movw	r30, r22
    3c58:	dc 01       	movw	r26, r24
    3c5a:	02 c0       	rjmp	.+4      	; 0x3c60 <memcpy+0xa>
    3c5c:	01 90       	ld	r0, Z+
    3c5e:	0d 92       	st	X+, r0
    3c60:	41 50       	subi	r20, 0x01	; 1
    3c62:	50 40       	sbci	r21, 0x00	; 0
    3c64:	d8 f7       	brcc	.-10     	; 0x3c5c <memcpy+0x6>
    3c66:	08 95       	ret

00003c68 <memset>:
    3c68:	dc 01       	movw	r26, r24
    3c6a:	01 c0       	rjmp	.+2      	; 0x3c6e <memset+0x6>
    3c6c:	6d 93       	st	X+, r22
    3c6e:	41 50       	subi	r20, 0x01	; 1
    3c70:	50 40       	sbci	r21, 0x00	; 0
    3c72:	e0 f7       	brcc	.-8      	; 0x3c6c <memset+0x4>
    3c74:	08 95       	ret

00003c76 <printf>:
    3c76:	cf 93       	push	r28
    3c78:	df 93       	push	r29
    3c7a:	cd b7       	in	r28, 0x3d	; 61
    3c7c:	de b7       	in	r29, 0x3e	; 62
    3c7e:	ae 01       	movw	r20, r28
    3c80:	4a 5f       	subi	r20, 0xFA	; 250
    3c82:	5f 4f       	sbci	r21, 0xFF	; 255
    3c84:	fa 01       	movw	r30, r20
    3c86:	61 91       	ld	r22, Z+
    3c88:	71 91       	ld	r23, Z+
    3c8a:	af 01       	movw	r20, r30
    3c8c:	80 91 9b 11 	lds	r24, 0x119B	; 0x80119b <__iob+0x2>
    3c90:	90 91 9c 11 	lds	r25, 0x119C	; 0x80119c <__iob+0x3>
    3c94:	33 d0       	rcall	.+102    	; 0x3cfc <vfprintf>
    3c96:	df 91       	pop	r29
    3c98:	cf 91       	pop	r28
    3c9a:	08 95       	ret

00003c9c <puts>:
    3c9c:	0f 93       	push	r16
    3c9e:	1f 93       	push	r17
    3ca0:	cf 93       	push	r28
    3ca2:	df 93       	push	r29
    3ca4:	e0 91 9b 11 	lds	r30, 0x119B	; 0x80119b <__iob+0x2>
    3ca8:	f0 91 9c 11 	lds	r31, 0x119C	; 0x80119c <__iob+0x3>
    3cac:	23 81       	ldd	r18, Z+3	; 0x03
    3cae:	21 ff       	sbrs	r18, 1
    3cb0:	1b c0       	rjmp	.+54     	; 0x3ce8 <puts+0x4c>
    3cb2:	8c 01       	movw	r16, r24
    3cb4:	d0 e0       	ldi	r29, 0x00	; 0
    3cb6:	c0 e0       	ldi	r28, 0x00	; 0
    3cb8:	f8 01       	movw	r30, r16
    3cba:	81 91       	ld	r24, Z+
    3cbc:	8f 01       	movw	r16, r30
    3cbe:	60 91 9b 11 	lds	r22, 0x119B	; 0x80119b <__iob+0x2>
    3cc2:	70 91 9c 11 	lds	r23, 0x119C	; 0x80119c <__iob+0x3>
    3cc6:	db 01       	movw	r26, r22
    3cc8:	18 96       	adiw	r26, 0x08	; 8
    3cca:	ed 91       	ld	r30, X+
    3ccc:	fc 91       	ld	r31, X
    3cce:	19 97       	sbiw	r26, 0x09	; 9
    3cd0:	88 23       	and	r24, r24
    3cd2:	31 f0       	breq	.+12     	; 0x3ce0 <puts+0x44>
    3cd4:	19 95       	eicall
    3cd6:	89 2b       	or	r24, r25
    3cd8:	79 f3       	breq	.-34     	; 0x3cb8 <puts+0x1c>
    3cda:	df ef       	ldi	r29, 0xFF	; 255
    3cdc:	cf ef       	ldi	r28, 0xFF	; 255
    3cde:	ec cf       	rjmp	.-40     	; 0x3cb8 <puts+0x1c>
    3ce0:	8a e0       	ldi	r24, 0x0A	; 10
    3ce2:	19 95       	eicall
    3ce4:	89 2b       	or	r24, r25
    3ce6:	19 f0       	breq	.+6      	; 0x3cee <puts+0x52>
    3ce8:	8f ef       	ldi	r24, 0xFF	; 255
    3cea:	9f ef       	ldi	r25, 0xFF	; 255
    3cec:	02 c0       	rjmp	.+4      	; 0x3cf2 <puts+0x56>
    3cee:	8d 2f       	mov	r24, r29
    3cf0:	9c 2f       	mov	r25, r28
    3cf2:	df 91       	pop	r29
    3cf4:	cf 91       	pop	r28
    3cf6:	1f 91       	pop	r17
    3cf8:	0f 91       	pop	r16
    3cfa:	08 95       	ret

00003cfc <vfprintf>:
    3cfc:	2f 92       	push	r2
    3cfe:	3f 92       	push	r3
    3d00:	4f 92       	push	r4
    3d02:	5f 92       	push	r5
    3d04:	6f 92       	push	r6
    3d06:	7f 92       	push	r7
    3d08:	8f 92       	push	r8
    3d0a:	9f 92       	push	r9
    3d0c:	af 92       	push	r10
    3d0e:	bf 92       	push	r11
    3d10:	cf 92       	push	r12
    3d12:	df 92       	push	r13
    3d14:	ef 92       	push	r14
    3d16:	ff 92       	push	r15
    3d18:	0f 93       	push	r16
    3d1a:	1f 93       	push	r17
    3d1c:	cf 93       	push	r28
    3d1e:	df 93       	push	r29
    3d20:	cd b7       	in	r28, 0x3d	; 61
    3d22:	de b7       	in	r29, 0x3e	; 62
    3d24:	2b 97       	sbiw	r28, 0x0b	; 11
    3d26:	0f b6       	in	r0, 0x3f	; 63
    3d28:	f8 94       	cli
    3d2a:	de bf       	out	0x3e, r29	; 62
    3d2c:	0f be       	out	0x3f, r0	; 63
    3d2e:	cd bf       	out	0x3d, r28	; 61
    3d30:	6c 01       	movw	r12, r24
    3d32:	7b 01       	movw	r14, r22
    3d34:	8a 01       	movw	r16, r20
    3d36:	fc 01       	movw	r30, r24
    3d38:	17 82       	std	Z+7, r1	; 0x07
    3d3a:	16 82       	std	Z+6, r1	; 0x06
    3d3c:	83 81       	ldd	r24, Z+3	; 0x03
    3d3e:	81 ff       	sbrs	r24, 1
    3d40:	bf c1       	rjmp	.+894    	; 0x40c0 <vfprintf+0x3c4>
    3d42:	ce 01       	movw	r24, r28
    3d44:	01 96       	adiw	r24, 0x01	; 1
    3d46:	3c 01       	movw	r6, r24
    3d48:	f6 01       	movw	r30, r12
    3d4a:	93 81       	ldd	r25, Z+3	; 0x03
    3d4c:	f7 01       	movw	r30, r14
    3d4e:	93 fd       	sbrc	r25, 3
    3d50:	85 91       	lpm	r24, Z+
    3d52:	93 ff       	sbrs	r25, 3
    3d54:	81 91       	ld	r24, Z+
    3d56:	7f 01       	movw	r14, r30
    3d58:	88 23       	and	r24, r24
    3d5a:	09 f4       	brne	.+2      	; 0x3d5e <vfprintf+0x62>
    3d5c:	ad c1       	rjmp	.+858    	; 0x40b8 <vfprintf+0x3bc>
    3d5e:	85 32       	cpi	r24, 0x25	; 37
    3d60:	39 f4       	brne	.+14     	; 0x3d70 <vfprintf+0x74>
    3d62:	93 fd       	sbrc	r25, 3
    3d64:	85 91       	lpm	r24, Z+
    3d66:	93 ff       	sbrs	r25, 3
    3d68:	81 91       	ld	r24, Z+
    3d6a:	7f 01       	movw	r14, r30
    3d6c:	85 32       	cpi	r24, 0x25	; 37
    3d6e:	21 f4       	brne	.+8      	; 0x3d78 <vfprintf+0x7c>
    3d70:	b6 01       	movw	r22, r12
    3d72:	90 e0       	ldi	r25, 0x00	; 0
    3d74:	d6 d1       	rcall	.+940    	; 0x4122 <fputc>
    3d76:	e8 cf       	rjmp	.-48     	; 0x3d48 <vfprintf+0x4c>
    3d78:	91 2c       	mov	r9, r1
    3d7a:	21 2c       	mov	r2, r1
    3d7c:	31 2c       	mov	r3, r1
    3d7e:	ff e1       	ldi	r31, 0x1F	; 31
    3d80:	f3 15       	cp	r31, r3
    3d82:	d8 f0       	brcs	.+54     	; 0x3dba <vfprintf+0xbe>
    3d84:	8b 32       	cpi	r24, 0x2B	; 43
    3d86:	79 f0       	breq	.+30     	; 0x3da6 <vfprintf+0xaa>
    3d88:	38 f4       	brcc	.+14     	; 0x3d98 <vfprintf+0x9c>
    3d8a:	80 32       	cpi	r24, 0x20	; 32
    3d8c:	79 f0       	breq	.+30     	; 0x3dac <vfprintf+0xb0>
    3d8e:	83 32       	cpi	r24, 0x23	; 35
    3d90:	a1 f4       	brne	.+40     	; 0x3dba <vfprintf+0xbe>
    3d92:	23 2d       	mov	r18, r3
    3d94:	20 61       	ori	r18, 0x10	; 16
    3d96:	1d c0       	rjmp	.+58     	; 0x3dd2 <vfprintf+0xd6>
    3d98:	8d 32       	cpi	r24, 0x2D	; 45
    3d9a:	61 f0       	breq	.+24     	; 0x3db4 <vfprintf+0xb8>
    3d9c:	80 33       	cpi	r24, 0x30	; 48
    3d9e:	69 f4       	brne	.+26     	; 0x3dba <vfprintf+0xbe>
    3da0:	23 2d       	mov	r18, r3
    3da2:	21 60       	ori	r18, 0x01	; 1
    3da4:	16 c0       	rjmp	.+44     	; 0x3dd2 <vfprintf+0xd6>
    3da6:	83 2d       	mov	r24, r3
    3da8:	82 60       	ori	r24, 0x02	; 2
    3daa:	38 2e       	mov	r3, r24
    3dac:	e3 2d       	mov	r30, r3
    3dae:	e4 60       	ori	r30, 0x04	; 4
    3db0:	3e 2e       	mov	r3, r30
    3db2:	2a c0       	rjmp	.+84     	; 0x3e08 <vfprintf+0x10c>
    3db4:	f3 2d       	mov	r31, r3
    3db6:	f8 60       	ori	r31, 0x08	; 8
    3db8:	1d c0       	rjmp	.+58     	; 0x3df4 <vfprintf+0xf8>
    3dba:	37 fc       	sbrc	r3, 7
    3dbc:	2d c0       	rjmp	.+90     	; 0x3e18 <vfprintf+0x11c>
    3dbe:	20 ed       	ldi	r18, 0xD0	; 208
    3dc0:	28 0f       	add	r18, r24
    3dc2:	2a 30       	cpi	r18, 0x0A	; 10
    3dc4:	40 f0       	brcs	.+16     	; 0x3dd6 <vfprintf+0xda>
    3dc6:	8e 32       	cpi	r24, 0x2E	; 46
    3dc8:	b9 f4       	brne	.+46     	; 0x3df8 <vfprintf+0xfc>
    3dca:	36 fc       	sbrc	r3, 6
    3dcc:	75 c1       	rjmp	.+746    	; 0x40b8 <vfprintf+0x3bc>
    3dce:	23 2d       	mov	r18, r3
    3dd0:	20 64       	ori	r18, 0x40	; 64
    3dd2:	32 2e       	mov	r3, r18
    3dd4:	19 c0       	rjmp	.+50     	; 0x3e08 <vfprintf+0x10c>
    3dd6:	36 fe       	sbrs	r3, 6
    3dd8:	06 c0       	rjmp	.+12     	; 0x3de6 <vfprintf+0xea>
    3dda:	8a e0       	ldi	r24, 0x0A	; 10
    3ddc:	98 9e       	mul	r9, r24
    3dde:	20 0d       	add	r18, r0
    3de0:	11 24       	eor	r1, r1
    3de2:	92 2e       	mov	r9, r18
    3de4:	11 c0       	rjmp	.+34     	; 0x3e08 <vfprintf+0x10c>
    3de6:	ea e0       	ldi	r30, 0x0A	; 10
    3de8:	2e 9e       	mul	r2, r30
    3dea:	20 0d       	add	r18, r0
    3dec:	11 24       	eor	r1, r1
    3dee:	22 2e       	mov	r2, r18
    3df0:	f3 2d       	mov	r31, r3
    3df2:	f0 62       	ori	r31, 0x20	; 32
    3df4:	3f 2e       	mov	r3, r31
    3df6:	08 c0       	rjmp	.+16     	; 0x3e08 <vfprintf+0x10c>
    3df8:	8c 36       	cpi	r24, 0x6C	; 108
    3dfa:	21 f4       	brne	.+8      	; 0x3e04 <vfprintf+0x108>
    3dfc:	83 2d       	mov	r24, r3
    3dfe:	80 68       	ori	r24, 0x80	; 128
    3e00:	38 2e       	mov	r3, r24
    3e02:	02 c0       	rjmp	.+4      	; 0x3e08 <vfprintf+0x10c>
    3e04:	88 36       	cpi	r24, 0x68	; 104
    3e06:	41 f4       	brne	.+16     	; 0x3e18 <vfprintf+0x11c>
    3e08:	f7 01       	movw	r30, r14
    3e0a:	93 fd       	sbrc	r25, 3
    3e0c:	85 91       	lpm	r24, Z+
    3e0e:	93 ff       	sbrs	r25, 3
    3e10:	81 91       	ld	r24, Z+
    3e12:	7f 01       	movw	r14, r30
    3e14:	81 11       	cpse	r24, r1
    3e16:	b3 cf       	rjmp	.-154    	; 0x3d7e <vfprintf+0x82>
    3e18:	98 2f       	mov	r25, r24
    3e1a:	9f 7d       	andi	r25, 0xDF	; 223
    3e1c:	95 54       	subi	r25, 0x45	; 69
    3e1e:	93 30       	cpi	r25, 0x03	; 3
    3e20:	28 f4       	brcc	.+10     	; 0x3e2c <vfprintf+0x130>
    3e22:	0c 5f       	subi	r16, 0xFC	; 252
    3e24:	1f 4f       	sbci	r17, 0xFF	; 255
    3e26:	9f e3       	ldi	r25, 0x3F	; 63
    3e28:	99 83       	std	Y+1, r25	; 0x01
    3e2a:	0d c0       	rjmp	.+26     	; 0x3e46 <vfprintf+0x14a>
    3e2c:	83 36       	cpi	r24, 0x63	; 99
    3e2e:	31 f0       	breq	.+12     	; 0x3e3c <vfprintf+0x140>
    3e30:	83 37       	cpi	r24, 0x73	; 115
    3e32:	71 f0       	breq	.+28     	; 0x3e50 <vfprintf+0x154>
    3e34:	83 35       	cpi	r24, 0x53	; 83
    3e36:	09 f0       	breq	.+2      	; 0x3e3a <vfprintf+0x13e>
    3e38:	55 c0       	rjmp	.+170    	; 0x3ee4 <vfprintf+0x1e8>
    3e3a:	20 c0       	rjmp	.+64     	; 0x3e7c <vfprintf+0x180>
    3e3c:	f8 01       	movw	r30, r16
    3e3e:	80 81       	ld	r24, Z
    3e40:	89 83       	std	Y+1, r24	; 0x01
    3e42:	0e 5f       	subi	r16, 0xFE	; 254
    3e44:	1f 4f       	sbci	r17, 0xFF	; 255
    3e46:	88 24       	eor	r8, r8
    3e48:	83 94       	inc	r8
    3e4a:	91 2c       	mov	r9, r1
    3e4c:	53 01       	movw	r10, r6
    3e4e:	12 c0       	rjmp	.+36     	; 0x3e74 <vfprintf+0x178>
    3e50:	28 01       	movw	r4, r16
    3e52:	f2 e0       	ldi	r31, 0x02	; 2
    3e54:	4f 0e       	add	r4, r31
    3e56:	51 1c       	adc	r5, r1
    3e58:	f8 01       	movw	r30, r16
    3e5a:	a0 80       	ld	r10, Z
    3e5c:	b1 80       	ldd	r11, Z+1	; 0x01
    3e5e:	36 fe       	sbrs	r3, 6
    3e60:	03 c0       	rjmp	.+6      	; 0x3e68 <vfprintf+0x16c>
    3e62:	69 2d       	mov	r22, r9
    3e64:	70 e0       	ldi	r23, 0x00	; 0
    3e66:	02 c0       	rjmp	.+4      	; 0x3e6c <vfprintf+0x170>
    3e68:	6f ef       	ldi	r22, 0xFF	; 255
    3e6a:	7f ef       	ldi	r23, 0xFF	; 255
    3e6c:	c5 01       	movw	r24, r10
    3e6e:	4e d1       	rcall	.+668    	; 0x410c <strnlen>
    3e70:	4c 01       	movw	r8, r24
    3e72:	82 01       	movw	r16, r4
    3e74:	f3 2d       	mov	r31, r3
    3e76:	ff 77       	andi	r31, 0x7F	; 127
    3e78:	3f 2e       	mov	r3, r31
    3e7a:	15 c0       	rjmp	.+42     	; 0x3ea6 <vfprintf+0x1aa>
    3e7c:	28 01       	movw	r4, r16
    3e7e:	22 e0       	ldi	r18, 0x02	; 2
    3e80:	42 0e       	add	r4, r18
    3e82:	51 1c       	adc	r5, r1
    3e84:	f8 01       	movw	r30, r16
    3e86:	a0 80       	ld	r10, Z
    3e88:	b1 80       	ldd	r11, Z+1	; 0x01
    3e8a:	36 fe       	sbrs	r3, 6
    3e8c:	03 c0       	rjmp	.+6      	; 0x3e94 <vfprintf+0x198>
    3e8e:	69 2d       	mov	r22, r9
    3e90:	70 e0       	ldi	r23, 0x00	; 0
    3e92:	02 c0       	rjmp	.+4      	; 0x3e98 <vfprintf+0x19c>
    3e94:	6f ef       	ldi	r22, 0xFF	; 255
    3e96:	7f ef       	ldi	r23, 0xFF	; 255
    3e98:	c5 01       	movw	r24, r10
    3e9a:	2d d1       	rcall	.+602    	; 0x40f6 <strnlen_P>
    3e9c:	4c 01       	movw	r8, r24
    3e9e:	f3 2d       	mov	r31, r3
    3ea0:	f0 68       	ori	r31, 0x80	; 128
    3ea2:	3f 2e       	mov	r3, r31
    3ea4:	82 01       	movw	r16, r4
    3ea6:	33 fc       	sbrc	r3, 3
    3ea8:	19 c0       	rjmp	.+50     	; 0x3edc <vfprintf+0x1e0>
    3eaa:	82 2d       	mov	r24, r2
    3eac:	90 e0       	ldi	r25, 0x00	; 0
    3eae:	88 16       	cp	r8, r24
    3eb0:	99 06       	cpc	r9, r25
    3eb2:	a0 f4       	brcc	.+40     	; 0x3edc <vfprintf+0x1e0>
    3eb4:	b6 01       	movw	r22, r12
    3eb6:	80 e2       	ldi	r24, 0x20	; 32
    3eb8:	90 e0       	ldi	r25, 0x00	; 0
    3eba:	33 d1       	rcall	.+614    	; 0x4122 <fputc>
    3ebc:	2a 94       	dec	r2
    3ebe:	f5 cf       	rjmp	.-22     	; 0x3eaa <vfprintf+0x1ae>
    3ec0:	f5 01       	movw	r30, r10
    3ec2:	37 fc       	sbrc	r3, 7
    3ec4:	85 91       	lpm	r24, Z+
    3ec6:	37 fe       	sbrs	r3, 7
    3ec8:	81 91       	ld	r24, Z+
    3eca:	5f 01       	movw	r10, r30
    3ecc:	b6 01       	movw	r22, r12
    3ece:	90 e0       	ldi	r25, 0x00	; 0
    3ed0:	28 d1       	rcall	.+592    	; 0x4122 <fputc>
    3ed2:	21 10       	cpse	r2, r1
    3ed4:	2a 94       	dec	r2
    3ed6:	21 e0       	ldi	r18, 0x01	; 1
    3ed8:	82 1a       	sub	r8, r18
    3eda:	91 08       	sbc	r9, r1
    3edc:	81 14       	cp	r8, r1
    3ede:	91 04       	cpc	r9, r1
    3ee0:	79 f7       	brne	.-34     	; 0x3ec0 <vfprintf+0x1c4>
    3ee2:	e1 c0       	rjmp	.+450    	; 0x40a6 <vfprintf+0x3aa>
    3ee4:	84 36       	cpi	r24, 0x64	; 100
    3ee6:	11 f0       	breq	.+4      	; 0x3eec <vfprintf+0x1f0>
    3ee8:	89 36       	cpi	r24, 0x69	; 105
    3eea:	39 f5       	brne	.+78     	; 0x3f3a <vfprintf+0x23e>
    3eec:	f8 01       	movw	r30, r16
    3eee:	37 fe       	sbrs	r3, 7
    3ef0:	07 c0       	rjmp	.+14     	; 0x3f00 <vfprintf+0x204>
    3ef2:	60 81       	ld	r22, Z
    3ef4:	71 81       	ldd	r23, Z+1	; 0x01
    3ef6:	82 81       	ldd	r24, Z+2	; 0x02
    3ef8:	93 81       	ldd	r25, Z+3	; 0x03
    3efa:	0c 5f       	subi	r16, 0xFC	; 252
    3efc:	1f 4f       	sbci	r17, 0xFF	; 255
    3efe:	08 c0       	rjmp	.+16     	; 0x3f10 <vfprintf+0x214>
    3f00:	60 81       	ld	r22, Z
    3f02:	71 81       	ldd	r23, Z+1	; 0x01
    3f04:	07 2e       	mov	r0, r23
    3f06:	00 0c       	add	r0, r0
    3f08:	88 0b       	sbc	r24, r24
    3f0a:	99 0b       	sbc	r25, r25
    3f0c:	0e 5f       	subi	r16, 0xFE	; 254
    3f0e:	1f 4f       	sbci	r17, 0xFF	; 255
    3f10:	f3 2d       	mov	r31, r3
    3f12:	ff 76       	andi	r31, 0x6F	; 111
    3f14:	3f 2e       	mov	r3, r31
    3f16:	97 ff       	sbrs	r25, 7
    3f18:	09 c0       	rjmp	.+18     	; 0x3f2c <vfprintf+0x230>
    3f1a:	90 95       	com	r25
    3f1c:	80 95       	com	r24
    3f1e:	70 95       	com	r23
    3f20:	61 95       	neg	r22
    3f22:	7f 4f       	sbci	r23, 0xFF	; 255
    3f24:	8f 4f       	sbci	r24, 0xFF	; 255
    3f26:	9f 4f       	sbci	r25, 0xFF	; 255
    3f28:	f0 68       	ori	r31, 0x80	; 128
    3f2a:	3f 2e       	mov	r3, r31
    3f2c:	2a e0       	ldi	r18, 0x0A	; 10
    3f2e:	30 e0       	ldi	r19, 0x00	; 0
    3f30:	a3 01       	movw	r20, r6
    3f32:	33 d1       	rcall	.+614    	; 0x419a <__ultoa_invert>
    3f34:	88 2e       	mov	r8, r24
    3f36:	86 18       	sub	r8, r6
    3f38:	44 c0       	rjmp	.+136    	; 0x3fc2 <vfprintf+0x2c6>
    3f3a:	85 37       	cpi	r24, 0x75	; 117
    3f3c:	31 f4       	brne	.+12     	; 0x3f4a <vfprintf+0x24e>
    3f3e:	23 2d       	mov	r18, r3
    3f40:	2f 7e       	andi	r18, 0xEF	; 239
    3f42:	b2 2e       	mov	r11, r18
    3f44:	2a e0       	ldi	r18, 0x0A	; 10
    3f46:	30 e0       	ldi	r19, 0x00	; 0
    3f48:	25 c0       	rjmp	.+74     	; 0x3f94 <vfprintf+0x298>
    3f4a:	93 2d       	mov	r25, r3
    3f4c:	99 7f       	andi	r25, 0xF9	; 249
    3f4e:	b9 2e       	mov	r11, r25
    3f50:	8f 36       	cpi	r24, 0x6F	; 111
    3f52:	c1 f0       	breq	.+48     	; 0x3f84 <vfprintf+0x288>
    3f54:	18 f4       	brcc	.+6      	; 0x3f5c <vfprintf+0x260>
    3f56:	88 35       	cpi	r24, 0x58	; 88
    3f58:	79 f0       	breq	.+30     	; 0x3f78 <vfprintf+0x27c>
    3f5a:	ae c0       	rjmp	.+348    	; 0x40b8 <vfprintf+0x3bc>
    3f5c:	80 37       	cpi	r24, 0x70	; 112
    3f5e:	19 f0       	breq	.+6      	; 0x3f66 <vfprintf+0x26a>
    3f60:	88 37       	cpi	r24, 0x78	; 120
    3f62:	21 f0       	breq	.+8      	; 0x3f6c <vfprintf+0x270>
    3f64:	a9 c0       	rjmp	.+338    	; 0x40b8 <vfprintf+0x3bc>
    3f66:	e9 2f       	mov	r30, r25
    3f68:	e0 61       	ori	r30, 0x10	; 16
    3f6a:	be 2e       	mov	r11, r30
    3f6c:	b4 fe       	sbrs	r11, 4
    3f6e:	0d c0       	rjmp	.+26     	; 0x3f8a <vfprintf+0x28e>
    3f70:	fb 2d       	mov	r31, r11
    3f72:	f4 60       	ori	r31, 0x04	; 4
    3f74:	bf 2e       	mov	r11, r31
    3f76:	09 c0       	rjmp	.+18     	; 0x3f8a <vfprintf+0x28e>
    3f78:	34 fe       	sbrs	r3, 4
    3f7a:	0a c0       	rjmp	.+20     	; 0x3f90 <vfprintf+0x294>
    3f7c:	29 2f       	mov	r18, r25
    3f7e:	26 60       	ori	r18, 0x06	; 6
    3f80:	b2 2e       	mov	r11, r18
    3f82:	06 c0       	rjmp	.+12     	; 0x3f90 <vfprintf+0x294>
    3f84:	28 e0       	ldi	r18, 0x08	; 8
    3f86:	30 e0       	ldi	r19, 0x00	; 0
    3f88:	05 c0       	rjmp	.+10     	; 0x3f94 <vfprintf+0x298>
    3f8a:	20 e1       	ldi	r18, 0x10	; 16
    3f8c:	30 e0       	ldi	r19, 0x00	; 0
    3f8e:	02 c0       	rjmp	.+4      	; 0x3f94 <vfprintf+0x298>
    3f90:	20 e1       	ldi	r18, 0x10	; 16
    3f92:	32 e0       	ldi	r19, 0x02	; 2
    3f94:	f8 01       	movw	r30, r16
    3f96:	b7 fe       	sbrs	r11, 7
    3f98:	07 c0       	rjmp	.+14     	; 0x3fa8 <vfprintf+0x2ac>
    3f9a:	60 81       	ld	r22, Z
    3f9c:	71 81       	ldd	r23, Z+1	; 0x01
    3f9e:	82 81       	ldd	r24, Z+2	; 0x02
    3fa0:	93 81       	ldd	r25, Z+3	; 0x03
    3fa2:	0c 5f       	subi	r16, 0xFC	; 252
    3fa4:	1f 4f       	sbci	r17, 0xFF	; 255
    3fa6:	06 c0       	rjmp	.+12     	; 0x3fb4 <vfprintf+0x2b8>
    3fa8:	60 81       	ld	r22, Z
    3faa:	71 81       	ldd	r23, Z+1	; 0x01
    3fac:	80 e0       	ldi	r24, 0x00	; 0
    3fae:	90 e0       	ldi	r25, 0x00	; 0
    3fb0:	0e 5f       	subi	r16, 0xFE	; 254
    3fb2:	1f 4f       	sbci	r17, 0xFF	; 255
    3fb4:	a3 01       	movw	r20, r6
    3fb6:	f1 d0       	rcall	.+482    	; 0x419a <__ultoa_invert>
    3fb8:	88 2e       	mov	r8, r24
    3fba:	86 18       	sub	r8, r6
    3fbc:	fb 2d       	mov	r31, r11
    3fbe:	ff 77       	andi	r31, 0x7F	; 127
    3fc0:	3f 2e       	mov	r3, r31
    3fc2:	36 fe       	sbrs	r3, 6
    3fc4:	0d c0       	rjmp	.+26     	; 0x3fe0 <vfprintf+0x2e4>
    3fc6:	23 2d       	mov	r18, r3
    3fc8:	2e 7f       	andi	r18, 0xFE	; 254
    3fca:	a2 2e       	mov	r10, r18
    3fcc:	89 14       	cp	r8, r9
    3fce:	58 f4       	brcc	.+22     	; 0x3fe6 <vfprintf+0x2ea>
    3fd0:	34 fe       	sbrs	r3, 4
    3fd2:	0b c0       	rjmp	.+22     	; 0x3fea <vfprintf+0x2ee>
    3fd4:	32 fc       	sbrc	r3, 2
    3fd6:	09 c0       	rjmp	.+18     	; 0x3fea <vfprintf+0x2ee>
    3fd8:	83 2d       	mov	r24, r3
    3fda:	8e 7e       	andi	r24, 0xEE	; 238
    3fdc:	a8 2e       	mov	r10, r24
    3fde:	05 c0       	rjmp	.+10     	; 0x3fea <vfprintf+0x2ee>
    3fe0:	b8 2c       	mov	r11, r8
    3fe2:	a3 2c       	mov	r10, r3
    3fe4:	03 c0       	rjmp	.+6      	; 0x3fec <vfprintf+0x2f0>
    3fe6:	b8 2c       	mov	r11, r8
    3fe8:	01 c0       	rjmp	.+2      	; 0x3fec <vfprintf+0x2f0>
    3fea:	b9 2c       	mov	r11, r9
    3fec:	a4 fe       	sbrs	r10, 4
    3fee:	0f c0       	rjmp	.+30     	; 0x400e <vfprintf+0x312>
    3ff0:	fe 01       	movw	r30, r28
    3ff2:	e8 0d       	add	r30, r8
    3ff4:	f1 1d       	adc	r31, r1
    3ff6:	80 81       	ld	r24, Z
    3ff8:	80 33       	cpi	r24, 0x30	; 48
    3ffa:	21 f4       	brne	.+8      	; 0x4004 <vfprintf+0x308>
    3ffc:	9a 2d       	mov	r25, r10
    3ffe:	99 7e       	andi	r25, 0xE9	; 233
    4000:	a9 2e       	mov	r10, r25
    4002:	09 c0       	rjmp	.+18     	; 0x4016 <vfprintf+0x31a>
    4004:	a2 fe       	sbrs	r10, 2
    4006:	06 c0       	rjmp	.+12     	; 0x4014 <vfprintf+0x318>
    4008:	b3 94       	inc	r11
    400a:	b3 94       	inc	r11
    400c:	04 c0       	rjmp	.+8      	; 0x4016 <vfprintf+0x31a>
    400e:	8a 2d       	mov	r24, r10
    4010:	86 78       	andi	r24, 0x86	; 134
    4012:	09 f0       	breq	.+2      	; 0x4016 <vfprintf+0x31a>
    4014:	b3 94       	inc	r11
    4016:	a3 fc       	sbrc	r10, 3
    4018:	10 c0       	rjmp	.+32     	; 0x403a <vfprintf+0x33e>
    401a:	a0 fe       	sbrs	r10, 0
    401c:	06 c0       	rjmp	.+12     	; 0x402a <vfprintf+0x32e>
    401e:	b2 14       	cp	r11, r2
    4020:	80 f4       	brcc	.+32     	; 0x4042 <vfprintf+0x346>
    4022:	28 0c       	add	r2, r8
    4024:	92 2c       	mov	r9, r2
    4026:	9b 18       	sub	r9, r11
    4028:	0d c0       	rjmp	.+26     	; 0x4044 <vfprintf+0x348>
    402a:	b2 14       	cp	r11, r2
    402c:	58 f4       	brcc	.+22     	; 0x4044 <vfprintf+0x348>
    402e:	b6 01       	movw	r22, r12
    4030:	80 e2       	ldi	r24, 0x20	; 32
    4032:	90 e0       	ldi	r25, 0x00	; 0
    4034:	76 d0       	rcall	.+236    	; 0x4122 <fputc>
    4036:	b3 94       	inc	r11
    4038:	f8 cf       	rjmp	.-16     	; 0x402a <vfprintf+0x32e>
    403a:	b2 14       	cp	r11, r2
    403c:	18 f4       	brcc	.+6      	; 0x4044 <vfprintf+0x348>
    403e:	2b 18       	sub	r2, r11
    4040:	02 c0       	rjmp	.+4      	; 0x4046 <vfprintf+0x34a>
    4042:	98 2c       	mov	r9, r8
    4044:	21 2c       	mov	r2, r1
    4046:	a4 fe       	sbrs	r10, 4
    4048:	0f c0       	rjmp	.+30     	; 0x4068 <vfprintf+0x36c>
    404a:	b6 01       	movw	r22, r12
    404c:	80 e3       	ldi	r24, 0x30	; 48
    404e:	90 e0       	ldi	r25, 0x00	; 0
    4050:	68 d0       	rcall	.+208    	; 0x4122 <fputc>
    4052:	a2 fe       	sbrs	r10, 2
    4054:	16 c0       	rjmp	.+44     	; 0x4082 <vfprintf+0x386>
    4056:	a1 fc       	sbrc	r10, 1
    4058:	03 c0       	rjmp	.+6      	; 0x4060 <vfprintf+0x364>
    405a:	88 e7       	ldi	r24, 0x78	; 120
    405c:	90 e0       	ldi	r25, 0x00	; 0
    405e:	02 c0       	rjmp	.+4      	; 0x4064 <vfprintf+0x368>
    4060:	88 e5       	ldi	r24, 0x58	; 88
    4062:	90 e0       	ldi	r25, 0x00	; 0
    4064:	b6 01       	movw	r22, r12
    4066:	0c c0       	rjmp	.+24     	; 0x4080 <vfprintf+0x384>
    4068:	8a 2d       	mov	r24, r10
    406a:	86 78       	andi	r24, 0x86	; 134
    406c:	51 f0       	breq	.+20     	; 0x4082 <vfprintf+0x386>
    406e:	a1 fe       	sbrs	r10, 1
    4070:	02 c0       	rjmp	.+4      	; 0x4076 <vfprintf+0x37a>
    4072:	8b e2       	ldi	r24, 0x2B	; 43
    4074:	01 c0       	rjmp	.+2      	; 0x4078 <vfprintf+0x37c>
    4076:	80 e2       	ldi	r24, 0x20	; 32
    4078:	a7 fc       	sbrc	r10, 7
    407a:	8d e2       	ldi	r24, 0x2D	; 45
    407c:	b6 01       	movw	r22, r12
    407e:	90 e0       	ldi	r25, 0x00	; 0
    4080:	50 d0       	rcall	.+160    	; 0x4122 <fputc>
    4082:	89 14       	cp	r8, r9
    4084:	30 f4       	brcc	.+12     	; 0x4092 <vfprintf+0x396>
    4086:	b6 01       	movw	r22, r12
    4088:	80 e3       	ldi	r24, 0x30	; 48
    408a:	90 e0       	ldi	r25, 0x00	; 0
    408c:	4a d0       	rcall	.+148    	; 0x4122 <fputc>
    408e:	9a 94       	dec	r9
    4090:	f8 cf       	rjmp	.-16     	; 0x4082 <vfprintf+0x386>
    4092:	8a 94       	dec	r8
    4094:	f3 01       	movw	r30, r6
    4096:	e8 0d       	add	r30, r8
    4098:	f1 1d       	adc	r31, r1
    409a:	80 81       	ld	r24, Z
    409c:	b6 01       	movw	r22, r12
    409e:	90 e0       	ldi	r25, 0x00	; 0
    40a0:	40 d0       	rcall	.+128    	; 0x4122 <fputc>
    40a2:	81 10       	cpse	r8, r1
    40a4:	f6 cf       	rjmp	.-20     	; 0x4092 <vfprintf+0x396>
    40a6:	22 20       	and	r2, r2
    40a8:	09 f4       	brne	.+2      	; 0x40ac <vfprintf+0x3b0>
    40aa:	4e ce       	rjmp	.-868    	; 0x3d48 <vfprintf+0x4c>
    40ac:	b6 01       	movw	r22, r12
    40ae:	80 e2       	ldi	r24, 0x20	; 32
    40b0:	90 e0       	ldi	r25, 0x00	; 0
    40b2:	37 d0       	rcall	.+110    	; 0x4122 <fputc>
    40b4:	2a 94       	dec	r2
    40b6:	f7 cf       	rjmp	.-18     	; 0x40a6 <vfprintf+0x3aa>
    40b8:	f6 01       	movw	r30, r12
    40ba:	86 81       	ldd	r24, Z+6	; 0x06
    40bc:	97 81       	ldd	r25, Z+7	; 0x07
    40be:	02 c0       	rjmp	.+4      	; 0x40c4 <vfprintf+0x3c8>
    40c0:	8f ef       	ldi	r24, 0xFF	; 255
    40c2:	9f ef       	ldi	r25, 0xFF	; 255
    40c4:	2b 96       	adiw	r28, 0x0b	; 11
    40c6:	0f b6       	in	r0, 0x3f	; 63
    40c8:	f8 94       	cli
    40ca:	de bf       	out	0x3e, r29	; 62
    40cc:	0f be       	out	0x3f, r0	; 63
    40ce:	cd bf       	out	0x3d, r28	; 61
    40d0:	df 91       	pop	r29
    40d2:	cf 91       	pop	r28
    40d4:	1f 91       	pop	r17
    40d6:	0f 91       	pop	r16
    40d8:	ff 90       	pop	r15
    40da:	ef 90       	pop	r14
    40dc:	df 90       	pop	r13
    40de:	cf 90       	pop	r12
    40e0:	bf 90       	pop	r11
    40e2:	af 90       	pop	r10
    40e4:	9f 90       	pop	r9
    40e6:	8f 90       	pop	r8
    40e8:	7f 90       	pop	r7
    40ea:	6f 90       	pop	r6
    40ec:	5f 90       	pop	r5
    40ee:	4f 90       	pop	r4
    40f0:	3f 90       	pop	r3
    40f2:	2f 90       	pop	r2
    40f4:	08 95       	ret

000040f6 <strnlen_P>:
    40f6:	fc 01       	movw	r30, r24
    40f8:	05 90       	lpm	r0, Z+
    40fa:	61 50       	subi	r22, 0x01	; 1
    40fc:	70 40       	sbci	r23, 0x00	; 0
    40fe:	01 10       	cpse	r0, r1
    4100:	d8 f7       	brcc	.-10     	; 0x40f8 <strnlen_P+0x2>
    4102:	80 95       	com	r24
    4104:	90 95       	com	r25
    4106:	8e 0f       	add	r24, r30
    4108:	9f 1f       	adc	r25, r31
    410a:	08 95       	ret

0000410c <strnlen>:
    410c:	fc 01       	movw	r30, r24
    410e:	61 50       	subi	r22, 0x01	; 1
    4110:	70 40       	sbci	r23, 0x00	; 0
    4112:	01 90       	ld	r0, Z+
    4114:	01 10       	cpse	r0, r1
    4116:	d8 f7       	brcc	.-10     	; 0x410e <strnlen+0x2>
    4118:	80 95       	com	r24
    411a:	90 95       	com	r25
    411c:	8e 0f       	add	r24, r30
    411e:	9f 1f       	adc	r25, r31
    4120:	08 95       	ret

00004122 <fputc>:
    4122:	0f 93       	push	r16
    4124:	1f 93       	push	r17
    4126:	cf 93       	push	r28
    4128:	df 93       	push	r29
    412a:	fb 01       	movw	r30, r22
    412c:	23 81       	ldd	r18, Z+3	; 0x03
    412e:	21 fd       	sbrc	r18, 1
    4130:	03 c0       	rjmp	.+6      	; 0x4138 <fputc+0x16>
    4132:	8f ef       	ldi	r24, 0xFF	; 255
    4134:	9f ef       	ldi	r25, 0xFF	; 255
    4136:	2c c0       	rjmp	.+88     	; 0x4190 <fputc+0x6e>
    4138:	22 ff       	sbrs	r18, 2
    413a:	16 c0       	rjmp	.+44     	; 0x4168 <fputc+0x46>
    413c:	46 81       	ldd	r20, Z+6	; 0x06
    413e:	57 81       	ldd	r21, Z+7	; 0x07
    4140:	24 81       	ldd	r18, Z+4	; 0x04
    4142:	35 81       	ldd	r19, Z+5	; 0x05
    4144:	42 17       	cp	r20, r18
    4146:	53 07       	cpc	r21, r19
    4148:	44 f4       	brge	.+16     	; 0x415a <fputc+0x38>
    414a:	a0 81       	ld	r26, Z
    414c:	b1 81       	ldd	r27, Z+1	; 0x01
    414e:	9d 01       	movw	r18, r26
    4150:	2f 5f       	subi	r18, 0xFF	; 255
    4152:	3f 4f       	sbci	r19, 0xFF	; 255
    4154:	31 83       	std	Z+1, r19	; 0x01
    4156:	20 83       	st	Z, r18
    4158:	8c 93       	st	X, r24
    415a:	26 81       	ldd	r18, Z+6	; 0x06
    415c:	37 81       	ldd	r19, Z+7	; 0x07
    415e:	2f 5f       	subi	r18, 0xFF	; 255
    4160:	3f 4f       	sbci	r19, 0xFF	; 255
    4162:	37 83       	std	Z+7, r19	; 0x07
    4164:	26 83       	std	Z+6, r18	; 0x06
    4166:	14 c0       	rjmp	.+40     	; 0x4190 <fputc+0x6e>
    4168:	8b 01       	movw	r16, r22
    416a:	ec 01       	movw	r28, r24
    416c:	fb 01       	movw	r30, r22
    416e:	00 84       	ldd	r0, Z+8	; 0x08
    4170:	f1 85       	ldd	r31, Z+9	; 0x09
    4172:	e0 2d       	mov	r30, r0
    4174:	19 95       	eicall
    4176:	89 2b       	or	r24, r25
    4178:	e1 f6       	brne	.-72     	; 0x4132 <fputc+0x10>
    417a:	d8 01       	movw	r26, r16
    417c:	16 96       	adiw	r26, 0x06	; 6
    417e:	8d 91       	ld	r24, X+
    4180:	9c 91       	ld	r25, X
    4182:	17 97       	sbiw	r26, 0x07	; 7
    4184:	01 96       	adiw	r24, 0x01	; 1
    4186:	17 96       	adiw	r26, 0x07	; 7
    4188:	9c 93       	st	X, r25
    418a:	8e 93       	st	-X, r24
    418c:	16 97       	sbiw	r26, 0x06	; 6
    418e:	ce 01       	movw	r24, r28
    4190:	df 91       	pop	r29
    4192:	cf 91       	pop	r28
    4194:	1f 91       	pop	r17
    4196:	0f 91       	pop	r16
    4198:	08 95       	ret

0000419a <__ultoa_invert>:
    419a:	fa 01       	movw	r30, r20
    419c:	aa 27       	eor	r26, r26
    419e:	28 30       	cpi	r18, 0x08	; 8
    41a0:	51 f1       	breq	.+84     	; 0x41f6 <__ultoa_invert+0x5c>
    41a2:	20 31       	cpi	r18, 0x10	; 16
    41a4:	81 f1       	breq	.+96     	; 0x4206 <__ultoa_invert+0x6c>
    41a6:	e8 94       	clt
    41a8:	6f 93       	push	r22
    41aa:	6e 7f       	andi	r22, 0xFE	; 254
    41ac:	6e 5f       	subi	r22, 0xFE	; 254
    41ae:	7f 4f       	sbci	r23, 0xFF	; 255
    41b0:	8f 4f       	sbci	r24, 0xFF	; 255
    41b2:	9f 4f       	sbci	r25, 0xFF	; 255
    41b4:	af 4f       	sbci	r26, 0xFF	; 255
    41b6:	b1 e0       	ldi	r27, 0x01	; 1
    41b8:	3e d0       	rcall	.+124    	; 0x4236 <__ultoa_invert+0x9c>
    41ba:	b4 e0       	ldi	r27, 0x04	; 4
    41bc:	3c d0       	rcall	.+120    	; 0x4236 <__ultoa_invert+0x9c>
    41be:	67 0f       	add	r22, r23
    41c0:	78 1f       	adc	r23, r24
    41c2:	89 1f       	adc	r24, r25
    41c4:	9a 1f       	adc	r25, r26
    41c6:	a1 1d       	adc	r26, r1
    41c8:	68 0f       	add	r22, r24
    41ca:	79 1f       	adc	r23, r25
    41cc:	8a 1f       	adc	r24, r26
    41ce:	91 1d       	adc	r25, r1
    41d0:	a1 1d       	adc	r26, r1
    41d2:	6a 0f       	add	r22, r26
    41d4:	71 1d       	adc	r23, r1
    41d6:	81 1d       	adc	r24, r1
    41d8:	91 1d       	adc	r25, r1
    41da:	a1 1d       	adc	r26, r1
    41dc:	20 d0       	rcall	.+64     	; 0x421e <__ultoa_invert+0x84>
    41de:	09 f4       	brne	.+2      	; 0x41e2 <__ultoa_invert+0x48>
    41e0:	68 94       	set
    41e2:	3f 91       	pop	r19
    41e4:	2a e0       	ldi	r18, 0x0A	; 10
    41e6:	26 9f       	mul	r18, r22
    41e8:	11 24       	eor	r1, r1
    41ea:	30 19       	sub	r19, r0
    41ec:	30 5d       	subi	r19, 0xD0	; 208
    41ee:	31 93       	st	Z+, r19
    41f0:	de f6       	brtc	.-74     	; 0x41a8 <__ultoa_invert+0xe>
    41f2:	cf 01       	movw	r24, r30
    41f4:	08 95       	ret
    41f6:	46 2f       	mov	r20, r22
    41f8:	47 70       	andi	r20, 0x07	; 7
    41fa:	40 5d       	subi	r20, 0xD0	; 208
    41fc:	41 93       	st	Z+, r20
    41fe:	b3 e0       	ldi	r27, 0x03	; 3
    4200:	0f d0       	rcall	.+30     	; 0x4220 <__ultoa_invert+0x86>
    4202:	c9 f7       	brne	.-14     	; 0x41f6 <__ultoa_invert+0x5c>
    4204:	f6 cf       	rjmp	.-20     	; 0x41f2 <__ultoa_invert+0x58>
    4206:	46 2f       	mov	r20, r22
    4208:	4f 70       	andi	r20, 0x0F	; 15
    420a:	40 5d       	subi	r20, 0xD0	; 208
    420c:	4a 33       	cpi	r20, 0x3A	; 58
    420e:	18 f0       	brcs	.+6      	; 0x4216 <__ultoa_invert+0x7c>
    4210:	49 5d       	subi	r20, 0xD9	; 217
    4212:	31 fd       	sbrc	r19, 1
    4214:	40 52       	subi	r20, 0x20	; 32
    4216:	41 93       	st	Z+, r20
    4218:	02 d0       	rcall	.+4      	; 0x421e <__ultoa_invert+0x84>
    421a:	a9 f7       	brne	.-22     	; 0x4206 <__ultoa_invert+0x6c>
    421c:	ea cf       	rjmp	.-44     	; 0x41f2 <__ultoa_invert+0x58>
    421e:	b4 e0       	ldi	r27, 0x04	; 4
    4220:	a6 95       	lsr	r26
    4222:	97 95       	ror	r25
    4224:	87 95       	ror	r24
    4226:	77 95       	ror	r23
    4228:	67 95       	ror	r22
    422a:	ba 95       	dec	r27
    422c:	c9 f7       	brne	.-14     	; 0x4220 <__ultoa_invert+0x86>
    422e:	00 97       	sbiw	r24, 0x00	; 0
    4230:	61 05       	cpc	r22, r1
    4232:	71 05       	cpc	r23, r1
    4234:	08 95       	ret
    4236:	9b 01       	movw	r18, r22
    4238:	ac 01       	movw	r20, r24
    423a:	0a 2e       	mov	r0, r26
    423c:	06 94       	lsr	r0
    423e:	57 95       	ror	r21
    4240:	47 95       	ror	r20
    4242:	37 95       	ror	r19
    4244:	27 95       	ror	r18
    4246:	ba 95       	dec	r27
    4248:	c9 f7       	brne	.-14     	; 0x423c <__ultoa_invert+0xa2>
    424a:	62 0f       	add	r22, r18
    424c:	73 1f       	adc	r23, r19
    424e:	84 1f       	adc	r24, r20
    4250:	95 1f       	adc	r25, r21
    4252:	a0 1d       	adc	r26, r0
    4254:	08 95       	ret

00004256 <_exit>:
    4256:	f8 94       	cli

00004258 <__stop_program>:
    4258:	ff cf       	rjmp	.-2      	; 0x4258 <__stop_program>
